// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddClusterServiceRequest struct {
	ClusterId       *string                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment         *string                            `json:"Comment,omitempty" xml:"Comment,omitempty"`
	RegionId        *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Service         []*AddClusterServiceRequestService `json:"Service,omitempty" xml:"Service,omitempty" type:"Repeated"`
}

func (s AddClusterServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddClusterServiceRequest) GoString() string {
	return s.String()
}

func (s *AddClusterServiceRequest) SetClusterId(v string) *AddClusterServiceRequest {
	s.ClusterId = &v
	return s
}

func (s *AddClusterServiceRequest) SetComment(v string) *AddClusterServiceRequest {
	s.Comment = &v
	return s
}

func (s *AddClusterServiceRequest) SetRegionId(v string) *AddClusterServiceRequest {
	s.RegionId = &v
	return s
}

func (s *AddClusterServiceRequest) SetResourceOwnerId(v int64) *AddClusterServiceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddClusterServiceRequest) SetService(v []*AddClusterServiceRequestService) *AddClusterServiceRequest {
	s.Service = v
	return s
}

type AddClusterServiceRequestService struct {
	ServiceName    *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceVersion *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
}

func (s AddClusterServiceRequestService) String() string {
	return tea.Prettify(s)
}

func (s AddClusterServiceRequestService) GoString() string {
	return s.String()
}

func (s *AddClusterServiceRequestService) SetServiceName(v string) *AddClusterServiceRequestService {
	s.ServiceName = &v
	return s
}

func (s *AddClusterServiceRequestService) SetServiceVersion(v string) *AddClusterServiceRequestService {
	s.ServiceVersion = &v
	return s
}

type AddClusterServiceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddClusterServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddClusterServiceResponseBody) GoString() string {
	return s.String()
}

func (s *AddClusterServiceResponseBody) SetRequestId(v string) *AddClusterServiceResponseBody {
	s.RequestId = &v
	return s
}

type AddClusterServiceResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddClusterServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddClusterServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddClusterServiceResponse) GoString() string {
	return s.String()
}

func (s *AddClusterServiceResponse) SetHeaders(v map[string]*string) *AddClusterServiceResponse {
	s.Headers = v
	return s
}

func (s *AddClusterServiceResponse) SetStatusCode(v int32) *AddClusterServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddClusterServiceResponse) SetBody(v *AddClusterServiceResponseBody) *AddClusterServiceResponse {
	s.Body = v
	return s
}

type AddScalingConfigItemV2Request struct {
	ConfigItemInformation *string `json:"ConfigItemInformation,omitempty" xml:"ConfigItemInformation,omitempty"`
	ConfigItemType        *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId       *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingGroupBizId     *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s AddScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s AddScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *AddScalingConfigItemV2Request) SetConfigItemInformation(v string) *AddScalingConfigItemV2Request {
	s.ConfigItemInformation = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetConfigItemType(v string) *AddScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetRegionId(v string) *AddScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetResourceGroupId(v string) *AddScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetResourceOwnerId(v int64) *AddScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetScalingGroupBizId(v string) *AddScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type AddScalingConfigItemV2ResponseBody struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *AddScalingConfigItemV2ResponseBody) SetData(v string) *AddScalingConfigItemV2ResponseBody {
	s.Data = &v
	return s
}

func (s *AddScalingConfigItemV2ResponseBody) SetRequestId(v string) *AddScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

type AddScalingConfigItemV2Response struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s AddScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *AddScalingConfigItemV2Response) SetHeaders(v map[string]*string) *AddScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *AddScalingConfigItemV2Response) SetStatusCode(v int32) *AddScalingConfigItemV2Response {
	s.StatusCode = &v
	return s
}

func (s *AddScalingConfigItemV2Response) SetBody(v *AddScalingConfigItemV2ResponseBody) *AddScalingConfigItemV2Response {
	s.Body = v
	return s
}

type CloneFlowRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CloneFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowRequest) GoString() string {
	return s.String()
}

func (s *CloneFlowRequest) SetId(v string) *CloneFlowRequest {
	s.Id = &v
	return s
}

func (s *CloneFlowRequest) SetProjectId(v string) *CloneFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *CloneFlowRequest) SetRegionId(v string) *CloneFlowRequest {
	s.RegionId = &v
	return s
}

type CloneFlowResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CloneFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CloneFlowResponseBody) SetId(v string) *CloneFlowResponseBody {
	s.Id = &v
	return s
}

func (s *CloneFlowResponseBody) SetRequestId(v string) *CloneFlowResponseBody {
	s.RequestId = &v
	return s
}

type CloneFlowResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloneFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloneFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowResponse) GoString() string {
	return s.String()
}

func (s *CloneFlowResponse) SetHeaders(v map[string]*string) *CloneFlowResponse {
	s.Headers = v
	return s
}

func (s *CloneFlowResponse) SetStatusCode(v int32) *CloneFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *CloneFlowResponse) SetBody(v *CloneFlowResponseBody) *CloneFlowResponse {
	s.Body = v
	return s
}

type CloneFlowJobRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CloneFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowJobRequest) GoString() string {
	return s.String()
}

func (s *CloneFlowJobRequest) SetId(v string) *CloneFlowJobRequest {
	s.Id = &v
	return s
}

func (s *CloneFlowJobRequest) SetName(v string) *CloneFlowJobRequest {
	s.Name = &v
	return s
}

func (s *CloneFlowJobRequest) SetProjectId(v string) *CloneFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *CloneFlowJobRequest) SetRegionId(v string) *CloneFlowJobRequest {
	s.RegionId = &v
	return s
}

type CloneFlowJobResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CloneFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *CloneFlowJobResponseBody) SetId(v string) *CloneFlowJobResponseBody {
	s.Id = &v
	return s
}

func (s *CloneFlowJobResponseBody) SetRequestId(v string) *CloneFlowJobResponseBody {
	s.RequestId = &v
	return s
}

type CloneFlowJobResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CloneFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CloneFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowJobResponse) GoString() string {
	return s.String()
}

func (s *CloneFlowJobResponse) SetHeaders(v map[string]*string) *CloneFlowJobResponse {
	s.Headers = v
	return s
}

func (s *CloneFlowJobResponse) SetStatusCode(v int32) *CloneFlowJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CloneFlowJobResponse) SetBody(v *CloneFlowJobResponseBody) *CloneFlowJobResponse {
	s.Body = v
	return s
}

type CreateClusterHostGroupRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	HostGroupName   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupParams *string `json:"HostGroupParams,omitempty" xml:"HostGroupParams,omitempty"`
	HostGroupType   *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	PayType         *string `json:"PayType,omitempty" xml:"PayType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	VswitchId       *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s CreateClusterHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterHostGroupRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterHostGroupRequest) SetClusterId(v string) *CreateClusterHostGroupRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetComment(v string) *CreateClusterHostGroupRequest {
	s.Comment = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetHostGroupName(v string) *CreateClusterHostGroupRequest {
	s.HostGroupName = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetHostGroupParams(v string) *CreateClusterHostGroupRequest {
	s.HostGroupParams = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetHostGroupType(v string) *CreateClusterHostGroupRequest {
	s.HostGroupType = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetPayType(v string) *CreateClusterHostGroupRequest {
	s.PayType = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetRegionId(v string) *CreateClusterHostGroupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetResourceOwnerId(v int64) *CreateClusterHostGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetSecurityGroupId(v string) *CreateClusterHostGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateClusterHostGroupRequest) SetVswitchId(v string) *CreateClusterHostGroupRequest {
	s.VswitchId = &v
	return s
}

type CreateClusterHostGroupResponseBody struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClusterHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterHostGroupResponseBody) SetClusterId(v string) *CreateClusterHostGroupResponseBody {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterHostGroupResponseBody) SetHostGroupId(v string) *CreateClusterHostGroupResponseBody {
	s.HostGroupId = &v
	return s
}

func (s *CreateClusterHostGroupResponseBody) SetRequestId(v string) *CreateClusterHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type CreateClusterHostGroupResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateClusterHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateClusterHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterHostGroupResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterHostGroupResponse) SetHeaders(v map[string]*string) *CreateClusterHostGroupResponse {
	s.Headers = v
	return s
}

func (s *CreateClusterHostGroupResponse) SetStatusCode(v int32) *CreateClusterHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateClusterHostGroupResponse) SetBody(v *CreateClusterHostGroupResponseBody) *CreateClusterHostGroupResponse {
	s.Body = v
	return s
}

type CreateClusterTemplateRequest struct {
	AutoRenew              *bool                                          `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	BootstrapAction        []*CreateClusterTemplateRequestBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
	ClientToken            *string                                        `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ClusterType            *string                                        `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Config                 []*CreateClusterTemplateRequestConfig          `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Configurations         *string                                        `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	DataDiskEncrypted      *bool                                          `json:"DataDiskEncrypted,omitempty" xml:"DataDiskEncrypted,omitempty"`
	DataDiskKMSKeyId       *string                                        `json:"DataDiskKMSKeyId,omitempty" xml:"DataDiskKMSKeyId,omitempty"`
	DepositType            *string                                        `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	EasEnable              *bool                                          `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	EmrVer                 *string                                        `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	HighAvailabilityEnable *bool                                          `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	HostGroup              []*CreateClusterTemplateRequestHostGroup       `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
	InitCustomHiveMetaDb   *bool                                          `json:"InitCustomHiveMetaDb,omitempty" xml:"InitCustomHiveMetaDb,omitempty"`
	InstanceGeneration     *string                                        `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	IoOptimized            *bool                                          `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	IsOpenPublicIp         *bool                                          `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	KeyPairName            *string                                        `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	LogPath                *string                                        `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	MachineType            *string                                        `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MasterPwd              *string                                        `json:"MasterPwd,omitempty" xml:"MasterPwd,omitempty"`
	MetaStoreConf          *string                                        `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	MetaStoreType          *string                                        `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	NetType                *string                                        `json:"NetType,omitempty" xml:"NetType,omitempty"`
	OptionSoftWareList     []*string                                      `json:"OptionSoftWareList,omitempty" xml:"OptionSoftWareList,omitempty" type:"Repeated"`
	Period                 *int32                                         `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId               *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId        *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId        *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId        *string                                        `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName      *string                                        `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	SshEnable              *bool                                          `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	Tag                    []*CreateClusterTemplateRequestTag             `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	TemplateName           *string                                        `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	UseCustomHiveMetaDb    *bool                                          `json:"UseCustomHiveMetaDb,omitempty" xml:"UseCustomHiveMetaDb,omitempty"`
	UseLocalMetaDb         *bool                                          `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	UserDefinedEmrEcsRole  *string                                        `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	VSwitchId              *string                                        `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// VPC ID。
	VpcId  *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateClusterTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequest) SetAutoRenew(v bool) *CreateClusterTemplateRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetBootstrapAction(v []*CreateClusterTemplateRequestBootstrapAction) *CreateClusterTemplateRequest {
	s.BootstrapAction = v
	return s
}

func (s *CreateClusterTemplateRequest) SetClientToken(v string) *CreateClusterTemplateRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetClusterType(v string) *CreateClusterTemplateRequest {
	s.ClusterType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetConfig(v []*CreateClusterTemplateRequestConfig) *CreateClusterTemplateRequest {
	s.Config = v
	return s
}

func (s *CreateClusterTemplateRequest) SetConfigurations(v string) *CreateClusterTemplateRequest {
	s.Configurations = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetDataDiskEncrypted(v bool) *CreateClusterTemplateRequest {
	s.DataDiskEncrypted = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetDataDiskKMSKeyId(v string) *CreateClusterTemplateRequest {
	s.DataDiskKMSKeyId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetDepositType(v string) *CreateClusterTemplateRequest {
	s.DepositType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetEasEnable(v bool) *CreateClusterTemplateRequest {
	s.EasEnable = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetEmrVer(v string) *CreateClusterTemplateRequest {
	s.EmrVer = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetHighAvailabilityEnable(v bool) *CreateClusterTemplateRequest {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetHostGroup(v []*CreateClusterTemplateRequestHostGroup) *CreateClusterTemplateRequest {
	s.HostGroup = v
	return s
}

func (s *CreateClusterTemplateRequest) SetInitCustomHiveMetaDb(v bool) *CreateClusterTemplateRequest {
	s.InitCustomHiveMetaDb = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetInstanceGeneration(v string) *CreateClusterTemplateRequest {
	s.InstanceGeneration = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetIoOptimized(v bool) *CreateClusterTemplateRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetIsOpenPublicIp(v bool) *CreateClusterTemplateRequest {
	s.IsOpenPublicIp = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetKeyPairName(v string) *CreateClusterTemplateRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetLogPath(v string) *CreateClusterTemplateRequest {
	s.LogPath = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetMachineType(v string) *CreateClusterTemplateRequest {
	s.MachineType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetMasterPwd(v string) *CreateClusterTemplateRequest {
	s.MasterPwd = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetMetaStoreConf(v string) *CreateClusterTemplateRequest {
	s.MetaStoreConf = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetMetaStoreType(v string) *CreateClusterTemplateRequest {
	s.MetaStoreType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetNetType(v string) *CreateClusterTemplateRequest {
	s.NetType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetOptionSoftWareList(v []*string) *CreateClusterTemplateRequest {
	s.OptionSoftWareList = v
	return s
}

func (s *CreateClusterTemplateRequest) SetPeriod(v int32) *CreateClusterTemplateRequest {
	s.Period = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetRegionId(v string) *CreateClusterTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetResourceGroupId(v string) *CreateClusterTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetResourceOwnerId(v int64) *CreateClusterTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetSecurityGroupId(v string) *CreateClusterTemplateRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetSecurityGroupName(v string) *CreateClusterTemplateRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetSshEnable(v bool) *CreateClusterTemplateRequest {
	s.SshEnable = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetTag(v []*CreateClusterTemplateRequestTag) *CreateClusterTemplateRequest {
	s.Tag = v
	return s
}

func (s *CreateClusterTemplateRequest) SetTemplateName(v string) *CreateClusterTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetUseCustomHiveMetaDb(v bool) *CreateClusterTemplateRequest {
	s.UseCustomHiveMetaDb = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetUseLocalMetaDb(v bool) *CreateClusterTemplateRequest {
	s.UseLocalMetaDb = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetUserDefinedEmrEcsRole(v string) *CreateClusterTemplateRequest {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetVSwitchId(v string) *CreateClusterTemplateRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetVpcId(v string) *CreateClusterTemplateRequest {
	s.VpcId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetZoneId(v string) *CreateClusterTemplateRequest {
	s.ZoneId = &v
	return s
}

type CreateClusterTemplateRequestBootstrapAction struct {
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s CreateClusterTemplateRequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetArg(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetExecutionFailStrategy(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetExecutionMoment(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetExecutionTarget(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetName(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.Name = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetPath(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.Path = &v
	return s
}

type CreateClusterTemplateRequestConfig struct {
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s CreateClusterTemplateRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequestConfig) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequestConfig) SetConfigKey(v string) *CreateClusterTemplateRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetConfigValue(v string) *CreateClusterTemplateRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetEncrypt(v string) *CreateClusterTemplateRequestConfig {
	s.Encrypt = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetFileName(v string) *CreateClusterTemplateRequestConfig {
	s.FileName = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetReplace(v string) *CreateClusterTemplateRequestConfig {
	s.Replace = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetServiceName(v string) *CreateClusterTemplateRequestConfig {
	s.ServiceName = &v
	return s
}

type CreateClusterTemplateRequestHostGroup struct {
	AutoRenew                       *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ChargeType                      *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClusterId                       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment                         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateType                      *string `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DiskCapacity                    *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	DiskCount                       *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	DiskType                        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId                     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName                   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupType                   *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	InstanceType                    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MultiInstanceTypes              *string `json:"MultiInstanceTypes,omitempty" xml:"MultiInstanceTypes,omitempty"`
	NodeCount                       *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	Period                          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PrivatePoolOptionsId            *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	PrivatePoolOptionsMatchCriteria *string `json:"PrivatePoolOptionsMatchCriteria,omitempty" xml:"PrivatePoolOptionsMatchCriteria,omitempty"`
	SysDiskCapacity                 *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	SysDiskType                     *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	VSwitchId                       *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateClusterTemplateRequestHostGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequestHostGroup) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequestHostGroup) SetAutoRenew(v bool) *CreateClusterTemplateRequestHostGroup {
	s.AutoRenew = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetChargeType(v string) *CreateClusterTemplateRequestHostGroup {
	s.ChargeType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetClusterId(v string) *CreateClusterTemplateRequestHostGroup {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetComment(v string) *CreateClusterTemplateRequestHostGroup {
	s.Comment = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetCreateType(v string) *CreateClusterTemplateRequestHostGroup {
	s.CreateType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetDiskCapacity(v int32) *CreateClusterTemplateRequestHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetDiskCount(v int32) *CreateClusterTemplateRequestHostGroup {
	s.DiskCount = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetDiskType(v string) *CreateClusterTemplateRequestHostGroup {
	s.DiskType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetHostGroupId(v string) *CreateClusterTemplateRequestHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetHostGroupName(v string) *CreateClusterTemplateRequestHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetHostGroupType(v string) *CreateClusterTemplateRequestHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetInstanceType(v string) *CreateClusterTemplateRequestHostGroup {
	s.InstanceType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetMultiInstanceTypes(v string) *CreateClusterTemplateRequestHostGroup {
	s.MultiInstanceTypes = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetNodeCount(v int32) *CreateClusterTemplateRequestHostGroup {
	s.NodeCount = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetPeriod(v int32) *CreateClusterTemplateRequestHostGroup {
	s.Period = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetPrivatePoolOptionsId(v string) *CreateClusterTemplateRequestHostGroup {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetPrivatePoolOptionsMatchCriteria(v string) *CreateClusterTemplateRequestHostGroup {
	s.PrivatePoolOptionsMatchCriteria = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetSysDiskCapacity(v int32) *CreateClusterTemplateRequestHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetSysDiskType(v string) *CreateClusterTemplateRequestHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetVSwitchId(v string) *CreateClusterTemplateRequestHostGroup {
	s.VSwitchId = &v
	return s
}

type CreateClusterTemplateRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateClusterTemplateRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequestTag) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequestTag) SetKey(v string) *CreateClusterTemplateRequestTag {
	s.Key = &v
	return s
}

func (s *CreateClusterTemplateRequestTag) SetValue(v string) *CreateClusterTemplateRequestTag {
	s.Value = &v
	return s
}

type CreateClusterTemplateResponseBody struct {
	ClusterTemplateId *string `json:"ClusterTemplateId,omitempty" xml:"ClusterTemplateId,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClusterTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateResponseBody) SetClusterTemplateId(v string) *CreateClusterTemplateResponseBody {
	s.ClusterTemplateId = &v
	return s
}

func (s *CreateClusterTemplateResponseBody) SetRequestId(v string) *CreateClusterTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateClusterTemplateResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateClusterTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateClusterTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateResponse) SetHeaders(v map[string]*string) *CreateClusterTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateClusterTemplateResponse) SetStatusCode(v int32) *CreateClusterTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateClusterTemplateResponse) SetBody(v *CreateClusterTemplateResponseBody) *CreateClusterTemplateResponse {
	s.Body = v
	return s
}

type CreateClusterV2Request struct {
	AuthorizeContent       *string                                    `json:"AuthorizeContent,omitempty" xml:"AuthorizeContent,omitempty"`
	AutoPayOrder           *bool                                      `json:"AutoPayOrder,omitempty" xml:"AutoPayOrder,omitempty"`
	AutoRenew              *bool                                      `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	BootstrapAction        []*CreateClusterV2RequestBootstrapAction   `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
	ChargeType             *string                                    `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClickHouseConf         *string                                    `json:"ClickHouseConf,omitempty" xml:"ClickHouseConf,omitempty"`
	ClientToken            *string                                    `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ClusterType            *string                                    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Config                 []*CreateClusterV2RequestConfig            `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Configurations         *string                                    `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	DataDiskEncrypted      *bool                                      `json:"DataDiskEncrypted,omitempty" xml:"DataDiskEncrypted,omitempty"`
	DataDiskKMSKeyId       *string                                    `json:"DataDiskKMSKeyId,omitempty" xml:"DataDiskKMSKeyId,omitempty"`
	DepositType            *string                                    `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	EasEnable              *bool                                      `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	EmrVer                 *string                                    `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ExtraAttributes        *string                                    `json:"ExtraAttributes,omitempty" xml:"ExtraAttributes,omitempty"`
	HighAvailabilityEnable *bool                                      `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	HostComponentInfo      []*CreateClusterV2RequestHostComponentInfo `json:"HostComponentInfo,omitempty" xml:"HostComponentInfo,omitempty" type:"Repeated"`
	HostGroup              []*CreateClusterV2RequestHostGroup         `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
	InitCustomHiveMetaDB   *bool                                      `json:"InitCustomHiveMetaDB,omitempty" xml:"InitCustomHiveMetaDB,omitempty"`
	InstanceGeneration     *string                                    `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	IoOptimized            *bool                                      `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	IsOpenPublicIp         *bool                                      `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	KeyPairName            *string                                    `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	LogPath                *string                                    `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	MachineType            *string                                    `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MasterPwd              *string                                    `json:"MasterPwd,omitempty" xml:"MasterPwd,omitempty"`
	MetaStoreConf          *string                                    `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	MetaStoreType          *string                                    `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	Name                   *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	NetType                *string                                    `json:"NetType,omitempty" xml:"NetType,omitempty"`
	OptionSoftWareList     []*string                                  `json:"OptionSoftWareList,omitempty" xml:"OptionSoftWareList,omitempty" type:"Repeated"`
	Period                 *int32                                     `json:"Period,omitempty" xml:"Period,omitempty"`
	PromotionInfo          []*CreateClusterV2RequestPromotionInfo     `json:"PromotionInfo,omitempty" xml:"PromotionInfo,omitempty" type:"Repeated"`
	RegionId               *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RelatedClusterId       *string                                    `json:"RelatedClusterId,omitempty" xml:"RelatedClusterId,omitempty"`
	ResourceGroupId        *string                                    `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId        *int64                                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId        *string                                    `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName      *string                                    `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ServiceInfo            []*CreateClusterV2RequestServiceInfo       `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" type:"Repeated"`
	SshEnable              *bool                                      `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	Tag                    []*CreateClusterV2RequestTag               `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	UseCustomHiveMetaDB    *bool                                      `json:"UseCustomHiveMetaDB,omitempty" xml:"UseCustomHiveMetaDB,omitempty"`
	UseLocalMetaDb         *bool                                      `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	UserDefinedEmrEcsRole  *string                                    `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	UserInfo               []*CreateClusterV2RequestUserInfo          `json:"UserInfo,omitempty" xml:"UserInfo,omitempty" type:"Repeated"`
	VSwitchId              *string                                    `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// VPC ID。
	VpcId         *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	WhiteListType *string `json:"WhiteListType,omitempty" xml:"WhiteListType,omitempty"`
	ZoneId        *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateClusterV2Request) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2Request) GoString() string {
	return s.String()
}

func (s *CreateClusterV2Request) SetAuthorizeContent(v string) *CreateClusterV2Request {
	s.AuthorizeContent = &v
	return s
}

func (s *CreateClusterV2Request) SetAutoPayOrder(v bool) *CreateClusterV2Request {
	s.AutoPayOrder = &v
	return s
}

func (s *CreateClusterV2Request) SetAutoRenew(v bool) *CreateClusterV2Request {
	s.AutoRenew = &v
	return s
}

func (s *CreateClusterV2Request) SetBootstrapAction(v []*CreateClusterV2RequestBootstrapAction) *CreateClusterV2Request {
	s.BootstrapAction = v
	return s
}

func (s *CreateClusterV2Request) SetChargeType(v string) *CreateClusterV2Request {
	s.ChargeType = &v
	return s
}

func (s *CreateClusterV2Request) SetClickHouseConf(v string) *CreateClusterV2Request {
	s.ClickHouseConf = &v
	return s
}

func (s *CreateClusterV2Request) SetClientToken(v string) *CreateClusterV2Request {
	s.ClientToken = &v
	return s
}

func (s *CreateClusterV2Request) SetClusterType(v string) *CreateClusterV2Request {
	s.ClusterType = &v
	return s
}

func (s *CreateClusterV2Request) SetConfig(v []*CreateClusterV2RequestConfig) *CreateClusterV2Request {
	s.Config = v
	return s
}

func (s *CreateClusterV2Request) SetConfigurations(v string) *CreateClusterV2Request {
	s.Configurations = &v
	return s
}

func (s *CreateClusterV2Request) SetDataDiskEncrypted(v bool) *CreateClusterV2Request {
	s.DataDiskEncrypted = &v
	return s
}

func (s *CreateClusterV2Request) SetDataDiskKMSKeyId(v string) *CreateClusterV2Request {
	s.DataDiskKMSKeyId = &v
	return s
}

func (s *CreateClusterV2Request) SetDepositType(v string) *CreateClusterV2Request {
	s.DepositType = &v
	return s
}

func (s *CreateClusterV2Request) SetEasEnable(v bool) *CreateClusterV2Request {
	s.EasEnable = &v
	return s
}

func (s *CreateClusterV2Request) SetEmrVer(v string) *CreateClusterV2Request {
	s.EmrVer = &v
	return s
}

func (s *CreateClusterV2Request) SetExtraAttributes(v string) *CreateClusterV2Request {
	s.ExtraAttributes = &v
	return s
}

func (s *CreateClusterV2Request) SetHighAvailabilityEnable(v bool) *CreateClusterV2Request {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *CreateClusterV2Request) SetHostComponentInfo(v []*CreateClusterV2RequestHostComponentInfo) *CreateClusterV2Request {
	s.HostComponentInfo = v
	return s
}

func (s *CreateClusterV2Request) SetHostGroup(v []*CreateClusterV2RequestHostGroup) *CreateClusterV2Request {
	s.HostGroup = v
	return s
}

func (s *CreateClusterV2Request) SetInitCustomHiveMetaDB(v bool) *CreateClusterV2Request {
	s.InitCustomHiveMetaDB = &v
	return s
}

func (s *CreateClusterV2Request) SetInstanceGeneration(v string) *CreateClusterV2Request {
	s.InstanceGeneration = &v
	return s
}

func (s *CreateClusterV2Request) SetIoOptimized(v bool) *CreateClusterV2Request {
	s.IoOptimized = &v
	return s
}

func (s *CreateClusterV2Request) SetIsOpenPublicIp(v bool) *CreateClusterV2Request {
	s.IsOpenPublicIp = &v
	return s
}

func (s *CreateClusterV2Request) SetKeyPairName(v string) *CreateClusterV2Request {
	s.KeyPairName = &v
	return s
}

func (s *CreateClusterV2Request) SetLogPath(v string) *CreateClusterV2Request {
	s.LogPath = &v
	return s
}

func (s *CreateClusterV2Request) SetMachineType(v string) *CreateClusterV2Request {
	s.MachineType = &v
	return s
}

func (s *CreateClusterV2Request) SetMasterPwd(v string) *CreateClusterV2Request {
	s.MasterPwd = &v
	return s
}

func (s *CreateClusterV2Request) SetMetaStoreConf(v string) *CreateClusterV2Request {
	s.MetaStoreConf = &v
	return s
}

func (s *CreateClusterV2Request) SetMetaStoreType(v string) *CreateClusterV2Request {
	s.MetaStoreType = &v
	return s
}

func (s *CreateClusterV2Request) SetName(v string) *CreateClusterV2Request {
	s.Name = &v
	return s
}

func (s *CreateClusterV2Request) SetNetType(v string) *CreateClusterV2Request {
	s.NetType = &v
	return s
}

func (s *CreateClusterV2Request) SetOptionSoftWareList(v []*string) *CreateClusterV2Request {
	s.OptionSoftWareList = v
	return s
}

func (s *CreateClusterV2Request) SetPeriod(v int32) *CreateClusterV2Request {
	s.Period = &v
	return s
}

func (s *CreateClusterV2Request) SetPromotionInfo(v []*CreateClusterV2RequestPromotionInfo) *CreateClusterV2Request {
	s.PromotionInfo = v
	return s
}

func (s *CreateClusterV2Request) SetRegionId(v string) *CreateClusterV2Request {
	s.RegionId = &v
	return s
}

func (s *CreateClusterV2Request) SetRelatedClusterId(v string) *CreateClusterV2Request {
	s.RelatedClusterId = &v
	return s
}

func (s *CreateClusterV2Request) SetResourceGroupId(v string) *CreateClusterV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateClusterV2Request) SetResourceOwnerId(v int64) *CreateClusterV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateClusterV2Request) SetSecurityGroupId(v string) *CreateClusterV2Request {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateClusterV2Request) SetSecurityGroupName(v string) *CreateClusterV2Request {
	s.SecurityGroupName = &v
	return s
}

func (s *CreateClusterV2Request) SetServiceInfo(v []*CreateClusterV2RequestServiceInfo) *CreateClusterV2Request {
	s.ServiceInfo = v
	return s
}

func (s *CreateClusterV2Request) SetSshEnable(v bool) *CreateClusterV2Request {
	s.SshEnable = &v
	return s
}

func (s *CreateClusterV2Request) SetTag(v []*CreateClusterV2RequestTag) *CreateClusterV2Request {
	s.Tag = v
	return s
}

func (s *CreateClusterV2Request) SetUseCustomHiveMetaDB(v bool) *CreateClusterV2Request {
	s.UseCustomHiveMetaDB = &v
	return s
}

func (s *CreateClusterV2Request) SetUseLocalMetaDb(v bool) *CreateClusterV2Request {
	s.UseLocalMetaDb = &v
	return s
}

func (s *CreateClusterV2Request) SetUserDefinedEmrEcsRole(v string) *CreateClusterV2Request {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *CreateClusterV2Request) SetUserInfo(v []*CreateClusterV2RequestUserInfo) *CreateClusterV2Request {
	s.UserInfo = v
	return s
}

func (s *CreateClusterV2Request) SetVSwitchId(v string) *CreateClusterV2Request {
	s.VSwitchId = &v
	return s
}

func (s *CreateClusterV2Request) SetVpcId(v string) *CreateClusterV2Request {
	s.VpcId = &v
	return s
}

func (s *CreateClusterV2Request) SetWhiteListType(v string) *CreateClusterV2Request {
	s.WhiteListType = &v
	return s
}

func (s *CreateClusterV2Request) SetZoneId(v string) *CreateClusterV2Request {
	s.ZoneId = &v
	return s
}

type CreateClusterV2RequestBootstrapAction struct {
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s CreateClusterV2RequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestBootstrapAction) SetArg(v string) *CreateClusterV2RequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetExecutionFailStrategy(v string) *CreateClusterV2RequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetExecutionMoment(v string) *CreateClusterV2RequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetExecutionTarget(v string) *CreateClusterV2RequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetName(v string) *CreateClusterV2RequestBootstrapAction {
	s.Name = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetPath(v string) *CreateClusterV2RequestBootstrapAction {
	s.Path = &v
	return s
}

type CreateClusterV2RequestConfig struct {
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s CreateClusterV2RequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestConfig) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestConfig) SetConfigKey(v string) *CreateClusterV2RequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetConfigValue(v string) *CreateClusterV2RequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetEncrypt(v string) *CreateClusterV2RequestConfig {
	s.Encrypt = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetFileName(v string) *CreateClusterV2RequestConfig {
	s.FileName = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetReplace(v string) *CreateClusterV2RequestConfig {
	s.Replace = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetServiceName(v string) *CreateClusterV2RequestConfig {
	s.ServiceName = &v
	return s
}

type CreateClusterV2RequestHostComponentInfo struct {
	ComponentNameList []*string `json:"ComponentNameList,omitempty" xml:"ComponentNameList,omitempty" type:"Repeated"`
	HostName          *string   `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ServiceName       *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s CreateClusterV2RequestHostComponentInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestHostComponentInfo) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestHostComponentInfo) SetComponentNameList(v []*string) *CreateClusterV2RequestHostComponentInfo {
	s.ComponentNameList = v
	return s
}

func (s *CreateClusterV2RequestHostComponentInfo) SetHostName(v string) *CreateClusterV2RequestHostComponentInfo {
	s.HostName = &v
	return s
}

func (s *CreateClusterV2RequestHostComponentInfo) SetServiceName(v string) *CreateClusterV2RequestHostComponentInfo {
	s.ServiceName = &v
	return s
}

type CreateClusterV2RequestHostGroup struct {
	AutoRenew                       *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ChargeType                      *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClusterId                       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment                         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateType                      *string `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DiskCapacity                    *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	DiskCount                       *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	DiskType                        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	GpuDriver                       *string `json:"GpuDriver,omitempty" xml:"GpuDriver,omitempty"`
	HostGroupId                     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName                   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupType                   *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	InstanceType                    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NodeCount                       *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	Period                          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PrivatePoolOptionsId            *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	PrivatePoolOptionsMatchCriteria *string `json:"PrivatePoolOptionsMatchCriteria,omitempty" xml:"PrivatePoolOptionsMatchCriteria,omitempty"`
	SysDiskCapacity                 *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	SysDiskType                     *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	VSwitchId                       *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s CreateClusterV2RequestHostGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestHostGroup) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestHostGroup) SetAutoRenew(v bool) *CreateClusterV2RequestHostGroup {
	s.AutoRenew = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetChargeType(v string) *CreateClusterV2RequestHostGroup {
	s.ChargeType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetClusterId(v string) *CreateClusterV2RequestHostGroup {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetComment(v string) *CreateClusterV2RequestHostGroup {
	s.Comment = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetCreateType(v string) *CreateClusterV2RequestHostGroup {
	s.CreateType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetDiskCapacity(v int32) *CreateClusterV2RequestHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetDiskCount(v int32) *CreateClusterV2RequestHostGroup {
	s.DiskCount = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetDiskType(v string) *CreateClusterV2RequestHostGroup {
	s.DiskType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetGpuDriver(v string) *CreateClusterV2RequestHostGroup {
	s.GpuDriver = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetHostGroupId(v string) *CreateClusterV2RequestHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetHostGroupName(v string) *CreateClusterV2RequestHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetHostGroupType(v string) *CreateClusterV2RequestHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetInstanceType(v string) *CreateClusterV2RequestHostGroup {
	s.InstanceType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetNodeCount(v int32) *CreateClusterV2RequestHostGroup {
	s.NodeCount = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetPeriod(v int32) *CreateClusterV2RequestHostGroup {
	s.Period = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetPrivatePoolOptionsId(v string) *CreateClusterV2RequestHostGroup {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetPrivatePoolOptionsMatchCriteria(v string) *CreateClusterV2RequestHostGroup {
	s.PrivatePoolOptionsMatchCriteria = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetSysDiskCapacity(v int32) *CreateClusterV2RequestHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetSysDiskType(v string) *CreateClusterV2RequestHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetVSwitchId(v string) *CreateClusterV2RequestHostGroup {
	s.VSwitchId = &v
	return s
}

type CreateClusterV2RequestPromotionInfo struct {
	ProductCode         *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	PromotionOptionCode *string `json:"PromotionOptionCode,omitempty" xml:"PromotionOptionCode,omitempty"`
	PromotionOptionNo   *string `json:"PromotionOptionNo,omitempty" xml:"PromotionOptionNo,omitempty"`
}

func (s CreateClusterV2RequestPromotionInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestPromotionInfo) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestPromotionInfo) SetProductCode(v string) *CreateClusterV2RequestPromotionInfo {
	s.ProductCode = &v
	return s
}

func (s *CreateClusterV2RequestPromotionInfo) SetPromotionOptionCode(v string) *CreateClusterV2RequestPromotionInfo {
	s.PromotionOptionCode = &v
	return s
}

func (s *CreateClusterV2RequestPromotionInfo) SetPromotionOptionNo(v string) *CreateClusterV2RequestPromotionInfo {
	s.PromotionOptionNo = &v
	return s
}

type CreateClusterV2RequestServiceInfo struct {
	ServiceName    *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceVersion *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
}

func (s CreateClusterV2RequestServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestServiceInfo) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestServiceInfo) SetServiceName(v string) *CreateClusterV2RequestServiceInfo {
	s.ServiceName = &v
	return s
}

func (s *CreateClusterV2RequestServiceInfo) SetServiceVersion(v string) *CreateClusterV2RequestServiceInfo {
	s.ServiceVersion = &v
	return s
}

type CreateClusterV2RequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateClusterV2RequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestTag) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestTag) SetKey(v string) *CreateClusterV2RequestTag {
	s.Key = &v
	return s
}

func (s *CreateClusterV2RequestTag) SetValue(v string) *CreateClusterV2RequestTag {
	s.Value = &v
	return s
}

type CreateClusterV2RequestUserInfo struct {
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateClusterV2RequestUserInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestUserInfo) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestUserInfo) SetPassword(v string) *CreateClusterV2RequestUserInfo {
	s.Password = &v
	return s
}

func (s *CreateClusterV2RequestUserInfo) SetUserId(v string) *CreateClusterV2RequestUserInfo {
	s.UserId = &v
	return s
}

func (s *CreateClusterV2RequestUserInfo) SetUserName(v string) *CreateClusterV2RequestUserInfo {
	s.UserName = &v
	return s
}

type CreateClusterV2ResponseBody struct {
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CoreOrderId   *string `json:"CoreOrderId,omitempty" xml:"CoreOrderId,omitempty"`
	EmrOrderId    *string `json:"EmrOrderId,omitempty" xml:"EmrOrderId,omitempty"`
	MasterOrderId *string `json:"MasterOrderId,omitempty" xml:"MasterOrderId,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClusterV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2ResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterV2ResponseBody) SetClusterId(v string) *CreateClusterV2ResponseBody {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterV2ResponseBody) SetCoreOrderId(v string) *CreateClusterV2ResponseBody {
	s.CoreOrderId = &v
	return s
}

func (s *CreateClusterV2ResponseBody) SetEmrOrderId(v string) *CreateClusterV2ResponseBody {
	s.EmrOrderId = &v
	return s
}

func (s *CreateClusterV2ResponseBody) SetMasterOrderId(v string) *CreateClusterV2ResponseBody {
	s.MasterOrderId = &v
	return s
}

func (s *CreateClusterV2ResponseBody) SetRequestId(v string) *CreateClusterV2ResponseBody {
	s.RequestId = &v
	return s
}

type CreateClusterV2Response struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateClusterV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateClusterV2Response) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2Response) GoString() string {
	return s.String()
}

func (s *CreateClusterV2Response) SetHeaders(v map[string]*string) *CreateClusterV2Response {
	s.Headers = v
	return s
}

func (s *CreateClusterV2Response) SetStatusCode(v int32) *CreateClusterV2Response {
	s.StatusCode = &v
	return s
}

func (s *CreateClusterV2Response) SetBody(v *CreateClusterV2ResponseBody) *CreateClusterV2Response {
	s.Body = v
	return s
}

type CreateClusterWithTemplateRequest struct {
	ClientToken     *string `json:"ClientToken,omitempty" xml:"ClientToken,omitempty"`
	ClusterName     *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateBizId   *string `json:"TemplateBizId,omitempty" xml:"TemplateBizId,omitempty"`
	UniqueTag       *string `json:"UniqueTag,omitempty" xml:"UniqueTag,omitempty"`
}

func (s CreateClusterWithTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterWithTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterWithTemplateRequest) SetClientToken(v string) *CreateClusterWithTemplateRequest {
	s.ClientToken = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetClusterName(v string) *CreateClusterWithTemplateRequest {
	s.ClusterName = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetResourceGroupId(v string) *CreateClusterWithTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetResourceOwnerId(v int64) *CreateClusterWithTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetTemplateBizId(v string) *CreateClusterWithTemplateRequest {
	s.TemplateBizId = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetUniqueTag(v string) *CreateClusterWithTemplateRequest {
	s.UniqueTag = &v
	return s
}

type CreateClusterWithTemplateResponseBody struct {
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CoreOrderId   *string `json:"CoreOrderId,omitempty" xml:"CoreOrderId,omitempty"`
	EmrOrderId    *string `json:"EmrOrderId,omitempty" xml:"EmrOrderId,omitempty"`
	MasterOrderId *string `json:"MasterOrderId,omitempty" xml:"MasterOrderId,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClusterWithTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterWithTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterWithTemplateResponseBody) SetClusterId(v string) *CreateClusterWithTemplateResponseBody {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterWithTemplateResponseBody) SetCoreOrderId(v string) *CreateClusterWithTemplateResponseBody {
	s.CoreOrderId = &v
	return s
}

func (s *CreateClusterWithTemplateResponseBody) SetEmrOrderId(v string) *CreateClusterWithTemplateResponseBody {
	s.EmrOrderId = &v
	return s
}

func (s *CreateClusterWithTemplateResponseBody) SetMasterOrderId(v string) *CreateClusterWithTemplateResponseBody {
	s.MasterOrderId = &v
	return s
}

func (s *CreateClusterWithTemplateResponseBody) SetRequestId(v string) *CreateClusterWithTemplateResponseBody {
	s.RequestId = &v
	return s
}

type CreateClusterWithTemplateResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateClusterWithTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateClusterWithTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterWithTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterWithTemplateResponse) SetHeaders(v map[string]*string) *CreateClusterWithTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateClusterWithTemplateResponse) SetStatusCode(v int32) *CreateClusterWithTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateClusterWithTemplateResponse) SetBody(v *CreateClusterWithTemplateResponseBody) *CreateClusterWithTemplateResponse {
	s.Body = v
	return s
}

type CreateFlowRequest struct {
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	Application             *string `json:"Application,omitempty" xml:"Application,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Lifecycle               *string `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	LogArchiveLocation      *string `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace               *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ParentCategory          *string `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
	ParentFlowList          *string `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
}

func (s CreateFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowRequest) SetAlertConf(v string) *CreateFlowRequest {
	s.AlertConf = &v
	return s
}

func (s *CreateFlowRequest) SetAlertDingDingGroupBizId(v string) *CreateFlowRequest {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *CreateFlowRequest) SetAlertUserGroupBizId(v string) *CreateFlowRequest {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *CreateFlowRequest) SetApplication(v string) *CreateFlowRequest {
	s.Application = &v
	return s
}

func (s *CreateFlowRequest) SetClusterId(v string) *CreateFlowRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateFlowRequest) SetCreateCluster(v bool) *CreateFlowRequest {
	s.CreateCluster = &v
	return s
}

func (s *CreateFlowRequest) SetCronExpr(v string) *CreateFlowRequest {
	s.CronExpr = &v
	return s
}

func (s *CreateFlowRequest) SetDescription(v string) *CreateFlowRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowRequest) SetEndSchedule(v int64) *CreateFlowRequest {
	s.EndSchedule = &v
	return s
}

func (s *CreateFlowRequest) SetHostName(v string) *CreateFlowRequest {
	s.HostName = &v
	return s
}

func (s *CreateFlowRequest) SetLifecycle(v string) *CreateFlowRequest {
	s.Lifecycle = &v
	return s
}

func (s *CreateFlowRequest) SetLogArchiveLocation(v string) *CreateFlowRequest {
	s.LogArchiveLocation = &v
	return s
}

func (s *CreateFlowRequest) SetName(v string) *CreateFlowRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowRequest) SetNamespace(v string) *CreateFlowRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFlowRequest) SetParentCategory(v string) *CreateFlowRequest {
	s.ParentCategory = &v
	return s
}

func (s *CreateFlowRequest) SetParentFlowList(v string) *CreateFlowRequest {
	s.ParentFlowList = &v
	return s
}

func (s *CreateFlowRequest) SetProjectId(v string) *CreateFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowRequest) SetRegionId(v string) *CreateFlowRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowRequest) SetStartSchedule(v int64) *CreateFlowRequest {
	s.StartSchedule = &v
	return s
}

type CreateFlowResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowResponseBody) SetId(v string) *CreateFlowResponseBody {
	s.Id = &v
	return s
}

func (s *CreateFlowResponseBody) SetRequestId(v string) *CreateFlowResponseBody {
	s.RequestId = &v
	return s
}

type CreateFlowResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowResponse) SetHeaders(v map[string]*string) *CreateFlowResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowResponse) SetStatusCode(v int32) *CreateFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowResponse) SetBody(v *CreateFlowResponseBody) *CreateFlowResponse {
	s.Body = v
	return s
}

type CreateFlowCategoryRequest struct {
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentId  *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowCategoryRequest) SetName(v string) *CreateFlowCategoryRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowCategoryRequest) SetParentId(v string) *CreateFlowCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *CreateFlowCategoryRequest) SetProjectId(v string) *CreateFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowCategoryRequest) SetRegionId(v string) *CreateFlowCategoryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowCategoryRequest) SetType(v string) *CreateFlowCategoryRequest {
	s.Type = &v
	return s
}

type CreateFlowCategoryResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowCategoryResponseBody) SetId(v string) *CreateFlowCategoryResponseBody {
	s.Id = &v
	return s
}

func (s *CreateFlowCategoryResponseBody) SetRequestId(v string) *CreateFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

type CreateFlowCategoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowCategoryResponse) SetHeaders(v map[string]*string) *CreateFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowCategoryResponse) SetStatusCode(v int32) *CreateFlowCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowCategoryResponse) SetBody(v *CreateFlowCategoryResponseBody) *CreateFlowCategoryResponse {
	s.Body = v
	return s
}

type CreateFlowForWebRequest struct {
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	Graph                   *string `json:"Graph,omitempty" xml:"Graph,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Lifecycle               *string `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	LogArchiveLocation      *string `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace               *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ParentCategory          *string `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
	ParentFlowList          *string `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
}

func (s CreateFlowForWebRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowForWebRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowForWebRequest) SetAlertConf(v string) *CreateFlowForWebRequest {
	s.AlertConf = &v
	return s
}

func (s *CreateFlowForWebRequest) SetAlertDingDingGroupBizId(v string) *CreateFlowForWebRequest {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetAlertUserGroupBizId(v string) *CreateFlowForWebRequest {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetClusterId(v string) *CreateFlowForWebRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetCreateCluster(v bool) *CreateFlowForWebRequest {
	s.CreateCluster = &v
	return s
}

func (s *CreateFlowForWebRequest) SetCronExpr(v string) *CreateFlowForWebRequest {
	s.CronExpr = &v
	return s
}

func (s *CreateFlowForWebRequest) SetDescription(v string) *CreateFlowForWebRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowForWebRequest) SetEndSchedule(v int64) *CreateFlowForWebRequest {
	s.EndSchedule = &v
	return s
}

func (s *CreateFlowForWebRequest) SetGraph(v string) *CreateFlowForWebRequest {
	s.Graph = &v
	return s
}

func (s *CreateFlowForWebRequest) SetHostName(v string) *CreateFlowForWebRequest {
	s.HostName = &v
	return s
}

func (s *CreateFlowForWebRequest) SetLifecycle(v string) *CreateFlowForWebRequest {
	s.Lifecycle = &v
	return s
}

func (s *CreateFlowForWebRequest) SetLogArchiveLocation(v string) *CreateFlowForWebRequest {
	s.LogArchiveLocation = &v
	return s
}

func (s *CreateFlowForWebRequest) SetName(v string) *CreateFlowForWebRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowForWebRequest) SetNamespace(v string) *CreateFlowForWebRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFlowForWebRequest) SetParentCategory(v string) *CreateFlowForWebRequest {
	s.ParentCategory = &v
	return s
}

func (s *CreateFlowForWebRequest) SetParentFlowList(v string) *CreateFlowForWebRequest {
	s.ParentFlowList = &v
	return s
}

func (s *CreateFlowForWebRequest) SetProjectId(v string) *CreateFlowForWebRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetRegionId(v string) *CreateFlowForWebRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetStartSchedule(v int64) *CreateFlowForWebRequest {
	s.StartSchedule = &v
	return s
}

type CreateFlowForWebResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFlowForWebResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowForWebResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowForWebResponseBody) SetId(v string) *CreateFlowForWebResponseBody {
	s.Id = &v
	return s
}

func (s *CreateFlowForWebResponseBody) SetRequestId(v string) *CreateFlowForWebResponseBody {
	s.RequestId = &v
	return s
}

type CreateFlowForWebResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowForWebResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowForWebResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowForWebResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowForWebResponse) SetHeaders(v map[string]*string) *CreateFlowForWebResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowForWebResponse) SetStatusCode(v int32) *CreateFlowForWebResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowForWebResponse) SetBody(v *CreateFlowForWebResponseBody) *CreateFlowForWebResponse {
	s.Body = v
	return s
}

type CreateFlowJobRequest struct {
	Adhoc             *bool                               `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	AlertConf         *string                             `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	ClusterId         *string                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CustomVariables   *string                             `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	Description       *string                             `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvConf           *string                             `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	FailAct           *string                             `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	MaxRetry          *int32                              `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	MaxRunningTimeSec *int64                              `json:"MaxRunningTimeSec,omitempty" xml:"MaxRunningTimeSec,omitempty"`
	Mode              *string                             `json:"Mode,omitempty" xml:"Mode,omitempty"`
	MonitorConf       *string                             `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	Name              *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	ParamConf         *string                             `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	Params            *string                             `json:"Params,omitempty" xml:"Params,omitempty"`
	ParentCategory    *string                             `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
	ProjectId         *string                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId          *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceList      []*CreateFlowJobRequestResourceList `json:"ResourceList,omitempty" xml:"ResourceList,omitempty" type:"Repeated"`
	RetryInterval     *int64                              `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RetryPolicy       *string                             `json:"RetryPolicy,omitempty" xml:"RetryPolicy,omitempty"`
	RunConf           *string                             `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	Type              *string                             `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowJobRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowJobRequest) SetAdhoc(v bool) *CreateFlowJobRequest {
	s.Adhoc = &v
	return s
}

func (s *CreateFlowJobRequest) SetAlertConf(v string) *CreateFlowJobRequest {
	s.AlertConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetClusterId(v string) *CreateFlowJobRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateFlowJobRequest) SetCustomVariables(v string) *CreateFlowJobRequest {
	s.CustomVariables = &v
	return s
}

func (s *CreateFlowJobRequest) SetDescription(v string) *CreateFlowJobRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowJobRequest) SetEnvConf(v string) *CreateFlowJobRequest {
	s.EnvConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetFailAct(v string) *CreateFlowJobRequest {
	s.FailAct = &v
	return s
}

func (s *CreateFlowJobRequest) SetMaxRetry(v int32) *CreateFlowJobRequest {
	s.MaxRetry = &v
	return s
}

func (s *CreateFlowJobRequest) SetMaxRunningTimeSec(v int64) *CreateFlowJobRequest {
	s.MaxRunningTimeSec = &v
	return s
}

func (s *CreateFlowJobRequest) SetMode(v string) *CreateFlowJobRequest {
	s.Mode = &v
	return s
}

func (s *CreateFlowJobRequest) SetMonitorConf(v string) *CreateFlowJobRequest {
	s.MonitorConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetName(v string) *CreateFlowJobRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowJobRequest) SetParamConf(v string) *CreateFlowJobRequest {
	s.ParamConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetParams(v string) *CreateFlowJobRequest {
	s.Params = &v
	return s
}

func (s *CreateFlowJobRequest) SetParentCategory(v string) *CreateFlowJobRequest {
	s.ParentCategory = &v
	return s
}

func (s *CreateFlowJobRequest) SetProjectId(v string) *CreateFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowJobRequest) SetRegionId(v string) *CreateFlowJobRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowJobRequest) SetResourceList(v []*CreateFlowJobRequestResourceList) *CreateFlowJobRequest {
	s.ResourceList = v
	return s
}

func (s *CreateFlowJobRequest) SetRetryInterval(v int64) *CreateFlowJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *CreateFlowJobRequest) SetRetryPolicy(v string) *CreateFlowJobRequest {
	s.RetryPolicy = &v
	return s
}

func (s *CreateFlowJobRequest) SetRunConf(v string) *CreateFlowJobRequest {
	s.RunConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetType(v string) *CreateFlowJobRequest {
	s.Type = &v
	return s
}

type CreateFlowJobRequestResourceList struct {
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s CreateFlowJobRequestResourceList) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowJobRequestResourceList) GoString() string {
	return s.String()
}

func (s *CreateFlowJobRequestResourceList) SetAlias(v string) *CreateFlowJobRequestResourceList {
	s.Alias = &v
	return s
}

func (s *CreateFlowJobRequestResourceList) SetPath(v string) *CreateFlowJobRequestResourceList {
	s.Path = &v
	return s
}

type CreateFlowJobResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowJobResponseBody) SetId(v string) *CreateFlowJobResponseBody {
	s.Id = &v
	return s
}

func (s *CreateFlowJobResponseBody) SetRequestId(v string) *CreateFlowJobResponseBody {
	s.RequestId = &v
	return s
}

type CreateFlowJobResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowJobResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowJobResponse) SetHeaders(v map[string]*string) *CreateFlowJobResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowJobResponse) SetStatusCode(v int32) *CreateFlowJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowJobResponse) SetBody(v *CreateFlowJobResponseBody) *CreateFlowJobResponse {
	s.Body = v
	return s
}

type CreateFlowProjectRequest struct {
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProductType     *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectRequest) SetDescription(v string) *CreateFlowProjectRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowProjectRequest) SetName(v string) *CreateFlowProjectRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowProjectRequest) SetProductType(v string) *CreateFlowProjectRequest {
	s.ProductType = &v
	return s
}

func (s *CreateFlowProjectRequest) SetRegionId(v string) *CreateFlowProjectRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowProjectRequest) SetResourceGroupId(v string) *CreateFlowProjectRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateFlowProjectResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectResponseBody) SetId(v string) *CreateFlowProjectResponseBody {
	s.Id = &v
	return s
}

func (s *CreateFlowProjectResponseBody) SetRequestId(v string) *CreateFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

type CreateFlowProjectResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectResponse) SetHeaders(v map[string]*string) *CreateFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowProjectResponse) SetStatusCode(v int32) *CreateFlowProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowProjectResponse) SetBody(v *CreateFlowProjectResponseBody) *CreateFlowProjectResponse {
	s.Body = v
	return s
}

type CreateFlowProjectClusterSettingRequest struct {
	ClusterId    *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DefaultQueue *string   `json:"DefaultQueue,omitempty" xml:"DefaultQueue,omitempty"`
	DefaultUser  *string   `json:"DefaultUser,omitempty" xml:"DefaultUser,omitempty"`
	HostList     []*string `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Repeated"`
	ProjectId    *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	QueueList    []*string `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Repeated"`
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UserList     []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s CreateFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectClusterSettingRequest) SetClusterId(v string) *CreateFlowProjectClusterSettingRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetDefaultQueue(v string) *CreateFlowProjectClusterSettingRequest {
	s.DefaultQueue = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetDefaultUser(v string) *CreateFlowProjectClusterSettingRequest {
	s.DefaultUser = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetHostList(v []*string) *CreateFlowProjectClusterSettingRequest {
	s.HostList = v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetProjectId(v string) *CreateFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetQueueList(v []*string) *CreateFlowProjectClusterSettingRequest {
	s.QueueList = v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetRegionId(v string) *CreateFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetUserList(v []*string) *CreateFlowProjectClusterSettingRequest {
	s.UserList = v
	return s
}

type CreateFlowProjectClusterSettingResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectClusterSettingResponseBody) SetData(v bool) *CreateFlowProjectClusterSettingResponseBody {
	s.Data = &v
	return s
}

func (s *CreateFlowProjectClusterSettingResponseBody) SetRequestId(v string) *CreateFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

type CreateFlowProjectClusterSettingResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *CreateFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowProjectClusterSettingResponse) SetStatusCode(v int32) *CreateFlowProjectClusterSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowProjectClusterSettingResponse) SetBody(v *CreateFlowProjectClusterSettingResponseBody) *CreateFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type CreateFlowProjectUserRequest struct {
	ProjectId *string                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	User      []*CreateFlowProjectUserRequestUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s CreateFlowProjectUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectUserRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectUserRequest) SetProjectId(v string) *CreateFlowProjectUserRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowProjectUserRequest) SetRegionId(v string) *CreateFlowProjectUserRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowProjectUserRequest) SetUser(v []*CreateFlowProjectUserRequestUser) *CreateFlowProjectUserRequest {
	s.User = v
	return s
}

type CreateFlowProjectUserRequestUser struct {
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateFlowProjectUserRequestUser) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectUserRequestUser) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectUserRequestUser) SetUserId(v string) *CreateFlowProjectUserRequestUser {
	s.UserId = &v
	return s
}

func (s *CreateFlowProjectUserRequestUser) SetUserName(v string) *CreateFlowProjectUserRequestUser {
	s.UserName = &v
	return s
}

type CreateFlowProjectUserResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateFlowProjectUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectUserResponseBody) SetData(v bool) *CreateFlowProjectUserResponseBody {
	s.Data = &v
	return s
}

func (s *CreateFlowProjectUserResponseBody) SetRequestId(v string) *CreateFlowProjectUserResponseBody {
	s.RequestId = &v
	return s
}

type CreateFlowProjectUserResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFlowProjectUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFlowProjectUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectUserResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectUserResponse) SetHeaders(v map[string]*string) *CreateFlowProjectUserResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowProjectUserResponse) SetStatusCode(v int32) *CreateFlowProjectUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFlowProjectUserResponse) SetBody(v *CreateFlowProjectUserResponseBody) *CreateFlowProjectUserResponse {
	s.Body = v
	return s
}

type CreateResourcePoolRequest struct {
	Active          *bool                              `json:"Active,omitempty" xml:"Active,omitempty"`
	ClusterId       *string                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Config          []*CreateResourcePoolRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Name            *string                            `json:"Name,omitempty" xml:"Name,omitempty"`
	Note            *string                            `json:"Note,omitempty" xml:"Note,omitempty"`
	PoolType        *string                            `json:"PoolType,omitempty" xml:"PoolType,omitempty"`
	RegionId        *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	YarnSiteConfig  *string                            `json:"YarnSiteConfig,omitempty" xml:"YarnSiteConfig,omitempty"`
}

func (s CreateResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *CreateResourcePoolRequest) SetActive(v bool) *CreateResourcePoolRequest {
	s.Active = &v
	return s
}

func (s *CreateResourcePoolRequest) SetClusterId(v string) *CreateResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateResourcePoolRequest) SetConfig(v []*CreateResourcePoolRequestConfig) *CreateResourcePoolRequest {
	s.Config = v
	return s
}

func (s *CreateResourcePoolRequest) SetName(v string) *CreateResourcePoolRequest {
	s.Name = &v
	return s
}

func (s *CreateResourcePoolRequest) SetNote(v string) *CreateResourcePoolRequest {
	s.Note = &v
	return s
}

func (s *CreateResourcePoolRequest) SetPoolType(v string) *CreateResourcePoolRequest {
	s.PoolType = &v
	return s
}

func (s *CreateResourcePoolRequest) SetRegionId(v string) *CreateResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *CreateResourcePoolRequest) SetResourceOwnerId(v int64) *CreateResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateResourcePoolRequest) SetYarnSiteConfig(v string) *CreateResourcePoolRequest {
	s.YarnSiteConfig = &v
	return s
}

type CreateResourcePoolRequestConfig struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	TargetId    *string `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	ConfigType  *string `json:"configType,omitempty" xml:"configType,omitempty"`
}

func (s CreateResourcePoolRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePoolRequestConfig) GoString() string {
	return s.String()
}

func (s *CreateResourcePoolRequestConfig) SetCategory(v string) *CreateResourcePoolRequestConfig {
	s.Category = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetConfigKey(v string) *CreateResourcePoolRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetConfigValue(v string) *CreateResourcePoolRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetNote(v string) *CreateResourcePoolRequestConfig {
	s.Note = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetTargetId(v string) *CreateResourcePoolRequestConfig {
	s.TargetId = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetConfigType(v string) *CreateResourcePoolRequestConfig {
	s.ConfigType = &v
	return s
}

type CreateResourcePoolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourcePoolResponseBody) SetRequestId(v string) *CreateResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

type CreateResourcePoolResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *CreateResourcePoolResponse) SetHeaders(v map[string]*string) *CreateResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *CreateResourcePoolResponse) SetStatusCode(v int32) *CreateResourcePoolResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateResourcePoolResponse) SetBody(v *CreateResourcePoolResponseBody) *CreateResourcePoolResponse {
	s.Body = v
	return s
}

type CreateResourceQueueRequest struct {
	ClusterId       *string                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Config          []*CreateResourceQueueRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Leaf            *bool                               `json:"Leaf,omitempty" xml:"Leaf,omitempty"`
	Name            *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentQueueId   *int64                              `json:"ParentQueueId,omitempty" xml:"ParentQueueId,omitempty"`
	QualifiedName   *string                             `json:"QualifiedName,omitempty" xml:"QualifiedName,omitempty"`
	RegionId        *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourcePoolId  *int64                              `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
}

func (s CreateResourceQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceQueueRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceQueueRequest) SetClusterId(v string) *CreateResourceQueueRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetConfig(v []*CreateResourceQueueRequestConfig) *CreateResourceQueueRequest {
	s.Config = v
	return s
}

func (s *CreateResourceQueueRequest) SetLeaf(v bool) *CreateResourceQueueRequest {
	s.Leaf = &v
	return s
}

func (s *CreateResourceQueueRequest) SetName(v string) *CreateResourceQueueRequest {
	s.Name = &v
	return s
}

func (s *CreateResourceQueueRequest) SetParentQueueId(v int64) *CreateResourceQueueRequest {
	s.ParentQueueId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetQualifiedName(v string) *CreateResourceQueueRequest {
	s.QualifiedName = &v
	return s
}

func (s *CreateResourceQueueRequest) SetRegionId(v string) *CreateResourceQueueRequest {
	s.RegionId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetResourceOwnerId(v int64) *CreateResourceQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetResourcePoolId(v int64) *CreateResourceQueueRequest {
	s.ResourcePoolId = &v
	return s
}

type CreateResourceQueueRequestConfig struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s CreateResourceQueueRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceQueueRequestConfig) GoString() string {
	return s.String()
}

func (s *CreateResourceQueueRequestConfig) SetCategory(v string) *CreateResourceQueueRequestConfig {
	s.Category = &v
	return s
}

func (s *CreateResourceQueueRequestConfig) SetConfigKey(v string) *CreateResourceQueueRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *CreateResourceQueueRequestConfig) SetConfigValue(v string) *CreateResourceQueueRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateResourceQueueRequestConfig) SetNote(v string) *CreateResourceQueueRequestConfig {
	s.Note = &v
	return s
}

type CreateResourceQueueResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateResourceQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceQueueResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourceQueueResponseBody) SetRequestId(v string) *CreateResourceQueueResponseBody {
	s.RequestId = &v
	return s
}

type CreateResourceQueueResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateResourceQueueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateResourceQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceQueueResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceQueueResponse) SetHeaders(v map[string]*string) *CreateResourceQueueResponse {
	s.Headers = v
	return s
}

func (s *CreateResourceQueueResponse) SetStatusCode(v int32) *CreateResourceQueueResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateResourceQueueResponse) SetBody(v *CreateResourceQueueResponseBody) *CreateResourceQueueResponse {
	s.Body = v
	return s
}

type CreateScalingGroupV2Request struct {
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s CreateScalingGroupV2Request) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingGroupV2Request) GoString() string {
	return s.String()
}

func (s *CreateScalingGroupV2Request) SetDescription(v string) *CreateScalingGroupV2Request {
	s.Description = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetHostGroupId(v string) *CreateScalingGroupV2Request {
	s.HostGroupId = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetName(v string) *CreateScalingGroupV2Request {
	s.Name = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetRegionId(v string) *CreateScalingGroupV2Request {
	s.RegionId = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetResourceGroupId(v string) *CreateScalingGroupV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetResourceOwnerId(v int64) *CreateScalingGroupV2Request {
	s.ResourceOwnerId = &v
	return s
}

type CreateScalingGroupV2ResponseBody struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateScalingGroupV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingGroupV2ResponseBody) GoString() string {
	return s.String()
}

func (s *CreateScalingGroupV2ResponseBody) SetData(v string) *CreateScalingGroupV2ResponseBody {
	s.Data = &v
	return s
}

func (s *CreateScalingGroupV2ResponseBody) SetRequestId(v string) *CreateScalingGroupV2ResponseBody {
	s.RequestId = &v
	return s
}

type CreateScalingGroupV2Response struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateScalingGroupV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateScalingGroupV2Response) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingGroupV2Response) GoString() string {
	return s.String()
}

func (s *CreateScalingGroupV2Response) SetHeaders(v map[string]*string) *CreateScalingGroupV2Response {
	s.Headers = v
	return s
}

func (s *CreateScalingGroupV2Response) SetStatusCode(v int32) *CreateScalingGroupV2Response {
	s.StatusCode = &v
	return s
}

func (s *CreateScalingGroupV2Response) SetBody(v *CreateScalingGroupV2ResponseBody) *CreateScalingGroupV2Response {
	s.Body = v
	return s
}

type DeleteClusterTemplateRequest struct {
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DeleteClusterTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteClusterTemplateRequest) SetBizId(v string) *DeleteClusterTemplateRequest {
	s.BizId = &v
	return s
}

func (s *DeleteClusterTemplateRequest) SetRegionId(v string) *DeleteClusterTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteClusterTemplateRequest) SetResourceGroupId(v string) *DeleteClusterTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DeleteClusterTemplateRequest) SetResourceOwnerId(v int64) *DeleteClusterTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

type DeleteClusterTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteClusterTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteClusterTemplateResponseBody) SetRequestId(v string) *DeleteClusterTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteClusterTemplateResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteClusterTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteClusterTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteClusterTemplateResponse) SetHeaders(v map[string]*string) *DeleteClusterTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteClusterTemplateResponse) SetStatusCode(v int32) *DeleteClusterTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteClusterTemplateResponse) SetBody(v *DeleteClusterTemplateResponseBody) *DeleteClusterTemplateResponse {
	s.Body = v
	return s
}

type DeleteFlowRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowRequest) SetId(v string) *DeleteFlowRequest {
	s.Id = &v
	return s
}

func (s *DeleteFlowRequest) SetProjectId(v string) *DeleteFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowRequest) SetRegionId(v string) *DeleteFlowRequest {
	s.RegionId = &v
	return s
}

type DeleteFlowResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowResponseBody) SetData(v bool) *DeleteFlowResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteFlowResponseBody) SetRequestId(v string) *DeleteFlowResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFlowResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowResponse) SetHeaders(v map[string]*string) *DeleteFlowResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowResponse) SetStatusCode(v int32) *DeleteFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowResponse) SetBody(v *DeleteFlowResponseBody) *DeleteFlowResponse {
	s.Body = v
	return s
}

type DeleteFlowCategoryRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowCategoryRequest) SetId(v string) *DeleteFlowCategoryRequest {
	s.Id = &v
	return s
}

func (s *DeleteFlowCategoryRequest) SetProjectId(v string) *DeleteFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowCategoryRequest) SetRegionId(v string) *DeleteFlowCategoryRequest {
	s.RegionId = &v
	return s
}

type DeleteFlowCategoryResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowCategoryResponseBody) SetData(v bool) *DeleteFlowCategoryResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteFlowCategoryResponseBody) SetRequestId(v string) *DeleteFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFlowCategoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowCategoryResponse) SetHeaders(v map[string]*string) *DeleteFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowCategoryResponse) SetStatusCode(v int32) *DeleteFlowCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowCategoryResponse) SetBody(v *DeleteFlowCategoryResponseBody) *DeleteFlowCategoryResponse {
	s.Body = v
	return s
}

type DeleteFlowJobRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowJobRequest) SetId(v string) *DeleteFlowJobRequest {
	s.Id = &v
	return s
}

func (s *DeleteFlowJobRequest) SetProjectId(v string) *DeleteFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowJobRequest) SetRegionId(v string) *DeleteFlowJobRequest {
	s.RegionId = &v
	return s
}

type DeleteFlowJobResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowJobResponseBody) SetData(v bool) *DeleteFlowJobResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteFlowJobResponseBody) SetRequestId(v string) *DeleteFlowJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFlowJobResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowJobResponse) SetHeaders(v map[string]*string) *DeleteFlowJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowJobResponse) SetStatusCode(v int32) *DeleteFlowJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowJobResponse) SetBody(v *DeleteFlowJobResponseBody) *DeleteFlowJobResponse {
	s.Body = v
	return s
}

type DeleteFlowProjectRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectRequest) SetProjectId(v string) *DeleteFlowProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowProjectRequest) SetRegionId(v string) *DeleteFlowProjectRequest {
	s.RegionId = &v
	return s
}

type DeleteFlowProjectResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectResponseBody) SetData(v bool) *DeleteFlowProjectResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteFlowProjectResponseBody) SetRequestId(v string) *DeleteFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFlowProjectResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectResponse) SetHeaders(v map[string]*string) *DeleteFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowProjectResponse) SetStatusCode(v int32) *DeleteFlowProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowProjectResponse) SetBody(v *DeleteFlowProjectResponseBody) *DeleteFlowProjectResponse {
	s.Body = v
	return s
}

type DeleteFlowProjectClusterSettingRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectClusterSettingRequest) SetClusterId(v string) *DeleteFlowProjectClusterSettingRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteFlowProjectClusterSettingRequest) SetProjectId(v string) *DeleteFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowProjectClusterSettingRequest) SetRegionId(v string) *DeleteFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

type DeleteFlowProjectClusterSettingResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectClusterSettingResponseBody) SetData(v bool) *DeleteFlowProjectClusterSettingResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteFlowProjectClusterSettingResponseBody) SetRequestId(v string) *DeleteFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFlowProjectClusterSettingResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *DeleteFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowProjectClusterSettingResponse) SetStatusCode(v int32) *DeleteFlowProjectClusterSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowProjectClusterSettingResponse) SetBody(v *DeleteFlowProjectClusterSettingResponseBody) *DeleteFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type DeleteFlowProjectUserRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UserName  *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DeleteFlowProjectUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectUserRequest) SetProjectId(v string) *DeleteFlowProjectUserRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowProjectUserRequest) SetRegionId(v string) *DeleteFlowProjectUserRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowProjectUserRequest) SetUserName(v string) *DeleteFlowProjectUserRequest {
	s.UserName = &v
	return s
}

type DeleteFlowProjectUserResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteFlowProjectUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectUserResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectUserResponseBody) SetData(v bool) *DeleteFlowProjectUserResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteFlowProjectUserResponseBody) SetRequestId(v string) *DeleteFlowProjectUserResponseBody {
	s.RequestId = &v
	return s
}

type DeleteFlowProjectUserResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteFlowProjectUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteFlowProjectUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectUserResponse) SetHeaders(v map[string]*string) *DeleteFlowProjectUserResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowProjectUserResponse) SetStatusCode(v int32) *DeleteFlowProjectUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteFlowProjectUserResponse) SetBody(v *DeleteFlowProjectUserResponseBody) *DeleteFlowProjectUserResponse {
	s.Body = v
	return s
}

type DeleteResourcePoolRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourcePoolId  *string `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
}

func (s DeleteResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourcePoolRequest) SetClusterId(v string) *DeleteResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteResourcePoolRequest) SetRegionId(v string) *DeleteResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteResourcePoolRequest) SetResourceOwnerId(v int64) *DeleteResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteResourcePoolRequest) SetResourcePoolId(v string) *DeleteResourcePoolRequest {
	s.ResourcePoolId = &v
	return s
}

type DeleteResourcePoolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteResourcePoolResponseBody) SetRequestId(v string) *DeleteResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

type DeleteResourcePoolResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourcePoolResponse) SetHeaders(v map[string]*string) *DeleteResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *DeleteResourcePoolResponse) SetStatusCode(v int32) *DeleteResourcePoolResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteResourcePoolResponse) SetBody(v *DeleteResourcePoolResponseBody) *DeleteResourcePoolResponse {
	s.Body = v
	return s
}

type DeleteResourceQueueRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceQueueId *string `json:"ResourceQueueId,omitempty" xml:"ResourceQueueId,omitempty"`
}

func (s DeleteResourceQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceQueueRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceQueueRequest) SetClusterId(v string) *DeleteResourceQueueRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteResourceQueueRequest) SetRegionId(v string) *DeleteResourceQueueRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteResourceQueueRequest) SetResourceOwnerId(v int64) *DeleteResourceQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteResourceQueueRequest) SetResourceQueueId(v string) *DeleteResourceQueueRequest {
	s.ResourceQueueId = &v
	return s
}

type DeleteResourceQueueResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteResourceQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceQueueResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteResourceQueueResponseBody) SetRequestId(v string) *DeleteResourceQueueResponseBody {
	s.RequestId = &v
	return s
}

type DeleteResourceQueueResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteResourceQueueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteResourceQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceQueueResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceQueueResponse) SetHeaders(v map[string]*string) *DeleteResourceQueueResponse {
	s.Headers = v
	return s
}

func (s *DeleteResourceQueueResponse) SetStatusCode(v int32) *DeleteResourceQueueResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteResourceQueueResponse) SetBody(v *DeleteResourceQueueResponseBody) *DeleteResourceQueueResponse {
	s.Body = v
	return s
}

type DescribeClusterBasicInfoRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeClusterBasicInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoRequest) SetClusterId(v string) *DescribeClusterBasicInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoRequest) SetRegionId(v string) *DescribeClusterBasicInfoRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterBasicInfoRequest) SetResourceOwnerId(v int64) *DescribeClusterBasicInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeClusterBasicInfoResponseBody struct {
	ClusterInfo *DescribeClusterBasicInfoResponseBodyClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Struct"`
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBody) SetClusterInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfo) *DescribeClusterBasicInfoResponseBody {
	s.ClusterInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBody) SetRequestId(v string) *DescribeClusterBasicInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfo struct {
	AccessInfo                      *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo             `json:"AccessInfo,omitempty" xml:"AccessInfo,omitempty" type:"Struct"`
	AutoScalingAllowed              *bool                                                                  `json:"AutoScalingAllowed,omitempty" xml:"AutoScalingAllowed,omitempty"`
	AutoScalingByLoadAllowed        *bool                                                                  `json:"AutoScalingByLoadAllowed,omitempty" xml:"AutoScalingByLoadAllowed,omitempty"`
	AutoScalingEnable               *bool                                                                  `json:"AutoScalingEnable,omitempty" xml:"AutoScalingEnable,omitempty"`
	AutoScalingSpotWithLimitAllowed *bool                                                                  `json:"AutoScalingSpotWithLimitAllowed,omitempty" xml:"AutoScalingSpotWithLimitAllowed,omitempty"`
	AutoScalingVersion              *string                                                                `json:"AutoScalingVersion,omitempty" xml:"AutoScalingVersion,omitempty"`
	AutoScalingWithGraceAllowed     *bool                                                                  `json:"AutoScalingWithGraceAllowed,omitempty" xml:"AutoScalingWithGraceAllowed,omitempty"`
	BootstrapActionList             *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList    `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	BootstrapFailed                 *bool                                                                  `json:"BootstrapFailed,omitempty" xml:"BootstrapFailed,omitempty"`
	ChargeType                      *string                                                                `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClickhouseConf                  *string                                                                `json:"ClickhouseConf,omitempty" xml:"ClickhouseConf,omitempty"`
	ClusterId                       *string                                                                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Configurations                  *string                                                                `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	CoreNodeInService               *int32                                                                 `json:"CoreNodeInService,omitempty" xml:"CoreNodeInService,omitempty"`
	CoreNodeTotal                   *int32                                                                 `json:"CoreNodeTotal,omitempty" xml:"CoreNodeTotal,omitempty"`
	CreateResource                  *string                                                                `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	CreateType                      *string                                                                `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DataDiskEncrypted               *bool                                                                  `json:"DataDiskEncrypted,omitempty" xml:"DataDiskEncrypted,omitempty"`
	DataDiskKMSKeyId                *string                                                                `json:"DataDiskKMSKeyId,omitempty" xml:"DataDiskKMSKeyId,omitempty"`
	DepositType                     *string                                                                `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	EasEnable                       *bool                                                                  `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	ExpiredTime                     *int64                                                                 `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ExtraInfo                       *string                                                                `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	FailReason                      *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason             `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
	GatewayClusterIds               *string                                                                `json:"GatewayClusterIds,omitempty" xml:"GatewayClusterIds,omitempty"`
	GatewayClusterInfoList          *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList `json:"GatewayClusterInfoList,omitempty" xml:"GatewayClusterInfoList,omitempty" type:"Struct"`
	HighAvailabilityEnable          *bool                                                                  `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	HostPoolInfo                    *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo           `json:"HostPoolInfo,omitempty" xml:"HostPoolInfo,omitempty" type:"Struct"`
	ImageId                         *string                                                                `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceGeneration              *string                                                                `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	IoOptimized                     *bool                                                                  `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	K8sClusterId                    *string                                                                `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	LocalMetaDb                     *bool                                                                  `json:"LocalMetaDb,omitempty" xml:"LocalMetaDb,omitempty"`
	LogEnable                       *bool                                                                  `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	LogPath                         *string                                                                `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	MachineType                     *string                                                                `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MasterNodeInService             *int32                                                                 `json:"MasterNodeInService,omitempty" xml:"MasterNodeInService,omitempty"`
	MasterNodeTotal                 *int32                                                                 `json:"MasterNodeTotal,omitempty" xml:"MasterNodeTotal,omitempty"`
	MetaStoreType                   *string                                                                `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	Name                            *string                                                                `json:"Name,omitempty" xml:"Name,omitempty"`
	NetType                         *string                                                                `json:"NetType,omitempty" xml:"NetType,omitempty"`
	OperationId                     *string                                                                `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	Period                          *int32                                                                 `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId                        *string                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RelateClusterId                 *string                                                                `json:"RelateClusterId,omitempty" xml:"RelateClusterId,omitempty"`
	RelateClusterInfo               *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo      `json:"RelateClusterInfo,omitempty" xml:"RelateClusterInfo,omitempty" type:"Struct"`
	ResizeClusterEnable             *bool                                                                  `json:"ResizeClusterEnable,omitempty" xml:"ResizeClusterEnable,omitempty"`
	ResizeDiskEnable                *bool                                                                  `json:"ResizeDiskEnable,omitempty" xml:"ResizeDiskEnable,omitempty"`
	RunningTime                     *int32                                                                 `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	SecurityGroupId                 *string                                                                `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName               *string                                                                `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ShowSoftwareInterface           *bool                                                                  `json:"ShowSoftwareInterface,omitempty" xml:"ShowSoftwareInterface,omitempty"`
	SoftwareInfo                    *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo           `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Struct"`
	StartTime                       *int64                                                                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status                          *string                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	StopTime                        *int64                                                                 `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	TaskNodeInService               *int32                                                                 `json:"TaskNodeInService,omitempty" xml:"TaskNodeInService,omitempty"`
	TaskNodeTotal                   *int32                                                                 `json:"TaskNodeTotal,omitempty" xml:"TaskNodeTotal,omitempty"`
	UserDefinedEmrEcsRole           *string                                                                `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	UserId                          *string                                                                `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VSwitchId                       *string                                                                `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	VpcId                           *string                                                                `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId                          *string                                                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAccessInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AccessInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingAllowed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingAllowed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingByLoadAllowed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingByLoadAllowed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingSpotWithLimitAllowed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingSpotWithLimitAllowed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingVersion(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingVersion = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingWithGraceAllowed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingWithGraceAllowed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetBootstrapActionList(v *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.BootstrapActionList = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetBootstrapFailed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.BootstrapFailed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetChargeType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetClickhouseConf(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ClickhouseConf = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetConfigurations(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.Configurations = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCoreNodeInService(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CoreNodeInService = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCoreNodeTotal(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CoreNodeTotal = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCreateResource(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCreateType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CreateType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetDataDiskEncrypted(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.DataDiskEncrypted = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetDataDiskKMSKeyId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.DataDiskKMSKeyId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetDepositType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.DepositType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetEasEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.EasEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetExpiredTime(v int64) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetExtraInfo(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ExtraInfo = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetFailReason(v *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.FailReason = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetGatewayClusterIds(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.GatewayClusterIds = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetGatewayClusterInfoList(v *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.GatewayClusterInfoList = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetHighAvailabilityEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetHostPoolInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.HostPoolInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetImageId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ImageId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetInstanceGeneration(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetIoOptimized(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.IoOptimized = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetK8sClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetLocalMetaDb(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.LocalMetaDb = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetLogEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.LogEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetLogPath(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.LogPath = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetMachineType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.MachineType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetMasterNodeInService(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.MasterNodeInService = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetMasterNodeTotal(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.MasterNodeTotal = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetMetaStoreType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.MetaStoreType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.Name = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetNetType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.NetType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetOperationId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.OperationId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetPeriod(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.Period = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRegionId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRelateClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RelateClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRelateClusterInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RelateClusterInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetResizeClusterEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ResizeClusterEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetResizeDiskEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ResizeDiskEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRunningTime(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetSecurityGroupId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetSecurityGroupName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetShowSoftwareInterface(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ShowSoftwareInterface = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetSoftwareInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.SoftwareInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetStartTime(v int64) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetStatus(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.Status = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetStopTime(v int64) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.StopTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetTaskNodeInService(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.TaskNodeInService = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetTaskNodeTotal(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.TaskNodeTotal = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetUserDefinedEmrEcsRole(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetUserId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.UserId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetVSwitchId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetVpcId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.VpcId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetZoneId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ZoneId = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo struct {
	ZKLinks *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks `json:"ZKLinks,omitempty" xml:"ZKLinks,omitempty" type:"Struct"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo) SetZKLinks(v *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks) *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo {
	s.ZKLinks = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks struct {
	ZKLink []*DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink `json:"ZKLink,omitempty" xml:"ZKLink,omitempty" type:"Repeated"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks) SetZKLink(v []*DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks {
	s.ZKLink = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink struct {
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) SetLink(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink {
	s.Link = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) SetPort(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink {
	s.Port = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList struct {
	BootstrapAction []*DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList) SetBootstrapAction(v []*DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetArg(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetPath(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoFailReason struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) SetErrorCode(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) SetErrorMsg(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) SetRequestId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason {
	s.RequestId = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList struct {
	GatewayClusterInfo []*DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo `json:"GatewayClusterInfo,omitempty" xml:"GatewayClusterInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList) SetGatewayClusterInfo(v []*DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList {
	s.GatewayClusterInfo = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetClusterName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetStatus(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.Status = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo struct {
	HpBizId *string `json:"HpBizId,omitempty" xml:"HpBizId,omitempty"`
	HpName  *string `json:"HpName,omitempty" xml:"HpName,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) SetHpBizId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo {
	s.HpBizId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) SetHpName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo {
	s.HpName = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) SetClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) SetClusterName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) SetClusterType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) SetStatus(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo {
	s.Status = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo struct {
	ClusterType *string                                                               `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	EmrVer      *string                                                               `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	Softwares   *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares `json:"Softwares,omitempty" xml:"Softwares,omitempty" type:"Struct"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) SetClusterType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) SetEmrVer(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo {
	s.EmrVer = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) SetSoftwares(v *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo {
	s.Softwares = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares struct {
	Software []*DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware `json:"Software,omitempty" xml:"Software,omitempty" type:"Repeated"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares) SetSoftware(v []*DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares {
	s.Software = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OnlyDisplay *bool   `json:"OnlyDisplay,omitempty" xml:"OnlyDisplay,omitempty"`
	StartTpe    *int32  `json:"StartTpe,omitempty" xml:"StartTpe,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetDisplayName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Name = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetOnlyDisplay(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.OnlyDisplay = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetStartTpe(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.StartTpe = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetVersion(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Version = &v
	return s
}

type DescribeClusterBasicInfoResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterBasicInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterBasicInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponse) SetHeaders(v map[string]*string) *DescribeClusterBasicInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterBasicInfoResponse) SetStatusCode(v int32) *DescribeClusterBasicInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterBasicInfoResponse) SetBody(v *DescribeClusterBasicInfoResponseBody) *DescribeClusterBasicInfoResponse {
	s.Body = v
	return s
}

type DescribeClusterOperationHostTaskLogRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostId          *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeClusterOperationHostTaskLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperationHostTaskLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetClusterId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetHostId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.HostId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetOperationId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.OperationId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetRegionId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetResourceOwnerId(v int64) *DescribeClusterOperationHostTaskLogRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetStatus(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.Status = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetTaskId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.TaskId = &v
	return s
}

type DescribeClusterOperationHostTaskLogResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Stderr    *string `json:"Stderr,omitempty" xml:"Stderr,omitempty"`
	Stdout    *string `json:"Stdout,omitempty" xml:"Stdout,omitempty"`
}

func (s DescribeClusterOperationHostTaskLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperationHostTaskLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperationHostTaskLogResponseBody) SetRequestId(v string) *DescribeClusterOperationHostTaskLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogResponseBody) SetStderr(v string) *DescribeClusterOperationHostTaskLogResponseBody {
	s.Stderr = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogResponseBody) SetStdout(v string) *DescribeClusterOperationHostTaskLogResponseBody {
	s.Stdout = &v
	return s
}

type DescribeClusterOperationHostTaskLogResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterOperationHostTaskLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterOperationHostTaskLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperationHostTaskLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperationHostTaskLogResponse) SetHeaders(v map[string]*string) *DescribeClusterOperationHostTaskLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterOperationHostTaskLogResponse) SetStatusCode(v int32) *DescribeClusterOperationHostTaskLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogResponse) SetBody(v *DescribeClusterOperationHostTaskLogResponseBody) *DescribeClusterOperationHostTaskLogResponse {
	s.Body = v
	return s
}

type DescribeClusterResourcePoolSchedulerTypeRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeClusterResourcePoolSchedulerTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResourcePoolSchedulerTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterResourcePoolSchedulerTypeRequest) SetClusterId(v string) *DescribeClusterResourcePoolSchedulerTypeRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeRequest) SetRegionId(v string) *DescribeClusterResourcePoolSchedulerTypeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeRequest) SetResourceOwnerId(v int64) *DescribeClusterResourcePoolSchedulerTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeClusterResourcePoolSchedulerTypeResponseBody struct {
	CurrentSchedulerType *string `json:"CurrentSchedulerType,omitempty" xml:"CurrentSchedulerType,omitempty"`
	DefaultSchedulerType *string `json:"DefaultSchedulerType,omitempty" xml:"DefaultSchedulerType,omitempty"`
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SupportSchedulerType *string `json:"SupportSchedulerType,omitempty" xml:"SupportSchedulerType,omitempty"`
}

func (s DescribeClusterResourcePoolSchedulerTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResourcePoolSchedulerTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponseBody) SetCurrentSchedulerType(v string) *DescribeClusterResourcePoolSchedulerTypeResponseBody {
	s.CurrentSchedulerType = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponseBody) SetDefaultSchedulerType(v string) *DescribeClusterResourcePoolSchedulerTypeResponseBody {
	s.DefaultSchedulerType = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponseBody) SetRequestId(v string) *DescribeClusterResourcePoolSchedulerTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponseBody) SetSupportSchedulerType(v string) *DescribeClusterResourcePoolSchedulerTypeResponseBody {
	s.SupportSchedulerType = &v
	return s
}

type DescribeClusterResourcePoolSchedulerTypeResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterResourcePoolSchedulerTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterResourcePoolSchedulerTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResourcePoolSchedulerTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponse) SetHeaders(v map[string]*string) *DescribeClusterResourcePoolSchedulerTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponse) SetStatusCode(v int32) *DescribeClusterResourcePoolSchedulerTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponse) SetBody(v *DescribeClusterResourcePoolSchedulerTypeResponseBody) *DescribeClusterResourcePoolSchedulerTypeResponse {
	s.Body = v
	return s
}

type DescribeClusterServiceRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceRequest) SetClusterId(v string) *DescribeClusterServiceRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterServiceRequest) SetRegionId(v string) *DescribeClusterServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterServiceRequest) SetResourceOwnerId(v int64) *DescribeClusterServiceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterServiceRequest) SetServiceName(v string) *DescribeClusterServiceRequest {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceResponseBody struct {
	RequestId   *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ServiceInfo *DescribeClusterServiceResponseBodyServiceInfo `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" type:"Struct"`
}

func (s DescribeClusterServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBody) SetRequestId(v string) *DescribeClusterServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterServiceResponseBody) SetServiceInfo(v *DescribeClusterServiceResponseBodyServiceInfo) *DescribeClusterServiceResponseBody {
	s.ServiceInfo = v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfo struct {
	ClusterServiceSummaryList    *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList    `json:"ClusterServiceSummaryList,omitempty" xml:"ClusterServiceSummaryList,omitempty" type:"Struct"`
	NeedRestartComponentNameList *DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList `json:"NeedRestartComponentNameList,omitempty" xml:"NeedRestartComponentNameList,omitempty" type:"Struct"`
	NeedRestartHostIdList        *DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList        `json:"NeedRestartHostIdList,omitempty" xml:"NeedRestartHostIdList,omitempty" type:"Struct"`
	NeedRestartInfo              *string                                                                    `json:"NeedRestartInfo,omitempty" xml:"NeedRestartInfo,omitempty"`
	NeedRestartNum               *int32                                                                     `json:"NeedRestartNum,omitempty" xml:"NeedRestartNum,omitempty"`
	ServiceActionList            *DescribeClusterServiceResponseBodyServiceInfoServiceActionList            `json:"ServiceActionList,omitempty" xml:"ServiceActionList,omitempty" type:"Struct"`
	ServiceName                  *string                                                                    `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceStatus                *string                                                                    `json:"ServiceStatus,omitempty" xml:"ServiceStatus,omitempty"`
	ServiceVersion               *string                                                                    `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
}

func (s DescribeClusterServiceResponseBodyServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetClusterServiceSummaryList(v *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ClusterServiceSummaryList = v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetNeedRestartComponentNameList(v *DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList) *DescribeClusterServiceResponseBodyServiceInfo {
	s.NeedRestartComponentNameList = v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetNeedRestartHostIdList(v *DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList) *DescribeClusterServiceResponseBodyServiceInfo {
	s.NeedRestartHostIdList = v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetNeedRestartInfo(v string) *DescribeClusterServiceResponseBodyServiceInfo {
	s.NeedRestartInfo = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetNeedRestartNum(v int32) *DescribeClusterServiceResponseBodyServiceInfo {
	s.NeedRestartNum = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetServiceActionList(v *DescribeClusterServiceResponseBodyServiceInfoServiceActionList) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ServiceActionList = v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetServiceName(v string) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ServiceName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetServiceStatus(v string) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ServiceStatus = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetServiceVersion(v string) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ServiceVersion = &v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList struct {
	ClusterServiceSummary []*DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary `json:"ClusterServiceSummary,omitempty" xml:"ClusterServiceSummary,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList) SetClusterServiceSummary(v []*DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList {
	s.ClusterServiceSummary = v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary struct {
	AlertInfo           *string `json:"AlertInfo,omitempty" xml:"AlertInfo,omitempty"`
	Category            *string `json:"Category,omitempty" xml:"Category,omitempty"`
	DesiredStoppedValue *int32  `json:"DesiredStoppedValue,omitempty" xml:"DesiredStoppedValue,omitempty"`
	DisplayName         *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Key                 *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Status              *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value               *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetAlertInfo(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.AlertInfo = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetCategory(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Category = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetDesiredStoppedValue(v int32) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.DesiredStoppedValue = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetDisplayName(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetKey(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Key = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetStatus(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Status = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetType(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Type = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetValue(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Value = &v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList struct {
	Service []*string `json:"Service,omitempty" xml:"Service,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList) SetService(v []*string) *DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList {
	s.Service = v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList struct {
	Service []*string `json:"Service,omitempty" xml:"Service,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList) SetService(v []*string) *DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList {
	s.Service = v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoServiceActionList struct {
	ServiceAction []*DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction `json:"ServiceAction,omitempty" xml:"ServiceAction,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoServiceActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoServiceActionList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionList) SetServiceAction(v []*DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) *DescribeClusterServiceResponseBodyServiceInfoServiceActionList {
	s.ServiceAction = v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction struct {
	ActionName    *string `json:"ActionName,omitempty" xml:"ActionName,omitempty"`
	Command       *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ComponentName *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetActionName(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.ActionName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetCommand(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.Command = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetComponentName(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.ComponentName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetDisplayName(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetServiceName(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponse) SetHeaders(v map[string]*string) *DescribeClusterServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterServiceResponse) SetStatusCode(v int32) *DescribeClusterServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterServiceResponse) SetBody(v *DescribeClusterServiceResponseBody) *DescribeClusterServiceResponse {
	s.Body = v
	return s
}

type DescribeClusterServiceConfigRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ConfigVersion   *string `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HostInstanceId  *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	TagValue        *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeClusterServiceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigRequest) SetClusterId(v string) *DescribeClusterServiceConfigRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetConfigVersion(v string) *DescribeClusterServiceConfigRequest {
	s.ConfigVersion = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetGroupId(v string) *DescribeClusterServiceConfigRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetHostInstanceId(v string) *DescribeClusterServiceConfigRequest {
	s.HostInstanceId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetRegionId(v string) *DescribeClusterServiceConfigRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetResourceOwnerId(v int64) *DescribeClusterServiceConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetServiceName(v string) *DescribeClusterServiceConfigRequest {
	s.ServiceName = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetTagValue(v string) *DescribeClusterServiceConfigRequest {
	s.TagValue = &v
	return s
}

type DescribeClusterServiceConfigResponseBody struct {
	Config    *DescribeClusterServiceConfigResponseBodyConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBody) SetConfig(v *DescribeClusterServiceConfigResponseBodyConfig) *DescribeClusterServiceConfigResponseBody {
	s.Config = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBody) SetRequestId(v string) *DescribeClusterServiceConfigResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfig struct {
	Applied          *string                                                         `json:"Applied,omitempty" xml:"Applied,omitempty"`
	Author           *string                                                         `json:"Author,omitempty" xml:"Author,omitempty"`
	Comment          *string                                                         `json:"Comment,omitempty" xml:"Comment,omitempty"`
	ConfigValueList  *DescribeClusterServiceConfigResponseBodyConfigConfigValueList  `json:"ConfigValueList,omitempty" xml:"ConfigValueList,omitempty" type:"Struct"`
	ConfigVersion    *string                                                         `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	CreateTime       *string                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	PropertyInfoList *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList `json:"PropertyInfoList,omitempty" xml:"PropertyInfoList,omitempty" type:"Struct"`
	ServiceName      *string                                                         `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfig) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetApplied(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.Applied = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetAuthor(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.Author = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetComment(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.Comment = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetConfigValueList(v *DescribeClusterServiceConfigResponseBodyConfigConfigValueList) *DescribeClusterServiceConfigResponseBodyConfig {
	s.ConfigValueList = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetConfigVersion(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.ConfigVersion = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetCreateTime(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.CreateTime = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetPropertyInfoList(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList) *DescribeClusterServiceConfigResponseBodyConfig {
	s.PropertyInfoList = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetServiceName(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigConfigValueList struct {
	ConfigValue []*DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueList) SetConfigValue(v []*DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) *DescribeClusterServiceConfigResponseBodyConfigConfigValueList {
	s.ConfigValue = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue struct {
	AllowCustom         *bool                                                                                        `json:"AllowCustom,omitempty" xml:"AllowCustom,omitempty"`
	ConfigItemValueList *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList `json:"ConfigItemValueList,omitempty" xml:"ConfigItemValueList,omitempty" type:"Struct"`
	ConfigName          *string                                                                                      `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	Scope               *string                                                                                      `json:"Scope,omitempty" xml:"Scope,omitempty"`
	ScopeId             *int64                                                                                       `json:"ScopeId,omitempty" xml:"ScopeId,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetAllowCustom(v bool) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.AllowCustom = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetConfigItemValueList(v *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.ConfigItemValueList = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetConfigName(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.ConfigName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetScope(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.Scope = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetScopeId(v int64) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.ScopeId = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList struct {
	ConfigItemValue []*DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue `json:"ConfigItemValue,omitempty" xml:"ConfigItemValue,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList) SetConfigItemValue(v []*DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList {
	s.ConfigItemValue = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	IsCustom    *bool   `json:"IsCustom,omitempty" xml:"IsCustom,omitempty"`
	ItemName    *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	Value       *string `json:"Value,omitempty" xml:"Value,omitempty"`
	ValueScope  *string `json:"ValueScope,omitempty" xml:"ValueScope,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetDescription(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.Description = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetIsCustom(v bool) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.IsCustom = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetItemName(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.ItemName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetValue(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.Value = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetValueScope(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.ValueScope = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList struct {
	PropertyInfo []*DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo `json:"PropertyInfo,omitempty" xml:"PropertyInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList) SetPropertyInfo(v []*DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList {
	s.PropertyInfo = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo struct {
	Component               *string                                                                                            `json:"Component,omitempty" xml:"Component,omitempty"`
	Description             *string                                                                                            `json:"Description,omitempty" xml:"Description,omitempty"`
	DisplayName             *string                                                                                            `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	EffectWay               *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay               `json:"EffectWay,omitempty" xml:"EffectWay,omitempty" type:"Struct"`
	FileName                *string                                                                                            `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Name                    *string                                                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	PropertyTypes           *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes           `json:"PropertyTypes,omitempty" xml:"PropertyTypes,omitempty" type:"Struct"`
	PropertyValueAttributes *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes `json:"PropertyValueAttributes,omitempty" xml:"PropertyValueAttributes,omitempty" type:"Struct"`
	ServiceName             *string                                                                                            `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Value                   *string                                                                                            `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetComponent(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.Component = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetDescription(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.Description = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetDisplayName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetEffectWay(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.EffectWay = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetFileName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.FileName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.Name = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetPropertyTypes(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.PropertyTypes = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetPropertyValueAttributes(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.PropertyValueAttributes = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetServiceName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.ServiceName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetValue(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.Value = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay struct {
	EffectType        *string `json:"EffectType,omitempty" xml:"EffectType,omitempty"`
	InvokeServiceName *string `json:"InvokeServiceName,omitempty" xml:"InvokeServiceName,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) SetEffectType(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay {
	s.EffectType = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) SetInvokeServiceName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay {
	s.InvokeServiceName = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes struct {
	PropertyType []*string `json:"propertyType,omitempty" xml:"propertyType,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes) SetPropertyType(v []*string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes {
	s.PropertyType = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes struct {
	Entries       *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries `json:"Entries,omitempty" xml:"Entries,omitempty" type:"Struct"`
	Hidden        *bool                                                                                                     `json:"Hidden,omitempty" xml:"Hidden,omitempty"`
	IncrememtStep *string                                                                                                   `json:"IncrememtStep,omitempty" xml:"IncrememtStep,omitempty"`
	Maximum       *string                                                                                                   `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	Mimimum       *string                                                                                                   `json:"Mimimum,omitempty" xml:"Mimimum,omitempty"`
	ReadOnly      *bool                                                                                                     `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	Type          *string                                                                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	Unit          *string                                                                                                   `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetEntries(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Entries = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetHidden(v bool) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Hidden = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetIncrememtStep(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.IncrememtStep = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetMaximum(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Maximum = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetMimimum(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Mimimum = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetReadOnly(v bool) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.ReadOnly = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetType(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Type = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetUnit(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Unit = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries struct {
	ValueEntryInfo []*DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo `json:"ValueEntryInfo,omitempty" xml:"ValueEntryInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries) SetValueEntryInfo(v []*DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries {
	s.ValueEntryInfo = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Label       *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Value       *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) SetDescription(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo {
	s.Description = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) SetLabel(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo {
	s.Label = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) SetValue(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo {
	s.Value = &v
	return s
}

type DescribeClusterServiceConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterServiceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterServiceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponse) SetHeaders(v map[string]*string) *DescribeClusterServiceConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterServiceConfigResponse) SetStatusCode(v int32) *DescribeClusterServiceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterServiceConfigResponse) SetBody(v *DescribeClusterServiceConfigResponseBody) *DescribeClusterServiceConfigResponse {
	s.Body = v
	return s
}

type DescribeClusterServiceConfigTagRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ConfigTag       *string `json:"ConfigTag,omitempty" xml:"ConfigTag,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceConfigTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagRequest) SetClusterId(v string) *DescribeClusterServiceConfigTagRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterServiceConfigTagRequest) SetConfigTag(v string) *DescribeClusterServiceConfigTagRequest {
	s.ConfigTag = &v
	return s
}

func (s *DescribeClusterServiceConfigTagRequest) SetRegionId(v string) *DescribeClusterServiceConfigTagRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterServiceConfigTagRequest) SetResourceOwnerId(v int64) *DescribeClusterServiceConfigTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterServiceConfigTagRequest) SetServiceName(v string) *DescribeClusterServiceConfigTagRequest {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceConfigTagResponseBody struct {
	ConfigTagList *DescribeClusterServiceConfigTagResponseBodyConfigTagList `json:"ConfigTagList,omitempty" xml:"ConfigTagList,omitempty" type:"Struct"`
	RequestId     *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterServiceConfigTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBody) SetConfigTagList(v *DescribeClusterServiceConfigTagResponseBodyConfigTagList) *DescribeClusterServiceConfigTagResponseBody {
	s.ConfigTagList = v
	return s
}

func (s *DescribeClusterServiceConfigTagResponseBody) SetRequestId(v string) *DescribeClusterServiceConfigTagResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterServiceConfigTagResponseBodyConfigTagList struct {
	ConfigTag []*DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag `json:"ConfigTag,omitempty" xml:"ConfigTag,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagList) SetConfigTag(v []*DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) *DescribeClusterServiceConfigTagResponseBodyConfigTagList {
	s.ConfigTag = v
	return s
}

type DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag struct {
	Tag       *string                                                                     `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TagDesc   *string                                                                     `json:"TagDesc,omitempty" xml:"TagDesc,omitempty"`
	ValueList *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList `json:"ValueList,omitempty" xml:"ValueList,omitempty" type:"Struct"`
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) SetTag(v string) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag {
	s.Tag = &v
	return s
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) SetTagDesc(v string) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag {
	s.TagDesc = &v
	return s
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) SetValueList(v *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag {
	s.ValueList = v
	return s
}

type DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList struct {
	Value []*DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList) SetValue(v []*DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList {
	s.Value = v
	return s
}

type DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue struct {
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
	ValueDesc *string `json:"ValueDesc,omitempty" xml:"ValueDesc,omitempty"`
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) SetValue(v string) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue {
	s.Value = &v
	return s
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) SetValueDesc(v string) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue {
	s.ValueDesc = &v
	return s
}

type DescribeClusterServiceConfigTagResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterServiceConfigTagResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterServiceConfigTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponse) SetHeaders(v map[string]*string) *DescribeClusterServiceConfigTagResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterServiceConfigTagResponse) SetStatusCode(v int32) *DescribeClusterServiceConfigTagResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterServiceConfigTagResponse) SetBody(v *DescribeClusterServiceConfigTagResponseBody) *DescribeClusterServiceConfigTagResponse {
	s.Body = v
	return s
}

type DescribeClusterTemplateRequest struct {
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeClusterTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateRequest) SetBizId(v string) *DescribeClusterTemplateRequest {
	s.BizId = &v
	return s
}

func (s *DescribeClusterTemplateRequest) SetResourceGroupId(v string) *DescribeClusterTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeClusterTemplateRequest) SetResourceOwnerId(v int64) *DescribeClusterTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

type DescribeClusterTemplateResponseBody struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateInfo *DescribeClusterTemplateResponseBodyTemplateInfo `json:"TemplateInfo,omitempty" xml:"TemplateInfo,omitempty" type:"Struct"`
}

func (s DescribeClusterTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBody) SetRequestId(v string) *DescribeClusterTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBody) SetTemplateInfo(v *DescribeClusterTemplateResponseBodyTemplateInfo) *DescribeClusterTemplateResponseBody {
	s.TemplateInfo = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfo struct {
	AllowNotebook          *bool                                                               `json:"AllowNotebook,omitempty" xml:"AllowNotebook,omitempty"`
	BootstrapActionList    *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	ClusterType            *string                                                             `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	ConfigList             *DescribeClusterTemplateResponseBodyTemplateInfoConfigList          `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Struct"`
	Configurations         *string                                                             `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	CreateSource           *string                                                             `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	DataDiskEncrypted      *bool                                                               `json:"DataDiskEncrypted,omitempty" xml:"DataDiskEncrypted,omitempty"`
	DataDiskKMSKeyId       *string                                                             `json:"DataDiskKMSKeyId,omitempty" xml:"DataDiskKMSKeyId,omitempty"`
	DepositType            *string                                                             `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	EasEnable              *bool                                                               `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	EmrVer                 *string                                                             `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	GmtCreate              *int64                                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified            *int64                                                              `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HighAvailabilityEnable *bool                                                               `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	HostGroupList          *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList       `json:"HostGroupList,omitempty" xml:"HostGroupList,omitempty" type:"Struct"`
	Id                     *string                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	InitCustomHiveMetaDb   *bool                                                               `json:"InitCustomHiveMetaDb,omitempty" xml:"InitCustomHiveMetaDb,omitempty"`
	InstanceGeneration     *string                                                             `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	IoOptimized            *bool                                                               `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	IsOpenPublicIp         *bool                                                               `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	KeyPairName            *string                                                             `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	LogEnable              *bool                                                               `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	LogPath                *string                                                             `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	MachineType            *string                                                             `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MasterNodeTotal        *int32                                                              `json:"MasterNodeTotal,omitempty" xml:"MasterNodeTotal,omitempty"`
	MasterPwd              *string                                                             `json:"MasterPwd,omitempty" xml:"MasterPwd,omitempty"`
	MetaStoreConf          *string                                                             `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	MetaStoreType          *string                                                             `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	NetType                *string                                                             `json:"NetType,omitempty" xml:"NetType,omitempty"`
	SecurityGroupId        *string                                                             `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName      *string                                                             `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	SoftwareInfoList       *DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList    `json:"SoftwareInfoList,omitempty" xml:"SoftwareInfoList,omitempty" type:"Struct"`
	SshEnable              *bool                                                               `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	Tags                   *DescribeClusterTemplateResponseBodyTemplateInfoTags                `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	TemplateName           *string                                                             `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	UseCustomHiveMetaDb    *bool                                                               `json:"UseCustomHiveMetaDb,omitempty" xml:"UseCustomHiveMetaDb,omitempty"`
	UseLocalMetaDb         *bool                                                               `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	UserDefinedEmrEcsRole  *string                                                             `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	UserId                 *string                                                             `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VSwitchId              *string                                                             `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// VPC ID。
	VpcId  *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetAllowNotebook(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.AllowNotebook = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetBootstrapActionList(v *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.BootstrapActionList = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetClusterType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetConfigList(v *DescribeClusterTemplateResponseBodyTemplateInfoConfigList) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.ConfigList = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetConfigurations(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.Configurations = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetCreateSource(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.CreateSource = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetDataDiskEncrypted(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.DataDiskEncrypted = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetDataDiskKMSKeyId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.DataDiskKMSKeyId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetDepositType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.DepositType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetEasEnable(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.EasEnable = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetEmrVer(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.EmrVer = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetGmtCreate(v int64) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.GmtCreate = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetGmtModified(v int64) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.GmtModified = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetHighAvailabilityEnable(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetHostGroupList(v *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.HostGroupList = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.Id = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetInitCustomHiveMetaDb(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.InitCustomHiveMetaDb = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetInstanceGeneration(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetIoOptimized(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.IoOptimized = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetIsOpenPublicIp(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.IsOpenPublicIp = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetKeyPairName(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.KeyPairName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetLogEnable(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.LogEnable = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetLogPath(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.LogPath = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMachineType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MachineType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMasterNodeTotal(v int32) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MasterNodeTotal = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMasterPwd(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MasterPwd = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMetaStoreConf(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MetaStoreConf = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMetaStoreType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MetaStoreType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetNetType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.NetType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetSecurityGroupId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetSecurityGroupName(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetSoftwareInfoList(v *DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.SoftwareInfoList = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetSshEnable(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.SshEnable = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetTags(v *DescribeClusterTemplateResponseBodyTemplateInfoTags) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.Tags = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetTemplateName(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.TemplateName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetUseCustomHiveMetaDb(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.UseCustomHiveMetaDb = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetUseLocalMetaDb(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.UseLocalMetaDb = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetUserDefinedEmrEcsRole(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetUserId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.UserId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetVSwitchId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetVpcId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.VpcId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetZoneId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.ZoneId = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList struct {
	BootstrapAction []*DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList) SetBootstrapAction(v []*DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) SetArg(v string) *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) SetName(v string) *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) SetPath(v string) *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoConfigList struct {
	Config []*DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoConfigList) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigList) SetConfig(v []*DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) *DescribeClusterTemplateResponseBodyTemplateInfoConfigList {
	s.Config = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig struct {
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetConfigKey(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.ConfigKey = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetConfigValue(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.ConfigValue = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetEncrypt(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.Encrypt = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetFileName(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.FileName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetReplace(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.Replace = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetServiceName(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.ServiceName = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList struct {
	HostGroup []*DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList) SetHostGroup(v []*DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList {
	s.HostGroup = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup struct {
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DiskCapacity       *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	DiskCount          *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	DiskType           *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId        *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName      *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupType      *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MultiInstanceTypes *string `json:"MultiInstanceTypes,omitempty" xml:"MultiInstanceTypes,omitempty"`
	NodeCount          *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	Period             *string `json:"Period,omitempty" xml:"Period,omitempty"`
	SysDiskCapacity    *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	SysDiskType        *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetChargeType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.ChargeType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetDiskCapacity(v int32) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetDiskCount(v int32) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.DiskCount = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetDiskType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.DiskType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetHostGroupId(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetHostGroupName(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetHostGroupType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetInstanceType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.InstanceType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetMultiInstanceTypes(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.MultiInstanceTypes = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetNodeCount(v int32) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.NodeCount = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetPeriod(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.Period = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetSysDiskCapacity(v int32) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetSysDiskType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.SysDiskType = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList struct {
	SoftwareInfo []*string `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList) SetSoftwareInfo(v []*string) *DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList {
	s.SoftwareInfo = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoTags struct {
	Tag []*DescribeClusterTemplateResponseBodyTemplateInfoTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoTags) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoTags) SetTag(v []*DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) *DescribeClusterTemplateResponseBodyTemplateInfoTags {
	s.Tag = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) SetTagKey(v string) *DescribeClusterTemplateResponseBodyTemplateInfoTagsTag {
	s.TagKey = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) SetTagValue(v string) *DescribeClusterTemplateResponseBodyTemplateInfoTagsTag {
	s.TagValue = &v
	return s
}

type DescribeClusterTemplateResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponse) SetHeaders(v map[string]*string) *DescribeClusterTemplateResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterTemplateResponse) SetStatusCode(v int32) *DescribeClusterTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterTemplateResponse) SetBody(v *DescribeClusterTemplateResponseBody) *DescribeClusterTemplateResponse {
	s.Body = v
	return s
}

type DescribeClusterV2Request struct {
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s DescribeClusterV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2Request) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2Request) SetId(v string) *DescribeClusterV2Request {
	s.Id = &v
	return s
}

func (s *DescribeClusterV2Request) SetRegionId(v string) *DescribeClusterV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterV2Request) SetResourceOwnerId(v int64) *DescribeClusterV2Request {
	s.ResourceOwnerId = &v
	return s
}

type DescribeClusterV2ResponseBody struct {
	ClusterInfo *DescribeClusterV2ResponseBodyClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Struct"`
	RequestId   *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBody) SetClusterInfo(v *DescribeClusterV2ResponseBodyClusterInfo) *DescribeClusterV2ResponseBody {
	s.ClusterInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBody) SetRequestId(v string) *DescribeClusterV2ResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfo struct {
	AccessInfo                      *DescribeClusterV2ResponseBodyClusterInfoAccessInfo             `json:"AccessInfo,omitempty" xml:"AccessInfo,omitempty" type:"Struct"`
	AutoScalingAllowed              *bool                                                           `json:"AutoScalingAllowed,omitempty" xml:"AutoScalingAllowed,omitempty"`
	AutoScalingByLoadAllowed        *bool                                                           `json:"AutoScalingByLoadAllowed,omitempty" xml:"AutoScalingByLoadAllowed,omitempty"`
	AutoScalingEnable               *bool                                                           `json:"AutoScalingEnable,omitempty" xml:"AutoScalingEnable,omitempty"`
	AutoScalingSpotWithLimitAllowed *bool                                                           `json:"AutoScalingSpotWithLimitAllowed,omitempty" xml:"AutoScalingSpotWithLimitAllowed,omitempty"`
	AutoScalingVersion              *string                                                         `json:"AutoScalingVersion,omitempty" xml:"AutoScalingVersion,omitempty"`
	AutoScalingWithGraceAllowed     *bool                                                           `json:"AutoScalingWithGraceAllowed,omitempty" xml:"AutoScalingWithGraceAllowed,omitempty"`
	BootstrapActionList             *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList    `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	BootstrapFailed                 *bool                                                           `json:"BootstrapFailed,omitempty" xml:"BootstrapFailed,omitempty"`
	ChargeType                      *string                                                         `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Configurations                  *string                                                         `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	CoreNodeInService               *int32                                                          `json:"CoreNodeInService,omitempty" xml:"CoreNodeInService,omitempty"`
	CoreNodeTotal                   *int32                                                          `json:"CoreNodeTotal,omitempty" xml:"CoreNodeTotal,omitempty"`
	CreateResource                  *string                                                         `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	CreateType                      *string                                                         `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DataDiskEncrypted               *bool                                                           `json:"DataDiskEncrypted,omitempty" xml:"DataDiskEncrypted,omitempty"`
	DataDiskKMSKeyId                *string                                                         `json:"DataDiskKMSKeyId,omitempty" xml:"DataDiskKMSKeyId,omitempty"`
	DepositType                     *string                                                         `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	EasEnable                       *bool                                                           `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	ExpiredTime                     *int64                                                          `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ExtraInfo                       *string                                                         `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	FailReason                      *DescribeClusterV2ResponseBodyClusterInfoFailReason             `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
	GatewayClusterIds               *string                                                         `json:"GatewayClusterIds,omitempty" xml:"GatewayClusterIds,omitempty"`
	GatewayClusterInfoList          *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList `json:"GatewayClusterInfoList,omitempty" xml:"GatewayClusterInfoList,omitempty" type:"Struct"`
	HighAvailabilityEnable          *bool                                                           `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	HostGroupList                   *DescribeClusterV2ResponseBodyClusterInfoHostGroupList          `json:"HostGroupList,omitempty" xml:"HostGroupList,omitempty" type:"Struct"`
	HostPoolInfo                    *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo           `json:"HostPoolInfo,omitempty" xml:"HostPoolInfo,omitempty" type:"Struct"`
	Id                              *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	ImageId                         *string                                                         `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	InstanceGeneration              *string                                                         `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	IoOptimized                     *bool                                                           `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	K8sClusterId                    *string                                                         `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	LocalMetaDb                     *bool                                                           `json:"LocalMetaDb,omitempty" xml:"LocalMetaDb,omitempty"`
	LogEnable                       *bool                                                           `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	LogPath                         *string                                                         `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	MachineType                     *string                                                         `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MasterNodeInService             *int32                                                          `json:"MasterNodeInService,omitempty" xml:"MasterNodeInService,omitempty"`
	MasterNodeTotal                 *int32                                                          `json:"MasterNodeTotal,omitempty" xml:"MasterNodeTotal,omitempty"`
	MetaStoreType                   *string                                                         `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	Name                            *string                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	NetType                         *string                                                         `json:"NetType,omitempty" xml:"NetType,omitempty"`
	Period                          *int32                                                          `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId                        *string                                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RelateClusterId                 *string                                                         `json:"RelateClusterId,omitempty" xml:"RelateClusterId,omitempty"`
	RelateClusterInfo               *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo      `json:"RelateClusterInfo,omitempty" xml:"RelateClusterInfo,omitempty" type:"Struct"`
	ResizeDiskEnable                *bool                                                           `json:"ResizeDiskEnable,omitempty" xml:"ResizeDiskEnable,omitempty"`
	RunningTime                     *int32                                                          `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	SecurityGroupId                 *string                                                         `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName               *string                                                         `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ShowSoftwareInterface           *bool                                                           `json:"ShowSoftwareInterface,omitempty" xml:"ShowSoftwareInterface,omitempty"`
	SoftwareInfo                    *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo           `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Struct"`
	StartTime                       *int64                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status                          *string                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	StopTime                        *int64                                                          `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	TaskNodeInService               *int32                                                          `json:"TaskNodeInService,omitempty" xml:"TaskNodeInService,omitempty"`
	TaskNodeTotal                   *int32                                                          `json:"TaskNodeTotal,omitempty" xml:"TaskNodeTotal,omitempty"`
	UserDefinedEmrEcsRole           *string                                                         `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	UserId                          *string                                                         `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VSwitchId                       *string                                                         `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// VPC ID。
	VpcId  *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAccessInfo(v *DescribeClusterV2ResponseBodyClusterInfoAccessInfo) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AccessInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingAllowed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingAllowed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingByLoadAllowed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingByLoadAllowed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingSpotWithLimitAllowed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingSpotWithLimitAllowed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingVersion(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingVersion = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingWithGraceAllowed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingWithGraceAllowed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetBootstrapActionList(v *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList) *DescribeClusterV2ResponseBodyClusterInfo {
	s.BootstrapActionList = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetBootstrapFailed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.BootstrapFailed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetChargeType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetConfigurations(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Configurations = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetCoreNodeInService(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.CoreNodeInService = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetCoreNodeTotal(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.CoreNodeTotal = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetCreateResource(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetCreateType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.CreateType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetDataDiskEncrypted(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.DataDiskEncrypted = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetDataDiskKMSKeyId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.DataDiskKMSKeyId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetDepositType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.DepositType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetEasEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.EasEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetExpiredTime(v int64) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetExtraInfo(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ExtraInfo = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetFailReason(v *DescribeClusterV2ResponseBodyClusterInfoFailReason) *DescribeClusterV2ResponseBodyClusterInfo {
	s.FailReason = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetGatewayClusterIds(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.GatewayClusterIds = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetGatewayClusterInfoList(v *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList) *DescribeClusterV2ResponseBodyClusterInfo {
	s.GatewayClusterInfoList = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetHighAvailabilityEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetHostGroupList(v *DescribeClusterV2ResponseBodyClusterInfoHostGroupList) *DescribeClusterV2ResponseBodyClusterInfo {
	s.HostGroupList = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetHostPoolInfo(v *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) *DescribeClusterV2ResponseBodyClusterInfo {
	s.HostPoolInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Id = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetImageId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ImageId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetInstanceGeneration(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetIoOptimized(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.IoOptimized = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetK8sClusterId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetLocalMetaDb(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.LocalMetaDb = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetLogEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.LogEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetLogPath(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.LogPath = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetMachineType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.MachineType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetMasterNodeInService(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.MasterNodeInService = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetMasterNodeTotal(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.MasterNodeTotal = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetMetaStoreType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.MetaStoreType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetName(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Name = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetNetType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.NetType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetPeriod(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Period = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetRegionId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetRelateClusterId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.RelateClusterId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetRelateClusterInfo(v *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) *DescribeClusterV2ResponseBodyClusterInfo {
	s.RelateClusterInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetResizeDiskEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ResizeDiskEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetRunningTime(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetSecurityGroupId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetSecurityGroupName(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetShowSoftwareInterface(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ShowSoftwareInterface = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetSoftwareInfo(v *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) *DescribeClusterV2ResponseBodyClusterInfo {
	s.SoftwareInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetStartTime(v int64) *DescribeClusterV2ResponseBodyClusterInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetStatus(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Status = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetStopTime(v int64) *DescribeClusterV2ResponseBodyClusterInfo {
	s.StopTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetTaskNodeInService(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.TaskNodeInService = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetTaskNodeTotal(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.TaskNodeTotal = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetUserDefinedEmrEcsRole(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetUserId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.UserId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetVSwitchId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetVpcId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.VpcId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetZoneId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ZoneId = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoAccessInfo struct {
	ZKLinks *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks `json:"ZKLinks,omitempty" xml:"ZKLinks,omitempty" type:"Struct"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoAccessInfo) SetZKLinks(v *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks) *DescribeClusterV2ResponseBodyClusterInfoAccessInfo {
	s.ZKLinks = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks struct {
	ZKLink []*DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink `json:"ZKLink,omitempty" xml:"ZKLink,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks) SetZKLink(v []*DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks {
	s.ZKLink = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink struct {
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) SetLink(v string) *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink {
	s.Link = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) SetPort(v string) *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink {
	s.Port = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList struct {
	BootstrapAction []*DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList) SetBootstrapAction(v []*DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetArg(v string) *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetName(v string) *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetPath(v string) *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoFailReason struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoFailReason) SetErrorCode(v string) *DescribeClusterV2ResponseBodyClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoFailReason) SetErrorMsg(v string) *DescribeClusterV2ResponseBodyClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoFailReason) SetRequestId(v string) *DescribeClusterV2ResponseBodyClusterInfoFailReason {
	s.RequestId = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList struct {
	GatewayClusterInfo []*DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo `json:"GatewayClusterInfo,omitempty" xml:"GatewayClusterInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList) SetGatewayClusterInfo(v []*DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList {
	s.GatewayClusterInfo = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetClusterId(v string) *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetClusterName(v string) *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetStatus(v string) *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.Status = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupList struct {
	HostGroup []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupList) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupList) SetHostGroup(v []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) *DescribeClusterV2ResponseBodyClusterInfoHostGroupList {
	s.HostGroup = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup struct {
	BandWidth             *string                                                              `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	ChargeType            *string                                                              `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CpuCore               *int32                                                               `json:"CpuCore,omitempty" xml:"CpuCore,omitempty"`
	DiskCapacity          *int32                                                               `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	DiskCount             *int32                                                               `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	DiskType              *string                                                              `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupChangeStatus *string                                                              `json:"HostGroupChangeStatus,omitempty" xml:"HostGroupChangeStatus,omitempty"`
	HostGroupChangeType   *string                                                              `json:"HostGroupChangeType,omitempty" xml:"HostGroupChangeType,omitempty"`
	HostGroupId           *string                                                              `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName         *string                                                              `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupSubType      *string                                                              `json:"HostGroupSubType,omitempty" xml:"HostGroupSubType,omitempty"`
	HostGroupType         *string                                                              `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	InstanceType          *string                                                              `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	LockReason            *string                                                              `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	LockType              *string                                                              `json:"LockType,omitempty" xml:"LockType,omitempty"`
	MemoryCapacity        *int32                                                               `json:"MemoryCapacity,omitempty" xml:"MemoryCapacity,omitempty"`
	NodeCount             *int32                                                               `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	Nodes                 *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Struct"`
	Period                *string                                                              `json:"Period,omitempty" xml:"Period,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetBandWidth(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.BandWidth = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetChargeType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.ChargeType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetCpuCore(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.CpuCore = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetDiskCapacity(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetDiskCount(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.DiskCount = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetDiskType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.DiskType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupChangeStatus(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupChangeStatus = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupChangeType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupChangeType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupName(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupSubType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupSubType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetInstanceType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.InstanceType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetLockReason(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.LockReason = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetLockType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.LockType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetMemoryCapacity(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.MemoryCapacity = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetNodeCount(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.NodeCount = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetNodes(v *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.Nodes = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetPeriod(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.Period = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes struct {
	Node []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes) SetNode(v []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes {
	s.Node = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode struct {
	CreateTime     *string                                                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DaemonInfos    *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos `json:"DaemonInfos,omitempty" xml:"DaemonInfos,omitempty" type:"Struct"`
	DiskInfos      *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos   `json:"DiskInfos,omitempty" xml:"DiskInfos,omitempty" type:"Struct"`
	EmrExpiredTime *string                                                                             `json:"EmrExpiredTime,omitempty" xml:"EmrExpiredTime,omitempty"`
	ExpiredTime    *string                                                                             `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	InnerIp        *string                                                                             `json:"InnerIp,omitempty" xml:"InnerIp,omitempty"`
	InstanceId     *string                                                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	PubIp          *string                                                                             `json:"PubIp,omitempty" xml:"PubIp,omitempty"`
	Status         *string                                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	SupportIpV6    *bool                                                                               `json:"SupportIpV6,omitempty" xml:"SupportIpV6,omitempty"`
	ZoneId         *string                                                                             `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetCreateTime(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.CreateTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetDaemonInfos(v *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.DaemonInfos = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetDiskInfos(v *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.DiskInfos = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetEmrExpiredTime(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.EmrExpiredTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetExpiredTime(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetInnerIp(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.InnerIp = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetInstanceId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.InstanceId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetPubIp(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.PubIp = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetStatus(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.Status = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetSupportIpV6(v bool) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.SupportIpV6 = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetZoneId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.ZoneId = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos struct {
	DaemonInfo []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo `json:"DaemonInfo,omitempty" xml:"DaemonInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos) SetDaemonInfo(v []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos {
	s.DaemonInfo = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo) SetName(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo {
	s.Name = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos struct {
	DiskInfo []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo `json:"DiskInfo,omitempty" xml:"DiskInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos) SetDiskInfo(v []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos {
	s.DiskInfo = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo struct {
	Device   *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskId   *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	Size     *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetDevice(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.Device = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetDiskId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.DiskId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetDiskName(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.DiskName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetSize(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.Size = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.Type = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo struct {
	HpBizId *string `json:"HpBizId,omitempty" xml:"HpBizId,omitempty"`
	HpName  *string `json:"HpName,omitempty" xml:"HpName,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) SetHpBizId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo {
	s.HpBizId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) SetHpName(v string) *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo {
	s.HpName = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) SetClusterId(v string) *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) SetClusterName(v string) *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) SetClusterType(v string) *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) SetStatus(v string) *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo {
	s.Status = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo struct {
	ClusterType *string                                                        `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	EmrVer      *string                                                        `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	Softwares   *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares `json:"Softwares,omitempty" xml:"Softwares,omitempty" type:"Struct"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) SetClusterType(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) SetEmrVer(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo {
	s.EmrVer = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) SetSoftwares(v *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo {
	s.Softwares = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares struct {
	Software []*DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware `json:"Software,omitempty" xml:"Software,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares) SetSoftware(v []*DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares {
	s.Software = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OnlyDisplay *bool   `json:"OnlyDisplay,omitempty" xml:"OnlyDisplay,omitempty"`
	StartTpe    *int32  `json:"StartTpe,omitempty" xml:"StartTpe,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetDisplayName(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetName(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Name = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetOnlyDisplay(v bool) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.OnlyDisplay = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetStartTpe(v int32) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.StartTpe = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetVersion(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Version = &v
	return s
}

type DescribeClusterV2Response struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeClusterV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeClusterV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2Response) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2Response) SetHeaders(v map[string]*string) *DescribeClusterV2Response {
	s.Headers = v
	return s
}

func (s *DescribeClusterV2Response) SetStatusCode(v int32) *DescribeClusterV2Response {
	s.StatusCode = &v
	return s
}

func (s *DescribeClusterV2Response) SetBody(v *DescribeClusterV2ResponseBody) *DescribeClusterV2Response {
	s.Body = v
	return s
}

type DescribeFlowRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowRequest) SetId(v string) *DescribeFlowRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowRequest) SetProjectId(v string) *DescribeFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowRequest) SetRegionId(v string) *DescribeFlowRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowResponseBody struct {
	AlertConf               *string                                 `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertDingDingGroupBizId *string                                 `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	AlertUserGroupBizId     *string                                 `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	Application             *string                                 `json:"Application,omitempty" xml:"Application,omitempty"`
	CategoryId              *string                                 `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	ClusterId               *string                                 `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreateCluster           *bool                                   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	CronExpr                *string                                 `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	Description             *string                                 `json:"Description,omitempty" xml:"Description,omitempty"`
	EditLockDetail          *string                                 `json:"EditLockDetail,omitempty" xml:"EditLockDetail,omitempty"`
	EndSchedule             *int64                                  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	GmtCreate               *int64                                  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified             *int64                                  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Graph                   *string                                 `json:"Graph,omitempty" xml:"Graph,omitempty"`
	HostName                *string                                 `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Id                      *string                                 `json:"Id,omitempty" xml:"Id,omitempty"`
	Lifecycle               *string                                 `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	LogArchiveLocation      *string                                 `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Name                    *string                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace               *string                                 `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ParentFlowList          *DescribeFlowResponseBodyParentFlowList `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty" type:"Struct"`
	Periodic                *bool                                   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	RequestId               *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	StartSchedule           *int64                                  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	Status                  *string                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                    *string                                 `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowResponseBody) SetAlertConf(v string) *DescribeFlowResponseBody {
	s.AlertConf = &v
	return s
}

func (s *DescribeFlowResponseBody) SetAlertDingDingGroupBizId(v string) *DescribeFlowResponseBody {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetAlertUserGroupBizId(v string) *DescribeFlowResponseBody {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetApplication(v string) *DescribeFlowResponseBody {
	s.Application = &v
	return s
}

func (s *DescribeFlowResponseBody) SetCategoryId(v string) *DescribeFlowResponseBody {
	s.CategoryId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetClusterId(v string) *DescribeFlowResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetCreateCluster(v bool) *DescribeFlowResponseBody {
	s.CreateCluster = &v
	return s
}

func (s *DescribeFlowResponseBody) SetCronExpr(v string) *DescribeFlowResponseBody {
	s.CronExpr = &v
	return s
}

func (s *DescribeFlowResponseBody) SetDescription(v string) *DescribeFlowResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeFlowResponseBody) SetEditLockDetail(v string) *DescribeFlowResponseBody {
	s.EditLockDetail = &v
	return s
}

func (s *DescribeFlowResponseBody) SetEndSchedule(v int64) *DescribeFlowResponseBody {
	s.EndSchedule = &v
	return s
}

func (s *DescribeFlowResponseBody) SetGmtCreate(v int64) *DescribeFlowResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowResponseBody) SetGmtModified(v int64) *DescribeFlowResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowResponseBody) SetGraph(v string) *DescribeFlowResponseBody {
	s.Graph = &v
	return s
}

func (s *DescribeFlowResponseBody) SetHostName(v string) *DescribeFlowResponseBody {
	s.HostName = &v
	return s
}

func (s *DescribeFlowResponseBody) SetId(v string) *DescribeFlowResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowResponseBody) SetLifecycle(v string) *DescribeFlowResponseBody {
	s.Lifecycle = &v
	return s
}

func (s *DescribeFlowResponseBody) SetLogArchiveLocation(v string) *DescribeFlowResponseBody {
	s.LogArchiveLocation = &v
	return s
}

func (s *DescribeFlowResponseBody) SetName(v string) *DescribeFlowResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeFlowResponseBody) SetNamespace(v string) *DescribeFlowResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeFlowResponseBody) SetParentFlowList(v *DescribeFlowResponseBodyParentFlowList) *DescribeFlowResponseBody {
	s.ParentFlowList = v
	return s
}

func (s *DescribeFlowResponseBody) SetPeriodic(v bool) *DescribeFlowResponseBody {
	s.Periodic = &v
	return s
}

func (s *DescribeFlowResponseBody) SetRequestId(v string) *DescribeFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetStartSchedule(v int64) *DescribeFlowResponseBody {
	s.StartSchedule = &v
	return s
}

func (s *DescribeFlowResponseBody) SetStatus(v string) *DescribeFlowResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeFlowResponseBody) SetType(v string) *DescribeFlowResponseBody {
	s.Type = &v
	return s
}

type DescribeFlowResponseBodyParentFlowList struct {
	ParentFlow []*DescribeFlowResponseBodyParentFlowListParentFlow `json:"ParentFlow,omitempty" xml:"ParentFlow,omitempty" type:"Repeated"`
}

func (s DescribeFlowResponseBodyParentFlowList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowResponseBodyParentFlowList) GoString() string {
	return s.String()
}

func (s *DescribeFlowResponseBodyParentFlowList) SetParentFlow(v []*DescribeFlowResponseBodyParentFlowListParentFlow) *DescribeFlowResponseBodyParentFlowList {
	s.ParentFlow = v
	return s
}

type DescribeFlowResponseBodyParentFlowListParentFlow struct {
	ParentFlowId   *string `json:"ParentFlowId,omitempty" xml:"ParentFlowId,omitempty"`
	ParentFlowName *string `json:"ParentFlowName,omitempty" xml:"ParentFlowName,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName    *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
}

func (s DescribeFlowResponseBodyParentFlowListParentFlow) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowResponseBodyParentFlowListParentFlow) GoString() string {
	return s.String()
}

func (s *DescribeFlowResponseBodyParentFlowListParentFlow) SetParentFlowId(v string) *DescribeFlowResponseBodyParentFlowListParentFlow {
	s.ParentFlowId = &v
	return s
}

func (s *DescribeFlowResponseBodyParentFlowListParentFlow) SetParentFlowName(v string) *DescribeFlowResponseBodyParentFlowListParentFlow {
	s.ParentFlowName = &v
	return s
}

func (s *DescribeFlowResponseBodyParentFlowListParentFlow) SetProjectId(v string) *DescribeFlowResponseBodyParentFlowListParentFlow {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowResponseBodyParentFlowListParentFlow) SetProjectName(v string) *DescribeFlowResponseBodyParentFlowListParentFlow {
	s.ProjectName = &v
	return s
}

type DescribeFlowResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowResponse) SetHeaders(v map[string]*string) *DescribeFlowResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowResponse) SetStatusCode(v int32) *DescribeFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowResponse) SetBody(v *DescribeFlowResponseBody) *DescribeFlowResponse {
	s.Body = v
	return s
}

type DescribeFlowCategoryRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryRequest) SetId(v string) *DescribeFlowCategoryRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowCategoryRequest) SetProjectId(v string) *DescribeFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowCategoryRequest) SetRegionId(v string) *DescribeFlowCategoryRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowCategoryResponseBody struct {
	CategoryType *string `json:"CategoryType,omitempty" xml:"CategoryType,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ObjectId     *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	ObjectType   *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	ParentId     *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId    *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryResponseBody) SetCategoryType(v string) *DescribeFlowCategoryResponseBody {
	s.CategoryType = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetGmtCreate(v int64) *DescribeFlowCategoryResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetGmtModified(v int64) *DescribeFlowCategoryResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetId(v string) *DescribeFlowCategoryResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetName(v string) *DescribeFlowCategoryResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetObjectId(v string) *DescribeFlowCategoryResponseBody {
	s.ObjectId = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetObjectType(v string) *DescribeFlowCategoryResponseBody {
	s.ObjectType = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetParentId(v string) *DescribeFlowCategoryResponseBody {
	s.ParentId = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetProjectId(v string) *DescribeFlowCategoryResponseBody {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetRequestId(v string) *DescribeFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetType(v string) *DescribeFlowCategoryResponseBody {
	s.Type = &v
	return s
}

type DescribeFlowCategoryResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryResponse) SetHeaders(v map[string]*string) *DescribeFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowCategoryResponse) SetStatusCode(v int32) *DescribeFlowCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowCategoryResponse) SetBody(v *DescribeFlowCategoryResponseBody) *DescribeFlowCategoryResponse {
	s.Body = v
	return s
}

type DescribeFlowCategoryTreeRequest struct {
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	Keyword    *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	Mode       *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeFlowCategoryTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryTreeRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryTreeRequest) SetCategoryId(v string) *DescribeFlowCategoryTreeRequest {
	s.CategoryId = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetKeyword(v string) *DescribeFlowCategoryTreeRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetMode(v string) *DescribeFlowCategoryTreeRequest {
	s.Mode = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetProjectId(v string) *DescribeFlowCategoryTreeRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetRegionId(v string) *DescribeFlowCategoryTreeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetType(v string) *DescribeFlowCategoryTreeRequest {
	s.Type = &v
	return s
}

type DescribeFlowCategoryTreeResponseBody struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFlowCategoryTreeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryTreeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryTreeResponseBody) SetData(v string) *DescribeFlowCategoryTreeResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeFlowCategoryTreeResponseBody) SetRequestId(v string) *DescribeFlowCategoryTreeResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFlowCategoryTreeResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowCategoryTreeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowCategoryTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryTreeResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryTreeResponse) SetHeaders(v map[string]*string) *DescribeFlowCategoryTreeResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowCategoryTreeResponse) SetStatusCode(v int32) *DescribeFlowCategoryTreeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowCategoryTreeResponse) SetBody(v *DescribeFlowCategoryTreeResponseBody) *DescribeFlowCategoryTreeResponse {
	s.Body = v
	return s
}

type DescribeFlowInstanceRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceRequest) SetId(v string) *DescribeFlowInstanceRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowInstanceRequest) SetProjectId(v string) *DescribeFlowInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowInstanceRequest) SetRegionId(v string) *DescribeFlowInstanceRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowInstanceResponseBody struct {
	ClusterId          *string                                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CronExpression     *string                                             `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	DependencyFlowList *DescribeFlowInstanceResponseBodyDependencyFlowList `json:"DependencyFlowList,omitempty" xml:"DependencyFlowList,omitempty" type:"Struct"`
	Duration           *int64                                              `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime            *int64                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FlowId             *string                                             `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowName           *string                                             `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	GmtCreate          *int64                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified        *int64                                              `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Graph              *string                                             `json:"Graph,omitempty" xml:"Graph,omitempty"`
	HasNodeFailed      *bool                                               `json:"HasNodeFailed,omitempty" xml:"HasNodeFailed,omitempty"`
	Id                 *string                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	Lifecycle          *string                                             `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	LogArchiveLocation *string                                             `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Namespace          *string                                             `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	NodeInstance       *DescribeFlowInstanceResponseBodyNodeInstance       `json:"NodeInstance,omitempty" xml:"NodeInstance,omitempty" type:"Struct"`
	ProjectId          *string                                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RequestId          *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScheduleTime       *int64                                              `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	StartTime          *int64                                              `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status             *string                                             `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeFlowInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBody) SetClusterId(v string) *DescribeFlowInstanceResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetCronExpression(v string) *DescribeFlowInstanceResponseBody {
	s.CronExpression = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetDependencyFlowList(v *DescribeFlowInstanceResponseBodyDependencyFlowList) *DescribeFlowInstanceResponseBody {
	s.DependencyFlowList = v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetDuration(v int64) *DescribeFlowInstanceResponseBody {
	s.Duration = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetEndTime(v int64) *DescribeFlowInstanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetFlowId(v string) *DescribeFlowInstanceResponseBody {
	s.FlowId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetFlowName(v string) *DescribeFlowInstanceResponseBody {
	s.FlowName = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetGmtCreate(v int64) *DescribeFlowInstanceResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetGmtModified(v int64) *DescribeFlowInstanceResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetGraph(v string) *DescribeFlowInstanceResponseBody {
	s.Graph = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetHasNodeFailed(v bool) *DescribeFlowInstanceResponseBody {
	s.HasNodeFailed = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetId(v string) *DescribeFlowInstanceResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetLifecycle(v string) *DescribeFlowInstanceResponseBody {
	s.Lifecycle = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetLogArchiveLocation(v string) *DescribeFlowInstanceResponseBody {
	s.LogArchiveLocation = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetNamespace(v string) *DescribeFlowInstanceResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetNodeInstance(v *DescribeFlowInstanceResponseBodyNodeInstance) *DescribeFlowInstanceResponseBody {
	s.NodeInstance = v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetProjectId(v string) *DescribeFlowInstanceResponseBody {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetRequestId(v string) *DescribeFlowInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetScheduleTime(v int64) *DescribeFlowInstanceResponseBody {
	s.ScheduleTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetStartTime(v int64) *DescribeFlowInstanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetStatus(v string) *DescribeFlowInstanceResponseBody {
	s.Status = &v
	return s
}

type DescribeFlowInstanceResponseBodyDependencyFlowList struct {
	ParentFlow []*DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow `json:"ParentFlow,omitempty" xml:"ParentFlow,omitempty" type:"Repeated"`
}

func (s DescribeFlowInstanceResponseBodyDependencyFlowList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBodyDependencyFlowList) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowList) SetParentFlow(v []*DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) *DescribeFlowInstanceResponseBodyDependencyFlowList {
	s.ParentFlow = v
	return s
}

type DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow struct {
	BizDate              *int64  `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DependencyFlowId     *string `json:"DependencyFlowId,omitempty" xml:"DependencyFlowId,omitempty"`
	DependencyInstanceId *string `json:"DependencyInstanceId,omitempty" xml:"DependencyInstanceId,omitempty"`
	FlowId               *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowInstanceId       *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	Meet                 *bool   `json:"Meet,omitempty" xml:"Meet,omitempty"`
	ProjectId            *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ScheduleKey          *string `json:"ScheduleKey,omitempty" xml:"ScheduleKey,omitempty"`
}

func (s DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetBizDate(v int64) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.BizDate = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetDependencyFlowId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.DependencyFlowId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetDependencyInstanceId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.DependencyInstanceId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetFlowId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.FlowId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetFlowInstanceId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.FlowInstanceId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetMeet(v bool) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.Meet = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetProjectId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetScheduleKey(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.ScheduleKey = &v
	return s
}

type DescribeFlowInstanceResponseBodyNodeInstance struct {
	NodeInstance []*DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance `json:"NodeInstance,omitempty" xml:"NodeInstance,omitempty" type:"Repeated"`
}

func (s DescribeFlowInstanceResponseBodyNodeInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBodyNodeInstance) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBodyNodeInstance) SetNodeInstance(v []*DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) *DescribeFlowInstanceResponseBodyNodeInstance {
	s.NodeInstance = v
	return s
}

type DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Duration       *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime        *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ExternalId     *string `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	ExternalInfo   *string `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty"`
	ExternalStatus *string `json:"ExternalStatus,omitempty" xml:"ExternalStatus,omitempty"`
	FailAct        *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	GmtCreate      *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified    *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	JobId          *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName        *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	JobType        *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	MaxRetry       *string `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	NodeName       *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Pending        *bool   `json:"Pending,omitempty" xml:"Pending,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Retries        *int32  `json:"Retries,omitempty" xml:"Retries,omitempty"`
	RetryInterval  *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetClusterId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetDuration(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Duration = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetEndTime(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetExternalId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ExternalId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetExternalInfo(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ExternalInfo = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetExternalStatus(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ExternalStatus = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetFailAct(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.FailAct = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetGmtCreate(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetGmtModified(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetHostName(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.HostName = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Id = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetJobId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.JobId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetJobName(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.JobName = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetJobType(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.JobType = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetMaxRetry(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.MaxRetry = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetNodeName(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.NodeName = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetPending(v bool) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Pending = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetProjectId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetRetries(v int32) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Retries = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetRetryInterval(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.RetryInterval = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetStartTime(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetStatus(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Status = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetType(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Type = &v
	return s
}

type DescribeFlowInstanceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponse) SetHeaders(v map[string]*string) *DescribeFlowInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowInstanceResponse) SetStatusCode(v int32) *DescribeFlowInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowInstanceResponse) SetBody(v *DescribeFlowInstanceResponseBody) *DescribeFlowInstanceResponse {
	s.Body = v
	return s
}

type DescribeFlowJobRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobRequest) SetId(v string) *DescribeFlowJobRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowJobRequest) SetProjectId(v string) *DescribeFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowJobRequest) SetRegionId(v string) *DescribeFlowJobRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowJobResponseBody struct {
	Adhoc             *string                                  `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	AlertConf         *string                                  `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	CategoryId        *string                                  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	CustomVariables   *string                                  `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	Description       *string                                  `json:"Description,omitempty" xml:"Description,omitempty"`
	EditLockDetail    *string                                  `json:"EditLockDetail,omitempty" xml:"EditLockDetail,omitempty"`
	EnvConf           *string                                  `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	FailAct           *string                                  `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	GmtCreate         *int64                                   `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified       *int64                                   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id                *string                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	LastInstanceId    *string                                  `json:"LastInstanceId,omitempty" xml:"LastInstanceId,omitempty"`
	MaxRetry          *int32                                   `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	MaxRunningTimeSec *int64                                   `json:"MaxRunningTimeSec,omitempty" xml:"MaxRunningTimeSec,omitempty"`
	MonitorConf       *string                                  `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	Name              *string                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	ParamConf         *string                                  `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	Params            *string                                  `json:"Params,omitempty" xml:"Params,omitempty"`
	RequestId         *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourceList      *DescribeFlowJobResponseBodyResourceList `json:"ResourceList,omitempty" xml:"ResourceList,omitempty" type:"Struct"`
	RetryInterval     *int64                                   `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RetryPolicy       *string                                  `json:"RetryPolicy,omitempty" xml:"RetryPolicy,omitempty"`
	RunConf           *string                                  `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	Type              *string                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	Mode              *string                                  `json:"mode,omitempty" xml:"mode,omitempty"`
}

func (s DescribeFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobResponseBody) SetAdhoc(v string) *DescribeFlowJobResponseBody {
	s.Adhoc = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetAlertConf(v string) *DescribeFlowJobResponseBody {
	s.AlertConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetCategoryId(v string) *DescribeFlowJobResponseBody {
	s.CategoryId = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetCustomVariables(v string) *DescribeFlowJobResponseBody {
	s.CustomVariables = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetDescription(v string) *DescribeFlowJobResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetEditLockDetail(v string) *DescribeFlowJobResponseBody {
	s.EditLockDetail = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetEnvConf(v string) *DescribeFlowJobResponseBody {
	s.EnvConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetFailAct(v string) *DescribeFlowJobResponseBody {
	s.FailAct = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetGmtCreate(v int64) *DescribeFlowJobResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetGmtModified(v int64) *DescribeFlowJobResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetId(v string) *DescribeFlowJobResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetLastInstanceId(v string) *DescribeFlowJobResponseBody {
	s.LastInstanceId = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetMaxRetry(v int32) *DescribeFlowJobResponseBody {
	s.MaxRetry = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetMaxRunningTimeSec(v int64) *DescribeFlowJobResponseBody {
	s.MaxRunningTimeSec = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetMonitorConf(v string) *DescribeFlowJobResponseBody {
	s.MonitorConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetName(v string) *DescribeFlowJobResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetParamConf(v string) *DescribeFlowJobResponseBody {
	s.ParamConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetParams(v string) *DescribeFlowJobResponseBody {
	s.Params = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetRequestId(v string) *DescribeFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetResourceList(v *DescribeFlowJobResponseBodyResourceList) *DescribeFlowJobResponseBody {
	s.ResourceList = v
	return s
}

func (s *DescribeFlowJobResponseBody) SetRetryInterval(v int64) *DescribeFlowJobResponseBody {
	s.RetryInterval = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetRetryPolicy(v string) *DescribeFlowJobResponseBody {
	s.RetryPolicy = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetRunConf(v string) *DescribeFlowJobResponseBody {
	s.RunConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetType(v string) *DescribeFlowJobResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetMode(v string) *DescribeFlowJobResponseBody {
	s.Mode = &v
	return s
}

type DescribeFlowJobResponseBodyResourceList struct {
	Resource []*DescribeFlowJobResponseBodyResourceListResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeFlowJobResponseBodyResourceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobResponseBodyResourceList) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobResponseBodyResourceList) SetResource(v []*DescribeFlowJobResponseBodyResourceListResource) *DescribeFlowJobResponseBodyResourceList {
	s.Resource = v
	return s
}

type DescribeFlowJobResponseBodyResourceListResource struct {
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DescribeFlowJobResponseBodyResourceListResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobResponseBodyResourceListResource) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobResponseBodyResourceListResource) SetAlias(v string) *DescribeFlowJobResponseBodyResourceListResource {
	s.Alias = &v
	return s
}

func (s *DescribeFlowJobResponseBodyResourceListResource) SetPath(v string) *DescribeFlowJobResponseBodyResourceListResource {
	s.Path = &v
	return s
}

type DescribeFlowJobResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobResponse) SetHeaders(v map[string]*string) *DescribeFlowJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowJobResponse) SetStatusCode(v int32) *DescribeFlowJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowJobResponse) SetBody(v *DescribeFlowJobResponseBody) *DescribeFlowJobResponse {
	s.Body = v
	return s
}

type DescribeFlowNodeInstanceRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowNodeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceRequest) SetId(v string) *DescribeFlowNodeInstanceRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowNodeInstanceRequest) SetProjectId(v string) *DescribeFlowNodeInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowNodeInstanceRequest) SetRegionId(v string) *DescribeFlowNodeInstanceRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowNodeInstanceResponseBody struct {
	Adhoc            *bool   `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName      *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	Duration         *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime          *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EnvConf          *string `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	ExternalChildIds *string `json:"ExternalChildIds,omitempty" xml:"ExternalChildIds,omitempty"`
	ExternalId       *string `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	ExternalInfo     *string `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty"`
	ExternalStatus   *string `json:"ExternalStatus,omitempty" xml:"ExternalStatus,omitempty"`
	ExternalSubId    *string `json:"ExternalSubId,omitempty" xml:"ExternalSubId,omitempty"`
	FailAct          *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	FlowId           *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowInstanceId   *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	GmtCreate        *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HostName         *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Id               *string `json:"Id,omitempty" xml:"Id,omitempty"`
	JobId            *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName          *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	JobParams        *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	JobType          *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	MaxRetry         *string `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	Mode             *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	MonitorConf      *string `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	NodeName         *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	ParamConf        *string `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	Pending          *bool   `json:"Pending,omitempty" xml:"Pending,omitempty"`
	ProjectId        *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Retries          *int32  `json:"Retries,omitempty" xml:"Retries,omitempty"`
	RetryInterval    *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RetryPolicy      *string `json:"RetryPolicy,omitempty" xml:"RetryPolicy,omitempty"`
	RunConf          *string `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeFlowNodeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceResponseBody) SetAdhoc(v bool) *DescribeFlowNodeInstanceResponseBody {
	s.Adhoc = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetClusterId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetClusterName(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ClusterName = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetDuration(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.Duration = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetEndTime(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetEnvConf(v string) *DescribeFlowNodeInstanceResponseBody {
	s.EnvConf = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalChildIds(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalChildIds = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalInfo(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalInfo = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalStatus(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalStatus = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalSubId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalSubId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetFailAct(v string) *DescribeFlowNodeInstanceResponseBody {
	s.FailAct = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetFlowId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.FlowId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetFlowInstanceId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.FlowInstanceId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetGmtCreate(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetGmtModified(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetHostName(v string) *DescribeFlowNodeInstanceResponseBody {
	s.HostName = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetJobId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.JobId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetJobName(v string) *DescribeFlowNodeInstanceResponseBody {
	s.JobName = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetJobParams(v string) *DescribeFlowNodeInstanceResponseBody {
	s.JobParams = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetJobType(v string) *DescribeFlowNodeInstanceResponseBody {
	s.JobType = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetMaxRetry(v string) *DescribeFlowNodeInstanceResponseBody {
	s.MaxRetry = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetMode(v string) *DescribeFlowNodeInstanceResponseBody {
	s.Mode = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetMonitorConf(v string) *DescribeFlowNodeInstanceResponseBody {
	s.MonitorConf = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetNodeName(v string) *DescribeFlowNodeInstanceResponseBody {
	s.NodeName = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetParamConf(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ParamConf = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetPending(v bool) *DescribeFlowNodeInstanceResponseBody {
	s.Pending = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetProjectId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRequestId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRetries(v int32) *DescribeFlowNodeInstanceResponseBody {
	s.Retries = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRetryInterval(v string) *DescribeFlowNodeInstanceResponseBody {
	s.RetryInterval = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRetryPolicy(v string) *DescribeFlowNodeInstanceResponseBody {
	s.RetryPolicy = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRunConf(v string) *DescribeFlowNodeInstanceResponseBody {
	s.RunConf = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetStartTime(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetStatus(v string) *DescribeFlowNodeInstanceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetType(v string) *DescribeFlowNodeInstanceResponseBody {
	s.Type = &v
	return s
}

type DescribeFlowNodeInstanceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowNodeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowNodeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceResponse) SetHeaders(v map[string]*string) *DescribeFlowNodeInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowNodeInstanceResponse) SetStatusCode(v int32) *DescribeFlowNodeInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponse) SetBody(v *DescribeFlowNodeInstanceResponseBody) *DescribeFlowNodeInstanceResponse {
	s.Body = v
	return s
}

type DescribeFlowNodeInstanceContainerLogRequest struct {
	AppId *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	// Conintainer ID。
	ContainerId    *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	Length         *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	LogName        *string `json:"LogName,omitempty" xml:"LogName,omitempty"`
	NodeInstanceId *string `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	Offset         *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowNodeInstanceContainerLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetAppId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.AppId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetContainerId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.ContainerId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetLength(v int32) *DescribeFlowNodeInstanceContainerLogRequest {
	s.Length = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetLogName(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.LogName = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetNodeInstanceId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetOffset(v int32) *DescribeFlowNodeInstanceContainerLogRequest {
	s.Offset = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetProjectId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetRegionId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowNodeInstanceContainerLogResponseBody struct {
	LogEnd    *bool                                                      `json:"LogEnd,omitempty" xml:"LogEnd,omitempty"`
	LogEntrys *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys `json:"LogEntrys,omitempty" xml:"LogEntrys,omitempty" type:"Struct"`
	RequestId *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFlowNodeInstanceContainerLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBody) SetLogEnd(v bool) *DescribeFlowNodeInstanceContainerLogResponseBody {
	s.LogEnd = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBody) SetLogEntrys(v *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys) *DescribeFlowNodeInstanceContainerLogResponseBody {
	s.LogEntrys = v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBody) SetRequestId(v string) *DescribeFlowNodeInstanceContainerLogResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys struct {
	LogEntry []*DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry `json:"LogEntry,omitempty" xml:"LogEntry,omitempty" type:"Repeated"`
}

func (s DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys) SetLogEntry(v []*DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry) *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys {
	s.LogEntry = v
	return s
}

type DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry) SetContent(v string) *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry {
	s.Content = &v
	return s
}

type DescribeFlowNodeInstanceContainerLogResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowNodeInstanceContainerLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowNodeInstanceContainerLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogResponse) SetHeaders(v map[string]*string) *DescribeFlowNodeInstanceContainerLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogResponse) SetStatusCode(v int32) *DescribeFlowNodeInstanceContainerLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogResponse) SetBody(v *DescribeFlowNodeInstanceContainerLogResponseBody) *DescribeFlowNodeInstanceContainerLogResponse {
	s.Body = v
	return s
}

type DescribeFlowNodeInstanceLauncherLogRequest struct {
	EndTime        *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Length         *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Lines          *int32  `json:"Lines,omitempty" xml:"Lines,omitempty"`
	NodeInstanceId *string `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	Offset         *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Reverse        *bool   `json:"Reverse,omitempty" xml:"Reverse,omitempty"`
	Start          *int32  `json:"Start,omitempty" xml:"Start,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeFlowNodeInstanceLauncherLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetEndTime(v int64) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetLength(v int32) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Length = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetLines(v int32) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Lines = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetNodeInstanceId(v string) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetOffset(v int32) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Offset = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetProjectId(v string) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetRegionId(v string) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetReverse(v bool) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Reverse = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetStart(v int32) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Start = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetStartTime(v int64) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.StartTime = &v
	return s
}

type DescribeFlowNodeInstanceLauncherLogResponseBody struct {
	LogEnd    *bool                                                     `json:"LogEnd,omitempty" xml:"LogEnd,omitempty"`
	LogEntrys *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys `json:"LogEntrys,omitempty" xml:"LogEntrys,omitempty" type:"Struct"`
	RequestId *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBody) SetLogEnd(v bool) *DescribeFlowNodeInstanceLauncherLogResponseBody {
	s.LogEnd = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBody) SetLogEntrys(v *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys) *DescribeFlowNodeInstanceLauncherLogResponseBody {
	s.LogEntrys = v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBody) SetRequestId(v string) *DescribeFlowNodeInstanceLauncherLogResponseBody {
	s.RequestId = &v
	return s
}

type DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys struct {
	LogEntry []*DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry `json:"LogEntry,omitempty" xml:"LogEntry,omitempty" type:"Repeated"`
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys) SetLogEntry(v []*DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry) *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys {
	s.LogEntry = v
	return s
}

type DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry) SetContent(v string) *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry {
	s.Content = &v
	return s
}

type DescribeFlowNodeInstanceLauncherLogResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowNodeInstanceLauncherLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowNodeInstanceLauncherLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogResponse) SetHeaders(v map[string]*string) *DescribeFlowNodeInstanceLauncherLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogResponse) SetStatusCode(v int32) *DescribeFlowNodeInstanceLauncherLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogResponse) SetBody(v *DescribeFlowNodeInstanceLauncherLogResponseBody) *DescribeFlowNodeInstanceLauncherLogResponse {
	s.Body = v
	return s
}

type DescribeFlowProjectRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectRequest) SetProjectId(v string) *DescribeFlowProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowProjectRequest) SetRegionId(v string) *DescribeFlowProjectRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowProjectResponseBody struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DescribeFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectResponseBody) SetDescription(v string) *DescribeFlowProjectResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetGmtCreate(v int64) *DescribeFlowProjectResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetGmtModified(v int64) *DescribeFlowProjectResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetId(v string) *DescribeFlowProjectResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetName(v string) *DescribeFlowProjectResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetRequestId(v string) *DescribeFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetUserId(v string) *DescribeFlowProjectResponseBody {
	s.UserId = &v
	return s
}

type DescribeFlowProjectResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectResponse) SetHeaders(v map[string]*string) *DescribeFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowProjectResponse) SetStatusCode(v int32) *DescribeFlowProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowProjectResponse) SetBody(v *DescribeFlowProjectResponseBody) *DescribeFlowProjectResponse {
	s.Body = v
	return s
}

type DescribeFlowProjectClusterSettingRequest struct {
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingRequest) SetClusterId(v string) *DescribeFlowProjectClusterSettingRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingRequest) SetProjectId(v string) *DescribeFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingRequest) SetRegionId(v string) *DescribeFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowProjectClusterSettingResponseBody struct {
	ClusterId    *string                                                 `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DefaultQueue *string                                                 `json:"DefaultQueue,omitempty" xml:"DefaultQueue,omitempty"`
	DefaultUser  *string                                                 `json:"DefaultUser,omitempty" xml:"DefaultUser,omitempty"`
	GmtCreate    *int64                                                  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *int64                                                  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HostList     *DescribeFlowProjectClusterSettingResponseBodyHostList  `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
	K8sClusterId *string                                                 `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	ProjectId    *string                                                 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	QueueList    *DescribeFlowProjectClusterSettingResponseBodyQueueList `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Struct"`
	RequestId    *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserList     *DescribeFlowProjectClusterSettingResponseBodyUserList  `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Struct"`
}

func (s DescribeFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetClusterId(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetDefaultQueue(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.DefaultQueue = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetDefaultUser(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.DefaultUser = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetGmtCreate(v int64) *DescribeFlowProjectClusterSettingResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetGmtModified(v int64) *DescribeFlowProjectClusterSettingResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetHostList(v *DescribeFlowProjectClusterSettingResponseBodyHostList) *DescribeFlowProjectClusterSettingResponseBody {
	s.HostList = v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetK8sClusterId(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.K8sClusterId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetProjectId(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetQueueList(v *DescribeFlowProjectClusterSettingResponseBodyQueueList) *DescribeFlowProjectClusterSettingResponseBody {
	s.QueueList = v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetRequestId(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetUserList(v *DescribeFlowProjectClusterSettingResponseBodyUserList) *DescribeFlowProjectClusterSettingResponseBody {
	s.UserList = v
	return s
}

type DescribeFlowProjectClusterSettingResponseBodyHostList struct {
	Host []*string `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s DescribeFlowProjectClusterSettingResponseBodyHostList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponseBodyHostList) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponseBodyHostList) SetHost(v []*string) *DescribeFlowProjectClusterSettingResponseBodyHostList {
	s.Host = v
	return s
}

type DescribeFlowProjectClusterSettingResponseBodyQueueList struct {
	Queue []*string `json:"Queue,omitempty" xml:"Queue,omitempty" type:"Repeated"`
}

func (s DescribeFlowProjectClusterSettingResponseBodyQueueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponseBodyQueueList) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponseBodyQueueList) SetQueue(v []*string) *DescribeFlowProjectClusterSettingResponseBodyQueueList {
	s.Queue = v
	return s
}

type DescribeFlowProjectClusterSettingResponseBodyUserList struct {
	User []*string `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s DescribeFlowProjectClusterSettingResponseBodyUserList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponseBodyUserList) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponseBodyUserList) SetUser(v []*string) *DescribeFlowProjectClusterSettingResponseBodyUserList {
	s.User = v
	return s
}

type DescribeFlowProjectClusterSettingResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *DescribeFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponse) SetStatusCode(v int32) *DescribeFlowProjectClusterSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponse) SetBody(v *DescribeFlowProjectClusterSettingResponseBody) *DescribeFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type DescribeScalingConfigItemV2Request struct {
	ConfigItemType      *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId     *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId     *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingConfigItemId *string `json:"ScalingConfigItemId,omitempty" xml:"ScalingConfigItemId,omitempty"`
	ScalingGroupBizId   *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s DescribeScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *DescribeScalingConfigItemV2Request) SetConfigItemType(v string) *DescribeScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetRegionId(v string) *DescribeScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetResourceGroupId(v string) *DescribeScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetResourceOwnerId(v int64) *DescribeScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetScalingConfigItemId(v string) *DescribeScalingConfigItemV2Request {
	s.ScalingConfigItemId = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetScalingGroupBizId(v string) *DescribeScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type DescribeScalingConfigItemV2ResponseBody struct {
	ConfigItemInformation  *string `json:"ConfigItemInformation,omitempty" xml:"ConfigItemInformation,omitempty"`
	ConfigItemType         *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScalingConfigItemBizId *string `json:"ScalingConfigItemBizId,omitempty" xml:"ScalingConfigItemBizId,omitempty"`
	ScalingGroupBizId      *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s DescribeScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetConfigItemInformation(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.ConfigItemInformation = &v
	return s
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetConfigItemType(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.ConfigItemType = &v
	return s
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetRequestId(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetScalingConfigItemBizId(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.ScalingConfigItemBizId = &v
	return s
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetScalingGroupBizId(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.ScalingGroupBizId = &v
	return s
}

type DescribeScalingConfigItemV2Response struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *DescribeScalingConfigItemV2Response) SetHeaders(v map[string]*string) *DescribeScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *DescribeScalingConfigItemV2Response) SetStatusCode(v int32) *DescribeScalingConfigItemV2Response {
	s.StatusCode = &v
	return s
}

func (s *DescribeScalingConfigItemV2Response) SetBody(v *DescribeScalingConfigItemV2ResponseBody) *DescribeScalingConfigItemV2Response {
	s.Body = v
	return s
}

type DescribeScalingGroupInstanceV2Request struct {
	HostGroupBizId    *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s DescribeScalingGroupInstanceV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2Request) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2Request) SetHostGroupBizId(v string) *DescribeScalingGroupInstanceV2Request {
	s.HostGroupBizId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Request) SetRegionId(v string) *DescribeScalingGroupInstanceV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Request) SetResourceGroupId(v string) *DescribeScalingGroupInstanceV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Request) SetResourceOwnerId(v int64) *DescribeScalingGroupInstanceV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Request) SetScalingGroupBizId(v string) *DescribeScalingGroupInstanceV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBody struct {
	ActiveRuleCategory        *string                                                    `json:"ActiveRuleCategory,omitempty" xml:"ActiveRuleCategory,omitempty"`
	DefaultCooldown           *int32                                                     `json:"DefaultCooldown,omitempty" xml:"DefaultCooldown,omitempty"`
	HostGroupId               *string                                                    `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	MaxSize                   *int32                                                     `json:"MaxSize,omitempty" xml:"MaxSize,omitempty"`
	MinSize                   *int32                                                     `json:"MinSize,omitempty" xml:"MinSize,omitempty"`
	MultiAvailablePolicy      *string                                                    `json:"MultiAvailablePolicy,omitempty" xml:"MultiAvailablePolicy,omitempty"`
	MultiAvailablePolicyParam *string                                                    `json:"MultiAvailablePolicyParam,omitempty" xml:"MultiAvailablePolicyParam,omitempty"`
	RequestId                 *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScalingConfig             *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig   `json:"ScalingConfig,omitempty" xml:"ScalingConfig,omitempty" type:"Struct"`
	ScalingGroupId            *string                                                    `json:"ScalingGroupId,omitempty" xml:"ScalingGroupId,omitempty"`
	ScalingRuleList           *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList `json:"ScalingRuleList,omitempty" xml:"ScalingRuleList,omitempty" type:"Struct"`
	TimeoutWithGrace          *int64                                                     `json:"TimeoutWithGrace,omitempty" xml:"TimeoutWithGrace,omitempty"`
	WithGrace                 *bool                                                      `json:"WithGrace,omitempty" xml:"WithGrace,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetActiveRuleCategory(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.ActiveRuleCategory = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetDefaultCooldown(v int32) *DescribeScalingGroupInstanceV2ResponseBody {
	s.DefaultCooldown = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetHostGroupId(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.HostGroupId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetMaxSize(v int32) *DescribeScalingGroupInstanceV2ResponseBody {
	s.MaxSize = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetMinSize(v int32) *DescribeScalingGroupInstanceV2ResponseBody {
	s.MinSize = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetMultiAvailablePolicy(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.MultiAvailablePolicy = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetMultiAvailablePolicyParam(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.MultiAvailablePolicyParam = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetRequestId(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetScalingConfig(v *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) *DescribeScalingGroupInstanceV2ResponseBody {
	s.ScalingConfig = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetScalingGroupId(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.ScalingGroupId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetScalingRuleList(v *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList) *DescribeScalingGroupInstanceV2ResponseBody {
	s.ScalingRuleList = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetTimeoutWithGrace(v int64) *DescribeScalingGroupInstanceV2ResponseBody {
	s.TimeoutWithGrace = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetWithGrace(v bool) *DescribeScalingGroupInstanceV2ResponseBody {
	s.WithGrace = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingConfig struct {
	DataDiskCategory *string                                                                  `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	DataDiskCount    *int32                                                                   `json:"DataDiskCount,omitempty" xml:"DataDiskCount,omitempty"`
	DataDiskSize     *int32                                                                   `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	InstanceTypeList *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList `json:"InstanceTypeList,omitempty" xml:"InstanceTypeList,omitempty" type:"Struct"`
	PayType          *string                                                                  `json:"PayType,omitempty" xml:"PayType,omitempty"`
	SpotPriceLimits  *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits  `json:"SpotPriceLimits,omitempty" xml:"SpotPriceLimits,omitempty" type:"Struct"`
	SpotStrategy     *string                                                                  `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SysDiskCategory  *string                                                                  `json:"SysDiskCategory,omitempty" xml:"SysDiskCategory,omitempty"`
	SysDiskSize      *int32                                                                   `json:"SysDiskSize,omitempty" xml:"SysDiskSize,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetDataDiskCategory(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.DataDiskCategory = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetDataDiskCount(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.DataDiskCount = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetDataDiskSize(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetInstanceTypeList(v *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.InstanceTypeList = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetPayType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.PayType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetSpotPriceLimits(v *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.SpotPriceLimits = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetSpotStrategy(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetSysDiskCategory(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.SysDiskCategory = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetSysDiskSize(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.SysDiskSize = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList struct {
	InstanceType []*string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Repeated"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList) SetInstanceType(v []*string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList {
	s.InstanceType = v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits struct {
	SpotPriceLimit []*DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty" type:"Repeated"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits) SetSpotPriceLimit(v []*DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits {
	s.SpotPriceLimit = v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit struct {
	InstanceType *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	PriceLimit   *float32 `json:"PriceLimit,omitempty" xml:"PriceLimit,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) SetInstanceType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit {
	s.InstanceType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) SetPriceLimit(v float32) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit {
	s.PriceLimit = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList struct {
	ScalingRule []*DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule `json:"ScalingRule,omitempty" xml:"ScalingRule,omitempty" type:"Repeated"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList) SetScalingRule(v []*DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList {
	s.ScalingRule = v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule struct {
	AdjustmentType       *string                                                                                `json:"AdjustmentType,omitempty" xml:"AdjustmentType,omitempty"`
	AdjustmentValue      *int32                                                                                 `json:"AdjustmentValue,omitempty" xml:"AdjustmentValue,omitempty"`
	CloudWatchTrigger    *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger `json:"CloudWatchTrigger,omitempty" xml:"CloudWatchTrigger,omitempty" type:"Struct"`
	Cooldown             *int32                                                                                 `json:"Cooldown,omitempty" xml:"Cooldown,omitempty"`
	EssScalingRuleId     *string                                                                                `json:"EssScalingRuleId,omitempty" xml:"EssScalingRuleId,omitempty"`
	LaunchExpirationTime *int32                                                                                 `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	LaunchTime           *string                                                                                `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
	RecurrenceEndTime    *string                                                                                `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	RecurrenceType       *string                                                                                `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	RecurrenceValue      *string                                                                                `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
	RuleCategory         *string                                                                                `json:"RuleCategory,omitempty" xml:"RuleCategory,omitempty"`
	RuleName             *string                                                                                `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	ScalingGroupId       *int64                                                                                 `json:"ScalingGroupId,omitempty" xml:"ScalingGroupId,omitempty"`
	SchedulerTrigger     *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger  `json:"SchedulerTrigger,omitempty" xml:"SchedulerTrigger,omitempty" type:"Struct"`
	Status               *string                                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	TimeoutWithGrace     *int64                                                                                 `json:"TimeoutWithGrace,omitempty" xml:"TimeoutWithGrace,omitempty"`
	WithGrace            *bool                                                                                  `json:"WithGrace,omitempty" xml:"WithGrace,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetAdjustmentType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.AdjustmentType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetAdjustmentValue(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.AdjustmentValue = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetCloudWatchTrigger(v *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.CloudWatchTrigger = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetCooldown(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.Cooldown = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetEssScalingRuleId(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.EssScalingRuleId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetLaunchExpirationTime(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.LaunchExpirationTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetLaunchTime(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.LaunchTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRecurrenceEndTime(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RecurrenceEndTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRecurrenceType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RecurrenceType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRecurrenceValue(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RecurrenceValue = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRuleCategory(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RuleCategory = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRuleName(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RuleName = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetScalingGroupId(v int64) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.ScalingGroupId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetSchedulerTrigger(v *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.SchedulerTrigger = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetStatus(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.Status = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetTimeoutWithGrace(v int64) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.TimeoutWithGrace = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetWithGrace(v bool) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.WithGrace = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	EvaluationCount    *string `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	MetricDisplayName  *string `json:"MetricDisplayName,omitempty" xml:"MetricDisplayName,omitempty"`
	MetricName         *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Unit               *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetComparisonOperator(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetEvaluationCount(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.EvaluationCount = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetMetricDisplayName(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.MetricDisplayName = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetMetricName(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.MetricName = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetPeriod(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.Period = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetStatistics(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.Statistics = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetThreshold(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.Threshold = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetUnit(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.Unit = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger struct {
	LaunchExpirationTime *int32  `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	LaunchTime           *int64  `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
	RecurrenceEndTime    *int64  `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	RecurrenceType       *string `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	RecurrenceValue      *string `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetLaunchExpirationTime(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.LaunchExpirationTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetLaunchTime(v int64) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.LaunchTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetRecurrenceEndTime(v int64) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.RecurrenceEndTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetRecurrenceType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.RecurrenceType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetRecurrenceValue(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.RecurrenceValue = &v
	return s
}

type DescribeScalingGroupInstanceV2Response struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeScalingGroupInstanceV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeScalingGroupInstanceV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2Response) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2Response) SetHeaders(v map[string]*string) *DescribeScalingGroupInstanceV2Response {
	s.Headers = v
	return s
}

func (s *DescribeScalingGroupInstanceV2Response) SetStatusCode(v int32) *DescribeScalingGroupInstanceV2Response {
	s.StatusCode = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Response) SetBody(v *DescribeScalingGroupInstanceV2ResponseBody) *DescribeScalingGroupInstanceV2Response {
	s.Body = v
	return s
}

type DescribeScalingGroupV2Request struct {
	HostGroupBizId    *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s DescribeScalingGroupV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupV2Request) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupV2Request) SetHostGroupBizId(v string) *DescribeScalingGroupV2Request {
	s.HostGroupBizId = &v
	return s
}

func (s *DescribeScalingGroupV2Request) SetRegionId(v string) *DescribeScalingGroupV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingGroupV2Request) SetResourceGroupId(v string) *DescribeScalingGroupV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeScalingGroupV2Request) SetResourceOwnerId(v int64) *DescribeScalingGroupV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingGroupV2Request) SetScalingGroupBizId(v string) *DescribeScalingGroupV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type DescribeScalingGroupV2ResponseBody struct {
	ActiveStatus   *string `json:"ActiveStatus,omitempty" xml:"ActiveStatus,omitempty"`
	ConfigState    *string `json:"ConfigState,omitempty" xml:"ConfigState,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HostGroupBizId *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScalingGroupId *string `json:"ScalingGroupId,omitempty" xml:"ScalingGroupId,omitempty"`
	ScalingInMode  *string `json:"ScalingInMode,omitempty" xml:"ScalingInMode,omitempty"`
	ScalingMaxSize *int32  `json:"ScalingMaxSize,omitempty" xml:"ScalingMaxSize,omitempty"`
	ScalingMinSize *int32  `json:"ScalingMinSize,omitempty" xml:"ScalingMinSize,omitempty"`
}

func (s DescribeScalingGroupV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupV2ResponseBody) SetActiveStatus(v string) *DescribeScalingGroupV2ResponseBody {
	s.ActiveStatus = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetConfigState(v string) *DescribeScalingGroupV2ResponseBody {
	s.ConfigState = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetDescription(v string) *DescribeScalingGroupV2ResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetHostGroupBizId(v string) *DescribeScalingGroupV2ResponseBody {
	s.HostGroupBizId = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetName(v string) *DescribeScalingGroupV2ResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetRequestId(v string) *DescribeScalingGroupV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetScalingGroupId(v string) *DescribeScalingGroupV2ResponseBody {
	s.ScalingGroupId = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetScalingInMode(v string) *DescribeScalingGroupV2ResponseBody {
	s.ScalingInMode = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetScalingMaxSize(v int32) *DescribeScalingGroupV2ResponseBody {
	s.ScalingMaxSize = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetScalingMinSize(v int32) *DescribeScalingGroupV2ResponseBody {
	s.ScalingMinSize = &v
	return s
}

type DescribeScalingGroupV2Response struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeScalingGroupV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeScalingGroupV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupV2Response) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupV2Response) SetHeaders(v map[string]*string) *DescribeScalingGroupV2Response {
	s.Headers = v
	return s
}

func (s *DescribeScalingGroupV2Response) SetStatusCode(v int32) *DescribeScalingGroupV2Response {
	s.StatusCode = &v
	return s
}

func (s *DescribeScalingGroupV2Response) SetBody(v *DescribeScalingGroupV2ResponseBody) *DescribeScalingGroupV2Response {
	s.Body = v
	return s
}

type JoinResourceGroupRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceId      *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s JoinResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupRequest) SetRegionId(v string) *JoinResourceGroupRequest {
	s.RegionId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceGroupId(v string) *JoinResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceId(v string) *JoinResourceGroupRequest {
	s.ResourceId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceOwnerId(v int64) *JoinResourceGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceType(v string) *JoinResourceGroupRequest {
	s.ResourceType = &v
	return s
}

type JoinResourceGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupResponseBody) SetRequestId(v string) *JoinResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type JoinResourceGroupResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *JoinResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s JoinResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupResponse) SetHeaders(v map[string]*string) *JoinResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinResourceGroupResponse) SetStatusCode(v int32) *JoinResourceGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinResourceGroupResponse) SetBody(v *JoinResourceGroupResponseBody) *JoinResourceGroupResponse {
	s.Body = v
	return s
}

type KillFlowJobRequest struct {
	JobInstanceId *string `json:"JobInstanceId,omitempty" xml:"JobInstanceId,omitempty"`
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s KillFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s KillFlowJobRequest) GoString() string {
	return s.String()
}

func (s *KillFlowJobRequest) SetJobInstanceId(v string) *KillFlowJobRequest {
	s.JobInstanceId = &v
	return s
}

func (s *KillFlowJobRequest) SetProjectId(v string) *KillFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *KillFlowJobRequest) SetRegionId(v string) *KillFlowJobRequest {
	s.RegionId = &v
	return s
}

type KillFlowJobResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s KillFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s KillFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *KillFlowJobResponseBody) SetData(v bool) *KillFlowJobResponseBody {
	s.Data = &v
	return s
}

func (s *KillFlowJobResponseBody) SetRequestId(v string) *KillFlowJobResponseBody {
	s.RequestId = &v
	return s
}

type KillFlowJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *KillFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s KillFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s KillFlowJobResponse) GoString() string {
	return s.String()
}

func (s *KillFlowJobResponse) SetHeaders(v map[string]*string) *KillFlowJobResponse {
	s.Headers = v
	return s
}

func (s *KillFlowJobResponse) SetStatusCode(v int32) *KillFlowJobResponse {
	s.StatusCode = &v
	return s
}

func (s *KillFlowJobResponse) SetBody(v *KillFlowJobResponseBody) *KillFlowJobResponse {
	s.Body = v
	return s
}

type ListClusterHostRequest struct {
	ClusterId       *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ComponentName   *string   `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	GroupType       *string   `json:"GroupType,omitempty" xml:"GroupType,omitempty"`
	HostGroupId     *string   `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostInstanceId  *string   `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostName        *string   `json:"HostName,omitempty" xml:"HostName,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PrivateIp       *string   `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp        *string   `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StatusList      []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListClusterHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostRequest) GoString() string {
	return s.String()
}

func (s *ListClusterHostRequest) SetClusterId(v string) *ListClusterHostRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterHostRequest) SetComponentName(v string) *ListClusterHostRequest {
	s.ComponentName = &v
	return s
}

func (s *ListClusterHostRequest) SetGroupType(v string) *ListClusterHostRequest {
	s.GroupType = &v
	return s
}

func (s *ListClusterHostRequest) SetHostGroupId(v string) *ListClusterHostRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterHostRequest) SetHostInstanceId(v string) *ListClusterHostRequest {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterHostRequest) SetHostName(v string) *ListClusterHostRequest {
	s.HostName = &v
	return s
}

func (s *ListClusterHostRequest) SetPageNumber(v int32) *ListClusterHostRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostRequest) SetPageSize(v int32) *ListClusterHostRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostRequest) SetPrivateIp(v string) *ListClusterHostRequest {
	s.PrivateIp = &v
	return s
}

func (s *ListClusterHostRequest) SetPublicIp(v string) *ListClusterHostRequest {
	s.PublicIp = &v
	return s
}

func (s *ListClusterHostRequest) SetRegionId(v string) *ListClusterHostRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterHostRequest) SetResourceOwnerId(v int64) *ListClusterHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterHostRequest) SetStatusList(v []*string) *ListClusterHostRequest {
	s.StatusList = v
	return s
}

type ListClusterHostResponseBody struct {
	HostList   *ListClusterHostResponseBodyHostList `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                               `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListClusterHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBody) SetHostList(v *ListClusterHostResponseBodyHostList) *ListClusterHostResponseBody {
	s.HostList = v
	return s
}

func (s *ListClusterHostResponseBody) SetPageNumber(v int32) *ListClusterHostResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostResponseBody) SetPageSize(v int32) *ListClusterHostResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostResponseBody) SetRequestId(v string) *ListClusterHostResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterHostResponseBody) SetTotal(v int32) *ListClusterHostResponseBody {
	s.Total = &v
	return s
}

type ListClusterHostResponseBodyHostList struct {
	Host []*ListClusterHostResponseBodyHostListHost `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s ListClusterHostResponseBodyHostList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBodyHostList) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBodyHostList) SetHost(v []*ListClusterHostResponseBodyHostListHost) *ListClusterHostResponseBodyHostList {
	s.Host = v
	return s
}

type ListClusterHostResponseBodyHostListHost struct {
	ChargeType     *string                                          `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Cpu            *int32                                           `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	CreateTime     *string                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DiskList       *ListClusterHostResponseBodyHostListHostDiskList `json:"DiskList,omitempty" xml:"DiskList,omitempty" type:"Struct"`
	EmrExpiredTime *string                                          `json:"EmrExpiredTime,omitempty" xml:"EmrExpiredTime,omitempty"`
	ExpiredTime    *int64                                           `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	HostGroupId    *string                                          `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostInstanceId *string                                          `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostName       *string                                          `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceStatus *string                                          `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	InstanceType   *string                                          `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Memory         *int32                                           `json:"Memory,omitempty" xml:"Memory,omitempty"`
	PrivateIp      *string                                          `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp       *string                                          `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	Role           *string                                          `json:"Role,omitempty" xml:"Role,omitempty"`
	SerialNumber   *string                                          `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Status         *string                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	SupportIpV6    *bool                                            `json:"SupportIpV6,omitempty" xml:"SupportIpV6,omitempty"`
	Type           *string                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	ZoneId         *string                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListClusterHostResponseBodyHostListHost) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBodyHostListHost) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBodyHostListHost) SetChargeType(v string) *ListClusterHostResponseBodyHostListHost {
	s.ChargeType = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetCpu(v int32) *ListClusterHostResponseBodyHostListHost {
	s.Cpu = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetCreateTime(v string) *ListClusterHostResponseBodyHostListHost {
	s.CreateTime = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetDiskList(v *ListClusterHostResponseBodyHostListHostDiskList) *ListClusterHostResponseBodyHostListHost {
	s.DiskList = v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetEmrExpiredTime(v string) *ListClusterHostResponseBodyHostListHost {
	s.EmrExpiredTime = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetExpiredTime(v int64) *ListClusterHostResponseBodyHostListHost {
	s.ExpiredTime = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetHostGroupId(v string) *ListClusterHostResponseBodyHostListHost {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetHostInstanceId(v string) *ListClusterHostResponseBodyHostListHost {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetHostName(v string) *ListClusterHostResponseBodyHostListHost {
	s.HostName = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetInstanceStatus(v string) *ListClusterHostResponseBodyHostListHost {
	s.InstanceStatus = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetInstanceType(v string) *ListClusterHostResponseBodyHostListHost {
	s.InstanceType = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetMemory(v int32) *ListClusterHostResponseBodyHostListHost {
	s.Memory = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetPrivateIp(v string) *ListClusterHostResponseBodyHostListHost {
	s.PrivateIp = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetPublicIp(v string) *ListClusterHostResponseBodyHostListHost {
	s.PublicIp = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetRole(v string) *ListClusterHostResponseBodyHostListHost {
	s.Role = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetSerialNumber(v string) *ListClusterHostResponseBodyHostListHost {
	s.SerialNumber = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetStatus(v string) *ListClusterHostResponseBodyHostListHost {
	s.Status = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetSupportIpV6(v bool) *ListClusterHostResponseBodyHostListHost {
	s.SupportIpV6 = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetType(v string) *ListClusterHostResponseBodyHostListHost {
	s.Type = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetZoneId(v string) *ListClusterHostResponseBodyHostListHost {
	s.ZoneId = &v
	return s
}

type ListClusterHostResponseBodyHostListHostDiskList struct {
	Disk []*ListClusterHostResponseBodyHostListHostDiskListDisk `json:"Disk,omitempty" xml:"Disk,omitempty" type:"Repeated"`
}

func (s ListClusterHostResponseBodyHostListHostDiskList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBodyHostListHostDiskList) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBodyHostListHostDiskList) SetDisk(v []*ListClusterHostResponseBodyHostListHostDiskListDisk) *ListClusterHostResponseBodyHostListHostDiskList {
	s.Disk = v
	return s
}

type ListClusterHostResponseBodyHostListHostDiskListDisk struct {
	BlockMountPoint *string `json:"BlockMountPoint,omitempty" xml:"BlockMountPoint,omitempty"`
	Device          *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskId          *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
	DiskMountPoint  *string `json:"DiskMountPoint,omitempty" xml:"DiskMountPoint,omitempty"`
	DiskSize        *int32  `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	DiskType        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	Event           *string `json:"Event,omitempty" xml:"Event,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListClusterHostResponseBodyHostListHostDiskListDisk) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBodyHostListHostDiskListDisk) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetBlockMountPoint(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.BlockMountPoint = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDevice(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.Device = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDiskId(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.DiskId = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDiskMountPoint(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.DiskMountPoint = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDiskSize(v int32) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.DiskSize = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDiskType(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.DiskType = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetEvent(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.Event = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetType(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.Type = &v
	return s
}

type ListClusterHostResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterHostResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponse) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponse) SetHeaders(v map[string]*string) *ListClusterHostResponse {
	s.Headers = v
	return s
}

func (s *ListClusterHostResponse) SetStatusCode(v int32) *ListClusterHostResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterHostResponse) SetBody(v *ListClusterHostResponseBody) *ListClusterHostResponse {
	s.Body = v
	return s
}

type ListClusterHostComponentRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ComponentName   *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	ComponentStatus *string `json:"ComponentStatus,omitempty" xml:"ComponentStatus,omitempty"`
	HostInstanceId  *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostName        *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	HostRole        *string `json:"HostRole,omitempty" xml:"HostRole,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterHostComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentRequest) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentRequest) SetClusterId(v string) *ListClusterHostComponentRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetComponentName(v string) *ListClusterHostComponentRequest {
	s.ComponentName = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetComponentStatus(v string) *ListClusterHostComponentRequest {
	s.ComponentStatus = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetHostInstanceId(v string) *ListClusterHostComponentRequest {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetHostName(v string) *ListClusterHostComponentRequest {
	s.HostName = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetHostRole(v string) *ListClusterHostComponentRequest {
	s.HostRole = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetPageNumber(v int32) *ListClusterHostComponentRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetPageSize(v int32) *ListClusterHostComponentRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetRegionId(v string) *ListClusterHostComponentRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetResourceOwnerId(v int64) *ListClusterHostComponentRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetServiceName(v string) *ListClusterHostComponentRequest {
	s.ServiceName = &v
	return s
}

type ListClusterHostComponentResponseBody struct {
	ComponentList *ListClusterHostComponentResponseBodyComponentList `json:"ComponentList,omitempty" xml:"ComponentList,omitempty" type:"Struct"`
	PageNumber    *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                             `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListClusterHostComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentResponseBody) SetComponentList(v *ListClusterHostComponentResponseBodyComponentList) *ListClusterHostComponentResponseBody {
	s.ComponentList = v
	return s
}

func (s *ListClusterHostComponentResponseBody) SetPageNumber(v int32) *ListClusterHostComponentResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostComponentResponseBody) SetPageSize(v int32) *ListClusterHostComponentResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostComponentResponseBody) SetRequestId(v string) *ListClusterHostComponentResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterHostComponentResponseBody) SetTotal(v int32) *ListClusterHostComponentResponseBody {
	s.Total = &v
	return s
}

type ListClusterHostComponentResponseBodyComponentList struct {
	Component []*ListClusterHostComponentResponseBodyComponentListComponent `json:"Component,omitempty" xml:"Component,omitempty" type:"Repeated"`
}

func (s ListClusterHostComponentResponseBodyComponentList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentResponseBodyComponentList) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentResponseBodyComponentList) SetComponent(v []*ListClusterHostComponentResponseBodyComponentListComponent) *ListClusterHostComponentResponseBodyComponentList {
	s.Component = v
	return s
}

type ListClusterHostComponentResponseBodyComponentListComponent struct {
	CommissionStatus     *string `json:"CommissionStatus,omitempty" xml:"CommissionStatus,omitempty"`
	ComponentDisplayName *string `json:"ComponentDisplayName,omitempty" xml:"ComponentDisplayName,omitempty"`
	ComponentName        *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	Cpu                  *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	HealthReportTime     *int64  `json:"HealthReportTime,omitempty" xml:"HealthReportTime,omitempty"`
	HealthStatus         *string `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty"`
	HostId               *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	HostInstanceId       *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostName             *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Memory               *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	NeedRestart          *bool   `json:"NeedRestart,omitempty" xml:"NeedRestart,omitempty"`
	PrivateIp            *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp             *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	ServerStatus         *string `json:"ServerStatus,omitempty" xml:"ServerStatus,omitempty"`
	ServiceDisplayName   *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceName          *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListClusterHostComponentResponseBodyComponentListComponent) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentResponseBodyComponentListComponent) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetCommissionStatus(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.CommissionStatus = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetComponentDisplayName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ComponentDisplayName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetComponentName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ComponentName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetCpu(v int32) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.Cpu = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetHealthReportTime(v int64) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.HealthReportTime = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetHealthStatus(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.HealthStatus = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetHostId(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.HostId = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetHostInstanceId(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetHostName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.HostName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetInstanceType(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.InstanceType = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetMemory(v int32) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.Memory = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetNeedRestart(v bool) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.NeedRestart = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetPrivateIp(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.PrivateIp = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetPublicIp(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.PublicIp = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetRole(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.Role = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetSerialNumber(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.SerialNumber = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetServerStatus(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ServerStatus = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetServiceDisplayName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetServiceName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ServiceName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetState(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.State = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetStatus(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.Status = &v
	return s
}

type ListClusterHostComponentResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterHostComponentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterHostComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentResponse) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentResponse) SetHeaders(v map[string]*string) *ListClusterHostComponentResponse {
	s.Headers = v
	return s
}

func (s *ListClusterHostComponentResponse) SetStatusCode(v int32) *ListClusterHostComponentResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterHostComponentResponse) SetBody(v *ListClusterHostComponentResponseBody) *ListClusterHostComponentResponse {
	s.Body = v
	return s
}

type ListClusterHostGroupRequest struct {
	ClusterId       *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId     *string   `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName   *string   `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupType   *string   `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StatusList      []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListClusterHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupRequest) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupRequest) SetClusterId(v string) *ListClusterHostGroupRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetHostGroupId(v string) *ListClusterHostGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetHostGroupName(v string) *ListClusterHostGroupRequest {
	s.HostGroupName = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetHostGroupType(v string) *ListClusterHostGroupRequest {
	s.HostGroupType = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetPageNumber(v int32) *ListClusterHostGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetPageSize(v int32) *ListClusterHostGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetRegionId(v string) *ListClusterHostGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetResourceOwnerId(v int64) *ListClusterHostGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetStatusList(v []*string) *ListClusterHostGroupRequest {
	s.StatusList = v
	return s
}

type ListClusterHostGroupResponseBody struct {
	ClusterId     *string                                        `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupList *ListClusterHostGroupResponseBodyHostGroupList `json:"HostGroupList,omitempty" xml:"HostGroupList,omitempty" type:"Struct"`
	PageNumber    *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                         `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListClusterHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupResponseBody) SetClusterId(v string) *ListClusterHostGroupResponseBody {
	s.ClusterId = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetHostGroupList(v *ListClusterHostGroupResponseBodyHostGroupList) *ListClusterHostGroupResponseBody {
	s.HostGroupList = v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetPageNumber(v int32) *ListClusterHostGroupResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetPageSize(v int32) *ListClusterHostGroupResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetRequestId(v string) *ListClusterHostGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetTotal(v int32) *ListClusterHostGroupResponseBody {
	s.Total = &v
	return s
}

type ListClusterHostGroupResponseBodyHostGroupList struct {
	HostGroup []*ListClusterHostGroupResponseBodyHostGroupListHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
}

func (s ListClusterHostGroupResponseBodyHostGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupResponseBodyHostGroupList) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupResponseBodyHostGroupList) SetHostGroup(v []*ListClusterHostGroupResponseBodyHostGroupListHostGroup) *ListClusterHostGroupResponseBodyHostGroupList {
	s.HostGroup = v
	return s
}

type ListClusterHostGroupResponseBodyHostGroupListHostGroup struct {
	ChargeType               *string  `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Comment                  *string  `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CostSavingPercent        *float32 `json:"CostSavingPercent,omitempty" xml:"CostSavingPercent,omitempty"`
	Cpu                      *int32   `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	DataDiskCount            *int32   `json:"DataDiskCount,omitempty" xml:"DataDiskCount,omitempty"`
	DataDiskSize             *int32   `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	DataDiskType             *string  `json:"DataDiskType,omitempty" xml:"DataDiskType,omitempty"`
	HostGroupChangeStatus    *string  `json:"HostGroupChangeStatus,omitempty" xml:"HostGroupChangeStatus,omitempty"`
	HostGroupChangeType      *string  `json:"HostGroupChangeType,omitempty" xml:"HostGroupChangeType,omitempty"`
	HostGroupId              *string  `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName            *string  `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupSubType         *string  `json:"HostGroupSubType,omitempty" xml:"HostGroupSubType,omitempty"`
	HostGroupType            *string  `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	InstanceType             *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	LockReason               *string  `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	LockType                 *string  `json:"LockType,omitempty" xml:"LockType,omitempty"`
	Memory                   *int32   `json:"Memory,omitempty" xml:"Memory,omitempty"`
	NodeCount                *int32   `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	PayType                  *string  `json:"PayType,omitempty" xml:"PayType,omitempty"`
	ScalingGroupActiveStatus *string  `json:"ScalingGroupActiveStatus,omitempty" xml:"ScalingGroupActiveStatus,omitempty"`
	ScalingGroupBizId        *string  `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ScalingGroupConfigState  *string  `json:"ScalingGroupConfigState,omitempty" xml:"ScalingGroupConfigState,omitempty"`
	ScalingGroupMaxNode      *int32   `json:"ScalingGroupMaxNode,omitempty" xml:"ScalingGroupMaxNode,omitempty"`
	ScalingGroupMinNode      *int32   `json:"ScalingGroupMinNode,omitempty" xml:"ScalingGroupMinNode,omitempty"`
	ScalingInMode            *string  `json:"ScalingInMode,omitempty" xml:"ScalingInMode,omitempty"`
	SecurityGroupId          *string  `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	Status                   *string  `json:"Status,omitempty" xml:"Status,omitempty"`
	SystemDiskCount          *int32   `json:"SystemDiskCount,omitempty" xml:"SystemDiskCount,omitempty"`
	SystemDiskSize           *int32   `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
	SystemDiskType           *string  `json:"SystemDiskType,omitempty" xml:"SystemDiskType,omitempty"`
	VswitchId                *string  `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	GmtCreate                *string  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	GmtModified              *string  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
}

func (s ListClusterHostGroupResponseBodyHostGroupListHostGroup) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupResponseBodyHostGroupListHostGroup) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetChargeType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ChargeType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetComment(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.Comment = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetCostSavingPercent(v float32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.CostSavingPercent = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetCpu(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.Cpu = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetDataDiskCount(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.DataDiskCount = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetDataDiskSize(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.DataDiskSize = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetDataDiskType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.DataDiskType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupChangeStatus(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupChangeStatus = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupChangeType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupChangeType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupId(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupName(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupSubType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupSubType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetInstanceType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.InstanceType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetLockReason(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.LockReason = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetLockType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.LockType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetMemory(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.Memory = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetNodeCount(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.NodeCount = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetPayType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.PayType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupActiveStatus(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupActiveStatus = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupBizId(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupBizId = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupConfigState(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupConfigState = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupMaxNode(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupMaxNode = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupMinNode(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupMinNode = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingInMode(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingInMode = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetSecurityGroupId(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetStatus(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.Status = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetSystemDiskCount(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.SystemDiskCount = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetSystemDiskSize(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.SystemDiskSize = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetSystemDiskType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.SystemDiskType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetVswitchId(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.VswitchId = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetGmtCreate(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.GmtCreate = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetGmtModified(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.GmtModified = &v
	return s
}

type ListClusterHostGroupResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupResponse) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupResponse) SetHeaders(v map[string]*string) *ListClusterHostGroupResponse {
	s.Headers = v
	return s
}

func (s *ListClusterHostGroupResponse) SetStatusCode(v int32) *ListClusterHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterHostGroupResponse) SetBody(v *ListClusterHostGroupResponseBody) *ListClusterHostGroupResponse {
	s.Body = v
	return s
}

type ListClusterInstalledServiceRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListClusterInstalledServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceRequest) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceRequest) SetClusterId(v string) *ListClusterInstalledServiceRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterInstalledServiceRequest) SetPageNumber(v int32) *ListClusterInstalledServiceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterInstalledServiceRequest) SetPageSize(v int32) *ListClusterInstalledServiceRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterInstalledServiceRequest) SetRegionId(v string) *ListClusterInstalledServiceRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterInstalledServiceRequest) SetResourceOwnerId(v int64) *ListClusterInstalledServiceRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListClusterInstalledServiceResponseBody struct {
	ClusterInstalledServiceList *ListClusterInstalledServiceResponseBodyClusterInstalledServiceList `json:"ClusterInstalledServiceList,omitempty" xml:"ClusterInstalledServiceList,omitempty" type:"Struct"`
	RequestId                   *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClusterInstalledServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBody) SetClusterInstalledServiceList(v *ListClusterInstalledServiceResponseBodyClusterInstalledServiceList) *ListClusterInstalledServiceResponseBody {
	s.ClusterInstalledServiceList = v
	return s
}

func (s *ListClusterInstalledServiceResponseBody) SetRequestId(v string) *ListClusterInstalledServiceResponseBody {
	s.RequestId = &v
	return s
}

type ListClusterInstalledServiceResponseBodyClusterInstalledServiceList struct {
	ClusterInstalledService []*ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService `json:"ClusterInstalledService,omitempty" xml:"ClusterInstalledService,omitempty" type:"Repeated"`
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceList) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceList) SetClusterInstalledService(v []*ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceList {
	s.ClusterInstalledService = v
	return s
}

type ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService struct {
	ServiceActionList  *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList `json:"ServiceActionList,omitempty" xml:"ServiceActionList,omitempty" type:"Struct"`
	ServiceDisplayName *string                                                                                                     `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceEcmVersion  *string                                                                                                     `json:"ServiceEcmVersion,omitempty" xml:"ServiceEcmVersion,omitempty"`
	ServiceName        *string                                                                                                     `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceVersion     *string                                                                                                     `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	State              *string                                                                                                     `json:"State,omitempty" xml:"State,omitempty"`
	AbnormalNum        *int32                                                                                                      `json:"abnormalNum,omitempty" xml:"abnormalNum,omitempty"`
	Comment            *string                                                                                                     `json:"comment,omitempty" xml:"comment,omitempty"`
	NeedRestartNum     *int32                                                                                                      `json:"needRestartNum,omitempty" xml:"needRestartNum,omitempty"`
	NotStartedNum      *int32                                                                                                      `json:"notStartedNum,omitempty" xml:"notStartedNum,omitempty"`
	OnlyClient         *bool                                                                                                       `json:"onlyClient,omitempty" xml:"onlyClient,omitempty"`
	ServiceStatus      *string                                                                                                     `json:"serviceStatus,omitempty" xml:"serviceStatus,omitempty"`
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceActionList(v *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceActionList = v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceDisplayName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceEcmVersion(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceEcmVersion = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceVersion(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceVersion = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetState(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.State = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetAbnormalNum(v int32) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.AbnormalNum = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetComment(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.Comment = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetNeedRestartNum(v int32) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.NeedRestartNum = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetNotStartedNum(v int32) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.NotStartedNum = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetOnlyClient(v bool) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.OnlyClient = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceStatus(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceStatus = &v
	return s
}

type ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList struct {
	ServiceAction []*ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction `json:"ServiceAction,omitempty" xml:"ServiceAction,omitempty" type:"Repeated"`
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList) SetServiceAction(v []*ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList {
	s.ServiceAction = v
	return s
}

type ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction struct {
	ActionName    *string `json:"ActionName,omitempty" xml:"ActionName,omitempty"`
	Command       *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ComponentName *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetActionName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.ActionName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetCommand(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.Command = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetComponentName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.ComponentName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetDisplayName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.DisplayName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetServiceName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.ServiceName = &v
	return s
}

type ListClusterInstalledServiceResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterInstalledServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterInstalledServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponse) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponse) SetHeaders(v map[string]*string) *ListClusterInstalledServiceResponse {
	s.Headers = v
	return s
}

func (s *ListClusterInstalledServiceResponse) SetStatusCode(v int32) *ListClusterInstalledServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterInstalledServiceResponse) SetBody(v *ListClusterInstalledServiceResponseBody) *ListClusterInstalledServiceResponse {
	s.Body = v
	return s
}

type ListClusterOperationRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListClusterOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOperationRequest) SetClusterId(v string) *ListClusterOperationRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterOperationRequest) SetOperationId(v string) *ListClusterOperationRequest {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationRequest) SetPageNumber(v int32) *ListClusterOperationRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationRequest) SetPageSize(v int32) *ListClusterOperationRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationRequest) SetRegionId(v string) *ListClusterOperationRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterOperationRequest) SetResourceOwnerId(v int64) *ListClusterOperationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterOperationRequest) SetServiceName(v string) *ListClusterOperationRequest {
	s.ServiceName = &v
	return s
}

func (s *ListClusterOperationRequest) SetStatus(v string) *ListClusterOperationRequest {
	s.Status = &v
	return s
}

type ListClusterOperationResponseBody struct {
	ClusterOperationList *ListClusterOperationResponseBodyClusterOperationList `json:"ClusterOperationList,omitempty" xml:"ClusterOperationList,omitempty" type:"Struct"`
	PageNumber           *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize             *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount           *int32                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClusterOperationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterOperationResponseBody) SetClusterOperationList(v *ListClusterOperationResponseBodyClusterOperationList) *ListClusterOperationResponseBody {
	s.ClusterOperationList = v
	return s
}

func (s *ListClusterOperationResponseBody) SetPageNumber(v int32) *ListClusterOperationResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationResponseBody) SetPageSize(v int32) *ListClusterOperationResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationResponseBody) SetRequestId(v string) *ListClusterOperationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterOperationResponseBody) SetTotalCount(v int32) *ListClusterOperationResponseBody {
	s.TotalCount = &v
	return s
}

type ListClusterOperationResponseBodyClusterOperationList struct {
	ClusterOperation []*ListClusterOperationResponseBodyClusterOperationListClusterOperation `json:"ClusterOperation,omitempty" xml:"ClusterOperation,omitempty" type:"Repeated"`
}

func (s ListClusterOperationResponseBodyClusterOperationList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationResponseBodyClusterOperationList) GoString() string {
	return s.String()
}

func (s *ListClusterOperationResponseBodyClusterOperationList) SetClusterOperation(v []*ListClusterOperationResponseBodyClusterOperationListClusterOperation) *ListClusterOperationResponseBodyClusterOperationList {
	s.ClusterOperation = v
	return s
}

type ListClusterOperationResponseBodyClusterOperationListClusterOperation struct {
	Comment       *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	Duration      *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	OperationId   *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	Percentage    *string `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListClusterOperationResponseBodyClusterOperationListClusterOperation) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationResponseBodyClusterOperationListClusterOperation) GoString() string {
	return s.String()
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetComment(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.Comment = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetDuration(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.Duration = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetOperationId(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetOperationName(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.OperationName = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetPercentage(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.Percentage = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetStartTime(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.StartTime = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetStatus(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.Status = &v
	return s
}

type ListClusterOperationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterOperationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOperationResponse) SetHeaders(v map[string]*string) *ListClusterOperationResponse {
	s.Headers = v
	return s
}

func (s *ListClusterOperationResponse) SetStatusCode(v int32) *ListClusterOperationResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterOperationResponse) SetBody(v *ListClusterOperationResponseBody) *ListClusterOperationResponse {
	s.Body = v
	return s
}

type ListClusterOperationHostRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListClusterOperationHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostRequest) SetClusterId(v string) *ListClusterOperationHostRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetOperationId(v string) *ListClusterOperationHostRequest {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetPageNumber(v int32) *ListClusterOperationHostRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetPageSize(v int32) *ListClusterOperationHostRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetRegionId(v string) *ListClusterOperationHostRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetResourceOwnerId(v int64) *ListClusterOperationHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetStatus(v string) *ListClusterOperationHostRequest {
	s.Status = &v
	return s
}

type ListClusterOperationHostResponseBody struct {
	ClusterOperationHostList *ListClusterOperationHostResponseBodyClusterOperationHostList `json:"ClusterOperationHostList,omitempty" xml:"ClusterOperationHostList,omitempty" type:"Struct"`
	PageNumber               *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                 *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount               *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClusterOperationHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostResponseBody) SetClusterOperationHostList(v *ListClusterOperationHostResponseBodyClusterOperationHostList) *ListClusterOperationHostResponseBody {
	s.ClusterOperationHostList = v
	return s
}

func (s *ListClusterOperationHostResponseBody) SetPageNumber(v int32) *ListClusterOperationHostResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationHostResponseBody) SetPageSize(v int32) *ListClusterOperationHostResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationHostResponseBody) SetRequestId(v string) *ListClusterOperationHostResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterOperationHostResponseBody) SetTotalCount(v int32) *ListClusterOperationHostResponseBody {
	s.TotalCount = &v
	return s
}

type ListClusterOperationHostResponseBodyClusterOperationHostList struct {
	ClusterOperationHost []*ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost `json:"ClusterOperationHost,omitempty" xml:"ClusterOperationHost,omitempty" type:"Repeated"`
}

func (s ListClusterOperationHostResponseBodyClusterOperationHostList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostResponseBodyClusterOperationHostList) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostList) SetClusterOperationHost(v []*ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) *ListClusterOperationHostResponseBodyClusterOperationHostList {
	s.ClusterOperationHost = v
	return s
}

type ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost struct {
	HostId     *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	HostName   *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Percentage *string `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) SetHostId(v string) *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost {
	s.HostId = &v
	return s
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) SetHostName(v string) *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost {
	s.HostName = &v
	return s
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) SetPercentage(v string) *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost {
	s.Percentage = &v
	return s
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) SetStatus(v string) *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost {
	s.Status = &v
	return s
}

type ListClusterOperationHostResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterOperationHostResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterOperationHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostResponse) SetHeaders(v map[string]*string) *ListClusterOperationHostResponse {
	s.Headers = v
	return s
}

func (s *ListClusterOperationHostResponse) SetStatusCode(v int32) *ListClusterOperationHostResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterOperationHostResponse) SetBody(v *ListClusterOperationHostResponseBody) *ListClusterOperationHostResponse {
	s.Body = v
	return s
}

type ListClusterOperationHostTaskRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostId          *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListClusterOperationHostTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskRequest) SetClusterId(v string) *ListClusterOperationHostTaskRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetHostId(v string) *ListClusterOperationHostTaskRequest {
	s.HostId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetOperationId(v string) *ListClusterOperationHostTaskRequest {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetPageNumber(v int32) *ListClusterOperationHostTaskRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetPageSize(v int32) *ListClusterOperationHostTaskRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetRegionId(v string) *ListClusterOperationHostTaskRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetResourceOwnerId(v int64) *ListClusterOperationHostTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetStatus(v string) *ListClusterOperationHostTaskRequest {
	s.Status = &v
	return s
}

type ListClusterOperationHostTaskResponseBody struct {
	ClusterOperationHostTaskList *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList `json:"ClusterOperationHostTaskList,omitempty" xml:"ClusterOperationHostTaskList,omitempty" type:"Struct"`
	PageNumber                   *int32                                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                     *int32                                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                    *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount                   *int32                                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClusterOperationHostTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskResponseBody) SetClusterOperationHostTaskList(v *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList) *ListClusterOperationHostTaskResponseBody {
	s.ClusterOperationHostTaskList = v
	return s
}

func (s *ListClusterOperationHostTaskResponseBody) SetPageNumber(v int32) *ListClusterOperationHostTaskResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBody) SetPageSize(v int32) *ListClusterOperationHostTaskResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBody) SetRequestId(v string) *ListClusterOperationHostTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBody) SetTotalCount(v int32) *ListClusterOperationHostTaskResponseBody {
	s.TotalCount = &v
	return s
}

type ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList struct {
	ClusterOperationHostTask []*ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask `json:"ClusterOperationHostTask,omitempty" xml:"ClusterOperationHostTask,omitempty" type:"Repeated"`
}

func (s ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList) SetClusterOperationHostTask(v []*ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList {
	s.ClusterOperationHostTask = v
	return s
}

type ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask struct {
	Percentage *string `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskName   *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) SetPercentage(v string) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask {
	s.Percentage = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) SetStatus(v string) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask {
	s.Status = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) SetTaskId(v string) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask {
	s.TaskId = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) SetTaskName(v string) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask {
	s.TaskName = &v
	return s
}

type ListClusterOperationHostTaskResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterOperationHostTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterOperationHostTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskResponse) SetHeaders(v map[string]*string) *ListClusterOperationHostTaskResponse {
	s.Headers = v
	return s
}

func (s *ListClusterOperationHostTaskResponse) SetStatusCode(v int32) *ListClusterOperationHostTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterOperationHostTaskResponse) SetBody(v *ListClusterOperationHostTaskResponseBody) *ListClusterOperationHostTaskResponse {
	s.Body = v
	return s
}

type ListClusterOperationTaskRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListClusterOperationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskRequest) SetClusterId(v string) *ListClusterOperationTaskRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetOperationId(v string) *ListClusterOperationTaskRequest {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetPageNumber(v int32) *ListClusterOperationTaskRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetPageSize(v int32) *ListClusterOperationTaskRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetRegionId(v string) *ListClusterOperationTaskRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetResourceOwnerId(v int64) *ListClusterOperationTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetStatus(v string) *ListClusterOperationTaskRequest {
	s.Status = &v
	return s
}

type ListClusterOperationTaskResponseBody struct {
	ClusterOperationTaskList *ListClusterOperationTaskResponseBodyClusterOperationTaskList `json:"ClusterOperationTaskList,omitempty" xml:"ClusterOperationTaskList,omitempty" type:"Struct"`
	PageNumber               *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                 *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount               *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClusterOperationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskResponseBody) SetClusterOperationTaskList(v *ListClusterOperationTaskResponseBodyClusterOperationTaskList) *ListClusterOperationTaskResponseBody {
	s.ClusterOperationTaskList = v
	return s
}

func (s *ListClusterOperationTaskResponseBody) SetPageNumber(v int32) *ListClusterOperationTaskResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationTaskResponseBody) SetPageSize(v int32) *ListClusterOperationTaskResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationTaskResponseBody) SetRequestId(v string) *ListClusterOperationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterOperationTaskResponseBody) SetTotalCount(v int32) *ListClusterOperationTaskResponseBody {
	s.TotalCount = &v
	return s
}

type ListClusterOperationTaskResponseBodyClusterOperationTaskList struct {
	ClusterOperationTask []*ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask `json:"ClusterOperationTask,omitempty" xml:"ClusterOperationTask,omitempty" type:"Repeated"`
}

func (s ListClusterOperationTaskResponseBodyClusterOperationTaskList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskResponseBodyClusterOperationTaskList) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskList) SetClusterOperationTask(v []*ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) *ListClusterOperationTaskResponseBodyClusterOperationTaskList {
	s.ClusterOperationTask = v
	return s
}

type ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask struct {
	Percentage *string `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskName   *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
}

func (s ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) SetPercentage(v string) *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask {
	s.Percentage = &v
	return s
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) SetStatus(v string) *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask {
	s.Status = &v
	return s
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) SetTaskId(v string) *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask {
	s.TaskId = &v
	return s
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) SetTaskName(v string) *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask {
	s.TaskName = &v
	return s
}

type ListClusterOperationTaskResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterOperationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterOperationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskResponse) SetHeaders(v map[string]*string) *ListClusterOperationTaskResponse {
	s.Headers = v
	return s
}

func (s *ListClusterOperationTaskResponse) SetStatusCode(v int32) *ListClusterOperationTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterOperationTaskResponse) SetBody(v *ListClusterOperationTaskResponseBody) *ListClusterOperationTaskResponse {
	s.Body = v
	return s
}

type ListClusterServiceRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListClusterServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceRequest) SetClusterId(v string) *ListClusterServiceRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceRequest) SetPageNumber(v int32) *ListClusterServiceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceRequest) SetPageSize(v int32) *ListClusterServiceRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterServiceRequest) SetRegionId(v string) *ListClusterServiceRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceRequest) SetResourceOwnerId(v int64) *ListClusterServiceRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListClusterServiceResponseBody struct {
	ClusterServiceList *ListClusterServiceResponseBodyClusterServiceList `json:"ClusterServiceList,omitempty" xml:"ClusterServiceList,omitempty" type:"Struct"`
	PageNumber         *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount         *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClusterServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBody) SetClusterServiceList(v *ListClusterServiceResponseBodyClusterServiceList) *ListClusterServiceResponseBody {
	s.ClusterServiceList = v
	return s
}

func (s *ListClusterServiceResponseBody) SetPageNumber(v int32) *ListClusterServiceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceResponseBody) SetPageSize(v int32) *ListClusterServiceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterServiceResponseBody) SetRequestId(v string) *ListClusterServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterServiceResponseBody) SetTotalCount(v int32) *ListClusterServiceResponseBody {
	s.TotalCount = &v
	return s
}

type ListClusterServiceResponseBodyClusterServiceList struct {
	ClusterService []*ListClusterServiceResponseBodyClusterServiceListClusterService `json:"ClusterService,omitempty" xml:"ClusterService,omitempty" type:"Repeated"`
}

func (s ListClusterServiceResponseBodyClusterServiceList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBodyClusterServiceList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBodyClusterServiceList) SetClusterService(v []*ListClusterServiceResponseBodyClusterServiceListClusterService) *ListClusterServiceResponseBodyClusterServiceList {
	s.ClusterService = v
	return s
}

type ListClusterServiceResponseBodyClusterServiceListClusterService struct {
	AbnormalNum        *int32                                                                           `json:"AbnormalNum,omitempty" xml:"AbnormalNum,omitempty"`
	ClientType         *bool                                                                            `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	HealthStatus       *string                                                                          `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty"`
	InstallStatus      *bool                                                                            `json:"InstallStatus,omitempty" xml:"InstallStatus,omitempty"`
	NeedRestartInfo    *string                                                                          `json:"NeedRestartInfo,omitempty" xml:"NeedRestartInfo,omitempty"`
	NeedRestartNum     *int32                                                                           `json:"NeedRestartNum,omitempty" xml:"NeedRestartNum,omitempty"`
	NotStartInfo       *string                                                                          `json:"NotStartInfo,omitempty" xml:"NotStartInfo,omitempty"`
	ServiceActionList  *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList `json:"ServiceActionList,omitempty" xml:"ServiceActionList,omitempty" type:"Struct"`
	ServiceDisplayName *string                                                                          `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceName        *string                                                                          `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceStatus      *string                                                                          `json:"ServiceStatus,omitempty" xml:"ServiceStatus,omitempty"`
	ServiceVersion     *string                                                                          `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	State              *string                                                                          `json:"State,omitempty" xml:"State,omitempty"`
	StoppedNum         *int32                                                                           `json:"StoppedNum,omitempty" xml:"StoppedNum,omitempty"`
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterService) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterService) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetAbnormalNum(v int32) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.AbnormalNum = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetClientType(v bool) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ClientType = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetHealthStatus(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.HealthStatus = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetInstallStatus(v bool) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.InstallStatus = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetNeedRestartInfo(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.NeedRestartInfo = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetNeedRestartNum(v int32) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.NeedRestartNum = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetNotStartInfo(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.NotStartInfo = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceActionList(v *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceActionList = v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceDisplayName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceStatus(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceStatus = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceVersion(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceVersion = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetState(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.State = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetStoppedNum(v int32) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.StoppedNum = &v
	return s
}

type ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList struct {
	ServiceAction []*ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction `json:"ServiceAction,omitempty" xml:"ServiceAction,omitempty" type:"Repeated"`
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList) SetServiceAction(v []*ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList {
	s.ServiceAction = v
	return s
}

type ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction struct {
	ActionName    *string `json:"ActionName,omitempty" xml:"ActionName,omitempty"`
	Command       *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ComponentName *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetActionName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.ActionName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetCommand(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.Command = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetComponentName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.ComponentName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetDisplayName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.DisplayName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetServiceName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.ServiceName = &v
	return s
}

type ListClusterServiceResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterServiceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponse) SetHeaders(v map[string]*string) *ListClusterServiceResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceResponse) SetStatusCode(v int32) *ListClusterServiceResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterServiceResponse) SetBody(v *ListClusterServiceResponseBody) *ListClusterServiceResponse {
	s.Body = v
	return s
}

type ListClusterServiceComponentHealthInfoRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ComponentName   *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetClusterId(v string) *ListClusterServiceComponentHealthInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetComponentName(v string) *ListClusterServiceComponentHealthInfoRequest {
	s.ComponentName = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetRegionId(v string) *ListClusterServiceComponentHealthInfoRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetResourceOwnerId(v int64) *ListClusterServiceComponentHealthInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetServiceName(v string) *ListClusterServiceComponentHealthInfoRequest {
	s.ServiceName = &v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBody struct {
	ClusterId      *string                                                          `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HealthInfoList *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList `json:"HealthInfoList,omitempty" xml:"HealthInfoList,omitempty" type:"Struct"`
	RequestId      *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBody) SetClusterId(v string) *ListClusterServiceComponentHealthInfoResponseBody {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBody) SetHealthInfoList(v *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList) *ListClusterServiceComponentHealthInfoResponseBody {
	s.HealthInfoList = v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBody) SetRequestId(v string) *ListClusterServiceComponentHealthInfoResponseBody {
	s.RequestId = &v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList struct {
	HealthInfo []*ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo `json:"HealthInfo,omitempty" xml:"HealthInfo,omitempty" type:"Repeated"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList) SetHealthInfo(v []*ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList {
	s.HealthInfo = v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo struct {
	AgentHeartBeatLostNum *int32                                                                                     `json:"AgentHeartBeatLostNum,omitempty" xml:"AgentHeartBeatLostNum,omitempty"`
	BadHealthNum          *int32                                                                                     `json:"BadHealthNum,omitempty" xml:"BadHealthNum,omitempty"`
	ComponentName         *string                                                                                    `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	CreatedTime           *int64                                                                                     `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
	DisabledHealthNum     *int32                                                                                     `json:"DisabledHealthNum,omitempty" xml:"DisabledHealthNum,omitempty"`
	GoodHealthNum         *int32                                                                                     `json:"GoodHealthNum,omitempty" xml:"GoodHealthNum,omitempty"`
	HealthDetailList      *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList `json:"HealthDetailList,omitempty" xml:"HealthDetailList,omitempty" type:"Struct"`
	HealthLevel           *string                                                                                    `json:"HealthLevel,omitempty" xml:"HealthLevel,omitempty"`
	HealthStatus          *string                                                                                    `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty"`
	ManualStoppedNum      *int32                                                                                     `json:"ManualStoppedNum,omitempty" xml:"ManualStoppedNum,omitempty"`
	NoneHealthNum         *int32                                                                                     `json:"NoneHealthNum,omitempty" xml:"NoneHealthNum,omitempty"`
	NormalNum             *int32                                                                                     `json:"NormalNum,omitempty" xml:"NormalNum,omitempty"`
	ServiceName           *string                                                                                    `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	StoppedHealthNum      *int32                                                                                     `json:"StoppedHealthNum,omitempty" xml:"StoppedHealthNum,omitempty"`
	StoppedNum            *int32                                                                                     `json:"StoppedNum,omitempty" xml:"StoppedNum,omitempty"`
	TotalNum              *int32                                                                                     `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	UnknownHealthNum      *int32                                                                                     `json:"UnknownHealthNum,omitempty" xml:"UnknownHealthNum,omitempty"`
	WarningHealthNum      *int32                                                                                     `json:"WarningHealthNum,omitempty" xml:"WarningHealthNum,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetAgentHeartBeatLostNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.AgentHeartBeatLostNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetBadHealthNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.BadHealthNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetComponentName(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.ComponentName = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetCreatedTime(v int64) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.CreatedTime = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetDisabledHealthNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.DisabledHealthNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetGoodHealthNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.GoodHealthNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetHealthDetailList(v *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.HealthDetailList = v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetHealthLevel(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.HealthLevel = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetHealthStatus(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.HealthStatus = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetManualStoppedNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.ManualStoppedNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetNoneHealthNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.NoneHealthNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetNormalNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.NormalNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetServiceName(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetStoppedHealthNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.StoppedHealthNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetStoppedNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.StoppedNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetTotalNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.TotalNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetUnknownHealthNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.UnknownHealthNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetWarningHealthNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.WarningHealthNum = &v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList struct {
	HealthDetail []*ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail `json:"HealthDetail,omitempty" xml:"HealthDetail,omitempty" type:"Repeated"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList) SetHealthDetail(v []*ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList {
	s.HealthDetail = v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail struct {
	HealthRuleParam *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam `json:"HealthRuleParam,omitempty" xml:"HealthRuleParam,omitempty" type:"Struct"`
	Code            *string                                                                                                               `json:"code,omitempty" xml:"code,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) SetHealthRuleParam(v *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail {
	s.HealthRuleParam = v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) SetCode(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail {
	s.Code = &v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam struct {
	Component       *string `json:"Component,omitempty" xml:"Component,omitempty"`
	HostNames       *string `json:"HostNames,omitempty" xml:"HostNames,omitempty"`
	Pass            *string `json:"Pass,omitempty" xml:"Pass,omitempty"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty"`
	RuleId          *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	RuleTitle       *string `json:"RuleTitle,omitempty" xml:"RuleTitle,omitempty"`
	Service         *string `json:"Service,omitempty" xml:"Service,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetComponent(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.Component = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetHostNames(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.HostNames = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetPass(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.Pass = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetRuleDescription(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.RuleDescription = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetRuleId(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.RuleId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetRuleTitle(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.RuleTitle = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetService(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.Service = &v
	return s
}

type ListClusterServiceComponentHealthInfoResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterServiceComponentHealthInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponse) SetHeaders(v map[string]*string) *ListClusterServiceComponentHealthInfoResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponse) SetStatusCode(v int32) *ListClusterServiceComponentHealthInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponse) SetBody(v *ListClusterServiceComponentHealthInfoResponseBody) *ListClusterServiceComponentHealthInfoResponse {
	s.Body = v
	return s
}

type ListClusterServiceConfigHistoryRequest struct {
	Author          *string `json:"Author,omitempty" xml:"Author,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	ConfigFileName  *string `json:"ConfigFileName,omitempty" xml:"ConfigFileName,omitempty"`
	ConfigItemKey   *string `json:"ConfigItemKey,omitempty" xml:"ConfigItemKey,omitempty"`
	ConfigVersion   *string `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostInstanceId  *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterServiceConfigHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryRequest) SetAuthor(v string) *ListClusterServiceConfigHistoryRequest {
	s.Author = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetClusterId(v string) *ListClusterServiceConfigHistoryRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetComment(v string) *ListClusterServiceConfigHistoryRequest {
	s.Comment = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetConfigFileName(v string) *ListClusterServiceConfigHistoryRequest {
	s.ConfigFileName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetConfigItemKey(v string) *ListClusterServiceConfigHistoryRequest {
	s.ConfigItemKey = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetConfigVersion(v string) *ListClusterServiceConfigHistoryRequest {
	s.ConfigVersion = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetHostGroupId(v string) *ListClusterServiceConfigHistoryRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetHostInstanceId(v string) *ListClusterServiceConfigHistoryRequest {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetPageNumber(v int32) *ListClusterServiceConfigHistoryRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetPageSize(v int32) *ListClusterServiceConfigHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetRegionId(v string) *ListClusterServiceConfigHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetResourceOwnerId(v int64) *ListClusterServiceConfigHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetServiceName(v string) *ListClusterServiceConfigHistoryRequest {
	s.ServiceName = &v
	return s
}

type ListClusterServiceConfigHistoryResponseBody struct {
	ConfigHistoryList *ListClusterServiceConfigHistoryResponseBodyConfigHistoryList `json:"ConfigHistoryList,omitempty" xml:"ConfigHistoryList,omitempty" type:"Struct"`
	PageNumber        *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount        *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClusterServiceConfigHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetConfigHistoryList(v *ListClusterServiceConfigHistoryResponseBodyConfigHistoryList) *ListClusterServiceConfigHistoryResponseBody {
	s.ConfigHistoryList = v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetPageNumber(v int32) *ListClusterServiceConfigHistoryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetPageSize(v int32) *ListClusterServiceConfigHistoryResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetRequestId(v string) *ListClusterServiceConfigHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetTotalCount(v int32) *ListClusterServiceConfigHistoryResponseBody {
	s.TotalCount = &v
	return s
}

type ListClusterServiceConfigHistoryResponseBodyConfigHistoryList struct {
	ConfigHistory []*ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory `json:"ConfigHistory,omitempty" xml:"ConfigHistory,omitempty" type:"Repeated"`
}

func (s ListClusterServiceConfigHistoryResponseBodyConfigHistoryList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryResponseBodyConfigHistoryList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryList) SetConfigHistory(v []*ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryList {
	s.ConfigHistory = v
	return s
}

type ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory struct {
	Applied        *bool   `json:"Applied,omitempty" xml:"Applied,omitempty"`
	Author         *string `json:"Author,omitempty" xml:"Author,omitempty"`
	Comment        *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	ConfigFileName *string `json:"ConfigFileName,omitempty" xml:"ConfigFileName,omitempty"`
	ConfigItemName *string `json:"ConfigItemName,omitempty" xml:"ConfigItemName,omitempty"`
	ConfigVersion  *string `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	HostGroupId    *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName  *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostInstanceId *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	NewValue       *string `json:"NewValue,omitempty" xml:"NewValue,omitempty"`
	OldValue       *string `json:"OldValue,omitempty" xml:"OldValue,omitempty"`
	ServiceName    *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetApplied(v bool) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.Applied = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetAuthor(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.Author = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetComment(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.Comment = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetConfigFileName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.ConfigFileName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetConfigItemName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.ConfigItemName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetConfigVersion(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.ConfigVersion = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetCreateTime(v int64) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.CreateTime = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetHostGroupId(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetHostGroupName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.HostGroupName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetHostInstanceId(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetHostName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.HostName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetNewValue(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.NewValue = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetOldValue(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.OldValue = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetServiceName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.ServiceName = &v
	return s
}

type ListClusterServiceConfigHistoryResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterServiceConfigHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterServiceConfigHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryResponse) SetHeaders(v map[string]*string) *ListClusterServiceConfigHistoryResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceConfigHistoryResponse) SetStatusCode(v int32) *ListClusterServiceConfigHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponse) SetBody(v *ListClusterServiceConfigHistoryResponseBody) *ListClusterServiceConfigHistoryResponse {
	s.Body = v
	return s
}

type ListClusterServiceQuickLinkRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DirectType      *bool   `json:"DirectType,omitempty" xml:"DirectType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterServiceQuickLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkRequest) SetClusterId(v string) *ListClusterServiceQuickLinkRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceQuickLinkRequest) SetDirectType(v bool) *ListClusterServiceQuickLinkRequest {
	s.DirectType = &v
	return s
}

func (s *ListClusterServiceQuickLinkRequest) SetRegionId(v string) *ListClusterServiceQuickLinkRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceQuickLinkRequest) SetResourceOwnerId(v int64) *ListClusterServiceQuickLinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterServiceQuickLinkRequest) SetServiceName(v string) *ListClusterServiceQuickLinkRequest {
	s.ServiceName = &v
	return s
}

type ListClusterServiceQuickLinkResponseBody struct {
	QuickLinkList *ListClusterServiceQuickLinkResponseBodyQuickLinkList `json:"QuickLinkList,omitempty" xml:"QuickLinkList,omitempty" type:"Struct"`
	RequestId     *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClusterServiceQuickLinkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkResponseBody) SetQuickLinkList(v *ListClusterServiceQuickLinkResponseBodyQuickLinkList) *ListClusterServiceQuickLinkResponseBody {
	s.QuickLinkList = v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBody) SetRequestId(v string) *ListClusterServiceQuickLinkResponseBody {
	s.RequestId = &v
	return s
}

type ListClusterServiceQuickLinkResponseBodyQuickLinkList struct {
	QuickLink []*ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink `json:"QuickLink,omitempty" xml:"QuickLink,omitempty" type:"Repeated"`
}

func (s ListClusterServiceQuickLinkResponseBodyQuickLinkList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkResponseBodyQuickLinkList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkList) SetQuickLink(v []*ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) *ListClusterServiceQuickLinkResponseBodyQuickLinkList {
	s.QuickLink = v
	return s
}

type ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink struct {
	Port               *string `json:"Port,omitempty" xml:"Port,omitempty"`
	Protocol           *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	QuickLinkAddress   *string `json:"QuickLinkAddress,omitempty" xml:"QuickLinkAddress,omitempty"`
	ServiceDisplayName *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceName        *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetPort(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.Port = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetProtocol(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.Protocol = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetQuickLinkAddress(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.QuickLinkAddress = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetServiceDisplayName(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetServiceName(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetType(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.Type = &v
	return s
}

type ListClusterServiceQuickLinkResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterServiceQuickLinkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterServiceQuickLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkResponse) SetHeaders(v map[string]*string) *ListClusterServiceQuickLinkResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceQuickLinkResponse) SetStatusCode(v int32) *ListClusterServiceQuickLinkResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponse) SetBody(v *ListClusterServiceQuickLinkResponseBody) *ListClusterServiceQuickLinkResponse {
	s.Body = v
	return s
}

type ListClusterTemplatesRequest struct {
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductType     *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListClusterTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesRequest) SetBizId(v string) *ListClusterTemplatesRequest {
	s.BizId = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetPageNumber(v int32) *ListClusterTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetPageSize(v int32) *ListClusterTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetProductType(v string) *ListClusterTemplatesRequest {
	s.ProductType = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetRegionId(v string) *ListClusterTemplatesRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetResourceGroupId(v string) *ListClusterTemplatesRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetResourceOwnerId(v int64) *ListClusterTemplatesRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListClusterTemplatesResponseBody struct {
	PageNumber       *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize         *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId        *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateInfoList *ListClusterTemplatesResponseBodyTemplateInfoList `json:"TemplateInfoList,omitempty" xml:"TemplateInfoList,omitempty" type:"Struct"`
	TotalCount       *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClusterTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBody) SetPageNumber(v int32) *ListClusterTemplatesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterTemplatesResponseBody) SetPageSize(v int32) *ListClusterTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterTemplatesResponseBody) SetRequestId(v string) *ListClusterTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterTemplatesResponseBody) SetTemplateInfoList(v *ListClusterTemplatesResponseBodyTemplateInfoList) *ListClusterTemplatesResponseBody {
	s.TemplateInfoList = v
	return s
}

func (s *ListClusterTemplatesResponseBody) SetTotalCount(v int32) *ListClusterTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoList struct {
	TemplateInfo []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo `json:"TemplateInfo,omitempty" xml:"TemplateInfo,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoList) SetTemplateInfo(v []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) *ListClusterTemplatesResponseBodyTemplateInfoList {
	s.TemplateInfo = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo struct {
	AllowNotebook          *bool                                                                            `json:"AllowNotebook,omitempty" xml:"AllowNotebook,omitempty"`
	BootstrapActionList    *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	ClusterType            *string                                                                          `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	ConfigList             *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList          `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Struct"`
	Configurations         *string                                                                          `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	CreateSource           *string                                                                          `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	DepositType            *string                                                                          `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	EasEnable              *bool                                                                            `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	GmtCreate              *int64                                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified            *int64                                                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HighAvailabilityEnable *bool                                                                            `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	HostGroupList          *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList       `json:"HostGroupList,omitempty" xml:"HostGroupList,omitempty" type:"Struct"`
	Id                     *string                                                                          `json:"Id,omitempty" xml:"Id,omitempty"`
	InitCustomHiveMetaDb   *bool                                                                            `json:"InitCustomHiveMetaDb,omitempty" xml:"InitCustomHiveMetaDb,omitempty"`
	InstanceGeneration     *string                                                                          `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	IoOptimized            *bool                                                                            `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	IsOpenPublicIp         *bool                                                                            `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	KeyPairName            *string                                                                          `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	LogEnable              *bool                                                                            `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	LogPath                *string                                                                          `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	MachineType            *string                                                                          `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MasterNodeTotal        *int32                                                                           `json:"MasterNodeTotal,omitempty" xml:"MasterNodeTotal,omitempty"`
	MetaStoreConf          *string                                                                          `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	MetaStoreType          *string                                                                          `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	NetType                *string                                                                          `json:"NetType,omitempty" xml:"NetType,omitempty"`
	SecurityGroupId        *string                                                                          `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName      *string                                                                          `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	SoftwareInfoList       *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList    `json:"SoftwareInfoList,omitempty" xml:"SoftwareInfoList,omitempty" type:"Struct"`
	SshEnable              *bool                                                                            `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	TemplateName           *string                                                                          `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	UseCustomHiveMetaDb    *bool                                                                            `json:"UseCustomHiveMetaDb,omitempty" xml:"UseCustomHiveMetaDb,omitempty"`
	UseLocalMetaDb         *bool                                                                            `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	UserDefinedEmrEcsRole  *string                                                                          `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	UserId                 *string                                                                          `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VSwitchId              *string                                                                          `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// VPC ID。
	VpcId  *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetAllowNotebook(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.AllowNotebook = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetBootstrapActionList(v *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.BootstrapActionList = v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetClusterType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.ClusterType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetConfigList(v *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.ConfigList = v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetConfigurations(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.Configurations = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetCreateSource(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.CreateSource = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetDepositType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.DepositType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetEasEnable(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.EasEnable = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetGmtCreate(v int64) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.GmtCreate = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetGmtModified(v int64) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.GmtModified = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetHighAvailabilityEnable(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetHostGroupList(v *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.HostGroupList = v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.Id = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetInitCustomHiveMetaDb(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.InitCustomHiveMetaDb = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetInstanceGeneration(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetIoOptimized(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.IoOptimized = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetIsOpenPublicIp(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.IsOpenPublicIp = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetKeyPairName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.KeyPairName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetLogEnable(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.LogEnable = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetLogPath(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.LogPath = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetMachineType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.MachineType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetMasterNodeTotal(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.MasterNodeTotal = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetMetaStoreConf(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.MetaStoreConf = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetMetaStoreType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.MetaStoreType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetNetType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.NetType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetSecurityGroupId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetSecurityGroupName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.SecurityGroupName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetSoftwareInfoList(v *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.SoftwareInfoList = v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetSshEnable(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.SshEnable = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetTemplateName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.TemplateName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetUseCustomHiveMetaDb(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.UseCustomHiveMetaDb = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetUseLocalMetaDb(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.UseLocalMetaDb = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetUserDefinedEmrEcsRole(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetUserId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.UserId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetVSwitchId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.VSwitchId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetVpcId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.VpcId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetZoneId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.ZoneId = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList struct {
	BootstrapAction []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList) SetBootstrapAction(v []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) SetArg(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) SetName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) SetPath(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList struct {
	Config []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList) SetConfig(v []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList {
	s.Config = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig struct {
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetConfigKey(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.ConfigKey = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetConfigValue(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.ConfigValue = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetEncrypt(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.Encrypt = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetFileName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.FileName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetReplace(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.Replace = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetServiceName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.ServiceName = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList struct {
	HostGroup []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList) SetHostGroup(v []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList {
	s.HostGroup = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup struct {
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DiskCapacity       *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	DiskCount          *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	DiskType           *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId        *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName      *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupType      *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MultiInstanceTypes *string `json:"MultiInstanceTypes,omitempty" xml:"MultiInstanceTypes,omitempty"`
	NodeCount          *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	Period             *string `json:"Period,omitempty" xml:"Period,omitempty"`
	SysDiskCapacity    *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	SysDiskType        *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetChargeType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.ChargeType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetDiskCapacity(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetDiskCount(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.DiskCount = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetDiskType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.DiskType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetHostGroupId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetHostGroupName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetHostGroupType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetInstanceType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.InstanceType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetMultiInstanceTypes(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.MultiInstanceTypes = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetNodeCount(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.NodeCount = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetPeriod(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.Period = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetSysDiskCapacity(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetSysDiskType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.SysDiskType = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList struct {
	SoftwareInfo []*string `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList) SetSoftwareInfo(v []*string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList {
	s.SoftwareInfo = v
	return s
}

type ListClusterTemplatesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClusterTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClusterTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponse) SetHeaders(v map[string]*string) *ListClusterTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListClusterTemplatesResponse) SetStatusCode(v int32) *ListClusterTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClusterTemplatesResponse) SetBody(v *ListClusterTemplatesResponseBody) *ListClusterTemplatesResponse {
	s.Body = v
	return s
}

type ListClustersRequest struct {
	ClusterTypeList []*string                 `json:"ClusterTypeList,omitempty" xml:"ClusterTypeList,omitempty" type:"Repeated"`
	CreateType      *string                   `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DefaultStatus   *bool                     `json:"DefaultStatus,omitempty" xml:"DefaultStatus,omitempty"`
	DepositType     *string                   `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	ExpiredTagList  []*string                 `json:"ExpiredTagList,omitempty" xml:"ExpiredTagList,omitempty" type:"Repeated"`
	IsDesc          *bool                     `json:"IsDesc,omitempty" xml:"IsDesc,omitempty"`
	MachineType     *string                   `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	Name            *string                   `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber      *int32                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string                   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StatusList      []*string                 `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
	Tag             []*ListClustersRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	VpcId           *string                   `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClustersRequest) GoString() string {
	return s.String()
}

func (s *ListClustersRequest) SetClusterTypeList(v []*string) *ListClustersRequest {
	s.ClusterTypeList = v
	return s
}

func (s *ListClustersRequest) SetCreateType(v string) *ListClustersRequest {
	s.CreateType = &v
	return s
}

func (s *ListClustersRequest) SetDefaultStatus(v bool) *ListClustersRequest {
	s.DefaultStatus = &v
	return s
}

func (s *ListClustersRequest) SetDepositType(v string) *ListClustersRequest {
	s.DepositType = &v
	return s
}

func (s *ListClustersRequest) SetExpiredTagList(v []*string) *ListClustersRequest {
	s.ExpiredTagList = v
	return s
}

func (s *ListClustersRequest) SetIsDesc(v bool) *ListClustersRequest {
	s.IsDesc = &v
	return s
}

func (s *ListClustersRequest) SetMachineType(v string) *ListClustersRequest {
	s.MachineType = &v
	return s
}

func (s *ListClustersRequest) SetName(v string) *ListClustersRequest {
	s.Name = &v
	return s
}

func (s *ListClustersRequest) SetPageNumber(v int32) *ListClustersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClustersRequest) SetPageSize(v int32) *ListClustersRequest {
	s.PageSize = &v
	return s
}

func (s *ListClustersRequest) SetRegionId(v string) *ListClustersRequest {
	s.RegionId = &v
	return s
}

func (s *ListClustersRequest) SetResourceGroupId(v string) *ListClustersRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListClustersRequest) SetResourceOwnerId(v int64) *ListClustersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClustersRequest) SetStatusList(v []*string) *ListClustersRequest {
	s.StatusList = v
	return s
}

func (s *ListClustersRequest) SetTag(v []*ListClustersRequestTag) *ListClustersRequest {
	s.Tag = v
	return s
}

func (s *ListClustersRequest) SetVpcId(v string) *ListClustersRequest {
	s.VpcId = &v
	return s
}

type ListClustersRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListClustersRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListClustersRequestTag) GoString() string {
	return s.String()
}

func (s *ListClustersRequestTag) SetKey(v string) *ListClustersRequestTag {
	s.Key = &v
	return s
}

func (s *ListClustersRequestTag) SetValue(v string) *ListClustersRequestTag {
	s.Value = &v
	return s
}

type ListClustersResponseBody struct {
	Clusters   *ListClustersResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Struct"`
	PageNumber *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListClustersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBody) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBody) SetClusters(v *ListClustersResponseBodyClusters) *ListClustersResponseBody {
	s.Clusters = v
	return s
}

func (s *ListClustersResponseBody) SetPageNumber(v int32) *ListClustersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClustersResponseBody) SetPageSize(v int32) *ListClustersResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClustersResponseBody) SetRequestId(v string) *ListClustersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClustersResponseBody) SetTotalCount(v int32) *ListClustersResponseBody {
	s.TotalCount = &v
	return s
}

type ListClustersResponseBodyClusters struct {
	ClusterInfo []*ListClustersResponseBodyClustersClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Repeated"`
}

func (s ListClustersResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClusters) SetClusterInfo(v []*ListClustersResponseBodyClustersClusterInfo) *ListClustersResponseBodyClusters {
	s.ClusterInfo = v
	return s
}

type ListClustersResponseBodyClustersClusterInfo struct {
	ChargeType          *string                                                   `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CreateResource      *string                                                   `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	CreateTime          *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DepositType         *string                                                   `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	ExpiredTime         *int64                                                    `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	FailReason          *ListClustersResponseBodyClustersClusterInfoFailReason    `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
	HasUncompletedOrder *bool                                                     `json:"HasUncompletedOrder,omitempty" xml:"HasUncompletedOrder,omitempty"`
	Id                  *string                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	K8sClusterId        *string                                                   `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	MachineType         *string                                                   `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MetaStoreType       *string                                                   `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	Name                *string                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	OperationId         *int64                                                    `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	OrderList           *string                                                   `json:"OrderList,omitempty" xml:"OrderList,omitempty"`
	OrderTaskInfo       *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo `json:"OrderTaskInfo,omitempty" xml:"OrderTaskInfo,omitempty" type:"Struct"`
	Period              *int32                                                    `json:"Period,omitempty" xml:"Period,omitempty"`
	RunningTime         *int32                                                    `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	Status              *string                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	Tags                *ListClustersResponseBodyClustersClusterInfoTags          `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Type                *string                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListClustersResponseBodyClustersClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfo) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetChargeType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetCreateResource(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetCreateTime(v int64) *ListClustersResponseBodyClustersClusterInfo {
	s.CreateTime = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetDepositType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.DepositType = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetExpiredTime(v int64) *ListClustersResponseBodyClustersClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetFailReason(v *ListClustersResponseBodyClustersClusterInfoFailReason) *ListClustersResponseBodyClustersClusterInfo {
	s.FailReason = v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetHasUncompletedOrder(v bool) *ListClustersResponseBodyClustersClusterInfo {
	s.HasUncompletedOrder = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetId(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.Id = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetK8sClusterId(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetMachineType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.MachineType = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetMetaStoreType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.MetaStoreType = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetName(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.Name = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetOperationId(v int64) *ListClustersResponseBodyClustersClusterInfo {
	s.OperationId = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetOrderList(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.OrderList = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetOrderTaskInfo(v *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) *ListClustersResponseBodyClustersClusterInfo {
	s.OrderTaskInfo = v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetPeriod(v int32) *ListClustersResponseBodyClustersClusterInfo {
	s.Period = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetRunningTime(v int32) *ListClustersResponseBodyClustersClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetStatus(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.Status = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetTags(v *ListClustersResponseBodyClustersClusterInfoTags) *ListClustersResponseBodyClustersClusterInfo {
	s.Tags = v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.Type = &v
	return s
}

type ListClustersResponseBodyClustersClusterInfoFailReason struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListClustersResponseBodyClustersClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfoFailReason) SetErrorCode(v string) *ListClustersResponseBodyClustersClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoFailReason) SetErrorMsg(v string) *ListClustersResponseBodyClustersClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoFailReason) SetRequestId(v string) *ListClustersResponseBodyClustersClusterInfoFailReason {
	s.RequestId = &v
	return s
}

type ListClustersResponseBodyClustersClusterInfoOrderTaskInfo struct {
	CurrentCount *int32  `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	OrderIdList  *string `json:"OrderIdList,omitempty" xml:"OrderIdList,omitempty"`
	TargetCount  *int32  `json:"TargetCount,omitempty" xml:"TargetCount,omitempty"`
}

func (s ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) SetCurrentCount(v int32) *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo {
	s.CurrentCount = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) SetOrderIdList(v string) *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo {
	s.OrderIdList = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) SetTargetCount(v int32) *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo {
	s.TargetCount = &v
	return s
}

type ListClustersResponseBodyClustersClusterInfoTags struct {
	Tag []*ListClustersResponseBodyClustersClusterInfoTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListClustersResponseBodyClustersClusterInfoTags) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfoTags) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfoTags) SetTag(v []*ListClustersResponseBodyClustersClusterInfoTagsTag) *ListClustersResponseBodyClustersClusterInfoTags {
	s.Tag = v
	return s
}

type ListClustersResponseBodyClustersClusterInfoTagsTag struct {
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListClustersResponseBodyClustersClusterInfoTagsTag) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfoTagsTag) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfoTagsTag) SetTagKey(v string) *ListClustersResponseBodyClustersClusterInfoTagsTag {
	s.TagKey = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoTagsTag) SetTagValue(v string) *ListClustersResponseBodyClustersClusterInfoTagsTag {
	s.TagValue = &v
	return s
}

type ListClustersResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListClustersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponse) GoString() string {
	return s.String()
}

func (s *ListClustersResponse) SetHeaders(v map[string]*string) *ListClustersResponse {
	s.Headers = v
	return s
}

func (s *ListClustersResponse) SetStatusCode(v int32) *ListClustersResponse {
	s.StatusCode = &v
	return s
}

func (s *ListClustersResponse) SetBody(v *ListClustersResponseBody) *ListClustersResponse {
	s.Body = v
	return s
}

type ListEmrAvailableConfigRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListEmrAvailableConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigRequest) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigRequest) SetRegionId(v string) *ListEmrAvailableConfigRequest {
	s.RegionId = &v
	return s
}

func (s *ListEmrAvailableConfigRequest) SetResourceGroupId(v string) *ListEmrAvailableConfigRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListEmrAvailableConfigRequest) SetResourceOwnerId(v int64) *ListEmrAvailableConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListEmrAvailableConfigResponseBody struct {
	EmrMainVersionList *ListEmrAvailableConfigResponseBodyEmrMainVersionList `json:"EmrMainVersionList,omitempty" xml:"EmrMainVersionList,omitempty" type:"Struct"`
	KeyPairNameList    *ListEmrAvailableConfigResponseBodyKeyPairNameList    `json:"KeyPairNameList,omitempty" xml:"KeyPairNameList,omitempty" type:"Struct"`
	RequestId          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SecurityGroupList  *ListEmrAvailableConfigResponseBodySecurityGroupList  `json:"SecurityGroupList,omitempty" xml:"SecurityGroupList,omitempty" type:"Struct"`
	VpcInfoList        *ListEmrAvailableConfigResponseBodyVpcInfoList        `json:"VpcInfoList,omitempty" xml:"VpcInfoList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBody) SetEmrMainVersionList(v *ListEmrAvailableConfigResponseBodyEmrMainVersionList) *ListEmrAvailableConfigResponseBody {
	s.EmrMainVersionList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBody) SetKeyPairNameList(v *ListEmrAvailableConfigResponseBodyKeyPairNameList) *ListEmrAvailableConfigResponseBody {
	s.KeyPairNameList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBody) SetRequestId(v string) *ListEmrAvailableConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBody) SetSecurityGroupList(v *ListEmrAvailableConfigResponseBodySecurityGroupList) *ListEmrAvailableConfigResponseBody {
	s.SecurityGroupList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBody) SetVpcInfoList(v *ListEmrAvailableConfigResponseBodyVpcInfoList) *ListEmrAvailableConfigResponseBody {
	s.VpcInfoList = v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionList struct {
	EmrMainVersion []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion `json:"EmrMainVersion,omitempty" xml:"EmrMainVersion,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionList) SetEmrMainVersion(v []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) *ListEmrAvailableConfigResponseBodyEmrMainVersionList {
	s.EmrMainVersion = v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion struct {
	ClusterTypeInfoList *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList `json:"ClusterTypeInfoList,omitempty" xml:"ClusterTypeInfoList,omitempty" type:"Struct"`
	EcmVersion          *bool                                                                                  `json:"EcmVersion,omitempty" xml:"EcmVersion,omitempty"`
	ExtraInfo           *string                                                                                `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	MainVersionName     *string                                                                                `json:"MainVersionName,omitempty" xml:"MainVersionName,omitempty"`
	OnCloudNative       *bool                                                                                  `json:"OnCloudNative,omitempty" xml:"OnCloudNative,omitempty"`
	PublishType         *string                                                                                `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	RegionId            *string                                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StackName           *string                                                                                `json:"StackName,omitempty" xml:"StackName,omitempty"`
	StackVersion        *string                                                                                `json:"StackVersion,omitempty" xml:"StackVersion,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetClusterTypeInfoList(v *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.ClusterTypeInfoList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetEcmVersion(v bool) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.EcmVersion = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetExtraInfo(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.ExtraInfo = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetMainVersionName(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.MainVersionName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetOnCloudNative(v bool) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.OnCloudNative = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetPublishType(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.PublishType = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetRegionId(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.RegionId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetStackName(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.StackName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetStackVersion(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.StackVersion = &v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList struct {
	ClusterTypeInfo []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo `json:"ClusterTypeInfo,omitempty" xml:"ClusterTypeInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) SetClusterTypeInfo(v []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList {
	s.ClusterTypeInfo = v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo struct {
	ClusterServiceInfoList *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList `json:"ClusterServiceInfoList,omitempty" xml:"ClusterServiceInfoList,omitempty" type:"Struct"`
	ClusterType            *string                                                                                                                     `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) SetClusterServiceInfoList(v *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo {
	s.ClusterServiceInfoList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) SetClusterType(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo {
	s.ClusterType = &v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList struct {
	ClusterServiceInfo []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo `json:"ClusterServiceInfo,omitempty" xml:"ClusterServiceInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList) SetClusterServiceInfo(v []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList {
	s.ClusterServiceInfo = v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo struct {
	Mandatory          *bool   `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	ServiceDisplayName *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceName        *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceVersion     *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) SetMandatory(v bool) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo {
	s.Mandatory = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) SetServiceDisplayName(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) SetServiceName(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo {
	s.ServiceName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) SetServiceVersion(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo {
	s.ServiceVersion = &v
	return s
}

type ListEmrAvailableConfigResponseBodyKeyPairNameList struct {
	KeyPairName []*string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyKeyPairNameList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyKeyPairNameList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyKeyPairNameList) SetKeyPairName(v []*string) *ListEmrAvailableConfigResponseBodyKeyPairNameList {
	s.KeyPairName = v
	return s
}

type ListEmrAvailableConfigResponseBodySecurityGroupList struct {
	SecurityGroup []*ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup `json:"SecurityGroup,omitempty" xml:"SecurityGroup,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodySecurityGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodySecurityGroupList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupList) SetSecurityGroup(v []*ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) *ListEmrAvailableConfigResponseBodySecurityGroupList {
	s.SecurityGroup = v
	return s
}

type ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup struct {
	AvailableInstanceAmount *int32  `json:"AvailableInstanceAmount,omitempty" xml:"AvailableInstanceAmount,omitempty"`
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EcsCount                *int32  `json:"EcsCount,omitempty" xml:"EcsCount,omitempty"`
	SecurityGroupId         *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName       *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	SecurityGroupType       *string `json:"SecurityGroupType,omitempty" xml:"SecurityGroupType,omitempty"`
	// VPC ID。
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetAvailableInstanceAmount(v int32) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.AvailableInstanceAmount = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetCreationTime(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.CreationTime = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetDescription(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.Description = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetEcsCount(v int32) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.EcsCount = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupId(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupName(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupType(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupType = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetVpcId(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.VpcId = &v
	return s
}

type ListEmrAvailableConfigResponseBodyVpcInfoList struct {
	VpcInfo []*ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo `json:"VpcInfo,omitempty" xml:"VpcInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoList) SetVpcInfo(v []*ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) *ListEmrAvailableConfigResponseBodyVpcInfoList {
	s.VpcInfo = v
	return s
}

type ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo struct {
	CidrBlock    *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	VRouterId    *string `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	// VPC ID。
	VpcId           *string                                                              `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName         *string                                                              `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	VswitchInfoList *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList `json:"VswitchInfoList,omitempty" xml:"VswitchInfoList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetCidrBlock(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.CidrBlock = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetCreationTime(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.CreationTime = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetDescription(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.Description = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetVRouterId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.VRouterId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetVpcId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.VpcId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetVpcName(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.VpcName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetVswitchInfoList(v *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.VswitchInfoList = v
	return s
}

type ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList struct {
	VswitchInfo []*ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo `json:"VswitchInfo,omitempty" xml:"VswitchInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList) SetVswitchInfo(v []*ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList {
	s.VswitchInfo = v
	return s
}

type ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo struct {
	AvailableIpAddressCount *int64  `json:"AvailableIpAddressCount,omitempty" xml:"AvailableIpAddressCount,omitempty"`
	CidrBlock               *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// VPC ID。
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VswitchId   *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	VswitchName *string `json:"VswitchName,omitempty" xml:"VswitchName,omitempty"`
	ZoneId      *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetAvailableIpAddressCount(v int64) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.AvailableIpAddressCount = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetCidrBlock(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.CidrBlock = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetCreationTime(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.CreationTime = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetDescription(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.Description = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetVpcId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.VpcId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetVswitchId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.VswitchId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetVswitchName(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.VswitchName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetZoneId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.ZoneId = &v
	return s
}

type ListEmrAvailableConfigResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEmrAvailableConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEmrAvailableConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponse) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponse) SetHeaders(v map[string]*string) *ListEmrAvailableConfigResponse {
	s.Headers = v
	return s
}

func (s *ListEmrAvailableConfigResponse) SetStatusCode(v int32) *ListEmrAvailableConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEmrAvailableConfigResponse) SetBody(v *ListEmrAvailableConfigResponseBody) *ListEmrAvailableConfigResponse {
	s.Body = v
	return s
}

type ListEmrAvailableResourceRequest struct {
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterType         *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	DataDiskType        *string `json:"DataDiskType,omitempty" xml:"DataDiskType,omitempty"`
	DepositType         *string `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	DestinationResource *string `json:"DestinationResource,omitempty" xml:"DestinationResource,omitempty"`
	EmrVersion          *string `json:"EmrVersion,omitempty" xml:"EmrVersion,omitempty"`
	InstanceChargeType  *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	InstanceType        *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NetType             *string `json:"NetType,omitempty" xml:"NetType,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId     *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId     *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SpotStrategy        *string `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SystemDiskType      *string `json:"SystemDiskType,omitempty" xml:"SystemDiskType,omitempty"`
	ZoneId              *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListEmrAvailableResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceRequest) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceRequest) SetClusterId(v string) *ListEmrAvailableResourceRequest {
	s.ClusterId = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetClusterType(v string) *ListEmrAvailableResourceRequest {
	s.ClusterType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetDataDiskType(v string) *ListEmrAvailableResourceRequest {
	s.DataDiskType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetDepositType(v string) *ListEmrAvailableResourceRequest {
	s.DepositType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetDestinationResource(v string) *ListEmrAvailableResourceRequest {
	s.DestinationResource = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetEmrVersion(v string) *ListEmrAvailableResourceRequest {
	s.EmrVersion = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetInstanceChargeType(v string) *ListEmrAvailableResourceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetInstanceType(v string) *ListEmrAvailableResourceRequest {
	s.InstanceType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetNetType(v string) *ListEmrAvailableResourceRequest {
	s.NetType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetRegionId(v string) *ListEmrAvailableResourceRequest {
	s.RegionId = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetResourceGroupId(v string) *ListEmrAvailableResourceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetResourceOwnerId(v int64) *ListEmrAvailableResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetSpotStrategy(v string) *ListEmrAvailableResourceRequest {
	s.SpotStrategy = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetSystemDiskType(v string) *ListEmrAvailableResourceRequest {
	s.SystemDiskType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetZoneId(v string) *ListEmrAvailableResourceRequest {
	s.ZoneId = &v
	return s
}

type ListEmrAvailableResourceResponseBody struct {
	EmrZoneInfoList *ListEmrAvailableResourceResponseBodyEmrZoneInfoList `json:"EmrZoneInfoList,omitempty" xml:"EmrZoneInfoList,omitempty" type:"Struct"`
	RegionId        *string                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RequestId       *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListEmrAvailableResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBody) SetEmrZoneInfoList(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoList) *ListEmrAvailableResourceResponseBody {
	s.EmrZoneInfoList = v
	return s
}

func (s *ListEmrAvailableResourceResponseBody) SetRegionId(v string) *ListEmrAvailableResourceResponseBody {
	s.RegionId = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBody) SetRequestId(v string) *ListEmrAvailableResourceResponseBody {
	s.RequestId = &v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoList struct {
	EmrZoneInfo []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo `json:"EmrZoneInfo,omitempty" xml:"EmrZoneInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoList) SetEmrZoneInfo(v []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) *ListEmrAvailableResourceResponseBodyEmrZoneInfoList {
	s.EmrZoneInfo = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo struct {
	EmrResourceInfoList *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList `json:"EmrResourceInfoList,omitempty" xml:"EmrResourceInfoList,omitempty" type:"Struct"`
	ZoneId              *string                                                                            `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) SetEmrResourceInfoList(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo {
	s.EmrResourceInfoList = v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) SetZoneId(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo {
	s.ZoneId = &v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList struct {
	EmrResourceInfo []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo `json:"EmrResourceInfo,omitempty" xml:"EmrResourceInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList) SetEmrResourceInfo(v []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList {
	s.EmrResourceInfo = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo struct {
	SupportedResourceList *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList `json:"SupportedResourceList,omitempty" xml:"SupportedResourceList,omitempty" type:"Struct"`
	Type                  *string                                                                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) SetSupportedResourceList(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo {
	s.SupportedResourceList = v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) SetType(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo {
	s.Type = &v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList struct {
	SupportedResource []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource `json:"SupportedResource,omitempty" xml:"SupportedResource,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList) SetSupportedResource(v []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList {
	s.SupportedResource = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource struct {
	EmrInstanceType     *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType     `json:"EmrInstanceType,omitempty" xml:"EmrInstanceType,omitempty" type:"Struct"`
	Max                 *int32                                                                                                                                                     `json:"Max,omitempty" xml:"Max,omitempty"`
	Min                 *int32                                                                                                                                                     `json:"Min,omitempty" xml:"Min,omitempty"`
	SupportNodeTypeList *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList `json:"SupportNodeTypeList,omitempty" xml:"SupportNodeTypeList,omitempty" type:"Struct"`
	Unit                *string                                                                                                                                                    `json:"Unit,omitempty" xml:"Unit,omitempty"`
	Value               *string                                                                                                                                                    `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetEmrInstanceType(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.EmrInstanceType = v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetMax(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.Max = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetMin(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.Min = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetSupportNodeTypeList(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.SupportNodeTypeList = v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetUnit(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.Unit = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetValue(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.Value = &v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType struct {
	BaselineCredit       *int32  `json:"BaselineCredit,omitempty" xml:"BaselineCredit,omitempty"`
	CpuCoreCount         *int32  `json:"CpuCoreCount,omitempty" xml:"CpuCoreCount,omitempty"`
	EniQuantity          *int32  `json:"EniQuantity,omitempty" xml:"EniQuantity,omitempty"`
	GPUAmount            *int32  `json:"GPUAmount,omitempty" xml:"GPUAmount,omitempty"`
	GPUSpec              *string `json:"GPUSpec,omitempty" xml:"GPUSpec,omitempty"`
	InitialCredit        *int32  `json:"InitialCredit,omitempty" xml:"InitialCredit,omitempty"`
	InstanceBandwidthRx  *int32  `json:"InstanceBandwidthRx,omitempty" xml:"InstanceBandwidthRx,omitempty"`
	InstanceBandwidthTx  *int32  `json:"InstanceBandwidthTx,omitempty" xml:"InstanceBandwidthTx,omitempty"`
	InstancePpsRx        *int64  `json:"InstancePpsRx,omitempty" xml:"InstancePpsRx,omitempty"`
	InstancePpsTx        *int64  `json:"InstancePpsTx,omitempty" xml:"InstancePpsTx,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	InstanceTypeFamily   *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	LocalStorageAmount   *int32  `json:"LocalStorageAmount,omitempty" xml:"LocalStorageAmount,omitempty"`
	LocalStorageCapacity *int64  `json:"LocalStorageCapacity,omitempty" xml:"LocalStorageCapacity,omitempty"`
	LocalStorageCategory *string `json:"LocalStorageCategory,omitempty" xml:"LocalStorageCategory,omitempty"`
	MemorySize           *int32  `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetBaselineCredit(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.BaselineCredit = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetCpuCoreCount(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.CpuCoreCount = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetEniQuantity(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.EniQuantity = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetGPUAmount(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.GPUAmount = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetGPUSpec(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.GPUSpec = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInitialCredit(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InitialCredit = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstanceBandwidthRx(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstanceBandwidthRx = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstanceBandwidthTx(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstanceBandwidthTx = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstancePpsRx(v int64) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstancePpsRx = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstancePpsTx(v int64) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstancePpsTx = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstanceType(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstanceType = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstanceTypeFamily(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstanceTypeFamily = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetLocalStorageAmount(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.LocalStorageAmount = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetLocalStorageCapacity(v int64) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.LocalStorageCapacity = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetLocalStorageCategory(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.LocalStorageCategory = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetMemorySize(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.MemorySize = &v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList struct {
	SupportNodeType []*string `json:"SupportNodeType,omitempty" xml:"SupportNodeType,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList) SetSupportNodeType(v []*string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList {
	s.SupportNodeType = v
	return s
}

type ListEmrAvailableResourceResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEmrAvailableResourceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEmrAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponse) SetHeaders(v map[string]*string) *ListEmrAvailableResourceResponse {
	s.Headers = v
	return s
}

func (s *ListEmrAvailableResourceResponse) SetStatusCode(v int32) *ListEmrAvailableResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEmrAvailableResourceResponse) SetBody(v *ListEmrAvailableResourceResponseBody) *ListEmrAvailableResourceResponse {
	s.Body = v
	return s
}

type ListEmrMainVersionRequest struct {
	EmrVersion      *string `json:"EmrVersion,omitempty" xml:"EmrVersion,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StackName       *string `json:"StackName,omitempty" xml:"StackName,omitempty"`
	StackVersion    *string `json:"StackVersion,omitempty" xml:"StackVersion,omitempty"`
}

func (s ListEmrMainVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionRequest) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionRequest) SetEmrVersion(v string) *ListEmrMainVersionRequest {
	s.EmrVersion = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetPageNumber(v int32) *ListEmrMainVersionRequest {
	s.PageNumber = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetPageSize(v int32) *ListEmrMainVersionRequest {
	s.PageSize = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetRegionId(v string) *ListEmrMainVersionRequest {
	s.RegionId = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetResourceOwnerId(v int64) *ListEmrMainVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetStackName(v string) *ListEmrMainVersionRequest {
	s.StackName = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetStackVersion(v string) *ListEmrMainVersionRequest {
	s.StackVersion = &v
	return s
}

type ListEmrMainVersionResponseBody struct {
	EmrMainVersionList *ListEmrMainVersionResponseBodyEmrMainVersionList `json:"EmrMainVersionList,omitempty" xml:"EmrMainVersionList,omitempty" type:"Struct"`
	PageNumber         *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize           *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount         *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListEmrMainVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBody) SetEmrMainVersionList(v *ListEmrMainVersionResponseBodyEmrMainVersionList) *ListEmrMainVersionResponseBody {
	s.EmrMainVersionList = v
	return s
}

func (s *ListEmrMainVersionResponseBody) SetPageNumber(v int32) *ListEmrMainVersionResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListEmrMainVersionResponseBody) SetPageSize(v int32) *ListEmrMainVersionResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListEmrMainVersionResponseBody) SetRequestId(v string) *ListEmrMainVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEmrMainVersionResponseBody) SetTotalCount(v int32) *ListEmrMainVersionResponseBody {
	s.TotalCount = &v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionList struct {
	EmrMainVersion []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion `json:"EmrMainVersion,omitempty" xml:"EmrMainVersion,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionList) SetEmrMainVersion(v []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) *ListEmrMainVersionResponseBodyEmrMainVersionList {
	s.EmrMainVersion = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion struct {
	ClusterTypeInfoList      *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList      `json:"ClusterTypeInfoList,omitempty" xml:"ClusterTypeInfoList,omitempty" type:"Struct"`
	ClusterTypeWhiteUserList *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList `json:"ClusterTypeWhiteUserList,omitempty" xml:"ClusterTypeWhiteUserList,omitempty" type:"Struct"`
	Display                  *bool                                                                                   `json:"Display,omitempty" xml:"Display,omitempty"`
	EcmVersion               *bool                                                                                   `json:"EcmVersion,omitempty" xml:"EcmVersion,omitempty"`
	EmrVersion               *string                                                                                 `json:"EmrVersion,omitempty" xml:"EmrVersion,omitempty"`
	ImageId                  *string                                                                                 `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	PublishType              *string                                                                                 `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	RegionId                 *string                                                                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StackName                *string                                                                                 `json:"StackName,omitempty" xml:"StackName,omitempty"`
	StackVersion             *string                                                                                 `json:"StackVersion,omitempty" xml:"StackVersion,omitempty"`
	WhiteUserList            *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList            `json:"WhiteUserList,omitempty" xml:"WhiteUserList,omitempty" type:"Struct"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetClusterTypeInfoList(v *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.ClusterTypeInfoList = v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetClusterTypeWhiteUserList(v *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.ClusterTypeWhiteUserList = v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetDisplay(v bool) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.Display = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetEcmVersion(v bool) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.EcmVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetEmrVersion(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.EmrVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetImageId(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.ImageId = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetPublishType(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.PublishType = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetRegionId(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.RegionId = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetStackName(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.StackName = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetStackVersion(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.StackVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetWhiteUserList(v *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.WhiteUserList = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList struct {
	ClusterTypeInfo []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo `json:"ClusterTypeInfo,omitempty" xml:"ClusterTypeInfo,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) SetClusterTypeInfo(v []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList {
	s.ClusterTypeInfo = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo struct {
	ClusterType     *string                                                                                                          `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	ServiceInfoList *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList `json:"ServiceInfoList,omitempty" xml:"ServiceInfoList,omitempty" type:"Struct"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) SetClusterType(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo {
	s.ClusterType = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) SetServiceInfoList(v *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo {
	s.ServiceInfoList = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList struct {
	ServiceInfo []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList) SetServiceInfo(v []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList {
	s.ServiceInfo = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo struct {
	Display               *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	Mandatory             *bool   `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	ServiceDisplayName    *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceDisplayVersion *string `json:"ServiceDisplayVersion,omitempty" xml:"ServiceDisplayVersion,omitempty"`
	ServiceName           *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceVersion        *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetDisplay(v bool) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.Display = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetMandatory(v bool) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.Mandatory = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetServiceDisplayName(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetServiceDisplayVersion(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.ServiceDisplayVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetServiceName(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.ServiceName = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetServiceVersion(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.ServiceVersion = &v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList struct {
	ClusterTypeWhiteUser []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser `json:"ClusterTypeWhiteUser,omitempty" xml:"ClusterTypeWhiteUser,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList) SetClusterTypeWhiteUser(v []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList {
	s.ClusterTypeWhiteUser = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser struct {
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) SetClusterType(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser {
	s.ClusterType = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) SetUserId(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser {
	s.UserId = &v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList struct {
	WhiteUser []*string `json:"WhiteUser,omitempty" xml:"WhiteUser,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList) SetWhiteUser(v []*string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList {
	s.WhiteUser = v
	return s
}

type ListEmrMainVersionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListEmrMainVersionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListEmrMainVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponse) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponse) SetHeaders(v map[string]*string) *ListEmrMainVersionResponse {
	s.Headers = v
	return s
}

func (s *ListEmrMainVersionResponse) SetStatusCode(v int32) *ListEmrMainVersionResponse {
	s.StatusCode = &v
	return s
}

func (s *ListEmrMainVersionResponse) SetBody(v *ListEmrMainVersionResponseBody) *ListEmrMainVersionResponse {
	s.Body = v
	return s
}

type ListFlowRequest struct {
	ClusterId  *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Id         *string `json:"Id,omitempty" xml:"Id,omitempty"`
	JobId      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Periodic   *bool   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowRequest) GoString() string {
	return s.String()
}

func (s *ListFlowRequest) SetClusterId(v string) *ListFlowRequest {
	s.ClusterId = &v
	return s
}

func (s *ListFlowRequest) SetId(v string) *ListFlowRequest {
	s.Id = &v
	return s
}

func (s *ListFlowRequest) SetJobId(v string) *ListFlowRequest {
	s.JobId = &v
	return s
}

func (s *ListFlowRequest) SetName(v string) *ListFlowRequest {
	s.Name = &v
	return s
}

func (s *ListFlowRequest) SetPageNumber(v int32) *ListFlowRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowRequest) SetPageSize(v int32) *ListFlowRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowRequest) SetPeriodic(v bool) *ListFlowRequest {
	s.Periodic = &v
	return s
}

func (s *ListFlowRequest) SetProjectId(v string) *ListFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowRequest) SetRegionId(v string) *ListFlowRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowRequest) SetStatus(v string) *ListFlowRequest {
	s.Status = &v
	return s
}

type ListFlowResponseBody struct {
	Flow       *ListFlowResponseBodyFlow `json:"Flow,omitempty" xml:"Flow,omitempty" type:"Struct"`
	PageNumber *int32                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowResponseBody) SetFlow(v *ListFlowResponseBodyFlow) *ListFlowResponseBody {
	s.Flow = v
	return s
}

func (s *ListFlowResponseBody) SetPageNumber(v int32) *ListFlowResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowResponseBody) SetPageSize(v int32) *ListFlowResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowResponseBody) SetRequestId(v string) *ListFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowResponseBody) SetTotal(v int32) *ListFlowResponseBody {
	s.Total = &v
	return s
}

type ListFlowResponseBodyFlow struct {
	Flow []*ListFlowResponseBodyFlowFlow `json:"Flow,omitempty" xml:"Flow,omitempty" type:"Repeated"`
}

func (s ListFlowResponseBodyFlow) String() string {
	return tea.Prettify(s)
}

func (s ListFlowResponseBodyFlow) GoString() string {
	return s.String()
}

func (s *ListFlowResponseBodyFlow) SetFlow(v []*ListFlowResponseBodyFlowFlow) *ListFlowResponseBodyFlow {
	s.Flow = v
	return s
}

type ListFlowResponseBodyFlowFlow struct {
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	CategoryId              *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	GmtCreate               *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified             *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Graph                   *string `json:"Graph,omitempty" xml:"Graph,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Id                      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Periodic                *bool   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFlowResponseBodyFlowFlow) String() string {
	return tea.Prettify(s)
}

func (s ListFlowResponseBodyFlowFlow) GoString() string {
	return s.String()
}

func (s *ListFlowResponseBodyFlowFlow) SetAlertConf(v string) *ListFlowResponseBodyFlowFlow {
	s.AlertConf = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetAlertDingDingGroupBizId(v string) *ListFlowResponseBodyFlowFlow {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetAlertUserGroupBizId(v string) *ListFlowResponseBodyFlowFlow {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetCategoryId(v string) *ListFlowResponseBodyFlowFlow {
	s.CategoryId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetClusterId(v string) *ListFlowResponseBodyFlowFlow {
	s.ClusterId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetCreateCluster(v bool) *ListFlowResponseBodyFlowFlow {
	s.CreateCluster = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetCronExpr(v string) *ListFlowResponseBodyFlowFlow {
	s.CronExpr = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetDescription(v string) *ListFlowResponseBodyFlowFlow {
	s.Description = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetEndSchedule(v int64) *ListFlowResponseBodyFlowFlow {
	s.EndSchedule = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetGmtCreate(v int64) *ListFlowResponseBodyFlowFlow {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetGmtModified(v int64) *ListFlowResponseBodyFlowFlow {
	s.GmtModified = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetGraph(v string) *ListFlowResponseBodyFlowFlow {
	s.Graph = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetHostName(v string) *ListFlowResponseBodyFlowFlow {
	s.HostName = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetId(v string) *ListFlowResponseBodyFlowFlow {
	s.Id = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetName(v string) *ListFlowResponseBodyFlowFlow {
	s.Name = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetPeriodic(v bool) *ListFlowResponseBodyFlowFlow {
	s.Periodic = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetProjectId(v string) *ListFlowResponseBodyFlowFlow {
	s.ProjectId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetStartSchedule(v int64) *ListFlowResponseBodyFlowFlow {
	s.StartSchedule = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetStatus(v string) *ListFlowResponseBodyFlowFlow {
	s.Status = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetType(v string) *ListFlowResponseBodyFlowFlow {
	s.Type = &v
	return s
}

type ListFlowResponse struct {
	Headers    map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowResponse) GoString() string {
	return s.String()
}

func (s *ListFlowResponse) SetHeaders(v map[string]*string) *ListFlowResponse {
	s.Headers = v
	return s
}

func (s *ListFlowResponse) SetStatusCode(v int32) *ListFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowResponse) SetBody(v *ListFlowResponseBody) *ListFlowResponse {
	s.Body = v
	return s
}

type ListFlowCategoryRequest struct {
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ParentId   *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Root       *bool   `json:"Root,omitempty" xml:"Root,omitempty"`
}

func (s ListFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryRequest) SetPageNumber(v int32) *ListFlowCategoryRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowCategoryRequest) SetPageSize(v int32) *ListFlowCategoryRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowCategoryRequest) SetParentId(v string) *ListFlowCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *ListFlowCategoryRequest) SetProjectId(v string) *ListFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowCategoryRequest) SetRegionId(v string) *ListFlowCategoryRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowCategoryRequest) SetRoot(v bool) *ListFlowCategoryRequest {
	s.Root = &v
	return s
}

type ListFlowCategoryResponseBody struct {
	Categories *ListFlowCategoryResponseBodyCategories `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Struct"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryResponseBody) SetCategories(v *ListFlowCategoryResponseBodyCategories) *ListFlowCategoryResponseBody {
	s.Categories = v
	return s
}

func (s *ListFlowCategoryResponseBody) SetPageNumber(v int32) *ListFlowCategoryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowCategoryResponseBody) SetPageSize(v int32) *ListFlowCategoryResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowCategoryResponseBody) SetRequestId(v string) *ListFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowCategoryResponseBody) SetTotal(v int32) *ListFlowCategoryResponseBody {
	s.Total = &v
	return s
}

type ListFlowCategoryResponseBodyCategories struct {
	Category []*ListFlowCategoryResponseBodyCategoriesCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s ListFlowCategoryResponseBodyCategories) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryResponseBodyCategories) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryResponseBodyCategories) SetCategory(v []*ListFlowCategoryResponseBodyCategoriesCategory) *ListFlowCategoryResponseBodyCategories {
	s.Category = v
	return s
}

type ListFlowCategoryResponseBodyCategoriesCategory struct {
	CategoryType *string `json:"CategoryType,omitempty" xml:"CategoryType,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ObjectId     *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	ObjectType   *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	ParentId     *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId    *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFlowCategoryResponseBodyCategoriesCategory) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryResponseBodyCategoriesCategory) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetCategoryType(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.CategoryType = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetGmtCreate(v int64) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetGmtModified(v int64) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.GmtModified = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetId(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.Id = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetName(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.Name = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetObjectId(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.ObjectId = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetObjectType(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.ObjectType = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetParentId(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.ParentId = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetProjectId(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.ProjectId = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetType(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.Type = &v
	return s
}

type ListFlowCategoryResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryResponse) SetHeaders(v map[string]*string) *ListFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *ListFlowCategoryResponse) SetStatusCode(v int32) *ListFlowCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowCategoryResponse) SetBody(v *ListFlowCategoryResponseBody) *ListFlowCategoryResponse {
	s.Body = v
	return s
}

type ListFlowClusterRequest struct {
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterRequest) GoString() string {
	return s.String()
}

func (s *ListFlowClusterRequest) SetPageNumber(v int32) *ListFlowClusterRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowClusterRequest) SetPageSize(v int32) *ListFlowClusterRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowClusterRequest) SetProjectId(v string) *ListFlowClusterRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowClusterRequest) SetRegionId(v string) *ListFlowClusterRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowClusterRequest) SetResourceGroupId(v string) *ListFlowClusterRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowClusterResponseBody struct {
	Clusters   *ListFlowClusterResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Struct"`
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFlowClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBody) SetClusters(v *ListFlowClusterResponseBodyClusters) *ListFlowClusterResponseBody {
	s.Clusters = v
	return s
}

func (s *ListFlowClusterResponseBody) SetPageNumber(v int32) *ListFlowClusterResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowClusterResponseBody) SetPageSize(v int32) *ListFlowClusterResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowClusterResponseBody) SetRequestId(v string) *ListFlowClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowClusterResponseBody) SetTotalCount(v int32) *ListFlowClusterResponseBody {
	s.TotalCount = &v
	return s
}

type ListFlowClusterResponseBodyClusters struct {
	ClusterInfo []*ListFlowClusterResponseBodyClustersClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Repeated"`
}

func (s ListFlowClusterResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBodyClusters) SetClusterInfo(v []*ListFlowClusterResponseBodyClustersClusterInfo) *ListFlowClusterResponseBodyClusters {
	s.ClusterInfo = v
	return s
}

type ListFlowClusterResponseBodyClustersClusterInfo struct {
	ChargeType          *string                                                      `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CreateResource      *string                                                      `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	CreateTime          *int64                                                       `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ExpiredTime         *int64                                                       `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	FailReason          *ListFlowClusterResponseBodyClustersClusterInfoFailReason    `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
	HasUncompletedOrder *bool                                                        `json:"HasUncompletedOrder,omitempty" xml:"HasUncompletedOrder,omitempty"`
	Id                  *string                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	K8sClusterId        *string                                                      `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	Name                *string                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	OrderList           *string                                                      `json:"OrderList,omitempty" xml:"OrderList,omitempty"`
	OrderTaskInfo       *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo `json:"OrderTaskInfo,omitempty" xml:"OrderTaskInfo,omitempty" type:"Struct"`
	Period              *int32                                                       `json:"Period,omitempty" xml:"Period,omitempty"`
	RunningTime         *int32                                                       `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	Status              *string                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                *string                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFlowClusterResponseBodyClustersClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBodyClustersClusterInfo) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetChargeType(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetCreateResource(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetCreateTime(v int64) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.CreateTime = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetExpiredTime(v int64) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetFailReason(v *ListFlowClusterResponseBodyClustersClusterInfoFailReason) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.FailReason = v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetHasUncompletedOrder(v bool) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.HasUncompletedOrder = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetId(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Id = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetK8sClusterId(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetName(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Name = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetOrderList(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.OrderList = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetOrderTaskInfo(v *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.OrderTaskInfo = v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetPeriod(v int32) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Period = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetRunningTime(v int32) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetStatus(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Status = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetType(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Type = &v
	return s
}

type ListFlowClusterResponseBodyClustersClusterInfoFailReason struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListFlowClusterResponseBodyClustersClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBodyClustersClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoFailReason) SetErrorCode(v string) *ListFlowClusterResponseBodyClustersClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoFailReason) SetErrorMsg(v string) *ListFlowClusterResponseBodyClustersClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoFailReason) SetRequestId(v string) *ListFlowClusterResponseBodyClustersClusterInfoFailReason {
	s.RequestId = &v
	return s
}

type ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo struct {
	CurrentCount *int32  `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	OrderIdList  *string `json:"OrderIdList,omitempty" xml:"OrderIdList,omitempty"`
	TargetCount  *int32  `json:"TargetCount,omitempty" xml:"TargetCount,omitempty"`
}

func (s ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) SetCurrentCount(v int32) *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo {
	s.CurrentCount = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) SetOrderIdList(v string) *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo {
	s.OrderIdList = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) SetTargetCount(v int32) *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo {
	s.TargetCount = &v
	return s
}

type ListFlowClusterResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponse) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponse) SetHeaders(v map[string]*string) *ListFlowClusterResponse {
	s.Headers = v
	return s
}

func (s *ListFlowClusterResponse) SetStatusCode(v int32) *ListFlowClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowClusterResponse) SetBody(v *ListFlowClusterResponseBody) *ListFlowClusterResponse {
	s.Body = v
	return s
}

type ListFlowClusterAllRequest struct {
	ProductType     *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowClusterAllRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllRequest) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllRequest) SetProductType(v string) *ListFlowClusterAllRequest {
	s.ProductType = &v
	return s
}

func (s *ListFlowClusterAllRequest) SetRegionId(v string) *ListFlowClusterAllRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowClusterAllRequest) SetResourceGroupId(v string) *ListFlowClusterAllRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowClusterAllResponseBody struct {
	Clusters   *ListFlowClusterAllResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Struct"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListFlowClusterAllResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBody) SetClusters(v *ListFlowClusterAllResponseBodyClusters) *ListFlowClusterAllResponseBody {
	s.Clusters = v
	return s
}

func (s *ListFlowClusterAllResponseBody) SetPageNumber(v int32) *ListFlowClusterAllResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowClusterAllResponseBody) SetPageSize(v int32) *ListFlowClusterAllResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowClusterAllResponseBody) SetRequestId(v string) *ListFlowClusterAllResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowClusterAllResponseBody) SetTotalCount(v int32) *ListFlowClusterAllResponseBody {
	s.TotalCount = &v
	return s
}

type ListFlowClusterAllResponseBodyClusters struct {
	ClusterInfo []*ListFlowClusterAllResponseBodyClustersClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Repeated"`
}

func (s ListFlowClusterAllResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBodyClusters) SetClusterInfo(v []*ListFlowClusterAllResponseBodyClustersClusterInfo) *ListFlowClusterAllResponseBodyClusters {
	s.ClusterInfo = v
	return s
}

type ListFlowClusterAllResponseBodyClustersClusterInfo struct {
	ChargeType          *string                                                         `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	CreateResource      *string                                                         `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	CreateTime          *int64                                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ExpiredTime         *int64                                                          `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	FailReason          *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason    `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
	HasUncompletedOrder *bool                                                           `json:"HasUncompletedOrder,omitempty" xml:"HasUncompletedOrder,omitempty"`
	Id                  *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	K8sClusterId        *string                                                         `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	Name                *string                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	OrderList           *string                                                         `json:"OrderList,omitempty" xml:"OrderList,omitempty"`
	OrderTaskInfo       *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo `json:"OrderTaskInfo,omitempty" xml:"OrderTaskInfo,omitempty" type:"Struct"`
	Period              *int32                                                          `json:"Period,omitempty" xml:"Period,omitempty"`
	RunningTime         *int32                                                          `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	Status              *string                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                *string                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfo) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetChargeType(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetCreateResource(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetCreateTime(v int64) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.CreateTime = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetExpiredTime(v int64) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetFailReason(v *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.FailReason = v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetHasUncompletedOrder(v bool) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.HasUncompletedOrder = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetId(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Id = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetK8sClusterId(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetName(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Name = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetOrderList(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.OrderList = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetOrderTaskInfo(v *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.OrderTaskInfo = v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetPeriod(v int32) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Period = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetRunningTime(v int32) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetStatus(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Status = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetType(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Type = &v
	return s
}

type ListFlowClusterAllResponseBodyClustersClusterInfoFailReason struct {
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) SetErrorCode(v string) *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) SetErrorMsg(v string) *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) SetRequestId(v string) *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason {
	s.RequestId = &v
	return s
}

type ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo struct {
	CurrentCount *int32  `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	OrderIdList  *string `json:"OrderIdList,omitempty" xml:"OrderIdList,omitempty"`
	TargetCount  *int32  `json:"TargetCount,omitempty" xml:"TargetCount,omitempty"`
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) SetCurrentCount(v int32) *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo {
	s.CurrentCount = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) SetOrderIdList(v string) *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo {
	s.OrderIdList = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) SetTargetCount(v int32) *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo {
	s.TargetCount = &v
	return s
}

type ListFlowClusterAllResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowClusterAllResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowClusterAllResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponse) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponse) SetHeaders(v map[string]*string) *ListFlowClusterAllResponse {
	s.Headers = v
	return s
}

func (s *ListFlowClusterAllResponse) SetStatusCode(v int32) *ListFlowClusterAllResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowClusterAllResponse) SetBody(v *ListFlowClusterAllResponseBody) *ListFlowClusterAllResponse {
	s.Body = v
	return s
}

type ListFlowClusterAllHostsRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowClusterAllHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsRequest) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsRequest) SetClusterId(v string) *ListFlowClusterAllHostsRequest {
	s.ClusterId = &v
	return s
}

func (s *ListFlowClusterAllHostsRequest) SetProjectId(v string) *ListFlowClusterAllHostsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowClusterAllHostsRequest) SetRegionId(v string) *ListFlowClusterAllHostsRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowClusterAllHostsRequest) SetResourceGroupId(v string) *ListFlowClusterAllHostsRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowClusterAllHostsResponseBody struct {
	HostList  *ListFlowClusterAllHostsResponseBodyHostList `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListFlowClusterAllHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsResponseBody) SetHostList(v *ListFlowClusterAllHostsResponseBodyHostList) *ListFlowClusterAllHostsResponseBody {
	s.HostList = v
	return s
}

func (s *ListFlowClusterAllHostsResponseBody) SetRequestId(v string) *ListFlowClusterAllHostsResponseBody {
	s.RequestId = &v
	return s
}

type ListFlowClusterAllHostsResponseBodyHostList struct {
	Host []*ListFlowClusterAllHostsResponseBodyHostListHost `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s ListFlowClusterAllHostsResponseBodyHostList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsResponseBodyHostList) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsResponseBodyHostList) SetHost(v []*ListFlowClusterAllHostsResponseBodyHostListHost) *ListFlowClusterAllHostsResponseBodyHostList {
	s.Host = v
	return s
}

type ListFlowClusterAllHostsResponseBodyHostListHost struct {
	Cpu            *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	HostId         *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	HostInstanceId *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceType   *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Memory         *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	PrivateIp      *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp       *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	Role           *string `json:"Role,omitempty" xml:"Role,omitempty"`
	SerialNumber   *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFlowClusterAllHostsResponseBodyHostListHost) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsResponseBodyHostListHost) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetCpu(v int32) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Cpu = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetHostId(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.HostId = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetHostInstanceId(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.HostInstanceId = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetHostName(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.HostName = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetInstanceType(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.InstanceType = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetMemory(v int32) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Memory = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetPrivateIp(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.PrivateIp = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetPublicIp(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.PublicIp = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetRole(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Role = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetSerialNumber(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.SerialNumber = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetStatus(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Status = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetType(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Type = &v
	return s
}

type ListFlowClusterAllHostsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowClusterAllHostsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowClusterAllHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsResponse) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsResponse) SetHeaders(v map[string]*string) *ListFlowClusterAllHostsResponse {
	s.Headers = v
	return s
}

func (s *ListFlowClusterAllHostsResponse) SetStatusCode(v int32) *ListFlowClusterAllHostsResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowClusterAllHostsResponse) SetBody(v *ListFlowClusterAllHostsResponseBody) *ListFlowClusterAllHostsResponse {
	s.Body = v
	return s
}

type ListFlowClusterHostRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowClusterHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostRequest) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostRequest) SetClusterId(v string) *ListFlowClusterHostRequest {
	s.ClusterId = &v
	return s
}

func (s *ListFlowClusterHostRequest) SetProjectId(v string) *ListFlowClusterHostRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowClusterHostRequest) SetRegionId(v string) *ListFlowClusterHostRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowClusterHostRequest) SetResourceGroupId(v string) *ListFlowClusterHostRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowClusterHostResponseBody struct {
	HostList  *ListFlowClusterHostResponseBodyHostList `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListFlowClusterHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostResponseBody) SetHostList(v *ListFlowClusterHostResponseBodyHostList) *ListFlowClusterHostResponseBody {
	s.HostList = v
	return s
}

func (s *ListFlowClusterHostResponseBody) SetRequestId(v string) *ListFlowClusterHostResponseBody {
	s.RequestId = &v
	return s
}

type ListFlowClusterHostResponseBodyHostList struct {
	Host []*ListFlowClusterHostResponseBodyHostListHost `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s ListFlowClusterHostResponseBodyHostList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostResponseBodyHostList) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostResponseBodyHostList) SetHost(v []*ListFlowClusterHostResponseBodyHostListHost) *ListFlowClusterHostResponseBodyHostList {
	s.Host = v
	return s
}

type ListFlowClusterHostResponseBodyHostListHost struct {
	Cpu            *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	HostId         *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	HostInstanceId *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceType   *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Memory         *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	PrivateIp      *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp       *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	Role           *string `json:"Role,omitempty" xml:"Role,omitempty"`
	SerialNumber   *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFlowClusterHostResponseBodyHostListHost) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostResponseBodyHostListHost) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetCpu(v int32) *ListFlowClusterHostResponseBodyHostListHost {
	s.Cpu = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetHostId(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.HostId = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetHostInstanceId(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.HostInstanceId = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetHostName(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.HostName = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetInstanceType(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.InstanceType = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetMemory(v int32) *ListFlowClusterHostResponseBodyHostListHost {
	s.Memory = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetPrivateIp(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.PrivateIp = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetPublicIp(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.PublicIp = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetRole(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.Role = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetSerialNumber(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.SerialNumber = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetStatus(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.Status = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetType(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.Type = &v
	return s
}

type ListFlowClusterHostResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowClusterHostResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowClusterHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostResponse) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostResponse) SetHeaders(v map[string]*string) *ListFlowClusterHostResponse {
	s.Headers = v
	return s
}

func (s *ListFlowClusterHostResponse) SetStatusCode(v int32) *ListFlowClusterHostResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowClusterHostResponse) SetBody(v *ListFlowClusterHostResponseBody) *ListFlowClusterHostResponse {
	s.Body = v
	return s
}

type ListFlowInstanceRequest struct {
	FlowId         *string   `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowName       *string   `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	Id             *string   `json:"Id,omitempty" xml:"Id,omitempty"`
	InstanceId     *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeInstanceId *string   `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	OrderBy        *string   `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OrderType      *string   `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	Owner          *string   `json:"Owner,omitempty" xml:"Owner,omitempty"`
	PageNumber     *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StatusList     []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
	TimeRange      *string   `json:"TimeRange,omitempty" xml:"TimeRange,omitempty"`
}

func (s ListFlowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceRequest) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceRequest) SetFlowId(v string) *ListFlowInstanceRequest {
	s.FlowId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetFlowName(v string) *ListFlowInstanceRequest {
	s.FlowName = &v
	return s
}

func (s *ListFlowInstanceRequest) SetId(v string) *ListFlowInstanceRequest {
	s.Id = &v
	return s
}

func (s *ListFlowInstanceRequest) SetInstanceId(v string) *ListFlowInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetNodeInstanceId(v string) *ListFlowInstanceRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetOrderBy(v string) *ListFlowInstanceRequest {
	s.OrderBy = &v
	return s
}

func (s *ListFlowInstanceRequest) SetOrderType(v string) *ListFlowInstanceRequest {
	s.OrderType = &v
	return s
}

func (s *ListFlowInstanceRequest) SetOwner(v string) *ListFlowInstanceRequest {
	s.Owner = &v
	return s
}

func (s *ListFlowInstanceRequest) SetPageNumber(v int32) *ListFlowInstanceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowInstanceRequest) SetPageSize(v int32) *ListFlowInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowInstanceRequest) SetProjectId(v string) *ListFlowInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetRegionId(v string) *ListFlowInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetStatusList(v []*string) *ListFlowInstanceRequest {
	s.StatusList = v
	return s
}

func (s *ListFlowInstanceRequest) SetTimeRange(v string) *ListFlowInstanceRequest {
	s.TimeRange = &v
	return s
}

type ListFlowInstanceResponseBody struct {
	FlowInstances *ListFlowInstanceResponseBodyFlowInstances `json:"FlowInstances,omitempty" xml:"FlowInstances,omitempty" type:"Struct"`
	PageNumber    *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceResponseBody) SetFlowInstances(v *ListFlowInstanceResponseBodyFlowInstances) *ListFlowInstanceResponseBody {
	s.FlowInstances = v
	return s
}

func (s *ListFlowInstanceResponseBody) SetPageNumber(v int32) *ListFlowInstanceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowInstanceResponseBody) SetPageSize(v int32) *ListFlowInstanceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowInstanceResponseBody) SetRequestId(v string) *ListFlowInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowInstanceResponseBody) SetTotal(v int32) *ListFlowInstanceResponseBody {
	s.Total = &v
	return s
}

type ListFlowInstanceResponseBodyFlowInstances struct {
	FlowInstance []*ListFlowInstanceResponseBodyFlowInstancesFlowInstance `json:"FlowInstance,omitempty" xml:"FlowInstance,omitempty" type:"Repeated"`
}

func (s ListFlowInstanceResponseBodyFlowInstances) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceResponseBodyFlowInstances) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceResponseBodyFlowInstances) SetFlowInstance(v []*ListFlowInstanceResponseBodyFlowInstancesFlowInstance) *ListFlowInstanceResponseBodyFlowInstances {
	s.FlowInstance = v
	return s
}

type ListFlowInstanceResponseBodyFlowInstancesFlowInstance struct {
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Duration      *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	FlowId        *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowName      *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	GmtCreate     *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HasNodeFailed *bool   `json:"HasNodeFailed,omitempty" xml:"HasNodeFailed,omitempty"`
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ScheduleTime  *int64  `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListFlowInstanceResponseBodyFlowInstancesFlowInstance) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceResponseBodyFlowInstancesFlowInstance) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetClusterId(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.ClusterId = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetDuration(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.Duration = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetEndTime(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.EndTime = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetFlowId(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.FlowId = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetFlowName(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.FlowName = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetGmtCreate(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetGmtModified(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.GmtModified = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetHasNodeFailed(v bool) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.HasNodeFailed = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetId(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.Id = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetOwner(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.Owner = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetProjectId(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.ProjectId = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetScheduleTime(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.ScheduleTime = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetStartTime(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.StartTime = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetStatus(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.Status = &v
	return s
}

type ListFlowInstanceResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceResponse) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceResponse) SetHeaders(v map[string]*string) *ListFlowInstanceResponse {
	s.Headers = v
	return s
}

func (s *ListFlowInstanceResponse) SetStatusCode(v int32) *ListFlowInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowInstanceResponse) SetBody(v *ListFlowInstanceResponseBody) *ListFlowInstanceResponse {
	s.Body = v
	return s
}

type ListFlowJobRequest struct {
	Adhoc      *bool   `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	Id         *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobRequest) GoString() string {
	return s.String()
}

func (s *ListFlowJobRequest) SetAdhoc(v bool) *ListFlowJobRequest {
	s.Adhoc = &v
	return s
}

func (s *ListFlowJobRequest) SetId(v string) *ListFlowJobRequest {
	s.Id = &v
	return s
}

func (s *ListFlowJobRequest) SetName(v string) *ListFlowJobRequest {
	s.Name = &v
	return s
}

func (s *ListFlowJobRequest) SetPageNumber(v int32) *ListFlowJobRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowJobRequest) SetPageSize(v int32) *ListFlowJobRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowJobRequest) SetProjectId(v string) *ListFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowJobRequest) SetRegionId(v string) *ListFlowJobRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowJobRequest) SetType(v string) *ListFlowJobRequest {
	s.Type = &v
	return s
}

type ListFlowJobResponseBody struct {
	JobList    *ListFlowJobResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                          `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBody) SetJobList(v *ListFlowJobResponseBodyJobList) *ListFlowJobResponseBody {
	s.JobList = v
	return s
}

func (s *ListFlowJobResponseBody) SetPageNumber(v int32) *ListFlowJobResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowJobResponseBody) SetPageSize(v int32) *ListFlowJobResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowJobResponseBody) SetRequestId(v string) *ListFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowJobResponseBody) SetTotal(v int32) *ListFlowJobResponseBody {
	s.Total = &v
	return s
}

type ListFlowJobResponseBodyJobList struct {
	Job []*ListFlowJobResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s ListFlowJobResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBodyJobList) SetJob(v []*ListFlowJobResponseBodyJobListJob) *ListFlowJobResponseBodyJobList {
	s.Job = v
	return s
}

type ListFlowJobResponseBodyJobListJob struct {
	Adhoc              *string                                        `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	AlertConf          *string                                        `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	CategoryId         *string                                        `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	CustomVariables    *string                                        `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	Description        *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	EnvConf            *string                                        `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	FailAct            *string                                        `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	GmtCreate          *int64                                         `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified        *int64                                         `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id                 *string                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	LastInstanceDetail *string                                        `json:"LastInstanceDetail,omitempty" xml:"LastInstanceDetail,omitempty"`
	MaxRetry           *int32                                         `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	MonitorConf        *string                                        `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	Name               *string                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	ParamConf          *string                                        `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	Params             *string                                        `json:"Params,omitempty" xml:"Params,omitempty"`
	ResourceList       *ListFlowJobResponseBodyJobListJobResourceList `json:"ResourceList,omitempty" xml:"ResourceList,omitempty" type:"Struct"`
	RetryInterval      *int64                                         `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RunConf            *string                                        `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	Type               *string                                        `json:"Type,omitempty" xml:"Type,omitempty"`
	Mode               *string                                        `json:"mode,omitempty" xml:"mode,omitempty"`
}

func (s ListFlowJobResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBodyJobListJob) SetAdhoc(v string) *ListFlowJobResponseBodyJobListJob {
	s.Adhoc = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetAlertConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.AlertConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetCategoryId(v string) *ListFlowJobResponseBodyJobListJob {
	s.CategoryId = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetCustomVariables(v string) *ListFlowJobResponseBodyJobListJob {
	s.CustomVariables = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetDescription(v string) *ListFlowJobResponseBodyJobListJob {
	s.Description = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetEnvConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.EnvConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetFailAct(v string) *ListFlowJobResponseBodyJobListJob {
	s.FailAct = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetGmtCreate(v int64) *ListFlowJobResponseBodyJobListJob {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetGmtModified(v int64) *ListFlowJobResponseBodyJobListJob {
	s.GmtModified = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetId(v string) *ListFlowJobResponseBodyJobListJob {
	s.Id = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetLastInstanceDetail(v string) *ListFlowJobResponseBodyJobListJob {
	s.LastInstanceDetail = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetMaxRetry(v int32) *ListFlowJobResponseBodyJobListJob {
	s.MaxRetry = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetMonitorConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.MonitorConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetName(v string) *ListFlowJobResponseBodyJobListJob {
	s.Name = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetParamConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.ParamConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetParams(v string) *ListFlowJobResponseBodyJobListJob {
	s.Params = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetResourceList(v *ListFlowJobResponseBodyJobListJobResourceList) *ListFlowJobResponseBodyJobListJob {
	s.ResourceList = v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetRetryInterval(v int64) *ListFlowJobResponseBodyJobListJob {
	s.RetryInterval = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetRunConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.RunConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetType(v string) *ListFlowJobResponseBodyJobListJob {
	s.Type = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetMode(v string) *ListFlowJobResponseBodyJobListJob {
	s.Mode = &v
	return s
}

type ListFlowJobResponseBodyJobListJobResourceList struct {
	Resource []*ListFlowJobResponseBodyJobListJobResourceListResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s ListFlowJobResponseBodyJobListJobResourceList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBodyJobListJobResourceList) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBodyJobListJobResourceList) SetResource(v []*ListFlowJobResponseBodyJobListJobResourceListResource) *ListFlowJobResponseBodyJobListJobResourceList {
	s.Resource = v
	return s
}

type ListFlowJobResponseBodyJobListJobResourceListResource struct {
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ListFlowJobResponseBodyJobListJobResourceListResource) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBodyJobListJobResourceListResource) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBodyJobListJobResourceListResource) SetAlias(v string) *ListFlowJobResponseBodyJobListJobResourceListResource {
	s.Alias = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJobResourceListResource) SetPath(v string) *ListFlowJobResponseBodyJobListJobResourceListResource {
	s.Path = &v
	return s
}

type ListFlowJobResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponse) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponse) SetHeaders(v map[string]*string) *ListFlowJobResponse {
	s.Headers = v
	return s
}

func (s *ListFlowJobResponse) SetStatusCode(v int32) *ListFlowJobResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowJobResponse) SetBody(v *ListFlowJobResponseBody) *ListFlowJobResponse {
	s.Body = v
	return s
}

type ListFlowJobHistoryRequest struct {
	Id         *string   `json:"Id,omitempty" xml:"Id,omitempty"`
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	JobType    *string   `json:"JobType,omitempty" xml:"JobType,omitempty"`
	PageNumber *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId  *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId   *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StatusList []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
	TimeRange  *string   `json:"TimeRange,omitempty" xml:"TimeRange,omitempty"`
}

func (s ListFlowJobHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryRequest) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryRequest) SetId(v string) *ListFlowJobHistoryRequest {
	s.Id = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetInstanceId(v string) *ListFlowJobHistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetJobType(v string) *ListFlowJobHistoryRequest {
	s.JobType = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetPageNumber(v int32) *ListFlowJobHistoryRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetPageSize(v int32) *ListFlowJobHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetProjectId(v string) *ListFlowJobHistoryRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetRegionId(v string) *ListFlowJobHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetStatusList(v []*string) *ListFlowJobHistoryRequest {
	s.StatusList = v
	return s
}

func (s *ListFlowJobHistoryRequest) SetTimeRange(v string) *ListFlowJobHistoryRequest {
	s.TimeRange = &v
	return s
}

type ListFlowJobHistoryResponseBody struct {
	NodeInstances *ListFlowJobHistoryResponseBodyNodeInstances `json:"NodeInstances,omitempty" xml:"NodeInstances,omitempty" type:"Struct"`
	PageNumber    *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize      *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total         *int32                                       `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowJobHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryResponseBody) SetNodeInstances(v *ListFlowJobHistoryResponseBodyNodeInstances) *ListFlowJobHistoryResponseBody {
	s.NodeInstances = v
	return s
}

func (s *ListFlowJobHistoryResponseBody) SetPageNumber(v int32) *ListFlowJobHistoryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowJobHistoryResponseBody) SetPageSize(v int32) *ListFlowJobHistoryResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowJobHistoryResponseBody) SetRequestId(v string) *ListFlowJobHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBody) SetTotal(v int32) *ListFlowJobHistoryResponseBody {
	s.Total = &v
	return s
}

type ListFlowJobHistoryResponseBodyNodeInstances struct {
	NodeInstance []*ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance `json:"NodeInstance,omitempty" xml:"NodeInstance,omitempty" type:"Repeated"`
}

func (s ListFlowJobHistoryResponseBodyNodeInstances) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryResponseBodyNodeInstances) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryResponseBodyNodeInstances) SetNodeInstance(v []*ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) *ListFlowJobHistoryResponseBodyNodeInstances {
	s.NodeInstance = v
	return s
}

type ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance struct {
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	EndTime        *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	EnvConf        *string `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	ExternalId     *string `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	ExternalInfo   *string `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty"`
	ExternalStatus *string `json:"ExternalStatus,omitempty" xml:"ExternalStatus,omitempty"`
	FailAct        *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	GmtCreate      *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified    *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	JobId          *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName        *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	JobParams      *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	JobType        *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	MaxRetry       *int32  `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	NodeName       *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	ParamConf      *string `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Retries        *int32  `json:"Retries,omitempty" xml:"Retries,omitempty"`
	RetryInterval  *int64  `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RunConf        *string `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Pending        *bool   `json:"pending,omitempty" xml:"pending,omitempty"`
}

func (s ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetClusterId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ClusterId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetEndTime(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.EndTime = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetEnvConf(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.EnvConf = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetExternalId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ExternalId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetExternalInfo(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ExternalInfo = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetExternalStatus(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ExternalStatus = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetFailAct(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.FailAct = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetGmtCreate(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetGmtModified(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.GmtModified = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetHostName(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.HostName = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Id = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetJobId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.JobId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetJobName(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.JobName = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetJobParams(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.JobParams = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetJobType(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.JobType = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetMaxRetry(v int32) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.MaxRetry = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetNodeName(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.NodeName = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetParamConf(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ParamConf = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetProjectId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ProjectId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetRetries(v int32) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Retries = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetRetryInterval(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.RetryInterval = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetRunConf(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.RunConf = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetStartTime(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.StartTime = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetStatus(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Status = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetType(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Type = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetPending(v bool) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Pending = &v
	return s
}

type ListFlowJobHistoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowJobHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowJobHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryResponse) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryResponse) SetHeaders(v map[string]*string) *ListFlowJobHistoryResponse {
	s.Headers = v
	return s
}

func (s *ListFlowJobHistoryResponse) SetStatusCode(v int32) *ListFlowJobHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowJobHistoryResponse) SetBody(v *ListFlowJobHistoryResponseBody) *ListFlowJobHistoryResponse {
	s.Body = v
	return s
}

type ListFlowNodeInstanceRequest struct {
	OrderBy         *string   `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OrderType       *string   `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId       *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	StartTime       *int64    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	StatusList      []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListFlowNodeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceRequest) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceRequest) SetOrderBy(v string) *ListFlowNodeInstanceRequest {
	s.OrderBy = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetOrderType(v string) *ListFlowNodeInstanceRequest {
	s.OrderType = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetPageNumber(v int32) *ListFlowNodeInstanceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetPageSize(v int32) *ListFlowNodeInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetProjectId(v string) *ListFlowNodeInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetRegionId(v string) *ListFlowNodeInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetResourceGroupId(v string) *ListFlowNodeInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetStartTime(v int64) *ListFlowNodeInstanceRequest {
	s.StartTime = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetStatusList(v []*string) *ListFlowNodeInstanceRequest {
	s.StatusList = v
	return s
}

type ListFlowNodeInstanceResponseBody struct {
	FlowNodeInstances *ListFlowNodeInstanceResponseBodyFlowNodeInstances `json:"FlowNodeInstances,omitempty" xml:"FlowNodeInstances,omitempty" type:"Struct"`
	PageNumber        *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total             *int32                                             `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowNodeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceResponseBody) SetFlowNodeInstances(v *ListFlowNodeInstanceResponseBodyFlowNodeInstances) *ListFlowNodeInstanceResponseBody {
	s.FlowNodeInstances = v
	return s
}

func (s *ListFlowNodeInstanceResponseBody) SetPageNumber(v int32) *ListFlowNodeInstanceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBody) SetPageSize(v int32) *ListFlowNodeInstanceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBody) SetRequestId(v string) *ListFlowNodeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBody) SetTotal(v int32) *ListFlowNodeInstanceResponseBody {
	s.Total = &v
	return s
}

type ListFlowNodeInstanceResponseBodyFlowNodeInstances struct {
	FlowNodeInstance []*ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance `json:"FlowNodeInstance,omitempty" xml:"FlowNodeInstance,omitempty" type:"Repeated"`
}

func (s ListFlowNodeInstanceResponseBodyFlowNodeInstances) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceResponseBodyFlowNodeInstances) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstances) SetFlowNodeInstance(v []*ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) *ListFlowNodeInstanceResponseBodyFlowNodeInstances {
	s.FlowNodeInstance = v
	return s
}

type ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance struct {
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Duration         *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	EndTime          *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ExternalChildIds *string `json:"ExternalChildIds,omitempty" xml:"ExternalChildIds,omitempty"`
	ExternalId       *string `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	ExternalInfo     *string `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty"`
	ExternalStatus   *string `json:"ExternalStatus,omitempty" xml:"ExternalStatus,omitempty"`
	ExternalSubId    *string `json:"ExternalSubId,omitempty" xml:"ExternalSubId,omitempty"`
	FailAct          *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	FlowId           *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowInstanceId   *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	GmtCreate        *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified      *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HostName         *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Id               *string `json:"Id,omitempty" xml:"Id,omitempty"`
	JobId            *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobName          *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	JobParams        *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	JobType          *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	MaxRetry         *string `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	NodeName         *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Pending          *bool   `json:"Pending,omitempty" xml:"Pending,omitempty"`
	ProjectId        *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Retries          *int32  `json:"Retries,omitempty" xml:"Retries,omitempty"`
	RetryInterval    *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetClusterId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ClusterId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetDuration(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Duration = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetEndTime(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.EndTime = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalChildIds(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalChildIds = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalInfo(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalInfo = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalStatus(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalStatus = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalSubId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalSubId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetFailAct(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.FailAct = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetFlowId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.FlowId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetFlowInstanceId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.FlowInstanceId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetGmtCreate(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetGmtModified(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.GmtModified = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetHostName(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.HostName = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Id = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetJobId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.JobId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetJobName(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.JobName = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetJobParams(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.JobParams = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetJobType(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.JobType = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetMaxRetry(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.MaxRetry = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetNodeName(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.NodeName = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetPending(v bool) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Pending = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetProjectId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ProjectId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetRetries(v int32) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Retries = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetRetryInterval(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.RetryInterval = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetStartTime(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.StartTime = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetStatus(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Status = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetType(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Type = &v
	return s
}

type ListFlowNodeInstanceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowNodeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowNodeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceResponse) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceResponse) SetHeaders(v map[string]*string) *ListFlowNodeInstanceResponse {
	s.Headers = v
	return s
}

func (s *ListFlowNodeInstanceResponse) SetStatusCode(v int32) *ListFlowNodeInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowNodeInstanceResponse) SetBody(v *ListFlowNodeInstanceResponseBody) *ListFlowNodeInstanceResponse {
	s.Body = v
	return s
}

type ListFlowNodeInstanceContainerStatusRequest struct {
	NodeInstanceId *string `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListFlowNodeInstanceContainerStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusRequest) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetNodeInstanceId(v string) *ListFlowNodeInstanceContainerStatusRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetPageNumber(v int32) *ListFlowNodeInstanceContainerStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetPageSize(v int32) *ListFlowNodeInstanceContainerStatusRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetProjectId(v string) *ListFlowNodeInstanceContainerStatusRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetRegionId(v string) *ListFlowNodeInstanceContainerStatusRequest {
	s.RegionId = &v
	return s
}

type ListFlowNodeInstanceContainerStatusResponseBody struct {
	ContainerStatusList *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList `json:"ContainerStatusList,omitempty" xml:"ContainerStatusList,omitempty" type:"Struct"`
	PageNumber          *int32                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId           *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total               *int32                                                              `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowNodeInstanceContainerStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetContainerStatusList(v *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.ContainerStatusList = v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetPageNumber(v int32) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetPageSize(v int32) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetRequestId(v string) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetTotal(v int32) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.Total = &v
	return s
}

type ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList struct {
	ContainerStatus []*ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus `json:"ContainerStatus,omitempty" xml:"ContainerStatus,omitempty" type:"Repeated"`
}

func (s ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList) SetContainerStatus(v []*ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList {
	s.ContainerStatus = v
	return s
}

type ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus struct {
	// Application ID。
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	// Container ID。
	ContainerId *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	HostName    *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) SetApplicationId(v string) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus {
	s.ApplicationId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) SetContainerId(v string) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus {
	s.ContainerId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) SetHostName(v string) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus {
	s.HostName = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) SetStatus(v string) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus {
	s.Status = &v
	return s
}

type ListFlowNodeInstanceContainerStatusResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowNodeInstanceContainerStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowNodeInstanceContainerStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusResponse) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusResponse) SetHeaders(v map[string]*string) *ListFlowNodeInstanceContainerStatusResponse {
	s.Headers = v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponse) SetStatusCode(v int32) *ListFlowNodeInstanceContainerStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponse) SetBody(v *ListFlowNodeInstanceContainerStatusResponseBody) *ListFlowNodeInstanceContainerStatusResponse {
	s.Body = v
	return s
}

type ListFlowNodeSqlResultRequest struct {
	Length         *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	NodeInstanceId *string `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	Offset         *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	SqlIndex       *int32  `json:"SqlIndex,omitempty" xml:"SqlIndex,omitempty"`
}

func (s ListFlowNodeSqlResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultRequest) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultRequest) SetLength(v int32) *ListFlowNodeSqlResultRequest {
	s.Length = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetNodeInstanceId(v string) *ListFlowNodeSqlResultRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetOffset(v int32) *ListFlowNodeSqlResultRequest {
	s.Offset = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetProjectId(v string) *ListFlowNodeSqlResultRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetRegionId(v string) *ListFlowNodeSqlResultRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetSqlIndex(v int32) *ListFlowNodeSqlResultRequest {
	s.SqlIndex = &v
	return s
}

type ListFlowNodeSqlResultResponseBody struct {
	End        *bool                                        `json:"End,omitempty" xml:"End,omitempty"`
	HeaderList *ListFlowNodeSqlResultResponseBodyHeaderList `json:"HeaderList,omitempty" xml:"HeaderList,omitempty" type:"Struct"`
	RequestId  *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RowList    *ListFlowNodeSqlResultResponseBodyRowList    `json:"RowList,omitempty" xml:"RowList,omitempty" type:"Struct"`
}

func (s ListFlowNodeSqlResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBody) SetEnd(v bool) *ListFlowNodeSqlResultResponseBody {
	s.End = &v
	return s
}

func (s *ListFlowNodeSqlResultResponseBody) SetHeaderList(v *ListFlowNodeSqlResultResponseBodyHeaderList) *ListFlowNodeSqlResultResponseBody {
	s.HeaderList = v
	return s
}

func (s *ListFlowNodeSqlResultResponseBody) SetRequestId(v string) *ListFlowNodeSqlResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowNodeSqlResultResponseBody) SetRowList(v *ListFlowNodeSqlResultResponseBodyRowList) *ListFlowNodeSqlResultResponseBody {
	s.RowList = v
	return s
}

type ListFlowNodeSqlResultResponseBodyHeaderList struct {
	Header []*string `json:"Header,omitempty" xml:"Header,omitempty" type:"Repeated"`
}

func (s ListFlowNodeSqlResultResponseBodyHeaderList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBodyHeaderList) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBodyHeaderList) SetHeader(v []*string) *ListFlowNodeSqlResultResponseBodyHeaderList {
	s.Header = v
	return s
}

type ListFlowNodeSqlResultResponseBodyRowList struct {
	Row []*ListFlowNodeSqlResultResponseBodyRowListRow `json:"Row,omitempty" xml:"Row,omitempty" type:"Repeated"`
}

func (s ListFlowNodeSqlResultResponseBodyRowList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBodyRowList) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBodyRowList) SetRow(v []*ListFlowNodeSqlResultResponseBodyRowListRow) *ListFlowNodeSqlResultResponseBodyRowList {
	s.Row = v
	return s
}

type ListFlowNodeSqlResultResponseBodyRowListRow struct {
	RowIndex    *int32                                                  `json:"RowIndex,omitempty" xml:"RowIndex,omitempty"`
	RowItemList *ListFlowNodeSqlResultResponseBodyRowListRowRowItemList `json:"RowItemList,omitempty" xml:"RowItemList,omitempty" type:"Struct"`
}

func (s ListFlowNodeSqlResultResponseBodyRowListRow) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBodyRowListRow) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBodyRowListRow) SetRowIndex(v int32) *ListFlowNodeSqlResultResponseBodyRowListRow {
	s.RowIndex = &v
	return s
}

func (s *ListFlowNodeSqlResultResponseBodyRowListRow) SetRowItemList(v *ListFlowNodeSqlResultResponseBodyRowListRowRowItemList) *ListFlowNodeSqlResultResponseBodyRowListRow {
	s.RowItemList = v
	return s
}

type ListFlowNodeSqlResultResponseBodyRowListRowRowItemList struct {
	RowItem []*string `json:"rowItem,omitempty" xml:"rowItem,omitempty" type:"Repeated"`
}

func (s ListFlowNodeSqlResultResponseBodyRowListRowRowItemList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBodyRowListRowRowItemList) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBodyRowListRowRowItemList) SetRowItem(v []*string) *ListFlowNodeSqlResultResponseBodyRowListRowRowItemList {
	s.RowItem = v
	return s
}

type ListFlowNodeSqlResultResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowNodeSqlResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowNodeSqlResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponse) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponse) SetHeaders(v map[string]*string) *ListFlowNodeSqlResultResponse {
	s.Headers = v
	return s
}

func (s *ListFlowNodeSqlResultResponse) SetStatusCode(v int32) *ListFlowNodeSqlResultResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowNodeSqlResultResponse) SetBody(v *ListFlowNodeSqlResultResponseBody) *ListFlowNodeSqlResultResponse {
	s.Body = v
	return s
}

type ListFlowProjectRequest struct {
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductType     *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *ListFlowProjectRequest) SetName(v string) *ListFlowProjectRequest {
	s.Name = &v
	return s
}

func (s *ListFlowProjectRequest) SetPageNumber(v int32) *ListFlowProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectRequest) SetPageSize(v int32) *ListFlowProjectRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectRequest) SetProductType(v string) *ListFlowProjectRequest {
	s.ProductType = &v
	return s
}

func (s *ListFlowProjectRequest) SetProjectId(v string) *ListFlowProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectRequest) SetRegionId(v string) *ListFlowProjectRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowProjectRequest) SetResourceGroupId(v string) *ListFlowProjectRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowProjectResponseBody struct {
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Projects   *ListFlowProjectResponseBodyProjects `json:"Projects,omitempty" xml:"Projects,omitempty" type:"Struct"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                               `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowProjectResponseBody) SetPageNumber(v int32) *ListFlowProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectResponseBody) SetPageSize(v int32) *ListFlowProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectResponseBody) SetProjects(v *ListFlowProjectResponseBodyProjects) *ListFlowProjectResponseBody {
	s.Projects = v
	return s
}

func (s *ListFlowProjectResponseBody) SetRequestId(v string) *ListFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowProjectResponseBody) SetTotal(v int32) *ListFlowProjectResponseBody {
	s.Total = &v
	return s
}

type ListFlowProjectResponseBodyProjects struct {
	Project []*ListFlowProjectResponseBodyProjectsProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Repeated"`
}

func (s ListFlowProjectResponseBodyProjects) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectResponseBodyProjects) GoString() string {
	return s.String()
}

func (s *ListFlowProjectResponseBodyProjects) SetProject(v []*ListFlowProjectResponseBodyProjectsProject) *ListFlowProjectResponseBodyProjects {
	s.Project = v
	return s
}

type ListFlowProjectResponseBodyProjectsProject struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListFlowProjectResponseBodyProjectsProject) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectResponseBodyProjectsProject) GoString() string {
	return s.String()
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetDescription(v string) *ListFlowProjectResponseBodyProjectsProject {
	s.Description = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetGmtCreate(v int64) *ListFlowProjectResponseBodyProjectsProject {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetGmtModified(v int64) *ListFlowProjectResponseBodyProjectsProject {
	s.GmtModified = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetId(v string) *ListFlowProjectResponseBodyProjectsProject {
	s.Id = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetName(v string) *ListFlowProjectResponseBodyProjectsProject {
	s.Name = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetUserId(v string) *ListFlowProjectResponseBodyProjectsProject {
	s.UserId = &v
	return s
}

type ListFlowProjectResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *ListFlowProjectResponse) SetHeaders(v map[string]*string) *ListFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *ListFlowProjectResponse) SetStatusCode(v int32) *ListFlowProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowProjectResponse) SetBody(v *ListFlowProjectResponseBody) *ListFlowProjectResponse {
	s.Body = v
	return s
}

type ListFlowProjectClusterSettingRequest struct {
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingRequest) SetPageNumber(v int32) *ListFlowProjectClusterSettingRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectClusterSettingRequest) SetPageSize(v int32) *ListFlowProjectClusterSettingRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectClusterSettingRequest) SetProjectId(v string) *ListFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectClusterSettingRequest) SetRegionId(v string) *ListFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

type ListFlowProjectClusterSettingResponseBody struct {
	ClusterSettings *ListFlowProjectClusterSettingResponseBodyClusterSettings `json:"ClusterSettings,omitempty" xml:"ClusterSettings,omitempty" type:"Struct"`
	PageNumber      *int32                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId       *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total           *int32                                                    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBody) SetClusterSettings(v *ListFlowProjectClusterSettingResponseBodyClusterSettings) *ListFlowProjectClusterSettingResponseBody {
	s.ClusterSettings = v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBody) SetPageNumber(v int32) *ListFlowProjectClusterSettingResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBody) SetPageSize(v int32) *ListFlowProjectClusterSettingResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBody) SetRequestId(v string) *ListFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBody) SetTotal(v int32) *ListFlowProjectClusterSettingResponseBody {
	s.Total = &v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettings struct {
	ClusterSetting []*ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting `json:"ClusterSetting,omitempty" xml:"ClusterSetting,omitempty" type:"Repeated"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettings) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettings) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettings) SetClusterSetting(v []*ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) *ListFlowProjectClusterSettingResponseBodyClusterSettings {
	s.ClusterSetting = v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting struct {
	ClusterId    *string                                                                          `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ClusterName  *string                                                                          `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	DefaultQueue *string                                                                          `json:"DefaultQueue,omitempty" xml:"DefaultQueue,omitempty"`
	DefaultUser  *string                                                                          `json:"DefaultUser,omitempty" xml:"DefaultUser,omitempty"`
	GmtCreate    *int64                                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *int64                                                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HostList     *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList  `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
	K8sClusterId *string                                                                          `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	ProjectId    *string                                                                          `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	QueueList    *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Struct"`
	UserList     *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList  `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Struct"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetClusterId(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.ClusterId = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetClusterName(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.ClusterName = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetDefaultQueue(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.DefaultQueue = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetDefaultUser(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.DefaultUser = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetGmtCreate(v int64) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetGmtModified(v int64) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.GmtModified = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetHostList(v *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.HostList = v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetK8sClusterId(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.K8sClusterId = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetProjectId(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetQueueList(v *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.QueueList = v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetUserList(v *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.UserList = v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList struct {
	Host []*string `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList) SetHost(v []*string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList {
	s.Host = v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList struct {
	Queue []*string `json:"Queue,omitempty" xml:"Queue,omitempty" type:"Repeated"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList) SetQueue(v []*string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList {
	s.Queue = v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList struct {
	User []*string `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList) SetUser(v []*string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList {
	s.User = v
	return s
}

type ListFlowProjectClusterSettingResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *ListFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *ListFlowProjectClusterSettingResponse) SetStatusCode(v int32) *ListFlowProjectClusterSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponse) SetBody(v *ListFlowProjectClusterSettingResponseBody) *ListFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type ListFlowProjectUserRequest struct {
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListFlowProjectUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserRequest) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserRequest) SetPageNumber(v int32) *ListFlowProjectUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectUserRequest) SetPageSize(v int32) *ListFlowProjectUserRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectUserRequest) SetProjectId(v string) *ListFlowProjectUserRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectUserRequest) SetRegionId(v string) *ListFlowProjectUserRequest {
	s.RegionId = &v
	return s
}

type ListFlowProjectUserResponseBody struct {
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total      *int32                                `json:"Total,omitempty" xml:"Total,omitempty"`
	Users      *ListFlowProjectUserResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Struct"`
}

func (s ListFlowProjectUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserResponseBody) SetPageNumber(v int32) *ListFlowProjectUserResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectUserResponseBody) SetPageSize(v int32) *ListFlowProjectUserResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectUserResponseBody) SetRequestId(v string) *ListFlowProjectUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowProjectUserResponseBody) SetTotal(v int32) *ListFlowProjectUserResponseBody {
	s.Total = &v
	return s
}

func (s *ListFlowProjectUserResponseBody) SetUsers(v *ListFlowProjectUserResponseBodyUsers) *ListFlowProjectUserResponseBody {
	s.Users = v
	return s
}

type ListFlowProjectUserResponseBodyUsers struct {
	User []*ListFlowProjectUserResponseBodyUsersUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListFlowProjectUserResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserResponseBodyUsers) SetUser(v []*ListFlowProjectUserResponseBodyUsersUser) *ListFlowProjectUserResponseBodyUsers {
	s.User = v
	return s
}

type ListFlowProjectUserResponseBodyUsersUser struct {
	AccountUserId *string `json:"AccountUserId,omitempty" xml:"AccountUserId,omitempty"`
	GmtCreate     *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	OwnerId       *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	UserName      *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ListFlowProjectUserResponseBodyUsersUser) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserResponseBodyUsersUser) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetAccountUserId(v string) *ListFlowProjectUserResponseBodyUsersUser {
	s.AccountUserId = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetGmtCreate(v int64) *ListFlowProjectUserResponseBodyUsersUser {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetGmtModified(v int64) *ListFlowProjectUserResponseBodyUsersUser {
	s.GmtModified = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetOwnerId(v string) *ListFlowProjectUserResponseBodyUsersUser {
	s.OwnerId = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetProjectId(v string) *ListFlowProjectUserResponseBodyUsersUser {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetUserName(v string) *ListFlowProjectUserResponseBodyUsersUser {
	s.UserName = &v
	return s
}

type ListFlowProjectUserResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListFlowProjectUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListFlowProjectUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserResponse) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserResponse) SetHeaders(v map[string]*string) *ListFlowProjectUserResponse {
	s.Headers = v
	return s
}

func (s *ListFlowProjectUserResponse) SetStatusCode(v int32) *ListFlowProjectUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ListFlowProjectUserResponse) SetBody(v *ListFlowProjectUserResponseBody) *ListFlowProjectUserResponse {
	s.Body = v
	return s
}

type ListResourcePoolRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PoolType        *string `json:"PoolType,omitempty" xml:"PoolType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *ListResourcePoolRequest) SetClusterId(v string) *ListResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *ListResourcePoolRequest) SetPageNumber(v int32) *ListResourcePoolRequest {
	s.PageNumber = &v
	return s
}

func (s *ListResourcePoolRequest) SetPageSize(v int32) *ListResourcePoolRequest {
	s.PageSize = &v
	return s
}

func (s *ListResourcePoolRequest) SetPoolType(v string) *ListResourcePoolRequest {
	s.PoolType = &v
	return s
}

func (s *ListResourcePoolRequest) SetRegionId(v string) *ListResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *ListResourcePoolRequest) SetResourceOwnerId(v int64) *ListResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

type ListResourcePoolResponseBody struct {
	PageNumber   *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize     *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PoolInfoList *ListResourcePoolResponseBodyPoolInfoList `json:"PoolInfoList,omitempty" xml:"PoolInfoList,omitempty" type:"Struct"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total        *int32                                    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBody) SetPageNumber(v int32) *ListResourcePoolResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListResourcePoolResponseBody) SetPageSize(v int32) *ListResourcePoolResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListResourcePoolResponseBody) SetPoolInfoList(v *ListResourcePoolResponseBodyPoolInfoList) *ListResourcePoolResponseBody {
	s.PoolInfoList = v
	return s
}

func (s *ListResourcePoolResponseBody) SetRequestId(v string) *ListResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListResourcePoolResponseBody) SetTotal(v int32) *ListResourcePoolResponseBody {
	s.Total = &v
	return s
}

type ListResourcePoolResponseBodyPoolInfoList struct {
	PoolInfo []*ListResourcePoolResponseBodyPoolInfoListPoolInfo `json:"PoolInfo,omitempty" xml:"PoolInfo,omitempty" type:"Repeated"`
}

func (s ListResourcePoolResponseBodyPoolInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoList) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoList) SetPoolInfo(v []*ListResourcePoolResponseBodyPoolInfoListPoolInfo) *ListResourcePoolResponseBodyPoolInfoList {
	s.PoolInfo = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfo struct {
	EcmResourcePool           *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool           `json:"EcmResourcePool,omitempty" xml:"EcmResourcePool,omitempty" type:"Struct"`
	EcmResourcePoolConfigList *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList `json:"EcmResourcePoolConfigList,omitempty" xml:"EcmResourcePoolConfigList,omitempty" type:"Struct"`
	QueueList                 *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList                 `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Struct"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfo) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfo) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfo) SetEcmResourcePool(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) *ListResourcePoolResponseBodyPoolInfoListPoolInfo {
	s.EcmResourcePool = v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfo) SetEcmResourcePoolConfigList(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList) *ListResourcePoolResponseBodyPoolInfoListPoolInfo {
	s.EcmResourcePoolConfigList = v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfo) SetQueueList(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList) *ListResourcePoolResponseBodyPoolInfoListPoolInfo {
	s.QueueList = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool struct {
	Active         *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Note           *string `json:"Note,omitempty" xml:"Note,omitempty"`
	PoolType       *string `json:"PoolType,omitempty" xml:"PoolType,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	YarnSiteConfig *string `json:"YarnSiteConfig,omitempty" xml:"YarnSiteConfig,omitempty"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetActive(v bool) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.Active = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.Id = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetName(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.Name = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetNote(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.Note = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetPoolType(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.PoolType = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetUserId(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.UserId = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetYarnSiteConfig(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.YarnSiteConfig = &v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList struct {
	EcmResourcePoolConfig []*ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig `json:"EcmResourcePoolConfig,omitempty" xml:"EcmResourcePoolConfig,omitempty" type:"Repeated"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList) SetEcmResourcePoolConfig(v []*ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList {
	s.EcmResourcePoolConfig = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigType  *string `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetCategory(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Category = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigKey(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigKey = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigType(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigType = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigValue(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigValue = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Id = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetNote(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Note = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetStatus(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Status = &v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList struct {
	Queue []*ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue `json:"Queue,omitempty" xml:"Queue,omitempty" type:"Repeated"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList) SetQueue(v []*ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList {
	s.Queue = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue struct {
	EcmResourcePoolConfigList *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList `json:"EcmResourcePoolConfigList,omitempty" xml:"EcmResourcePoolConfigList,omitempty" type:"Struct"`
	EcmResourceQueue          *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue          `json:"EcmResourceQueue,omitempty" xml:"EcmResourceQueue,omitempty" type:"Struct"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) SetEcmResourcePoolConfigList(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue {
	s.EcmResourcePoolConfigList = v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) SetEcmResourceQueue(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue {
	s.EcmResourceQueue = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList struct {
	EcmResourcePoolConfig []*ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig `json:"EcmResourcePoolConfig,omitempty" xml:"EcmResourcePoolConfig,omitempty" type:"Repeated"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList) SetEcmResourcePoolConfig(v []*ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList {
	s.EcmResourcePoolConfig = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigType  *string `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetCategory(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Category = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigKey(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigKey = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigType(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigType = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigValue(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigValue = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Id = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetNote(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Note = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetStatus(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Status = &v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue struct {
	Id            *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Leaf          *bool   `json:"Leaf,omitempty" xml:"Leaf,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentQueueId *int64  `json:"ParentQueueId,omitempty" xml:"ParentQueueId,omitempty"`
	// QualifiedName。
	QualifiedName  *string `json:"QualifiedName,omitempty" xml:"QualifiedName,omitempty"`
	QueueType      *string `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
	ResourcePoolId *int64  `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.Id = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetLeaf(v bool) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.Leaf = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetName(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.Name = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetParentQueueId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.ParentQueueId = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetQualifiedName(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.QualifiedName = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetQueueType(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.QueueType = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetResourcePoolId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.ResourcePoolId = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetStatus(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.Status = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetUserId(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.UserId = &v
	return s
}

type ListResourcePoolResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponse) SetHeaders(v map[string]*string) *ListResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *ListResourcePoolResponse) SetStatusCode(v int32) *ListResourcePoolResponse {
	s.StatusCode = &v
	return s
}

func (s *ListResourcePoolResponse) SetBody(v *ListResourcePoolResponseBody) *ListResourcePoolResponse {
	s.Body = v
	return s
}

type ListScalingActivityV2Request struct {
	ClusterBizId      *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	CurrentSize       *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	HostGroupId       *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName     *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	Limit             *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	OrderField        *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode         *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	PageCount         *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ScalingRuleName   *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListScalingActivityV2Request) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2Request) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2Request) SetClusterBizId(v string) *ListScalingActivityV2Request {
	s.ClusterBizId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetCurrentSize(v int32) *ListScalingActivityV2Request {
	s.CurrentSize = &v
	return s
}

func (s *ListScalingActivityV2Request) SetHostGroupId(v string) *ListScalingActivityV2Request {
	s.HostGroupId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetHostGroupName(v string) *ListScalingActivityV2Request {
	s.HostGroupName = &v
	return s
}

func (s *ListScalingActivityV2Request) SetLimit(v int32) *ListScalingActivityV2Request {
	s.Limit = &v
	return s
}

func (s *ListScalingActivityV2Request) SetOrderField(v string) *ListScalingActivityV2Request {
	s.OrderField = &v
	return s
}

func (s *ListScalingActivityV2Request) SetOrderMode(v string) *ListScalingActivityV2Request {
	s.OrderMode = &v
	return s
}

func (s *ListScalingActivityV2Request) SetPageCount(v int32) *ListScalingActivityV2Request {
	s.PageCount = &v
	return s
}

func (s *ListScalingActivityV2Request) SetPageNumber(v int32) *ListScalingActivityV2Request {
	s.PageNumber = &v
	return s
}

func (s *ListScalingActivityV2Request) SetPageSize(v int32) *ListScalingActivityV2Request {
	s.PageSize = &v
	return s
}

func (s *ListScalingActivityV2Request) SetRegionId(v string) *ListScalingActivityV2Request {
	s.RegionId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetResourceGroupId(v string) *ListScalingActivityV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetResourceOwnerId(v int64) *ListScalingActivityV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetScalingGroupBizId(v string) *ListScalingActivityV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetScalingRuleName(v string) *ListScalingActivityV2Request {
	s.ScalingRuleName = &v
	return s
}

func (s *ListScalingActivityV2Request) SetStatus(v string) *ListScalingActivityV2Request {
	s.Status = &v
	return s
}

type ListScalingActivityV2ResponseBody struct {
	Items      *ListScalingActivityV2ResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	NextToken  *string                                 `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListScalingActivityV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2ResponseBody) SetItems(v *ListScalingActivityV2ResponseBodyItems) *ListScalingActivityV2ResponseBody {
	s.Items = v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetNextToken(v string) *ListScalingActivityV2ResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetPageNumber(v int32) *ListScalingActivityV2ResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetPageSize(v int32) *ListScalingActivityV2ResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetRequestId(v string) *ListScalingActivityV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetTotalCount(v int32) *ListScalingActivityV2ResponseBody {
	s.TotalCount = &v
	return s
}

type ListScalingActivityV2ResponseBodyItems struct {
	Item []*ListScalingActivityV2ResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListScalingActivityV2ResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2ResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2ResponseBodyItems) SetItem(v []*ListScalingActivityV2ResponseBodyItemsItem) *ListScalingActivityV2ResponseBodyItems {
	s.Item = v
	return s
}

type ListScalingActivityV2ResponseBodyItemsItem struct {
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Cause           *string `json:"Cause,omitempty" xml:"Cause,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime         *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	ExpectNum       *int32  `json:"ExpectNum,omitempty" xml:"ExpectNum,omitempty"`
	HostGroupBizId  *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
	HostGroupName   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	InstanceIds     *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	ScalingRuleId   *string `json:"ScalingRuleId,omitempty" xml:"ScalingRuleId,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	StartTime       *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCapacity   *int32  `json:"TotalCapacity,omitempty" xml:"TotalCapacity,omitempty"`
	Transition      *string `json:"Transition,omitempty" xml:"Transition,omitempty"`
}

func (s ListScalingActivityV2ResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2ResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetBizId(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.BizId = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetCause(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.Cause = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetDescription(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.Description = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetEndTime(v int64) *ListScalingActivityV2ResponseBodyItemsItem {
	s.EndTime = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetExpectNum(v int32) *ListScalingActivityV2ResponseBodyItemsItem {
	s.ExpectNum = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetHostGroupBizId(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.HostGroupBizId = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetHostGroupName(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.HostGroupName = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetInstanceIds(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.InstanceIds = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetScalingRuleId(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.ScalingRuleId = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetScalingRuleName(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.ScalingRuleName = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetStartTime(v int64) *ListScalingActivityV2ResponseBodyItemsItem {
	s.StartTime = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetStatus(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.Status = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetTotalCapacity(v int32) *ListScalingActivityV2ResponseBodyItemsItem {
	s.TotalCapacity = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetTransition(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.Transition = &v
	return s
}

type ListScalingActivityV2Response struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListScalingActivityV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListScalingActivityV2Response) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2Response) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2Response) SetHeaders(v map[string]*string) *ListScalingActivityV2Response {
	s.Headers = v
	return s
}

func (s *ListScalingActivityV2Response) SetStatusCode(v int32) *ListScalingActivityV2Response {
	s.StatusCode = &v
	return s
}

func (s *ListScalingActivityV2Response) SetBody(v *ListScalingActivityV2ResponseBody) *ListScalingActivityV2Response {
	s.Body = v
	return s
}

type ListScalingConfigItemV2Request struct {
	ConfigItemType    *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s ListScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2Request) SetConfigItemType(v string) *ListScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetPageNumber(v int32) *ListScalingConfigItemV2Request {
	s.PageNumber = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetPageSize(v int32) *ListScalingConfigItemV2Request {
	s.PageSize = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetRegionId(v string) *ListScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetResourceGroupId(v string) *ListScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetResourceOwnerId(v int64) *ListScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetScalingGroupBizId(v string) *ListScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type ListScalingConfigItemV2ResponseBody struct {
	Items      *ListScalingConfigItemV2ResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	NextToken  *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2ResponseBody) SetItems(v *ListScalingConfigItemV2ResponseBodyItems) *ListScalingConfigItemV2ResponseBody {
	s.Items = v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetNextToken(v string) *ListScalingConfigItemV2ResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetPageNumber(v int32) *ListScalingConfigItemV2ResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetPageSize(v int32) *ListScalingConfigItemV2ResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetRequestId(v string) *ListScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetTotalCount(v int32) *ListScalingConfigItemV2ResponseBody {
	s.TotalCount = &v
	return s
}

type ListScalingConfigItemV2ResponseBodyItems struct {
	Item []*ListScalingConfigItemV2ResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListScalingConfigItemV2ResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2ResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2ResponseBodyItems) SetItem(v []*ListScalingConfigItemV2ResponseBodyItemsItem) *ListScalingConfigItemV2ResponseBodyItems {
	s.Item = v
	return s
}

type ListScalingConfigItemV2ResponseBodyItemsItem struct {
	ConfigItemInformation  *string `json:"ConfigItemInformation,omitempty" xml:"ConfigItemInformation,omitempty"`
	ConfigItemType         *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	ScalingConfigItemBizId *string `json:"ScalingConfigItemBizId,omitempty" xml:"ScalingConfigItemBizId,omitempty"`
	ScalingGroupBizId      *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s ListScalingConfigItemV2ResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2ResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2ResponseBodyItemsItem) SetConfigItemInformation(v string) *ListScalingConfigItemV2ResponseBodyItemsItem {
	s.ConfigItemInformation = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBodyItemsItem) SetConfigItemType(v string) *ListScalingConfigItemV2ResponseBodyItemsItem {
	s.ConfigItemType = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBodyItemsItem) SetScalingConfigItemBizId(v string) *ListScalingConfigItemV2ResponseBodyItemsItem {
	s.ScalingConfigItemBizId = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBodyItemsItem) SetScalingGroupBizId(v string) *ListScalingConfigItemV2ResponseBodyItemsItem {
	s.ScalingGroupBizId = &v
	return s
}

type ListScalingConfigItemV2Response struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2Response) SetHeaders(v map[string]*string) *ListScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *ListScalingConfigItemV2Response) SetStatusCode(v int32) *ListScalingConfigItemV2Response {
	s.StatusCode = &v
	return s
}

func (s *ListScalingConfigItemV2Response) SetBody(v *ListScalingConfigItemV2ResponseBody) *ListScalingConfigItemV2Response {
	s.Body = v
	return s
}

type ListScalingGroupV2Request struct {
	ClusterBizId    *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	CurrentSize     *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	OrderField      *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode       *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	PageCount       *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ListScalingGroupV2Request) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2Request) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2Request) SetClusterBizId(v string) *ListScalingGroupV2Request {
	s.ClusterBizId = &v
	return s
}

func (s *ListScalingGroupV2Request) SetCurrentSize(v int32) *ListScalingGroupV2Request {
	s.CurrentSize = &v
	return s
}

func (s *ListScalingGroupV2Request) SetLimit(v int32) *ListScalingGroupV2Request {
	s.Limit = &v
	return s
}

func (s *ListScalingGroupV2Request) SetOrderField(v string) *ListScalingGroupV2Request {
	s.OrderField = &v
	return s
}

func (s *ListScalingGroupV2Request) SetOrderMode(v string) *ListScalingGroupV2Request {
	s.OrderMode = &v
	return s
}

func (s *ListScalingGroupV2Request) SetPageCount(v int32) *ListScalingGroupV2Request {
	s.PageCount = &v
	return s
}

func (s *ListScalingGroupV2Request) SetPageNumber(v int32) *ListScalingGroupV2Request {
	s.PageNumber = &v
	return s
}

func (s *ListScalingGroupV2Request) SetPageSize(v int32) *ListScalingGroupV2Request {
	s.PageSize = &v
	return s
}

func (s *ListScalingGroupV2Request) SetRegionId(v string) *ListScalingGroupV2Request {
	s.RegionId = &v
	return s
}

func (s *ListScalingGroupV2Request) SetResourceGroupId(v string) *ListScalingGroupV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ListScalingGroupV2Request) SetResourceOwnerId(v int64) *ListScalingGroupV2Request {
	s.ResourceOwnerId = &v
	return s
}

type ListScalingGroupV2ResponseBody struct {
	Items      *ListScalingGroupV2ResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
	NextToken  *string                              `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s ListScalingGroupV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2ResponseBody) SetItems(v *ListScalingGroupV2ResponseBodyItems) *ListScalingGroupV2ResponseBody {
	s.Items = v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetNextToken(v string) *ListScalingGroupV2ResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetPageNumber(v int32) *ListScalingGroupV2ResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetPageSize(v int32) *ListScalingGroupV2ResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetRequestId(v string) *ListScalingGroupV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetTotalCount(v int32) *ListScalingGroupV2ResponseBody {
	s.TotalCount = &v
	return s
}

type ListScalingGroupV2ResponseBodyItems struct {
	Item []*ListScalingGroupV2ResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListScalingGroupV2ResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2ResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2ResponseBodyItems) SetItem(v []*ListScalingGroupV2ResponseBodyItemsItem) *ListScalingGroupV2ResponseBodyItems {
	s.Item = v
	return s
}

type ListScalingGroupV2ResponseBodyItemsItem struct {
	ActiveStatus   *string `json:"ActiveStatus,omitempty" xml:"ActiveStatus,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HostGroupBizId *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ScalingGroupId *string `json:"ScalingGroupId,omitempty" xml:"ScalingGroupId,omitempty"`
	ScalingInMode  *string `json:"ScalingInMode,omitempty" xml:"ScalingInMode,omitempty"`
	ScalingMaxSize *int32  `json:"ScalingMaxSize,omitempty" xml:"ScalingMaxSize,omitempty"`
	ScalingMinSize *int32  `json:"ScalingMinSize,omitempty" xml:"ScalingMinSize,omitempty"`
}

func (s ListScalingGroupV2ResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2ResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetActiveStatus(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ActiveStatus = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetDescription(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.Description = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetHostGroupBizId(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.HostGroupBizId = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetName(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.Name = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetScalingGroupId(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ScalingGroupId = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetScalingInMode(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ScalingInMode = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetScalingMaxSize(v int32) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ScalingMaxSize = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetScalingMinSize(v int32) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ScalingMinSize = &v
	return s
}

type ListScalingGroupV2Response struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListScalingGroupV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListScalingGroupV2Response) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2Response) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2Response) SetHeaders(v map[string]*string) *ListScalingGroupV2Response {
	s.Headers = v
	return s
}

func (s *ListScalingGroupV2Response) SetStatusCode(v int32) *ListScalingGroupV2Response {
	s.StatusCode = &v
	return s
}

func (s *ListScalingGroupV2Response) SetBody(v *ListScalingGroupV2ResponseBody) *ListScalingGroupV2Response {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	NextToken       *string                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RegionId        *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId      []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerId *int64                        `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType    *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag             []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceOwnerId(v int64) *ListTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	NextToken    *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ModifyClusterNameRequest struct {
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ModifyClusterNameRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterNameRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterNameRequest) SetId(v string) *ModifyClusterNameRequest {
	s.Id = &v
	return s
}

func (s *ModifyClusterNameRequest) SetName(v string) *ModifyClusterNameRequest {
	s.Name = &v
	return s
}

func (s *ModifyClusterNameRequest) SetRegionId(v string) *ModifyClusterNameRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterNameRequest) SetResourceOwnerId(v int64) *ModifyClusterNameRequest {
	s.ResourceOwnerId = &v
	return s
}

type ModifyClusterNameResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterNameResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterNameResponseBody) SetRequestId(v string) *ModifyClusterNameResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterNameResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyClusterNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyClusterNameResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterNameResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterNameResponse) SetHeaders(v map[string]*string) *ModifyClusterNameResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterNameResponse) SetStatusCode(v int32) *ModifyClusterNameResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClusterNameResponse) SetBody(v *ModifyClusterNameResponseBody) *ModifyClusterNameResponse {
	s.Body = v
	return s
}

type ModifyClusterServiceConfigRequest struct {
	ClusterId            *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment              *string   `json:"Comment,omitempty" xml:"Comment,omitempty"`
	ConfigParams         *string   `json:"ConfigParams,omitempty" xml:"ConfigParams,omitempty"`
	ConfigType           *string   `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	CustomConfigParams   *string   `json:"CustomConfigParams,omitempty" xml:"CustomConfigParams,omitempty"`
	GatewayClusterIdList []*string `json:"GatewayClusterIdList,omitempty" xml:"GatewayClusterIdList,omitempty" type:"Repeated"`
	GroupId              *string   `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HostInstanceId       *string   `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	RefreshHostConfig    *bool     `json:"RefreshHostConfig,omitempty" xml:"RefreshHostConfig,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceName          *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ModifyClusterServiceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterServiceConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterServiceConfigRequest) SetClusterId(v string) *ModifyClusterServiceConfigRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetComment(v string) *ModifyClusterServiceConfigRequest {
	s.Comment = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetConfigParams(v string) *ModifyClusterServiceConfigRequest {
	s.ConfigParams = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetConfigType(v string) *ModifyClusterServiceConfigRequest {
	s.ConfigType = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetCustomConfigParams(v string) *ModifyClusterServiceConfigRequest {
	s.CustomConfigParams = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetGatewayClusterIdList(v []*string) *ModifyClusterServiceConfigRequest {
	s.GatewayClusterIdList = v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetGroupId(v string) *ModifyClusterServiceConfigRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetHostInstanceId(v string) *ModifyClusterServiceConfigRequest {
	s.HostInstanceId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetRefreshHostConfig(v bool) *ModifyClusterServiceConfigRequest {
	s.RefreshHostConfig = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetRegionId(v string) *ModifyClusterServiceConfigRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetResourceOwnerId(v int64) *ModifyClusterServiceConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetServiceName(v string) *ModifyClusterServiceConfigRequest {
	s.ServiceName = &v
	return s
}

type ModifyClusterServiceConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterServiceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterServiceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterServiceConfigResponseBody) SetRequestId(v string) *ModifyClusterServiceConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterServiceConfigResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyClusterServiceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyClusterServiceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterServiceConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterServiceConfigResponse) SetHeaders(v map[string]*string) *ModifyClusterServiceConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterServiceConfigResponse) SetStatusCode(v int32) *ModifyClusterServiceConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClusterServiceConfigResponse) SetBody(v *ModifyClusterServiceConfigResponseBody) *ModifyClusterServiceConfigResponse {
	s.Body = v
	return s
}

type ModifyClusterTemplateRequest struct {
	AutoRenew              *bool                                          `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	BizId                  *string                                        `json:"BizId,omitempty" xml:"BizId,omitempty"`
	BootstrapAction        []*ModifyClusterTemplateRequestBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
	ChargeType             *string                                        `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClusterType            *string                                        `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Config                 []*ModifyClusterTemplateRequestConfig          `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Configurations         *string                                        `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	DataDiskEncrypted      *bool                                          `json:"DataDiskEncrypted,omitempty" xml:"DataDiskEncrypted,omitempty"`
	DataDiskKMSKeyId       *string                                        `json:"DataDiskKMSKeyId,omitempty" xml:"DataDiskKMSKeyId,omitempty"`
	DepositType            *string                                        `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	EasEnable              *bool                                          `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	EmrVer                 *string                                        `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	HighAvailabilityEnable *bool                                          `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	HostGroup              []*ModifyClusterTemplateRequestHostGroup       `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
	InitCustomHiveMetaDb   *bool                                          `json:"InitCustomHiveMetaDb,omitempty" xml:"InitCustomHiveMetaDb,omitempty"`
	InstanceGeneration     *string                                        `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	IoOptimized            *bool                                          `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	IsOpenPublicIp         *bool                                          `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	KeyPairName            *string                                        `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	LogPath                *string                                        `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	MachineType            *string                                        `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MasterPwd              *string                                        `json:"MasterPwd,omitempty" xml:"MasterPwd,omitempty"`
	MetaStoreConf          *string                                        `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	MetaStoreType          *string                                        `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	NetType                *string                                        `json:"NetType,omitempty" xml:"NetType,omitempty"`
	OptionSoftWareList     []*string                                      `json:"OptionSoftWareList,omitempty" xml:"OptionSoftWareList,omitempty" type:"Repeated"`
	Period                 *int32                                         `json:"Period,omitempty" xml:"Period,omitempty"`
	RegionId               *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId        *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId        *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SecurityGroupId        *string                                        `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName      *string                                        `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	SshEnable              *bool                                          `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	Tag                    []*ModifyClusterTemplateRequestTag             `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	TemplateName           *string                                        `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	UseCustomHiveMetaDb    *bool                                          `json:"UseCustomHiveMetaDb,omitempty" xml:"UseCustomHiveMetaDb,omitempty"`
	UseLocalMetaDb         *bool                                          `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	UserDefinedEmrEcsRole  *string                                        `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	VSwitchId              *string                                        `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	// VPC ID。
	VpcId  *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ModifyClusterTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequest) SetAutoRenew(v bool) *ModifyClusterTemplateRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetBizId(v string) *ModifyClusterTemplateRequest {
	s.BizId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetBootstrapAction(v []*ModifyClusterTemplateRequestBootstrapAction) *ModifyClusterTemplateRequest {
	s.BootstrapAction = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetChargeType(v string) *ModifyClusterTemplateRequest {
	s.ChargeType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetClusterType(v string) *ModifyClusterTemplateRequest {
	s.ClusterType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetConfig(v []*ModifyClusterTemplateRequestConfig) *ModifyClusterTemplateRequest {
	s.Config = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetConfigurations(v string) *ModifyClusterTemplateRequest {
	s.Configurations = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetDataDiskEncrypted(v bool) *ModifyClusterTemplateRequest {
	s.DataDiskEncrypted = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetDataDiskKMSKeyId(v string) *ModifyClusterTemplateRequest {
	s.DataDiskKMSKeyId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetDepositType(v string) *ModifyClusterTemplateRequest {
	s.DepositType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetEasEnable(v bool) *ModifyClusterTemplateRequest {
	s.EasEnable = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetEmrVer(v string) *ModifyClusterTemplateRequest {
	s.EmrVer = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetHighAvailabilityEnable(v bool) *ModifyClusterTemplateRequest {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetHostGroup(v []*ModifyClusterTemplateRequestHostGroup) *ModifyClusterTemplateRequest {
	s.HostGroup = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetInitCustomHiveMetaDb(v bool) *ModifyClusterTemplateRequest {
	s.InitCustomHiveMetaDb = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetInstanceGeneration(v string) *ModifyClusterTemplateRequest {
	s.InstanceGeneration = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetIoOptimized(v bool) *ModifyClusterTemplateRequest {
	s.IoOptimized = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetIsOpenPublicIp(v bool) *ModifyClusterTemplateRequest {
	s.IsOpenPublicIp = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetKeyPairName(v string) *ModifyClusterTemplateRequest {
	s.KeyPairName = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetLogPath(v string) *ModifyClusterTemplateRequest {
	s.LogPath = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetMachineType(v string) *ModifyClusterTemplateRequest {
	s.MachineType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetMasterPwd(v string) *ModifyClusterTemplateRequest {
	s.MasterPwd = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetMetaStoreConf(v string) *ModifyClusterTemplateRequest {
	s.MetaStoreConf = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetMetaStoreType(v string) *ModifyClusterTemplateRequest {
	s.MetaStoreType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetNetType(v string) *ModifyClusterTemplateRequest {
	s.NetType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetOptionSoftWareList(v []*string) *ModifyClusterTemplateRequest {
	s.OptionSoftWareList = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetPeriod(v int32) *ModifyClusterTemplateRequest {
	s.Period = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetRegionId(v string) *ModifyClusterTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetResourceGroupId(v string) *ModifyClusterTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetResourceOwnerId(v int64) *ModifyClusterTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetSecurityGroupId(v string) *ModifyClusterTemplateRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetSecurityGroupName(v string) *ModifyClusterTemplateRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetSshEnable(v bool) *ModifyClusterTemplateRequest {
	s.SshEnable = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetTag(v []*ModifyClusterTemplateRequestTag) *ModifyClusterTemplateRequest {
	s.Tag = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetTemplateName(v string) *ModifyClusterTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetUseCustomHiveMetaDb(v bool) *ModifyClusterTemplateRequest {
	s.UseCustomHiveMetaDb = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetUseLocalMetaDb(v bool) *ModifyClusterTemplateRequest {
	s.UseLocalMetaDb = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetUserDefinedEmrEcsRole(v string) *ModifyClusterTemplateRequest {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetVSwitchId(v string) *ModifyClusterTemplateRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetVpcId(v string) *ModifyClusterTemplateRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetZoneId(v string) *ModifyClusterTemplateRequest {
	s.ZoneId = &v
	return s
}

type ModifyClusterTemplateRequestBootstrapAction struct {
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s ModifyClusterTemplateRequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetArg(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetExecutionFailStrategy(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetExecutionMoment(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetExecutionTarget(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetName(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.Name = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetPath(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.Path = &v
	return s
}

type ModifyClusterTemplateRequestConfig struct {
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ModifyClusterTemplateRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequestConfig) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequestConfig) SetConfigKey(v string) *ModifyClusterTemplateRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetConfigValue(v string) *ModifyClusterTemplateRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetEncrypt(v string) *ModifyClusterTemplateRequestConfig {
	s.Encrypt = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetFileName(v string) *ModifyClusterTemplateRequestConfig {
	s.FileName = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetReplace(v string) *ModifyClusterTemplateRequestConfig {
	s.Replace = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetServiceName(v string) *ModifyClusterTemplateRequestConfig {
	s.ServiceName = &v
	return s
}

type ModifyClusterTemplateRequestHostGroup struct {
	AutoRenew          *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClusterId          *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment            *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateType         *string `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DiskCapacity       *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	DiskCount          *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	DiskType           *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId        *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName      *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupType      *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MultiInstanceTypes *string `json:"MultiInstanceTypes,omitempty" xml:"MultiInstanceTypes,omitempty"`
	NodeCount          *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	SysDiskCapacity    *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	SysDiskType        *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	VSwitchId          *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
}

func (s ModifyClusterTemplateRequestHostGroup) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequestHostGroup) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequestHostGroup) SetAutoRenew(v bool) *ModifyClusterTemplateRequestHostGroup {
	s.AutoRenew = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetChargeType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.ChargeType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetClusterId(v string) *ModifyClusterTemplateRequestHostGroup {
	s.ClusterId = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetComment(v string) *ModifyClusterTemplateRequestHostGroup {
	s.Comment = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetCreateType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.CreateType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetDiskCapacity(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetDiskCount(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.DiskCount = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetDiskType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.DiskType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetHostGroupId(v string) *ModifyClusterTemplateRequestHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetHostGroupName(v string) *ModifyClusterTemplateRequestHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetHostGroupType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetInstanceType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.InstanceType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetMultiInstanceTypes(v string) *ModifyClusterTemplateRequestHostGroup {
	s.MultiInstanceTypes = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetNodeCount(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.NodeCount = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetPeriod(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.Period = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetSysDiskCapacity(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetSysDiskType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetVSwitchId(v string) *ModifyClusterTemplateRequestHostGroup {
	s.VSwitchId = &v
	return s
}

type ModifyClusterTemplateRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyClusterTemplateRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequestTag) SetKey(v string) *ModifyClusterTemplateRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyClusterTemplateRequestTag) SetValue(v string) *ModifyClusterTemplateRequestTag {
	s.Value = &v
	return s
}

type ModifyClusterTemplateResponseBody struct {
	ClusterTemplateId *string `json:"ClusterTemplateId,omitempty" xml:"ClusterTemplateId,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateResponseBody) SetClusterTemplateId(v string) *ModifyClusterTemplateResponseBody {
	s.ClusterTemplateId = &v
	return s
}

func (s *ModifyClusterTemplateResponseBody) SetRequestId(v string) *ModifyClusterTemplateResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterTemplateResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyClusterTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyClusterTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateResponse) SetHeaders(v map[string]*string) *ModifyClusterTemplateResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterTemplateResponse) SetStatusCode(v int32) *ModifyClusterTemplateResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyClusterTemplateResponse) SetBody(v *ModifyClusterTemplateResponseBody) *ModifyClusterTemplateResponse {
	s.Body = v
	return s
}

type ModifyFlowCategoryRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentId  *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowCategoryRequest) SetId(v string) *ModifyFlowCategoryRequest {
	s.Id = &v
	return s
}

func (s *ModifyFlowCategoryRequest) SetName(v string) *ModifyFlowCategoryRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowCategoryRequest) SetParentId(v string) *ModifyFlowCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *ModifyFlowCategoryRequest) SetProjectId(v string) *ModifyFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowCategoryRequest) SetRegionId(v string) *ModifyFlowCategoryRequest {
	s.RegionId = &v
	return s
}

type ModifyFlowCategoryResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowCategoryResponseBody) SetData(v bool) *ModifyFlowCategoryResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyFlowCategoryResponseBody) SetRequestId(v string) *ModifyFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

type ModifyFlowCategoryResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowCategoryResponse) SetHeaders(v map[string]*string) *ModifyFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowCategoryResponse) SetStatusCode(v int32) *ModifyFlowCategoryResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFlowCategoryResponse) SetBody(v *ModifyFlowCategoryResponseBody) *ModifyFlowCategoryResponse {
	s.Body = v
	return s
}

type ModifyFlowForWebRequest struct {
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	Graph                   *string `json:"Graph,omitempty" xml:"Graph,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Id                      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Lifecycle               *string `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	LogArchiveLocation      *string `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Namespace               *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ParentCategory          *string `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
	ParentFlowList          *string `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty"`
	Periodic                *bool   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyFlowForWebRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowForWebRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowForWebRequest) SetAlertConf(v string) *ModifyFlowForWebRequest {
	s.AlertConf = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetAlertDingDingGroupBizId(v string) *ModifyFlowForWebRequest {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetAlertUserGroupBizId(v string) *ModifyFlowForWebRequest {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetClusterId(v string) *ModifyFlowForWebRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetCreateCluster(v bool) *ModifyFlowForWebRequest {
	s.CreateCluster = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetCronExpr(v string) *ModifyFlowForWebRequest {
	s.CronExpr = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetDescription(v string) *ModifyFlowForWebRequest {
	s.Description = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetEndSchedule(v int64) *ModifyFlowForWebRequest {
	s.EndSchedule = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetGraph(v string) *ModifyFlowForWebRequest {
	s.Graph = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetHostName(v string) *ModifyFlowForWebRequest {
	s.HostName = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetId(v string) *ModifyFlowForWebRequest {
	s.Id = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetLifecycle(v string) *ModifyFlowForWebRequest {
	s.Lifecycle = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetLogArchiveLocation(v string) *ModifyFlowForWebRequest {
	s.LogArchiveLocation = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetName(v string) *ModifyFlowForWebRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetNamespace(v string) *ModifyFlowForWebRequest {
	s.Namespace = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetParentCategory(v string) *ModifyFlowForWebRequest {
	s.ParentCategory = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetParentFlowList(v string) *ModifyFlowForWebRequest {
	s.ParentFlowList = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetPeriodic(v bool) *ModifyFlowForWebRequest {
	s.Periodic = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetProjectId(v string) *ModifyFlowForWebRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetRegionId(v string) *ModifyFlowForWebRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetStartSchedule(v int64) *ModifyFlowForWebRequest {
	s.StartSchedule = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetStatus(v string) *ModifyFlowForWebRequest {
	s.Status = &v
	return s
}

type ModifyFlowForWebResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFlowForWebResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowForWebResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowForWebResponseBody) SetData(v bool) *ModifyFlowForWebResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyFlowForWebResponseBody) SetRequestId(v string) *ModifyFlowForWebResponseBody {
	s.RequestId = &v
	return s
}

type ModifyFlowForWebResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyFlowForWebResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyFlowForWebResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowForWebResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowForWebResponse) SetHeaders(v map[string]*string) *ModifyFlowForWebResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowForWebResponse) SetStatusCode(v int32) *ModifyFlowForWebResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFlowForWebResponse) SetBody(v *ModifyFlowForWebResponseBody) *ModifyFlowForWebResponse {
	s.Body = v
	return s
}

type ModifyFlowProjectRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId   *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ModifyFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectRequest) SetDescription(v string) *ModifyFlowProjectRequest {
	s.Description = &v
	return s
}

func (s *ModifyFlowProjectRequest) SetName(v string) *ModifyFlowProjectRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowProjectRequest) SetProjectId(v string) *ModifyFlowProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowProjectRequest) SetRegionId(v string) *ModifyFlowProjectRequest {
	s.RegionId = &v
	return s
}

type ModifyFlowProjectResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectResponseBody) SetData(v bool) *ModifyFlowProjectResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyFlowProjectResponseBody) SetRequestId(v string) *ModifyFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

type ModifyFlowProjectResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectResponse) SetHeaders(v map[string]*string) *ModifyFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowProjectResponse) SetStatusCode(v int32) *ModifyFlowProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFlowProjectResponse) SetBody(v *ModifyFlowProjectResponseBody) *ModifyFlowProjectResponse {
	s.Body = v
	return s
}

type ModifyFlowProjectClusterSettingRequest struct {
	ClusterId    *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DefaultQueue *string   `json:"DefaultQueue,omitempty" xml:"DefaultQueue,omitempty"`
	DefaultUser  *string   `json:"DefaultUser,omitempty" xml:"DefaultUser,omitempty"`
	HostList     []*string `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Repeated"`
	ProjectId    *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	QueueList    []*string `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Repeated"`
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UserList     []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s ModifyFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectClusterSettingRequest) SetClusterId(v string) *ModifyFlowProjectClusterSettingRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetDefaultQueue(v string) *ModifyFlowProjectClusterSettingRequest {
	s.DefaultQueue = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetDefaultUser(v string) *ModifyFlowProjectClusterSettingRequest {
	s.DefaultUser = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetHostList(v []*string) *ModifyFlowProjectClusterSettingRequest {
	s.HostList = v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetProjectId(v string) *ModifyFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetQueueList(v []*string) *ModifyFlowProjectClusterSettingRequest {
	s.QueueList = v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetRegionId(v string) *ModifyFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetUserList(v []*string) *ModifyFlowProjectClusterSettingRequest {
	s.UserList = v
	return s
}

type ModifyFlowProjectClusterSettingResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectClusterSettingResponseBody) SetData(v bool) *ModifyFlowProjectClusterSettingResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingResponseBody) SetRequestId(v string) *ModifyFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

type ModifyFlowProjectClusterSettingResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *ModifyFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowProjectClusterSettingResponse) SetStatusCode(v int32) *ModifyFlowProjectClusterSettingResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingResponse) SetBody(v *ModifyFlowProjectClusterSettingResponseBody) *ModifyFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type ModifyResourcePoolRequest struct {
	Active          *bool                              `json:"Active,omitempty" xml:"Active,omitempty"`
	ClusterId       *string                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Config          []*ModifyResourcePoolRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Id              *string                            `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string                            `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId        *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Yarnsiteconfig  *string                            `json:"Yarnsiteconfig,omitempty" xml:"Yarnsiteconfig,omitempty"`
}

func (s ModifyResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolRequest) SetActive(v bool) *ModifyResourcePoolRequest {
	s.Active = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetClusterId(v string) *ModifyResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetConfig(v []*ModifyResourcePoolRequestConfig) *ModifyResourcePoolRequest {
	s.Config = v
	return s
}

func (s *ModifyResourcePoolRequest) SetId(v string) *ModifyResourcePoolRequest {
	s.Id = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetName(v string) *ModifyResourcePoolRequest {
	s.Name = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetRegionId(v string) *ModifyResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetResourceOwnerId(v int64) *ModifyResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetYarnsiteconfig(v string) *ModifyResourcePoolRequest {
	s.Yarnsiteconfig = &v
	return s
}

type ModifyResourcePoolRequestConfig struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s ModifyResourcePoolRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolRequestConfig) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolRequestConfig) SetCategory(v string) *ModifyResourcePoolRequestConfig {
	s.Category = &v
	return s
}

func (s *ModifyResourcePoolRequestConfig) SetConfigKey(v string) *ModifyResourcePoolRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *ModifyResourcePoolRequestConfig) SetConfigValue(v string) *ModifyResourcePoolRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *ModifyResourcePoolRequestConfig) SetId(v string) *ModifyResourcePoolRequestConfig {
	s.Id = &v
	return s
}

func (s *ModifyResourcePoolRequestConfig) SetNote(v string) *ModifyResourcePoolRequestConfig {
	s.Note = &v
	return s
}

type ModifyResourcePoolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolResponseBody) SetRequestId(v string) *ModifyResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourcePoolResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolResponse) SetHeaders(v map[string]*string) *ModifyResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourcePoolResponse) SetStatusCode(v int32) *ModifyResourcePoolResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyResourcePoolResponse) SetBody(v *ModifyResourcePoolResponseBody) *ModifyResourcePoolResponse {
	s.Body = v
	return s
}

type ModifyResourcePoolSchedulerTypeRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SchedulerType   *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s ModifyResourcePoolSchedulerTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolSchedulerTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolSchedulerTypeRequest) SetClusterId(v string) *ModifyResourcePoolSchedulerTypeRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeRequest) SetRegionId(v string) *ModifyResourcePoolSchedulerTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeRequest) SetResourceOwnerId(v int64) *ModifyResourcePoolSchedulerTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeRequest) SetSchedulerType(v string) *ModifyResourcePoolSchedulerTypeRequest {
	s.SchedulerType = &v
	return s
}

type ModifyResourcePoolSchedulerTypeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourcePoolSchedulerTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolSchedulerTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolSchedulerTypeResponseBody) SetRequestId(v string) *ModifyResourcePoolSchedulerTypeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourcePoolSchedulerTypeResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyResourcePoolSchedulerTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyResourcePoolSchedulerTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolSchedulerTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolSchedulerTypeResponse) SetHeaders(v map[string]*string) *ModifyResourcePoolSchedulerTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeResponse) SetStatusCode(v int32) *ModifyResourcePoolSchedulerTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeResponse) SetBody(v *ModifyResourcePoolSchedulerTypeResponseBody) *ModifyResourcePoolSchedulerTypeResponse {
	s.Body = v
	return s
}

type ModifyResourceQueueRequest struct {
	ClusterId       *string                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Config          []*ModifyResourceQueueRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Id              *string                             `json:"Id,omitempty" xml:"Id,omitempty"`
	Leaf            *bool                               `json:"Leaf,omitempty" xml:"Leaf,omitempty"`
	Name            *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentQueueId   *int64                              `json:"ParentQueueId,omitempty" xml:"ParentQueueId,omitempty"`
	QualifiedName   *string                             `json:"QualifiedName,omitempty" xml:"QualifiedName,omitempty"`
	RegionId        *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourcePoolId  *int64                              `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
}

func (s ModifyResourceQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceQueueRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourceQueueRequest) SetClusterId(v string) *ModifyResourceQueueRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetConfig(v []*ModifyResourceQueueRequestConfig) *ModifyResourceQueueRequest {
	s.Config = v
	return s
}

func (s *ModifyResourceQueueRequest) SetId(v string) *ModifyResourceQueueRequest {
	s.Id = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetLeaf(v bool) *ModifyResourceQueueRequest {
	s.Leaf = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetName(v string) *ModifyResourceQueueRequest {
	s.Name = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetParentQueueId(v int64) *ModifyResourceQueueRequest {
	s.ParentQueueId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetQualifiedName(v string) *ModifyResourceQueueRequest {
	s.QualifiedName = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetRegionId(v string) *ModifyResourceQueueRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetResourceOwnerId(v int64) *ModifyResourceQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetResourcePoolId(v int64) *ModifyResourceQueueRequest {
	s.ResourcePoolId = &v
	return s
}

type ModifyResourceQueueRequestConfig struct {
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
}

func (s ModifyResourceQueueRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceQueueRequestConfig) GoString() string {
	return s.String()
}

func (s *ModifyResourceQueueRequestConfig) SetCategory(v string) *ModifyResourceQueueRequestConfig {
	s.Category = &v
	return s
}

func (s *ModifyResourceQueueRequestConfig) SetConfigKey(v string) *ModifyResourceQueueRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *ModifyResourceQueueRequestConfig) SetConfigValue(v string) *ModifyResourceQueueRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *ModifyResourceQueueRequestConfig) SetId(v int64) *ModifyResourceQueueRequestConfig {
	s.Id = &v
	return s
}

func (s *ModifyResourceQueueRequestConfig) SetNote(v string) *ModifyResourceQueueRequestConfig {
	s.Note = &v
	return s
}

type ModifyResourceQueueResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourceQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceQueueResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourceQueueResponseBody) SetRequestId(v string) *ModifyResourceQueueResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourceQueueResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyResourceQueueResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyResourceQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceQueueResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourceQueueResponse) SetHeaders(v map[string]*string) *ModifyResourceQueueResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourceQueueResponse) SetStatusCode(v int32) *ModifyResourceQueueResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyResourceQueueResponse) SetBody(v *ModifyResourceQueueResponseBody) *ModifyResourceQueueResponse {
	s.Body = v
	return s
}

type ModifyScalingConfigItemV2Request struct {
	ConfigItemBizId       *string `json:"ConfigItemBizId,omitempty" xml:"ConfigItemBizId,omitempty"`
	ConfigItemInformation *string `json:"ConfigItemInformation,omitempty" xml:"ConfigItemInformation,omitempty"`
	ConfigItemType        *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId       *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingGroupBizId     *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s ModifyScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *ModifyScalingConfigItemV2Request) SetConfigItemBizId(v string) *ModifyScalingConfigItemV2Request {
	s.ConfigItemBizId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetConfigItemInformation(v string) *ModifyScalingConfigItemV2Request {
	s.ConfigItemInformation = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetConfigItemType(v string) *ModifyScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetRegionId(v string) *ModifyScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetResourceGroupId(v string) *ModifyScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetResourceOwnerId(v int64) *ModifyScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetScalingGroupBizId(v string) *ModifyScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type ModifyScalingConfigItemV2ResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScalingConfigItemV2ResponseBody) SetData(v bool) *ModifyScalingConfigItemV2ResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyScalingConfigItemV2ResponseBody) SetRequestId(v string) *ModifyScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

type ModifyScalingConfigItemV2Response struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *ModifyScalingConfigItemV2Response) SetHeaders(v map[string]*string) *ModifyScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *ModifyScalingConfigItemV2Response) SetStatusCode(v int32) *ModifyScalingConfigItemV2Response {
	s.StatusCode = &v
	return s
}

func (s *ModifyScalingConfigItemV2Response) SetBody(v *ModifyScalingConfigItemV2ResponseBody) *ModifyScalingConfigItemV2Response {
	s.Body = v
	return s
}

type ModifyScalingGroupV2Request struct {
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s ModifyScalingGroupV2Request) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingGroupV2Request) GoString() string {
	return s.String()
}

func (s *ModifyScalingGroupV2Request) SetDescription(v string) *ModifyScalingGroupV2Request {
	s.Description = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetName(v string) *ModifyScalingGroupV2Request {
	s.Name = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetRegionId(v string) *ModifyScalingGroupV2Request {
	s.RegionId = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetResourceGroupId(v string) *ModifyScalingGroupV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetResourceOwnerId(v int64) *ModifyScalingGroupV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetScalingGroupBizId(v string) *ModifyScalingGroupV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type ModifyScalingGroupV2ResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyScalingGroupV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingGroupV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScalingGroupV2ResponseBody) SetData(v bool) *ModifyScalingGroupV2ResponseBody {
	s.Data = &v
	return s
}

func (s *ModifyScalingGroupV2ResponseBody) SetRequestId(v string) *ModifyScalingGroupV2ResponseBody {
	s.RequestId = &v
	return s
}

type ModifyScalingGroupV2Response struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyScalingGroupV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyScalingGroupV2Response) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingGroupV2Response) GoString() string {
	return s.String()
}

func (s *ModifyScalingGroupV2Response) SetHeaders(v map[string]*string) *ModifyScalingGroupV2Response {
	s.Headers = v
	return s
}

func (s *ModifyScalingGroupV2Response) SetStatusCode(v int32) *ModifyScalingGroupV2Response {
	s.StatusCode = &v
	return s
}

func (s *ModifyScalingGroupV2Response) SetBody(v *ModifyScalingGroupV2ResponseBody) *ModifyScalingGroupV2Response {
	s.Body = v
	return s
}

type RefreshClusterResourcePoolRequest struct {
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourcePoolId  *int64  `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
}

func (s RefreshClusterResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshClusterResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *RefreshClusterResourcePoolRequest) SetClusterId(v string) *RefreshClusterResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *RefreshClusterResourcePoolRequest) SetRegionId(v string) *RefreshClusterResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *RefreshClusterResourcePoolRequest) SetResourceOwnerId(v int64) *RefreshClusterResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RefreshClusterResourcePoolRequest) SetResourcePoolId(v int64) *RefreshClusterResourcePoolRequest {
	s.ResourcePoolId = &v
	return s
}

type RefreshClusterResourcePoolResponseBody struct {
	OperationId        *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WorkFlowInstanceId *string `json:"WorkFlowInstanceId,omitempty" xml:"WorkFlowInstanceId,omitempty"`
}

func (s RefreshClusterResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshClusterResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshClusterResourcePoolResponseBody) SetOperationId(v string) *RefreshClusterResourcePoolResponseBody {
	s.OperationId = &v
	return s
}

func (s *RefreshClusterResourcePoolResponseBody) SetRequestId(v string) *RefreshClusterResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefreshClusterResourcePoolResponseBody) SetWorkFlowInstanceId(v string) *RefreshClusterResourcePoolResponseBody {
	s.WorkFlowInstanceId = &v
	return s
}

type RefreshClusterResourcePoolResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RefreshClusterResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RefreshClusterResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshClusterResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *RefreshClusterResourcePoolResponse) SetHeaders(v map[string]*string) *RefreshClusterResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *RefreshClusterResourcePoolResponse) SetStatusCode(v int32) *RefreshClusterResourcePoolResponse {
	s.StatusCode = &v
	return s
}

func (s *RefreshClusterResourcePoolResponse) SetBody(v *RefreshClusterResourcePoolResponseBody) *RefreshClusterResourcePoolResponse {
	s.Body = v
	return s
}

type ReleaseClusterRequest struct {
	ForceRelease    *bool   `json:"ForceRelease,omitempty" xml:"ForceRelease,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ReleaseClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterRequest) GoString() string {
	return s.String()
}

func (s *ReleaseClusterRequest) SetForceRelease(v bool) *ReleaseClusterRequest {
	s.ForceRelease = &v
	return s
}

func (s *ReleaseClusterRequest) SetId(v string) *ReleaseClusterRequest {
	s.Id = &v
	return s
}

func (s *ReleaseClusterRequest) SetRegionId(v string) *ReleaseClusterRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseClusterRequest) SetResourceOwnerId(v int64) *ReleaseClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

type ReleaseClusterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseClusterResponseBody) SetRequestId(v string) *ReleaseClusterResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseClusterResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseClusterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterResponse) GoString() string {
	return s.String()
}

func (s *ReleaseClusterResponse) SetHeaders(v map[string]*string) *ReleaseClusterResponse {
	s.Headers = v
	return s
}

func (s *ReleaseClusterResponse) SetStatusCode(v int32) *ReleaseClusterResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseClusterResponse) SetBody(v *ReleaseClusterResponseBody) *ReleaseClusterResponse {
	s.Body = v
	return s
}

type ReleaseClusterHostGroupRequest struct {
	ClusterId                  *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DecommissionTimeout        *int32  `json:"DecommissionTimeout,omitempty" xml:"DecommissionTimeout,omitempty"`
	EnableGracefulDecommission *bool   `json:"EnableGracefulDecommission,omitempty" xml:"EnableGracefulDecommission,omitempty"`
	HostGroupId                *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceIdList             *string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty"`
	RegionId                   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ReleaseNumber              *int32  `json:"ReleaseNumber,omitempty" xml:"ReleaseNumber,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
}

func (s ReleaseClusterHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterHostGroupRequest) GoString() string {
	return s.String()
}

func (s *ReleaseClusterHostGroupRequest) SetClusterId(v string) *ReleaseClusterHostGroupRequest {
	s.ClusterId = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetDecommissionTimeout(v int32) *ReleaseClusterHostGroupRequest {
	s.DecommissionTimeout = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetEnableGracefulDecommission(v bool) *ReleaseClusterHostGroupRequest {
	s.EnableGracefulDecommission = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetHostGroupId(v string) *ReleaseClusterHostGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetInstanceIdList(v string) *ReleaseClusterHostGroupRequest {
	s.InstanceIdList = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetRegionId(v string) *ReleaseClusterHostGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetReleaseNumber(v int32) *ReleaseClusterHostGroupRequest {
	s.ReleaseNumber = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetResourceOwnerId(v int64) *ReleaseClusterHostGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

type ReleaseClusterHostGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseClusterHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseClusterHostGroupResponseBody) SetRequestId(v string) *ReleaseClusterHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseClusterHostGroupResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ReleaseClusterHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ReleaseClusterHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterHostGroupResponse) GoString() string {
	return s.String()
}

func (s *ReleaseClusterHostGroupResponse) SetHeaders(v map[string]*string) *ReleaseClusterHostGroupResponse {
	s.Headers = v
	return s
}

func (s *ReleaseClusterHostGroupResponse) SetStatusCode(v int32) *ReleaseClusterHostGroupResponse {
	s.StatusCode = &v
	return s
}

func (s *ReleaseClusterHostGroupResponse) SetBody(v *ReleaseClusterHostGroupResponseBody) *ReleaseClusterHostGroupResponse {
	s.Body = v
	return s
}

type RemoveScalingConfigItemV2Request struct {
	ConfigItemBizId   *string `json:"ConfigItemBizId,omitempty" xml:"ConfigItemBizId,omitempty"`
	ConfigItemType    *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s RemoveScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s RemoveScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *RemoveScalingConfigItemV2Request) SetConfigItemBizId(v string) *RemoveScalingConfigItemV2Request {
	s.ConfigItemBizId = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetConfigItemType(v string) *RemoveScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetRegionId(v string) *RemoveScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetResourceGroupId(v string) *RemoveScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetResourceOwnerId(v int64) *RemoveScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetScalingGroupBizId(v string) *RemoveScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type RemoveScalingConfigItemV2ResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RemoveScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveScalingConfigItemV2ResponseBody) SetData(v bool) *RemoveScalingConfigItemV2ResponseBody {
	s.Data = &v
	return s
}

func (s *RemoveScalingConfigItemV2ResponseBody) SetRequestId(v string) *RemoveScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

type RemoveScalingConfigItemV2Response struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RemoveScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RemoveScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s RemoveScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *RemoveScalingConfigItemV2Response) SetHeaders(v map[string]*string) *RemoveScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *RemoveScalingConfigItemV2Response) SetStatusCode(v int32) *RemoveScalingConfigItemV2Response {
	s.StatusCode = &v
	return s
}

func (s *RemoveScalingConfigItemV2Response) SetBody(v *RemoveScalingConfigItemV2ResponseBody) *RemoveScalingConfigItemV2Response {
	s.Body = v
	return s
}

type RerunFlowRequest struct {
	FlowInstanceId *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ReRunFail      *bool   `json:"ReRunFail,omitempty" xml:"ReRunFail,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s RerunFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s RerunFlowRequest) GoString() string {
	return s.String()
}

func (s *RerunFlowRequest) SetFlowInstanceId(v string) *RerunFlowRequest {
	s.FlowInstanceId = &v
	return s
}

func (s *RerunFlowRequest) SetProjectId(v string) *RerunFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *RerunFlowRequest) SetReRunFail(v bool) *RerunFlowRequest {
	s.ReRunFail = &v
	return s
}

func (s *RerunFlowRequest) SetRegionId(v string) *RerunFlowRequest {
	s.RegionId = &v
	return s
}

type RerunFlowResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RerunFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RerunFlowResponseBody) GoString() string {
	return s.String()
}

func (s *RerunFlowResponseBody) SetData(v bool) *RerunFlowResponseBody {
	s.Data = &v
	return s
}

func (s *RerunFlowResponseBody) SetRequestId(v string) *RerunFlowResponseBody {
	s.RequestId = &v
	return s
}

type RerunFlowResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RerunFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RerunFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s RerunFlowResponse) GoString() string {
	return s.String()
}

func (s *RerunFlowResponse) SetHeaders(v map[string]*string) *RerunFlowResponse {
	s.Headers = v
	return s
}

func (s *RerunFlowResponse) SetStatusCode(v int32) *RerunFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *RerunFlowResponse) SetBody(v *RerunFlowResponseBody) *RerunFlowResponse {
	s.Body = v
	return s
}

type ResizeClusterV2Request struct {
	AutoPayOrder      *bool                                      `json:"AutoPayOrder,omitempty" xml:"AutoPayOrder,omitempty"`
	ClickhouseConf    *string                                    `json:"ClickhouseConf,omitempty" xml:"ClickhouseConf,omitempty"`
	ClusterId         *string                                    `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostComponentInfo []*ResizeClusterV2RequestHostComponentInfo `json:"HostComponentInfo,omitempty" xml:"HostComponentInfo,omitempty" type:"Repeated"`
	HostGroup         []*ResizeClusterV2RequestHostGroup         `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
	IsOpenPublicIp    *bool                                      `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	PromotionInfo     []*ResizeClusterV2RequestPromotionInfo     `json:"PromotionInfo,omitempty" xml:"PromotionInfo,omitempty" type:"Repeated"`
	RegionId          *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VswitchId         *string                                    `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s ResizeClusterV2Request) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2Request) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2Request) SetAutoPayOrder(v bool) *ResizeClusterV2Request {
	s.AutoPayOrder = &v
	return s
}

func (s *ResizeClusterV2Request) SetClickhouseConf(v string) *ResizeClusterV2Request {
	s.ClickhouseConf = &v
	return s
}

func (s *ResizeClusterV2Request) SetClusterId(v string) *ResizeClusterV2Request {
	s.ClusterId = &v
	return s
}

func (s *ResizeClusterV2Request) SetHostComponentInfo(v []*ResizeClusterV2RequestHostComponentInfo) *ResizeClusterV2Request {
	s.HostComponentInfo = v
	return s
}

func (s *ResizeClusterV2Request) SetHostGroup(v []*ResizeClusterV2RequestHostGroup) *ResizeClusterV2Request {
	s.HostGroup = v
	return s
}

func (s *ResizeClusterV2Request) SetIsOpenPublicIp(v bool) *ResizeClusterV2Request {
	s.IsOpenPublicIp = &v
	return s
}

func (s *ResizeClusterV2Request) SetPromotionInfo(v []*ResizeClusterV2RequestPromotionInfo) *ResizeClusterV2Request {
	s.PromotionInfo = v
	return s
}

func (s *ResizeClusterV2Request) SetRegionId(v string) *ResizeClusterV2Request {
	s.RegionId = &v
	return s
}

func (s *ResizeClusterV2Request) SetVswitchId(v string) *ResizeClusterV2Request {
	s.VswitchId = &v
	return s
}

type ResizeClusterV2RequestHostComponentInfo struct {
	ComponentNameList []*string `json:"ComponentNameList,omitempty" xml:"ComponentNameList,omitempty" type:"Repeated"`
	HostName          *string   `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ServiceName       *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ResizeClusterV2RequestHostComponentInfo) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2RequestHostComponentInfo) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2RequestHostComponentInfo) SetComponentNameList(v []*string) *ResizeClusterV2RequestHostComponentInfo {
	s.ComponentNameList = v
	return s
}

func (s *ResizeClusterV2RequestHostComponentInfo) SetHostName(v string) *ResizeClusterV2RequestHostComponentInfo {
	s.HostName = &v
	return s
}

func (s *ResizeClusterV2RequestHostComponentInfo) SetServiceName(v string) *ResizeClusterV2RequestHostComponentInfo {
	s.ServiceName = &v
	return s
}

type ResizeClusterV2RequestHostGroup struct {
	AutoRenew                       *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ChargeType                      *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	ClusterId                       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment                         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateType                      *string `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DiskCapacity                    *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	DiskCount                       *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	DiskType                        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId                     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName                   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupType                   *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	HostKeyPairName                 *string `json:"HostKeyPairName,omitempty" xml:"HostKeyPairName,omitempty"`
	HostPassword                    *string `json:"HostPassword,omitempty" xml:"HostPassword,omitempty"`
	InstanceType                    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	NodeCount                       *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	Period                          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	PrivatePoolOptionsId            *string `json:"PrivatePoolOptionsId,omitempty" xml:"PrivatePoolOptionsId,omitempty"`
	PrivatePoolOptionsMatchCriteria *string `json:"PrivatePoolOptionsMatchCriteria,omitempty" xml:"PrivatePoolOptionsMatchCriteria,omitempty"`
	SysDiskCapacity                 *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	SysDiskType                     *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	VswitchId                       *int32  `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s ResizeClusterV2RequestHostGroup) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2RequestHostGroup) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2RequestHostGroup) SetAutoRenew(v bool) *ResizeClusterV2RequestHostGroup {
	s.AutoRenew = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetChargeType(v string) *ResizeClusterV2RequestHostGroup {
	s.ChargeType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetClusterId(v string) *ResizeClusterV2RequestHostGroup {
	s.ClusterId = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetComment(v string) *ResizeClusterV2RequestHostGroup {
	s.Comment = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetCreateType(v string) *ResizeClusterV2RequestHostGroup {
	s.CreateType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetDiskCapacity(v int32) *ResizeClusterV2RequestHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetDiskCount(v int32) *ResizeClusterV2RequestHostGroup {
	s.DiskCount = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetDiskType(v string) *ResizeClusterV2RequestHostGroup {
	s.DiskType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostGroupId(v string) *ResizeClusterV2RequestHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostGroupName(v string) *ResizeClusterV2RequestHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostGroupType(v string) *ResizeClusterV2RequestHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostKeyPairName(v string) *ResizeClusterV2RequestHostGroup {
	s.HostKeyPairName = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostPassword(v string) *ResizeClusterV2RequestHostGroup {
	s.HostPassword = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetInstanceType(v string) *ResizeClusterV2RequestHostGroup {
	s.InstanceType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetNodeCount(v int32) *ResizeClusterV2RequestHostGroup {
	s.NodeCount = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetPeriod(v int32) *ResizeClusterV2RequestHostGroup {
	s.Period = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetPrivatePoolOptionsId(v string) *ResizeClusterV2RequestHostGroup {
	s.PrivatePoolOptionsId = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetPrivatePoolOptionsMatchCriteria(v string) *ResizeClusterV2RequestHostGroup {
	s.PrivatePoolOptionsMatchCriteria = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetSysDiskCapacity(v int32) *ResizeClusterV2RequestHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetSysDiskType(v string) *ResizeClusterV2RequestHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetVswitchId(v int32) *ResizeClusterV2RequestHostGroup {
	s.VswitchId = &v
	return s
}

type ResizeClusterV2RequestPromotionInfo struct {
	ProductCode         *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
	PromotionOptionCode *string `json:"PromotionOptionCode,omitempty" xml:"PromotionOptionCode,omitempty"`
	PromotionOptionNo   *string `json:"PromotionOptionNo,omitempty" xml:"PromotionOptionNo,omitempty"`
}

func (s ResizeClusterV2RequestPromotionInfo) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2RequestPromotionInfo) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2RequestPromotionInfo) SetProductCode(v string) *ResizeClusterV2RequestPromotionInfo {
	s.ProductCode = &v
	return s
}

func (s *ResizeClusterV2RequestPromotionInfo) SetPromotionOptionCode(v string) *ResizeClusterV2RequestPromotionInfo {
	s.PromotionOptionCode = &v
	return s
}

func (s *ResizeClusterV2RequestPromotionInfo) SetPromotionOptionNo(v string) *ResizeClusterV2RequestPromotionInfo {
	s.PromotionOptionNo = &v
	return s
}

type ResizeClusterV2ResponseBody struct {
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OperationId *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResizeClusterV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2ResponseBody) SetClusterId(v string) *ResizeClusterV2ResponseBody {
	s.ClusterId = &v
	return s
}

func (s *ResizeClusterV2ResponseBody) SetOperationId(v string) *ResizeClusterV2ResponseBody {
	s.OperationId = &v
	return s
}

func (s *ResizeClusterV2ResponseBody) SetRequestId(v string) *ResizeClusterV2ResponseBody {
	s.RequestId = &v
	return s
}

type ResizeClusterV2Response struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResizeClusterV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResizeClusterV2Response) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2Response) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2Response) SetHeaders(v map[string]*string) *ResizeClusterV2Response {
	s.Headers = v
	return s
}

func (s *ResizeClusterV2Response) SetStatusCode(v int32) *ResizeClusterV2Response {
	s.StatusCode = &v
	return s
}

func (s *ResizeClusterV2Response) SetBody(v *ResizeClusterV2ResponseBody) *ResizeClusterV2Response {
	s.Body = v
	return s
}

type ResumeFlowRequest struct {
	FlowInstanceId *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ResumeFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeFlowRequest) GoString() string {
	return s.String()
}

func (s *ResumeFlowRequest) SetFlowInstanceId(v string) *ResumeFlowRequest {
	s.FlowInstanceId = &v
	return s
}

func (s *ResumeFlowRequest) SetProjectId(v string) *ResumeFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *ResumeFlowRequest) SetRegionId(v string) *ResumeFlowRequest {
	s.RegionId = &v
	return s
}

type ResumeFlowResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResumeFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeFlowResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeFlowResponseBody) SetData(v bool) *ResumeFlowResponseBody {
	s.Data = &v
	return s
}

func (s *ResumeFlowResponseBody) SetRequestId(v string) *ResumeFlowResponseBody {
	s.RequestId = &v
	return s
}

type ResumeFlowResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResumeFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResumeFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeFlowResponse) GoString() string {
	return s.String()
}

func (s *ResumeFlowResponse) SetHeaders(v map[string]*string) *ResumeFlowResponse {
	s.Headers = v
	return s
}

func (s *ResumeFlowResponse) SetStatusCode(v int32) *ResumeFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *ResumeFlowResponse) SetBody(v *ResumeFlowResponseBody) *ResumeFlowResponse {
	s.Body = v
	return s
}

type RunClusterServiceActionRequest struct {
	ClusterId                   *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Comment                     *string   `json:"Comment,omitempty" xml:"Comment,omitempty"`
	ComponentNameList           *string   `json:"ComponentNameList,omitempty" xml:"ComponentNameList,omitempty"`
	CustomCommand               *string   `json:"CustomCommand,omitempty" xml:"CustomCommand,omitempty"`
	CustomParams                *string   `json:"CustomParams,omitempty" xml:"CustomParams,omitempty"`
	ExecuteStrategy             *string   `json:"ExecuteStrategy,omitempty" xml:"ExecuteStrategy,omitempty"`
	HostGroupIdList             []*string `json:"HostGroupIdList,omitempty" xml:"HostGroupIdList,omitempty" type:"Repeated"`
	HostIdList                  *string   `json:"HostIdList,omitempty" xml:"HostIdList,omitempty"`
	Interval                    *int64    `json:"Interval,omitempty" xml:"Interval,omitempty"`
	IsRolling                   *bool     `json:"IsRolling,omitempty" xml:"IsRolling,omitempty"`
	NodeCountPerBatch           *int32    `json:"NodeCountPerBatch,omitempty" xml:"NodeCountPerBatch,omitempty"`
	OnlyRestartStaleConfigNodes *bool     `json:"OnlyRestartStaleConfigNodes,omitempty" xml:"OnlyRestartStaleConfigNodes,omitempty"`
	RegionId                    *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId             *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ServiceActionName           *string   `json:"ServiceActionName,omitempty" xml:"ServiceActionName,omitempty"`
	ServiceName                 *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	TotlerateFailCount          *int32    `json:"TotlerateFailCount,omitempty" xml:"TotlerateFailCount,omitempty"`
	TurnOnMaintenanceMode       *bool     `json:"TurnOnMaintenanceMode,omitempty" xml:"TurnOnMaintenanceMode,omitempty"`
}

func (s RunClusterServiceActionRequest) String() string {
	return tea.Prettify(s)
}

func (s RunClusterServiceActionRequest) GoString() string {
	return s.String()
}

func (s *RunClusterServiceActionRequest) SetClusterId(v string) *RunClusterServiceActionRequest {
	s.ClusterId = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetComment(v string) *RunClusterServiceActionRequest {
	s.Comment = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetComponentNameList(v string) *RunClusterServiceActionRequest {
	s.ComponentNameList = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetCustomCommand(v string) *RunClusterServiceActionRequest {
	s.CustomCommand = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetCustomParams(v string) *RunClusterServiceActionRequest {
	s.CustomParams = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetExecuteStrategy(v string) *RunClusterServiceActionRequest {
	s.ExecuteStrategy = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetHostGroupIdList(v []*string) *RunClusterServiceActionRequest {
	s.HostGroupIdList = v
	return s
}

func (s *RunClusterServiceActionRequest) SetHostIdList(v string) *RunClusterServiceActionRequest {
	s.HostIdList = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetInterval(v int64) *RunClusterServiceActionRequest {
	s.Interval = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetIsRolling(v bool) *RunClusterServiceActionRequest {
	s.IsRolling = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetNodeCountPerBatch(v int32) *RunClusterServiceActionRequest {
	s.NodeCountPerBatch = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetOnlyRestartStaleConfigNodes(v bool) *RunClusterServiceActionRequest {
	s.OnlyRestartStaleConfigNodes = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetRegionId(v string) *RunClusterServiceActionRequest {
	s.RegionId = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetResourceOwnerId(v int64) *RunClusterServiceActionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetServiceActionName(v string) *RunClusterServiceActionRequest {
	s.ServiceActionName = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetServiceName(v string) *RunClusterServiceActionRequest {
	s.ServiceName = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetTotlerateFailCount(v int32) *RunClusterServiceActionRequest {
	s.TotlerateFailCount = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetTurnOnMaintenanceMode(v bool) *RunClusterServiceActionRequest {
	s.TurnOnMaintenanceMode = &v
	return s
}

type RunClusterServiceActionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunClusterServiceActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunClusterServiceActionResponseBody) GoString() string {
	return s.String()
}

func (s *RunClusterServiceActionResponseBody) SetRequestId(v string) *RunClusterServiceActionResponseBody {
	s.RequestId = &v
	return s
}

type RunClusterServiceActionResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunClusterServiceActionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunClusterServiceActionResponse) String() string {
	return tea.Prettify(s)
}

func (s RunClusterServiceActionResponse) GoString() string {
	return s.String()
}

func (s *RunClusterServiceActionResponse) SetHeaders(v map[string]*string) *RunClusterServiceActionResponse {
	s.Headers = v
	return s
}

func (s *RunClusterServiceActionResponse) SetStatusCode(v int32) *RunClusterServiceActionResponse {
	s.StatusCode = &v
	return s
}

func (s *RunClusterServiceActionResponse) SetBody(v *RunClusterServiceActionResponseBody) *RunClusterServiceActionResponse {
	s.Body = v
	return s
}

type RunScalingActionV2Request struct {
	ActionParam       *string `json:"ActionParam,omitempty" xml:"ActionParam,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ScalingActionType *string `json:"ScalingActionType,omitempty" xml:"ScalingActionType,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s RunScalingActionV2Request) String() string {
	return tea.Prettify(s)
}

func (s RunScalingActionV2Request) GoString() string {
	return s.String()
}

func (s *RunScalingActionV2Request) SetActionParam(v string) *RunScalingActionV2Request {
	s.ActionParam = &v
	return s
}

func (s *RunScalingActionV2Request) SetRegionId(v string) *RunScalingActionV2Request {
	s.RegionId = &v
	return s
}

func (s *RunScalingActionV2Request) SetResourceGroupId(v string) *RunScalingActionV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *RunScalingActionV2Request) SetResourceOwnerId(v int64) *RunScalingActionV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunScalingActionV2Request) SetScalingActionType(v string) *RunScalingActionV2Request {
	s.ScalingActionType = &v
	return s
}

func (s *RunScalingActionV2Request) SetScalingGroupBizId(v string) *RunScalingActionV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type RunScalingActionV2ResponseBody struct {
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunScalingActionV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunScalingActionV2ResponseBody) GoString() string {
	return s.String()
}

func (s *RunScalingActionV2ResponseBody) SetData(v string) *RunScalingActionV2ResponseBody {
	s.Data = &v
	return s
}

func (s *RunScalingActionV2ResponseBody) SetRequestId(v string) *RunScalingActionV2ResponseBody {
	s.RequestId = &v
	return s
}

type RunScalingActionV2Response struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RunScalingActionV2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RunScalingActionV2Response) String() string {
	return tea.Prettify(s)
}

func (s RunScalingActionV2Response) GoString() string {
	return s.String()
}

func (s *RunScalingActionV2Response) SetHeaders(v map[string]*string) *RunScalingActionV2Response {
	s.Headers = v
	return s
}

func (s *RunScalingActionV2Response) SetStatusCode(v int32) *RunScalingActionV2Response {
	s.StatusCode = &v
	return s
}

func (s *RunScalingActionV2Response) SetBody(v *RunScalingActionV2ResponseBody) *RunScalingActionV2Response {
	s.Body = v
	return s
}

type StartFlowRequest struct {
	FlowInstanceId *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s StartFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s StartFlowRequest) GoString() string {
	return s.String()
}

func (s *StartFlowRequest) SetFlowInstanceId(v string) *StartFlowRequest {
	s.FlowInstanceId = &v
	return s
}

func (s *StartFlowRequest) SetProjectId(v string) *StartFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *StartFlowRequest) SetRegionId(v string) *StartFlowRequest {
	s.RegionId = &v
	return s
}

type StartFlowResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s StartFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartFlowResponseBody) GoString() string {
	return s.String()
}

func (s *StartFlowResponseBody) SetData(v bool) *StartFlowResponseBody {
	s.Data = &v
	return s
}

func (s *StartFlowResponseBody) SetRequestId(v string) *StartFlowResponseBody {
	s.RequestId = &v
	return s
}

type StartFlowResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s StartFlowResponse) GoString() string {
	return s.String()
}

func (s *StartFlowResponse) SetHeaders(v map[string]*string) *StartFlowResponse {
	s.Headers = v
	return s
}

func (s *StartFlowResponse) SetStatusCode(v int32) *StartFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *StartFlowResponse) SetBody(v *StartFlowResponseBody) *StartFlowResponse {
	s.Body = v
	return s
}

type SubmitFlowRequest struct {
	Conf      *string `json:"Conf,omitempty" xml:"Conf,omitempty"`
	FlowId    *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SubmitFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowRequest) GoString() string {
	return s.String()
}

func (s *SubmitFlowRequest) SetConf(v string) *SubmitFlowRequest {
	s.Conf = &v
	return s
}

func (s *SubmitFlowRequest) SetFlowId(v string) *SubmitFlowRequest {
	s.FlowId = &v
	return s
}

func (s *SubmitFlowRequest) SetProjectId(v string) *SubmitFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitFlowRequest) SetRegionId(v string) *SubmitFlowRequest {
	s.RegionId = &v
	return s
}

type SubmitFlowResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFlowResponseBody) SetId(v string) *SubmitFlowResponseBody {
	s.Id = &v
	return s
}

func (s *SubmitFlowResponseBody) SetRequestId(v string) *SubmitFlowResponseBody {
	s.RequestId = &v
	return s
}

type SubmitFlowResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowResponse) GoString() string {
	return s.String()
}

func (s *SubmitFlowResponse) SetHeaders(v map[string]*string) *SubmitFlowResponse {
	s.Headers = v
	return s
}

func (s *SubmitFlowResponse) SetStatusCode(v int32) *SubmitFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitFlowResponse) SetBody(v *SubmitFlowResponseBody) *SubmitFlowResponse {
	s.Body = v
	return s
}

type SubmitFlowJobRequest struct {
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Conf          *string `json:"Conf,omitempty" xml:"Conf,omitempty"`
	HostName      *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobInstanceId *string `json:"JobInstanceId,omitempty" xml:"JobInstanceId,omitempty"`
	Namespace     *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SubmitFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitFlowJobRequest) SetClusterId(v string) *SubmitFlowJobRequest {
	s.ClusterId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetConf(v string) *SubmitFlowJobRequest {
	s.Conf = &v
	return s
}

func (s *SubmitFlowJobRequest) SetHostName(v string) *SubmitFlowJobRequest {
	s.HostName = &v
	return s
}

func (s *SubmitFlowJobRequest) SetJobId(v string) *SubmitFlowJobRequest {
	s.JobId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetJobInstanceId(v string) *SubmitFlowJobRequest {
	s.JobInstanceId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetNamespace(v string) *SubmitFlowJobRequest {
	s.Namespace = &v
	return s
}

func (s *SubmitFlowJobRequest) SetProjectId(v string) *SubmitFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetRegionId(v string) *SubmitFlowJobRequest {
	s.RegionId = &v
	return s
}

type SubmitFlowJobResponseBody struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFlowJobResponseBody) SetId(v string) *SubmitFlowJobResponseBody {
	s.Id = &v
	return s
}

func (s *SubmitFlowJobResponseBody) SetRequestId(v string) *SubmitFlowJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitFlowJobResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitFlowJobResponse) SetHeaders(v map[string]*string) *SubmitFlowJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitFlowJobResponse) SetStatusCode(v int32) *SubmitFlowJobResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitFlowJobResponse) SetBody(v *SubmitFlowJobResponseBody) *SubmitFlowJobResponse {
	s.Body = v
	return s
}

type SuspendFlowRequest struct {
	FlowInstanceId *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s SuspendFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendFlowRequest) GoString() string {
	return s.String()
}

func (s *SuspendFlowRequest) SetFlowInstanceId(v string) *SuspendFlowRequest {
	s.FlowInstanceId = &v
	return s
}

func (s *SuspendFlowRequest) SetProjectId(v string) *SuspendFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *SuspendFlowRequest) SetRegionId(v string) *SuspendFlowRequest {
	s.RegionId = &v
	return s
}

type SuspendFlowResponseBody struct {
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SuspendFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendFlowResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendFlowResponseBody) SetData(v bool) *SuspendFlowResponseBody {
	s.Data = &v
	return s
}

func (s *SuspendFlowResponseBody) SetRequestId(v string) *SuspendFlowResponseBody {
	s.RequestId = &v
	return s
}

type SuspendFlowResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SuspendFlowResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SuspendFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendFlowResponse) GoString() string {
	return s.String()
}

func (s *SuspendFlowResponse) SetHeaders(v map[string]*string) *SuspendFlowResponse {
	s.Headers = v
	return s
}

func (s *SuspendFlowResponse) SetStatusCode(v int32) *SuspendFlowResponse {
	s.StatusCode = &v
	return s
}

func (s *SuspendFlowResponse) SetBody(v *SuspendFlowResponseBody) *SuspendFlowResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	RegionId        *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId      []*string                 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerId *int64                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType    *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag             []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceOwnerId(v int64) *TagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	All             *bool     `json:"All,omitempty" xml:"All,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceId      []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceType    *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey          []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceOwnerId(v int64) *UntagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-beijing":            tea.String("emr.aliyuncs.com"),
		"cn-hangzhou":           tea.String("emr.aliyuncs.com"),
		"cn-shanghai":           tea.String("emr.aliyuncs.com"),
		"cn-shenzhen":           tea.String("emr.aliyuncs.com"),
		"ap-southeast-1":        tea.String("emr.aliyuncs.com"),
		"us-west-1":             tea.String("emr.aliyuncs.com"),
		"cn-hangzhou-finance":   tea.String("emr.aliyuncs.com"),
		"cn-shenzhen-finance-1": tea.String("emr.aliyuncs.com"),
		"cn-shanghai-finance-1": tea.String("emr.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("emr"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddClusterServiceWithOptions(request *AddClusterServiceRequest, runtime *util.RuntimeOptions) (_result *AddClusterServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Service)) {
		query["Service"] = request.Service
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddClusterService"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddClusterServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddClusterService(request *AddClusterServiceRequest) (_result *AddClusterServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddClusterServiceResponse{}
	_body, _err := client.AddClusterServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddScalingConfigItemV2WithOptions(request *AddScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *AddScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigItemInformation)) {
		query["ConfigItemInformation"] = request.ConfigItemInformation
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigItemType)) {
		query["ConfigItemType"] = request.ConfigItemType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddScalingConfigItemV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddScalingConfigItemV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddScalingConfigItemV2(request *AddScalingConfigItemV2Request) (_result *AddScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddScalingConfigItemV2Response{}
	_body, _err := client.AddScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloneFlowWithOptions(request *CloneFlowRequest, runtime *util.RuntimeOptions) (_result *CloneFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CloneFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CloneFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloneFlow(request *CloneFlowRequest) (_result *CloneFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneFlowResponse{}
	_body, _err := client.CloneFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloneFlowJobWithOptions(request *CloneFlowJobRequest, runtime *util.RuntimeOptions) (_result *CloneFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CloneFlowJob"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CloneFlowJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloneFlowJob(request *CloneFlowJobRequest) (_result *CloneFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneFlowJobResponse{}
	_body, _err := client.CloneFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClusterHostGroupWithOptions(request *CreateClusterHostGroupRequest, runtime *util.RuntimeOptions) (_result *CreateClusterHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupName)) {
		query["HostGroupName"] = request.HostGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupParams)) {
		query["HostGroupParams"] = request.HostGroupParams
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupType)) {
		query["HostGroupType"] = request.HostGroupType
	}

	if !tea.BoolValue(util.IsUnset(request.PayType)) {
		query["PayType"] = request.PayType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.VswitchId)) {
		query["VswitchId"] = request.VswitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateClusterHostGroup"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateClusterHostGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClusterHostGroup(request *CreateClusterHostGroupRequest) (_result *CreateClusterHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterHostGroupResponse{}
	_body, _err := client.CreateClusterHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClusterTemplateWithOptions(request *CreateClusterTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateClusterTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.BootstrapAction)) {
		query["BootstrapAction"] = request.BootstrapAction
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Configurations)) {
		query["Configurations"] = request.Configurations
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskEncrypted)) {
		query["DataDiskEncrypted"] = request.DataDiskEncrypted
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskKMSKeyId)) {
		query["DataDiskKMSKeyId"] = request.DataDiskKMSKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.DepositType)) {
		query["DepositType"] = request.DepositType
	}

	if !tea.BoolValue(util.IsUnset(request.EasEnable)) {
		query["EasEnable"] = request.EasEnable
	}

	if !tea.BoolValue(util.IsUnset(request.EmrVer)) {
		query["EmrVer"] = request.EmrVer
	}

	if !tea.BoolValue(util.IsUnset(request.HighAvailabilityEnable)) {
		query["HighAvailabilityEnable"] = request.HighAvailabilityEnable
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroup)) {
		query["HostGroup"] = request.HostGroup
	}

	if !tea.BoolValue(util.IsUnset(request.InitCustomHiveMetaDb)) {
		query["InitCustomHiveMetaDb"] = request.InitCustomHiveMetaDb
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceGeneration)) {
		query["InstanceGeneration"] = request.InstanceGeneration
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.IsOpenPublicIp)) {
		query["IsOpenPublicIp"] = request.IsOpenPublicIp
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.LogPath)) {
		query["LogPath"] = request.LogPath
	}

	if !tea.BoolValue(util.IsUnset(request.MachineType)) {
		query["MachineType"] = request.MachineType
	}

	if !tea.BoolValue(util.IsUnset(request.MasterPwd)) {
		query["MasterPwd"] = request.MasterPwd
	}

	if !tea.BoolValue(util.IsUnset(request.MetaStoreConf)) {
		query["MetaStoreConf"] = request.MetaStoreConf
	}

	if !tea.BoolValue(util.IsUnset(request.MetaStoreType)) {
		query["MetaStoreType"] = request.MetaStoreType
	}

	if !tea.BoolValue(util.IsUnset(request.NetType)) {
		query["NetType"] = request.NetType
	}

	if !tea.BoolValue(util.IsUnset(request.OptionSoftWareList)) {
		query["OptionSoftWareList"] = request.OptionSoftWareList
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.SshEnable)) {
		query["SshEnable"] = request.SshEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.UseCustomHiveMetaDb)) {
		query["UseCustomHiveMetaDb"] = request.UseCustomHiveMetaDb
	}

	if !tea.BoolValue(util.IsUnset(request.UseLocalMetaDb)) {
		query["UseLocalMetaDb"] = request.UseLocalMetaDb
	}

	if !tea.BoolValue(util.IsUnset(request.UserDefinedEmrEcsRole)) {
		query["UserDefinedEmrEcsRole"] = request.UserDefinedEmrEcsRole
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateClusterTemplate"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateClusterTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClusterTemplate(request *CreateClusterTemplateRequest) (_result *CreateClusterTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterTemplateResponse{}
	_body, _err := client.CreateClusterTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClusterV2WithOptions(request *CreateClusterV2Request, runtime *util.RuntimeOptions) (_result *CreateClusterV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AuthorizeContent)) {
		query["AuthorizeContent"] = request.AuthorizeContent
	}

	if !tea.BoolValue(util.IsUnset(request.AutoPayOrder)) {
		query["AutoPayOrder"] = request.AutoPayOrder
	}

	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.BootstrapAction)) {
		query["BootstrapAction"] = request.BootstrapAction
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClickHouseConf)) {
		query["ClickHouseConf"] = request.ClickHouseConf
	}

	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Configurations)) {
		query["Configurations"] = request.Configurations
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskEncrypted)) {
		query["DataDiskEncrypted"] = request.DataDiskEncrypted
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskKMSKeyId)) {
		query["DataDiskKMSKeyId"] = request.DataDiskKMSKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.DepositType)) {
		query["DepositType"] = request.DepositType
	}

	if !tea.BoolValue(util.IsUnset(request.EasEnable)) {
		query["EasEnable"] = request.EasEnable
	}

	if !tea.BoolValue(util.IsUnset(request.EmrVer)) {
		query["EmrVer"] = request.EmrVer
	}

	if !tea.BoolValue(util.IsUnset(request.ExtraAttributes)) {
		query["ExtraAttributes"] = request.ExtraAttributes
	}

	if !tea.BoolValue(util.IsUnset(request.HighAvailabilityEnable)) {
		query["HighAvailabilityEnable"] = request.HighAvailabilityEnable
	}

	if !tea.BoolValue(util.IsUnset(request.HostComponentInfo)) {
		query["HostComponentInfo"] = request.HostComponentInfo
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroup)) {
		query["HostGroup"] = request.HostGroup
	}

	if !tea.BoolValue(util.IsUnset(request.InitCustomHiveMetaDB)) {
		query["InitCustomHiveMetaDB"] = request.InitCustomHiveMetaDB
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceGeneration)) {
		query["InstanceGeneration"] = request.InstanceGeneration
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.IsOpenPublicIp)) {
		query["IsOpenPublicIp"] = request.IsOpenPublicIp
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.LogPath)) {
		query["LogPath"] = request.LogPath
	}

	if !tea.BoolValue(util.IsUnset(request.MachineType)) {
		query["MachineType"] = request.MachineType
	}

	if !tea.BoolValue(util.IsUnset(request.MasterPwd)) {
		query["MasterPwd"] = request.MasterPwd
	}

	if !tea.BoolValue(util.IsUnset(request.MetaStoreConf)) {
		query["MetaStoreConf"] = request.MetaStoreConf
	}

	if !tea.BoolValue(util.IsUnset(request.MetaStoreType)) {
		query["MetaStoreType"] = request.MetaStoreType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NetType)) {
		query["NetType"] = request.NetType
	}

	if !tea.BoolValue(util.IsUnset(request.OptionSoftWareList)) {
		query["OptionSoftWareList"] = request.OptionSoftWareList
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionInfo)) {
		query["PromotionInfo"] = request.PromotionInfo
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RelatedClusterId)) {
		query["RelatedClusterId"] = request.RelatedClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceInfo)) {
		query["ServiceInfo"] = request.ServiceInfo
	}

	if !tea.BoolValue(util.IsUnset(request.SshEnable)) {
		query["SshEnable"] = request.SshEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.UseCustomHiveMetaDB)) {
		query["UseCustomHiveMetaDB"] = request.UseCustomHiveMetaDB
	}

	if !tea.BoolValue(util.IsUnset(request.UseLocalMetaDb)) {
		query["UseLocalMetaDb"] = request.UseLocalMetaDb
	}

	if !tea.BoolValue(util.IsUnset(request.UserDefinedEmrEcsRole)) {
		query["UserDefinedEmrEcsRole"] = request.UserDefinedEmrEcsRole
	}

	if !tea.BoolValue(util.IsUnset(request.UserInfo)) {
		query["UserInfo"] = request.UserInfo
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.WhiteListType)) {
		query["WhiteListType"] = request.WhiteListType
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateClusterV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateClusterV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClusterV2(request *CreateClusterV2Request) (_result *CreateClusterV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterV2Response{}
	_body, _err := client.CreateClusterV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClusterWithTemplateWithOptions(request *CreateClusterWithTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateClusterWithTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClientToken)) {
		query["ClientToken"] = request.ClientToken
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterName)) {
		query["ClusterName"] = request.ClusterName
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateBizId)) {
		query["TemplateBizId"] = request.TemplateBizId
	}

	if !tea.BoolValue(util.IsUnset(request.UniqueTag)) {
		query["UniqueTag"] = request.UniqueTag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateClusterWithTemplate"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateClusterWithTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClusterWithTemplate(request *CreateClusterWithTemplateRequest) (_result *CreateClusterWithTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterWithTemplateResponse{}
	_body, _err := client.CreateClusterWithTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowWithOptions(request *CreateFlowRequest, runtime *util.RuntimeOptions) (_result *CreateFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertConf)) {
		query["AlertConf"] = request.AlertConf
	}

	if !tea.BoolValue(util.IsUnset(request.AlertDingDingGroupBizId)) {
		query["AlertDingDingGroupBizId"] = request.AlertDingDingGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.AlertUserGroupBizId)) {
		query["AlertUserGroupBizId"] = request.AlertUserGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.Application)) {
		query["Application"] = request.Application
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateCluster)) {
		query["CreateCluster"] = request.CreateCluster
	}

	if !tea.BoolValue(util.IsUnset(request.CronExpr)) {
		query["CronExpr"] = request.CronExpr
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndSchedule)) {
		query["EndSchedule"] = request.EndSchedule
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.Lifecycle)) {
		query["Lifecycle"] = request.Lifecycle
	}

	if !tea.BoolValue(util.IsUnset(request.LogArchiveLocation)) {
		query["LogArchiveLocation"] = request.LogArchiveLocation
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCategory)) {
		query["ParentCategory"] = request.ParentCategory
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFlowList)) {
		query["ParentFlowList"] = request.ParentFlowList
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartSchedule)) {
		query["StartSchedule"] = request.StartSchedule
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlow(request *CreateFlowRequest) (_result *CreateFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowResponse{}
	_body, _err := client.CreateFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowCategoryWithOptions(request *CreateFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *CreateFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowCategory"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowCategory(request *CreateFlowCategoryRequest) (_result *CreateFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowCategoryResponse{}
	_body, _err := client.CreateFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowForWebWithOptions(request *CreateFlowForWebRequest, runtime *util.RuntimeOptions) (_result *CreateFlowForWebResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertConf)) {
		query["AlertConf"] = request.AlertConf
	}

	if !tea.BoolValue(util.IsUnset(request.AlertDingDingGroupBizId)) {
		query["AlertDingDingGroupBizId"] = request.AlertDingDingGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.AlertUserGroupBizId)) {
		query["AlertUserGroupBizId"] = request.AlertUserGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateCluster)) {
		query["CreateCluster"] = request.CreateCluster
	}

	if !tea.BoolValue(util.IsUnset(request.CronExpr)) {
		query["CronExpr"] = request.CronExpr
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndSchedule)) {
		query["EndSchedule"] = request.EndSchedule
	}

	if !tea.BoolValue(util.IsUnset(request.Graph)) {
		query["Graph"] = request.Graph
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.Lifecycle)) {
		query["Lifecycle"] = request.Lifecycle
	}

	if !tea.BoolValue(util.IsUnset(request.LogArchiveLocation)) {
		query["LogArchiveLocation"] = request.LogArchiveLocation
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCategory)) {
		query["ParentCategory"] = request.ParentCategory
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFlowList)) {
		query["ParentFlowList"] = request.ParentFlowList
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartSchedule)) {
		query["StartSchedule"] = request.StartSchedule
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowForWeb"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowForWebResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowForWeb(request *CreateFlowForWebRequest) (_result *CreateFlowForWebResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowForWebResponse{}
	_body, _err := client.CreateFlowForWebWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowJobWithOptions(request *CreateFlowJobRequest, runtime *util.RuntimeOptions) (_result *CreateFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Adhoc)) {
		query["Adhoc"] = request.Adhoc
	}

	if !tea.BoolValue(util.IsUnset(request.AlertConf)) {
		query["AlertConf"] = request.AlertConf
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.FailAct)) {
		query["FailAct"] = request.FailAct
	}

	if !tea.BoolValue(util.IsUnset(request.MaxRetry)) {
		query["MaxRetry"] = request.MaxRetry
	}

	if !tea.BoolValue(util.IsUnset(request.MaxRunningTimeSec)) {
		query["MaxRunningTimeSec"] = request.MaxRunningTimeSec
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCategory)) {
		query["ParentCategory"] = request.ParentCategory
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.RetryInterval)) {
		query["RetryInterval"] = request.RetryInterval
	}

	if !tea.BoolValue(util.IsUnset(request.RetryPolicy)) {
		query["RetryPolicy"] = request.RetryPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CustomVariables)) {
		body["CustomVariables"] = request.CustomVariables
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EnvConf)) {
		body["EnvConf"] = request.EnvConf
	}

	if !tea.BoolValue(util.IsUnset(request.MonitorConf)) {
		body["MonitorConf"] = request.MonitorConf
	}

	if !tea.BoolValue(util.IsUnset(request.ParamConf)) {
		body["ParamConf"] = request.ParamConf
	}

	if !tea.BoolValue(util.IsUnset(request.Params)) {
		body["Params"] = request.Params
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceList)) {
		body["ResourceList"] = request.ResourceList
	}

	if !tea.BoolValue(util.IsUnset(request.RunConf)) {
		body["RunConf"] = request.RunConf
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowJob"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowJob(request *CreateFlowJobRequest) (_result *CreateFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowJobResponse{}
	_body, _err := client.CreateFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowProjectWithOptions(request *CreateFlowProjectRequest, runtime *util.RuntimeOptions) (_result *CreateFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowProject"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowProject(request *CreateFlowProjectRequest) (_result *CreateFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowProjectResponse{}
	_body, _err := client.CreateFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowProjectClusterSettingWithOptions(request *CreateFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *CreateFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultQueue)) {
		query["DefaultQueue"] = request.DefaultQueue
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultUser)) {
		query["DefaultUser"] = request.DefaultUser
	}

	if !tea.BoolValue(util.IsUnset(request.HostList)) {
		query["HostList"] = request.HostList
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.QueueList)) {
		query["QueueList"] = request.QueueList
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserList)) {
		query["UserList"] = request.UserList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowProjectClusterSetting"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowProjectClusterSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowProjectClusterSetting(request *CreateFlowProjectClusterSettingRequest) (_result *CreateFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowProjectClusterSettingResponse{}
	_body, _err := client.CreateFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowProjectUserWithOptions(request *CreateFlowProjectUserRequest, runtime *util.RuntimeOptions) (_result *CreateFlowProjectUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.User)) {
		query["User"] = request.User
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFlowProjectUser"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFlowProjectUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowProjectUser(request *CreateFlowProjectUserRequest) (_result *CreateFlowProjectUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowProjectUserResponse{}
	_body, _err := client.CreateFlowProjectUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResourcePoolWithOptions(request *CreateResourcePoolRequest, runtime *util.RuntimeOptions) (_result *CreateResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Active)) {
		query["Active"] = request.Active
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Note)) {
		query["Note"] = request.Note
	}

	if !tea.BoolValue(util.IsUnset(request.PoolType)) {
		query["PoolType"] = request.PoolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.YarnSiteConfig)) {
		query["YarnSiteConfig"] = request.YarnSiteConfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateResourcePool"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateResourcePoolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateResourcePool(request *CreateResourcePoolRequest) (_result *CreateResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResourcePoolResponse{}
	_body, _err := client.CreateResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResourceQueueWithOptions(request *CreateResourceQueueRequest, runtime *util.RuntimeOptions) (_result *CreateResourceQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Leaf)) {
		query["Leaf"] = request.Leaf
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentQueueId)) {
		query["ParentQueueId"] = request.ParentQueueId
	}

	if !tea.BoolValue(util.IsUnset(request.QualifiedName)) {
		query["QualifiedName"] = request.QualifiedName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourcePoolId)) {
		query["ResourcePoolId"] = request.ResourcePoolId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateResourceQueue"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateResourceQueueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateResourceQueue(request *CreateResourceQueueRequest) (_result *CreateResourceQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResourceQueueResponse{}
	_body, _err := client.CreateResourceQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateScalingGroupV2WithOptions(request *CreateScalingGroupV2Request, runtime *util.RuntimeOptions) (_result *CreateScalingGroupV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateScalingGroupV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateScalingGroupV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateScalingGroupV2(request *CreateScalingGroupV2Request) (_result *CreateScalingGroupV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateScalingGroupV2Response{}
	_body, _err := client.CreateScalingGroupV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteClusterTemplateWithOptions(request *DeleteClusterTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteClusterTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteClusterTemplate"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteClusterTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteClusterTemplate(request *DeleteClusterTemplateRequest) (_result *DeleteClusterTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteClusterTemplateResponse{}
	_body, _err := client.DeleteClusterTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowWithOptions(request *DeleteFlowRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlow(request *DeleteFlowRequest) (_result *DeleteFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowResponse{}
	_body, _err := client.DeleteFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowCategoryWithOptions(request *DeleteFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlowCategory"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowCategory(request *DeleteFlowCategoryRequest) (_result *DeleteFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowCategoryResponse{}
	_body, _err := client.DeleteFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowJobWithOptions(request *DeleteFlowJobRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlowJob"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowJob(request *DeleteFlowJobRequest) (_result *DeleteFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowJobResponse{}
	_body, _err := client.DeleteFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowProjectWithOptions(request *DeleteFlowProjectRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlowProject"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowProject(request *DeleteFlowProjectRequest) (_result *DeleteFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowProjectResponse{}
	_body, _err := client.DeleteFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowProjectClusterSettingWithOptions(request *DeleteFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlowProjectClusterSetting"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowProjectClusterSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowProjectClusterSetting(request *DeleteFlowProjectClusterSettingRequest) (_result *DeleteFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowProjectClusterSettingResponse{}
	_body, _err := client.DeleteFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowProjectUserWithOptions(request *DeleteFlowProjectUserRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowProjectUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		query["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteFlowProjectUser"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteFlowProjectUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowProjectUser(request *DeleteFlowProjectUserRequest) (_result *DeleteFlowProjectUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowProjectUserResponse{}
	_body, _err := client.DeleteFlowProjectUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteResourcePoolWithOptions(request *DeleteResourcePoolRequest, runtime *util.RuntimeOptions) (_result *DeleteResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourcePoolId)) {
		query["ResourcePoolId"] = request.ResourcePoolId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteResourcePool"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteResourcePoolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteResourcePool(request *DeleteResourcePoolRequest) (_result *DeleteResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteResourcePoolResponse{}
	_body, _err := client.DeleteResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteResourceQueueWithOptions(request *DeleteResourceQueueRequest, runtime *util.RuntimeOptions) (_result *DeleteResourceQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceQueueId)) {
		query["ResourceQueueId"] = request.ResourceQueueId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteResourceQueue"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteResourceQueueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteResourceQueue(request *DeleteResourceQueueRequest) (_result *DeleteResourceQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteResourceQueueResponse{}
	_body, _err := client.DeleteResourceQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterBasicInfoWithOptions(request *DescribeClusterBasicInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterBasicInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterBasicInfo"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterBasicInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterBasicInfo(request *DescribeClusterBasicInfoRequest) (_result *DescribeClusterBasicInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterBasicInfoResponse{}
	_body, _err := client.DescribeClusterBasicInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterOperationHostTaskLogWithOptions(request *DescribeClusterOperationHostTaskLogRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterOperationHostTaskLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.OperationId)) {
		query["OperationId"] = request.OperationId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterOperationHostTaskLog"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterOperationHostTaskLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterOperationHostTaskLog(request *DescribeClusterOperationHostTaskLogRequest) (_result *DescribeClusterOperationHostTaskLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterOperationHostTaskLogResponse{}
	_body, _err := client.DescribeClusterOperationHostTaskLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterResourcePoolSchedulerTypeWithOptions(request *DescribeClusterResourcePoolSchedulerTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterResourcePoolSchedulerTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterResourcePoolSchedulerType"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterResourcePoolSchedulerTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterResourcePoolSchedulerType(request *DescribeClusterResourcePoolSchedulerTypeRequest) (_result *DescribeClusterResourcePoolSchedulerTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterResourcePoolSchedulerTypeResponse{}
	_body, _err := client.DescribeClusterResourcePoolSchedulerTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterServiceWithOptions(request *DescribeClusterServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterService"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterService(request *DescribeClusterServiceRequest) (_result *DescribeClusterServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterServiceResponse{}
	_body, _err := client.DescribeClusterServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfigWithOptions(request *DescribeClusterServiceConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterServiceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigVersion)) {
		query["ConfigVersion"] = request.ConfigVersion
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostInstanceId)) {
		query["HostInstanceId"] = request.HostInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.TagValue)) {
		query["TagValue"] = request.TagValue
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterServiceConfig"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterServiceConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfig(request *DescribeClusterServiceConfigRequest) (_result *DescribeClusterServiceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterServiceConfigResponse{}
	_body, _err := client.DescribeClusterServiceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfigTagWithOptions(request *DescribeClusterServiceConfigTagRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterServiceConfigTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigTag)) {
		query["ConfigTag"] = request.ConfigTag
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterServiceConfigTag"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterServiceConfigTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfigTag(request *DescribeClusterServiceConfigTagRequest) (_result *DescribeClusterServiceConfigTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterServiceConfigTagResponse{}
	_body, _err := client.DescribeClusterServiceConfigTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterTemplateWithOptions(request *DescribeClusterTemplateRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterTemplate"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterTemplate(request *DescribeClusterTemplateRequest) (_result *DescribeClusterTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterTemplateResponse{}
	_body, _err := client.DescribeClusterTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterV2WithOptions(request *DescribeClusterV2Request, runtime *util.RuntimeOptions) (_result *DescribeClusterV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeClusterV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeClusterV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterV2(request *DescribeClusterV2Request) (_result *DescribeClusterV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterV2Response{}
	_body, _err := client.DescribeClusterV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowWithOptions(request *DescribeFlowRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlow(request *DescribeFlowRequest) (_result *DescribeFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowResponse{}
	_body, _err := client.DescribeFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowCategoryWithOptions(request *DescribeFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowCategory"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowCategory(request *DescribeFlowCategoryRequest) (_result *DescribeFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowCategoryResponse{}
	_body, _err := client.DescribeFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowCategoryTreeWithOptions(request *DescribeFlowCategoryTreeRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowCategoryTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.CategoryId)) {
		query["CategoryId"] = request.CategoryId
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.Mode)) {
		query["Mode"] = request.Mode
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowCategoryTree"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowCategoryTreeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowCategoryTree(request *DescribeFlowCategoryTreeRequest) (_result *DescribeFlowCategoryTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowCategoryTreeResponse{}
	_body, _err := client.DescribeFlowCategoryTreeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowInstanceWithOptions(request *DescribeFlowInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowInstance"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowInstance(request *DescribeFlowInstanceRequest) (_result *DescribeFlowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowInstanceResponse{}
	_body, _err := client.DescribeFlowInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowJobWithOptions(request *DescribeFlowJobRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowJob"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowJob(request *DescribeFlowJobRequest) (_result *DescribeFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowJobResponse{}
	_body, _err := client.DescribeFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceWithOptions(request *DescribeFlowNodeInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowNodeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowNodeInstance"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowNodeInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstance(request *DescribeFlowNodeInstanceRequest) (_result *DescribeFlowNodeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowNodeInstanceResponse{}
	_body, _err := client.DescribeFlowNodeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceContainerLogWithOptions(request *DescribeFlowNodeInstanceContainerLogRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowNodeInstanceContainerLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AppId)) {
		query["AppId"] = request.AppId
	}

	if !tea.BoolValue(util.IsUnset(request.ContainerId)) {
		query["ContainerId"] = request.ContainerId
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.LogName)) {
		query["LogName"] = request.LogName
	}

	if !tea.BoolValue(util.IsUnset(request.NodeInstanceId)) {
		query["NodeInstanceId"] = request.NodeInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		query["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowNodeInstanceContainerLog"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowNodeInstanceContainerLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceContainerLog(request *DescribeFlowNodeInstanceContainerLogRequest) (_result *DescribeFlowNodeInstanceContainerLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowNodeInstanceContainerLogResponse{}
	_body, _err := client.DescribeFlowNodeInstanceContainerLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceLauncherLogWithOptions(request *DescribeFlowNodeInstanceLauncherLogRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowNodeInstanceLauncherLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.Lines)) {
		query["Lines"] = request.Lines
	}

	if !tea.BoolValue(util.IsUnset(request.NodeInstanceId)) {
		query["NodeInstanceId"] = request.NodeInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		query["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Reverse)) {
		query["Reverse"] = request.Reverse
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowNodeInstanceLauncherLog"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowNodeInstanceLauncherLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceLauncherLog(request *DescribeFlowNodeInstanceLauncherLogRequest) (_result *DescribeFlowNodeInstanceLauncherLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowNodeInstanceLauncherLogResponse{}
	_body, _err := client.DescribeFlowNodeInstanceLauncherLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowProjectWithOptions(request *DescribeFlowProjectRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowProject"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowProject(request *DescribeFlowProjectRequest) (_result *DescribeFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowProjectResponse{}
	_body, _err := client.DescribeFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowProjectClusterSettingWithOptions(request *DescribeFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFlowProjectClusterSetting"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFlowProjectClusterSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowProjectClusterSetting(request *DescribeFlowProjectClusterSettingRequest) (_result *DescribeFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowProjectClusterSettingResponse{}
	_body, _err := client.DescribeFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingConfigItemV2WithOptions(request *DescribeScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *DescribeScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigItemType)) {
		query["ConfigItemType"] = request.ConfigItemType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingConfigItemId)) {
		query["ScalingConfigItemId"] = request.ScalingConfigItemId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScalingConfigItemV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScalingConfigItemV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingConfigItemV2(request *DescribeScalingConfigItemV2Request) (_result *DescribeScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingConfigItemV2Response{}
	_body, _err := client.DescribeScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingGroupInstanceV2WithOptions(request *DescribeScalingGroupInstanceV2Request, runtime *util.RuntimeOptions) (_result *DescribeScalingGroupInstanceV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupBizId)) {
		query["HostGroupBizId"] = request.HostGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScalingGroupInstanceV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScalingGroupInstanceV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingGroupInstanceV2(request *DescribeScalingGroupInstanceV2Request) (_result *DescribeScalingGroupInstanceV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingGroupInstanceV2Response{}
	_body, _err := client.DescribeScalingGroupInstanceV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingGroupV2WithOptions(request *DescribeScalingGroupV2Request, runtime *util.RuntimeOptions) (_result *DescribeScalingGroupV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.HostGroupBizId)) {
		query["HostGroupBizId"] = request.HostGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeScalingGroupV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeScalingGroupV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingGroupV2(request *DescribeScalingGroupV2Request) (_result *DescribeScalingGroupV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingGroupV2Response{}
	_body, _err := client.DescribeScalingGroupV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinResourceGroupWithOptions(request *JoinResourceGroupRequest, runtime *util.RuntimeOptions) (_result *JoinResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinResourceGroup"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinResourceGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinResourceGroup(request *JoinResourceGroupRequest) (_result *JoinResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinResourceGroupResponse{}
	_body, _err := client.JoinResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) KillFlowJobWithOptions(request *KillFlowJobRequest, runtime *util.RuntimeOptions) (_result *KillFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobInstanceId)) {
		query["JobInstanceId"] = request.JobInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("KillFlowJob"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &KillFlowJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) KillFlowJob(request *KillFlowJobRequest) (_result *KillFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &KillFlowJobResponse{}
	_body, _err := client.KillFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterHostWithOptions(request *ListClusterHostRequest, runtime *util.RuntimeOptions) (_result *ListClusterHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentName)) {
		query["ComponentName"] = request.ComponentName
	}

	if !tea.BoolValue(util.IsUnset(request.GroupType)) {
		query["GroupType"] = request.GroupType
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostInstanceId)) {
		query["HostInstanceId"] = request.HostInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PrivateIp)) {
		query["PrivateIp"] = request.PrivateIp
	}

	if !tea.BoolValue(util.IsUnset(request.PublicIp)) {
		query["PublicIp"] = request.PublicIp
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterHost"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterHostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterHost(request *ListClusterHostRequest) (_result *ListClusterHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterHostResponse{}
	_body, _err := client.ListClusterHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterHostComponentWithOptions(request *ListClusterHostComponentRequest, runtime *util.RuntimeOptions) (_result *ListClusterHostComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentName)) {
		query["ComponentName"] = request.ComponentName
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentStatus)) {
		query["ComponentStatus"] = request.ComponentStatus
	}

	if !tea.BoolValue(util.IsUnset(request.HostInstanceId)) {
		query["HostInstanceId"] = request.HostInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.HostRole)) {
		query["HostRole"] = request.HostRole
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterHostComponent"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterHostComponentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterHostComponent(request *ListClusterHostComponentRequest) (_result *ListClusterHostComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterHostComponentResponse{}
	_body, _err := client.ListClusterHostComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterHostGroupWithOptions(request *ListClusterHostGroupRequest, runtime *util.RuntimeOptions) (_result *ListClusterHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupName)) {
		query["HostGroupName"] = request.HostGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupType)) {
		query["HostGroupType"] = request.HostGroupType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterHostGroup"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterHostGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterHostGroup(request *ListClusterHostGroupRequest) (_result *ListClusterHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterHostGroupResponse{}
	_body, _err := client.ListClusterHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterInstalledServiceWithOptions(request *ListClusterInstalledServiceRequest, runtime *util.RuntimeOptions) (_result *ListClusterInstalledServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterInstalledService"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterInstalledServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterInstalledService(request *ListClusterInstalledServiceRequest) (_result *ListClusterInstalledServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterInstalledServiceResponse{}
	_body, _err := client.ListClusterInstalledServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterOperationWithOptions(request *ListClusterOperationRequest, runtime *util.RuntimeOptions) (_result *ListClusterOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.OperationId)) {
		query["OperationId"] = request.OperationId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterOperation"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterOperationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterOperation(request *ListClusterOperationRequest) (_result *ListClusterOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterOperationResponse{}
	_body, _err := client.ListClusterOperationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterOperationHostWithOptions(request *ListClusterOperationHostRequest, runtime *util.RuntimeOptions) (_result *ListClusterOperationHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.OperationId)) {
		query["OperationId"] = request.OperationId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterOperationHost"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterOperationHostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterOperationHost(request *ListClusterOperationHostRequest) (_result *ListClusterOperationHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterOperationHostResponse{}
	_body, _err := client.ListClusterOperationHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterOperationHostTaskWithOptions(request *ListClusterOperationHostTaskRequest, runtime *util.RuntimeOptions) (_result *ListClusterOperationHostTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.HostId)) {
		query["HostId"] = request.HostId
	}

	if !tea.BoolValue(util.IsUnset(request.OperationId)) {
		query["OperationId"] = request.OperationId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterOperationHostTask"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterOperationHostTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterOperationHostTask(request *ListClusterOperationHostTaskRequest) (_result *ListClusterOperationHostTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterOperationHostTaskResponse{}
	_body, _err := client.ListClusterOperationHostTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterOperationTaskWithOptions(request *ListClusterOperationTaskRequest, runtime *util.RuntimeOptions) (_result *ListClusterOperationTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.OperationId)) {
		query["OperationId"] = request.OperationId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterOperationTask"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterOperationTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterOperationTask(request *ListClusterOperationTaskRequest) (_result *ListClusterOperationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterOperationTaskResponse{}
	_body, _err := client.ListClusterOperationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceWithOptions(request *ListClusterServiceRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterService"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterServiceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterService(request *ListClusterServiceRequest) (_result *ListClusterServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceResponse{}
	_body, _err := client.ListClusterServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceComponentHealthInfoWithOptions(request *ListClusterServiceComponentHealthInfoRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceComponentHealthInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentName)) {
		query["ComponentName"] = request.ComponentName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterServiceComponentHealthInfo"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterServiceComponentHealthInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterServiceComponentHealthInfo(request *ListClusterServiceComponentHealthInfoRequest) (_result *ListClusterServiceComponentHealthInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceComponentHealthInfoResponse{}
	_body, _err := client.ListClusterServiceComponentHealthInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceConfigHistoryWithOptions(request *ListClusterServiceConfigHistoryRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceConfigHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Author)) {
		query["Author"] = request.Author
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigFileName)) {
		query["ConfigFileName"] = request.ConfigFileName
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigItemKey)) {
		query["ConfigItemKey"] = request.ConfigItemKey
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigVersion)) {
		query["ConfigVersion"] = request.ConfigVersion
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostInstanceId)) {
		query["HostInstanceId"] = request.HostInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterServiceConfigHistory"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterServiceConfigHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterServiceConfigHistory(request *ListClusterServiceConfigHistoryRequest) (_result *ListClusterServiceConfigHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceConfigHistoryResponse{}
	_body, _err := client.ListClusterServiceConfigHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceQuickLinkWithOptions(request *ListClusterServiceQuickLinkRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceQuickLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DirectType)) {
		query["DirectType"] = request.DirectType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterServiceQuickLink"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterServiceQuickLinkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterServiceQuickLink(request *ListClusterServiceQuickLinkRequest) (_result *ListClusterServiceQuickLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceQuickLinkResponse{}
	_body, _err := client.ListClusterServiceQuickLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterTemplatesWithOptions(request *ListClusterTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListClusterTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusterTemplates"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClusterTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterTemplates(request *ListClusterTemplatesRequest) (_result *ListClusterTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterTemplatesResponse{}
	_body, _err := client.ListClusterTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClustersWithOptions(request *ListClustersRequest, runtime *util.RuntimeOptions) (_result *ListClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterTypeList)) {
		query["ClusterTypeList"] = request.ClusterTypeList
	}

	if !tea.BoolValue(util.IsUnset(request.CreateType)) {
		query["CreateType"] = request.CreateType
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultStatus)) {
		query["DefaultStatus"] = request.DefaultStatus
	}

	if !tea.BoolValue(util.IsUnset(request.DepositType)) {
		query["DepositType"] = request.DepositType
	}

	if !tea.BoolValue(util.IsUnset(request.ExpiredTagList)) {
		query["ExpiredTagList"] = request.ExpiredTagList
	}

	if !tea.BoolValue(util.IsUnset(request.IsDesc)) {
		query["IsDesc"] = request.IsDesc
	}

	if !tea.BoolValue(util.IsUnset(request.MachineType)) {
		query["MachineType"] = request.MachineType
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListClusters"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListClustersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusters(request *ListClustersRequest) (_result *ListClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClustersResponse{}
	_body, _err := client.ListClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEmrAvailableConfigWithOptions(request *ListEmrAvailableConfigRequest, runtime *util.RuntimeOptions) (_result *ListEmrAvailableConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEmrAvailableConfig"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEmrAvailableConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEmrAvailableConfig(request *ListEmrAvailableConfigRequest) (_result *ListEmrAvailableConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEmrAvailableConfigResponse{}
	_body, _err := client.ListEmrAvailableConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEmrAvailableResourceWithOptions(request *ListEmrAvailableResourceRequest, runtime *util.RuntimeOptions) (_result *ListEmrAvailableResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskType)) {
		query["DataDiskType"] = request.DataDiskType
	}

	if !tea.BoolValue(util.IsUnset(request.DepositType)) {
		query["DepositType"] = request.DepositType
	}

	if !tea.BoolValue(util.IsUnset(request.DestinationResource)) {
		query["DestinationResource"] = request.DestinationResource
	}

	if !tea.BoolValue(util.IsUnset(request.EmrVersion)) {
		query["EmrVersion"] = request.EmrVersion
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceChargeType)) {
		query["InstanceChargeType"] = request.InstanceChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceType)) {
		query["InstanceType"] = request.InstanceType
	}

	if !tea.BoolValue(util.IsUnset(request.NetType)) {
		query["NetType"] = request.NetType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SpotStrategy)) {
		query["SpotStrategy"] = request.SpotStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.SystemDiskType)) {
		query["SystemDiskType"] = request.SystemDiskType
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEmrAvailableResource"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEmrAvailableResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEmrAvailableResource(request *ListEmrAvailableResourceRequest) (_result *ListEmrAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEmrAvailableResourceResponse{}
	_body, _err := client.ListEmrAvailableResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEmrMainVersionWithOptions(request *ListEmrMainVersionRequest, runtime *util.RuntimeOptions) (_result *ListEmrMainVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EmrVersion)) {
		query["EmrVersion"] = request.EmrVersion
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.StackName)) {
		query["StackName"] = request.StackName
	}

	if !tea.BoolValue(util.IsUnset(request.StackVersion)) {
		query["StackVersion"] = request.StackVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListEmrMainVersion"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListEmrMainVersionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEmrMainVersion(request *ListEmrMainVersionRequest) (_result *ListEmrMainVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEmrMainVersionResponse{}
	_body, _err := client.ListEmrMainVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowWithOptions(request *ListFlowRequest, runtime *util.RuntimeOptions) (_result *ListFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Periodic)) {
		query["Periodic"] = request.Periodic
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlow(request *ListFlowRequest) (_result *ListFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowResponse{}
	_body, _err := client.ListFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowCategoryWithOptions(request *ListFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *ListFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Root)) {
		query["Root"] = request.Root
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowCategory"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowCategory(request *ListFlowCategoryRequest) (_result *ListFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowCategoryResponse{}
	_body, _err := client.ListFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowClusterWithOptions(request *ListFlowClusterRequest, runtime *util.RuntimeOptions) (_result *ListFlowClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowCluster"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowCluster(request *ListFlowClusterRequest) (_result *ListFlowClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowClusterResponse{}
	_body, _err := client.ListFlowClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowClusterAllWithOptions(request *ListFlowClusterAllRequest, runtime *util.RuntimeOptions) (_result *ListFlowClusterAllResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowClusterAll"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowClusterAllResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowClusterAll(request *ListFlowClusterAllRequest) (_result *ListFlowClusterAllResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowClusterAllResponse{}
	_body, _err := client.ListFlowClusterAllWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowClusterAllHostsWithOptions(request *ListFlowClusterAllHostsRequest, runtime *util.RuntimeOptions) (_result *ListFlowClusterAllHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowClusterAllHosts"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowClusterAllHostsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowClusterAllHosts(request *ListFlowClusterAllHostsRequest) (_result *ListFlowClusterAllHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowClusterAllHostsResponse{}
	_body, _err := client.ListFlowClusterAllHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowClusterHostWithOptions(request *ListFlowClusterHostRequest, runtime *util.RuntimeOptions) (_result *ListFlowClusterHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowClusterHost"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowClusterHostResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowClusterHost(request *ListFlowClusterHostRequest) (_result *ListFlowClusterHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowClusterHostResponse{}
	_body, _err := client.ListFlowClusterHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowInstanceWithOptions(request *ListFlowInstanceRequest, runtime *util.RuntimeOptions) (_result *ListFlowInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.FlowName)) {
		query["FlowName"] = request.FlowName
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeInstanceId)) {
		query["NodeInstanceId"] = request.NodeInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.Owner)) {
		query["Owner"] = request.Owner
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.TimeRange)) {
		query["TimeRange"] = request.TimeRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowInstance"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowInstance(request *ListFlowInstanceRequest) (_result *ListFlowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowInstanceResponse{}
	_body, _err := client.ListFlowInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowJobWithOptions(request *ListFlowJobRequest, runtime *util.RuntimeOptions) (_result *ListFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Adhoc)) {
		query["Adhoc"] = request.Adhoc
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowJob"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowJob(request *ListFlowJobRequest) (_result *ListFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowJobResponse{}
	_body, _err := client.ListFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowJobHistoryWithOptions(request *ListFlowJobHistoryRequest, runtime *util.RuntimeOptions) (_result *ListFlowJobHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobType)) {
		query["JobType"] = request.JobType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	if !tea.BoolValue(util.IsUnset(request.TimeRange)) {
		query["TimeRange"] = request.TimeRange
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowJobHistory"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowJobHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowJobHistory(request *ListFlowJobHistoryRequest) (_result *ListFlowJobHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowJobHistoryResponse{}
	_body, _err := client.ListFlowJobHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowNodeInstanceWithOptions(request *ListFlowNodeInstanceRequest, runtime *util.RuntimeOptions) (_result *ListFlowNodeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OrderType)) {
		query["OrderType"] = request.OrderType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.StatusList)) {
		query["StatusList"] = request.StatusList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowNodeInstance"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowNodeInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowNodeInstance(request *ListFlowNodeInstanceRequest) (_result *ListFlowNodeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowNodeInstanceResponse{}
	_body, _err := client.ListFlowNodeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowNodeInstanceContainerStatusWithOptions(request *ListFlowNodeInstanceContainerStatusRequest, runtime *util.RuntimeOptions) (_result *ListFlowNodeInstanceContainerStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeInstanceId)) {
		query["NodeInstanceId"] = request.NodeInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowNodeInstanceContainerStatus"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowNodeInstanceContainerStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowNodeInstanceContainerStatus(request *ListFlowNodeInstanceContainerStatusRequest) (_result *ListFlowNodeInstanceContainerStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowNodeInstanceContainerStatusResponse{}
	_body, _err := client.ListFlowNodeInstanceContainerStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowNodeSqlResultWithOptions(request *ListFlowNodeSqlResultRequest, runtime *util.RuntimeOptions) (_result *ListFlowNodeSqlResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Length)) {
		query["Length"] = request.Length
	}

	if !tea.BoolValue(util.IsUnset(request.NodeInstanceId)) {
		query["NodeInstanceId"] = request.NodeInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		query["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlIndex)) {
		query["SqlIndex"] = request.SqlIndex
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowNodeSqlResult"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowNodeSqlResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowNodeSqlResult(request *ListFlowNodeSqlResultRequest) (_result *ListFlowNodeSqlResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowNodeSqlResultResponse{}
	_body, _err := client.ListFlowNodeSqlResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowProjectWithOptions(request *ListFlowProjectRequest, runtime *util.RuntimeOptions) (_result *ListFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProductType)) {
		query["ProductType"] = request.ProductType
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowProject"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowProject(request *ListFlowProjectRequest) (_result *ListFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowProjectResponse{}
	_body, _err := client.ListFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowProjectClusterSettingWithOptions(request *ListFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *ListFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowProjectClusterSetting"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowProjectClusterSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowProjectClusterSetting(request *ListFlowProjectClusterSettingRequest) (_result *ListFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowProjectClusterSettingResponse{}
	_body, _err := client.ListFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowProjectUserWithOptions(request *ListFlowProjectUserRequest, runtime *util.RuntimeOptions) (_result *ListFlowProjectUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListFlowProjectUser"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListFlowProjectUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowProjectUser(request *ListFlowProjectUserRequest) (_result *ListFlowProjectUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowProjectUserResponse{}
	_body, _err := client.ListFlowProjectUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListResourcePoolWithOptions(request *ListResourcePoolRequest, runtime *util.RuntimeOptions) (_result *ListResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.PoolType)) {
		query["PoolType"] = request.PoolType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListResourcePool"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListResourcePoolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListResourcePool(request *ListResourcePoolRequest) (_result *ListResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListResourcePoolResponse{}
	_body, _err := client.ListResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScalingActivityV2WithOptions(request *ListScalingActivityV2Request, runtime *util.RuntimeOptions) (_result *ListScalingActivityV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterBizId)) {
		query["ClusterBizId"] = request.ClusterBizId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentSize)) {
		query["CurrentSize"] = request.CurrentSize
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupName)) {
		query["HostGroupName"] = request.HostGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.OrderField)) {
		query["OrderField"] = request.OrderField
	}

	if !tea.BoolValue(util.IsUnset(request.OrderMode)) {
		query["OrderMode"] = request.OrderMode
	}

	if !tea.BoolValue(util.IsUnset(request.PageCount)) {
		query["PageCount"] = request.PageCount
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingRuleName)) {
		query["ScalingRuleName"] = request.ScalingRuleName
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScalingActivityV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScalingActivityV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScalingActivityV2(request *ListScalingActivityV2Request) (_result *ListScalingActivityV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScalingActivityV2Response{}
	_body, _err := client.ListScalingActivityV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScalingConfigItemV2WithOptions(request *ListScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *ListScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigItemType)) {
		query["ConfigItemType"] = request.ConfigItemType
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScalingConfigItemV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScalingConfigItemV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScalingConfigItemV2(request *ListScalingConfigItemV2Request) (_result *ListScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScalingConfigItemV2Response{}
	_body, _err := client.ListScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScalingGroupV2WithOptions(request *ListScalingGroupV2Request, runtime *util.RuntimeOptions) (_result *ListScalingGroupV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterBizId)) {
		query["ClusterBizId"] = request.ClusterBizId
	}

	if !tea.BoolValue(util.IsUnset(request.CurrentSize)) {
		query["CurrentSize"] = request.CurrentSize
	}

	if !tea.BoolValue(util.IsUnset(request.Limit)) {
		query["Limit"] = request.Limit
	}

	if !tea.BoolValue(util.IsUnset(request.OrderField)) {
		query["OrderField"] = request.OrderField
	}

	if !tea.BoolValue(util.IsUnset(request.OrderMode)) {
		query["OrderMode"] = request.OrderMode
	}

	if !tea.BoolValue(util.IsUnset(request.PageCount)) {
		query["PageCount"] = request.PageCount
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		query["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListScalingGroupV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListScalingGroupV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScalingGroupV2(request *ListScalingGroupV2Request) (_result *ListScalingGroupV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScalingGroupV2Response{}
	_body, _err := client.ListScalingGroupV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterNameWithOptions(request *ModifyClusterNameRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClusterName"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClusterNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterName(request *ModifyClusterNameRequest) (_result *ModifyClusterNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterNameResponse{}
	_body, _err := client.ModifyClusterNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterServiceConfigWithOptions(request *ModifyClusterServiceConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterServiceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigParams)) {
		query["ConfigParams"] = request.ConfigParams
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigType)) {
		query["ConfigType"] = request.ConfigType
	}

	if !tea.BoolValue(util.IsUnset(request.CustomConfigParams)) {
		query["CustomConfigParams"] = request.CustomConfigParams
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayClusterIdList)) {
		query["GatewayClusterIdList"] = request.GatewayClusterIdList
	}

	if !tea.BoolValue(util.IsUnset(request.GroupId)) {
		query["GroupId"] = request.GroupId
	}

	if !tea.BoolValue(util.IsUnset(request.HostInstanceId)) {
		query["HostInstanceId"] = request.HostInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.RefreshHostConfig)) {
		query["RefreshHostConfig"] = request.RefreshHostConfig
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClusterServiceConfig"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClusterServiceConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterServiceConfig(request *ModifyClusterServiceConfigRequest) (_result *ModifyClusterServiceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterServiceConfigResponse{}
	_body, _err := client.ModifyClusterServiceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterTemplateWithOptions(request *ModifyClusterTemplateRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoRenew)) {
		query["AutoRenew"] = request.AutoRenew
	}

	if !tea.BoolValue(util.IsUnset(request.BizId)) {
		query["BizId"] = request.BizId
	}

	if !tea.BoolValue(util.IsUnset(request.BootstrapAction)) {
		query["BootstrapAction"] = request.BootstrapAction
	}

	if !tea.BoolValue(util.IsUnset(request.ChargeType)) {
		query["ChargeType"] = request.ChargeType
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterType)) {
		query["ClusterType"] = request.ClusterType
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Configurations)) {
		query["Configurations"] = request.Configurations
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskEncrypted)) {
		query["DataDiskEncrypted"] = request.DataDiskEncrypted
	}

	if !tea.BoolValue(util.IsUnset(request.DataDiskKMSKeyId)) {
		query["DataDiskKMSKeyId"] = request.DataDiskKMSKeyId
	}

	if !tea.BoolValue(util.IsUnset(request.DepositType)) {
		query["DepositType"] = request.DepositType
	}

	if !tea.BoolValue(util.IsUnset(request.EasEnable)) {
		query["EasEnable"] = request.EasEnable
	}

	if !tea.BoolValue(util.IsUnset(request.EmrVer)) {
		query["EmrVer"] = request.EmrVer
	}

	if !tea.BoolValue(util.IsUnset(request.HighAvailabilityEnable)) {
		query["HighAvailabilityEnable"] = request.HighAvailabilityEnable
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroup)) {
		query["HostGroup"] = request.HostGroup
	}

	if !tea.BoolValue(util.IsUnset(request.InitCustomHiveMetaDb)) {
		query["InitCustomHiveMetaDb"] = request.InitCustomHiveMetaDb
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceGeneration)) {
		query["InstanceGeneration"] = request.InstanceGeneration
	}

	if !tea.BoolValue(util.IsUnset(request.IoOptimized)) {
		query["IoOptimized"] = request.IoOptimized
	}

	if !tea.BoolValue(util.IsUnset(request.IsOpenPublicIp)) {
		query["IsOpenPublicIp"] = request.IsOpenPublicIp
	}

	if !tea.BoolValue(util.IsUnset(request.KeyPairName)) {
		query["KeyPairName"] = request.KeyPairName
	}

	if !tea.BoolValue(util.IsUnset(request.LogPath)) {
		query["LogPath"] = request.LogPath
	}

	if !tea.BoolValue(util.IsUnset(request.MachineType)) {
		query["MachineType"] = request.MachineType
	}

	if !tea.BoolValue(util.IsUnset(request.MasterPwd)) {
		query["MasterPwd"] = request.MasterPwd
	}

	if !tea.BoolValue(util.IsUnset(request.MetaStoreConf)) {
		query["MetaStoreConf"] = request.MetaStoreConf
	}

	if !tea.BoolValue(util.IsUnset(request.MetaStoreType)) {
		query["MetaStoreType"] = request.MetaStoreType
	}

	if !tea.BoolValue(util.IsUnset(request.NetType)) {
		query["NetType"] = request.NetType
	}

	if !tea.BoolValue(util.IsUnset(request.OptionSoftWareList)) {
		query["OptionSoftWareList"] = request.OptionSoftWareList
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		query["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupId)) {
		query["SecurityGroupId"] = request.SecurityGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SecurityGroupName)) {
		query["SecurityGroupName"] = request.SecurityGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.SshEnable)) {
		query["SshEnable"] = request.SshEnable
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	if !tea.BoolValue(util.IsUnset(request.TemplateName)) {
		query["TemplateName"] = request.TemplateName
	}

	if !tea.BoolValue(util.IsUnset(request.UseCustomHiveMetaDb)) {
		query["UseCustomHiveMetaDb"] = request.UseCustomHiveMetaDb
	}

	if !tea.BoolValue(util.IsUnset(request.UseLocalMetaDb)) {
		query["UseLocalMetaDb"] = request.UseLocalMetaDb
	}

	if !tea.BoolValue(util.IsUnset(request.UserDefinedEmrEcsRole)) {
		query["UserDefinedEmrEcsRole"] = request.UserDefinedEmrEcsRole
	}

	if !tea.BoolValue(util.IsUnset(request.VSwitchId)) {
		query["VSwitchId"] = request.VSwitchId
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		query["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyClusterTemplate"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyClusterTemplateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterTemplate(request *ModifyClusterTemplateRequest) (_result *ModifyClusterTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterTemplateResponse{}
	_body, _err := client.ModifyClusterTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowCategoryWithOptions(request *ModifyFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentId)) {
		query["ParentId"] = request.ParentId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyFlowCategory"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyFlowCategoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowCategory(request *ModifyFlowCategoryRequest) (_result *ModifyFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowCategoryResponse{}
	_body, _err := client.ModifyFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowForWebWithOptions(request *ModifyFlowForWebRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowForWebResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlertConf)) {
		query["AlertConf"] = request.AlertConf
	}

	if !tea.BoolValue(util.IsUnset(request.AlertDingDingGroupBizId)) {
		query["AlertDingDingGroupBizId"] = request.AlertDingDingGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.AlertUserGroupBizId)) {
		query["AlertUserGroupBizId"] = request.AlertUserGroupBizId
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.CreateCluster)) {
		query["CreateCluster"] = request.CreateCluster
	}

	if !tea.BoolValue(util.IsUnset(request.CronExpr)) {
		query["CronExpr"] = request.CronExpr
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EndSchedule)) {
		query["EndSchedule"] = request.EndSchedule
	}

	if !tea.BoolValue(util.IsUnset(request.Graph)) {
		query["Graph"] = request.Graph
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Lifecycle)) {
		query["Lifecycle"] = request.Lifecycle
	}

	if !tea.BoolValue(util.IsUnset(request.LogArchiveLocation)) {
		query["LogArchiveLocation"] = request.LogArchiveLocation
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ParentCategory)) {
		query["ParentCategory"] = request.ParentCategory
	}

	if !tea.BoolValue(util.IsUnset(request.ParentFlowList)) {
		query["ParentFlowList"] = request.ParentFlowList
	}

	if !tea.BoolValue(util.IsUnset(request.Periodic)) {
		query["Periodic"] = request.Periodic
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.StartSchedule)) {
		query["StartSchedule"] = request.StartSchedule
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyFlowForWeb"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyFlowForWebResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowForWeb(request *ModifyFlowForWebRequest) (_result *ModifyFlowForWebResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowForWebResponse{}
	_body, _err := client.ModifyFlowForWebWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowProjectWithOptions(request *ModifyFlowProjectRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyFlowProject"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyFlowProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowProject(request *ModifyFlowProjectRequest) (_result *ModifyFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowProjectResponse{}
	_body, _err := client.ModifyFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowProjectClusterSettingWithOptions(request *ModifyFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultQueue)) {
		query["DefaultQueue"] = request.DefaultQueue
	}

	if !tea.BoolValue(util.IsUnset(request.DefaultUser)) {
		query["DefaultUser"] = request.DefaultUser
	}

	if !tea.BoolValue(util.IsUnset(request.HostList)) {
		query["HostList"] = request.HostList
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.QueueList)) {
		query["QueueList"] = request.QueueList
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.UserList)) {
		query["UserList"] = request.UserList
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyFlowProjectClusterSetting"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyFlowProjectClusterSettingResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowProjectClusterSetting(request *ModifyFlowProjectClusterSettingRequest) (_result *ModifyFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowProjectClusterSettingResponse{}
	_body, _err := client.ModifyFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourcePoolWithOptions(request *ModifyResourcePoolRequest, runtime *util.RuntimeOptions) (_result *ModifyResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Active)) {
		query["Active"] = request.Active
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.Yarnsiteconfig)) {
		query["Yarnsiteconfig"] = request.Yarnsiteconfig
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyResourcePool"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyResourcePoolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourcePool(request *ModifyResourcePoolRequest) (_result *ModifyResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourcePoolResponse{}
	_body, _err := client.ModifyResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourcePoolSchedulerTypeWithOptions(request *ModifyResourcePoolSchedulerTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyResourcePoolSchedulerTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.SchedulerType)) {
		query["SchedulerType"] = request.SchedulerType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyResourcePoolSchedulerType"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyResourcePoolSchedulerTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourcePoolSchedulerType(request *ModifyResourcePoolSchedulerTypeRequest) (_result *ModifyResourcePoolSchedulerTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourcePoolSchedulerTypeResponse{}
	_body, _err := client.ModifyResourcePoolSchedulerTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourceQueueWithOptions(request *ModifyResourceQueueRequest, runtime *util.RuntimeOptions) (_result *ModifyResourceQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Config)) {
		query["Config"] = request.Config
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Leaf)) {
		query["Leaf"] = request.Leaf
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ParentQueueId)) {
		query["ParentQueueId"] = request.ParentQueueId
	}

	if !tea.BoolValue(util.IsUnset(request.QualifiedName)) {
		query["QualifiedName"] = request.QualifiedName
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourcePoolId)) {
		query["ResourcePoolId"] = request.ResourcePoolId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyResourceQueue"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyResourceQueueResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourceQueue(request *ModifyResourceQueueRequest) (_result *ModifyResourceQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourceQueueResponse{}
	_body, _err := client.ModifyResourceQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScalingConfigItemV2WithOptions(request *ModifyScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *ModifyScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigItemBizId)) {
		query["ConfigItemBizId"] = request.ConfigItemBizId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigItemInformation)) {
		query["ConfigItemInformation"] = request.ConfigItemInformation
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigItemType)) {
		query["ConfigItemType"] = request.ConfigItemType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyScalingConfigItemV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyScalingConfigItemV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScalingConfigItemV2(request *ModifyScalingConfigItemV2Request) (_result *ModifyScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScalingConfigItemV2Response{}
	_body, _err := client.ModifyScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScalingGroupV2WithOptions(request *ModifyScalingGroupV2Request, runtime *util.RuntimeOptions) (_result *ModifyScalingGroupV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyScalingGroupV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyScalingGroupV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScalingGroupV2(request *ModifyScalingGroupV2Request) (_result *ModifyScalingGroupV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScalingGroupV2Response{}
	_body, _err := client.ModifyScalingGroupV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefreshClusterResourcePoolWithOptions(request *RefreshClusterResourcePoolRequest, runtime *util.RuntimeOptions) (_result *RefreshClusterResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourcePoolId)) {
		query["ResourcePoolId"] = request.ResourcePoolId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RefreshClusterResourcePool"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RefreshClusterResourcePoolResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefreshClusterResourcePool(request *RefreshClusterResourcePoolRequest) (_result *RefreshClusterResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshClusterResourcePoolResponse{}
	_body, _err := client.RefreshClusterResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseClusterWithOptions(request *ReleaseClusterRequest, runtime *util.RuntimeOptions) (_result *ReleaseClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ForceRelease)) {
		query["ForceRelease"] = request.ForceRelease
	}

	if !tea.BoolValue(util.IsUnset(request.Id)) {
		query["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseCluster"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseClusterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseCluster(request *ReleaseClusterRequest) (_result *ReleaseClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseClusterResponse{}
	_body, _err := client.ReleaseClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseClusterHostGroupWithOptions(request *ReleaseClusterHostGroupRequest, runtime *util.RuntimeOptions) (_result *ReleaseClusterHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.DecommissionTimeout)) {
		query["DecommissionTimeout"] = request.DecommissionTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.EnableGracefulDecommission)) {
		query["EnableGracefulDecommission"] = request.EnableGracefulDecommission
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupId)) {
		query["HostGroupId"] = request.HostGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIdList)) {
		query["InstanceIdList"] = request.InstanceIdList
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ReleaseNumber)) {
		query["ReleaseNumber"] = request.ReleaseNumber
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ReleaseClusterHostGroup"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ReleaseClusterHostGroupResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseClusterHostGroup(request *ReleaseClusterHostGroupRequest) (_result *ReleaseClusterHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseClusterHostGroupResponse{}
	_body, _err := client.ReleaseClusterHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveScalingConfigItemV2WithOptions(request *RemoveScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *RemoveScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConfigItemBizId)) {
		query["ConfigItemBizId"] = request.ConfigItemBizId
	}

	if !tea.BoolValue(util.IsUnset(request.ConfigItemType)) {
		query["ConfigItemType"] = request.ConfigItemType
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RemoveScalingConfigItemV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RemoveScalingConfigItemV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveScalingConfigItemV2(request *RemoveScalingConfigItemV2Request) (_result *RemoveScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveScalingConfigItemV2Response{}
	_body, _err := client.RemoveScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RerunFlowWithOptions(request *RerunFlowRequest, runtime *util.RuntimeOptions) (_result *RerunFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowInstanceId)) {
		query["FlowInstanceId"] = request.FlowInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ReRunFail)) {
		query["ReRunFail"] = request.ReRunFail
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RerunFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RerunFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RerunFlow(request *RerunFlowRequest) (_result *RerunFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RerunFlowResponse{}
	_body, _err := client.RerunFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResizeClusterV2WithOptions(request *ResizeClusterV2Request, runtime *util.RuntimeOptions) (_result *ResizeClusterV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AutoPayOrder)) {
		query["AutoPayOrder"] = request.AutoPayOrder
	}

	if !tea.BoolValue(util.IsUnset(request.ClickhouseConf)) {
		query["ClickhouseConf"] = request.ClickhouseConf
	}

	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.HostComponentInfo)) {
		query["HostComponentInfo"] = request.HostComponentInfo
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroup)) {
		query["HostGroup"] = request.HostGroup
	}

	if !tea.BoolValue(util.IsUnset(request.IsOpenPublicIp)) {
		query["IsOpenPublicIp"] = request.IsOpenPublicIp
	}

	if !tea.BoolValue(util.IsUnset(request.PromotionInfo)) {
		query["PromotionInfo"] = request.PromotionInfo
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.VswitchId)) {
		query["VswitchId"] = request.VswitchId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResizeClusterV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResizeClusterV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResizeClusterV2(request *ResizeClusterV2Request) (_result *ResizeClusterV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResizeClusterV2Response{}
	_body, _err := client.ResizeClusterV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeFlowWithOptions(request *ResumeFlowRequest, runtime *util.RuntimeOptions) (_result *ResumeFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowInstanceId)) {
		query["FlowInstanceId"] = request.FlowInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ResumeFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResumeFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeFlow(request *ResumeFlowRequest) (_result *ResumeFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeFlowResponse{}
	_body, _err := client.ResumeFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunClusterServiceActionWithOptions(request *RunClusterServiceActionRequest, runtime *util.RuntimeOptions) (_result *RunClusterServiceActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Comment)) {
		query["Comment"] = request.Comment
	}

	if !tea.BoolValue(util.IsUnset(request.ComponentNameList)) {
		query["ComponentNameList"] = request.ComponentNameList
	}

	if !tea.BoolValue(util.IsUnset(request.CustomCommand)) {
		query["CustomCommand"] = request.CustomCommand
	}

	if !tea.BoolValue(util.IsUnset(request.CustomParams)) {
		query["CustomParams"] = request.CustomParams
	}

	if !tea.BoolValue(util.IsUnset(request.ExecuteStrategy)) {
		query["ExecuteStrategy"] = request.ExecuteStrategy
	}

	if !tea.BoolValue(util.IsUnset(request.HostGroupIdList)) {
		query["HostGroupIdList"] = request.HostGroupIdList
	}

	if !tea.BoolValue(util.IsUnset(request.HostIdList)) {
		query["HostIdList"] = request.HostIdList
	}

	if !tea.BoolValue(util.IsUnset(request.Interval)) {
		query["Interval"] = request.Interval
	}

	if !tea.BoolValue(util.IsUnset(request.IsRolling)) {
		query["IsRolling"] = request.IsRolling
	}

	if !tea.BoolValue(util.IsUnset(request.NodeCountPerBatch)) {
		query["NodeCountPerBatch"] = request.NodeCountPerBatch
	}

	if !tea.BoolValue(util.IsUnset(request.OnlyRestartStaleConfigNodes)) {
		query["OnlyRestartStaleConfigNodes"] = request.OnlyRestartStaleConfigNodes
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceActionName)) {
		query["ServiceActionName"] = request.ServiceActionName
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceName)) {
		query["ServiceName"] = request.ServiceName
	}

	if !tea.BoolValue(util.IsUnset(request.TotlerateFailCount)) {
		query["TotlerateFailCount"] = request.TotlerateFailCount
	}

	if !tea.BoolValue(util.IsUnset(request.TurnOnMaintenanceMode)) {
		query["TurnOnMaintenanceMode"] = request.TurnOnMaintenanceMode
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunClusterServiceAction"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunClusterServiceActionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunClusterServiceAction(request *RunClusterServiceActionRequest) (_result *RunClusterServiceActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunClusterServiceActionResponse{}
	_body, _err := client.RunClusterServiceActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunScalingActionV2WithOptions(request *RunScalingActionV2Request, runtime *util.RuntimeOptions) (_result *RunScalingActionV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ActionParam)) {
		query["ActionParam"] = request.ActionParam
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingActionType)) {
		query["ScalingActionType"] = request.ScalingActionType
	}

	if !tea.BoolValue(util.IsUnset(request.ScalingGroupBizId)) {
		query["ScalingGroupBizId"] = request.ScalingGroupBizId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunScalingActionV2"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunScalingActionV2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunScalingActionV2(request *RunScalingActionV2Request) (_result *RunScalingActionV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunScalingActionV2Response{}
	_body, _err := client.RunScalingActionV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartFlowWithOptions(request *StartFlowRequest, runtime *util.RuntimeOptions) (_result *StartFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowInstanceId)) {
		query["FlowInstanceId"] = request.FlowInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StartFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartFlow(request *StartFlowRequest) (_result *StartFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartFlowResponse{}
	_body, _err := client.StartFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFlowWithOptions(request *SubmitFlowRequest, runtime *util.RuntimeOptions) (_result *SubmitFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Conf)) {
		query["Conf"] = request.Conf
	}

	if !tea.BoolValue(util.IsUnset(request.FlowId)) {
		query["FlowId"] = request.FlowId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFlow(request *SubmitFlowRequest) (_result *SubmitFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFlowResponse{}
	_body, _err := client.SubmitFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFlowJobWithOptions(request *SubmitFlowJobRequest, runtime *util.RuntimeOptions) (_result *SubmitFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ClusterId)) {
		query["ClusterId"] = request.ClusterId
	}

	if !tea.BoolValue(util.IsUnset(request.Conf)) {
		query["Conf"] = request.Conf
	}

	if !tea.BoolValue(util.IsUnset(request.HostName)) {
		query["HostName"] = request.HostName
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobInstanceId)) {
		query["JobInstanceId"] = request.JobInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Namespace)) {
		query["Namespace"] = request.Namespace
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitFlowJob"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitFlowJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFlowJob(request *SubmitFlowJobRequest) (_result *SubmitFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFlowJobResponse{}
	_body, _err := client.SubmitFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SuspendFlowWithOptions(request *SuspendFlowRequest, runtime *util.RuntimeOptions) (_result *SuspendFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FlowInstanceId)) {
		query["FlowInstanceId"] = request.FlowInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		query["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SuspendFlow"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SuspendFlowResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SuspendFlow(request *SuspendFlowRequest) (_result *SuspendFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendFlowResponse{}
	_body, _err := client.SuspendFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.RegionId)) {
		query["RegionId"] = request.RegionId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceOwnerId)) {
		query["ResourceOwnerId"] = request.ResourceOwnerId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2016-04-08"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
