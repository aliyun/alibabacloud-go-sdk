// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AddClusterServiceRequest struct {
	ResourceOwnerId *int64                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Comment         *string                            `json:"Comment,omitempty" xml:"Comment,omitempty"`
	ClusterId       *string                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Service         []*AddClusterServiceRequestService `json:"Service,omitempty" xml:"Service,omitempty" type:"Repeated"`
}

func (s AddClusterServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddClusterServiceRequest) GoString() string {
	return s.String()
}

func (s *AddClusterServiceRequest) SetResourceOwnerId(v int64) *AddClusterServiceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddClusterServiceRequest) SetRegionId(v string) *AddClusterServiceRequest {
	s.RegionId = &v
	return s
}

func (s *AddClusterServiceRequest) SetComment(v string) *AddClusterServiceRequest {
	s.Comment = &v
	return s
}

func (s *AddClusterServiceRequest) SetClusterId(v string) *AddClusterServiceRequest {
	s.ClusterId = &v
	return s
}

func (s *AddClusterServiceRequest) SetService(v []*AddClusterServiceRequestService) *AddClusterServiceRequest {
	s.Service = v
	return s
}

type AddClusterServiceRequestService struct {
	ServiceVersion *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	ServiceName    *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s AddClusterServiceRequestService) String() string {
	return tea.Prettify(s)
}

func (s AddClusterServiceRequestService) GoString() string {
	return s.String()
}

func (s *AddClusterServiceRequestService) SetServiceVersion(v string) *AddClusterServiceRequestService {
	s.ServiceVersion = &v
	return s
}

func (s *AddClusterServiceRequestService) SetServiceName(v string) *AddClusterServiceRequestService {
	s.ServiceName = &v
	return s
}

type AddClusterServiceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddClusterServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddClusterServiceResponseBody) GoString() string {
	return s.String()
}

func (s *AddClusterServiceResponseBody) SetRequestId(v string) *AddClusterServiceResponseBody {
	s.RequestId = &v
	return s
}

type AddClusterServiceResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddClusterServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddClusterServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddClusterServiceResponse) GoString() string {
	return s.String()
}

func (s *AddClusterServiceResponse) SetHeaders(v map[string]*string) *AddClusterServiceResponse {
	s.Headers = v
	return s
}

func (s *AddClusterServiceResponse) SetBody(v *AddClusterServiceResponseBody) *AddClusterServiceResponse {
	s.Body = v
	return s
}

type AddScalingConfigItemV2Request struct {
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId       *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ScalingGroupBizId     *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ConfigItemType        *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	ConfigItemInformation *string `json:"ConfigItemInformation,omitempty" xml:"ConfigItemInformation,omitempty"`
}

func (s AddScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s AddScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *AddScalingConfigItemV2Request) SetResourceOwnerId(v int64) *AddScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetRegionId(v string) *AddScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetResourceGroupId(v string) *AddScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetScalingGroupBizId(v string) *AddScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetConfigItemType(v string) *AddScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *AddScalingConfigItemV2Request) SetConfigItemInformation(v string) *AddScalingConfigItemV2Request {
	s.ConfigItemInformation = &v
	return s
}

type AddScalingConfigItemV2ResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s AddScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *AddScalingConfigItemV2ResponseBody) SetRequestId(v string) *AddScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddScalingConfigItemV2ResponseBody) SetData(v string) *AddScalingConfigItemV2ResponseBody {
	s.Data = &v
	return s
}

type AddScalingConfigItemV2Response struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s AddScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *AddScalingConfigItemV2Response) SetHeaders(v map[string]*string) *AddScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *AddScalingConfigItemV2Response) SetBody(v *AddScalingConfigItemV2ResponseBody) *AddScalingConfigItemV2Response {
	s.Body = v
	return s
}

type AuthorizeSecurityGroupRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	BizType         *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
	BizContent      *string `json:"BizContent,omitempty" xml:"BizContent,omitempty"`
}

func (s AuthorizeSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupRequest) SetResourceOwnerId(v int64) *AuthorizeSecurityGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetRegionId(v string) *AuthorizeSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetClusterId(v string) *AuthorizeSecurityGroupRequest {
	s.ClusterId = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetBizType(v string) *AuthorizeSecurityGroupRequest {
	s.BizType = &v
	return s
}

func (s *AuthorizeSecurityGroupRequest) SetBizContent(v string) *AuthorizeSecurityGroupRequest {
	s.BizContent = &v
	return s
}

type AuthorizeSecurityGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AuthorizeSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponseBody) SetRequestId(v string) *AuthorizeSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type AuthorizeSecurityGroupResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AuthorizeSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AuthorizeSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s AuthorizeSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *AuthorizeSecurityGroupResponse) SetHeaders(v map[string]*string) *AuthorizeSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *AuthorizeSecurityGroupResponse) SetBody(v *AuthorizeSecurityGroupResponseBody) *AuthorizeSecurityGroupResponse {
	s.Body = v
	return s
}

type CancelOrderRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s CancelOrderRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelOrderRequest) GoString() string {
	return s.String()
}

func (s *CancelOrderRequest) SetResourceOwnerId(v int64) *CancelOrderRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelOrderRequest) SetRegionId(v string) *CancelOrderRequest {
	s.RegionId = &v
	return s
}

func (s *CancelOrderRequest) SetClusterId(v string) *CancelOrderRequest {
	s.ClusterId = &v
	return s
}

type CancelOrderResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId *string `json:"clusterId,omitempty" xml:"clusterId,omitempty"`
}

func (s CancelOrderResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelOrderResponseBody) GoString() string {
	return s.String()
}

func (s *CancelOrderResponseBody) SetRequestId(v string) *CancelOrderResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelOrderResponseBody) SetClusterId(v string) *CancelOrderResponseBody {
	s.ClusterId = &v
	return s
}

type CancelOrderResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelOrderResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelOrderResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelOrderResponse) GoString() string {
	return s.String()
}

func (s *CancelOrderResponse) SetHeaders(v map[string]*string) *CancelOrderResponse {
	s.Headers = v
	return s
}

func (s *CancelOrderResponse) SetBody(v *CancelOrderResponseBody) *CancelOrderResponse {
	s.Body = v
	return s
}

type CleanupFlowEntitySnapshotRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EntityIdList    *string `json:"EntityIdList,omitempty" xml:"EntityIdList,omitempty"`
}

func (s CleanupFlowEntitySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CleanupFlowEntitySnapshotRequest) GoString() string {
	return s.String()
}

func (s *CleanupFlowEntitySnapshotRequest) SetResourceOwnerId(v int64) *CleanupFlowEntitySnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CleanupFlowEntitySnapshotRequest) SetRegionId(v string) *CleanupFlowEntitySnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *CleanupFlowEntitySnapshotRequest) SetEntityIdList(v string) *CleanupFlowEntitySnapshotRequest {
	s.EntityIdList = &v
	return s
}

type CleanupFlowEntitySnapshotResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CleanupFlowEntitySnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CleanupFlowEntitySnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CleanupFlowEntitySnapshotResponseBody) SetRequestId(v string) *CleanupFlowEntitySnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *CleanupFlowEntitySnapshotResponseBody) SetData(v bool) *CleanupFlowEntitySnapshotResponseBody {
	s.Data = &v
	return s
}

type CleanupFlowEntitySnapshotResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CleanupFlowEntitySnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CleanupFlowEntitySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CleanupFlowEntitySnapshotResponse) GoString() string {
	return s.String()
}

func (s *CleanupFlowEntitySnapshotResponse) SetHeaders(v map[string]*string) *CleanupFlowEntitySnapshotResponse {
	s.Headers = v
	return s
}

func (s *CleanupFlowEntitySnapshotResponse) SetBody(v *CleanupFlowEntitySnapshotResponseBody) *CleanupFlowEntitySnapshotResponse {
	s.Body = v
	return s
}

type CloneFlowRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CloneFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowRequest) GoString() string {
	return s.String()
}

func (s *CloneFlowRequest) SetProjectId(v string) *CloneFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *CloneFlowRequest) SetId(v string) *CloneFlowRequest {
	s.Id = &v
	return s
}

func (s *CloneFlowRequest) SetRegionId(v string) *CloneFlowRequest {
	s.RegionId = &v
	return s
}

type CloneFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CloneFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CloneFlowResponseBody) SetRequestId(v string) *CloneFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloneFlowResponseBody) SetId(v string) *CloneFlowResponseBody {
	s.Id = &v
	return s
}

type CloneFlowResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CloneFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CloneFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowResponse) GoString() string {
	return s.String()
}

func (s *CloneFlowResponse) SetHeaders(v map[string]*string) *CloneFlowResponse {
	s.Headers = v
	return s
}

func (s *CloneFlowResponse) SetBody(v *CloneFlowResponseBody) *CloneFlowResponse {
	s.Body = v
	return s
}

type CloneFlowJobRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s CloneFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowJobRequest) GoString() string {
	return s.String()
}

func (s *CloneFlowJobRequest) SetProjectId(v string) *CloneFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *CloneFlowJobRequest) SetId(v string) *CloneFlowJobRequest {
	s.Id = &v
	return s
}

func (s *CloneFlowJobRequest) SetName(v string) *CloneFlowJobRequest {
	s.Name = &v
	return s
}

func (s *CloneFlowJobRequest) SetRegionId(v string) *CloneFlowJobRequest {
	s.RegionId = &v
	return s
}

type CloneFlowJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CloneFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *CloneFlowJobResponseBody) SetRequestId(v string) *CloneFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CloneFlowJobResponseBody) SetId(v string) *CloneFlowJobResponseBody {
	s.Id = &v
	return s
}

type CloneFlowJobResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CloneFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CloneFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CloneFlowJobResponse) GoString() string {
	return s.String()
}

func (s *CloneFlowJobResponse) SetHeaders(v map[string]*string) *CloneFlowJobResponse {
	s.Headers = v
	return s
}

func (s *CloneFlowJobResponse) SetBody(v *CloneFlowJobResponseBody) *CloneFlowJobResponse {
	s.Body = v
	return s
}

type CommitFlowEntitySnapshotRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EntityType      *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Message         *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s CommitFlowEntitySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s CommitFlowEntitySnapshotRequest) GoString() string {
	return s.String()
}

func (s *CommitFlowEntitySnapshotRequest) SetResourceOwnerId(v int64) *CommitFlowEntitySnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CommitFlowEntitySnapshotRequest) SetRegionId(v string) *CommitFlowEntitySnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *CommitFlowEntitySnapshotRequest) SetEntityType(v string) *CommitFlowEntitySnapshotRequest {
	s.EntityType = &v
	return s
}

func (s *CommitFlowEntitySnapshotRequest) SetEntityId(v string) *CommitFlowEntitySnapshotRequest {
	s.EntityId = &v
	return s
}

func (s *CommitFlowEntitySnapshotRequest) SetMessage(v string) *CommitFlowEntitySnapshotRequest {
	s.Message = &v
	return s
}

type CommitFlowEntitySnapshotResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CommitFlowEntitySnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CommitFlowEntitySnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *CommitFlowEntitySnapshotResponseBody) SetRequestId(v string) *CommitFlowEntitySnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *CommitFlowEntitySnapshotResponseBody) SetData(v string) *CommitFlowEntitySnapshotResponseBody {
	s.Data = &v
	return s
}

type CommitFlowEntitySnapshotResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CommitFlowEntitySnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CommitFlowEntitySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s CommitFlowEntitySnapshotResponse) GoString() string {
	return s.String()
}

func (s *CommitFlowEntitySnapshotResponse) SetHeaders(v map[string]*string) *CommitFlowEntitySnapshotResponse {
	s.Headers = v
	return s
}

func (s *CommitFlowEntitySnapshotResponse) SetBody(v *CommitFlowEntitySnapshotResponseBody) *CommitFlowEntitySnapshotResponse {
	s.Body = v
	return s
}

type CreateBackupRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BackupPlanId    *string `json:"BackupPlanId,omitempty" xml:"BackupPlanId,omitempty"`
	MetadataType    *string `json:"MetadataType,omitempty" xml:"MetadataType,omitempty"`
}

func (s CreateBackupRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupRequest) SetResourceOwnerId(v int64) *CreateBackupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateBackupRequest) SetRegionId(v string) *CreateBackupRequest {
	s.RegionId = &v
	return s
}

func (s *CreateBackupRequest) SetBackupPlanId(v string) *CreateBackupRequest {
	s.BackupPlanId = &v
	return s
}

func (s *CreateBackupRequest) SetMetadataType(v string) *CreateBackupRequest {
	s.MetadataType = &v
	return s
}

type CreateBackupResponseBody struct {
	TriggerType      *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	EndTime          *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	GmtModified      *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskStatus       *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskDetail       *string `json:"TaskDetail,omitempty" xml:"TaskDetail,omitempty"`
	TriggerUser      *string `json:"TriggerUser,omitempty" xml:"TriggerUser,omitempty"`
	GmtCreate        *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	TaskProcess      *int32  `json:"TaskProcess,omitempty" xml:"TaskProcess,omitempty"`
	ClusterBizId     *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	TaskType         *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	BizId            *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	DataSourceId     *int64  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	HostName         *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	EcmTaskId        *int64  `json:"EcmTaskId,omitempty" xml:"EcmTaskId,omitempty"`
	TaskResultDetail *string `json:"TaskResultDetail,omitempty" xml:"TaskResultDetail,omitempty"`
}

func (s CreateBackupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackupResponseBody) SetTriggerType(v string) *CreateBackupResponseBody {
	s.TriggerType = &v
	return s
}

func (s *CreateBackupResponseBody) SetEndTime(v int64) *CreateBackupResponseBody {
	s.EndTime = &v
	return s
}

func (s *CreateBackupResponseBody) SetRequestId(v string) *CreateBackupResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBackupResponseBody) SetGmtModified(v int64) *CreateBackupResponseBody {
	s.GmtModified = &v
	return s
}

func (s *CreateBackupResponseBody) SetStartTime(v int64) *CreateBackupResponseBody {
	s.StartTime = &v
	return s
}

func (s *CreateBackupResponseBody) SetTaskStatus(v string) *CreateBackupResponseBody {
	s.TaskStatus = &v
	return s
}

func (s *CreateBackupResponseBody) SetTaskDetail(v string) *CreateBackupResponseBody {
	s.TaskDetail = &v
	return s
}

func (s *CreateBackupResponseBody) SetTriggerUser(v string) *CreateBackupResponseBody {
	s.TriggerUser = &v
	return s
}

func (s *CreateBackupResponseBody) SetGmtCreate(v int64) *CreateBackupResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *CreateBackupResponseBody) SetTaskProcess(v int32) *CreateBackupResponseBody {
	s.TaskProcess = &v
	return s
}

func (s *CreateBackupResponseBody) SetClusterBizId(v string) *CreateBackupResponseBody {
	s.ClusterBizId = &v
	return s
}

func (s *CreateBackupResponseBody) SetTaskType(v string) *CreateBackupResponseBody {
	s.TaskType = &v
	return s
}

func (s *CreateBackupResponseBody) SetBizId(v string) *CreateBackupResponseBody {
	s.BizId = &v
	return s
}

func (s *CreateBackupResponseBody) SetDataSourceId(v int64) *CreateBackupResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *CreateBackupResponseBody) SetHostName(v string) *CreateBackupResponseBody {
	s.HostName = &v
	return s
}

func (s *CreateBackupResponseBody) SetEcmTaskId(v int64) *CreateBackupResponseBody {
	s.EcmTaskId = &v
	return s
}

func (s *CreateBackupResponseBody) SetTaskResultDetail(v string) *CreateBackupResponseBody {
	s.TaskResultDetail = &v
	return s
}

type CreateBackupResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateBackupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBackupResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupResponse) GoString() string {
	return s.String()
}

func (s *CreateBackupResponse) SetHeaders(v map[string]*string) *CreateBackupResponse {
	s.Headers = v
	return s
}

func (s *CreateBackupResponse) SetBody(v *CreateBackupResponseBody) *CreateBackupResponse {
	s.Body = v
	return s
}

type CreateBackupPlanRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RootPath        *string `json:"RootPath,omitempty" xml:"RootPath,omitempty"`
}

func (s CreateBackupPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupPlanRequest) GoString() string {
	return s.String()
}

func (s *CreateBackupPlanRequest) SetResourceOwnerId(v int64) *CreateBackupPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateBackupPlanRequest) SetRegionId(v string) *CreateBackupPlanRequest {
	s.RegionId = &v
	return s
}

func (s *CreateBackupPlanRequest) SetName(v string) *CreateBackupPlanRequest {
	s.Name = &v
	return s
}

func (s *CreateBackupPlanRequest) SetDescription(v string) *CreateBackupPlanRequest {
	s.Description = &v
	return s
}

func (s *CreateBackupPlanRequest) SetClusterId(v string) *CreateBackupPlanRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateBackupPlanRequest) SetRootPath(v string) *CreateBackupPlanRequest {
	s.RootPath = &v
	return s
}

type CreateBackupPlanResponseBody struct {
	RootPath    *string `json:"RootPath,omitempty" xml:"RootPath,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateBackupPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupPlanResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBackupPlanResponseBody) SetRootPath(v string) *CreateBackupPlanResponseBody {
	s.RootPath = &v
	return s
}

func (s *CreateBackupPlanResponseBody) SetDescription(v string) *CreateBackupPlanResponseBody {
	s.Description = &v
	return s
}

func (s *CreateBackupPlanResponseBody) SetRequestId(v string) *CreateBackupPlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBackupPlanResponseBody) SetClusterId(v string) *CreateBackupPlanResponseBody {
	s.ClusterId = &v
	return s
}

func (s *CreateBackupPlanResponseBody) SetId(v string) *CreateBackupPlanResponseBody {
	s.Id = &v
	return s
}

func (s *CreateBackupPlanResponseBody) SetName(v string) *CreateBackupPlanResponseBody {
	s.Name = &v
	return s
}

type CreateBackupPlanResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateBackupPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateBackupPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBackupPlanResponse) GoString() string {
	return s.String()
}

func (s *CreateBackupPlanResponse) SetHeaders(v map[string]*string) *CreateBackupPlanResponse {
	s.Headers = v
	return s
}

func (s *CreateBackupPlanResponse) SetBody(v *CreateBackupPlanResponseBody) *CreateBackupPlanResponse {
	s.Body = v
	return s
}

type CreateClusterBootstrapActionRequest struct {
	ResourceOwnerId *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string                                               `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	BootstrapAction []*CreateClusterBootstrapActionRequestBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s CreateClusterBootstrapActionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterBootstrapActionRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterBootstrapActionRequest) SetResourceOwnerId(v int64) *CreateClusterBootstrapActionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateClusterBootstrapActionRequest) SetRegionId(v string) *CreateClusterBootstrapActionRequest {
	s.RegionId = &v
	return s
}

func (s *CreateClusterBootstrapActionRequest) SetClusterId(v string) *CreateClusterBootstrapActionRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateClusterBootstrapActionRequest) SetBootstrapAction(v []*CreateClusterBootstrapActionRequestBootstrapAction) *CreateClusterBootstrapActionRequest {
	s.BootstrapAction = v
	return s
}

type CreateClusterBootstrapActionRequestBootstrapAction struct {
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateClusterBootstrapActionRequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterBootstrapActionRequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *CreateClusterBootstrapActionRequestBootstrapAction) SetExecutionFailStrategy(v string) *CreateClusterBootstrapActionRequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *CreateClusterBootstrapActionRequestBootstrapAction) SetArg(v string) *CreateClusterBootstrapActionRequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *CreateClusterBootstrapActionRequestBootstrapAction) SetPath(v string) *CreateClusterBootstrapActionRequestBootstrapAction {
	s.Path = &v
	return s
}

func (s *CreateClusterBootstrapActionRequestBootstrapAction) SetExecutionTarget(v string) *CreateClusterBootstrapActionRequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *CreateClusterBootstrapActionRequestBootstrapAction) SetExecutionMoment(v string) *CreateClusterBootstrapActionRequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *CreateClusterBootstrapActionRequestBootstrapAction) SetName(v string) *CreateClusterBootstrapActionRequestBootstrapAction {
	s.Name = &v
	return s
}

type CreateClusterBootstrapActionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateClusterBootstrapActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterBootstrapActionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterBootstrapActionResponseBody) SetRequestId(v string) *CreateClusterBootstrapActionResponseBody {
	s.RequestId = &v
	return s
}

type CreateClusterBootstrapActionResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateClusterBootstrapActionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateClusterBootstrapActionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterBootstrapActionResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterBootstrapActionResponse) SetHeaders(v map[string]*string) *CreateClusterBootstrapActionResponse {
	s.Headers = v
	return s
}

func (s *CreateClusterBootstrapActionResponse) SetBody(v *CreateClusterBootstrapActionResponseBody) *CreateClusterBootstrapActionResponse {
	s.Body = v
	return s
}

type CreateClusterTemplateRequest struct {
	ResourceOwnerId        *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateName           *string                                        `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	RegionId               *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                 *string                                        `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	LogPath                *string                                        `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	SecurityGroupId        *string                                        `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IsOpenPublicIp         *bool                                          `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	SecurityGroupName      *string                                        `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	Period                 *int32                                         `json:"Period,omitempty" xml:"Period,omitempty"`
	AutoRenew              *bool                                          `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	VpcId                  *string                                        `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId              *string                                        `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NetType                *string                                        `json:"NetType,omitempty" xml:"NetType,omitempty"`
	UserDefinedEmrEcsRole  *string                                        `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	EmrVer                 *string                                        `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType            *string                                        `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	HighAvailabilityEnable *bool                                          `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	UseLocalMetaDb         *bool                                          `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	IoOptimized            *bool                                          `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	SshEnable              *bool                                          `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	InstanceGeneration     *string                                        `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	MasterPwd              *string                                        `json:"MasterPwd,omitempty" xml:"MasterPwd,omitempty"`
	KeyPairName            *string                                        `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	MetaStoreType          *string                                        `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	MetaStoreConf          *string                                        `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	Configurations         *string                                        `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	EasEnable              *bool                                          `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	DepositType            *string                                        `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	MachineType            *string                                        `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	UseCustomHiveMetaDb    *bool                                          `json:"UseCustomHiveMetaDb,omitempty" xml:"UseCustomHiveMetaDb,omitempty"`
	InitCustomHiveMetaDb   *bool                                          `json:"InitCustomHiveMetaDb,omitempty" xml:"InitCustomHiveMetaDb,omitempty"`
	ResourceGroupId        *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	OptionSoftWareList     []*string                                      `json:"OptionSoftWareList,omitempty" xml:"OptionSoftWareList,omitempty" type:"Repeated"`
	HostGroup              []*CreateClusterTemplateRequestHostGroup       `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
	BootstrapAction        []*CreateClusterTemplateRequestBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
	Config                 []*CreateClusterTemplateRequestConfig          `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Tag                    []*CreateClusterTemplateRequestTag             `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateClusterTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequest) SetResourceOwnerId(v int64) *CreateClusterTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetTemplateName(v string) *CreateClusterTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetRegionId(v string) *CreateClusterTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetZoneId(v string) *CreateClusterTemplateRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetLogPath(v string) *CreateClusterTemplateRequest {
	s.LogPath = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetSecurityGroupId(v string) *CreateClusterTemplateRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetIsOpenPublicIp(v bool) *CreateClusterTemplateRequest {
	s.IsOpenPublicIp = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetSecurityGroupName(v string) *CreateClusterTemplateRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetPeriod(v int32) *CreateClusterTemplateRequest {
	s.Period = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetAutoRenew(v bool) *CreateClusterTemplateRequest {
	s.AutoRenew = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetVpcId(v string) *CreateClusterTemplateRequest {
	s.VpcId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetVSwitchId(v string) *CreateClusterTemplateRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetNetType(v string) *CreateClusterTemplateRequest {
	s.NetType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetUserDefinedEmrEcsRole(v string) *CreateClusterTemplateRequest {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetEmrVer(v string) *CreateClusterTemplateRequest {
	s.EmrVer = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetClusterType(v string) *CreateClusterTemplateRequest {
	s.ClusterType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetHighAvailabilityEnable(v bool) *CreateClusterTemplateRequest {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetUseLocalMetaDb(v bool) *CreateClusterTemplateRequest {
	s.UseLocalMetaDb = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetIoOptimized(v bool) *CreateClusterTemplateRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetSshEnable(v bool) *CreateClusterTemplateRequest {
	s.SshEnable = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetInstanceGeneration(v string) *CreateClusterTemplateRequest {
	s.InstanceGeneration = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetMasterPwd(v string) *CreateClusterTemplateRequest {
	s.MasterPwd = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetKeyPairName(v string) *CreateClusterTemplateRequest {
	s.KeyPairName = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetMetaStoreType(v string) *CreateClusterTemplateRequest {
	s.MetaStoreType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetMetaStoreConf(v string) *CreateClusterTemplateRequest {
	s.MetaStoreConf = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetConfigurations(v string) *CreateClusterTemplateRequest {
	s.Configurations = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetEasEnable(v bool) *CreateClusterTemplateRequest {
	s.EasEnable = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetDepositType(v string) *CreateClusterTemplateRequest {
	s.DepositType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetMachineType(v string) *CreateClusterTemplateRequest {
	s.MachineType = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetUseCustomHiveMetaDb(v bool) *CreateClusterTemplateRequest {
	s.UseCustomHiveMetaDb = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetInitCustomHiveMetaDb(v bool) *CreateClusterTemplateRequest {
	s.InitCustomHiveMetaDb = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetResourceGroupId(v string) *CreateClusterTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateClusterTemplateRequest) SetOptionSoftWareList(v []*string) *CreateClusterTemplateRequest {
	s.OptionSoftWareList = v
	return s
}

func (s *CreateClusterTemplateRequest) SetHostGroup(v []*CreateClusterTemplateRequestHostGroup) *CreateClusterTemplateRequest {
	s.HostGroup = v
	return s
}

func (s *CreateClusterTemplateRequest) SetBootstrapAction(v []*CreateClusterTemplateRequestBootstrapAction) *CreateClusterTemplateRequest {
	s.BootstrapAction = v
	return s
}

func (s *CreateClusterTemplateRequest) SetConfig(v []*CreateClusterTemplateRequestConfig) *CreateClusterTemplateRequest {
	s.Config = v
	return s
}

func (s *CreateClusterTemplateRequest) SetTag(v []*CreateClusterTemplateRequestTag) *CreateClusterTemplateRequest {
	s.Tag = v
	return s
}

type CreateClusterTemplateRequestHostGroup struct {
	SysDiskCapacity    *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	HostGroupType      *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	Comment            *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	MultiInstanceTypes *string `json:"MultiInstanceTypes,omitempty" xml:"MultiInstanceTypes,omitempty"`
	SysDiskType        *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	AutoRenew          *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DiskType           *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId        *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DiskCount          *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	CreateType         *string `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	DiskCapacity       *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	VSwitchId          *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NodeCount          *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	HostGroupName      *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	ClusterId          *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s CreateClusterTemplateRequestHostGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequestHostGroup) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequestHostGroup) SetSysDiskCapacity(v int32) *CreateClusterTemplateRequestHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetHostGroupType(v string) *CreateClusterTemplateRequestHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetComment(v string) *CreateClusterTemplateRequestHostGroup {
	s.Comment = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetMultiInstanceTypes(v string) *CreateClusterTemplateRequestHostGroup {
	s.MultiInstanceTypes = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetSysDiskType(v string) *CreateClusterTemplateRequestHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetAutoRenew(v bool) *CreateClusterTemplateRequestHostGroup {
	s.AutoRenew = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetChargeType(v string) *CreateClusterTemplateRequestHostGroup {
	s.ChargeType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetDiskType(v string) *CreateClusterTemplateRequestHostGroup {
	s.DiskType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetHostGroupId(v string) *CreateClusterTemplateRequestHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetInstanceType(v string) *CreateClusterTemplateRequestHostGroup {
	s.InstanceType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetDiskCount(v int32) *CreateClusterTemplateRequestHostGroup {
	s.DiskCount = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetCreateType(v string) *CreateClusterTemplateRequestHostGroup {
	s.CreateType = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetPeriod(v int32) *CreateClusterTemplateRequestHostGroup {
	s.Period = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetDiskCapacity(v int32) *CreateClusterTemplateRequestHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetVSwitchId(v string) *CreateClusterTemplateRequestHostGroup {
	s.VSwitchId = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetNodeCount(v int32) *CreateClusterTemplateRequestHostGroup {
	s.NodeCount = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetHostGroupName(v string) *CreateClusterTemplateRequestHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *CreateClusterTemplateRequestHostGroup) SetClusterId(v string) *CreateClusterTemplateRequestHostGroup {
	s.ClusterId = &v
	return s
}

type CreateClusterTemplateRequestBootstrapAction struct {
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateClusterTemplateRequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetExecutionFailStrategy(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetArg(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetPath(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.Path = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetExecutionTarget(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetExecutionMoment(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *CreateClusterTemplateRequestBootstrapAction) SetName(v string) *CreateClusterTemplateRequestBootstrapAction {
	s.Name = &v
	return s
}

type CreateClusterTemplateRequestConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
}

func (s CreateClusterTemplateRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequestConfig) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequestConfig) SetConfigValue(v string) *CreateClusterTemplateRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetReplace(v string) *CreateClusterTemplateRequestConfig {
	s.Replace = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetFileName(v string) *CreateClusterTemplateRequestConfig {
	s.FileName = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetServiceName(v string) *CreateClusterTemplateRequestConfig {
	s.ServiceName = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetConfigKey(v string) *CreateClusterTemplateRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *CreateClusterTemplateRequestConfig) SetEncrypt(v string) *CreateClusterTemplateRequestConfig {
	s.Encrypt = &v
	return s
}

type CreateClusterTemplateRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateClusterTemplateRequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateRequestTag) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateRequestTag) SetKey(v string) *CreateClusterTemplateRequestTag {
	s.Key = &v
	return s
}

func (s *CreateClusterTemplateRequestTag) SetValue(v string) *CreateClusterTemplateRequestTag {
	s.Value = &v
	return s
}

type CreateClusterTemplateResponseBody struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterTemplateId *string `json:"ClusterTemplateId,omitempty" xml:"ClusterTemplateId,omitempty"`
}

func (s CreateClusterTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateResponseBody) SetRequestId(v string) *CreateClusterTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateClusterTemplateResponseBody) SetClusterTemplateId(v string) *CreateClusterTemplateResponseBody {
	s.ClusterTemplateId = &v
	return s
}

type CreateClusterTemplateResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateClusterTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateClusterTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterTemplateResponse) SetHeaders(v map[string]*string) *CreateClusterTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateClusterTemplateResponse) SetBody(v *CreateClusterTemplateResponseBody) *CreateClusterTemplateResponse {
	s.Body = v
	return s
}

type CreateClusterV2Request struct {
	ResourceOwnerId        *int64                                     `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                   *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId               *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                 *string                                    `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	LogPath                *string                                    `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	SecurityGroupId        *string                                    `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IsOpenPublicIp         *bool                                      `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	SecurityGroupName      *string                                    `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ChargeType             *string                                    `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Period                 *int32                                     `json:"Period,omitempty" xml:"Period,omitempty"`
	AutoRenew              *bool                                      `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	AutoPayOrder           *bool                                      `json:"AutoPayOrder,omitempty" xml:"AutoPayOrder,omitempty"`
	VpcId                  *string                                    `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId              *string                                    `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NetType                *string                                    `json:"NetType,omitempty" xml:"NetType,omitempty"`
	UserDefinedEmrEcsRole  *string                                    `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	EmrVer                 *string                                    `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType            *string                                    `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	HighAvailabilityEnable *bool                                      `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	UseLocalMetaDb         *bool                                      `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	IoOptimized            *bool                                      `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	SshEnable              *bool                                      `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	InstanceGeneration     *string                                    `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	MasterPwd              *string                                    `json:"MasterPwd,omitempty" xml:"MasterPwd,omitempty"`
	KeyPairName            *string                                    `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	MetaStoreType          *string                                    `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	MetaStoreConf          *string                                    `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	ClickHouseConf         *string                                    `json:"ClickHouseConf,omitempty" xml:"ClickHouseConf,omitempty"`
	ExtraAttributes        *string                                    `json:"ExtraAttributes,omitempty" xml:"ExtraAttributes,omitempty"`
	DepositType            *string                                    `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	MachineType            *string                                    `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	UseCustomHiveMetaDB    *bool                                      `json:"UseCustomHiveMetaDB,omitempty" xml:"UseCustomHiveMetaDB,omitempty"`
	InitCustomHiveMetaDB   *bool                                      `json:"InitCustomHiveMetaDB,omitempty" xml:"InitCustomHiveMetaDB,omitempty"`
	Configurations         *string                                    `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	EasEnable              *bool                                      `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	RelatedClusterId       *string                                    `json:"RelatedClusterId,omitempty" xml:"RelatedClusterId,omitempty"`
	WhiteListType          *string                                    `json:"WhiteListType,omitempty" xml:"WhiteListType,omitempty"`
	AuthorizeContent       *string                                    `json:"AuthorizeContent,omitempty" xml:"AuthorizeContent,omitempty"`
	ResourceGroupId        *string                                    `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	OptionSoftWareList     []*string                                  `json:"OptionSoftWareList,omitempty" xml:"OptionSoftWareList,omitempty" type:"Repeated"`
	UserInfo               []*CreateClusterV2RequestUserInfo          `json:"UserInfo,omitempty" xml:"UserInfo,omitempty" type:"Repeated"`
	HostComponentInfo      []*CreateClusterV2RequestHostComponentInfo `json:"HostComponentInfo,omitempty" xml:"HostComponentInfo,omitempty" type:"Repeated"`
	ServiceInfo            []*CreateClusterV2RequestServiceInfo       `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" type:"Repeated"`
	PromotionInfo          []*CreateClusterV2RequestPromotionInfo     `json:"PromotionInfo,omitempty" xml:"PromotionInfo,omitempty" type:"Repeated"`
	HostGroup              []*CreateClusterV2RequestHostGroup         `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
	BootstrapAction        []*CreateClusterV2RequestBootstrapAction   `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
	Config                 []*CreateClusterV2RequestConfig            `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Tag                    []*CreateClusterV2RequestTag               `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s CreateClusterV2Request) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2Request) GoString() string {
	return s.String()
}

func (s *CreateClusterV2Request) SetResourceOwnerId(v int64) *CreateClusterV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateClusterV2Request) SetName(v string) *CreateClusterV2Request {
	s.Name = &v
	return s
}

func (s *CreateClusterV2Request) SetRegionId(v string) *CreateClusterV2Request {
	s.RegionId = &v
	return s
}

func (s *CreateClusterV2Request) SetZoneId(v string) *CreateClusterV2Request {
	s.ZoneId = &v
	return s
}

func (s *CreateClusterV2Request) SetLogPath(v string) *CreateClusterV2Request {
	s.LogPath = &v
	return s
}

func (s *CreateClusterV2Request) SetSecurityGroupId(v string) *CreateClusterV2Request {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateClusterV2Request) SetIsOpenPublicIp(v bool) *CreateClusterV2Request {
	s.IsOpenPublicIp = &v
	return s
}

func (s *CreateClusterV2Request) SetSecurityGroupName(v string) *CreateClusterV2Request {
	s.SecurityGroupName = &v
	return s
}

func (s *CreateClusterV2Request) SetChargeType(v string) *CreateClusterV2Request {
	s.ChargeType = &v
	return s
}

func (s *CreateClusterV2Request) SetPeriod(v int32) *CreateClusterV2Request {
	s.Period = &v
	return s
}

func (s *CreateClusterV2Request) SetAutoRenew(v bool) *CreateClusterV2Request {
	s.AutoRenew = &v
	return s
}

func (s *CreateClusterV2Request) SetAutoPayOrder(v bool) *CreateClusterV2Request {
	s.AutoPayOrder = &v
	return s
}

func (s *CreateClusterV2Request) SetVpcId(v string) *CreateClusterV2Request {
	s.VpcId = &v
	return s
}

func (s *CreateClusterV2Request) SetVSwitchId(v string) *CreateClusterV2Request {
	s.VSwitchId = &v
	return s
}

func (s *CreateClusterV2Request) SetNetType(v string) *CreateClusterV2Request {
	s.NetType = &v
	return s
}

func (s *CreateClusterV2Request) SetUserDefinedEmrEcsRole(v string) *CreateClusterV2Request {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *CreateClusterV2Request) SetEmrVer(v string) *CreateClusterV2Request {
	s.EmrVer = &v
	return s
}

func (s *CreateClusterV2Request) SetClusterType(v string) *CreateClusterV2Request {
	s.ClusterType = &v
	return s
}

func (s *CreateClusterV2Request) SetHighAvailabilityEnable(v bool) *CreateClusterV2Request {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *CreateClusterV2Request) SetUseLocalMetaDb(v bool) *CreateClusterV2Request {
	s.UseLocalMetaDb = &v
	return s
}

func (s *CreateClusterV2Request) SetIoOptimized(v bool) *CreateClusterV2Request {
	s.IoOptimized = &v
	return s
}

func (s *CreateClusterV2Request) SetSshEnable(v bool) *CreateClusterV2Request {
	s.SshEnable = &v
	return s
}

func (s *CreateClusterV2Request) SetInstanceGeneration(v string) *CreateClusterV2Request {
	s.InstanceGeneration = &v
	return s
}

func (s *CreateClusterV2Request) SetMasterPwd(v string) *CreateClusterV2Request {
	s.MasterPwd = &v
	return s
}

func (s *CreateClusterV2Request) SetKeyPairName(v string) *CreateClusterV2Request {
	s.KeyPairName = &v
	return s
}

func (s *CreateClusterV2Request) SetMetaStoreType(v string) *CreateClusterV2Request {
	s.MetaStoreType = &v
	return s
}

func (s *CreateClusterV2Request) SetMetaStoreConf(v string) *CreateClusterV2Request {
	s.MetaStoreConf = &v
	return s
}

func (s *CreateClusterV2Request) SetClickHouseConf(v string) *CreateClusterV2Request {
	s.ClickHouseConf = &v
	return s
}

func (s *CreateClusterV2Request) SetExtraAttributes(v string) *CreateClusterV2Request {
	s.ExtraAttributes = &v
	return s
}

func (s *CreateClusterV2Request) SetDepositType(v string) *CreateClusterV2Request {
	s.DepositType = &v
	return s
}

func (s *CreateClusterV2Request) SetMachineType(v string) *CreateClusterV2Request {
	s.MachineType = &v
	return s
}

func (s *CreateClusterV2Request) SetUseCustomHiveMetaDB(v bool) *CreateClusterV2Request {
	s.UseCustomHiveMetaDB = &v
	return s
}

func (s *CreateClusterV2Request) SetInitCustomHiveMetaDB(v bool) *CreateClusterV2Request {
	s.InitCustomHiveMetaDB = &v
	return s
}

func (s *CreateClusterV2Request) SetConfigurations(v string) *CreateClusterV2Request {
	s.Configurations = &v
	return s
}

func (s *CreateClusterV2Request) SetEasEnable(v bool) *CreateClusterV2Request {
	s.EasEnable = &v
	return s
}

func (s *CreateClusterV2Request) SetRelatedClusterId(v string) *CreateClusterV2Request {
	s.RelatedClusterId = &v
	return s
}

func (s *CreateClusterV2Request) SetWhiteListType(v string) *CreateClusterV2Request {
	s.WhiteListType = &v
	return s
}

func (s *CreateClusterV2Request) SetAuthorizeContent(v string) *CreateClusterV2Request {
	s.AuthorizeContent = &v
	return s
}

func (s *CreateClusterV2Request) SetResourceGroupId(v string) *CreateClusterV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateClusterV2Request) SetOptionSoftWareList(v []*string) *CreateClusterV2Request {
	s.OptionSoftWareList = v
	return s
}

func (s *CreateClusterV2Request) SetUserInfo(v []*CreateClusterV2RequestUserInfo) *CreateClusterV2Request {
	s.UserInfo = v
	return s
}

func (s *CreateClusterV2Request) SetHostComponentInfo(v []*CreateClusterV2RequestHostComponentInfo) *CreateClusterV2Request {
	s.HostComponentInfo = v
	return s
}

func (s *CreateClusterV2Request) SetServiceInfo(v []*CreateClusterV2RequestServiceInfo) *CreateClusterV2Request {
	s.ServiceInfo = v
	return s
}

func (s *CreateClusterV2Request) SetPromotionInfo(v []*CreateClusterV2RequestPromotionInfo) *CreateClusterV2Request {
	s.PromotionInfo = v
	return s
}

func (s *CreateClusterV2Request) SetHostGroup(v []*CreateClusterV2RequestHostGroup) *CreateClusterV2Request {
	s.HostGroup = v
	return s
}

func (s *CreateClusterV2Request) SetBootstrapAction(v []*CreateClusterV2RequestBootstrapAction) *CreateClusterV2Request {
	s.BootstrapAction = v
	return s
}

func (s *CreateClusterV2Request) SetConfig(v []*CreateClusterV2RequestConfig) *CreateClusterV2Request {
	s.Config = v
	return s
}

func (s *CreateClusterV2Request) SetTag(v []*CreateClusterV2RequestTag) *CreateClusterV2Request {
	s.Tag = v
	return s
}

type CreateClusterV2RequestUserInfo struct {
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateClusterV2RequestUserInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestUserInfo) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestUserInfo) SetPassword(v string) *CreateClusterV2RequestUserInfo {
	s.Password = &v
	return s
}

func (s *CreateClusterV2RequestUserInfo) SetUserId(v string) *CreateClusterV2RequestUserInfo {
	s.UserId = &v
	return s
}

func (s *CreateClusterV2RequestUserInfo) SetUserName(v string) *CreateClusterV2RequestUserInfo {
	s.UserName = &v
	return s
}

type CreateClusterV2RequestHostComponentInfo struct {
	ComponentNameList []*string `json:"ComponentNameList,omitempty" xml:"ComponentNameList,omitempty" type:"Repeated"`
	HostName          *string   `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ServiceName       *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s CreateClusterV2RequestHostComponentInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestHostComponentInfo) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestHostComponentInfo) SetComponentNameList(v []*string) *CreateClusterV2RequestHostComponentInfo {
	s.ComponentNameList = v
	return s
}

func (s *CreateClusterV2RequestHostComponentInfo) SetHostName(v string) *CreateClusterV2RequestHostComponentInfo {
	s.HostName = &v
	return s
}

func (s *CreateClusterV2RequestHostComponentInfo) SetServiceName(v string) *CreateClusterV2RequestHostComponentInfo {
	s.ServiceName = &v
	return s
}

type CreateClusterV2RequestServiceInfo struct {
	ServiceVersion *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	ServiceName    *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s CreateClusterV2RequestServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestServiceInfo) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestServiceInfo) SetServiceVersion(v string) *CreateClusterV2RequestServiceInfo {
	s.ServiceVersion = &v
	return s
}

func (s *CreateClusterV2RequestServiceInfo) SetServiceName(v string) *CreateClusterV2RequestServiceInfo {
	s.ServiceName = &v
	return s
}

type CreateClusterV2RequestPromotionInfo struct {
	PromotionOptionNo   *string `json:"PromotionOptionNo,omitempty" xml:"PromotionOptionNo,omitempty"`
	PromotionOptionCode *string `json:"PromotionOptionCode,omitempty" xml:"PromotionOptionCode,omitempty"`
	ProductCode         *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s CreateClusterV2RequestPromotionInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestPromotionInfo) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestPromotionInfo) SetPromotionOptionNo(v string) *CreateClusterV2RequestPromotionInfo {
	s.PromotionOptionNo = &v
	return s
}

func (s *CreateClusterV2RequestPromotionInfo) SetPromotionOptionCode(v string) *CreateClusterV2RequestPromotionInfo {
	s.PromotionOptionCode = &v
	return s
}

func (s *CreateClusterV2RequestPromotionInfo) SetProductCode(v string) *CreateClusterV2RequestPromotionInfo {
	s.ProductCode = &v
	return s
}

type CreateClusterV2RequestHostGroup struct {
	SysDiskCapacity *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	HostGroupType   *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	Comment         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	SysDiskType     *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	AutoRenew       *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ChargeType      *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	GpuDriver       *string `json:"GpuDriver,omitempty" xml:"GpuDriver,omitempty"`
	DiskType        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DiskCount       *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	CreateType      *string `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	Period          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	DiskCapacity    *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	VSwitchId       *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NodeCount       *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	HostGroupName   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s CreateClusterV2RequestHostGroup) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestHostGroup) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestHostGroup) SetSysDiskCapacity(v int32) *CreateClusterV2RequestHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetHostGroupType(v string) *CreateClusterV2RequestHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetComment(v string) *CreateClusterV2RequestHostGroup {
	s.Comment = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetSysDiskType(v string) *CreateClusterV2RequestHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetAutoRenew(v bool) *CreateClusterV2RequestHostGroup {
	s.AutoRenew = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetChargeType(v string) *CreateClusterV2RequestHostGroup {
	s.ChargeType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetGpuDriver(v string) *CreateClusterV2RequestHostGroup {
	s.GpuDriver = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetDiskType(v string) *CreateClusterV2RequestHostGroup {
	s.DiskType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetHostGroupId(v string) *CreateClusterV2RequestHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetInstanceType(v string) *CreateClusterV2RequestHostGroup {
	s.InstanceType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetDiskCount(v int32) *CreateClusterV2RequestHostGroup {
	s.DiskCount = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetCreateType(v string) *CreateClusterV2RequestHostGroup {
	s.CreateType = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetPeriod(v int32) *CreateClusterV2RequestHostGroup {
	s.Period = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetDiskCapacity(v int32) *CreateClusterV2RequestHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetVSwitchId(v string) *CreateClusterV2RequestHostGroup {
	s.VSwitchId = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetNodeCount(v int32) *CreateClusterV2RequestHostGroup {
	s.NodeCount = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetHostGroupName(v string) *CreateClusterV2RequestHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *CreateClusterV2RequestHostGroup) SetClusterId(v string) *CreateClusterV2RequestHostGroup {
	s.ClusterId = &v
	return s
}

type CreateClusterV2RequestBootstrapAction struct {
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateClusterV2RequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestBootstrapAction) SetExecutionFailStrategy(v string) *CreateClusterV2RequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetArg(v string) *CreateClusterV2RequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetPath(v string) *CreateClusterV2RequestBootstrapAction {
	s.Path = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetExecutionTarget(v string) *CreateClusterV2RequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetExecutionMoment(v string) *CreateClusterV2RequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *CreateClusterV2RequestBootstrapAction) SetName(v string) *CreateClusterV2RequestBootstrapAction {
	s.Name = &v
	return s
}

type CreateClusterV2RequestConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
}

func (s CreateClusterV2RequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestConfig) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestConfig) SetConfigValue(v string) *CreateClusterV2RequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetReplace(v string) *CreateClusterV2RequestConfig {
	s.Replace = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetFileName(v string) *CreateClusterV2RequestConfig {
	s.FileName = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetServiceName(v string) *CreateClusterV2RequestConfig {
	s.ServiceName = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetConfigKey(v string) *CreateClusterV2RequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *CreateClusterV2RequestConfig) SetEncrypt(v string) *CreateClusterV2RequestConfig {
	s.Encrypt = &v
	return s
}

type CreateClusterV2RequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s CreateClusterV2RequestTag) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2RequestTag) GoString() string {
	return s.String()
}

func (s *CreateClusterV2RequestTag) SetKey(v string) *CreateClusterV2RequestTag {
	s.Key = &v
	return s
}

func (s *CreateClusterV2RequestTag) SetValue(v string) *CreateClusterV2RequestTag {
	s.Value = &v
	return s
}

type CreateClusterV2ResponseBody struct {
	MasterOrderId *string `json:"MasterOrderId,omitempty" xml:"MasterOrderId,omitempty"`
	CoreOrderId   *string `json:"CoreOrderId,omitempty" xml:"CoreOrderId,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EmrOrderId    *string `json:"EmrOrderId,omitempty" xml:"EmrOrderId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s CreateClusterV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2ResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterV2ResponseBody) SetMasterOrderId(v string) *CreateClusterV2ResponseBody {
	s.MasterOrderId = &v
	return s
}

func (s *CreateClusterV2ResponseBody) SetCoreOrderId(v string) *CreateClusterV2ResponseBody {
	s.CoreOrderId = &v
	return s
}

func (s *CreateClusterV2ResponseBody) SetRequestId(v string) *CreateClusterV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateClusterV2ResponseBody) SetEmrOrderId(v string) *CreateClusterV2ResponseBody {
	s.EmrOrderId = &v
	return s
}

func (s *CreateClusterV2ResponseBody) SetClusterId(v string) *CreateClusterV2ResponseBody {
	s.ClusterId = &v
	return s
}

type CreateClusterV2Response struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateClusterV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateClusterV2Response) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterV2Response) GoString() string {
	return s.String()
}

func (s *CreateClusterV2Response) SetHeaders(v map[string]*string) *CreateClusterV2Response {
	s.Headers = v
	return s
}

func (s *CreateClusterV2Response) SetBody(v *CreateClusterV2ResponseBody) *CreateClusterV2Response {
	s.Body = v
	return s
}

type CreateClusterWithTemplateRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateBizId   *string `json:"TemplateBizId,omitempty" xml:"TemplateBizId,omitempty"`
	UniqueTag       *string `json:"UniqueTag,omitempty" xml:"UniqueTag,omitempty"`
	ClusterName     *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateClusterWithTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterWithTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateClusterWithTemplateRequest) SetResourceOwnerId(v int64) *CreateClusterWithTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetTemplateBizId(v string) *CreateClusterWithTemplateRequest {
	s.TemplateBizId = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetUniqueTag(v string) *CreateClusterWithTemplateRequest {
	s.UniqueTag = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetClusterName(v string) *CreateClusterWithTemplateRequest {
	s.ClusterName = &v
	return s
}

func (s *CreateClusterWithTemplateRequest) SetResourceGroupId(v string) *CreateClusterWithTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateClusterWithTemplateResponseBody struct {
	MasterOrderId *string `json:"MasterOrderId,omitempty" xml:"MasterOrderId,omitempty"`
	CoreOrderId   *string `json:"CoreOrderId,omitempty" xml:"CoreOrderId,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	EmrOrderId    *string `json:"EmrOrderId,omitempty" xml:"EmrOrderId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s CreateClusterWithTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterWithTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateClusterWithTemplateResponseBody) SetMasterOrderId(v string) *CreateClusterWithTemplateResponseBody {
	s.MasterOrderId = &v
	return s
}

func (s *CreateClusterWithTemplateResponseBody) SetCoreOrderId(v string) *CreateClusterWithTemplateResponseBody {
	s.CoreOrderId = &v
	return s
}

func (s *CreateClusterWithTemplateResponseBody) SetRequestId(v string) *CreateClusterWithTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateClusterWithTemplateResponseBody) SetEmrOrderId(v string) *CreateClusterWithTemplateResponseBody {
	s.EmrOrderId = &v
	return s
}

func (s *CreateClusterWithTemplateResponseBody) SetClusterId(v string) *CreateClusterWithTemplateResponseBody {
	s.ClusterId = &v
	return s
}

type CreateClusterWithTemplateResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateClusterWithTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateClusterWithTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateClusterWithTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateClusterWithTemplateResponse) SetHeaders(v map[string]*string) *CreateClusterWithTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateClusterWithTemplateResponse) SetBody(v *CreateClusterWithTemplateResponseBody) *CreateClusterWithTemplateResponse {
	s.Body = v
	return s
}

type CreateDataSourceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SourceType      *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Conf            *string `json:"Conf,omitempty" xml:"Conf,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	NavParentId     *string `json:"NavParentId,omitempty" xml:"NavParentId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *CreateDataSourceRequest) SetResourceOwnerId(v int64) *CreateDataSourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateDataSourceRequest) SetRegionId(v string) *CreateDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *CreateDataSourceRequest) SetName(v string) *CreateDataSourceRequest {
	s.Name = &v
	return s
}

func (s *CreateDataSourceRequest) SetSourceType(v string) *CreateDataSourceRequest {
	s.SourceType = &v
	return s
}

func (s *CreateDataSourceRequest) SetDescription(v string) *CreateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *CreateDataSourceRequest) SetConf(v string) *CreateDataSourceRequest {
	s.Conf = &v
	return s
}

func (s *CreateDataSourceRequest) SetClusterId(v string) *CreateDataSourceRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateDataSourceRequest) SetNavParentId(v string) *CreateDataSourceRequest {
	s.NavParentId = &v
	return s
}

func (s *CreateDataSourceRequest) SetResourceGroupId(v string) *CreateDataSourceRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateDataSourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDataSourceResponseBody) SetRequestId(v string) *CreateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDataSourceResponseBody) SetId(v string) *CreateDataSourceResponseBody {
	s.Id = &v
	return s
}

type CreateDataSourceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *CreateDataSourceResponse) SetHeaders(v map[string]*string) *CreateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *CreateDataSourceResponse) SetBody(v *CreateDataSourceResponseBody) *CreateDataSourceResponse {
	s.Body = v
	return s
}

type CreateExecutionPlanRequest struct {
	ResourceOwnerId        *int64                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId               *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name                   *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Strategy               *string                                      `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	TimeInterval           *int32                                       `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	StartTime              *int64                                       `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TimeUnit               *string                                      `json:"TimeUnit,omitempty" xml:"TimeUnit,omitempty"`
	DayOfWeek              *string                                      `json:"DayOfWeek,omitempty" xml:"DayOfWeek,omitempty"`
	DayOfMonth             *string                                      `json:"DayOfMonth,omitempty" xml:"DayOfMonth,omitempty"`
	ClusterId              *string                                      `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	CreateClusterOnDemand  *bool                                        `json:"CreateClusterOnDemand,omitempty" xml:"CreateClusterOnDemand,omitempty"`
	ClusterName            *string                                      `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ZoneId                 *string                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	LogEnable              *bool                                        `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	LogPath                *string                                      `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	SecurityGroupId        *string                                      `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IsOpenPublicIp         *bool                                        `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	EmrVer                 *string                                      `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType            *string                                      `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	HighAvailabilityEnable *bool                                        `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	UseLocalMetaDb         *bool                                        `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	VpcId                  *string                                      `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId              *string                                      `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NetType                *string                                      `json:"NetType,omitempty" xml:"NetType,omitempty"`
	UserDefinedEmrEcsRole  *string                                      `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	IoOptimized            *bool                                        `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	InstanceGeneration     *string                                      `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	UseCustomHiveMetaDB    *bool                                        `json:"UseCustomHiveMetaDB,omitempty" xml:"UseCustomHiveMetaDB,omitempty"`
	InitCustomHiveMetaDB   *bool                                        `json:"InitCustomHiveMetaDB,omitempty" xml:"InitCustomHiveMetaDB,omitempty"`
	Configurations         *string                                      `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	EasEnable              *bool                                        `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	WorkflowDefinition     *string                                      `json:"WorkflowDefinition,omitempty" xml:"WorkflowDefinition,omitempty"`
	JobIdList              []*string                                    `json:"JobIdList,omitempty" xml:"JobIdList,omitempty" type:"Repeated"`
	OptionSoftWareList     []*string                                    `json:"OptionSoftWareList,omitempty" xml:"OptionSoftWareList,omitempty" type:"Repeated"`
	EcsOrder               []*CreateExecutionPlanRequestEcsOrder        `json:"EcsOrder,omitempty" xml:"EcsOrder,omitempty" type:"Repeated"`
	BootstrapAction        []*CreateExecutionPlanRequestBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
	Config                 []*CreateExecutionPlanRequestConfig          `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s CreateExecutionPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateExecutionPlanRequest) GoString() string {
	return s.String()
}

func (s *CreateExecutionPlanRequest) SetResourceOwnerId(v int64) *CreateExecutionPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetRegionId(v string) *CreateExecutionPlanRequest {
	s.RegionId = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetName(v string) *CreateExecutionPlanRequest {
	s.Name = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetStrategy(v string) *CreateExecutionPlanRequest {
	s.Strategy = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetTimeInterval(v int32) *CreateExecutionPlanRequest {
	s.TimeInterval = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetStartTime(v int64) *CreateExecutionPlanRequest {
	s.StartTime = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetTimeUnit(v string) *CreateExecutionPlanRequest {
	s.TimeUnit = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetDayOfWeek(v string) *CreateExecutionPlanRequest {
	s.DayOfWeek = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetDayOfMonth(v string) *CreateExecutionPlanRequest {
	s.DayOfMonth = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetClusterId(v string) *CreateExecutionPlanRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetCreateClusterOnDemand(v bool) *CreateExecutionPlanRequest {
	s.CreateClusterOnDemand = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetClusterName(v string) *CreateExecutionPlanRequest {
	s.ClusterName = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetZoneId(v string) *CreateExecutionPlanRequest {
	s.ZoneId = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetLogEnable(v bool) *CreateExecutionPlanRequest {
	s.LogEnable = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetLogPath(v string) *CreateExecutionPlanRequest {
	s.LogPath = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetSecurityGroupId(v string) *CreateExecutionPlanRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetIsOpenPublicIp(v bool) *CreateExecutionPlanRequest {
	s.IsOpenPublicIp = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetEmrVer(v string) *CreateExecutionPlanRequest {
	s.EmrVer = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetClusterType(v string) *CreateExecutionPlanRequest {
	s.ClusterType = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetHighAvailabilityEnable(v bool) *CreateExecutionPlanRequest {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetUseLocalMetaDb(v bool) *CreateExecutionPlanRequest {
	s.UseLocalMetaDb = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetVpcId(v string) *CreateExecutionPlanRequest {
	s.VpcId = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetVSwitchId(v string) *CreateExecutionPlanRequest {
	s.VSwitchId = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetNetType(v string) *CreateExecutionPlanRequest {
	s.NetType = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetUserDefinedEmrEcsRole(v string) *CreateExecutionPlanRequest {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetIoOptimized(v bool) *CreateExecutionPlanRequest {
	s.IoOptimized = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetInstanceGeneration(v string) *CreateExecutionPlanRequest {
	s.InstanceGeneration = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetUseCustomHiveMetaDB(v bool) *CreateExecutionPlanRequest {
	s.UseCustomHiveMetaDB = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetInitCustomHiveMetaDB(v bool) *CreateExecutionPlanRequest {
	s.InitCustomHiveMetaDB = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetConfigurations(v string) *CreateExecutionPlanRequest {
	s.Configurations = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetEasEnable(v bool) *CreateExecutionPlanRequest {
	s.EasEnable = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetWorkflowDefinition(v string) *CreateExecutionPlanRequest {
	s.WorkflowDefinition = &v
	return s
}

func (s *CreateExecutionPlanRequest) SetJobIdList(v []*string) *CreateExecutionPlanRequest {
	s.JobIdList = v
	return s
}

func (s *CreateExecutionPlanRequest) SetOptionSoftWareList(v []*string) *CreateExecutionPlanRequest {
	s.OptionSoftWareList = v
	return s
}

func (s *CreateExecutionPlanRequest) SetEcsOrder(v []*CreateExecutionPlanRequestEcsOrder) *CreateExecutionPlanRequest {
	s.EcsOrder = v
	return s
}

func (s *CreateExecutionPlanRequest) SetBootstrapAction(v []*CreateExecutionPlanRequestBootstrapAction) *CreateExecutionPlanRequest {
	s.BootstrapAction = v
	return s
}

func (s *CreateExecutionPlanRequest) SetConfig(v []*CreateExecutionPlanRequestConfig) *CreateExecutionPlanRequest {
	s.Config = v
	return s
}

type CreateExecutionPlanRequestEcsOrder struct {
	Index        *int32  `json:"Index,omitempty" xml:"Index,omitempty"`
	DiskCapacity *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	NodeType     *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	NodeCount    *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	DiskType     *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DiskCount    *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
}

func (s CreateExecutionPlanRequestEcsOrder) String() string {
	return tea.Prettify(s)
}

func (s CreateExecutionPlanRequestEcsOrder) GoString() string {
	return s.String()
}

func (s *CreateExecutionPlanRequestEcsOrder) SetIndex(v int32) *CreateExecutionPlanRequestEcsOrder {
	s.Index = &v
	return s
}

func (s *CreateExecutionPlanRequestEcsOrder) SetDiskCapacity(v int32) *CreateExecutionPlanRequestEcsOrder {
	s.DiskCapacity = &v
	return s
}

func (s *CreateExecutionPlanRequestEcsOrder) SetNodeType(v string) *CreateExecutionPlanRequestEcsOrder {
	s.NodeType = &v
	return s
}

func (s *CreateExecutionPlanRequestEcsOrder) SetNodeCount(v int32) *CreateExecutionPlanRequestEcsOrder {
	s.NodeCount = &v
	return s
}

func (s *CreateExecutionPlanRequestEcsOrder) SetDiskType(v string) *CreateExecutionPlanRequestEcsOrder {
	s.DiskType = &v
	return s
}

func (s *CreateExecutionPlanRequestEcsOrder) SetInstanceType(v string) *CreateExecutionPlanRequestEcsOrder {
	s.InstanceType = &v
	return s
}

func (s *CreateExecutionPlanRequestEcsOrder) SetDiskCount(v int32) *CreateExecutionPlanRequestEcsOrder {
	s.DiskCount = &v
	return s
}

type CreateExecutionPlanRequestBootstrapAction struct {
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateExecutionPlanRequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s CreateExecutionPlanRequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *CreateExecutionPlanRequestBootstrapAction) SetExecutionFailStrategy(v string) *CreateExecutionPlanRequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *CreateExecutionPlanRequestBootstrapAction) SetArg(v string) *CreateExecutionPlanRequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *CreateExecutionPlanRequestBootstrapAction) SetPath(v string) *CreateExecutionPlanRequestBootstrapAction {
	s.Path = &v
	return s
}

func (s *CreateExecutionPlanRequestBootstrapAction) SetExecutionTarget(v string) *CreateExecutionPlanRequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *CreateExecutionPlanRequestBootstrapAction) SetExecutionMoment(v string) *CreateExecutionPlanRequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *CreateExecutionPlanRequestBootstrapAction) SetName(v string) *CreateExecutionPlanRequestBootstrapAction {
	s.Name = &v
	return s
}

type CreateExecutionPlanRequestConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
}

func (s CreateExecutionPlanRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateExecutionPlanRequestConfig) GoString() string {
	return s.String()
}

func (s *CreateExecutionPlanRequestConfig) SetConfigValue(v string) *CreateExecutionPlanRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateExecutionPlanRequestConfig) SetReplace(v string) *CreateExecutionPlanRequestConfig {
	s.Replace = &v
	return s
}

func (s *CreateExecutionPlanRequestConfig) SetFileName(v string) *CreateExecutionPlanRequestConfig {
	s.FileName = &v
	return s
}

func (s *CreateExecutionPlanRequestConfig) SetServiceName(v string) *CreateExecutionPlanRequestConfig {
	s.ServiceName = &v
	return s
}

func (s *CreateExecutionPlanRequestConfig) SetConfigKey(v string) *CreateExecutionPlanRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *CreateExecutionPlanRequestConfig) SetEncrypt(v string) *CreateExecutionPlanRequestConfig {
	s.Encrypt = &v
	return s
}

type CreateExecutionPlanResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateExecutionPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateExecutionPlanResponseBody) GoString() string {
	return s.String()
}

func (s *CreateExecutionPlanResponseBody) SetRequestId(v string) *CreateExecutionPlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateExecutionPlanResponseBody) SetId(v string) *CreateExecutionPlanResponseBody {
	s.Id = &v
	return s
}

type CreateExecutionPlanResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateExecutionPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateExecutionPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateExecutionPlanResponse) GoString() string {
	return s.String()
}

func (s *CreateExecutionPlanResponse) SetHeaders(v map[string]*string) *CreateExecutionPlanResponse {
	s.Headers = v
	return s
}

func (s *CreateExecutionPlanResponse) SetBody(v *CreateExecutionPlanResponseBody) *CreateExecutionPlanResponse {
	s.Body = v
	return s
}

type CreateFlowRequest struct {
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Namespace               *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	LogArchiveLocation      *string `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Lifecycle               *string `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	Application             *string `json:"Application,omitempty" xml:"Application,omitempty"`
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	ParentFlowList          *string `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty"`
	ParentCategory          *string `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
}

func (s CreateFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowRequest) SetRegionId(v string) *CreateFlowRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowRequest) SetProjectId(v string) *CreateFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowRequest) SetName(v string) *CreateFlowRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowRequest) SetDescription(v string) *CreateFlowRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowRequest) SetStartSchedule(v int64) *CreateFlowRequest {
	s.StartSchedule = &v
	return s
}

func (s *CreateFlowRequest) SetEndSchedule(v int64) *CreateFlowRequest {
	s.EndSchedule = &v
	return s
}

func (s *CreateFlowRequest) SetCronExpr(v string) *CreateFlowRequest {
	s.CronExpr = &v
	return s
}

func (s *CreateFlowRequest) SetCreateCluster(v bool) *CreateFlowRequest {
	s.CreateCluster = &v
	return s
}

func (s *CreateFlowRequest) SetClusterId(v string) *CreateFlowRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateFlowRequest) SetHostName(v string) *CreateFlowRequest {
	s.HostName = &v
	return s
}

func (s *CreateFlowRequest) SetNamespace(v string) *CreateFlowRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFlowRequest) SetLogArchiveLocation(v string) *CreateFlowRequest {
	s.LogArchiveLocation = &v
	return s
}

func (s *CreateFlowRequest) SetLifecycle(v string) *CreateFlowRequest {
	s.Lifecycle = &v
	return s
}

func (s *CreateFlowRequest) SetApplication(v string) *CreateFlowRequest {
	s.Application = &v
	return s
}

func (s *CreateFlowRequest) SetAlertConf(v string) *CreateFlowRequest {
	s.AlertConf = &v
	return s
}

func (s *CreateFlowRequest) SetAlertUserGroupBizId(v string) *CreateFlowRequest {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *CreateFlowRequest) SetAlertDingDingGroupBizId(v string) *CreateFlowRequest {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *CreateFlowRequest) SetParentFlowList(v string) *CreateFlowRequest {
	s.ParentFlowList = &v
	return s
}

func (s *CreateFlowRequest) SetParentCategory(v string) *CreateFlowRequest {
	s.ParentCategory = &v
	return s
}

type CreateFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowResponseBody) SetRequestId(v string) *CreateFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowResponseBody) SetId(v string) *CreateFlowResponseBody {
	s.Id = &v
	return s
}

type CreateFlowResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowResponse) SetHeaders(v map[string]*string) *CreateFlowResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowResponse) SetBody(v *CreateFlowResponseBody) *CreateFlowResponse {
	s.Body = v
	return s
}

type CreateFlowCategoryRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type      *string `json:"Type,omitempty" xml:"Type,omitempty"`
	ParentId  *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s CreateFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowCategoryRequest) SetRegionId(v string) *CreateFlowCategoryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowCategoryRequest) SetProjectId(v string) *CreateFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowCategoryRequest) SetName(v string) *CreateFlowCategoryRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowCategoryRequest) SetType(v string) *CreateFlowCategoryRequest {
	s.Type = &v
	return s
}

func (s *CreateFlowCategoryRequest) SetParentId(v string) *CreateFlowCategoryRequest {
	s.ParentId = &v
	return s
}

type CreateFlowCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowCategoryResponseBody) SetRequestId(v string) *CreateFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowCategoryResponseBody) SetId(v string) *CreateFlowCategoryResponseBody {
	s.Id = &v
	return s
}

type CreateFlowCategoryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowCategoryResponse) SetHeaders(v map[string]*string) *CreateFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowCategoryResponse) SetBody(v *CreateFlowCategoryResponseBody) *CreateFlowCategoryResponse {
	s.Body = v
	return s
}

type CreateFlowEditLockRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Force           *bool   `json:"Force,omitempty" xml:"Force,omitempty"`
}

func (s CreateFlowEditLockRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowEditLockRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowEditLockRequest) SetResourceOwnerId(v int64) *CreateFlowEditLockRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateFlowEditLockRequest) SetRegionId(v string) *CreateFlowEditLockRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowEditLockRequest) SetEntityId(v string) *CreateFlowEditLockRequest {
	s.EntityId = &v
	return s
}

func (s *CreateFlowEditLockRequest) SetForce(v bool) *CreateFlowEditLockRequest {
	s.Force = &v
	return s
}

type CreateFlowEditLockResponseBody struct {
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	EntityId  *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OwnerId   *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	BizId     *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s CreateFlowEditLockResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowEditLockResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowEditLockResponseBody) SetStatus(v string) *CreateFlowEditLockResponseBody {
	s.Status = &v
	return s
}

func (s *CreateFlowEditLockResponseBody) SetEntityId(v string) *CreateFlowEditLockResponseBody {
	s.EntityId = &v
	return s
}

func (s *CreateFlowEditLockResponseBody) SetRequestId(v string) *CreateFlowEditLockResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowEditLockResponseBody) SetOwnerId(v string) *CreateFlowEditLockResponseBody {
	s.OwnerId = &v
	return s
}

func (s *CreateFlowEditLockResponseBody) SetUserId(v string) *CreateFlowEditLockResponseBody {
	s.UserId = &v
	return s
}

func (s *CreateFlowEditLockResponseBody) SetBizId(v string) *CreateFlowEditLockResponseBody {
	s.BizId = &v
	return s
}

type CreateFlowEditLockResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFlowEditLockResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowEditLockResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowEditLockResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowEditLockResponse) SetHeaders(v map[string]*string) *CreateFlowEditLockResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowEditLockResponse) SetBody(v *CreateFlowEditLockResponseBody) *CreateFlowEditLockResponse {
	s.Body = v
	return s
}

type CreateFlowForWebRequest struct {
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Namespace               *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	LogArchiveLocation      *string `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Lifecycle               *string `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	Graph                   *string `json:"Graph,omitempty" xml:"Graph,omitempty"`
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	ParentFlowList          *string `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty"`
	ParentCategory          *string `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
}

func (s CreateFlowForWebRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowForWebRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowForWebRequest) SetRegionId(v string) *CreateFlowForWebRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetProjectId(v string) *CreateFlowForWebRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetName(v string) *CreateFlowForWebRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowForWebRequest) SetDescription(v string) *CreateFlowForWebRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowForWebRequest) SetStartSchedule(v int64) *CreateFlowForWebRequest {
	s.StartSchedule = &v
	return s
}

func (s *CreateFlowForWebRequest) SetEndSchedule(v int64) *CreateFlowForWebRequest {
	s.EndSchedule = &v
	return s
}

func (s *CreateFlowForWebRequest) SetCronExpr(v string) *CreateFlowForWebRequest {
	s.CronExpr = &v
	return s
}

func (s *CreateFlowForWebRequest) SetCreateCluster(v bool) *CreateFlowForWebRequest {
	s.CreateCluster = &v
	return s
}

func (s *CreateFlowForWebRequest) SetClusterId(v string) *CreateFlowForWebRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetHostName(v string) *CreateFlowForWebRequest {
	s.HostName = &v
	return s
}

func (s *CreateFlowForWebRequest) SetNamespace(v string) *CreateFlowForWebRequest {
	s.Namespace = &v
	return s
}

func (s *CreateFlowForWebRequest) SetLogArchiveLocation(v string) *CreateFlowForWebRequest {
	s.LogArchiveLocation = &v
	return s
}

func (s *CreateFlowForWebRequest) SetLifecycle(v string) *CreateFlowForWebRequest {
	s.Lifecycle = &v
	return s
}

func (s *CreateFlowForWebRequest) SetGraph(v string) *CreateFlowForWebRequest {
	s.Graph = &v
	return s
}

func (s *CreateFlowForWebRequest) SetAlertConf(v string) *CreateFlowForWebRequest {
	s.AlertConf = &v
	return s
}

func (s *CreateFlowForWebRequest) SetAlertUserGroupBizId(v string) *CreateFlowForWebRequest {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetAlertDingDingGroupBizId(v string) *CreateFlowForWebRequest {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *CreateFlowForWebRequest) SetParentFlowList(v string) *CreateFlowForWebRequest {
	s.ParentFlowList = &v
	return s
}

func (s *CreateFlowForWebRequest) SetParentCategory(v string) *CreateFlowForWebRequest {
	s.ParentCategory = &v
	return s
}

type CreateFlowForWebResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateFlowForWebResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowForWebResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowForWebResponseBody) SetRequestId(v string) *CreateFlowForWebResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowForWebResponseBody) SetId(v string) *CreateFlowForWebResponseBody {
	s.Id = &v
	return s
}

type CreateFlowForWebResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFlowForWebResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowForWebResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowForWebResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowForWebResponse) SetHeaders(v map[string]*string) *CreateFlowForWebResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowForWebResponse) SetBody(v *CreateFlowForWebResponseBody) *CreateFlowForWebResponse {
	s.Body = v
	return s
}

type CreateFlowJobRequest struct {
	RegionId          *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId         *string                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Name              *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Description       *string                             `json:"Description,omitempty" xml:"Description,omitempty"`
	Type              *string                             `json:"Type,omitempty" xml:"Type,omitempty"`
	FailAct           *string                             `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	MaxRetry          *int32                              `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	RetryPolicy       *string                             `json:"RetryPolicy,omitempty" xml:"RetryPolicy,omitempty"`
	MaxRunningTimeSec *int64                              `json:"MaxRunningTimeSec,omitempty" xml:"MaxRunningTimeSec,omitempty"`
	RetryInterval     *int64                              `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	Params            *string                             `json:"Params,omitempty" xml:"Params,omitempty"`
	ParamConf         *string                             `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	CustomVariables   *string                             `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	EnvConf           *string                             `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	RunConf           *string                             `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	MonitorConf       *string                             `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	Mode              *string                             `json:"Mode,omitempty" xml:"Mode,omitempty"`
	ParentCategory    *string                             `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
	Adhoc             *bool                               `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	ClusterId         *string                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	AlertConf         *string                             `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	ResourceList      []*CreateFlowJobRequestResourceList `json:"ResourceList,omitempty" xml:"ResourceList,omitempty" type:"Repeated"`
}

func (s CreateFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowJobRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowJobRequest) SetRegionId(v string) *CreateFlowJobRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowJobRequest) SetProjectId(v string) *CreateFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowJobRequest) SetName(v string) *CreateFlowJobRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowJobRequest) SetDescription(v string) *CreateFlowJobRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowJobRequest) SetType(v string) *CreateFlowJobRequest {
	s.Type = &v
	return s
}

func (s *CreateFlowJobRequest) SetFailAct(v string) *CreateFlowJobRequest {
	s.FailAct = &v
	return s
}

func (s *CreateFlowJobRequest) SetMaxRetry(v int32) *CreateFlowJobRequest {
	s.MaxRetry = &v
	return s
}

func (s *CreateFlowJobRequest) SetRetryPolicy(v string) *CreateFlowJobRequest {
	s.RetryPolicy = &v
	return s
}

func (s *CreateFlowJobRequest) SetMaxRunningTimeSec(v int64) *CreateFlowJobRequest {
	s.MaxRunningTimeSec = &v
	return s
}

func (s *CreateFlowJobRequest) SetRetryInterval(v int64) *CreateFlowJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *CreateFlowJobRequest) SetParams(v string) *CreateFlowJobRequest {
	s.Params = &v
	return s
}

func (s *CreateFlowJobRequest) SetParamConf(v string) *CreateFlowJobRequest {
	s.ParamConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetCustomVariables(v string) *CreateFlowJobRequest {
	s.CustomVariables = &v
	return s
}

func (s *CreateFlowJobRequest) SetEnvConf(v string) *CreateFlowJobRequest {
	s.EnvConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetRunConf(v string) *CreateFlowJobRequest {
	s.RunConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetMonitorConf(v string) *CreateFlowJobRequest {
	s.MonitorConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetMode(v string) *CreateFlowJobRequest {
	s.Mode = &v
	return s
}

func (s *CreateFlowJobRequest) SetParentCategory(v string) *CreateFlowJobRequest {
	s.ParentCategory = &v
	return s
}

func (s *CreateFlowJobRequest) SetAdhoc(v bool) *CreateFlowJobRequest {
	s.Adhoc = &v
	return s
}

func (s *CreateFlowJobRequest) SetClusterId(v string) *CreateFlowJobRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateFlowJobRequest) SetAlertConf(v string) *CreateFlowJobRequest {
	s.AlertConf = &v
	return s
}

func (s *CreateFlowJobRequest) SetResourceList(v []*CreateFlowJobRequestResourceList) *CreateFlowJobRequest {
	s.ResourceList = v
	return s
}

type CreateFlowJobRequestResourceList struct {
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
}

func (s CreateFlowJobRequestResourceList) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowJobRequestResourceList) GoString() string {
	return s.String()
}

func (s *CreateFlowJobRequestResourceList) SetPath(v string) *CreateFlowJobRequestResourceList {
	s.Path = &v
	return s
}

func (s *CreateFlowJobRequestResourceList) SetAlias(v string) *CreateFlowJobRequestResourceList {
	s.Alias = &v
	return s
}

type CreateFlowJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowJobResponseBody) SetRequestId(v string) *CreateFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowJobResponseBody) SetId(v string) *CreateFlowJobResponseBody {
	s.Id = &v
	return s
}

type CreateFlowJobResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowJobResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowJobResponse) SetHeaders(v map[string]*string) *CreateFlowJobResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowJobResponse) SetBody(v *CreateFlowJobResponseBody) *CreateFlowJobResponse {
	s.Body = v
	return s
}

type CreateFlowProjectRequest struct {
	ProductType     *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectRequest) SetProductType(v string) *CreateFlowProjectRequest {
	s.ProductType = &v
	return s
}

func (s *CreateFlowProjectRequest) SetRegionId(v string) *CreateFlowProjectRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowProjectRequest) SetName(v string) *CreateFlowProjectRequest {
	s.Name = &v
	return s
}

func (s *CreateFlowProjectRequest) SetDescription(v string) *CreateFlowProjectRequest {
	s.Description = &v
	return s
}

func (s *CreateFlowProjectRequest) SetResourceGroupId(v string) *CreateFlowProjectRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateFlowProjectResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectResponseBody) SetRequestId(v string) *CreateFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowProjectResponseBody) SetId(v string) *CreateFlowProjectResponseBody {
	s.Id = &v
	return s
}

type CreateFlowProjectResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectResponse) SetHeaders(v map[string]*string) *CreateFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowProjectResponse) SetBody(v *CreateFlowProjectResponseBody) *CreateFlowProjectResponse {
	s.Body = v
	return s
}

type CreateFlowProjectClusterSettingRequest struct {
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId    *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ClusterId    *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DefaultUser  *string   `json:"DefaultUser,omitempty" xml:"DefaultUser,omitempty"`
	DefaultQueue *string   `json:"DefaultQueue,omitempty" xml:"DefaultQueue,omitempty"`
	UserList     []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
	QueueList    []*string `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Repeated"`
	HostList     []*string `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Repeated"`
}

func (s CreateFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectClusterSettingRequest) SetRegionId(v string) *CreateFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetProjectId(v string) *CreateFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetClusterId(v string) *CreateFlowProjectClusterSettingRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetDefaultUser(v string) *CreateFlowProjectClusterSettingRequest {
	s.DefaultUser = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetDefaultQueue(v string) *CreateFlowProjectClusterSettingRequest {
	s.DefaultQueue = &v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetUserList(v []*string) *CreateFlowProjectClusterSettingRequest {
	s.UserList = v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetQueueList(v []*string) *CreateFlowProjectClusterSettingRequest {
	s.QueueList = v
	return s
}

func (s *CreateFlowProjectClusterSettingRequest) SetHostList(v []*string) *CreateFlowProjectClusterSettingRequest {
	s.HostList = v
	return s
}

type CreateFlowProjectClusterSettingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CreateFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectClusterSettingResponseBody) SetRequestId(v string) *CreateFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowProjectClusterSettingResponseBody) SetData(v bool) *CreateFlowProjectClusterSettingResponseBody {
	s.Data = &v
	return s
}

type CreateFlowProjectClusterSettingResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *CreateFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowProjectClusterSettingResponse) SetBody(v *CreateFlowProjectClusterSettingResponseBody) *CreateFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type CreateFlowProjectUserRequest struct {
	RegionId  *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId *string                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	User      []*CreateFlowProjectUserRequestUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s CreateFlowProjectUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectUserRequest) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectUserRequest) SetRegionId(v string) *CreateFlowProjectUserRequest {
	s.RegionId = &v
	return s
}

func (s *CreateFlowProjectUserRequest) SetProjectId(v string) *CreateFlowProjectUserRequest {
	s.ProjectId = &v
	return s
}

func (s *CreateFlowProjectUserRequest) SetUser(v []*CreateFlowProjectUserRequestUser) *CreateFlowProjectUserRequest {
	s.User = v
	return s
}

type CreateFlowProjectUserRequestUser struct {
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateFlowProjectUserRequestUser) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectUserRequestUser) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectUserRequestUser) SetUserId(v string) *CreateFlowProjectUserRequestUser {
	s.UserId = &v
	return s
}

func (s *CreateFlowProjectUserRequestUser) SetUserName(v string) *CreateFlowProjectUserRequestUser {
	s.UserName = &v
	return s
}

type CreateFlowProjectUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CreateFlowProjectUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectUserResponseBody) SetRequestId(v string) *CreateFlowProjectUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFlowProjectUserResponseBody) SetData(v bool) *CreateFlowProjectUserResponseBody {
	s.Data = &v
	return s
}

type CreateFlowProjectUserResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFlowProjectUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFlowProjectUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFlowProjectUserResponse) GoString() string {
	return s.String()
}

func (s *CreateFlowProjectUserResponse) SetHeaders(v map[string]*string) *CreateFlowProjectUserResponse {
	s.Headers = v
	return s
}

func (s *CreateFlowProjectUserResponse) SetBody(v *CreateFlowProjectUserResponseBody) *CreateFlowProjectUserResponse {
	s.Body = v
	return s
}

type CreateJobRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	RunParameter    *string `json:"RunParameter,omitempty" xml:"RunParameter,omitempty"`
	FailAct         *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	MaxRetry        *int32  `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	RetryInterval   *int32  `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateJobRequest) GoString() string {
	return s.String()
}

func (s *CreateJobRequest) SetResourceOwnerId(v int64) *CreateJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateJobRequest) SetName(v string) *CreateJobRequest {
	s.Name = &v
	return s
}

func (s *CreateJobRequest) SetRegionId(v string) *CreateJobRequest {
	s.RegionId = &v
	return s
}

func (s *CreateJobRequest) SetType(v string) *CreateJobRequest {
	s.Type = &v
	return s
}

func (s *CreateJobRequest) SetRunParameter(v string) *CreateJobRequest {
	s.RunParameter = &v
	return s
}

func (s *CreateJobRequest) SetFailAct(v string) *CreateJobRequest {
	s.FailAct = &v
	return s
}

func (s *CreateJobRequest) SetMaxRetry(v int32) *CreateJobRequest {
	s.MaxRetry = &v
	return s
}

func (s *CreateJobRequest) SetRetryInterval(v int32) *CreateJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *CreateJobRequest) SetResourceGroupId(v string) *CreateJobRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateJobResponseBody) SetRequestId(v string) *CreateJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateJobResponseBody) SetId(v string) *CreateJobResponseBody {
	s.Id = &v
	return s
}

type CreateJobResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateJobResponse) GoString() string {
	return s.String()
}

func (s *CreateJobResponse) SetHeaders(v map[string]*string) *CreateJobResponse {
	s.Headers = v
	return s
}

func (s *CreateJobResponse) SetBody(v *CreateJobResponseBody) *CreateJobResponse {
	s.Body = v
	return s
}

type CreateLibraryRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	LibraryVersion  *string `json:"LibraryVersion,omitempty" xml:"LibraryVersion,omitempty"`
	SourceType      *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	SourceLocation  *string `json:"SourceLocation,omitempty" xml:"SourceLocation,omitempty"`
	Scope           *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	Properties      *string `json:"Properties,omitempty" xml:"Properties,omitempty"`
}

func (s CreateLibraryRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateLibraryRequest) GoString() string {
	return s.String()
}

func (s *CreateLibraryRequest) SetResourceOwnerId(v int64) *CreateLibraryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateLibraryRequest) SetRegionId(v string) *CreateLibraryRequest {
	s.RegionId = &v
	return s
}

func (s *CreateLibraryRequest) SetType(v string) *CreateLibraryRequest {
	s.Type = &v
	return s
}

func (s *CreateLibraryRequest) SetName(v string) *CreateLibraryRequest {
	s.Name = &v
	return s
}

func (s *CreateLibraryRequest) SetLibraryVersion(v string) *CreateLibraryRequest {
	s.LibraryVersion = &v
	return s
}

func (s *CreateLibraryRequest) SetSourceType(v string) *CreateLibraryRequest {
	s.SourceType = &v
	return s
}

func (s *CreateLibraryRequest) SetSourceLocation(v string) *CreateLibraryRequest {
	s.SourceLocation = &v
	return s
}

func (s *CreateLibraryRequest) SetScope(v string) *CreateLibraryRequest {
	s.Scope = &v
	return s
}

func (s *CreateLibraryRequest) SetProperties(v string) *CreateLibraryRequest {
	s.Properties = &v
	return s
}

type CreateLibraryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CreateLibraryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateLibraryResponseBody) GoString() string {
	return s.String()
}

func (s *CreateLibraryResponseBody) SetRequestId(v string) *CreateLibraryResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateLibraryResponseBody) SetData(v string) *CreateLibraryResponseBody {
	s.Data = &v
	return s
}

type CreateLibraryResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateLibraryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateLibraryResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateLibraryResponse) GoString() string {
	return s.String()
}

func (s *CreateLibraryResponse) SetHeaders(v map[string]*string) *CreateLibraryResponse {
	s.Headers = v
	return s
}

func (s *CreateLibraryResponse) SetBody(v *CreateLibraryResponseBody) *CreateLibraryResponse {
	s.Body = v
	return s
}

type CreateMetaTablePreviewTaskRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DatabaseId      *string `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	TableId         *string `json:"TableId,omitempty" xml:"TableId,omitempty"`
	User            *string `json:"User,omitempty" xml:"User,omitempty"`
	Password        *string `json:"Password,omitempty" xml:"Password,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateMetaTablePreviewTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaTablePreviewTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateMetaTablePreviewTaskRequest) SetResourceOwnerId(v int64) *CreateMetaTablePreviewTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateMetaTablePreviewTaskRequest) SetRegionId(v string) *CreateMetaTablePreviewTaskRequest {
	s.RegionId = &v
	return s
}

func (s *CreateMetaTablePreviewTaskRequest) SetClusterId(v string) *CreateMetaTablePreviewTaskRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateMetaTablePreviewTaskRequest) SetDatabaseId(v string) *CreateMetaTablePreviewTaskRequest {
	s.DatabaseId = &v
	return s
}

func (s *CreateMetaTablePreviewTaskRequest) SetTableId(v string) *CreateMetaTablePreviewTaskRequest {
	s.TableId = &v
	return s
}

func (s *CreateMetaTablePreviewTaskRequest) SetUser(v string) *CreateMetaTablePreviewTaskRequest {
	s.User = &v
	return s
}

func (s *CreateMetaTablePreviewTaskRequest) SetPassword(v string) *CreateMetaTablePreviewTaskRequest {
	s.Password = &v
	return s
}

func (s *CreateMetaTablePreviewTaskRequest) SetResourceGroupId(v string) *CreateMetaTablePreviewTaskRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateMetaTablePreviewTaskResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateMetaTablePreviewTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaTablePreviewTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMetaTablePreviewTaskResponseBody) SetTaskId(v string) *CreateMetaTablePreviewTaskResponseBody {
	s.TaskId = &v
	return s
}

func (s *CreateMetaTablePreviewTaskResponseBody) SetRequestId(v string) *CreateMetaTablePreviewTaskResponseBody {
	s.RequestId = &v
	return s
}

type CreateMetaTablePreviewTaskResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateMetaTablePreviewTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMetaTablePreviewTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMetaTablePreviewTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateMetaTablePreviewTaskResponse) SetHeaders(v map[string]*string) *CreateMetaTablePreviewTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateMetaTablePreviewTaskResponse) SetBody(v *CreateMetaTablePreviewTaskResponseBody) *CreateMetaTablePreviewTaskResponse {
	s.Body = v
	return s
}

type CreateNoteRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s CreateNoteRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateNoteRequest) GoString() string {
	return s.String()
}

func (s *CreateNoteRequest) SetResourceOwnerId(v int64) *CreateNoteRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateNoteRequest) SetName(v string) *CreateNoteRequest {
	s.Name = &v
	return s
}

func (s *CreateNoteRequest) SetRegionId(v string) *CreateNoteRequest {
	s.RegionId = &v
	return s
}

func (s *CreateNoteRequest) SetType(v string) *CreateNoteRequest {
	s.Type = &v
	return s
}

func (s *CreateNoteRequest) SetClusterId(v string) *CreateNoteRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateNoteRequest) SetResourceGroupId(v string) *CreateNoteRequest {
	s.ResourceGroupId = &v
	return s
}

type CreateNoteResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Paragraph *string `json:"Paragraph,omitempty" xml:"Paragraph,omitempty"`
}

func (s CreateNoteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateNoteResponseBody) GoString() string {
	return s.String()
}

func (s *CreateNoteResponseBody) SetRequestId(v string) *CreateNoteResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateNoteResponseBody) SetId(v string) *CreateNoteResponseBody {
	s.Id = &v
	return s
}

func (s *CreateNoteResponseBody) SetParagraph(v string) *CreateNoteResponseBody {
	s.Paragraph = &v
	return s
}

type CreateNoteResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateNoteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateNoteResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateNoteResponse) GoString() string {
	return s.String()
}

func (s *CreateNoteResponse) SetHeaders(v map[string]*string) *CreateNoteResponse {
	s.Headers = v
	return s
}

func (s *CreateNoteResponse) SetBody(v *CreateNoteResponseBody) *CreateNoteResponse {
	s.Body = v
	return s
}

type CreateParagraphRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	NoteId          *string `json:"NoteId,omitempty" xml:"NoteId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Text            *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s CreateParagraphRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateParagraphRequest) GoString() string {
	return s.String()
}

func (s *CreateParagraphRequest) SetResourceOwnerId(v int64) *CreateParagraphRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateParagraphRequest) SetNoteId(v string) *CreateParagraphRequest {
	s.NoteId = &v
	return s
}

func (s *CreateParagraphRequest) SetRegionId(v string) *CreateParagraphRequest {
	s.RegionId = &v
	return s
}

func (s *CreateParagraphRequest) SetText(v string) *CreateParagraphRequest {
	s.Text = &v
	return s
}

type CreateParagraphResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateParagraphResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateParagraphResponseBody) GoString() string {
	return s.String()
}

func (s *CreateParagraphResponseBody) SetRequestId(v string) *CreateParagraphResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateParagraphResponseBody) SetId(v string) *CreateParagraphResponseBody {
	s.Id = &v
	return s
}

type CreateParagraphResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateParagraphResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateParagraphResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateParagraphResponse) GoString() string {
	return s.String()
}

func (s *CreateParagraphResponse) SetHeaders(v map[string]*string) *CreateParagraphResponse {
	s.Headers = v
	return s
}

func (s *CreateParagraphResponse) SetBody(v *CreateParagraphResponseBody) *CreateParagraphResponse {
	s.Body = v
	return s
}

type CreateResourcePoolRequest struct {
	ResourceOwnerId *int64                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name            *string                            `json:"Name,omitempty" xml:"Name,omitempty"`
	ClusterId       *string                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PoolType        *string                            `json:"PoolType,omitempty" xml:"PoolType,omitempty"`
	Active          *bool                              `json:"Active,omitempty" xml:"Active,omitempty"`
	Note            *string                            `json:"Note,omitempty" xml:"Note,omitempty"`
	YarnSiteConfig  *string                            `json:"YarnSiteConfig,omitempty" xml:"YarnSiteConfig,omitempty"`
	Config          []*CreateResourcePoolRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s CreateResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *CreateResourcePoolRequest) SetResourceOwnerId(v int64) *CreateResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateResourcePoolRequest) SetRegionId(v string) *CreateResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *CreateResourcePoolRequest) SetName(v string) *CreateResourcePoolRequest {
	s.Name = &v
	return s
}

func (s *CreateResourcePoolRequest) SetClusterId(v string) *CreateResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateResourcePoolRequest) SetPoolType(v string) *CreateResourcePoolRequest {
	s.PoolType = &v
	return s
}

func (s *CreateResourcePoolRequest) SetActive(v bool) *CreateResourcePoolRequest {
	s.Active = &v
	return s
}

func (s *CreateResourcePoolRequest) SetNote(v string) *CreateResourcePoolRequest {
	s.Note = &v
	return s
}

func (s *CreateResourcePoolRequest) SetYarnSiteConfig(v string) *CreateResourcePoolRequest {
	s.YarnSiteConfig = &v
	return s
}

func (s *CreateResourcePoolRequest) SetConfig(v []*CreateResourcePoolRequestConfig) *CreateResourcePoolRequest {
	s.Config = v
	return s
}

type CreateResourcePoolRequestConfig struct {
	ConfigType  *string `json:"configType,omitempty" xml:"configType,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	TargetId    *string `json:"TargetId,omitempty" xml:"TargetId,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
}

func (s CreateResourcePoolRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePoolRequestConfig) GoString() string {
	return s.String()
}

func (s *CreateResourcePoolRequestConfig) SetConfigType(v string) *CreateResourcePoolRequestConfig {
	s.ConfigType = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetConfigValue(v string) *CreateResourcePoolRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetTargetId(v string) *CreateResourcePoolRequestConfig {
	s.TargetId = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetNote(v string) *CreateResourcePoolRequestConfig {
	s.Note = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetCategory(v string) *CreateResourcePoolRequestConfig {
	s.Category = &v
	return s
}

func (s *CreateResourcePoolRequestConfig) SetConfigKey(v string) *CreateResourcePoolRequestConfig {
	s.ConfigKey = &v
	return s
}

type CreateResourcePoolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourcePoolResponseBody) SetRequestId(v string) *CreateResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

type CreateResourcePoolResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *CreateResourcePoolResponse) SetHeaders(v map[string]*string) *CreateResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *CreateResourcePoolResponse) SetBody(v *CreateResourcePoolResponseBody) *CreateResourcePoolResponse {
	s.Body = v
	return s
}

type CreateResourceQueueRequest struct {
	ResourceOwnerId *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name            *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	QualifiedName   *string                             `json:"QualifiedName,omitempty" xml:"QualifiedName,omitempty"`
	ClusterId       *string                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ParentQueueId   *int64                              `json:"ParentQueueId,omitempty" xml:"ParentQueueId,omitempty"`
	Leaf            *bool                               `json:"Leaf,omitempty" xml:"Leaf,omitempty"`
	ResourcePoolId  *int64                              `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
	Config          []*CreateResourceQueueRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s CreateResourceQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceQueueRequest) GoString() string {
	return s.String()
}

func (s *CreateResourceQueueRequest) SetResourceOwnerId(v int64) *CreateResourceQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetRegionId(v string) *CreateResourceQueueRequest {
	s.RegionId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetName(v string) *CreateResourceQueueRequest {
	s.Name = &v
	return s
}

func (s *CreateResourceQueueRequest) SetQualifiedName(v string) *CreateResourceQueueRequest {
	s.QualifiedName = &v
	return s
}

func (s *CreateResourceQueueRequest) SetClusterId(v string) *CreateResourceQueueRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetParentQueueId(v int64) *CreateResourceQueueRequest {
	s.ParentQueueId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetLeaf(v bool) *CreateResourceQueueRequest {
	s.Leaf = &v
	return s
}

func (s *CreateResourceQueueRequest) SetResourcePoolId(v int64) *CreateResourceQueueRequest {
	s.ResourcePoolId = &v
	return s
}

func (s *CreateResourceQueueRequest) SetConfig(v []*CreateResourceQueueRequestConfig) *CreateResourceQueueRequest {
	s.Config = v
	return s
}

type CreateResourceQueueRequestConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
}

func (s CreateResourceQueueRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceQueueRequestConfig) GoString() string {
	return s.String()
}

func (s *CreateResourceQueueRequestConfig) SetConfigValue(v string) *CreateResourceQueueRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *CreateResourceQueueRequestConfig) SetNote(v string) *CreateResourceQueueRequestConfig {
	s.Note = &v
	return s
}

func (s *CreateResourceQueueRequestConfig) SetCategory(v string) *CreateResourceQueueRequestConfig {
	s.Category = &v
	return s
}

func (s *CreateResourceQueueRequestConfig) SetConfigKey(v string) *CreateResourceQueueRequestConfig {
	s.ConfigKey = &v
	return s
}

type CreateResourceQueueResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateResourceQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceQueueResponseBody) GoString() string {
	return s.String()
}

func (s *CreateResourceQueueResponseBody) SetRequestId(v string) *CreateResourceQueueResponseBody {
	s.RequestId = &v
	return s
}

type CreateResourceQueueResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateResourceQueueResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateResourceQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateResourceQueueResponse) GoString() string {
	return s.String()
}

func (s *CreateResourceQueueResponse) SetHeaders(v map[string]*string) *CreateResourceQueueResponse {
	s.Headers = v
	return s
}

func (s *CreateResourceQueueResponse) SetBody(v *CreateResourceQueueResponseBody) *CreateResourceQueueResponse {
	s.Body = v
	return s
}

type CreateScalingGroupV2Request struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
}

func (s CreateScalingGroupV2Request) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingGroupV2Request) GoString() string {
	return s.String()
}

func (s *CreateScalingGroupV2Request) SetResourceOwnerId(v int64) *CreateScalingGroupV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetRegionId(v string) *CreateScalingGroupV2Request {
	s.RegionId = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetResourceGroupId(v string) *CreateScalingGroupV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetName(v string) *CreateScalingGroupV2Request {
	s.Name = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetDescription(v string) *CreateScalingGroupV2Request {
	s.Description = &v
	return s
}

func (s *CreateScalingGroupV2Request) SetHostGroupId(v string) *CreateScalingGroupV2Request {
	s.HostGroupId = &v
	return s
}

type CreateScalingGroupV2ResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CreateScalingGroupV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingGroupV2ResponseBody) GoString() string {
	return s.String()
}

func (s *CreateScalingGroupV2ResponseBody) SetRequestId(v string) *CreateScalingGroupV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateScalingGroupV2ResponseBody) SetData(v string) *CreateScalingGroupV2ResponseBody {
	s.Data = &v
	return s
}

type CreateScalingGroupV2Response struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateScalingGroupV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateScalingGroupV2Response) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingGroupV2Response) GoString() string {
	return s.String()
}

func (s *CreateScalingGroupV2Response) SetHeaders(v map[string]*string) *CreateScalingGroupV2Response {
	s.Headers = v
	return s
}

func (s *CreateScalingGroupV2Response) SetBody(v *CreateScalingGroupV2ResponseBody) *CreateScalingGroupV2Response {
	s.Body = v
	return s
}

type CreateScalingRuleRequest struct {
	ResourceOwnerId      *int64                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId            *string                                      `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId          *string                                      `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	RuleCategory         *string                                      `json:"RuleCategory,omitempty" xml:"RuleCategory,omitempty"`
	RuleName             *string                                      `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	AdjustmentType       *string                                      `json:"AdjustmentType,omitempty" xml:"AdjustmentType,omitempty"`
	AdjustmentValue      *int32                                       `json:"AdjustmentValue,omitempty" xml:"AdjustmentValue,omitempty"`
	Cooldown             *int32                                       `json:"Cooldown,omitempty" xml:"Cooldown,omitempty"`
	LaunchTime           *string                                      `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
	LaunchExpirationTime *int32                                       `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	RecurrenceType       *string                                      `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	RecurrenceValue      *string                                      `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
	RecurrenceEndTime    *string                                      `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	WithGrace            *bool                                        `json:"WithGrace,omitempty" xml:"WithGrace,omitempty"`
	TimeoutWithGrace     *int64                                       `json:"TimeoutWithGrace,omitempty" xml:"TimeoutWithGrace,omitempty"`
	SchedulerTrigger     []*CreateScalingRuleRequestSchedulerTrigger  `json:"SchedulerTrigger,omitempty" xml:"SchedulerTrigger,omitempty" type:"Repeated"`
	CloudWatchTrigger    []*CreateScalingRuleRequestCloudWatchTrigger `json:"CloudWatchTrigger,omitempty" xml:"CloudWatchTrigger,omitempty" type:"Repeated"`
}

func (s CreateScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *CreateScalingRuleRequest) SetResourceOwnerId(v int64) *CreateScalingRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateScalingRuleRequest) SetRegionId(v string) *CreateScalingRuleRequest {
	s.RegionId = &v
	return s
}

func (s *CreateScalingRuleRequest) SetClusterId(v string) *CreateScalingRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateScalingRuleRequest) SetHostGroupId(v string) *CreateScalingRuleRequest {
	s.HostGroupId = &v
	return s
}

func (s *CreateScalingRuleRequest) SetRuleCategory(v string) *CreateScalingRuleRequest {
	s.RuleCategory = &v
	return s
}

func (s *CreateScalingRuleRequest) SetRuleName(v string) *CreateScalingRuleRequest {
	s.RuleName = &v
	return s
}

func (s *CreateScalingRuleRequest) SetAdjustmentType(v string) *CreateScalingRuleRequest {
	s.AdjustmentType = &v
	return s
}

func (s *CreateScalingRuleRequest) SetAdjustmentValue(v int32) *CreateScalingRuleRequest {
	s.AdjustmentValue = &v
	return s
}

func (s *CreateScalingRuleRequest) SetCooldown(v int32) *CreateScalingRuleRequest {
	s.Cooldown = &v
	return s
}

func (s *CreateScalingRuleRequest) SetLaunchTime(v string) *CreateScalingRuleRequest {
	s.LaunchTime = &v
	return s
}

func (s *CreateScalingRuleRequest) SetLaunchExpirationTime(v int32) *CreateScalingRuleRequest {
	s.LaunchExpirationTime = &v
	return s
}

func (s *CreateScalingRuleRequest) SetRecurrenceType(v string) *CreateScalingRuleRequest {
	s.RecurrenceType = &v
	return s
}

func (s *CreateScalingRuleRequest) SetRecurrenceValue(v string) *CreateScalingRuleRequest {
	s.RecurrenceValue = &v
	return s
}

func (s *CreateScalingRuleRequest) SetRecurrenceEndTime(v string) *CreateScalingRuleRequest {
	s.RecurrenceEndTime = &v
	return s
}

func (s *CreateScalingRuleRequest) SetWithGrace(v bool) *CreateScalingRuleRequest {
	s.WithGrace = &v
	return s
}

func (s *CreateScalingRuleRequest) SetTimeoutWithGrace(v int64) *CreateScalingRuleRequest {
	s.TimeoutWithGrace = &v
	return s
}

func (s *CreateScalingRuleRequest) SetSchedulerTrigger(v []*CreateScalingRuleRequestSchedulerTrigger) *CreateScalingRuleRequest {
	s.SchedulerTrigger = v
	return s
}

func (s *CreateScalingRuleRequest) SetCloudWatchTrigger(v []*CreateScalingRuleRequestCloudWatchTrigger) *CreateScalingRuleRequest {
	s.CloudWatchTrigger = v
	return s
}

type CreateScalingRuleRequestSchedulerTrigger struct {
	LaunchExpirationTime *int32  `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	RecurrenceValue      *string `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
	RecurrenceType       *string `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	RecurrenceEndTime    *string `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	LaunchTime           *string `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
}

func (s CreateScalingRuleRequestSchedulerTrigger) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingRuleRequestSchedulerTrigger) GoString() string {
	return s.String()
}

func (s *CreateScalingRuleRequestSchedulerTrigger) SetLaunchExpirationTime(v int32) *CreateScalingRuleRequestSchedulerTrigger {
	s.LaunchExpirationTime = &v
	return s
}

func (s *CreateScalingRuleRequestSchedulerTrigger) SetRecurrenceValue(v string) *CreateScalingRuleRequestSchedulerTrigger {
	s.RecurrenceValue = &v
	return s
}

func (s *CreateScalingRuleRequestSchedulerTrigger) SetRecurrenceType(v string) *CreateScalingRuleRequestSchedulerTrigger {
	s.RecurrenceType = &v
	return s
}

func (s *CreateScalingRuleRequestSchedulerTrigger) SetRecurrenceEndTime(v string) *CreateScalingRuleRequestSchedulerTrigger {
	s.RecurrenceEndTime = &v
	return s
}

func (s *CreateScalingRuleRequestSchedulerTrigger) SetLaunchTime(v string) *CreateScalingRuleRequestSchedulerTrigger {
	s.LaunchTime = &v
	return s
}

type CreateScalingRuleRequestCloudWatchTrigger struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	MetricName         *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	EvaluationCount    *string `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
}

func (s CreateScalingRuleRequestCloudWatchTrigger) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingRuleRequestCloudWatchTrigger) GoString() string {
	return s.String()
}

func (s *CreateScalingRuleRequestCloudWatchTrigger) SetComparisonOperator(v string) *CreateScalingRuleRequestCloudWatchTrigger {
	s.ComparisonOperator = &v
	return s
}

func (s *CreateScalingRuleRequestCloudWatchTrigger) SetMetricName(v string) *CreateScalingRuleRequestCloudWatchTrigger {
	s.MetricName = &v
	return s
}

func (s *CreateScalingRuleRequestCloudWatchTrigger) SetEvaluationCount(v string) *CreateScalingRuleRequestCloudWatchTrigger {
	s.EvaluationCount = &v
	return s
}

func (s *CreateScalingRuleRequestCloudWatchTrigger) SetThreshold(v string) *CreateScalingRuleRequestCloudWatchTrigger {
	s.Threshold = &v
	return s
}

func (s *CreateScalingRuleRequestCloudWatchTrigger) SetPeriod(v int32) *CreateScalingRuleRequestCloudWatchTrigger {
	s.Period = &v
	return s
}

func (s *CreateScalingRuleRequestCloudWatchTrigger) SetStatistics(v string) *CreateScalingRuleRequestCloudWatchTrigger {
	s.Statistics = &v
	return s
}

type CreateScalingRuleResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScalingRuleId *string `json:"ScalingRuleId,omitempty" xml:"ScalingRuleId,omitempty"`
}

func (s CreateScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *CreateScalingRuleResponseBody) SetRequestId(v string) *CreateScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateScalingRuleResponseBody) SetScalingRuleId(v string) *CreateScalingRuleResponseBody {
	s.ScalingRuleId = &v
	return s
}

type CreateScalingRuleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *CreateScalingRuleResponse) SetHeaders(v map[string]*string) *CreateScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *CreateScalingRuleResponse) SetBody(v *CreateScalingRuleResponseBody) *CreateScalingRuleResponse {
	s.Body = v
	return s
}

type CreateTagRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Category        *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s CreateTagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTagRequest) GoString() string {
	return s.String()
}

func (s *CreateTagRequest) SetResourceOwnerId(v int64) *CreateTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateTagRequest) SetRegionId(v string) *CreateTagRequest {
	s.RegionId = &v
	return s
}

func (s *CreateTagRequest) SetId(v int64) *CreateTagRequest {
	s.Id = &v
	return s
}

func (s *CreateTagRequest) SetName(v string) *CreateTagRequest {
	s.Name = &v
	return s
}

func (s *CreateTagRequest) SetCategory(v string) *CreateTagRequest {
	s.Category = &v
	return s
}

func (s *CreateTagRequest) SetDescription(v string) *CreateTagRequest {
	s.Description = &v
	return s
}

type CreateTagResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CreateTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTagResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTagResponseBody) SetRequestId(v string) *CreateTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTagResponseBody) SetData(v string) *CreateTagResponseBody {
	s.Data = &v
	return s
}

type CreateTagResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateTagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTagResponse) GoString() string {
	return s.String()
}

func (s *CreateTagResponse) SetHeaders(v map[string]*string) *CreateTagResponse {
	s.Headers = v
	return s
}

func (s *CreateTagResponse) SetBody(v *CreateTagResponseBody) *CreateTagResponse {
	s.Body = v
	return s
}

type CreateUserRequest struct {
	ResourceOwnerId      *int64                                   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AliyunUserId         *string                                  `json:"AliyunUserId,omitempty" xml:"AliyunUserId,omitempty"`
	UserName             *string                                  `json:"UserName,omitempty" xml:"UserName,omitempty"`
	UserType             *string                                  `json:"UserType,omitempty" xml:"UserType,omitempty"`
	Status               *string                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	Description          *string                                  `json:"Description,omitempty" xml:"Description,omitempty"`
	RoleIdList           []*int                                   `json:"RoleIdList,omitempty" xml:"RoleIdList,omitempty" type:"Repeated"`
	GroupIdList          []*int                                   `json:"GroupIdList,omitempty" xml:"GroupIdList,omitempty" type:"Repeated"`
	UserAccountParamList []*CreateUserRequestUserAccountParamList `json:"UserAccountParamList,omitempty" xml:"UserAccountParamList,omitempty" type:"Repeated"`
}

func (s CreateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUserRequest) GoString() string {
	return s.String()
}

func (s *CreateUserRequest) SetResourceOwnerId(v int64) *CreateUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateUserRequest) SetRegionId(v string) *CreateUserRequest {
	s.RegionId = &v
	return s
}

func (s *CreateUserRequest) SetAliyunUserId(v string) *CreateUserRequest {
	s.AliyunUserId = &v
	return s
}

func (s *CreateUserRequest) SetUserName(v string) *CreateUserRequest {
	s.UserName = &v
	return s
}

func (s *CreateUserRequest) SetUserType(v string) *CreateUserRequest {
	s.UserType = &v
	return s
}

func (s *CreateUserRequest) SetStatus(v string) *CreateUserRequest {
	s.Status = &v
	return s
}

func (s *CreateUserRequest) SetDescription(v string) *CreateUserRequest {
	s.Description = &v
	return s
}

func (s *CreateUserRequest) SetRoleIdList(v []*int) *CreateUserRequest {
	s.RoleIdList = v
	return s
}

func (s *CreateUserRequest) SetGroupIdList(v []*int) *CreateUserRequest {
	s.GroupIdList = v
	return s
}

func (s *CreateUserRequest) SetUserAccountParamList(v []*CreateUserRequestUserAccountParamList) *CreateUserRequest {
	s.UserAccountParamList = v
	return s
}

type CreateUserRequestUserAccountParamList struct {
	AuthType        *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	AccountType     *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
}

func (s CreateUserRequestUserAccountParamList) String() string {
	return tea.Prettify(s)
}

func (s CreateUserRequestUserAccountParamList) GoString() string {
	return s.String()
}

func (s *CreateUserRequestUserAccountParamList) SetAuthType(v string) *CreateUserRequestUserAccountParamList {
	s.AuthType = &v
	return s
}

func (s *CreateUserRequestUserAccountParamList) SetAccountPassword(v string) *CreateUserRequestUserAccountParamList {
	s.AccountPassword = &v
	return s
}

func (s *CreateUserRequestUserAccountParamList) SetAccountType(v string) *CreateUserRequestUserAccountParamList {
	s.AccountType = &v
	return s
}

type CreateUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Paging    *bool   `json:"Paging,omitempty" xml:"Paging,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s CreateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUserResponseBody) SetRequestId(v string) *CreateUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateUserResponseBody) SetPaging(v bool) *CreateUserResponseBody {
	s.Paging = &v
	return s
}

func (s *CreateUserResponseBody) SetData(v bool) *CreateUserResponseBody {
	s.Data = &v
	return s
}

type CreateUserResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUserResponse) GoString() string {
	return s.String()
}

func (s *CreateUserResponse) SetHeaders(v map[string]*string) *CreateUserResponse {
	s.Headers = v
	return s
}

func (s *CreateUserResponse) SetBody(v *CreateUserResponseBody) *CreateUserResponse {
	s.Body = v
	return s
}

type CreateUsersRequest struct {
	ResourceOwnerId *int64                        `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string                       `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	UserInfo        []*CreateUsersRequestUserInfo `json:"UserInfo,omitempty" xml:"UserInfo,omitempty" type:"Repeated"`
}

func (s CreateUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateUsersRequest) GoString() string {
	return s.String()
}

func (s *CreateUsersRequest) SetResourceOwnerId(v int64) *CreateUsersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateUsersRequest) SetRegionId(v string) *CreateUsersRequest {
	s.RegionId = &v
	return s
}

func (s *CreateUsersRequest) SetClusterId(v string) *CreateUsersRequest {
	s.ClusterId = &v
	return s
}

func (s *CreateUsersRequest) SetUserInfo(v []*CreateUsersRequestUserInfo) *CreateUsersRequest {
	s.UserInfo = v
	return s
}

type CreateUsersRequestUserInfo struct {
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	UserId   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s CreateUsersRequestUserInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateUsersRequestUserInfo) GoString() string {
	return s.String()
}

func (s *CreateUsersRequestUserInfo) SetType(v string) *CreateUsersRequestUserInfo {
	s.Type = &v
	return s
}

func (s *CreateUsersRequestUserInfo) SetUserId(v string) *CreateUsersRequestUserInfo {
	s.UserId = &v
	return s
}

func (s *CreateUsersRequestUserInfo) SetUserName(v string) *CreateUsersRequestUserInfo {
	s.UserName = &v
	return s
}

type CreateUsersResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s CreateUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateUsersResponseBody) GoString() string {
	return s.String()
}

func (s *CreateUsersResponseBody) SetRequestId(v string) *CreateUsersResponseBody {
	s.RequestId = &v
	return s
}

type CreateUsersResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateUsersResponse) GoString() string {
	return s.String()
}

func (s *CreateUsersResponse) SetHeaders(v map[string]*string) *CreateUsersResponse {
	s.Headers = v
	return s
}

func (s *CreateUsersResponse) SetBody(v *CreateUsersResponseBody) *CreateUsersResponse {
	s.Body = v
	return s
}

type DecommissionHostComponentRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostInstanceId  *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ComponentName   *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	TimeoutSeconds  *int64  `json:"TimeoutSeconds,omitempty" xml:"TimeoutSeconds,omitempty"`
}

func (s DecommissionHostComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s DecommissionHostComponentRequest) GoString() string {
	return s.String()
}

func (s *DecommissionHostComponentRequest) SetResourceOwnerId(v int64) *DecommissionHostComponentRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DecommissionHostComponentRequest) SetRegionId(v string) *DecommissionHostComponentRequest {
	s.RegionId = &v
	return s
}

func (s *DecommissionHostComponentRequest) SetClusterId(v string) *DecommissionHostComponentRequest {
	s.ClusterId = &v
	return s
}

func (s *DecommissionHostComponentRequest) SetHostInstanceId(v string) *DecommissionHostComponentRequest {
	s.HostInstanceId = &v
	return s
}

func (s *DecommissionHostComponentRequest) SetServiceName(v string) *DecommissionHostComponentRequest {
	s.ServiceName = &v
	return s
}

func (s *DecommissionHostComponentRequest) SetComponentName(v string) *DecommissionHostComponentRequest {
	s.ComponentName = &v
	return s
}

func (s *DecommissionHostComponentRequest) SetTimeoutSeconds(v int64) *DecommissionHostComponentRequest {
	s.TimeoutSeconds = &v
	return s
}

type DecommissionHostComponentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DecommissionHostComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DecommissionHostComponentResponseBody) GoString() string {
	return s.String()
}

func (s *DecommissionHostComponentResponseBody) SetRequestId(v string) *DecommissionHostComponentResponseBody {
	s.RequestId = &v
	return s
}

type DecommissionHostComponentResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DecommissionHostComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DecommissionHostComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s DecommissionHostComponentResponse) GoString() string {
	return s.String()
}

func (s *DecommissionHostComponentResponse) SetHeaders(v map[string]*string) *DecommissionHostComponentResponse {
	s.Headers = v
	return s
}

func (s *DecommissionHostComponentResponse) SetBody(v *DecommissionHostComponentResponseBody) *DecommissionHostComponentResponse {
	s.Body = v
	return s
}

type DeleteClusterTemplateRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DeleteClusterTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteClusterTemplateRequest) SetResourceOwnerId(v int64) *DeleteClusterTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteClusterTemplateRequest) SetRegionId(v string) *DeleteClusterTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteClusterTemplateRequest) SetBizId(v string) *DeleteClusterTemplateRequest {
	s.BizId = &v
	return s
}

func (s *DeleteClusterTemplateRequest) SetResourceGroupId(v string) *DeleteClusterTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

type DeleteClusterTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteClusterTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteClusterTemplateResponseBody) SetRequestId(v string) *DeleteClusterTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteClusterTemplateResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteClusterTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteClusterTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteClusterTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteClusterTemplateResponse) SetHeaders(v map[string]*string) *DeleteClusterTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteClusterTemplateResponse) SetBody(v *DeleteClusterTemplateResponseBody) *DeleteClusterTemplateResponse {
	s.Body = v
	return s
}

type DeleteExecutionPlanRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteExecutionPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteExecutionPlanRequest) GoString() string {
	return s.String()
}

func (s *DeleteExecutionPlanRequest) SetResourceOwnerId(v int64) *DeleteExecutionPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteExecutionPlanRequest) SetRegionId(v string) *DeleteExecutionPlanRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteExecutionPlanRequest) SetId(v string) *DeleteExecutionPlanRequest {
	s.Id = &v
	return s
}

type DeleteExecutionPlanResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteExecutionPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteExecutionPlanResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteExecutionPlanResponseBody) SetRequestId(v string) *DeleteExecutionPlanResponseBody {
	s.RequestId = &v
	return s
}

type DeleteExecutionPlanResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteExecutionPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteExecutionPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteExecutionPlanResponse) GoString() string {
	return s.String()
}

func (s *DeleteExecutionPlanResponse) SetHeaders(v map[string]*string) *DeleteExecutionPlanResponse {
	s.Headers = v
	return s
}

func (s *DeleteExecutionPlanResponse) SetBody(v *DeleteExecutionPlanResponseBody) *DeleteExecutionPlanResponse {
	s.Body = v
	return s
}

type DeleteFlowRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowRequest) SetId(v string) *DeleteFlowRequest {
	s.Id = &v
	return s
}

func (s *DeleteFlowRequest) SetProjectId(v string) *DeleteFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowRequest) SetRegionId(v string) *DeleteFlowRequest {
	s.RegionId = &v
	return s
}

type DeleteFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowResponseBody) SetRequestId(v string) *DeleteFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowResponseBody) SetData(v bool) *DeleteFlowResponseBody {
	s.Data = &v
	return s
}

type DeleteFlowResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowResponse) SetHeaders(v map[string]*string) *DeleteFlowResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowResponse) SetBody(v *DeleteFlowResponseBody) *DeleteFlowResponse {
	s.Body = v
	return s
}

type DeleteFlowCategoryRequest struct {
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowCategoryRequest) SetId(v string) *DeleteFlowCategoryRequest {
	s.Id = &v
	return s
}

func (s *DeleteFlowCategoryRequest) SetRegionId(v string) *DeleteFlowCategoryRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowCategoryRequest) SetProjectId(v string) *DeleteFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

type DeleteFlowCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowCategoryResponseBody) SetRequestId(v string) *DeleteFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowCategoryResponseBody) SetData(v bool) *DeleteFlowCategoryResponseBody {
	s.Data = &v
	return s
}

type DeleteFlowCategoryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowCategoryResponse) SetHeaders(v map[string]*string) *DeleteFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowCategoryResponse) SetBody(v *DeleteFlowCategoryResponseBody) *DeleteFlowCategoryResponse {
	s.Body = v
	return s
}

type DeleteFlowEditLockRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
}

func (s DeleteFlowEditLockRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowEditLockRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowEditLockRequest) SetResourceOwnerId(v int64) *DeleteFlowEditLockRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteFlowEditLockRequest) SetRegionId(v string) *DeleteFlowEditLockRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowEditLockRequest) SetEntityId(v string) *DeleteFlowEditLockRequest {
	s.EntityId = &v
	return s
}

type DeleteFlowEditLockResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteFlowEditLockResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowEditLockResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowEditLockResponseBody) SetRequestId(v string) *DeleteFlowEditLockResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowEditLockResponseBody) SetData(v bool) *DeleteFlowEditLockResponseBody {
	s.Data = &v
	return s
}

type DeleteFlowEditLockResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFlowEditLockResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowEditLockResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowEditLockResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowEditLockResponse) SetHeaders(v map[string]*string) *DeleteFlowEditLockResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowEditLockResponse) SetBody(v *DeleteFlowEditLockResponseBody) *DeleteFlowEditLockResponse {
	s.Body = v
	return s
}

type DeleteFlowJobRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DeleteFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowJobRequest) SetRegionId(v string) *DeleteFlowJobRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowJobRequest) SetProjectId(v string) *DeleteFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowJobRequest) SetId(v string) *DeleteFlowJobRequest {
	s.Id = &v
	return s
}

type DeleteFlowJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowJobResponseBody) SetRequestId(v string) *DeleteFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowJobResponseBody) SetData(v bool) *DeleteFlowJobResponseBody {
	s.Data = &v
	return s
}

type DeleteFlowJobResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowJobResponse) SetHeaders(v map[string]*string) *DeleteFlowJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowJobResponse) SetBody(v *DeleteFlowJobResponseBody) *DeleteFlowJobResponse {
	s.Body = v
	return s
}

type DeleteFlowProjectRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectRequest) SetRegionId(v string) *DeleteFlowProjectRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowProjectRequest) SetProjectId(v string) *DeleteFlowProjectRequest {
	s.ProjectId = &v
	return s
}

type DeleteFlowProjectResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectResponseBody) SetRequestId(v string) *DeleteFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowProjectResponseBody) SetData(v bool) *DeleteFlowProjectResponseBody {
	s.Data = &v
	return s
}

type DeleteFlowProjectResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectResponse) SetHeaders(v map[string]*string) *DeleteFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowProjectResponse) SetBody(v *DeleteFlowProjectResponseBody) *DeleteFlowProjectResponse {
	s.Body = v
	return s
}

type DeleteFlowProjectClusterSettingRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DeleteFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectClusterSettingRequest) SetRegionId(v string) *DeleteFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowProjectClusterSettingRequest) SetProjectId(v string) *DeleteFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowProjectClusterSettingRequest) SetClusterId(v string) *DeleteFlowProjectClusterSettingRequest {
	s.ClusterId = &v
	return s
}

type DeleteFlowProjectClusterSettingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectClusterSettingResponseBody) SetRequestId(v string) *DeleteFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowProjectClusterSettingResponseBody) SetData(v bool) *DeleteFlowProjectClusterSettingResponseBody {
	s.Data = &v
	return s
}

type DeleteFlowProjectClusterSettingResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *DeleteFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowProjectClusterSettingResponse) SetBody(v *DeleteFlowProjectClusterSettingResponseBody) *DeleteFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type DeleteFlowProjectUserRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	UserName  *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s DeleteFlowProjectUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectUserRequest) SetRegionId(v string) *DeleteFlowProjectUserRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteFlowProjectUserRequest) SetProjectId(v string) *DeleteFlowProjectUserRequest {
	s.ProjectId = &v
	return s
}

func (s *DeleteFlowProjectUserRequest) SetUserName(v string) *DeleteFlowProjectUserRequest {
	s.UserName = &v
	return s
}

type DeleteFlowProjectUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteFlowProjectUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectUserResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectUserResponseBody) SetRequestId(v string) *DeleteFlowProjectUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteFlowProjectUserResponseBody) SetData(v bool) *DeleteFlowProjectUserResponseBody {
	s.Data = &v
	return s
}

type DeleteFlowProjectUserResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteFlowProjectUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteFlowProjectUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteFlowProjectUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteFlowProjectUserResponse) SetHeaders(v map[string]*string) *DeleteFlowProjectUserResponse {
	s.Headers = v
	return s
}

func (s *DeleteFlowProjectUserResponse) SetBody(v *DeleteFlowProjectUserResponseBody) *DeleteFlowProjectUserResponse {
	s.Body = v
	return s
}

type DeleteJobRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DeleteJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteJobRequest) SetResourceOwnerId(v int64) *DeleteJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteJobRequest) SetId(v string) *DeleteJobRequest {
	s.Id = &v
	return s
}

func (s *DeleteJobRequest) SetRegionId(v string) *DeleteJobRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteJobRequest) SetResourceGroupId(v string) *DeleteJobRequest {
	s.ResourceGroupId = &v
	return s
}

type DeleteJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteJobResponseBody) SetRequestId(v string) *DeleteJobResponseBody {
	s.RequestId = &v
	return s
}

type DeleteJobResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteJobResponse) SetHeaders(v map[string]*string) *DeleteJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteJobResponse) SetBody(v *DeleteJobResponseBody) *DeleteJobResponse {
	s.Body = v
	return s
}

type DeleteLibrariesRequest struct {
	ResourceOwnerId  *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId         *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LibraryBizIdList []*string `json:"LibraryBizIdList,omitempty" xml:"LibraryBizIdList,omitempty" type:"Repeated"`
}

func (s DeleteLibrariesRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteLibrariesRequest) GoString() string {
	return s.String()
}

func (s *DeleteLibrariesRequest) SetResourceOwnerId(v int64) *DeleteLibrariesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteLibrariesRequest) SetRegionId(v string) *DeleteLibrariesRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteLibrariesRequest) SetLibraryBizIdList(v []*string) *DeleteLibrariesRequest {
	s.LibraryBizIdList = v
	return s
}

type DeleteLibrariesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteLibrariesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteLibrariesResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteLibrariesResponseBody) SetRequestId(v string) *DeleteLibrariesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteLibrariesResponseBody) SetData(v bool) *DeleteLibrariesResponseBody {
	s.Data = &v
	return s
}

type DeleteLibrariesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteLibrariesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteLibrariesResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteLibrariesResponse) GoString() string {
	return s.String()
}

func (s *DeleteLibrariesResponse) SetHeaders(v map[string]*string) *DeleteLibrariesResponse {
	s.Headers = v
	return s
}

func (s *DeleteLibrariesResponse) SetBody(v *DeleteLibrariesResponseBody) *DeleteLibrariesResponse {
	s.Body = v
	return s
}

type DeleteNoteRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DeleteNoteRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteNoteRequest) GoString() string {
	return s.String()
}

func (s *DeleteNoteRequest) SetResourceOwnerId(v int64) *DeleteNoteRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteNoteRequest) SetId(v string) *DeleteNoteRequest {
	s.Id = &v
	return s
}

func (s *DeleteNoteRequest) SetRegionId(v string) *DeleteNoteRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteNoteRequest) SetResourceGroupId(v string) *DeleteNoteRequest {
	s.ResourceGroupId = &v
	return s
}

type DeleteNoteResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteNoteResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteNoteResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteNoteResponseBody) SetRequestId(v string) *DeleteNoteResponseBody {
	s.RequestId = &v
	return s
}

type DeleteNoteResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteNoteResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteNoteResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteNoteResponse) GoString() string {
	return s.String()
}

func (s *DeleteNoteResponse) SetHeaders(v map[string]*string) *DeleteNoteResponse {
	s.Headers = v
	return s
}

func (s *DeleteNoteResponse) SetBody(v *DeleteNoteResponseBody) *DeleteNoteResponse {
	s.Body = v
	return s
}

type DeleteResourcePoolRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourcePoolId  *string `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourcePoolRequest) SetResourceOwnerId(v int64) *DeleteResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteResourcePoolRequest) SetResourcePoolId(v string) *DeleteResourcePoolRequest {
	s.ResourcePoolId = &v
	return s
}

func (s *DeleteResourcePoolRequest) SetClusterId(v string) *DeleteResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteResourcePoolRequest) SetRegionId(v string) *DeleteResourcePoolRequest {
	s.RegionId = &v
	return s
}

type DeleteResourcePoolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteResourcePoolResponseBody) SetRequestId(v string) *DeleteResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

type DeleteResourcePoolResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourcePoolResponse) SetHeaders(v map[string]*string) *DeleteResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *DeleteResourcePoolResponse) SetBody(v *DeleteResourcePoolResponseBody) *DeleteResourcePoolResponse {
	s.Body = v
	return s
}

type DeleteResourceQueueRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceQueueId *string `json:"ResourceQueueId,omitempty" xml:"ResourceQueueId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DeleteResourceQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceQueueRequest) GoString() string {
	return s.String()
}

func (s *DeleteResourceQueueRequest) SetResourceOwnerId(v int64) *DeleteResourceQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteResourceQueueRequest) SetResourceQueueId(v string) *DeleteResourceQueueRequest {
	s.ResourceQueueId = &v
	return s
}

func (s *DeleteResourceQueueRequest) SetClusterId(v string) *DeleteResourceQueueRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteResourceQueueRequest) SetRegionId(v string) *DeleteResourceQueueRequest {
	s.RegionId = &v
	return s
}

type DeleteResourceQueueResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteResourceQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceQueueResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteResourceQueueResponseBody) SetRequestId(v string) *DeleteResourceQueueResponseBody {
	s.RequestId = &v
	return s
}

type DeleteResourceQueueResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteResourceQueueResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteResourceQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteResourceQueueResponse) GoString() string {
	return s.String()
}

func (s *DeleteResourceQueueResponse) SetHeaders(v map[string]*string) *DeleteResourceQueueResponse {
	s.Headers = v
	return s
}

func (s *DeleteResourceQueueResponse) SetBody(v *DeleteResourceQueueResponseBody) *DeleteResourceQueueResponse {
	s.Body = v
	return s
}

type DeleteScalingRuleRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	ScalingRuleId   *string `json:"ScalingRuleId,omitempty" xml:"ScalingRuleId,omitempty"`
}

func (s DeleteScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DeleteScalingRuleRequest) SetResourceOwnerId(v int64) *DeleteScalingRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteScalingRuleRequest) SetRegionId(v string) *DeleteScalingRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteScalingRuleRequest) SetClusterId(v string) *DeleteScalingRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteScalingRuleRequest) SetHostGroupId(v string) *DeleteScalingRuleRequest {
	s.HostGroupId = &v
	return s
}

func (s *DeleteScalingRuleRequest) SetScalingRuleId(v string) *DeleteScalingRuleRequest {
	s.ScalingRuleId = &v
	return s
}

type DeleteScalingRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteScalingRuleResponseBody) SetRequestId(v string) *DeleteScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteScalingRuleResponseBody) SetData(v bool) *DeleteScalingRuleResponseBody {
	s.Data = &v
	return s
}

type DeleteScalingRuleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DeleteScalingRuleResponse) SetHeaders(v map[string]*string) *DeleteScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DeleteScalingRuleResponse) SetBody(v *DeleteScalingRuleResponseBody) *DeleteScalingRuleResponse {
	s.Body = v
	return s
}

type DeleteTagRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Category        *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s DeleteTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagRequest) GoString() string {
	return s.String()
}

func (s *DeleteTagRequest) SetResourceOwnerId(v int64) *DeleteTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteTagRequest) SetRegionId(v string) *DeleteTagRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteTagRequest) SetId(v int64) *DeleteTagRequest {
	s.Id = &v
	return s
}

func (s *DeleteTagRequest) SetName(v string) *DeleteTagRequest {
	s.Name = &v
	return s
}

func (s *DeleteTagRequest) SetCategory(v string) *DeleteTagRequest {
	s.Category = &v
	return s
}

func (s *DeleteTagRequest) SetDescription(v string) *DeleteTagRequest {
	s.Description = &v
	return s
}

type DeleteTagResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DeleteTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTagResponseBody) SetRequestId(v string) *DeleteTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTagResponseBody) SetData(v bool) *DeleteTagResponseBody {
	s.Data = &v
	return s
}

type DeleteTagResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTagResponse) GoString() string {
	return s.String()
}

func (s *DeleteTagResponse) SetHeaders(v map[string]*string) *DeleteTagResponse {
	s.Headers = v
	return s
}

func (s *DeleteTagResponse) SetBody(v *DeleteTagResponseBody) *DeleteTagResponse {
	s.Body = v
	return s
}

type DeleteUserRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	UserId          *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteUserRequest) SetResourceOwnerId(v int64) *DeleteUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteUserRequest) SetRegionId(v string) *DeleteUserRequest {
	s.RegionId = &v
	return s
}

func (s *DeleteUserRequest) SetClusterId(v string) *DeleteUserRequest {
	s.ClusterId = &v
	return s
}

func (s *DeleteUserRequest) SetUserId(v string) *DeleteUserRequest {
	s.UserId = &v
	return s
}

func (s *DeleteUserRequest) SetType(v string) *DeleteUserRequest {
	s.Type = &v
	return s
}

type DeleteUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteUserResponseBody) SetRequestId(v string) *DeleteUserResponseBody {
	s.RequestId = &v
	return s
}

type DeleteUserResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteUserResponse) SetHeaders(v map[string]*string) *DeleteUserResponse {
	s.Headers = v
	return s
}

func (s *DeleteUserResponse) SetBody(v *DeleteUserResponseBody) *DeleteUserResponse {
	s.Body = v
	return s
}

type DescribeClusterBasicInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterBasicInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoRequest) SetResourceOwnerId(v int64) *DescribeClusterBasicInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterBasicInfoRequest) SetRegionId(v string) *DescribeClusterBasicInfoRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterBasicInfoRequest) SetClusterId(v string) *DescribeClusterBasicInfoRequest {
	s.ClusterId = &v
	return s
}

type DescribeClusterBasicInfoResponseBody struct {
	ClusterInfo *DescribeClusterBasicInfoResponseBodyClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Struct"`
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBody) SetClusterInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfo) *DescribeClusterBasicInfoResponseBody {
	s.ClusterInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBody) SetRequestId(v string) *DescribeClusterBasicInfoResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfo struct {
	VpcId                           *string                                                                `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	LogEnable                       *bool                                                                  `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	TaskNodeInService               *int32                                                                 `json:"TaskNodeInService,omitempty" xml:"TaskNodeInService,omitempty"`
	AutoScalingSpotWithLimitAllowed *bool                                                                  `json:"AutoScalingSpotWithLimitAllowed,omitempty" xml:"AutoScalingSpotWithLimitAllowed,omitempty"`
	ChargeType                      *string                                                                `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	UserId                          *string                                                                `json:"UserId,omitempty" xml:"UserId,omitempty"`
	StopTime                        *int64                                                                 `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	CreateType                      *string                                                                `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DepositType                     *string                                                                `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	RelateClusterInfo               *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo      `json:"RelateClusterInfo,omitempty" xml:"RelateClusterInfo,omitempty" type:"Struct"`
	RelateClusterId                 *string                                                                `json:"RelateClusterId,omitempty" xml:"RelateClusterId,omitempty"`
	SecurityGroupName               *string                                                                `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ResizeDiskEnable                *bool                                                                  `json:"ResizeDiskEnable,omitempty" xml:"ResizeDiskEnable,omitempty"`
	ImageId                         *string                                                                `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	FailReason                      *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason             `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
	ClusterId                       *string                                                                `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	UserDefinedEmrEcsRole           *string                                                                `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	MetaStoreType                   *string                                                                `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	SoftwareInfo                    *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo           `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Struct"`
	StartTime                       *int64                                                                 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Configurations                  *string                                                                `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	LogPath                         *string                                                                `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	AutoScalingVersion              *string                                                                `json:"AutoScalingVersion,omitempty" xml:"AutoScalingVersion,omitempty"`
	NetType                         *string                                                                `json:"NetType,omitempty" xml:"NetType,omitempty"`
	ZoneId                          *string                                                                `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	AccessInfo                      *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo             `json:"AccessInfo,omitempty" xml:"AccessInfo,omitempty" type:"Struct"`
	CreateResource                  *string                                                                `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	Status                          *string                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	RunningTime                     *int32                                                                 `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	HighAvailabilityEnable          *bool                                                                  `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	SecurityGroupId                 *string                                                                `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	AutoScalingAllowed              *bool                                                                  `json:"AutoScalingAllowed,omitempty" xml:"AutoScalingAllowed,omitempty"`
	MasterNodeInService             *int32                                                                 `json:"MasterNodeInService,omitempty" xml:"MasterNodeInService,omitempty"`
	AutoScalingEnable               *bool                                                                  `json:"AutoScalingEnable,omitempty" xml:"AutoScalingEnable,omitempty"`
	OperationId                     *string                                                                `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	AutoScalingWithGraceAllowed     *bool                                                                  `json:"AutoScalingWithGraceAllowed,omitempty" xml:"AutoScalingWithGraceAllowed,omitempty"`
	ShowSoftwareInterface           *bool                                                                  `json:"ShowSoftwareInterface,omitempty" xml:"ShowSoftwareInterface,omitempty"`
	CoreNodeInService               *int32                                                                 `json:"CoreNodeInService,omitempty" xml:"CoreNodeInService,omitempty"`
	AutoScalingByLoadAllowed        *bool                                                                  `json:"AutoScalingByLoadAllowed,omitempty" xml:"AutoScalingByLoadAllowed,omitempty"`
	K8sClusterId                    *string                                                                `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	LocalMetaDb                     *bool                                                                  `json:"LocalMetaDb,omitempty" xml:"LocalMetaDb,omitempty"`
	BootstrapActionList             *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList    `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	GatewayClusterInfoList          *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList `json:"GatewayClusterInfoList,omitempty" xml:"GatewayClusterInfoList,omitempty" type:"Struct"`
	InstanceGeneration              *string                                                                `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	Name                            *string                                                                `json:"Name,omitempty" xml:"Name,omitempty"`
	EasEnable                       *bool                                                                  `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	MachineType                     *string                                                                `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	HostPoolInfo                    *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo           `json:"HostPoolInfo,omitempty" xml:"HostPoolInfo,omitempty" type:"Struct"`
	MasterNodeTotal                 *int32                                                                 `json:"MasterNodeTotal,omitempty" xml:"MasterNodeTotal,omitempty"`
	RegionId                        *string                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Period                          *int32                                                                 `json:"Period,omitempty" xml:"Period,omitempty"`
	ExtraInfo                       *string                                                                `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	IoOptimized                     *bool                                                                  `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	VSwitchId                       *string                                                                `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ExpiredTime                     *int64                                                                 `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	CoreNodeTotal                   *int32                                                                 `json:"CoreNodeTotal,omitempty" xml:"CoreNodeTotal,omitempty"`
	GatewayClusterIds               *string                                                                `json:"GatewayClusterIds,omitempty" xml:"GatewayClusterIds,omitempty"`
	BootstrapFailed                 *bool                                                                  `json:"BootstrapFailed,omitempty" xml:"BootstrapFailed,omitempty"`
	TaskNodeTotal                   *int32                                                                 `json:"TaskNodeTotal,omitempty" xml:"TaskNodeTotal,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetVpcId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.VpcId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetLogEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.LogEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetTaskNodeInService(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.TaskNodeInService = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingSpotWithLimitAllowed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingSpotWithLimitAllowed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetChargeType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetUserId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.UserId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetStopTime(v int64) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.StopTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCreateType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CreateType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetDepositType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.DepositType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRelateClusterInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RelateClusterInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRelateClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RelateClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetSecurityGroupName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetResizeDiskEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ResizeDiskEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetImageId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ImageId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetFailReason(v *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.FailReason = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetUserDefinedEmrEcsRole(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetMetaStoreType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.MetaStoreType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetSoftwareInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.SoftwareInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetStartTime(v int64) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetConfigurations(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.Configurations = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetLogPath(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.LogPath = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingVersion(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingVersion = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetNetType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.NetType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetZoneId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ZoneId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAccessInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AccessInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCreateResource(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetStatus(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.Status = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRunningTime(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetHighAvailabilityEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetSecurityGroupId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingAllowed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingAllowed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetMasterNodeInService(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.MasterNodeInService = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetOperationId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.OperationId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingWithGraceAllowed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingWithGraceAllowed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetShowSoftwareInterface(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ShowSoftwareInterface = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCoreNodeInService(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CoreNodeInService = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetAutoScalingByLoadAllowed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.AutoScalingByLoadAllowed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetK8sClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetLocalMetaDb(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.LocalMetaDb = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetBootstrapActionList(v *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.BootstrapActionList = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetGatewayClusterInfoList(v *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.GatewayClusterInfoList = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetInstanceGeneration(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.Name = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetEasEnable(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.EasEnable = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetMachineType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.MachineType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetHostPoolInfo(v *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.HostPoolInfo = v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetMasterNodeTotal(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.MasterNodeTotal = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetRegionId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetPeriod(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.Period = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetExtraInfo(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ExtraInfo = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetIoOptimized(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.IoOptimized = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetVSwitchId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetExpiredTime(v int64) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetCoreNodeTotal(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.CoreNodeTotal = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetGatewayClusterIds(v string) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.GatewayClusterIds = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetBootstrapFailed(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.BootstrapFailed = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfo) SetTaskNodeTotal(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfo {
	s.TaskNodeTotal = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) SetStatus(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo {
	s.Status = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) SetClusterName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo) SetClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterId = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoFailReason struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) SetRequestId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) SetErrorCode(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason) SetErrorMsg(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo struct {
	EmrVer      *string                                                               `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType *string                                                               `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Softwares   *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares `json:"Softwares,omitempty" xml:"Softwares,omitempty" type:"Struct"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) SetEmrVer(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo {
	s.EmrVer = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) SetClusterType(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo) SetSoftwares(v *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfo {
	s.Softwares = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares struct {
	Software []*DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware `json:"Software,omitempty" xml:"Software,omitempty" type:"Repeated"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares) SetSoftware(v []*DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwares {
	s.Software = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	StartTpe    *int32  `json:"StartTpe,omitempty" xml:"StartTpe,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
	OnlyDisplay *bool   `json:"OnlyDisplay,omitempty" xml:"OnlyDisplay,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetDisplayName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetStartTpe(v int32) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.StartTpe = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetVersion(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Version = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetOnlyDisplay(v bool) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.OnlyDisplay = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Name = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo struct {
	ZKLinks *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks `json:"ZKLinks,omitempty" xml:"ZKLinks,omitempty" type:"Struct"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo) SetZKLinks(v *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks) *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfo {
	s.ZKLinks = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks struct {
	ZKLink []*DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink `json:"ZKLink,omitempty" xml:"ZKLink,omitempty" type:"Repeated"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks) SetZKLink(v []*DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinks {
	s.ZKLink = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink struct {
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) SetLink(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink {
	s.Link = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink) SetPort(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoAccessInfoZKLinksZKLink {
	s.Port = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList struct {
	BootstrapAction []*DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList) SetBootstrapAction(v []*DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetArg(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetPath(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList struct {
	GatewayClusterInfo []*DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo `json:"GatewayClusterInfo,omitempty" xml:"GatewayClusterInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList) SetGatewayClusterInfo(v []*DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoList {
	s.GatewayClusterInfo = v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetStatus(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.Status = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetClusterName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetClusterId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.ClusterId = &v
	return s
}

type DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo struct {
	HpBizId *string `json:"HpBizId,omitempty" xml:"HpBizId,omitempty"`
	HpName  *string `json:"HpName,omitempty" xml:"HpName,omitempty"`
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) SetHpBizId(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo {
	s.HpBizId = &v
	return s
}

func (s *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo) SetHpName(v string) *DescribeClusterBasicInfoResponseBodyClusterInfoHostPoolInfo {
	s.HpName = &v
	return s
}

type DescribeClusterBasicInfoResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterBasicInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterBasicInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterBasicInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterBasicInfoResponse) SetHeaders(v map[string]*string) *DescribeClusterBasicInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterBasicInfoResponse) SetBody(v *DescribeClusterBasicInfoResponseBody) *DescribeClusterBasicInfoResponse {
	s.Body = v
	return s
}

type DescribeClusterMetaCollectRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterMetaCollectRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterMetaCollectRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterMetaCollectRequest) SetResourceOwnerId(v int64) *DescribeClusterMetaCollectRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterMetaCollectRequest) SetRegionId(v string) *DescribeClusterMetaCollectRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterMetaCollectRequest) SetClusterId(v string) *DescribeClusterMetaCollectRequest {
	s.ClusterId = &v
	return s
}

type DescribeClusterMetaCollectResponseBody struct {
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	MetaStoreType *string `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
}

func (s DescribeClusterMetaCollectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterMetaCollectResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterMetaCollectResponseBody) SetStatus(v string) *DescribeClusterMetaCollectResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeClusterMetaCollectResponseBody) SetRequestId(v string) *DescribeClusterMetaCollectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterMetaCollectResponseBody) SetClusterId(v string) *DescribeClusterMetaCollectResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterMetaCollectResponseBody) SetMetaStoreType(v string) *DescribeClusterMetaCollectResponseBody {
	s.MetaStoreType = &v
	return s
}

type DescribeClusterMetaCollectResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterMetaCollectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterMetaCollectResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterMetaCollectResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterMetaCollectResponse) SetHeaders(v map[string]*string) *DescribeClusterMetaCollectResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterMetaCollectResponse) SetBody(v *DescribeClusterMetaCollectResponseBody) *DescribeClusterMetaCollectResponse {
	s.Body = v
	return s
}

type DescribeClusterOperationHostTaskLogRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	HostId          *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeClusterOperationHostTaskLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperationHostTaskLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetResourceOwnerId(v int64) *DescribeClusterOperationHostTaskLogRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetRegionId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetClusterId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetOperationId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.OperationId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetHostId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.HostId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetTaskId(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogRequest) SetStatus(v string) *DescribeClusterOperationHostTaskLogRequest {
	s.Status = &v
	return s
}

type DescribeClusterOperationHostTaskLogResponseBody struct {
	Stderr    *string `json:"Stderr,omitempty" xml:"Stderr,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Stdout    *string `json:"Stdout,omitempty" xml:"Stdout,omitempty"`
}

func (s DescribeClusterOperationHostTaskLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperationHostTaskLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperationHostTaskLogResponseBody) SetStderr(v string) *DescribeClusterOperationHostTaskLogResponseBody {
	s.Stderr = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogResponseBody) SetRequestId(v string) *DescribeClusterOperationHostTaskLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterOperationHostTaskLogResponseBody) SetStdout(v string) *DescribeClusterOperationHostTaskLogResponseBody {
	s.Stdout = &v
	return s
}

type DescribeClusterOperationHostTaskLogResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterOperationHostTaskLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterOperationHostTaskLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterOperationHostTaskLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterOperationHostTaskLogResponse) SetHeaders(v map[string]*string) *DescribeClusterOperationHostTaskLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterOperationHostTaskLogResponse) SetBody(v *DescribeClusterOperationHostTaskLogResponseBody) *DescribeClusterOperationHostTaskLogResponse {
	s.Body = v
	return s
}

type DescribeClusterResourcePoolSchedulerTypeRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterResourcePoolSchedulerTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResourcePoolSchedulerTypeRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterResourcePoolSchedulerTypeRequest) SetResourceOwnerId(v int64) *DescribeClusterResourcePoolSchedulerTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeRequest) SetRegionId(v string) *DescribeClusterResourcePoolSchedulerTypeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeRequest) SetClusterId(v string) *DescribeClusterResourcePoolSchedulerTypeRequest {
	s.ClusterId = &v
	return s
}

type DescribeClusterResourcePoolSchedulerTypeResponseBody struct {
	RequestId            *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CurrentSchedulerType *string `json:"CurrentSchedulerType,omitempty" xml:"CurrentSchedulerType,omitempty"`
	SupportSchedulerType *string `json:"SupportSchedulerType,omitempty" xml:"SupportSchedulerType,omitempty"`
	DefaultSchedulerType *string `json:"DefaultSchedulerType,omitempty" xml:"DefaultSchedulerType,omitempty"`
}

func (s DescribeClusterResourcePoolSchedulerTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResourcePoolSchedulerTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponseBody) SetRequestId(v string) *DescribeClusterResourcePoolSchedulerTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponseBody) SetCurrentSchedulerType(v string) *DescribeClusterResourcePoolSchedulerTypeResponseBody {
	s.CurrentSchedulerType = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponseBody) SetSupportSchedulerType(v string) *DescribeClusterResourcePoolSchedulerTypeResponseBody {
	s.SupportSchedulerType = &v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponseBody) SetDefaultSchedulerType(v string) *DescribeClusterResourcePoolSchedulerTypeResponseBody {
	s.DefaultSchedulerType = &v
	return s
}

type DescribeClusterResourcePoolSchedulerTypeResponse struct {
	Headers map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterResourcePoolSchedulerTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterResourcePoolSchedulerTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterResourcePoolSchedulerTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponse) SetHeaders(v map[string]*string) *DescribeClusterResourcePoolSchedulerTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterResourcePoolSchedulerTypeResponse) SetBody(v *DescribeClusterResourcePoolSchedulerTypeResponseBody) *DescribeClusterResourcePoolSchedulerTypeResponse {
	s.Body = v
	return s
}

type DescribeClusterServiceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceRequest) SetResourceOwnerId(v int64) *DescribeClusterServiceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterServiceRequest) SetRegionId(v string) *DescribeClusterServiceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterServiceRequest) SetClusterId(v string) *DescribeClusterServiceRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterServiceRequest) SetServiceName(v string) *DescribeClusterServiceRequest {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceResponseBody struct {
	ServiceInfo *DescribeClusterServiceResponseBodyServiceInfo `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" type:"Struct"`
	RequestId   *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBody) SetServiceInfo(v *DescribeClusterServiceResponseBodyServiceInfo) *DescribeClusterServiceResponseBody {
	s.ServiceInfo = v
	return s
}

func (s *DescribeClusterServiceResponseBody) SetRequestId(v string) *DescribeClusterServiceResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfo struct {
	NeedRestartInfo              *string                                                                    `json:"NeedRestartInfo,omitempty" xml:"NeedRestartInfo,omitempty"`
	NeedRestartHostIdList        *DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList        `json:"NeedRestartHostIdList,omitempty" xml:"NeedRestartHostIdList,omitempty" type:"Struct"`
	ClusterServiceSummaryList    *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList    `json:"ClusterServiceSummaryList,omitempty" xml:"ClusterServiceSummaryList,omitempty" type:"Struct"`
	ServiceActionList            *DescribeClusterServiceResponseBodyServiceInfoServiceActionList            `json:"ServiceActionList,omitempty" xml:"ServiceActionList,omitempty" type:"Struct"`
	NeedRestartNum               *int32                                                                     `json:"NeedRestartNum,omitempty" xml:"NeedRestartNum,omitempty"`
	NeedRestartComponentNameList *DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList `json:"NeedRestartComponentNameList,omitempty" xml:"NeedRestartComponentNameList,omitempty" type:"Struct"`
	ServiceVersion               *string                                                                    `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	ServiceStatus                *string                                                                    `json:"ServiceStatus,omitempty" xml:"ServiceStatus,omitempty"`
	ServiceName                  *string                                                                    `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceResponseBodyServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetNeedRestartInfo(v string) *DescribeClusterServiceResponseBodyServiceInfo {
	s.NeedRestartInfo = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetNeedRestartHostIdList(v *DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList) *DescribeClusterServiceResponseBodyServiceInfo {
	s.NeedRestartHostIdList = v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetClusterServiceSummaryList(v *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ClusterServiceSummaryList = v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetServiceActionList(v *DescribeClusterServiceResponseBodyServiceInfoServiceActionList) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ServiceActionList = v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetNeedRestartNum(v int32) *DescribeClusterServiceResponseBodyServiceInfo {
	s.NeedRestartNum = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetNeedRestartComponentNameList(v *DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList) *DescribeClusterServiceResponseBodyServiceInfo {
	s.NeedRestartComponentNameList = v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetServiceVersion(v string) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ServiceVersion = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetServiceStatus(v string) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ServiceStatus = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfo) SetServiceName(v string) *DescribeClusterServiceResponseBodyServiceInfo {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList struct {
	Service []*string `json:"Service,omitempty" xml:"Service,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList) SetService(v []*string) *DescribeClusterServiceResponseBodyServiceInfoNeedRestartHostIdList {
	s.Service = v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList struct {
	ClusterServiceSummary []*DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary `json:"ClusterServiceSummary,omitempty" xml:"ClusterServiceSummary,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList) SetClusterServiceSummary(v []*DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryList {
	s.ClusterServiceSummary = v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary struct {
	Key                 *string `json:"Key,omitempty" xml:"Key,omitempty"`
	DisplayName         *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Status              *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Value               *string `json:"Value,omitempty" xml:"Value,omitempty"`
	DesiredStoppedValue *int32  `json:"DesiredStoppedValue,omitempty" xml:"DesiredStoppedValue,omitempty"`
	AlertInfo           *string `json:"AlertInfo,omitempty" xml:"AlertInfo,omitempty"`
	Category            *string `json:"Category,omitempty" xml:"Category,omitempty"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetKey(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Key = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetDisplayName(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetStatus(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Status = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetType(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Type = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetValue(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Value = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetDesiredStoppedValue(v int32) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.DesiredStoppedValue = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetAlertInfo(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.AlertInfo = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary) SetCategory(v string) *DescribeClusterServiceResponseBodyServiceInfoClusterServiceSummaryListClusterServiceSummary {
	s.Category = &v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoServiceActionList struct {
	ServiceAction []*DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction `json:"ServiceAction,omitempty" xml:"ServiceAction,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoServiceActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoServiceActionList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionList) SetServiceAction(v []*DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) *DescribeClusterServiceResponseBodyServiceInfoServiceActionList {
	s.ServiceAction = v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction struct {
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	ComponentName *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	Command       *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ActionName    *string `json:"ActionName,omitempty" xml:"ActionName,omitempty"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetDisplayName(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetComponentName(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.ComponentName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetCommand(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.Command = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetActionName(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.ActionName = &v
	return s
}

func (s *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction) SetServiceName(v string) *DescribeClusterServiceResponseBodyServiceInfoServiceActionListServiceAction {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList struct {
	Service []*string `json:"Service,omitempty" xml:"Service,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList) SetService(v []*string) *DescribeClusterServiceResponseBodyServiceInfoNeedRestartComponentNameList {
	s.Service = v
	return s
}

type DescribeClusterServiceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceResponse) SetHeaders(v map[string]*string) *DescribeClusterServiceResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterServiceResponse) SetBody(v *DescribeClusterServiceResponseBody) *DescribeClusterServiceResponse {
	s.Body = v
	return s
}

type DescribeClusterServiceConfigRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigVersion   *string `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	GroupId         *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HostInstanceId  *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	TagValue        *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s DescribeClusterServiceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigRequest) SetResourceOwnerId(v int64) *DescribeClusterServiceConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetRegionId(v string) *DescribeClusterServiceConfigRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetClusterId(v string) *DescribeClusterServiceConfigRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetServiceName(v string) *DescribeClusterServiceConfigRequest {
	s.ServiceName = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetConfigVersion(v string) *DescribeClusterServiceConfigRequest {
	s.ConfigVersion = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetGroupId(v string) *DescribeClusterServiceConfigRequest {
	s.GroupId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetHostInstanceId(v string) *DescribeClusterServiceConfigRequest {
	s.HostInstanceId = &v
	return s
}

func (s *DescribeClusterServiceConfigRequest) SetTagValue(v string) *DescribeClusterServiceConfigRequest {
	s.TagValue = &v
	return s
}

type DescribeClusterServiceConfigResponseBody struct {
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Config    *DescribeClusterServiceConfigResponseBodyConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
}

func (s DescribeClusterServiceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBody) SetRequestId(v string) *DescribeClusterServiceConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBody) SetConfig(v *DescribeClusterServiceConfigResponseBodyConfig) *DescribeClusterServiceConfigResponseBody {
	s.Config = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfig struct {
	Applied          *string                                                         `json:"Applied,omitempty" xml:"Applied,omitempty"`
	Comment          *string                                                         `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime       *string                                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ConfigVersion    *string                                                         `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	ConfigValueList  *DescribeClusterServiceConfigResponseBodyConfigConfigValueList  `json:"ConfigValueList,omitempty" xml:"ConfigValueList,omitempty" type:"Struct"`
	Author           *string                                                         `json:"Author,omitempty" xml:"Author,omitempty"`
	PropertyInfoList *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList `json:"PropertyInfoList,omitempty" xml:"PropertyInfoList,omitempty" type:"Struct"`
	ServiceName      *string                                                         `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfig) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetApplied(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.Applied = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetComment(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.Comment = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetCreateTime(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.CreateTime = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetConfigVersion(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.ConfigVersion = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetConfigValueList(v *DescribeClusterServiceConfigResponseBodyConfigConfigValueList) *DescribeClusterServiceConfigResponseBodyConfig {
	s.ConfigValueList = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetAuthor(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.Author = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetPropertyInfoList(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList) *DescribeClusterServiceConfigResponseBodyConfig {
	s.PropertyInfoList = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfig) SetServiceName(v string) *DescribeClusterServiceConfigResponseBodyConfig {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigConfigValueList struct {
	ConfigValue []*DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueList) SetConfigValue(v []*DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) *DescribeClusterServiceConfigResponseBodyConfigConfigValueList {
	s.ConfigValue = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue struct {
	ConfigName          *string                                                                                      `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	ScopeId             *int64                                                                                       `json:"ScopeId,omitempty" xml:"ScopeId,omitempty"`
	ConfigItemValueList *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList `json:"ConfigItemValueList,omitempty" xml:"ConfigItemValueList,omitempty" type:"Struct"`
	AllowCustom         *bool                                                                                        `json:"AllowCustom,omitempty" xml:"AllowCustom,omitempty"`
	Scope               *string                                                                                      `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetConfigName(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.ConfigName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetScopeId(v int64) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.ScopeId = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetConfigItemValueList(v *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.ConfigItemValueList = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetAllowCustom(v bool) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.AllowCustom = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue) SetScope(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValue {
	s.Scope = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList struct {
	ConfigItemValue []*DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue `json:"ConfigItemValue,omitempty" xml:"ConfigItemValue,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList) SetConfigItemValue(v []*DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueList {
	s.ConfigItemValue = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue struct {
	Value       *string `json:"Value,omitempty" xml:"Value,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ItemName    *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	IsCustom    *bool   `json:"IsCustom,omitempty" xml:"IsCustom,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetValue(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.Value = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetDescription(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.Description = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetItemName(v string) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.ItemName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetIsCustom(v bool) *DescribeClusterServiceConfigResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.IsCustom = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList struct {
	PropertyInfo []*DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo `json:"PropertyInfo,omitempty" xml:"PropertyInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList) SetPropertyInfo(v []*DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoList {
	s.PropertyInfo = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo struct {
	DisplayName             *string                                                                                            `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Value                   *string                                                                                            `json:"Value,omitempty" xml:"Value,omitempty"`
	PropertyTypes           *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes           `json:"PropertyTypes,omitempty" xml:"PropertyTypes,omitempty" type:"Struct"`
	Description             *string                                                                                            `json:"Description,omitempty" xml:"Description,omitempty"`
	EffectWay               *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay               `json:"EffectWay,omitempty" xml:"EffectWay,omitempty" type:"Struct"`
	Component               *string                                                                                            `json:"Component,omitempty" xml:"Component,omitempty"`
	PropertyValueAttributes *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes `json:"PropertyValueAttributes,omitempty" xml:"PropertyValueAttributes,omitempty" type:"Struct"`
	FileName                *string                                                                                            `json:"FileName,omitempty" xml:"FileName,omitempty"`
	Name                    *string                                                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	ServiceName             *string                                                                                            `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetDisplayName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetValue(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.Value = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetPropertyTypes(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.PropertyTypes = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetDescription(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.Description = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetEffectWay(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.EffectWay = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetComponent(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.Component = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetPropertyValueAttributes(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.PropertyValueAttributes = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetFileName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.FileName = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.Name = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo) SetServiceName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfo {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes struct {
	PropertyType []*string `json:"propertyType,omitempty" xml:"propertyType,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes) SetPropertyType(v []*string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyTypes {
	s.PropertyType = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay struct {
	EffectType        *string `json:"EffectType,omitempty" xml:"EffectType,omitempty"`
	InvokeServiceName *string `json:"InvokeServiceName,omitempty" xml:"InvokeServiceName,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) SetEffectType(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay {
	s.EffectType = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay) SetInvokeServiceName(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoEffectWay {
	s.InvokeServiceName = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes struct {
	Type          *string                                                                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	Maximum       *string                                                                                                   `json:"Maximum,omitempty" xml:"Maximum,omitempty"`
	Unit          *string                                                                                                   `json:"Unit,omitempty" xml:"Unit,omitempty"`
	Hidden        *bool                                                                                                     `json:"Hidden,omitempty" xml:"Hidden,omitempty"`
	IncrememtStep *string                                                                                                   `json:"IncrememtStep,omitempty" xml:"IncrememtStep,omitempty"`
	ReadOnly      *bool                                                                                                     `json:"ReadOnly,omitempty" xml:"ReadOnly,omitempty"`
	Entries       *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries `json:"Entries,omitempty" xml:"Entries,omitempty" type:"Struct"`
	Mimimum       *string                                                                                                   `json:"Mimimum,omitempty" xml:"Mimimum,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetType(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Type = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetMaximum(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Maximum = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetUnit(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Unit = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetHidden(v bool) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Hidden = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetIncrememtStep(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.IncrememtStep = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetReadOnly(v bool) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.ReadOnly = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetEntries(v *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Entries = v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes) SetMimimum(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributes {
	s.Mimimum = &v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries struct {
	ValueEntryInfo []*DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo `json:"ValueEntryInfo,omitempty" xml:"ValueEntryInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries) SetValueEntryInfo(v []*DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntries {
	s.ValueEntryInfo = v
	return s
}

type DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo struct {
	Value       *string `json:"Value,omitempty" xml:"Value,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Label       *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) SetValue(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo {
	s.Value = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) SetDescription(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo {
	s.Description = &v
	return s
}

func (s *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo) SetLabel(v string) *DescribeClusterServiceConfigResponseBodyConfigPropertyInfoListPropertyInfoPropertyValueAttributesEntriesValueEntryInfo {
	s.Label = &v
	return s
}

type DescribeClusterServiceConfigResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterServiceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterServiceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigResponse) SetHeaders(v map[string]*string) *DescribeClusterServiceConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterServiceConfigResponse) SetBody(v *DescribeClusterServiceConfigResponseBody) *DescribeClusterServiceConfigResponse {
	s.Body = v
	return s
}

type DescribeClusterServiceConfigHistoryRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigVersion   *string `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
}

func (s DescribeClusterServiceConfigHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigHistoryRequest) SetResourceOwnerId(v int64) *DescribeClusterServiceConfigHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryRequest) SetRegionId(v string) *DescribeClusterServiceConfigHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryRequest) SetClusterId(v string) *DescribeClusterServiceConfigHistoryRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryRequest) SetServiceName(v string) *DescribeClusterServiceConfigHistoryRequest {
	s.ServiceName = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryRequest) SetConfigVersion(v string) *DescribeClusterServiceConfigHistoryRequest {
	s.ConfigVersion = &v
	return s
}

type DescribeClusterServiceConfigHistoryResponseBody struct {
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Config    *DescribeClusterServiceConfigHistoryResponseBodyConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Struct"`
}

func (s DescribeClusterServiceConfigHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigHistoryResponseBody) SetRequestId(v string) *DescribeClusterServiceConfigHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBody) SetConfig(v *DescribeClusterServiceConfigHistoryResponseBodyConfig) *DescribeClusterServiceConfigHistoryResponseBody {
	s.Config = v
	return s
}

type DescribeClusterServiceConfigHistoryResponseBodyConfig struct {
	Applied         *bool                                                                 `json:"Applied,omitempty" xml:"Applied,omitempty"`
	Comment         *string                                                               `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime      *string                                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ConfigVersion   *string                                                               `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	ConfigValueList *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueList `json:"ConfigValueList,omitempty" xml:"ConfigValueList,omitempty" type:"Struct"`
	Author          *string                                                               `json:"Author,omitempty" xml:"Author,omitempty"`
	ServiceName     *string                                                               `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfig) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfig) SetApplied(v bool) *DescribeClusterServiceConfigHistoryResponseBodyConfig {
	s.Applied = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfig) SetComment(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfig {
	s.Comment = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfig) SetCreateTime(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfig {
	s.CreateTime = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfig) SetConfigVersion(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfig {
	s.ConfigVersion = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfig) SetConfigValueList(v *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueList) *DescribeClusterServiceConfigHistoryResponseBodyConfig {
	s.ConfigValueList = v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfig) SetAuthor(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfig {
	s.Author = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfig) SetServiceName(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfig {
	s.ServiceName = &v
	return s
}

type DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueList struct {
	ConfigValue []*DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueList) SetConfigValue(v []*DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue) *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueList {
	s.ConfigValue = v
	return s
}

type DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue struct {
	ConfigName          *string                                                                                             `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	ConfigItemValueList *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueList `json:"ConfigItemValueList,omitempty" xml:"ConfigItemValueList,omitempty" type:"Struct"`
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue) SetConfigName(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue {
	s.ConfigName = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue) SetConfigItemValueList(v *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueList) *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValue {
	s.ConfigItemValueList = v
	return s
}

type DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueList struct {
	ConfigItemValue []*DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue `json:"ConfigItemValue,omitempty" xml:"ConfigItemValue,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueList) SetConfigItemValue(v []*DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueList {
	s.ConfigItemValue = v
	return s
}

type DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue struct {
	Value      *string `json:"Value,omitempty" xml:"Value,omitempty"`
	OldValue   *string `json:"OldValue,omitempty" xml:"OldValue,omitempty"`
	ItemName   *string `json:"ItemName,omitempty" xml:"ItemName,omitempty"`
	ChangeType *string `json:"ChangeType,omitempty" xml:"ChangeType,omitempty"`
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetValue(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.Value = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetOldValue(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.OldValue = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetItemName(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.ItemName = &v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue) SetChangeType(v string) *DescribeClusterServiceConfigHistoryResponseBodyConfigConfigValueListConfigValueConfigItemValueListConfigItemValue {
	s.ChangeType = &v
	return s
}

type DescribeClusterServiceConfigHistoryResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterServiceConfigHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterServiceConfigHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigHistoryResponse) SetHeaders(v map[string]*string) *DescribeClusterServiceConfigHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterServiceConfigHistoryResponse) SetBody(v *DescribeClusterServiceConfigHistoryResponseBody) *DescribeClusterServiceConfigHistoryResponse {
	s.Body = v
	return s
}

type DescribeClusterServiceConfigTagRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigTag       *string `json:"ConfigTag,omitempty" xml:"ConfigTag,omitempty"`
}

func (s DescribeClusterServiceConfigTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagRequest) SetResourceOwnerId(v int64) *DescribeClusterServiceConfigTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterServiceConfigTagRequest) SetRegionId(v string) *DescribeClusterServiceConfigTagRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterServiceConfigTagRequest) SetClusterId(v string) *DescribeClusterServiceConfigTagRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeClusterServiceConfigTagRequest) SetServiceName(v string) *DescribeClusterServiceConfigTagRequest {
	s.ServiceName = &v
	return s
}

func (s *DescribeClusterServiceConfigTagRequest) SetConfigTag(v string) *DescribeClusterServiceConfigTagRequest {
	s.ConfigTag = &v
	return s
}

type DescribeClusterServiceConfigTagResponseBody struct {
	ConfigTagList *DescribeClusterServiceConfigTagResponseBodyConfigTagList `json:"ConfigTagList,omitempty" xml:"ConfigTagList,omitempty" type:"Struct"`
	RequestId     *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterServiceConfigTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBody) SetConfigTagList(v *DescribeClusterServiceConfigTagResponseBodyConfigTagList) *DescribeClusterServiceConfigTagResponseBody {
	s.ConfigTagList = v
	return s
}

func (s *DescribeClusterServiceConfigTagResponseBody) SetRequestId(v string) *DescribeClusterServiceConfigTagResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterServiceConfigTagResponseBodyConfigTagList struct {
	ConfigTag []*DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag `json:"ConfigTag,omitempty" xml:"ConfigTag,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagList) SetConfigTag(v []*DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) *DescribeClusterServiceConfigTagResponseBodyConfigTagList {
	s.ConfigTag = v
	return s
}

type DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag struct {
	ValueList *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList `json:"ValueList,omitempty" xml:"ValueList,omitempty" type:"Struct"`
	Tag       *string                                                                     `json:"Tag,omitempty" xml:"Tag,omitempty"`
	TagDesc   *string                                                                     `json:"TagDesc,omitempty" xml:"TagDesc,omitempty"`
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) SetValueList(v *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag {
	s.ValueList = v
	return s
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) SetTag(v string) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag {
	s.Tag = &v
	return s
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag) SetTagDesc(v string) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTag {
	s.TagDesc = &v
	return s
}

type DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList struct {
	Value []*DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList) SetValue(v []*DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueList {
	s.Value = v
	return s
}

type DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue struct {
	Value     *string `json:"Value,omitempty" xml:"Value,omitempty"`
	ValueDesc *string `json:"ValueDesc,omitempty" xml:"ValueDesc,omitempty"`
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) SetValue(v string) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue {
	s.Value = &v
	return s
}

func (s *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue) SetValueDesc(v string) *DescribeClusterServiceConfigTagResponseBodyConfigTagListConfigTagValueListValue {
	s.ValueDesc = &v
	return s
}

type DescribeClusterServiceConfigTagResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterServiceConfigTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterServiceConfigTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterServiceConfigTagResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterServiceConfigTagResponse) SetHeaders(v map[string]*string) *DescribeClusterServiceConfigTagResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterServiceConfigTagResponse) SetBody(v *DescribeClusterServiceConfigTagResponseBody) *DescribeClusterServiceConfigTagResponse {
	s.Body = v
	return s
}

type DescribeClusterTemplateRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeClusterTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateRequest) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateRequest) SetResourceOwnerId(v int64) *DescribeClusterTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterTemplateRequest) SetBizId(v string) *DescribeClusterTemplateRequest {
	s.BizId = &v
	return s
}

func (s *DescribeClusterTemplateRequest) SetResourceGroupId(v string) *DescribeClusterTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeClusterTemplateResponseBody struct {
	TemplateInfo *DescribeClusterTemplateResponseBodyTemplateInfo `json:"TemplateInfo,omitempty" xml:"TemplateInfo,omitempty" type:"Struct"`
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBody) SetTemplateInfo(v *DescribeClusterTemplateResponseBodyTemplateInfo) *DescribeClusterTemplateResponseBody {
	s.TemplateInfo = v
	return s
}

func (s *DescribeClusterTemplateResponseBody) SetRequestId(v string) *DescribeClusterTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfo struct {
	VpcId                  *string                                                             `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	KeyPairName            *string                                                             `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	LogEnable              *bool                                                               `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	SshEnable              *bool                                                               `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	HighAvailabilityEnable *bool                                                               `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	SecurityGroupId        *string                                                             `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	MasterPwd              *string                                                             `json:"MasterPwd,omitempty" xml:"MasterPwd,omitempty"`
	UserId                 *string                                                             `json:"UserId,omitempty" xml:"UserId,omitempty"`
	HostGroupList          *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList       `json:"HostGroupList,omitempty" xml:"HostGroupList,omitempty" type:"Struct"`
	Tags                   *DescribeClusterTemplateResponseBodyTemplateInfoTags                `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	GmtModified            *int64                                                              `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	TemplateName           *string                                                             `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	AllowNotebook          *bool                                                               `json:"AllowNotebook,omitempty" xml:"AllowNotebook,omitempty"`
	IsOpenPublicIp         *bool                                                               `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	DepositType            *string                                                             `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	SecurityGroupName      *string                                                             `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ConfigList             *DescribeClusterTemplateResponseBodyTemplateInfoConfigList          `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Struct"`
	BootstrapActionList    *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	SoftwareInfoList       *DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList    `json:"SoftwareInfoList,omitempty" xml:"SoftwareInfoList,omitempty" type:"Struct"`
	InstanceGeneration     *string                                                             `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	CreateSource           *string                                                             `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	EasEnable              *bool                                                               `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	UseCustomHiveMetaDb    *bool                                                               `json:"UseCustomHiveMetaDb,omitempty" xml:"UseCustomHiveMetaDb,omitempty"`
	UserDefinedEmrEcsRole  *string                                                             `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	MetaStoreType          *string                                                             `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	MachineType            *string                                                             `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	UseLocalMetaDb         *bool                                                               `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	MasterNodeTotal        *int32                                                              `json:"MasterNodeTotal,omitempty" xml:"MasterNodeTotal,omitempty"`
	InitCustomHiveMetaDb   *bool                                                               `json:"InitCustomHiveMetaDb,omitempty" xml:"InitCustomHiveMetaDb,omitempty"`
	IoOptimized            *bool                                                               `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	MetaStoreConf          *string                                                             `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	VSwitchId              *string                                                             `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Configurations         *string                                                             `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	EmrVer                 *string                                                             `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	LogPath                *string                                                             `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	ClusterType            *string                                                             `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	NetType                *string                                                             `json:"NetType,omitempty" xml:"NetType,omitempty"`
	ZoneId                 *string                                                             `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	GmtCreate              *int64                                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Id                     *string                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetVpcId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.VpcId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetKeyPairName(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.KeyPairName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetLogEnable(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.LogEnable = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetSshEnable(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.SshEnable = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetHighAvailabilityEnable(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetSecurityGroupId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMasterPwd(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MasterPwd = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetUserId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.UserId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetHostGroupList(v *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.HostGroupList = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetTags(v *DescribeClusterTemplateResponseBodyTemplateInfoTags) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.Tags = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetGmtModified(v int64) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.GmtModified = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetTemplateName(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.TemplateName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetAllowNotebook(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.AllowNotebook = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetIsOpenPublicIp(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.IsOpenPublicIp = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetDepositType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.DepositType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetSecurityGroupName(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetConfigList(v *DescribeClusterTemplateResponseBodyTemplateInfoConfigList) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.ConfigList = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetBootstrapActionList(v *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.BootstrapActionList = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetSoftwareInfoList(v *DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.SoftwareInfoList = v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetInstanceGeneration(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetCreateSource(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.CreateSource = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetEasEnable(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.EasEnable = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetUseCustomHiveMetaDb(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.UseCustomHiveMetaDb = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetUserDefinedEmrEcsRole(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMetaStoreType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MetaStoreType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMachineType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MachineType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetUseLocalMetaDb(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.UseLocalMetaDb = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMasterNodeTotal(v int32) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MasterNodeTotal = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetInitCustomHiveMetaDb(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.InitCustomHiveMetaDb = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetIoOptimized(v bool) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.IoOptimized = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetMetaStoreConf(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.MetaStoreConf = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetVSwitchId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetConfigurations(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.Configurations = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetEmrVer(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.EmrVer = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetLogPath(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.LogPath = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetClusterType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetNetType(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.NetType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetZoneId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.ZoneId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetGmtCreate(v int64) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.GmtCreate = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfo) SetId(v string) *DescribeClusterTemplateResponseBodyTemplateInfo {
	s.Id = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList struct {
	HostGroup []*DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList) SetHostGroup(v []*DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupList {
	s.HostGroup = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup struct {
	SysDiskCapacity    *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	HostGroupType      *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	SysDiskType        *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	MultiInstanceTypes *string `json:"MultiInstanceTypes,omitempty" xml:"MultiInstanceTypes,omitempty"`
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DiskType           *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId        *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DiskCount          *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	Period             *string `json:"Period,omitempty" xml:"Period,omitempty"`
	DiskCapacity       *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	NodeCount          *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	HostGroupName      *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetSysDiskCapacity(v int32) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetHostGroupType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetSysDiskType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetMultiInstanceTypes(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.MultiInstanceTypes = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetChargeType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.ChargeType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetDiskType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.DiskType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetHostGroupId(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetInstanceType(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.InstanceType = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetDiskCount(v int32) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.DiskCount = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetPeriod(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.Period = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetDiskCapacity(v int32) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetNodeCount(v int32) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.NodeCount = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup) SetHostGroupName(v string) *DescribeClusterTemplateResponseBodyTemplateInfoHostGroupListHostGroup {
	s.HostGroupName = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoTags struct {
	Tag []*DescribeClusterTemplateResponseBodyTemplateInfoTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoTags) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoTags) SetTag(v []*DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) *DescribeClusterTemplateResponseBodyTemplateInfoTags {
	s.Tag = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoTagsTag struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) SetTagValue(v string) *DescribeClusterTemplateResponseBodyTemplateInfoTagsTag {
	s.TagValue = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoTagsTag) SetTagKey(v string) *DescribeClusterTemplateResponseBodyTemplateInfoTagsTag {
	s.TagKey = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoConfigList struct {
	Config []*DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoConfigList) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigList) SetConfig(v []*DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) *DescribeClusterTemplateResponseBodyTemplateInfoConfigList {
	s.Config = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetConfigValue(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.ConfigValue = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetReplace(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.Replace = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetFileName(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.FileName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetServiceName(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.ServiceName = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetConfigKey(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.ConfigKey = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig) SetEncrypt(v string) *DescribeClusterTemplateResponseBodyTemplateInfoConfigListConfig {
	s.Encrypt = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList struct {
	BootstrapAction []*DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList) SetBootstrapAction(v []*DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) SetArg(v string) *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) SetPath(v string) *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction) SetName(v string) *DescribeClusterTemplateResponseBodyTemplateInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

type DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList struct {
	SoftwareInfo []*string `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList) SetSoftwareInfo(v []*string) *DescribeClusterTemplateResponseBodyTemplateInfoSoftwareInfoList {
	s.SoftwareInfo = v
	return s
}

type DescribeClusterTemplateResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterTemplateResponse) GoString() string {
	return s.String()
}

func (s *DescribeClusterTemplateResponse) SetHeaders(v map[string]*string) *DescribeClusterTemplateResponse {
	s.Headers = v
	return s
}

func (s *DescribeClusterTemplateResponse) SetBody(v *DescribeClusterTemplateResponseBody) *DescribeClusterTemplateResponse {
	s.Body = v
	return s
}

type DescribeClusterV2Request struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeClusterV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2Request) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2Request) SetResourceOwnerId(v int64) *DescribeClusterV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeClusterV2Request) SetRegionId(v string) *DescribeClusterV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterV2Request) SetId(v string) *DescribeClusterV2Request {
	s.Id = &v
	return s
}

type DescribeClusterV2ResponseBody struct {
	ClusterInfo *DescribeClusterV2ResponseBodyClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Struct"`
	RequestId   *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DescribeClusterV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBody) SetClusterInfo(v *DescribeClusterV2ResponseBodyClusterInfo) *DescribeClusterV2ResponseBody {
	s.ClusterInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBody) SetRequestId(v string) *DescribeClusterV2ResponseBody {
	s.RequestId = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfo struct {
	VpcId                           *string                                                         `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	LogEnable                       *bool                                                           `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	TaskNodeInService               *int32                                                          `json:"TaskNodeInService,omitempty" xml:"TaskNodeInService,omitempty"`
	AutoScalingSpotWithLimitAllowed *bool                                                           `json:"AutoScalingSpotWithLimitAllowed,omitempty" xml:"AutoScalingSpotWithLimitAllowed,omitempty"`
	ChargeType                      *string                                                         `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	UserId                          *string                                                         `json:"UserId,omitempty" xml:"UserId,omitempty"`
	StopTime                        *int64                                                          `json:"StopTime,omitempty" xml:"StopTime,omitempty"`
	CreateType                      *string                                                         `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	DepositType                     *string                                                         `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	RelateClusterInfo               *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo      `json:"RelateClusterInfo,omitempty" xml:"RelateClusterInfo,omitempty" type:"Struct"`
	RelateClusterId                 *string                                                         `json:"RelateClusterId,omitempty" xml:"RelateClusterId,omitempty"`
	SecurityGroupName               *string                                                         `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ResizeDiskEnable                *bool                                                           `json:"ResizeDiskEnable,omitempty" xml:"ResizeDiskEnable,omitempty"`
	ImageId                         *string                                                         `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	FailReason                      *DescribeClusterV2ResponseBodyClusterInfoFailReason             `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
	UserDefinedEmrEcsRole           *string                                                         `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	MetaStoreType                   *string                                                         `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	SoftwareInfo                    *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo           `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Struct"`
	StartTime                       *int64                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Configurations                  *string                                                         `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	LogPath                         *string                                                         `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	AutoScalingVersion              *string                                                         `json:"AutoScalingVersion,omitempty" xml:"AutoScalingVersion,omitempty"`
	NetType                         *string                                                         `json:"NetType,omitempty" xml:"NetType,omitempty"`
	ZoneId                          *string                                                         `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	AccessInfo                      *DescribeClusterV2ResponseBodyClusterInfoAccessInfo             `json:"AccessInfo,omitempty" xml:"AccessInfo,omitempty" type:"Struct"`
	CreateResource                  *string                                                         `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	Status                          *string                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	RunningTime                     *int32                                                          `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	HighAvailabilityEnable          *bool                                                           `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	SecurityGroupId                 *string                                                         `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	AutoScalingAllowed              *bool                                                           `json:"AutoScalingAllowed,omitempty" xml:"AutoScalingAllowed,omitempty"`
	HostGroupList                   *DescribeClusterV2ResponseBodyClusterInfoHostGroupList          `json:"HostGroupList,omitempty" xml:"HostGroupList,omitempty" type:"Struct"`
	MasterNodeInService             *int32                                                          `json:"MasterNodeInService,omitempty" xml:"MasterNodeInService,omitempty"`
	AutoScalingEnable               *bool                                                           `json:"AutoScalingEnable,omitempty" xml:"AutoScalingEnable,omitempty"`
	AutoScalingWithGraceAllowed     *bool                                                           `json:"AutoScalingWithGraceAllowed,omitempty" xml:"AutoScalingWithGraceAllowed,omitempty"`
	ShowSoftwareInterface           *bool                                                           `json:"ShowSoftwareInterface,omitempty" xml:"ShowSoftwareInterface,omitempty"`
	CoreNodeInService               *int32                                                          `json:"CoreNodeInService,omitempty" xml:"CoreNodeInService,omitempty"`
	AutoScalingByLoadAllowed        *bool                                                           `json:"AutoScalingByLoadAllowed,omitempty" xml:"AutoScalingByLoadAllowed,omitempty"`
	K8sClusterId                    *string                                                         `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	LocalMetaDb                     *bool                                                           `json:"LocalMetaDb,omitempty" xml:"LocalMetaDb,omitempty"`
	BootstrapActionList             *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList    `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	GatewayClusterInfoList          *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList `json:"GatewayClusterInfoList,omitempty" xml:"GatewayClusterInfoList,omitempty" type:"Struct"`
	InstanceGeneration              *string                                                         `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	Name                            *string                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	EasEnable                       *bool                                                           `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	MachineType                     *string                                                         `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	HostPoolInfo                    *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo           `json:"HostPoolInfo,omitempty" xml:"HostPoolInfo,omitempty" type:"Struct"`
	MasterNodeTotal                 *int32                                                          `json:"MasterNodeTotal,omitempty" xml:"MasterNodeTotal,omitempty"`
	RegionId                        *string                                                         `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Period                          *int32                                                          `json:"Period,omitempty" xml:"Period,omitempty"`
	ExtraInfo                       *string                                                         `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	IoOptimized                     *bool                                                           `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	VSwitchId                       *string                                                         `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	ExpiredTime                     *int64                                                          `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	CoreNodeTotal                   *int32                                                          `json:"CoreNodeTotal,omitempty" xml:"CoreNodeTotal,omitempty"`
	GatewayClusterIds               *string                                                         `json:"GatewayClusterIds,omitempty" xml:"GatewayClusterIds,omitempty"`
	BootstrapFailed                 *bool                                                           `json:"BootstrapFailed,omitempty" xml:"BootstrapFailed,omitempty"`
	Id                              *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	TaskNodeTotal                   *int32                                                          `json:"TaskNodeTotal,omitempty" xml:"TaskNodeTotal,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetVpcId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.VpcId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetLogEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.LogEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetTaskNodeInService(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.TaskNodeInService = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingSpotWithLimitAllowed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingSpotWithLimitAllowed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetChargeType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetUserId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.UserId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetStopTime(v int64) *DescribeClusterV2ResponseBodyClusterInfo {
	s.StopTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetCreateType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.CreateType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetDepositType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.DepositType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetRelateClusterInfo(v *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) *DescribeClusterV2ResponseBodyClusterInfo {
	s.RelateClusterInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetRelateClusterId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.RelateClusterId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetSecurityGroupName(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetResizeDiskEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ResizeDiskEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetImageId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ImageId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetFailReason(v *DescribeClusterV2ResponseBodyClusterInfoFailReason) *DescribeClusterV2ResponseBodyClusterInfo {
	s.FailReason = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetUserDefinedEmrEcsRole(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetMetaStoreType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.MetaStoreType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetSoftwareInfo(v *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) *DescribeClusterV2ResponseBodyClusterInfo {
	s.SoftwareInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetStartTime(v int64) *DescribeClusterV2ResponseBodyClusterInfo {
	s.StartTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetConfigurations(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Configurations = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetLogPath(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.LogPath = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingVersion(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingVersion = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetNetType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.NetType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetZoneId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ZoneId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAccessInfo(v *DescribeClusterV2ResponseBodyClusterInfoAccessInfo) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AccessInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetCreateResource(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetStatus(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Status = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetRunningTime(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetHighAvailabilityEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetSecurityGroupId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingAllowed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingAllowed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetHostGroupList(v *DescribeClusterV2ResponseBodyClusterInfoHostGroupList) *DescribeClusterV2ResponseBodyClusterInfo {
	s.HostGroupList = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetMasterNodeInService(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.MasterNodeInService = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingWithGraceAllowed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingWithGraceAllowed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetShowSoftwareInterface(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ShowSoftwareInterface = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetCoreNodeInService(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.CoreNodeInService = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetAutoScalingByLoadAllowed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.AutoScalingByLoadAllowed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetK8sClusterId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetLocalMetaDb(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.LocalMetaDb = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetBootstrapActionList(v *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList) *DescribeClusterV2ResponseBodyClusterInfo {
	s.BootstrapActionList = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetGatewayClusterInfoList(v *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList) *DescribeClusterV2ResponseBodyClusterInfo {
	s.GatewayClusterInfoList = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetInstanceGeneration(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetName(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Name = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetEasEnable(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.EasEnable = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetMachineType(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.MachineType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetHostPoolInfo(v *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) *DescribeClusterV2ResponseBodyClusterInfo {
	s.HostPoolInfo = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetMasterNodeTotal(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.MasterNodeTotal = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetRegionId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.RegionId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetPeriod(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Period = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetExtraInfo(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ExtraInfo = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetIoOptimized(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.IoOptimized = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetVSwitchId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetExpiredTime(v int64) *DescribeClusterV2ResponseBodyClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetCoreNodeTotal(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.CoreNodeTotal = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetGatewayClusterIds(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.GatewayClusterIds = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetBootstrapFailed(v bool) *DescribeClusterV2ResponseBodyClusterInfo {
	s.BootstrapFailed = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetId(v string) *DescribeClusterV2ResponseBodyClusterInfo {
	s.Id = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfo) SetTaskNodeTotal(v int32) *DescribeClusterV2ResponseBodyClusterInfo {
	s.TaskNodeTotal = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) SetStatus(v string) *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo {
	s.Status = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) SetClusterName(v string) *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo) SetClusterId(v string) *DescribeClusterV2ResponseBodyClusterInfoRelateClusterInfo {
	s.ClusterId = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoFailReason struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoFailReason) SetRequestId(v string) *DescribeClusterV2ResponseBodyClusterInfoFailReason {
	s.RequestId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoFailReason) SetErrorCode(v string) *DescribeClusterV2ResponseBodyClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoFailReason) SetErrorMsg(v string) *DescribeClusterV2ResponseBodyClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo struct {
	EmrVer      *string                                                        `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType *string                                                        `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Softwares   *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares `json:"Softwares,omitempty" xml:"Softwares,omitempty" type:"Struct"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) SetEmrVer(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo {
	s.EmrVer = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) SetClusterType(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo) SetSoftwares(v *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfo {
	s.Softwares = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares struct {
	Software []*DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware `json:"Software,omitempty" xml:"Software,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares) SetSoftware(v []*DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwares {
	s.Software = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	StartTpe    *int32  `json:"StartTpe,omitempty" xml:"StartTpe,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
	OnlyDisplay *bool   `json:"OnlyDisplay,omitempty" xml:"OnlyDisplay,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetDisplayName(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.DisplayName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetStartTpe(v int32) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.StartTpe = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetVersion(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Version = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetOnlyDisplay(v bool) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.OnlyDisplay = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetName(v string) *DescribeClusterV2ResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Name = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoAccessInfo struct {
	ZKLinks *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks `json:"ZKLinks,omitempty" xml:"ZKLinks,omitempty" type:"Struct"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoAccessInfo) SetZKLinks(v *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks) *DescribeClusterV2ResponseBodyClusterInfoAccessInfo {
	s.ZKLinks = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks struct {
	ZKLink []*DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink `json:"ZKLink,omitempty" xml:"ZKLink,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks) SetZKLink(v []*DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinks {
	s.ZKLink = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink struct {
	Link *string `json:"Link,omitempty" xml:"Link,omitempty"`
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) SetLink(v string) *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink {
	s.Link = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink) SetPort(v string) *DescribeClusterV2ResponseBodyClusterInfoAccessInfoZKLinksZKLink {
	s.Port = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupList struct {
	HostGroup []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupList) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupList) SetHostGroup(v []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) *DescribeClusterV2ResponseBodyClusterInfoHostGroupList {
	s.HostGroup = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup struct {
	Nodes                 *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes `json:"Nodes,omitempty" xml:"Nodes,omitempty" type:"Struct"`
	LockType              *string                                                              `json:"LockType,omitempty" xml:"LockType,omitempty"`
	HostGroupType         *string                                                              `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	HostGroupSubType      *string                                                              `json:"HostGroupSubType,omitempty" xml:"HostGroupSubType,omitempty"`
	HostGroupChangeStatus *string                                                              `json:"HostGroupChangeStatus,omitempty" xml:"HostGroupChangeStatus,omitempty"`
	ChargeType            *string                                                              `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DiskType              *string                                                              `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	LockReason            *string                                                              `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	HostGroupId           *string                                                              `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceType          *string                                                              `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	BandWidth             *string                                                              `json:"BandWidth,omitempty" xml:"BandWidth,omitempty"`
	DiskCount             *int32                                                               `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	Period                *string                                                              `json:"Period,omitempty" xml:"Period,omitempty"`
	DiskCapacity          *int32                                                               `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	CpuCore               *int32                                                               `json:"CpuCore,omitempty" xml:"CpuCore,omitempty"`
	MemoryCapacity        *int32                                                               `json:"MemoryCapacity,omitempty" xml:"MemoryCapacity,omitempty"`
	NodeCount             *int32                                                               `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	HostGroupChangeType   *string                                                              `json:"HostGroupChangeType,omitempty" xml:"HostGroupChangeType,omitempty"`
	HostGroupName         *string                                                              `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetNodes(v *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.Nodes = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetLockType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.LockType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupSubType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupSubType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupChangeStatus(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupChangeStatus = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetChargeType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.ChargeType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetDiskType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.DiskType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetLockReason(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.LockReason = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetInstanceType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.InstanceType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetBandWidth(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.BandWidth = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetDiskCount(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.DiskCount = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetPeriod(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.Period = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetDiskCapacity(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetCpuCore(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.CpuCore = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetMemoryCapacity(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.MemoryCapacity = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetNodeCount(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.NodeCount = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupChangeType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupChangeType = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup) SetHostGroupName(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroup {
	s.HostGroupName = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes struct {
	Node []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes) SetNode(v []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodes {
	s.Node = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode struct {
	Status         *string                                                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	SupportIpV6    *bool                                                                               `json:"SupportIpV6,omitempty" xml:"SupportIpV6,omitempty"`
	InnerIp        *string                                                                             `json:"InnerIp,omitempty" xml:"InnerIp,omitempty"`
	ExpiredTime    *string                                                                             `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	CreateTime     *string                                                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ZoneId         *string                                                                             `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	InstanceId     *string                                                                             `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	DiskInfos      *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos   `json:"DiskInfos,omitempty" xml:"DiskInfos,omitempty" type:"Struct"`
	EmrExpiredTime *string                                                                             `json:"EmrExpiredTime,omitempty" xml:"EmrExpiredTime,omitempty"`
	PubIp          *string                                                                             `json:"PubIp,omitempty" xml:"PubIp,omitempty"`
	DaemonInfos    *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos `json:"DaemonInfos,omitempty" xml:"DaemonInfos,omitempty" type:"Struct"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetStatus(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.Status = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetSupportIpV6(v bool) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.SupportIpV6 = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetInnerIp(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.InnerIp = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetExpiredTime(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetCreateTime(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.CreateTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetZoneId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.ZoneId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetInstanceId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.InstanceId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetDiskInfos(v *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.DiskInfos = v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetEmrExpiredTime(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.EmrExpiredTime = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetPubIp(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.PubIp = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode) SetDaemonInfos(v *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNode {
	s.DaemonInfos = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos struct {
	DiskInfo []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo `json:"DiskInfo,omitempty" xml:"DiskInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos) SetDiskInfo(v []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfos {
	s.DiskInfo = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo struct {
	Type     *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Size     *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	Device   *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskName *string `json:"DiskName,omitempty" xml:"DiskName,omitempty"`
	DiskId   *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetType(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.Type = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetSize(v int32) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.Size = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetDevice(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.Device = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetDiskName(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.DiskName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo) SetDiskId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDiskInfosDiskInfo {
	s.DiskId = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos struct {
	DaemonInfo []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo `json:"DaemonInfo,omitempty" xml:"DaemonInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos) SetDaemonInfo(v []*DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfos {
	s.DaemonInfo = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo) SetName(v string) *DescribeClusterV2ResponseBodyClusterInfoHostGroupListHostGroupNodesNodeDaemonInfosDaemonInfo {
	s.Name = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList struct {
	BootstrapAction []*DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList) SetBootstrapAction(v []*DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetArg(v string) *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetPath(v string) *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetName(v string) *DescribeClusterV2ResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList struct {
	GatewayClusterInfo []*DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo `json:"GatewayClusterInfo,omitempty" xml:"GatewayClusterInfo,omitempty" type:"Repeated"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList) SetGatewayClusterInfo(v []*DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoList {
	s.GatewayClusterInfo = v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ClusterName *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetStatus(v string) *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.Status = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetClusterName(v string) *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.ClusterName = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo) SetClusterId(v string) *DescribeClusterV2ResponseBodyClusterInfoGatewayClusterInfoListGatewayClusterInfo {
	s.ClusterId = &v
	return s
}

type DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo struct {
	HpBizId *string `json:"HpBizId,omitempty" xml:"HpBizId,omitempty"`
	HpName  *string `json:"HpName,omitempty" xml:"HpName,omitempty"`
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) SetHpBizId(v string) *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo {
	s.HpBizId = &v
	return s
}

func (s *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo) SetHpName(v string) *DescribeClusterV2ResponseBodyClusterInfoHostPoolInfo {
	s.HpName = &v
	return s
}

type DescribeClusterV2Response struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeClusterV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeClusterV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeClusterV2Response) GoString() string {
	return s.String()
}

func (s *DescribeClusterV2Response) SetHeaders(v map[string]*string) *DescribeClusterV2Response {
	s.Headers = v
	return s
}

func (s *DescribeClusterV2Response) SetBody(v *DescribeClusterV2ResponseBody) *DescribeClusterV2Response {
	s.Body = v
	return s
}

type DescribeDataSourceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceRequest) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceRequest) SetResourceOwnerId(v int64) *DescribeDataSourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeDataSourceRequest) SetRegionId(v string) *DescribeDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeDataSourceRequest) SetId(v string) *DescribeDataSourceRequest {
	s.Id = &v
	return s
}

func (s *DescribeDataSourceRequest) SetResourceGroupId(v string) *DescribeDataSourceRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeDataSourceResponseBody struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	CategoryId  *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Conf        *string `json:"Conf,omitempty" xml:"Conf,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	SourceType  *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	CreateFrom  *string `json:"CreateFrom,omitempty" xml:"CreateFrom,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Modifier    *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
}

func (s DescribeDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceResponseBody) SetStatus(v string) *DescribeDataSourceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetCategoryId(v string) *DescribeDataSourceResponseBody {
	s.CategoryId = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetDescription(v string) *DescribeDataSourceResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetConf(v string) *DescribeDataSourceResponseBody {
	s.Conf = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetRequestId(v string) *DescribeDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetClusterId(v string) *DescribeDataSourceResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetSourceType(v string) *DescribeDataSourceResponseBody {
	s.SourceType = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetGmtModified(v int64) *DescribeDataSourceResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetCreator(v string) *DescribeDataSourceResponseBody {
	s.Creator = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetCreateFrom(v string) *DescribeDataSourceResponseBody {
	s.CreateFrom = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetName(v string) *DescribeDataSourceResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetGmtCreate(v int64) *DescribeDataSourceResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetId(v string) *DescribeDataSourceResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeDataSourceResponseBody) SetModifier(v string) *DescribeDataSourceResponseBody {
	s.Modifier = &v
	return s
}

type DescribeDataSourceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDataSourceResponse) GoString() string {
	return s.String()
}

func (s *DescribeDataSourceResponse) SetHeaders(v map[string]*string) *DescribeDataSourceResponse {
	s.Headers = v
	return s
}

func (s *DescribeDataSourceResponse) SetBody(v *DescribeDataSourceResponseBody) *DescribeDataSourceResponse {
	s.Body = v
	return s
}

type DescribeExecutionPlanRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeExecutionPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanRequest) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanRequest) SetResourceOwnerId(v int64) *DescribeExecutionPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeExecutionPlanRequest) SetRegionId(v string) *DescribeExecutionPlanRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeExecutionPlanRequest) SetId(v string) *DescribeExecutionPlanRequest {
	s.Id = &v
	return s
}

type DescribeExecutionPlanResponseBody struct {
	Status                *string                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	WorkflowApp           *string                                       `json:"WorkflowApp,omitempty" xml:"WorkflowApp,omitempty"`
	DayOfWeek             *string                                       `json:"DayOfWeek,omitempty" xml:"DayOfWeek,omitempty"`
	TimeInterval          *int32                                        `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	RequestId             *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId             *string                                       `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DayOfMonth            *string                                       `json:"DayOfMonth,omitempty" xml:"DayOfMonth,omitempty"`
	ExecutionPlanVersion  *int64                                        `json:"ExecutionPlanVersion,omitempty" xml:"ExecutionPlanVersion,omitempty"`
	StartTime             *int64                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Name                  *string                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	JobInfoList           *DescribeExecutionPlanResponseBodyJobInfoList `json:"JobInfoList,omitempty" xml:"JobInfoList,omitempty" type:"Struct"`
	ClusterInfo           *DescribeExecutionPlanResponseBodyClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Struct"`
	TimeUnit              *string                                       `json:"TimeUnit,omitempty" xml:"TimeUnit,omitempty"`
	Strategy              *string                                       `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	ClusterName           *string                                       `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	Id                    *string                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	CreateClusterOnDemand *bool                                         `json:"CreateClusterOnDemand,omitempty" xml:"CreateClusterOnDemand,omitempty"`
}

func (s DescribeExecutionPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBody) SetStatus(v string) *DescribeExecutionPlanResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetWorkflowApp(v string) *DescribeExecutionPlanResponseBody {
	s.WorkflowApp = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetDayOfWeek(v string) *DescribeExecutionPlanResponseBody {
	s.DayOfWeek = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetTimeInterval(v int32) *DescribeExecutionPlanResponseBody {
	s.TimeInterval = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetRequestId(v string) *DescribeExecutionPlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetClusterId(v string) *DescribeExecutionPlanResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetDayOfMonth(v string) *DescribeExecutionPlanResponseBody {
	s.DayOfMonth = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetExecutionPlanVersion(v int64) *DescribeExecutionPlanResponseBody {
	s.ExecutionPlanVersion = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetStartTime(v int64) *DescribeExecutionPlanResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetName(v string) *DescribeExecutionPlanResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetJobInfoList(v *DescribeExecutionPlanResponseBodyJobInfoList) *DescribeExecutionPlanResponseBody {
	s.JobInfoList = v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetClusterInfo(v *DescribeExecutionPlanResponseBodyClusterInfo) *DescribeExecutionPlanResponseBody {
	s.ClusterInfo = v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetTimeUnit(v string) *DescribeExecutionPlanResponseBody {
	s.TimeUnit = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetStrategy(v string) *DescribeExecutionPlanResponseBody {
	s.Strategy = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetClusterName(v string) *DescribeExecutionPlanResponseBody {
	s.ClusterName = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetId(v string) *DescribeExecutionPlanResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeExecutionPlanResponseBody) SetCreateClusterOnDemand(v bool) *DescribeExecutionPlanResponseBody {
	s.CreateClusterOnDemand = &v
	return s
}

type DescribeExecutionPlanResponseBodyJobInfoList struct {
	JobInfo []*DescribeExecutionPlanResponseBodyJobInfoListJobInfo `json:"JobInfo,omitempty" xml:"JobInfo,omitempty" type:"Repeated"`
}

func (s DescribeExecutionPlanResponseBodyJobInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyJobInfoList) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyJobInfoList) SetJobInfo(v []*DescribeExecutionPlanResponseBodyJobInfoListJobInfo) *DescribeExecutionPlanResponseBodyJobInfoList {
	s.JobInfo = v
	return s
}

type DescribeExecutionPlanResponseBodyJobInfoListJobInfo struct {
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	FailAct      *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RunParameter *string `json:"RunParameter,omitempty" xml:"RunParameter,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeExecutionPlanResponseBodyJobInfoListJobInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyJobInfoListJobInfo) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyJobInfoListJobInfo) SetType(v string) *DescribeExecutionPlanResponseBodyJobInfoListJobInfo {
	s.Type = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyJobInfoListJobInfo) SetFailAct(v string) *DescribeExecutionPlanResponseBodyJobInfoListJobInfo {
	s.FailAct = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyJobInfoListJobInfo) SetName(v string) *DescribeExecutionPlanResponseBodyJobInfoListJobInfo {
	s.Name = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyJobInfoListJobInfo) SetRunParameter(v string) *DescribeExecutionPlanResponseBodyJobInfoListJobInfo {
	s.RunParameter = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyJobInfoListJobInfo) SetId(v string) *DescribeExecutionPlanResponseBodyJobInfoListJobInfo {
	s.Id = &v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfo struct {
	VpcId                  *string                                                          `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	UseCustomHiveMetaDB    *bool                                                            `json:"UseCustomHiveMetaDB,omitempty" xml:"UseCustomHiveMetaDB,omitempty"`
	LogEnable              *bool                                                            `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	UserDefinedEmrEcsRole  *string                                                          `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	HighAvailabilityEnable *bool                                                            `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	SecurityGroupId        *string                                                          `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	UseLocalMetaDb         *bool                                                            `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	SoftwareInfo           *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo        `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Struct"`
	IoOptimized            *bool                                                            `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	VSwitchId              *string                                                          `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Configurations         *string                                                          `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	EcsOrders              *DescribeExecutionPlanResponseBodyClusterInfoEcsOrders           `json:"EcsOrders,omitempty" xml:"EcsOrders,omitempty" type:"Struct"`
	EmrVer                 *string                                                          `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	LogPath                *string                                                          `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	ClusterType            *string                                                          `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	InitCustomHiveMetaDB   *bool                                                            `json:"InitCustomHiveMetaDB,omitempty" xml:"InitCustomHiveMetaDB,omitempty"`
	NetType                *string                                                          `json:"NetType,omitempty" xml:"NetType,omitempty"`
	ZoneId                 *string                                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	ConfigList             *DescribeExecutionPlanResponseBodyClusterInfoConfigList          `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Struct"`
	BootstrapActionList    *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionList `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	InstanceGeneration     *string                                                          `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	Name                   *string                                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	EasEnable              *bool                                                            `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfo) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetVpcId(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.VpcId = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetUseCustomHiveMetaDB(v bool) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.UseCustomHiveMetaDB = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetLogEnable(v bool) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.LogEnable = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetUserDefinedEmrEcsRole(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetHighAvailabilityEnable(v bool) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetSecurityGroupId(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetUseLocalMetaDb(v bool) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.UseLocalMetaDb = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetSoftwareInfo(v *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.SoftwareInfo = v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetIoOptimized(v bool) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.IoOptimized = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetVSwitchId(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.VSwitchId = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetConfigurations(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.Configurations = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetEcsOrders(v *DescribeExecutionPlanResponseBodyClusterInfoEcsOrders) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.EcsOrders = v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetEmrVer(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.EmrVer = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetLogPath(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.LogPath = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetClusterType(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetInitCustomHiveMetaDB(v bool) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.InitCustomHiveMetaDB = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetNetType(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.NetType = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetZoneId(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.ZoneId = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetConfigList(v *DescribeExecutionPlanResponseBodyClusterInfoConfigList) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.ConfigList = v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetBootstrapActionList(v *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionList) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.BootstrapActionList = v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetInstanceGeneration(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetName(v string) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.Name = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfo) SetEasEnable(v bool) *DescribeExecutionPlanResponseBodyClusterInfo {
	s.EasEnable = &v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo struct {
	EmrVer      *string                                                            `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType *string                                                            `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	Softwares   *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwares `json:"Softwares,omitempty" xml:"Softwares,omitempty" type:"Struct"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo) SetEmrVer(v string) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo {
	s.EmrVer = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo) SetClusterType(v string) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo {
	s.ClusterType = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo) SetSoftwares(v *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwares) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfo {
	s.Softwares = v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwares struct {
	Software []*DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware `json:"Software,omitempty" xml:"Software,omitempty" type:"Repeated"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwares) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwares) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwares) SetSoftware(v []*DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwares {
	s.Software = v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware struct {
	DisplayName *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	StartTpe    *int32  `json:"StartTpe,omitempty" xml:"StartTpe,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
	OnlyDisplay *bool   `json:"OnlyDisplay,omitempty" xml:"OnlyDisplay,omitempty"`
	Optional    *bool   `json:"Optional,omitempty" xml:"Optional,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetDisplayName(v string) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.DisplayName = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetStartTpe(v int32) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.StartTpe = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetVersion(v string) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Version = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetOnlyDisplay(v bool) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.OnlyDisplay = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetOptional(v bool) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Optional = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware) SetName(v string) *DescribeExecutionPlanResponseBodyClusterInfoSoftwareInfoSoftwaresSoftware {
	s.Name = &v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoEcsOrders struct {
	EcsOrderInfo []*DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo `json:"EcsOrderInfo,omitempty" xml:"EcsOrderInfo,omitempty" type:"Repeated"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoEcsOrders) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoEcsOrders) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoEcsOrders) SetEcsOrderInfo(v []*DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) *DescribeExecutionPlanResponseBodyClusterInfoEcsOrders {
	s.EcsOrderInfo = v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo struct {
	Index        *int32  `json:"Index,omitempty" xml:"Index,omitempty"`
	DiskCapacity *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	NodeType     *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	NodeCount    *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	DiskType     *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DiskCount    *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) SetIndex(v int32) *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo {
	s.Index = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) SetDiskCapacity(v int32) *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo {
	s.DiskCapacity = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) SetNodeType(v string) *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo {
	s.NodeType = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) SetNodeCount(v int32) *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo {
	s.NodeCount = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) SetDiskType(v string) *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo {
	s.DiskType = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) SetInstanceType(v string) *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo {
	s.InstanceType = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo) SetDiskCount(v int32) *DescribeExecutionPlanResponseBodyClusterInfoEcsOrdersEcsOrderInfo {
	s.DiskCount = &v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoConfigList struct {
	Config []*DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoConfigList) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoConfigList) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoConfigList) SetConfig(v []*DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig) *DescribeExecutionPlanResponseBodyClusterInfoConfigList {
	s.Config = v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig) SetConfigValue(v string) *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig {
	s.ConfigValue = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig) SetFileName(v string) *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig {
	s.FileName = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig) SetServiceName(v string) *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig {
	s.ServiceName = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig) SetConfigKey(v string) *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig {
	s.ConfigKey = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig) SetEncrypt(v string) *DescribeExecutionPlanResponseBodyClusterInfoConfigListConfig {
	s.Encrypt = &v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionList struct {
	BootstrapAction []*DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionList) SetBootstrapAction(v []*DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction) *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetArg(v string) *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetPath(v string) *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

func (s *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction) SetName(v string) *DescribeExecutionPlanResponseBodyClusterInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

type DescribeExecutionPlanResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeExecutionPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeExecutionPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExecutionPlanResponse) GoString() string {
	return s.String()
}

func (s *DescribeExecutionPlanResponse) SetHeaders(v map[string]*string) *DescribeExecutionPlanResponse {
	s.Headers = v
	return s
}

func (s *DescribeExecutionPlanResponse) SetBody(v *DescribeExecutionPlanResponseBody) *DescribeExecutionPlanResponse {
	s.Body = v
	return s
}

type DescribeFlowRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowRequest) SetProjectId(v string) *DescribeFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowRequest) SetId(v string) *DescribeFlowRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowRequest) SetRegionId(v string) *DescribeFlowRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowResponseBody struct {
	CategoryId              *string                                 `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	Description             *string                                 `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtModified             *int64                                  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Periodic                *bool                                   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	CronExpr                *string                                 `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	AlertDingDingGroupBizId *string                                 `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	Name                    *string                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	AlertUserGroupBizId     *string                                 `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	LogArchiveLocation      *string                                 `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	EndSchedule             *int64                                  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	HostName                *string                                 `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Status                  *string                                 `json:"Status,omitempty" xml:"Status,omitempty"`
	StartSchedule           *int64                                  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	RequestId               *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId               *string                                 `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Lifecycle               *string                                 `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	EditLockDetail          *string                                 `json:"EditLockDetail,omitempty" xml:"EditLockDetail,omitempty"`
	Namespace               *string                                 `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Type                    *string                                 `json:"Type,omitempty" xml:"Type,omitempty"`
	GmtCreate               *int64                                  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Graph                   *string                                 `json:"Graph,omitempty" xml:"Graph,omitempty"`
	Id                      *string                                 `json:"Id,omitempty" xml:"Id,omitempty"`
	Application             *string                                 `json:"Application,omitempty" xml:"Application,omitempty"`
	CreateCluster           *bool                                   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	AlertConf               *string                                 `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	ParentFlowList          *DescribeFlowResponseBodyParentFlowList `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty" type:"Struct"`
}

func (s DescribeFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowResponseBody) SetCategoryId(v string) *DescribeFlowResponseBody {
	s.CategoryId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetDescription(v string) *DescribeFlowResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeFlowResponseBody) SetGmtModified(v int64) *DescribeFlowResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowResponseBody) SetPeriodic(v bool) *DescribeFlowResponseBody {
	s.Periodic = &v
	return s
}

func (s *DescribeFlowResponseBody) SetCronExpr(v string) *DescribeFlowResponseBody {
	s.CronExpr = &v
	return s
}

func (s *DescribeFlowResponseBody) SetAlertDingDingGroupBizId(v string) *DescribeFlowResponseBody {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetName(v string) *DescribeFlowResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeFlowResponseBody) SetAlertUserGroupBizId(v string) *DescribeFlowResponseBody {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetLogArchiveLocation(v string) *DescribeFlowResponseBody {
	s.LogArchiveLocation = &v
	return s
}

func (s *DescribeFlowResponseBody) SetEndSchedule(v int64) *DescribeFlowResponseBody {
	s.EndSchedule = &v
	return s
}

func (s *DescribeFlowResponseBody) SetHostName(v string) *DescribeFlowResponseBody {
	s.HostName = &v
	return s
}

func (s *DescribeFlowResponseBody) SetStatus(v string) *DescribeFlowResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeFlowResponseBody) SetStartSchedule(v int64) *DescribeFlowResponseBody {
	s.StartSchedule = &v
	return s
}

func (s *DescribeFlowResponseBody) SetRequestId(v string) *DescribeFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetClusterId(v string) *DescribeFlowResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowResponseBody) SetLifecycle(v string) *DescribeFlowResponseBody {
	s.Lifecycle = &v
	return s
}

func (s *DescribeFlowResponseBody) SetEditLockDetail(v string) *DescribeFlowResponseBody {
	s.EditLockDetail = &v
	return s
}

func (s *DescribeFlowResponseBody) SetNamespace(v string) *DescribeFlowResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeFlowResponseBody) SetType(v string) *DescribeFlowResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeFlowResponseBody) SetGmtCreate(v int64) *DescribeFlowResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowResponseBody) SetGraph(v string) *DescribeFlowResponseBody {
	s.Graph = &v
	return s
}

func (s *DescribeFlowResponseBody) SetId(v string) *DescribeFlowResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowResponseBody) SetApplication(v string) *DescribeFlowResponseBody {
	s.Application = &v
	return s
}

func (s *DescribeFlowResponseBody) SetCreateCluster(v bool) *DescribeFlowResponseBody {
	s.CreateCluster = &v
	return s
}

func (s *DescribeFlowResponseBody) SetAlertConf(v string) *DescribeFlowResponseBody {
	s.AlertConf = &v
	return s
}

func (s *DescribeFlowResponseBody) SetParentFlowList(v *DescribeFlowResponseBodyParentFlowList) *DescribeFlowResponseBody {
	s.ParentFlowList = v
	return s
}

type DescribeFlowResponseBodyParentFlowList struct {
	ParentFlow []*DescribeFlowResponseBodyParentFlowListParentFlow `json:"ParentFlow,omitempty" xml:"ParentFlow,omitempty" type:"Repeated"`
}

func (s DescribeFlowResponseBodyParentFlowList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowResponseBodyParentFlowList) GoString() string {
	return s.String()
}

func (s *DescribeFlowResponseBodyParentFlowList) SetParentFlow(v []*DescribeFlowResponseBodyParentFlowListParentFlow) *DescribeFlowResponseBodyParentFlowList {
	s.ParentFlow = v
	return s
}

type DescribeFlowResponseBodyParentFlowListParentFlow struct {
	ProjectName    *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ParentFlowName *string `json:"ParentFlowName,omitempty" xml:"ParentFlowName,omitempty"`
	ParentFlowId   *string `json:"ParentFlowId,omitempty" xml:"ParentFlowId,omitempty"`
}

func (s DescribeFlowResponseBodyParentFlowListParentFlow) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowResponseBodyParentFlowListParentFlow) GoString() string {
	return s.String()
}

func (s *DescribeFlowResponseBodyParentFlowListParentFlow) SetProjectName(v string) *DescribeFlowResponseBodyParentFlowListParentFlow {
	s.ProjectName = &v
	return s
}

func (s *DescribeFlowResponseBodyParentFlowListParentFlow) SetProjectId(v string) *DescribeFlowResponseBodyParentFlowListParentFlow {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowResponseBodyParentFlowListParentFlow) SetParentFlowName(v string) *DescribeFlowResponseBodyParentFlowListParentFlow {
	s.ParentFlowName = &v
	return s
}

func (s *DescribeFlowResponseBodyParentFlowListParentFlow) SetParentFlowId(v string) *DescribeFlowResponseBodyParentFlowListParentFlow {
	s.ParentFlowId = &v
	return s
}

type DescribeFlowResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowResponse) SetHeaders(v map[string]*string) *DescribeFlowResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowResponse) SetBody(v *DescribeFlowResponseBody) *DescribeFlowResponse {
	s.Body = v
	return s
}

type DescribeFlowAgentTokenRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterBizId    *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	InnerIP         *string `json:"InnerIP,omitempty" xml:"InnerIP,omitempty"`
}

func (s DescribeFlowAgentTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowAgentTokenRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowAgentTokenRequest) SetResourceOwnerId(v int64) *DescribeFlowAgentTokenRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeFlowAgentTokenRequest) SetRegionId(v string) *DescribeFlowAgentTokenRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowAgentTokenRequest) SetClusterBizId(v string) *DescribeFlowAgentTokenRequest {
	s.ClusterBizId = &v
	return s
}

func (s *DescribeFlowAgentTokenRequest) SetInnerIP(v string) *DescribeFlowAgentTokenRequest {
	s.InnerIP = &v
	return s
}

type DescribeFlowAgentTokenResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DescribeFlowAgentTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowAgentTokenResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowAgentTokenResponseBody) SetRequestId(v string) *DescribeFlowAgentTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowAgentTokenResponseBody) SetData(v string) *DescribeFlowAgentTokenResponseBody {
	s.Data = &v
	return s
}

type DescribeFlowAgentTokenResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowAgentTokenResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowAgentTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowAgentTokenResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowAgentTokenResponse) SetHeaders(v map[string]*string) *DescribeFlowAgentTokenResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowAgentTokenResponse) SetBody(v *DescribeFlowAgentTokenResponseBody) *DescribeFlowAgentTokenResponse {
	s.Body = v
	return s
}

type DescribeFlowAgentUserRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterBizId    *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	UserId          *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DescribeFlowAgentUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowAgentUserRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowAgentUserRequest) SetResourceOwnerId(v int64) *DescribeFlowAgentUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeFlowAgentUserRequest) SetRegionId(v string) *DescribeFlowAgentUserRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowAgentUserRequest) SetClusterBizId(v string) *DescribeFlowAgentUserRequest {
	s.ClusterBizId = &v
	return s
}

func (s *DescribeFlowAgentUserRequest) SetUserId(v string) *DescribeFlowAgentUserRequest {
	s.UserId = &v
	return s
}

type DescribeFlowAgentUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DescribeFlowAgentUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowAgentUserResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowAgentUserResponseBody) SetRequestId(v string) *DescribeFlowAgentUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowAgentUserResponseBody) SetData(v string) *DescribeFlowAgentUserResponseBody {
	s.Data = &v
	return s
}

type DescribeFlowAgentUserResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowAgentUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowAgentUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowAgentUserResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowAgentUserResponse) SetHeaders(v map[string]*string) *DescribeFlowAgentUserResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowAgentUserResponse) SetBody(v *DescribeFlowAgentUserResponseBody) *DescribeFlowAgentUserResponse {
	s.Body = v
	return s
}

type DescribeFlowCategoryRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryRequest) SetProjectId(v string) *DescribeFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowCategoryRequest) SetId(v string) *DescribeFlowCategoryRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowCategoryRequest) SetRegionId(v string) *DescribeFlowCategoryRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowCategoryResponseBody struct {
	ParentId     *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ObjectType   *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ObjectId     *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	ProjectId    *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	GmtModified  *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	CategoryType *string `json:"CategoryType,omitempty" xml:"CategoryType,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryResponseBody) SetParentId(v string) *DescribeFlowCategoryResponseBody {
	s.ParentId = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetObjectType(v string) *DescribeFlowCategoryResponseBody {
	s.ObjectType = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetType(v string) *DescribeFlowCategoryResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetGmtCreate(v int64) *DescribeFlowCategoryResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetRequestId(v string) *DescribeFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetObjectId(v string) *DescribeFlowCategoryResponseBody {
	s.ObjectId = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetProjectId(v string) *DescribeFlowCategoryResponseBody {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetGmtModified(v int64) *DescribeFlowCategoryResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetCategoryType(v string) *DescribeFlowCategoryResponseBody {
	s.CategoryType = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetId(v string) *DescribeFlowCategoryResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowCategoryResponseBody) SetName(v string) *DescribeFlowCategoryResponseBody {
	s.Name = &v
	return s
}

type DescribeFlowCategoryResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryResponse) SetHeaders(v map[string]*string) *DescribeFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowCategoryResponse) SetBody(v *DescribeFlowCategoryResponseBody) *DescribeFlowCategoryResponse {
	s.Body = v
	return s
}

type DescribeFlowCategoryTreeRequest struct {
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Mode       *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	Keyword    *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	CategoryId *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
}

func (s DescribeFlowCategoryTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryTreeRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryTreeRequest) SetProjectId(v string) *DescribeFlowCategoryTreeRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetRegionId(v string) *DescribeFlowCategoryTreeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetType(v string) *DescribeFlowCategoryTreeRequest {
	s.Type = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetMode(v string) *DescribeFlowCategoryTreeRequest {
	s.Mode = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetKeyword(v string) *DescribeFlowCategoryTreeRequest {
	s.Keyword = &v
	return s
}

func (s *DescribeFlowCategoryTreeRequest) SetCategoryId(v string) *DescribeFlowCategoryTreeRequest {
	s.CategoryId = &v
	return s
}

type DescribeFlowCategoryTreeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DescribeFlowCategoryTreeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryTreeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryTreeResponseBody) SetRequestId(v string) *DescribeFlowCategoryTreeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowCategoryTreeResponseBody) SetData(v string) *DescribeFlowCategoryTreeResponseBody {
	s.Data = &v
	return s
}

type DescribeFlowCategoryTreeResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowCategoryTreeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowCategoryTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowCategoryTreeResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowCategoryTreeResponse) SetHeaders(v map[string]*string) *DescribeFlowCategoryTreeResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowCategoryTreeResponse) SetBody(v *DescribeFlowCategoryTreeResponseBody) *DescribeFlowCategoryTreeResponse {
	s.Body = v
	return s
}

type DescribeFlowEntitySnapshotRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize     *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount       *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField      *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode       *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	CommitterId     *string `json:"CommitterId,omitempty" xml:"CommitterId,omitempty"`
	EntityType      *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	EntityGroupId   *string `json:"EntityGroupId,omitempty" xml:"EntityGroupId,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Revision        *string `json:"Revision,omitempty" xml:"Revision,omitempty"`
}

func (s DescribeFlowEntitySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowEntitySnapshotRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowEntitySnapshotRequest) SetResourceOwnerId(v int64) *DescribeFlowEntitySnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetRegionId(v string) *DescribeFlowEntitySnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetLimit(v int32) *DescribeFlowEntitySnapshotRequest {
	s.Limit = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetPageNumber(v int32) *DescribeFlowEntitySnapshotRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetPageSize(v int32) *DescribeFlowEntitySnapshotRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetCurrentSize(v int32) *DescribeFlowEntitySnapshotRequest {
	s.CurrentSize = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetPageCount(v int32) *DescribeFlowEntitySnapshotRequest {
	s.PageCount = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetOrderField(v string) *DescribeFlowEntitySnapshotRequest {
	s.OrderField = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetOrderMode(v string) *DescribeFlowEntitySnapshotRequest {
	s.OrderMode = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetCommitterId(v string) *DescribeFlowEntitySnapshotRequest {
	s.CommitterId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetEntityType(v string) *DescribeFlowEntitySnapshotRequest {
	s.EntityType = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetEntityGroupId(v string) *DescribeFlowEntitySnapshotRequest {
	s.EntityGroupId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetEntityId(v string) *DescribeFlowEntitySnapshotRequest {
	s.EntityId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotRequest) SetRevision(v string) *DescribeFlowEntitySnapshotRequest {
	s.Revision = &v
	return s
}

type DescribeFlowEntitySnapshotResponseBody struct {
	EntityId      *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	EntityType    *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	Active        *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	GmtCreate     *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Revision      *string `json:"Revision,omitempty" xml:"Revision,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Data          *string `json:"Data,omitempty" xml:"Data,omitempty"`
	EntityGroupId *string `json:"EntityGroupId,omitempty" xml:"EntityGroupId,omitempty"`
	CommitterId   *string `json:"CommitterId,omitempty" xml:"CommitterId,omitempty"`
}

func (s DescribeFlowEntitySnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowEntitySnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetEntityId(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.EntityId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetEntityType(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.EntityType = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetActive(v bool) *DescribeFlowEntitySnapshotResponseBody {
	s.Active = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetGmtCreate(v int64) *DescribeFlowEntitySnapshotResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetRequestId(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetMessage(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetRevision(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.Revision = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetUserId(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.UserId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetData(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetEntityGroupId(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.EntityGroupId = &v
	return s
}

func (s *DescribeFlowEntitySnapshotResponseBody) SetCommitterId(v string) *DescribeFlowEntitySnapshotResponseBody {
	s.CommitterId = &v
	return s
}

type DescribeFlowEntitySnapshotResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowEntitySnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowEntitySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowEntitySnapshotResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowEntitySnapshotResponse) SetHeaders(v map[string]*string) *DescribeFlowEntitySnapshotResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowEntitySnapshotResponse) SetBody(v *DescribeFlowEntitySnapshotResponseBody) *DescribeFlowEntitySnapshotResponse {
	s.Body = v
	return s
}

type DescribeFlowInstanceRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceRequest) SetProjectId(v string) *DescribeFlowInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowInstanceRequest) SetId(v string) *DescribeFlowInstanceRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowInstanceRequest) SetRegionId(v string) *DescribeFlowInstanceRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowInstanceResponseBody struct {
	Status             *string                                             `json:"Status,omitempty" xml:"Status,omitempty"`
	HasNodeFailed      *bool                                               `json:"HasNodeFailed,omitempty" xml:"HasNodeFailed,omitempty"`
	EndTime            *int64                                              `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId          *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId          *string                                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Lifecycle          *string                                             `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	ProjectId          *string                                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	GmtModified        *int64                                              `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	StartTime          *int64                                              `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Duration           *int64                                              `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Namespace          *string                                             `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	FlowId             *string                                             `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	GmtCreate          *int64                                              `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Graph              *string                                             `json:"Graph,omitempty" xml:"Graph,omitempty"`
	ScheduleTime       *int64                                              `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	FlowName           *string                                             `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	CronExpression     *string                                             `json:"CronExpression,omitempty" xml:"CronExpression,omitempty"`
	LogArchiveLocation *string                                             `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Id                 *string                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	NodeInstance       *DescribeFlowInstanceResponseBodyNodeInstance       `json:"NodeInstance,omitempty" xml:"NodeInstance,omitempty" type:"Struct"`
	DependencyFlowList *DescribeFlowInstanceResponseBodyDependencyFlowList `json:"DependencyFlowList,omitempty" xml:"DependencyFlowList,omitempty" type:"Struct"`
}

func (s DescribeFlowInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBody) SetStatus(v string) *DescribeFlowInstanceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetHasNodeFailed(v bool) *DescribeFlowInstanceResponseBody {
	s.HasNodeFailed = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetEndTime(v int64) *DescribeFlowInstanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetRequestId(v string) *DescribeFlowInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetClusterId(v string) *DescribeFlowInstanceResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetLifecycle(v string) *DescribeFlowInstanceResponseBody {
	s.Lifecycle = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetProjectId(v string) *DescribeFlowInstanceResponseBody {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetGmtModified(v int64) *DescribeFlowInstanceResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetStartTime(v int64) *DescribeFlowInstanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetDuration(v int64) *DescribeFlowInstanceResponseBody {
	s.Duration = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetNamespace(v string) *DescribeFlowInstanceResponseBody {
	s.Namespace = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetFlowId(v string) *DescribeFlowInstanceResponseBody {
	s.FlowId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetGmtCreate(v int64) *DescribeFlowInstanceResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetGraph(v string) *DescribeFlowInstanceResponseBody {
	s.Graph = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetScheduleTime(v int64) *DescribeFlowInstanceResponseBody {
	s.ScheduleTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetFlowName(v string) *DescribeFlowInstanceResponseBody {
	s.FlowName = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetCronExpression(v string) *DescribeFlowInstanceResponseBody {
	s.CronExpression = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetLogArchiveLocation(v string) *DescribeFlowInstanceResponseBody {
	s.LogArchiveLocation = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetId(v string) *DescribeFlowInstanceResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetNodeInstance(v *DescribeFlowInstanceResponseBodyNodeInstance) *DescribeFlowInstanceResponseBody {
	s.NodeInstance = v
	return s
}

func (s *DescribeFlowInstanceResponseBody) SetDependencyFlowList(v *DescribeFlowInstanceResponseBodyDependencyFlowList) *DescribeFlowInstanceResponseBody {
	s.DependencyFlowList = v
	return s
}

type DescribeFlowInstanceResponseBodyNodeInstance struct {
	NodeInstance []*DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance `json:"NodeInstance,omitempty" xml:"NodeInstance,omitempty" type:"Repeated"`
}

func (s DescribeFlowInstanceResponseBodyNodeInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBodyNodeInstance) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBodyNodeInstance) SetNodeInstance(v []*DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) *DescribeFlowInstanceResponseBodyNodeInstance {
	s.NodeInstance = v
	return s
}

type DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance struct {
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	FailAct        *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	RetryInterval  *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	JobType        *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	GmtModified    *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	ExternalInfo   *string `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty"`
	Retries        *int32  `json:"Retries,omitempty" xml:"Retries,omitempty"`
	EndTime        *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ExternalStatus *string `json:"ExternalStatus,omitempty" xml:"ExternalStatus,omitempty"`
	JobName        *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	NodeName       *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	JobId          *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	GmtCreate      *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	ExternalId     *string `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	Duration       *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Pending        *bool   `json:"Pending,omitempty" xml:"Pending,omitempty"`
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	MaxRetry       *string `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
}

func (s DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetType(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Type = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetStatus(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Status = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetFailAct(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.FailAct = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetRetryInterval(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.RetryInterval = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetProjectId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetJobType(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.JobType = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetHostName(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.HostName = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetGmtModified(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetExternalInfo(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ExternalInfo = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetRetries(v int32) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Retries = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetEndTime(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetStartTime(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.StartTime = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetExternalStatus(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ExternalStatus = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetJobName(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.JobName = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetNodeName(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.NodeName = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetJobId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.JobId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetGmtCreate(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetExternalId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ExternalId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetDuration(v int64) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Duration = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Id = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetPending(v bool) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.Pending = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetClusterId(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance) SetMaxRetry(v string) *DescribeFlowInstanceResponseBodyNodeInstanceNodeInstance {
	s.MaxRetry = &v
	return s
}

type DescribeFlowInstanceResponseBodyDependencyFlowList struct {
	ParentFlow []*DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow `json:"ParentFlow,omitempty" xml:"ParentFlow,omitempty" type:"Repeated"`
}

func (s DescribeFlowInstanceResponseBodyDependencyFlowList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBodyDependencyFlowList) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowList) SetParentFlow(v []*DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) *DescribeFlowInstanceResponseBodyDependencyFlowList {
	s.ParentFlow = v
	return s
}

type DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow struct {
	ScheduleKey          *string `json:"ScheduleKey,omitempty" xml:"ScheduleKey,omitempty"`
	BizDate              *int64  `json:"BizDate,omitempty" xml:"BizDate,omitempty"`
	DependencyInstanceId *string `json:"DependencyInstanceId,omitempty" xml:"DependencyInstanceId,omitempty"`
	DependencyFlowId     *string `json:"DependencyFlowId,omitempty" xml:"DependencyFlowId,omitempty"`
	Meet                 *bool   `json:"Meet,omitempty" xml:"Meet,omitempty"`
	FlowInstanceId       *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	ProjectId            *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	FlowId               *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
}

func (s DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetScheduleKey(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.ScheduleKey = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetBizDate(v int64) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.BizDate = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetDependencyInstanceId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.DependencyInstanceId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetDependencyFlowId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.DependencyFlowId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetMeet(v bool) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.Meet = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetFlowInstanceId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.FlowInstanceId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetProjectId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow) SetFlowId(v string) *DescribeFlowInstanceResponseBodyDependencyFlowListParentFlow {
	s.FlowId = &v
	return s
}

type DescribeFlowInstanceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowInstanceResponse) SetHeaders(v map[string]*string) *DescribeFlowInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowInstanceResponse) SetBody(v *DescribeFlowInstanceResponseBody) *DescribeFlowInstanceResponse {
	s.Body = v
	return s
}

type DescribeFlowJobRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobRequest) SetProjectId(v string) *DescribeFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowJobRequest) SetId(v string) *DescribeFlowJobRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowJobRequest) SetRegionId(v string) *DescribeFlowJobRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowJobResponseBody struct {
	FailAct           *string                                  `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	CategoryId        *string                                  `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	Description       *string                                  `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtModified       *int64                                   `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Name              *string                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	ParamConf         *string                                  `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	Mode              *string                                  `json:"mode,omitempty" xml:"mode,omitempty"`
	Adhoc             *string                                  `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	RequestId         *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LastInstanceId    *string                                  `json:"LastInstanceId,omitempty" xml:"LastInstanceId,omitempty"`
	Params            *string                                  `json:"Params,omitempty" xml:"Params,omitempty"`
	MaxRetry          *int32                                   `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	MaxRunningTimeSec *int64                                   `json:"MaxRunningTimeSec,omitempty" xml:"MaxRunningTimeSec,omitempty"`
	EditLockDetail    *string                                  `json:"EditLockDetail,omitempty" xml:"EditLockDetail,omitempty"`
	Type              *string                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	GmtCreate         *int64                                   `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	ResourceList      *DescribeFlowJobResponseBodyResourceList `json:"ResourceList,omitempty" xml:"ResourceList,omitempty" type:"Struct"`
	EnvConf           *string                                  `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	MonitorConf       *string                                  `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	RetryInterval     *int64                                   `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RunConf           *string                                  `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	Id                *string                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	RetryPolicy       *string                                  `json:"RetryPolicy,omitempty" xml:"RetryPolicy,omitempty"`
	CustomVariables   *string                                  `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	AlertConf         *string                                  `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
}

func (s DescribeFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobResponseBody) SetFailAct(v string) *DescribeFlowJobResponseBody {
	s.FailAct = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetCategoryId(v string) *DescribeFlowJobResponseBody {
	s.CategoryId = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetDescription(v string) *DescribeFlowJobResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetGmtModified(v int64) *DescribeFlowJobResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetName(v string) *DescribeFlowJobResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetParamConf(v string) *DescribeFlowJobResponseBody {
	s.ParamConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetMode(v string) *DescribeFlowJobResponseBody {
	s.Mode = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetAdhoc(v string) *DescribeFlowJobResponseBody {
	s.Adhoc = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetRequestId(v string) *DescribeFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetLastInstanceId(v string) *DescribeFlowJobResponseBody {
	s.LastInstanceId = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetParams(v string) *DescribeFlowJobResponseBody {
	s.Params = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetMaxRetry(v int32) *DescribeFlowJobResponseBody {
	s.MaxRetry = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetMaxRunningTimeSec(v int64) *DescribeFlowJobResponseBody {
	s.MaxRunningTimeSec = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetEditLockDetail(v string) *DescribeFlowJobResponseBody {
	s.EditLockDetail = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetType(v string) *DescribeFlowJobResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetGmtCreate(v int64) *DescribeFlowJobResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetResourceList(v *DescribeFlowJobResponseBodyResourceList) *DescribeFlowJobResponseBody {
	s.ResourceList = v
	return s
}

func (s *DescribeFlowJobResponseBody) SetEnvConf(v string) *DescribeFlowJobResponseBody {
	s.EnvConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetMonitorConf(v string) *DescribeFlowJobResponseBody {
	s.MonitorConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetRetryInterval(v int64) *DescribeFlowJobResponseBody {
	s.RetryInterval = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetRunConf(v string) *DescribeFlowJobResponseBody {
	s.RunConf = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetId(v string) *DescribeFlowJobResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetRetryPolicy(v string) *DescribeFlowJobResponseBody {
	s.RetryPolicy = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetCustomVariables(v string) *DescribeFlowJobResponseBody {
	s.CustomVariables = &v
	return s
}

func (s *DescribeFlowJobResponseBody) SetAlertConf(v string) *DescribeFlowJobResponseBody {
	s.AlertConf = &v
	return s
}

type DescribeFlowJobResponseBodyResourceList struct {
	Resource []*DescribeFlowJobResponseBodyResourceListResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s DescribeFlowJobResponseBodyResourceList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobResponseBodyResourceList) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobResponseBodyResourceList) SetResource(v []*DescribeFlowJobResponseBodyResourceListResource) *DescribeFlowJobResponseBodyResourceList {
	s.Resource = v
	return s
}

type DescribeFlowJobResponseBodyResourceListResource struct {
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
}

func (s DescribeFlowJobResponseBodyResourceListResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobResponseBodyResourceListResource) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobResponseBodyResourceListResource) SetPath(v string) *DescribeFlowJobResponseBodyResourceListResource {
	s.Path = &v
	return s
}

func (s *DescribeFlowJobResponseBodyResourceListResource) SetAlias(v string) *DescribeFlowJobResponseBodyResourceListResource {
	s.Alias = &v
	return s
}

type DescribeFlowJobResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowJobResponse) SetHeaders(v map[string]*string) *DescribeFlowJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowJobResponse) SetBody(v *DescribeFlowJobResponseBody) *DescribeFlowJobResponse {
	s.Body = v
	return s
}

type DescribeFlowNodeInstanceRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowNodeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceRequest) SetProjectId(v string) *DescribeFlowNodeInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowNodeInstanceRequest) SetId(v string) *DescribeFlowNodeInstanceRequest {
	s.Id = &v
	return s
}

func (s *DescribeFlowNodeInstanceRequest) SetRegionId(v string) *DescribeFlowNodeInstanceRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowNodeInstanceResponseBody struct {
	FailAct          *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	EndTime          *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	NodeName         *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	GmtModified      *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	JobName          *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	ExternalStatus   *string `json:"ExternalStatus,omitempty" xml:"ExternalStatus,omitempty"`
	ParamConf        *string `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	FlowId           *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	ExternalInfo     *string `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty"`
	Retries          *int32  `json:"Retries,omitempty" xml:"Retries,omitempty"`
	ClusterName      *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	Adhoc            *bool   `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	JobParams        *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	HostName         *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	JobId            *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Mode             *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
	ExternalId       *string `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	ProjectId        *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	FlowInstanceId   *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	Duration         *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	MaxRetry         *string `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	ExternalSubId    *string `json:"ExternalSubId,omitempty" xml:"ExternalSubId,omitempty"`
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
	GmtCreate        *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	EnvConf          *string `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	JobType          *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	ExternalChildIds *string `json:"ExternalChildIds,omitempty" xml:"ExternalChildIds,omitempty"`
	MonitorConf      *string `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	RetryInterval    *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	RunConf          *string `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	Id               *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RetryPolicy      *string `json:"RetryPolicy,omitempty" xml:"RetryPolicy,omitempty"`
	Pending          *bool   `json:"Pending,omitempty" xml:"Pending,omitempty"`
}

func (s DescribeFlowNodeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceResponseBody) SetFailAct(v string) *DescribeFlowNodeInstanceResponseBody {
	s.FailAct = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetEndTime(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetNodeName(v string) *DescribeFlowNodeInstanceResponseBody {
	s.NodeName = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetGmtModified(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetJobName(v string) *DescribeFlowNodeInstanceResponseBody {
	s.JobName = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalStatus(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalStatus = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetParamConf(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ParamConf = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetFlowId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.FlowId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalInfo(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalInfo = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRetries(v int32) *DescribeFlowNodeInstanceResponseBody {
	s.Retries = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetClusterName(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ClusterName = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetAdhoc(v bool) *DescribeFlowNodeInstanceResponseBody {
	s.Adhoc = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetJobParams(v string) *DescribeFlowNodeInstanceResponseBody {
	s.JobParams = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetHostName(v string) *DescribeFlowNodeInstanceResponseBody {
	s.HostName = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetJobId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.JobId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetStatus(v string) *DescribeFlowNodeInstanceResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRequestId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetClusterId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetMode(v string) *DescribeFlowNodeInstanceResponseBody {
	s.Mode = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetProjectId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetStartTime(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetFlowInstanceId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.FlowInstanceId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetDuration(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.Duration = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetMaxRetry(v string) *DescribeFlowNodeInstanceResponseBody {
	s.MaxRetry = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalSubId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalSubId = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetType(v string) *DescribeFlowNodeInstanceResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetGmtCreate(v int64) *DescribeFlowNodeInstanceResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetEnvConf(v string) *DescribeFlowNodeInstanceResponseBody {
	s.EnvConf = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetJobType(v string) *DescribeFlowNodeInstanceResponseBody {
	s.JobType = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetExternalChildIds(v string) *DescribeFlowNodeInstanceResponseBody {
	s.ExternalChildIds = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetMonitorConf(v string) *DescribeFlowNodeInstanceResponseBody {
	s.MonitorConf = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRetryInterval(v string) *DescribeFlowNodeInstanceResponseBody {
	s.RetryInterval = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRunConf(v string) *DescribeFlowNodeInstanceResponseBody {
	s.RunConf = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetId(v string) *DescribeFlowNodeInstanceResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetRetryPolicy(v string) *DescribeFlowNodeInstanceResponseBody {
	s.RetryPolicy = &v
	return s
}

func (s *DescribeFlowNodeInstanceResponseBody) SetPending(v bool) *DescribeFlowNodeInstanceResponseBody {
	s.Pending = &v
	return s
}

type DescribeFlowNodeInstanceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowNodeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowNodeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceResponse) SetHeaders(v map[string]*string) *DescribeFlowNodeInstanceResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowNodeInstanceResponse) SetBody(v *DescribeFlowNodeInstanceResponseBody) *DescribeFlowNodeInstanceResponse {
	s.Body = v
	return s
}

type DescribeFlowNodeInstanceContainerLogRequest struct {
	Offset         *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	Length         *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	NodeInstanceId *string `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	AppId          *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	ContainerId    *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	LogName        *string `json:"LogName,omitempty" xml:"LogName,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowNodeInstanceContainerLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetOffset(v int32) *DescribeFlowNodeInstanceContainerLogRequest {
	s.Offset = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetLength(v int32) *DescribeFlowNodeInstanceContainerLogRequest {
	s.Length = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetNodeInstanceId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetAppId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.AppId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetContainerId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.ContainerId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetLogName(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.LogName = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetProjectId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogRequest) SetRegionId(v string) *DescribeFlowNodeInstanceContainerLogRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowNodeInstanceContainerLogResponseBody struct {
	RequestId *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LogEnd    *bool                                                      `json:"LogEnd,omitempty" xml:"LogEnd,omitempty"`
	LogEntrys *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys `json:"LogEntrys,omitempty" xml:"LogEntrys,omitempty" type:"Struct"`
}

func (s DescribeFlowNodeInstanceContainerLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBody) SetRequestId(v string) *DescribeFlowNodeInstanceContainerLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBody) SetLogEnd(v bool) *DescribeFlowNodeInstanceContainerLogResponseBody {
	s.LogEnd = &v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBody) SetLogEntrys(v *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys) *DescribeFlowNodeInstanceContainerLogResponseBody {
	s.LogEntrys = v
	return s
}

type DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys struct {
	LogEntry []*DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry `json:"LogEntry,omitempty" xml:"LogEntry,omitempty" type:"Repeated"`
}

func (s DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys) SetLogEntry(v []*DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry) *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrys {
	s.LogEntry = v
	return s
}

type DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry) SetContent(v string) *DescribeFlowNodeInstanceContainerLogResponseBodyLogEntrysLogEntry {
	s.Content = &v
	return s
}

type DescribeFlowNodeInstanceContainerLogResponse struct {
	Headers map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowNodeInstanceContainerLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowNodeInstanceContainerLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceContainerLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceContainerLogResponse) SetHeaders(v map[string]*string) *DescribeFlowNodeInstanceContainerLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowNodeInstanceContainerLogResponse) SetBody(v *DescribeFlowNodeInstanceContainerLogResponseBody) *DescribeFlowNodeInstanceContainerLogResponse {
	s.Body = v
	return s
}

type DescribeFlowNodeInstanceLauncherLogRequest struct {
	Start          *int32  `json:"Start,omitempty" xml:"Start,omitempty"`
	Lines          *int32  `json:"Lines,omitempty" xml:"Lines,omitempty"`
	Offset         *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	Length         *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reverse        *bool   `json:"Reverse,omitempty" xml:"Reverse,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime        *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	NodeInstanceId *string `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowNodeInstanceLauncherLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetStart(v int32) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Start = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetLines(v int32) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Lines = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetOffset(v int32) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Offset = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetLength(v int32) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Length = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetReverse(v bool) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.Reverse = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetStartTime(v int64) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetEndTime(v int64) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetNodeInstanceId(v string) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetProjectId(v string) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogRequest) SetRegionId(v string) *DescribeFlowNodeInstanceLauncherLogRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowNodeInstanceLauncherLogResponseBody struct {
	RequestId *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LogEnd    *bool                                                     `json:"LogEnd,omitempty" xml:"LogEnd,omitempty"`
	LogEntrys *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys `json:"LogEntrys,omitempty" xml:"LogEntrys,omitempty" type:"Struct"`
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBody) SetRequestId(v string) *DescribeFlowNodeInstanceLauncherLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBody) SetLogEnd(v bool) *DescribeFlowNodeInstanceLauncherLogResponseBody {
	s.LogEnd = &v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBody) SetLogEntrys(v *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys) *DescribeFlowNodeInstanceLauncherLogResponseBody {
	s.LogEntrys = v
	return s
}

type DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys struct {
	LogEntry []*DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry `json:"LogEntry,omitempty" xml:"LogEntry,omitempty" type:"Repeated"`
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys) SetLogEntry(v []*DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry) *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrys {
	s.LogEntry = v
	return s
}

type DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry) SetContent(v string) *DescribeFlowNodeInstanceLauncherLogResponseBodyLogEntrysLogEntry {
	s.Content = &v
	return s
}

type DescribeFlowNodeInstanceLauncherLogResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowNodeInstanceLauncherLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowNodeInstanceLauncherLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowNodeInstanceLauncherLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowNodeInstanceLauncherLogResponse) SetHeaders(v map[string]*string) *DescribeFlowNodeInstanceLauncherLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowNodeInstanceLauncherLogResponse) SetBody(v *DescribeFlowNodeInstanceLauncherLogResponseBody) *DescribeFlowNodeInstanceLauncherLogResponse {
	s.Body = v
	return s
}

type DescribeFlowProjectRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectRequest) SetProjectId(v string) *DescribeFlowProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowProjectRequest) SetRegionId(v string) *DescribeFlowProjectRequest {
	s.RegionId = &v
	return s
}

type DescribeFlowProjectResponseBody struct {
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectResponseBody) SetGmtCreate(v int64) *DescribeFlowProjectResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetDescription(v string) *DescribeFlowProjectResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetRequestId(v string) *DescribeFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetUserId(v string) *DescribeFlowProjectResponseBody {
	s.UserId = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetGmtModified(v int64) *DescribeFlowProjectResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetId(v string) *DescribeFlowProjectResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeFlowProjectResponseBody) SetName(v string) *DescribeFlowProjectResponseBody {
	s.Name = &v
	return s
}

type DescribeFlowProjectResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectResponse) SetHeaders(v map[string]*string) *DescribeFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowProjectResponse) SetBody(v *DescribeFlowProjectResponseBody) *DescribeFlowProjectResponse {
	s.Body = v
	return s
}

type DescribeFlowProjectClusterSettingRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s DescribeFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingRequest) SetProjectId(v string) *DescribeFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingRequest) SetRegionId(v string) *DescribeFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingRequest) SetClusterId(v string) *DescribeFlowProjectClusterSettingRequest {
	s.ClusterId = &v
	return s
}

type DescribeFlowProjectClusterSettingResponseBody struct {
	GmtCreate    *int64                                                  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	DefaultUser  *string                                                 `json:"DefaultUser,omitempty" xml:"DefaultUser,omitempty"`
	RequestId    *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DefaultQueue *string                                                 `json:"DefaultQueue,omitempty" xml:"DefaultQueue,omitempty"`
	ClusterId    *string                                                 `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ProjectId    *string                                                 `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	GmtModified  *int64                                                  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HostList     *DescribeFlowProjectClusterSettingResponseBodyHostList  `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
	UserList     *DescribeFlowProjectClusterSettingResponseBodyUserList  `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Struct"`
	K8sClusterId *string                                                 `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	QueueList    *DescribeFlowProjectClusterSettingResponseBodyQueueList `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Struct"`
}

func (s DescribeFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetGmtCreate(v int64) *DescribeFlowProjectClusterSettingResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetDefaultUser(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.DefaultUser = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetRequestId(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetDefaultQueue(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.DefaultQueue = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetClusterId(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetProjectId(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.ProjectId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetGmtModified(v int64) *DescribeFlowProjectClusterSettingResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetHostList(v *DescribeFlowProjectClusterSettingResponseBodyHostList) *DescribeFlowProjectClusterSettingResponseBody {
	s.HostList = v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetUserList(v *DescribeFlowProjectClusterSettingResponseBodyUserList) *DescribeFlowProjectClusterSettingResponseBody {
	s.UserList = v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetK8sClusterId(v string) *DescribeFlowProjectClusterSettingResponseBody {
	s.K8sClusterId = &v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponseBody) SetQueueList(v *DescribeFlowProjectClusterSettingResponseBodyQueueList) *DescribeFlowProjectClusterSettingResponseBody {
	s.QueueList = v
	return s
}

type DescribeFlowProjectClusterSettingResponseBodyHostList struct {
	Host []*string `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s DescribeFlowProjectClusterSettingResponseBodyHostList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponseBodyHostList) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponseBodyHostList) SetHost(v []*string) *DescribeFlowProjectClusterSettingResponseBodyHostList {
	s.Host = v
	return s
}

type DescribeFlowProjectClusterSettingResponseBodyUserList struct {
	User []*string `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s DescribeFlowProjectClusterSettingResponseBodyUserList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponseBodyUserList) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponseBodyUserList) SetUser(v []*string) *DescribeFlowProjectClusterSettingResponseBodyUserList {
	s.User = v
	return s
}

type DescribeFlowProjectClusterSettingResponseBodyQueueList struct {
	Queue []*string `json:"Queue,omitempty" xml:"Queue,omitempty" type:"Repeated"`
}

func (s DescribeFlowProjectClusterSettingResponseBodyQueueList) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponseBodyQueueList) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponseBodyQueueList) SetQueue(v []*string) *DescribeFlowProjectClusterSettingResponseBodyQueueList {
	s.Queue = v
	return s
}

type DescribeFlowProjectClusterSettingResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *DescribeFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *DescribeFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *DescribeFlowProjectClusterSettingResponse) SetBody(v *DescribeFlowProjectClusterSettingResponseBody) *DescribeFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type DescribeJobRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeJobRequest) SetResourceOwnerId(v int64) *DescribeJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeJobRequest) SetId(v string) *DescribeJobRequest {
	s.Id = &v
	return s
}

func (s *DescribeJobRequest) SetRegionId(v string) *DescribeJobRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeJobRequest) SetResourceGroupId(v string) *DescribeJobRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeJobResponseBody struct {
	FailAct       *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	RunParameter  *string `json:"RunParameter,omitempty" xml:"RunParameter,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RetryInterval *int32  `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	MaxRetry      *int32  `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeJobResponseBody) SetFailAct(v string) *DescribeJobResponseBody {
	s.FailAct = &v
	return s
}

func (s *DescribeJobResponseBody) SetType(v string) *DescribeJobResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeJobResponseBody) SetRunParameter(v string) *DescribeJobResponseBody {
	s.RunParameter = &v
	return s
}

func (s *DescribeJobResponseBody) SetRequestId(v string) *DescribeJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeJobResponseBody) SetRetryInterval(v int32) *DescribeJobResponseBody {
	s.RetryInterval = &v
	return s
}

func (s *DescribeJobResponseBody) SetId(v string) *DescribeJobResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeJobResponseBody) SetMaxRetry(v int32) *DescribeJobResponseBody {
	s.MaxRetry = &v
	return s
}

func (s *DescribeJobResponseBody) SetName(v string) *DescribeJobResponseBody {
	s.Name = &v
	return s
}

type DescribeJobResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeJobResponse) SetHeaders(v map[string]*string) *DescribeJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeJobResponse) SetBody(v *DescribeJobResponseBody) *DescribeJobResponse {
	s.Body = v
	return s
}

type DescribeLibraryDetailRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LibraryBizId    *string `json:"LibraryBizId,omitempty" xml:"LibraryBizId,omitempty"`
}

func (s DescribeLibraryDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLibraryDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeLibraryDetailRequest) SetResourceOwnerId(v int64) *DescribeLibraryDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLibraryDetailRequest) SetRegionId(v string) *DescribeLibraryDetailRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLibraryDetailRequest) SetLibraryBizId(v string) *DescribeLibraryDetailRequest {
	s.LibraryBizId = &v
	return s
}

type DescribeLibraryDetailResponseBody struct {
	SourceLocation *string `json:"SourceLocation,omitempty" xml:"SourceLocation,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Scope          *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	SourceType     *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	LibraryVersion *string `json:"LibraryVersion,omitempty" xml:"LibraryVersion,omitempty"`
	Properties     *string `json:"Properties,omitempty" xml:"Properties,omitempty"`
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DescribeLibraryDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLibraryDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLibraryDetailResponseBody) SetSourceLocation(v string) *DescribeLibraryDetailResponseBody {
	s.SourceLocation = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetType(v string) *DescribeLibraryDetailResponseBody {
	s.Type = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetRequestId(v string) *DescribeLibraryDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetScope(v string) *DescribeLibraryDetailResponseBody {
	s.Scope = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetUserId(v string) *DescribeLibraryDetailResponseBody {
	s.UserId = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetCreateTime(v int64) *DescribeLibraryDetailResponseBody {
	s.CreateTime = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetSourceType(v string) *DescribeLibraryDetailResponseBody {
	s.SourceType = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetLibraryVersion(v string) *DescribeLibraryDetailResponseBody {
	s.LibraryVersion = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetProperties(v string) *DescribeLibraryDetailResponseBody {
	s.Properties = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetBizId(v string) *DescribeLibraryDetailResponseBody {
	s.BizId = &v
	return s
}

func (s *DescribeLibraryDetailResponseBody) SetName(v string) *DescribeLibraryDetailResponseBody {
	s.Name = &v
	return s
}

type DescribeLibraryDetailResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLibraryDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLibraryDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLibraryDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeLibraryDetailResponse) SetHeaders(v map[string]*string) *DescribeLibraryDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeLibraryDetailResponse) SetBody(v *DescribeLibraryDetailResponseBody) *DescribeLibraryDetailResponse {
	s.Body = v
	return s
}

type DescribeLibraryInstallTaskDetailRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TaskBizId       *string `json:"TaskBizId,omitempty" xml:"TaskBizId,omitempty"`
}

func (s DescribeLibraryInstallTaskDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLibraryInstallTaskDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeLibraryInstallTaskDetailRequest) SetResourceOwnerId(v int64) *DescribeLibraryInstallTaskDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailRequest) SetRegionId(v string) *DescribeLibraryInstallTaskDetailRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailRequest) SetTaskBizId(v string) *DescribeLibraryInstallTaskDetailRequest {
	s.TaskBizId = &v
	return s
}

type DescribeLibraryInstallTaskDetailResponseBody struct {
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	EndTime      *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskGroupId  *string `json:"TaskGroupId,omitempty" xml:"TaskGroupId,omitempty"`
	ExecuteTime  *int64  `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	Hostname     *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	StartTime    *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskStatus   *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	LibraryBizId *string `json:"LibraryBizId,omitempty" xml:"LibraryBizId,omitempty"`
	TaskProcess  *int32  `json:"TaskProcess,omitempty" xml:"TaskProcess,omitempty"`
	ClusterBizId *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	TaskType     *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	Detail       *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
}

func (s DescribeLibraryInstallTaskDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLibraryInstallTaskDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetTaskId(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.TaskId = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetEndTime(v int64) *DescribeLibraryInstallTaskDetailResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetRequestId(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetTaskGroupId(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.TaskGroupId = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetExecuteTime(v int64) *DescribeLibraryInstallTaskDetailResponseBody {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetHostname(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.Hostname = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetStartTime(v int64) *DescribeLibraryInstallTaskDetailResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetTaskStatus(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.TaskStatus = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetLibraryBizId(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.LibraryBizId = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetTaskProcess(v int32) *DescribeLibraryInstallTaskDetailResponseBody {
	s.TaskProcess = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetClusterBizId(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.ClusterBizId = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetTaskType(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.TaskType = &v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponseBody) SetDetail(v string) *DescribeLibraryInstallTaskDetailResponseBody {
	s.Detail = &v
	return s
}

type DescribeLibraryInstallTaskDetailResponse struct {
	Headers map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeLibraryInstallTaskDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeLibraryInstallTaskDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLibraryInstallTaskDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeLibraryInstallTaskDetailResponse) SetHeaders(v map[string]*string) *DescribeLibraryInstallTaskDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeLibraryInstallTaskDetailResponse) SetBody(v *DescribeLibraryInstallTaskDetailResponseBody) *DescribeLibraryInstallTaskDetailResponse {
	s.Body = v
	return s
}

type DescribeMetaTablePreviewTaskRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TaskId          *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeMetaTablePreviewTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaTablePreviewTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetaTablePreviewTaskRequest) SetResourceOwnerId(v int64) *DescribeMetaTablePreviewTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskRequest) SetRegionId(v string) *DescribeMetaTablePreviewTaskRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskRequest) SetTaskId(v string) *DescribeMetaTablePreviewTaskRequest {
	s.TaskId = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskRequest) SetResourceGroupId(v string) *DescribeMetaTablePreviewTaskRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeMetaTablePreviewTaskResponseBody struct {
	TaskId      *string                                       `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	EndTime     *int64                                        `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId   *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TaskProcess *int32                                        `json:"TaskProcess,omitempty" xml:"TaskProcess,omitempty"`
	ExecuteTime *int64                                        `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	StartTime   *int64                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Data        *DescribeMetaTablePreviewTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	TaskStatus  *string                                       `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
}

func (s DescribeMetaTablePreviewTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaTablePreviewTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetaTablePreviewTaskResponseBody) SetTaskId(v string) *DescribeMetaTablePreviewTaskResponseBody {
	s.TaskId = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponseBody) SetEndTime(v int64) *DescribeMetaTablePreviewTaskResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponseBody) SetRequestId(v string) *DescribeMetaTablePreviewTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponseBody) SetTaskProcess(v int32) *DescribeMetaTablePreviewTaskResponseBody {
	s.TaskProcess = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponseBody) SetExecuteTime(v int64) *DescribeMetaTablePreviewTaskResponseBody {
	s.ExecuteTime = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponseBody) SetStartTime(v int64) *DescribeMetaTablePreviewTaskResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponseBody) SetData(v *DescribeMetaTablePreviewTaskResponseBodyData) *DescribeMetaTablePreviewTaskResponseBody {
	s.Data = v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponseBody) SetTaskStatus(v string) *DescribeMetaTablePreviewTaskResponseBody {
	s.TaskStatus = &v
	return s
}

type DescribeMetaTablePreviewTaskResponseBodyData struct {
	Rows    *DescribeMetaTablePreviewTaskResponseBodyDataRows    `json:"Rows,omitempty" xml:"Rows,omitempty" type:"Struct"`
	Headers *DescribeMetaTablePreviewTaskResponseBodyDataHeaders `json:"Headers,omitempty" xml:"Headers,omitempty" type:"Struct"`
}

func (s DescribeMetaTablePreviewTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaTablePreviewTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeMetaTablePreviewTaskResponseBodyData) SetRows(v *DescribeMetaTablePreviewTaskResponseBodyDataRows) *DescribeMetaTablePreviewTaskResponseBodyData {
	s.Rows = v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponseBodyData) SetHeaders(v *DescribeMetaTablePreviewTaskResponseBodyDataHeaders) *DescribeMetaTablePreviewTaskResponseBodyData {
	s.Headers = v
	return s
}

type DescribeMetaTablePreviewTaskResponseBodyDataRows struct {
	Row []*DescribeMetaTablePreviewTaskResponseBodyDataRowsRow `json:"Row,omitempty" xml:"Row,omitempty" type:"Repeated"`
}

func (s DescribeMetaTablePreviewTaskResponseBodyDataRows) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaTablePreviewTaskResponseBodyDataRows) GoString() string {
	return s.String()
}

func (s *DescribeMetaTablePreviewTaskResponseBodyDataRows) SetRow(v []*DescribeMetaTablePreviewTaskResponseBodyDataRowsRow) *DescribeMetaTablePreviewTaskResponseBodyDataRows {
	s.Row = v
	return s
}

type DescribeMetaTablePreviewTaskResponseBodyDataRowsRow struct {
	Columns *DescribeMetaTablePreviewTaskResponseBodyDataRowsRowColumns `json:"Columns,omitempty" xml:"Columns,omitempty" type:"Struct"`
}

func (s DescribeMetaTablePreviewTaskResponseBodyDataRowsRow) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaTablePreviewTaskResponseBodyDataRowsRow) GoString() string {
	return s.String()
}

func (s *DescribeMetaTablePreviewTaskResponseBodyDataRowsRow) SetColumns(v *DescribeMetaTablePreviewTaskResponseBodyDataRowsRowColumns) *DescribeMetaTablePreviewTaskResponseBodyDataRowsRow {
	s.Columns = v
	return s
}

type DescribeMetaTablePreviewTaskResponseBodyDataRowsRowColumns struct {
	Column []*string `json:"Column,omitempty" xml:"Column,omitempty" type:"Repeated"`
}

func (s DescribeMetaTablePreviewTaskResponseBodyDataRowsRowColumns) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaTablePreviewTaskResponseBodyDataRowsRowColumns) GoString() string {
	return s.String()
}

func (s *DescribeMetaTablePreviewTaskResponseBodyDataRowsRowColumns) SetColumn(v []*string) *DescribeMetaTablePreviewTaskResponseBodyDataRowsRowColumns {
	s.Column = v
	return s
}

type DescribeMetaTablePreviewTaskResponseBodyDataHeaders struct {
	Header []*string `json:"Header,omitempty" xml:"Header,omitempty" type:"Repeated"`
}

func (s DescribeMetaTablePreviewTaskResponseBodyDataHeaders) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaTablePreviewTaskResponseBodyDataHeaders) GoString() string {
	return s.String()
}

func (s *DescribeMetaTablePreviewTaskResponseBodyDataHeaders) SetHeader(v []*string) *DescribeMetaTablePreviewTaskResponseBodyDataHeaders {
	s.Header = v
	return s
}

type DescribeMetaTablePreviewTaskResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeMetaTablePreviewTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMetaTablePreviewTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetaTablePreviewTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetaTablePreviewTaskResponse) SetHeaders(v map[string]*string) *DescribeMetaTablePreviewTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetaTablePreviewTaskResponse) SetBody(v *DescribeMetaTablePreviewTaskResponseBody) *DescribeMetaTablePreviewTaskResponse {
	s.Body = v
	return s
}

type DescribeScalingActivityRequest struct {
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId         *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId       *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	ScalingActivityId *string `json:"ScalingActivityId,omitempty" xml:"ScalingActivityId,omitempty"`
}

func (s DescribeScalingActivityRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingActivityRequest) GoString() string {
	return s.String()
}

func (s *DescribeScalingActivityRequest) SetResourceOwnerId(v int64) *DescribeScalingActivityRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingActivityRequest) SetRegionId(v string) *DescribeScalingActivityRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingActivityRequest) SetClusterId(v string) *DescribeScalingActivityRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeScalingActivityRequest) SetHostGroupId(v string) *DescribeScalingActivityRequest {
	s.HostGroupId = &v
	return s
}

func (s *DescribeScalingActivityRequest) SetScalingActivityId(v string) *DescribeScalingActivityRequest {
	s.ScalingActivityId = &v
	return s
}

type DescribeScalingActivityResponseBody struct {
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Description   *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ExpectNum     *int32  `json:"ExpectNum,omitempty" xml:"ExpectNum,omitempty"`
	Cause         *string `json:"Cause,omitempty" xml:"Cause,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ScalingRuleId *string `json:"ScalingRuleId,omitempty" xml:"ScalingRuleId,omitempty"`
	Transition    *string `json:"Transition,omitempty" xml:"Transition,omitempty"`
	TotalCapacity *int32  `json:"TotalCapacity,omitempty" xml:"TotalCapacity,omitempty"`
	InstanceIds   *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	BizId         *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
}

func (s DescribeScalingActivityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingActivityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingActivityResponseBody) SetStatus(v string) *DescribeScalingActivityResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetDescription(v string) *DescribeScalingActivityResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetEndTime(v int64) *DescribeScalingActivityResponseBody {
	s.EndTime = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetRequestId(v string) *DescribeScalingActivityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetExpectNum(v int32) *DescribeScalingActivityResponseBody {
	s.ExpectNum = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetCause(v string) *DescribeScalingActivityResponseBody {
	s.Cause = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetStartTime(v int64) *DescribeScalingActivityResponseBody {
	s.StartTime = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetScalingRuleId(v string) *DescribeScalingActivityResponseBody {
	s.ScalingRuleId = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetTransition(v string) *DescribeScalingActivityResponseBody {
	s.Transition = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetTotalCapacity(v int32) *DescribeScalingActivityResponseBody {
	s.TotalCapacity = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetInstanceIds(v string) *DescribeScalingActivityResponseBody {
	s.InstanceIds = &v
	return s
}

func (s *DescribeScalingActivityResponseBody) SetBizId(v string) *DescribeScalingActivityResponseBody {
	s.BizId = &v
	return s
}

type DescribeScalingActivityResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeScalingActivityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScalingActivityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingActivityResponse) GoString() string {
	return s.String()
}

func (s *DescribeScalingActivityResponse) SetHeaders(v map[string]*string) *DescribeScalingActivityResponse {
	s.Headers = v
	return s
}

func (s *DescribeScalingActivityResponse) SetBody(v *DescribeScalingActivityResponseBody) *DescribeScalingActivityResponse {
	s.Body = v
	return s
}

type DescribeScalingCommonConfigRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeScalingCommonConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingCommonConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeScalingCommonConfigRequest) SetResourceOwnerId(v int64) *DescribeScalingCommonConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingCommonConfigRequest) SetRegionId(v string) *DescribeScalingCommonConfigRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingCommonConfigRequest) SetResourceGroupId(v string) *DescribeScalingCommonConfigRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeScalingCommonConfigResponseBody struct {
	AutoScalingHookHeartbeatDefaultTime        *int32  `json:"AutoScalingHookHeartbeatDefaultTime,omitempty" xml:"AutoScalingHookHeartbeatDefaultTime,omitempty"`
	AutoScalingRuleAlarmDelayLimit             *int32  `json:"AutoScalingRuleAlarmDelayLimit,omitempty" xml:"AutoScalingRuleAlarmDelayLimit,omitempty"`
	RequestId                                  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AutoScalingGroupMaxSizeLimit               *int32  `json:"AutoScalingGroupMaxSizeLimit,omitempty" xml:"AutoScalingGroupMaxSizeLimit,omitempty"`
	AutoScalingMNSScalingThreadSleepTime       *int64  `json:"AutoScalingMNSScalingThreadSleepTime,omitempty" xml:"AutoScalingMNSScalingThreadSleepTime,omitempty"`
	AutoScalingConfigDecommissionQueryInterval *int64  `json:"AutoScalingConfigDecommissionQueryInterval,omitempty" xml:"AutoScalingConfigDecommissionQueryInterval,omitempty"`
	AutoScalingCoolDownTime                    *int32  `json:"AutoScalingCoolDownTime,omitempty" xml:"AutoScalingCoolDownTime,omitempty"`
	AutoScalingRuleMinDelayLimit               *int32  `json:"AutoScalingRuleMinDelayLimit,omitempty" xml:"AutoScalingRuleMinDelayLimit,omitempty"`
	AutoScalingRuleAlarmSilentTime             *int32  `json:"AutoScalingRuleAlarmSilentTime,omitempty" xml:"AutoScalingRuleAlarmSilentTime,omitempty"`
	AutoScalingConfigSystemDiskSize            *int32  `json:"AutoScalingConfigSystemDiskSize,omitempty" xml:"AutoScalingConfigSystemDiskSize,omitempty"`
	AutoScalingGroupMinSizeLimit               *int32  `json:"AutoScalingGroupMinSizeLimit,omitempty" xml:"AutoScalingGroupMinSizeLimit,omitempty"`
}

func (s DescribeScalingCommonConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingCommonConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingHookHeartbeatDefaultTime(v int32) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingHookHeartbeatDefaultTime = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingRuleAlarmDelayLimit(v int32) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingRuleAlarmDelayLimit = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetRequestId(v string) *DescribeScalingCommonConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingGroupMaxSizeLimit(v int32) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingGroupMaxSizeLimit = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingMNSScalingThreadSleepTime(v int64) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingMNSScalingThreadSleepTime = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingConfigDecommissionQueryInterval(v int64) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingConfigDecommissionQueryInterval = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingCoolDownTime(v int32) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingCoolDownTime = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingRuleMinDelayLimit(v int32) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingRuleMinDelayLimit = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingRuleAlarmSilentTime(v int32) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingRuleAlarmSilentTime = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingConfigSystemDiskSize(v int32) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingConfigSystemDiskSize = &v
	return s
}

func (s *DescribeScalingCommonConfigResponseBody) SetAutoScalingGroupMinSizeLimit(v int32) *DescribeScalingCommonConfigResponseBody {
	s.AutoScalingGroupMinSizeLimit = &v
	return s
}

type DescribeScalingCommonConfigResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeScalingCommonConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScalingCommonConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingCommonConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeScalingCommonConfigResponse) SetHeaders(v map[string]*string) *DescribeScalingCommonConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeScalingCommonConfigResponse) SetBody(v *DescribeScalingCommonConfigResponseBody) *DescribeScalingCommonConfigResponse {
	s.Body = v
	return s
}

type DescribeScalingConfigItemV2Request struct {
	ResourceOwnerId     *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId     *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ScalingGroupBizId   *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ConfigItemType      *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	ScalingConfigItemId *string `json:"ScalingConfigItemId,omitempty" xml:"ScalingConfigItemId,omitempty"`
}

func (s DescribeScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *DescribeScalingConfigItemV2Request) SetResourceOwnerId(v int64) *DescribeScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetRegionId(v string) *DescribeScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetResourceGroupId(v string) *DescribeScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetScalingGroupBizId(v string) *DescribeScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetConfigItemType(v string) *DescribeScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *DescribeScalingConfigItemV2Request) SetScalingConfigItemId(v string) *DescribeScalingConfigItemV2Request {
	s.ScalingConfigItemId = &v
	return s
}

type DescribeScalingConfigItemV2ResponseBody struct {
	RequestId              *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScalingConfigItemBizId *string `json:"ScalingConfigItemBizId,omitempty" xml:"ScalingConfigItemBizId,omitempty"`
	ScalingGroupBizId      *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ConfigItemInformation  *string `json:"ConfigItemInformation,omitempty" xml:"ConfigItemInformation,omitempty"`
	ConfigItemType         *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
}

func (s DescribeScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetRequestId(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetScalingConfigItemBizId(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.ScalingConfigItemBizId = &v
	return s
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetScalingGroupBizId(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.ScalingGroupBizId = &v
	return s
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetConfigItemInformation(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.ConfigItemInformation = &v
	return s
}

func (s *DescribeScalingConfigItemV2ResponseBody) SetConfigItemType(v string) *DescribeScalingConfigItemV2ResponseBody {
	s.ConfigItemType = &v
	return s
}

type DescribeScalingConfigItemV2Response struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *DescribeScalingConfigItemV2Response) SetHeaders(v map[string]*string) *DescribeScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *DescribeScalingConfigItemV2Response) SetBody(v *DescribeScalingConfigItemV2ResponseBody) *DescribeScalingConfigItemV2Response {
	s.Body = v
	return s
}

type DescribeScalingGroupInstanceV2Request struct {
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	HostGroupBizId    *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
}

func (s DescribeScalingGroupInstanceV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2Request) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2Request) SetResourceOwnerId(v int64) *DescribeScalingGroupInstanceV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Request) SetRegionId(v string) *DescribeScalingGroupInstanceV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Request) SetResourceGroupId(v string) *DescribeScalingGroupInstanceV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Request) SetScalingGroupBizId(v string) *DescribeScalingGroupInstanceV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2Request) SetHostGroupBizId(v string) *DescribeScalingGroupInstanceV2Request {
	s.HostGroupBizId = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBody struct {
	ScalingConfig             *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig   `json:"ScalingConfig,omitempty" xml:"ScalingConfig,omitempty" type:"Struct"`
	ActiveRuleCategory        *string                                                    `json:"ActiveRuleCategory,omitempty" xml:"ActiveRuleCategory,omitempty"`
	RequestId                 *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TimeoutWithGrace          *int64                                                     `json:"TimeoutWithGrace,omitempty" xml:"TimeoutWithGrace,omitempty"`
	ScalingGroupId            *string                                                    `json:"ScalingGroupId,omitempty" xml:"ScalingGroupId,omitempty"`
	MaxSize                   *int32                                                     `json:"MaxSize,omitempty" xml:"MaxSize,omitempty"`
	MultiAvailablePolicyParam *string                                                    `json:"MultiAvailablePolicyParam,omitempty" xml:"MultiAvailablePolicyParam,omitempty"`
	MinSize                   *int32                                                     `json:"MinSize,omitempty" xml:"MinSize,omitempty"`
	DefaultCooldown           *int32                                                     `json:"DefaultCooldown,omitempty" xml:"DefaultCooldown,omitempty"`
	HostGroupId               *string                                                    `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	WithGrace                 *bool                                                      `json:"WithGrace,omitempty" xml:"WithGrace,omitempty"`
	MultiAvailablePolicy      *string                                                    `json:"MultiAvailablePolicy,omitempty" xml:"MultiAvailablePolicy,omitempty"`
	ScalingRuleList           *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList `json:"ScalingRuleList,omitempty" xml:"ScalingRuleList,omitempty" type:"Struct"`
}

func (s DescribeScalingGroupInstanceV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetScalingConfig(v *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) *DescribeScalingGroupInstanceV2ResponseBody {
	s.ScalingConfig = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetActiveRuleCategory(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.ActiveRuleCategory = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetRequestId(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetTimeoutWithGrace(v int64) *DescribeScalingGroupInstanceV2ResponseBody {
	s.TimeoutWithGrace = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetScalingGroupId(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.ScalingGroupId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetMaxSize(v int32) *DescribeScalingGroupInstanceV2ResponseBody {
	s.MaxSize = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetMultiAvailablePolicyParam(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.MultiAvailablePolicyParam = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetMinSize(v int32) *DescribeScalingGroupInstanceV2ResponseBody {
	s.MinSize = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetDefaultCooldown(v int32) *DescribeScalingGroupInstanceV2ResponseBody {
	s.DefaultCooldown = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetHostGroupId(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.HostGroupId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetWithGrace(v bool) *DescribeScalingGroupInstanceV2ResponseBody {
	s.WithGrace = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetMultiAvailablePolicy(v string) *DescribeScalingGroupInstanceV2ResponseBody {
	s.MultiAvailablePolicy = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBody) SetScalingRuleList(v *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList) *DescribeScalingGroupInstanceV2ResponseBody {
	s.ScalingRuleList = v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingConfig struct {
	DataDiskCategory *string                                                                  `json:"DataDiskCategory,omitempty" xml:"DataDiskCategory,omitempty"`
	DataDiskCount    *int32                                                                   `json:"DataDiskCount,omitempty" xml:"DataDiskCount,omitempty"`
	InstanceTypeList *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList `json:"InstanceTypeList,omitempty" xml:"InstanceTypeList,omitempty" type:"Struct"`
	PayType          *string                                                                  `json:"PayType,omitempty" xml:"PayType,omitempty"`
	DataDiskSize     *int32                                                                   `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	SysDiskCategory  *string                                                                  `json:"SysDiskCategory,omitempty" xml:"SysDiskCategory,omitempty"`
	SpotPriceLimits  *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits  `json:"SpotPriceLimits,omitempty" xml:"SpotPriceLimits,omitempty" type:"Struct"`
	SpotStrategy     *string                                                                  `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	SysDiskSize      *int32                                                                   `json:"SysDiskSize,omitempty" xml:"SysDiskSize,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetDataDiskCategory(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.DataDiskCategory = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetDataDiskCount(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.DataDiskCount = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetInstanceTypeList(v *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.InstanceTypeList = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetPayType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.PayType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetDataDiskSize(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.DataDiskSize = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetSysDiskCategory(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.SysDiskCategory = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetSpotPriceLimits(v *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.SpotPriceLimits = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetSpotStrategy(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.SpotStrategy = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig) SetSysDiskSize(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfig {
	s.SysDiskSize = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList struct {
	InstanceType []*string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty" type:"Repeated"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList) SetInstanceType(v []*string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigInstanceTypeList {
	s.InstanceType = v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits struct {
	SpotPriceLimit []*DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit `json:"SpotPriceLimit,omitempty" xml:"SpotPriceLimit,omitempty" type:"Repeated"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits) SetSpotPriceLimit(v []*DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimits {
	s.SpotPriceLimit = v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit struct {
	PriceLimit   *float32 `json:"PriceLimit,omitempty" xml:"PriceLimit,omitempty"`
	InstanceType *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) SetPriceLimit(v float32) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit {
	s.PriceLimit = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit) SetInstanceType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingConfigSpotPriceLimitsSpotPriceLimit {
	s.InstanceType = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList struct {
	ScalingRule []*DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule `json:"ScalingRule,omitempty" xml:"ScalingRule,omitempty" type:"Repeated"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList) SetScalingRule(v []*DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleList {
	s.ScalingRule = v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule struct {
	CloudWatchTrigger    *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger `json:"CloudWatchTrigger,omitempty" xml:"CloudWatchTrigger,omitempty" type:"Struct"`
	Status               *string                                                                                `json:"Status,omitempty" xml:"Status,omitempty"`
	AdjustmentType       *string                                                                                `json:"AdjustmentType,omitempty" xml:"AdjustmentType,omitempty"`
	RecurrenceValue      *string                                                                                `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
	RecurrenceType       *string                                                                                `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	TimeoutWithGrace     *int64                                                                                 `json:"TimeoutWithGrace,omitempty" xml:"TimeoutWithGrace,omitempty"`
	RecurrenceEndTime    *string                                                                                `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	RuleName             *string                                                                                `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	ScalingGroupId       *int64                                                                                 `json:"ScalingGroupId,omitempty" xml:"ScalingGroupId,omitempty"`
	RuleCategory         *string                                                                                `json:"RuleCategory,omitempty" xml:"RuleCategory,omitempty"`
	LaunchExpirationTime *int32                                                                                 `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	Cooldown             *int32                                                                                 `json:"Cooldown,omitempty" xml:"Cooldown,omitempty"`
	AdjustmentValue      *int32                                                                                 `json:"AdjustmentValue,omitempty" xml:"AdjustmentValue,omitempty"`
	SchedulerTrigger     *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger  `json:"SchedulerTrigger,omitempty" xml:"SchedulerTrigger,omitempty" type:"Struct"`
	LaunchTime           *string                                                                                `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
	WithGrace            *bool                                                                                  `json:"WithGrace,omitempty" xml:"WithGrace,omitempty"`
	EssScalingRuleId     *string                                                                                `json:"EssScalingRuleId,omitempty" xml:"EssScalingRuleId,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetCloudWatchTrigger(v *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.CloudWatchTrigger = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetStatus(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.Status = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetAdjustmentType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.AdjustmentType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRecurrenceValue(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RecurrenceValue = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRecurrenceType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RecurrenceType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetTimeoutWithGrace(v int64) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.TimeoutWithGrace = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRecurrenceEndTime(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RecurrenceEndTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRuleName(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RuleName = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetScalingGroupId(v int64) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.ScalingGroupId = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetRuleCategory(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.RuleCategory = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetLaunchExpirationTime(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.LaunchExpirationTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetCooldown(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.Cooldown = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetAdjustmentValue(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.AdjustmentValue = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetSchedulerTrigger(v *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.SchedulerTrigger = v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetLaunchTime(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.LaunchTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetWithGrace(v bool) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.WithGrace = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule) SetEssScalingRuleId(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRule {
	s.EssScalingRuleId = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	MetricName         *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	EvaluationCount    *string `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	Unit               *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	MetricDisplayName  *string `json:"MetricDisplayName,omitempty" xml:"MetricDisplayName,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetComparisonOperator(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetMetricName(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.MetricName = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetEvaluationCount(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.EvaluationCount = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetUnit(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.Unit = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetMetricDisplayName(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.MetricDisplayName = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetThreshold(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.Threshold = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetPeriod(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.Period = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger) SetStatistics(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleCloudWatchTrigger {
	s.Statistics = &v
	return s
}

type DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger struct {
	LaunchExpirationTime *int32  `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	RecurrenceValue      *string `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
	RecurrenceType       *string `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	RecurrenceEndTime    *int64  `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	LaunchTime           *int64  `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetLaunchExpirationTime(v int32) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.LaunchExpirationTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetRecurrenceValue(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.RecurrenceValue = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetRecurrenceType(v string) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.RecurrenceType = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetRecurrenceEndTime(v int64) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.RecurrenceEndTime = &v
	return s
}

func (s *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger) SetLaunchTime(v int64) *DescribeScalingGroupInstanceV2ResponseBodyScalingRuleListScalingRuleSchedulerTrigger {
	s.LaunchTime = &v
	return s
}

type DescribeScalingGroupInstanceV2Response struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeScalingGroupInstanceV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScalingGroupInstanceV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupInstanceV2Response) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupInstanceV2Response) SetHeaders(v map[string]*string) *DescribeScalingGroupInstanceV2Response {
	s.Headers = v
	return s
}

func (s *DescribeScalingGroupInstanceV2Response) SetBody(v *DescribeScalingGroupInstanceV2ResponseBody) *DescribeScalingGroupInstanceV2Response {
	s.Body = v
	return s
}

type DescribeScalingGroupV2Request struct {
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	HostGroupBizId    *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
}

func (s DescribeScalingGroupV2Request) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupV2Request) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupV2Request) SetResourceOwnerId(v int64) *DescribeScalingGroupV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingGroupV2Request) SetRegionId(v string) *DescribeScalingGroupV2Request {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingGroupV2Request) SetResourceGroupId(v string) *DescribeScalingGroupV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *DescribeScalingGroupV2Request) SetScalingGroupBizId(v string) *DescribeScalingGroupV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *DescribeScalingGroupV2Request) SetHostGroupBizId(v string) *DescribeScalingGroupV2Request {
	s.HostGroupBizId = &v
	return s
}

type DescribeScalingGroupV2ResponseBody struct {
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	HostGroupBizId *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ConfigState    *string `json:"ConfigState,omitempty" xml:"ConfigState,omitempty"`
	ScalingInMode  *string `json:"ScalingInMode,omitempty" xml:"ScalingInMode,omitempty"`
	ScalingGroupId *string `json:"ScalingGroupId,omitempty" xml:"ScalingGroupId,omitempty"`
	ScalingMaxSize *int32  `json:"ScalingMaxSize,omitempty" xml:"ScalingMaxSize,omitempty"`
	ScalingMinSize *int32  `json:"ScalingMinSize,omitempty" xml:"ScalingMinSize,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ActiveStatus   *string `json:"ActiveStatus,omitempty" xml:"ActiveStatus,omitempty"`
}

func (s DescribeScalingGroupV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupV2ResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupV2ResponseBody) SetDescription(v string) *DescribeScalingGroupV2ResponseBody {
	s.Description = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetHostGroupBizId(v string) *DescribeScalingGroupV2ResponseBody {
	s.HostGroupBizId = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetRequestId(v string) *DescribeScalingGroupV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetConfigState(v string) *DescribeScalingGroupV2ResponseBody {
	s.ConfigState = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetScalingInMode(v string) *DescribeScalingGroupV2ResponseBody {
	s.ScalingInMode = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetScalingGroupId(v string) *DescribeScalingGroupV2ResponseBody {
	s.ScalingGroupId = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetScalingMaxSize(v int32) *DescribeScalingGroupV2ResponseBody {
	s.ScalingMaxSize = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetScalingMinSize(v int32) *DescribeScalingGroupV2ResponseBody {
	s.ScalingMinSize = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetName(v string) *DescribeScalingGroupV2ResponseBody {
	s.Name = &v
	return s
}

func (s *DescribeScalingGroupV2ResponseBody) SetActiveStatus(v string) *DescribeScalingGroupV2ResponseBody {
	s.ActiveStatus = &v
	return s
}

type DescribeScalingGroupV2Response struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeScalingGroupV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScalingGroupV2Response) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingGroupV2Response) GoString() string {
	return s.String()
}

func (s *DescribeScalingGroupV2Response) SetHeaders(v map[string]*string) *DescribeScalingGroupV2Response {
	s.Headers = v
	return s
}

func (s *DescribeScalingGroupV2Response) SetBody(v *DescribeScalingGroupV2ResponseBody) *DescribeScalingGroupV2Response {
	s.Body = v
	return s
}

type DescribeScalingRuleRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	ScalingRuleId   *string `json:"ScalingRuleId,omitempty" xml:"ScalingRuleId,omitempty"`
}

func (s DescribeScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *DescribeScalingRuleRequest) SetResourceOwnerId(v int64) *DescribeScalingRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeScalingRuleRequest) SetRegionId(v string) *DescribeScalingRuleRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeScalingRuleRequest) SetClusterId(v string) *DescribeScalingRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeScalingRuleRequest) SetHostGroupId(v string) *DescribeScalingRuleRequest {
	s.HostGroupId = &v
	return s
}

func (s *DescribeScalingRuleRequest) SetScalingRuleId(v string) *DescribeScalingRuleRequest {
	s.ScalingRuleId = &v
	return s
}

type DescribeScalingRuleResponseBody struct {
	Status            *string                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	TimeoutWithGrace  *int64                                            `json:"TimeoutWithGrace,omitempty" xml:"TimeoutWithGrace,omitempty"`
	RequestId         *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Cooldown          *int32                                            `json:"Cooldown,omitempty" xml:"Cooldown,omitempty"`
	CloudWatchTrigger *DescribeScalingRuleResponseBodyCloudWatchTrigger `json:"CloudWatchTrigger,omitempty" xml:"CloudWatchTrigger,omitempty" type:"Struct"`
	GmtModified       *string                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	AdjustmentType    *string                                           `json:"AdjustmentType,omitempty" xml:"AdjustmentType,omitempty"`
	GmtCreate         *string                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	AdjustmentValue   *int32                                            `json:"AdjustmentValue,omitempty" xml:"AdjustmentValue,omitempty"`
	SchedulerTrigger  *DescribeScalingRuleResponseBodySchedulerTrigger  `json:"SchedulerTrigger,omitempty" xml:"SchedulerTrigger,omitempty" type:"Struct"`
	WithGrace         *bool                                             `json:"WithGrace,omitempty" xml:"WithGrace,omitempty"`
	Id                *string                                           `json:"Id,omitempty" xml:"Id,omitempty"`
	RuleName          *string                                           `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	RuleCategory      *string                                           `json:"RuleCategory,omitempty" xml:"RuleCategory,omitempty"`
}

func (s DescribeScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeScalingRuleResponseBody) SetStatus(v string) *DescribeScalingRuleResponseBody {
	s.Status = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetTimeoutWithGrace(v int64) *DescribeScalingRuleResponseBody {
	s.TimeoutWithGrace = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetRequestId(v string) *DescribeScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetCooldown(v int32) *DescribeScalingRuleResponseBody {
	s.Cooldown = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetCloudWatchTrigger(v *DescribeScalingRuleResponseBodyCloudWatchTrigger) *DescribeScalingRuleResponseBody {
	s.CloudWatchTrigger = v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetGmtModified(v string) *DescribeScalingRuleResponseBody {
	s.GmtModified = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetAdjustmentType(v string) *DescribeScalingRuleResponseBody {
	s.AdjustmentType = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetGmtCreate(v string) *DescribeScalingRuleResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetAdjustmentValue(v int32) *DescribeScalingRuleResponseBody {
	s.AdjustmentValue = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetSchedulerTrigger(v *DescribeScalingRuleResponseBodySchedulerTrigger) *DescribeScalingRuleResponseBody {
	s.SchedulerTrigger = v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetWithGrace(v bool) *DescribeScalingRuleResponseBody {
	s.WithGrace = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetId(v string) *DescribeScalingRuleResponseBody {
	s.Id = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetRuleName(v string) *DescribeScalingRuleResponseBody {
	s.RuleName = &v
	return s
}

func (s *DescribeScalingRuleResponseBody) SetRuleCategory(v string) *DescribeScalingRuleResponseBody {
	s.RuleCategory = &v
	return s
}

type DescribeScalingRuleResponseBodyCloudWatchTrigger struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	MetricName         *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	EvaluationCount    *string `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	Unit               *string `json:"Unit,omitempty" xml:"Unit,omitempty"`
	MetricDisplayName  *string `json:"MetricDisplayName,omitempty" xml:"MetricDisplayName,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
}

func (s DescribeScalingRuleResponseBodyCloudWatchTrigger) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingRuleResponseBodyCloudWatchTrigger) GoString() string {
	return s.String()
}

func (s *DescribeScalingRuleResponseBodyCloudWatchTrigger) SetComparisonOperator(v string) *DescribeScalingRuleResponseBodyCloudWatchTrigger {
	s.ComparisonOperator = &v
	return s
}

func (s *DescribeScalingRuleResponseBodyCloudWatchTrigger) SetMetricName(v string) *DescribeScalingRuleResponseBodyCloudWatchTrigger {
	s.MetricName = &v
	return s
}

func (s *DescribeScalingRuleResponseBodyCloudWatchTrigger) SetEvaluationCount(v string) *DescribeScalingRuleResponseBodyCloudWatchTrigger {
	s.EvaluationCount = &v
	return s
}

func (s *DescribeScalingRuleResponseBodyCloudWatchTrigger) SetUnit(v string) *DescribeScalingRuleResponseBodyCloudWatchTrigger {
	s.Unit = &v
	return s
}

func (s *DescribeScalingRuleResponseBodyCloudWatchTrigger) SetMetricDisplayName(v string) *DescribeScalingRuleResponseBodyCloudWatchTrigger {
	s.MetricDisplayName = &v
	return s
}

func (s *DescribeScalingRuleResponseBodyCloudWatchTrigger) SetThreshold(v string) *DescribeScalingRuleResponseBodyCloudWatchTrigger {
	s.Threshold = &v
	return s
}

func (s *DescribeScalingRuleResponseBodyCloudWatchTrigger) SetPeriod(v int32) *DescribeScalingRuleResponseBodyCloudWatchTrigger {
	s.Period = &v
	return s
}

func (s *DescribeScalingRuleResponseBodyCloudWatchTrigger) SetStatistics(v string) *DescribeScalingRuleResponseBodyCloudWatchTrigger {
	s.Statistics = &v
	return s
}

type DescribeScalingRuleResponseBodySchedulerTrigger struct {
	LaunchExpirationTime *int32  `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	RecurrenceValue      *string `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
	RecurrenceType       *string `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	RecurrenceEndTime    *int64  `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	LaunchTime           *int64  `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
}

func (s DescribeScalingRuleResponseBodySchedulerTrigger) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingRuleResponseBodySchedulerTrigger) GoString() string {
	return s.String()
}

func (s *DescribeScalingRuleResponseBodySchedulerTrigger) SetLaunchExpirationTime(v int32) *DescribeScalingRuleResponseBodySchedulerTrigger {
	s.LaunchExpirationTime = &v
	return s
}

func (s *DescribeScalingRuleResponseBodySchedulerTrigger) SetRecurrenceValue(v string) *DescribeScalingRuleResponseBodySchedulerTrigger {
	s.RecurrenceValue = &v
	return s
}

func (s *DescribeScalingRuleResponseBodySchedulerTrigger) SetRecurrenceType(v string) *DescribeScalingRuleResponseBodySchedulerTrigger {
	s.RecurrenceType = &v
	return s
}

func (s *DescribeScalingRuleResponseBodySchedulerTrigger) SetRecurrenceEndTime(v int64) *DescribeScalingRuleResponseBodySchedulerTrigger {
	s.RecurrenceEndTime = &v
	return s
}

func (s *DescribeScalingRuleResponseBodySchedulerTrigger) SetLaunchTime(v int64) *DescribeScalingRuleResponseBodySchedulerTrigger {
	s.LaunchTime = &v
	return s
}

type DescribeScalingRuleResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *DescribeScalingRuleResponse) SetHeaders(v map[string]*string) *DescribeScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *DescribeScalingRuleResponse) SetBody(v *DescribeScalingRuleResponseBody) *DescribeScalingRuleResponse {
	s.Body = v
	return s
}

type DescribeSecurityGroupAttributeRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s DescribeSecurityGroupAttributeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeRequest) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeRequest) SetResourceOwnerId(v int64) *DescribeSecurityGroupAttributeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetRegionId(v string) *DescribeSecurityGroupAttributeRequest {
	s.RegionId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetClusterId(v string) *DescribeSecurityGroupAttributeRequest {
	s.ClusterId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeRequest) SetResourceGroupId(v string) *DescribeSecurityGroupAttributeRequest {
	s.ResourceGroupId = &v
	return s
}

type DescribeSecurityGroupAttributeResponseBody struct {
	RequestId                  *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AvailableGroupList         *DescribeSecurityGroupAttributeResponseBodyAvailableGroupList         `json:"AvailableGroupList,omitempty" xml:"AvailableGroupList,omitempty" type:"Struct"`
	SecurityGroupAttributeList *DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeList `json:"SecurityGroupAttributeList,omitempty" xml:"SecurityGroupAttributeList,omitempty" type:"Struct"`
}

func (s DescribeSecurityGroupAttributeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetRequestId(v string) *DescribeSecurityGroupAttributeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetAvailableGroupList(v *DescribeSecurityGroupAttributeResponseBodyAvailableGroupList) *DescribeSecurityGroupAttributeResponseBody {
	s.AvailableGroupList = v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBody) SetSecurityGroupAttributeList(v *DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeList) *DescribeSecurityGroupAttributeResponseBody {
	s.SecurityGroupAttributeList = v
	return s
}

type DescribeSecurityGroupAttributeResponseBodyAvailableGroupList struct {
	SecurityGroup []*DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup `json:"SecurityGroup,omitempty" xml:"SecurityGroup,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupAttributeResponseBodyAvailableGroupList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodyAvailableGroupList) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodyAvailableGroupList) SetSecurityGroup(v []*DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) *DescribeSecurityGroupAttributeResponseBodyAvailableGroupList {
	s.SecurityGroup = v
	return s
}

type DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup struct {
	VpcId                   *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupId         *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName       *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	EcsCount                *int32  `json:"EcsCount,omitempty" xml:"EcsCount,omitempty"`
	AvailableInstanceAmount *int32  `json:"AvailableInstanceAmount,omitempty" xml:"AvailableInstanceAmount,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) SetVpcId(v string) *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup {
	s.VpcId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) SetCreationTime(v string) *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup {
	s.CreationTime = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) SetDescription(v string) *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup {
	s.Description = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) SetSecurityGroupId(v string) *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) SetSecurityGroupName(v string) *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup {
	s.SecurityGroupName = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) SetEcsCount(v int32) *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup {
	s.EcsCount = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup) SetAvailableInstanceAmount(v int32) *DescribeSecurityGroupAttributeResponseBodyAvailableGroupListSecurityGroup {
	s.AvailableInstanceAmount = &v
	return s
}

type DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeList struct {
	SecurityGroupAttribute []*DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute `json:"SecurityGroupAttribute,omitempty" xml:"SecurityGroupAttribute,omitempty" type:"Repeated"`
}

func (s DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeList) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeList) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeList) SetSecurityGroupAttribute(v []*DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute) *DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeList {
	s.SecurityGroupAttribute = v
	return s
}

type DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute struct {
	BizContent *string `json:"BizContent,omitempty" xml:"BizContent,omitempty"`
	BizType    *string `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute) SetBizContent(v string) *DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute {
	s.BizContent = &v
	return s
}

func (s *DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute) SetBizType(v string) *DescribeSecurityGroupAttributeResponseBodySecurityGroupAttributeListSecurityGroupAttribute {
	s.BizType = &v
	return s
}

type DescribeSecurityGroupAttributeResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeSecurityGroupAttributeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeSecurityGroupAttributeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSecurityGroupAttributeResponse) GoString() string {
	return s.String()
}

func (s *DescribeSecurityGroupAttributeResponse) SetHeaders(v map[string]*string) *DescribeSecurityGroupAttributeResponse {
	s.Headers = v
	return s
}

func (s *DescribeSecurityGroupAttributeResponse) SetBody(v *DescribeSecurityGroupAttributeResponseBody) *DescribeSecurityGroupAttributeResponse {
	s.Body = v
	return s
}

type DetachAndReleaseClusterEniRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TargetClusterId *string `json:"TargetClusterId,omitempty" xml:"TargetClusterId,omitempty"`
	VswitchId       *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
}

func (s DetachAndReleaseClusterEniRequest) String() string {
	return tea.Prettify(s)
}

func (s DetachAndReleaseClusterEniRequest) GoString() string {
	return s.String()
}

func (s *DetachAndReleaseClusterEniRequest) SetResourceOwnerId(v int64) *DetachAndReleaseClusterEniRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DetachAndReleaseClusterEniRequest) SetRegionId(v string) *DetachAndReleaseClusterEniRequest {
	s.RegionId = &v
	return s
}

func (s *DetachAndReleaseClusterEniRequest) SetTargetClusterId(v string) *DetachAndReleaseClusterEniRequest {
	s.TargetClusterId = &v
	return s
}

func (s *DetachAndReleaseClusterEniRequest) SetVswitchId(v string) *DetachAndReleaseClusterEniRequest {
	s.VswitchId = &v
	return s
}

type DetachAndReleaseClusterEniResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DetachAndReleaseClusterEniResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetachAndReleaseClusterEniResponseBody) GoString() string {
	return s.String()
}

func (s *DetachAndReleaseClusterEniResponseBody) SetRequestId(v string) *DetachAndReleaseClusterEniResponseBody {
	s.RequestId = &v
	return s
}

type DetachAndReleaseClusterEniResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DetachAndReleaseClusterEniResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetachAndReleaseClusterEniResponse) String() string {
	return tea.Prettify(s)
}

func (s DetachAndReleaseClusterEniResponse) GoString() string {
	return s.String()
}

func (s *DetachAndReleaseClusterEniResponse) SetHeaders(v map[string]*string) *DetachAndReleaseClusterEniResponse {
	s.Headers = v
	return s
}

func (s *DetachAndReleaseClusterEniResponse) SetBody(v *DetachAndReleaseClusterEniResponseBody) *DetachAndReleaseClusterEniResponse {
	s.Body = v
	return s
}

type DiffFlowEntitySnapshotRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EntityType      *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	SrcRevision     *string `json:"SrcRevision,omitempty" xml:"SrcRevision,omitempty"`
	DstRevision     *string `json:"DstRevision,omitempty" xml:"DstRevision,omitempty"`
}

func (s DiffFlowEntitySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s DiffFlowEntitySnapshotRequest) GoString() string {
	return s.String()
}

func (s *DiffFlowEntitySnapshotRequest) SetResourceOwnerId(v int64) *DiffFlowEntitySnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DiffFlowEntitySnapshotRequest) SetRegionId(v string) *DiffFlowEntitySnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *DiffFlowEntitySnapshotRequest) SetEntityType(v string) *DiffFlowEntitySnapshotRequest {
	s.EntityType = &v
	return s
}

func (s *DiffFlowEntitySnapshotRequest) SetEntityId(v string) *DiffFlowEntitySnapshotRequest {
	s.EntityId = &v
	return s
}

func (s *DiffFlowEntitySnapshotRequest) SetSrcRevision(v string) *DiffFlowEntitySnapshotRequest {
	s.SrcRevision = &v
	return s
}

func (s *DiffFlowEntitySnapshotRequest) SetDstRevision(v string) *DiffFlowEntitySnapshotRequest {
	s.DstRevision = &v
	return s
}

type DiffFlowEntitySnapshotResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s DiffFlowEntitySnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DiffFlowEntitySnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *DiffFlowEntitySnapshotResponseBody) SetRequestId(v string) *DiffFlowEntitySnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *DiffFlowEntitySnapshotResponseBody) SetData(v string) *DiffFlowEntitySnapshotResponseBody {
	s.Data = &v
	return s
}

type DiffFlowEntitySnapshotResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DiffFlowEntitySnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DiffFlowEntitySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s DiffFlowEntitySnapshotResponse) GoString() string {
	return s.String()
}

func (s *DiffFlowEntitySnapshotResponse) SetHeaders(v map[string]*string) *DiffFlowEntitySnapshotResponse {
	s.Headers = v
	return s
}

func (s *DiffFlowEntitySnapshotResponse) SetBody(v *DiffFlowEntitySnapshotResponseBody) *DiffFlowEntitySnapshotResponse {
	s.Body = v
	return s
}

type DumpMetaDataSourceForOuterRequest struct {
	ResourceOwnerId  *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId         *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId        *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DumpAllDatabase  *bool     `json:"DumpAllDatabase,omitempty" xml:"DumpAllDatabase,omitempty"`
	DatabaseId       *string   `json:"DatabaseId,omitempty" xml:"DatabaseId,omitempty"`
	DumpAllTable     *bool     `json:"DumpAllTable,omitempty" xml:"DumpAllTable,omitempty"`
	TableId          *string   `json:"TableId,omitempty" xml:"TableId,omitempty"`
	DumpAllPartition *bool     `json:"DumpAllPartition,omitempty" xml:"DumpAllPartition,omitempty"`
	DumpLimit        *int32    `json:"DumpLimit,omitempty" xml:"DumpLimit,omitempty"`
	PartitionValues  []*string `json:"PartitionValues,omitempty" xml:"PartitionValues,omitempty" type:"Repeated"`
}

func (s DumpMetaDataSourceForOuterRequest) String() string {
	return tea.Prettify(s)
}

func (s DumpMetaDataSourceForOuterRequest) GoString() string {
	return s.String()
}

func (s *DumpMetaDataSourceForOuterRequest) SetResourceOwnerId(v int64) *DumpMetaDataSourceForOuterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetRegionId(v string) *DumpMetaDataSourceForOuterRequest {
	s.RegionId = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetClusterId(v string) *DumpMetaDataSourceForOuterRequest {
	s.ClusterId = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetDumpAllDatabase(v bool) *DumpMetaDataSourceForOuterRequest {
	s.DumpAllDatabase = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetDatabaseId(v string) *DumpMetaDataSourceForOuterRequest {
	s.DatabaseId = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetDumpAllTable(v bool) *DumpMetaDataSourceForOuterRequest {
	s.DumpAllTable = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetTableId(v string) *DumpMetaDataSourceForOuterRequest {
	s.TableId = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetDumpAllPartition(v bool) *DumpMetaDataSourceForOuterRequest {
	s.DumpAllPartition = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetDumpLimit(v int32) *DumpMetaDataSourceForOuterRequest {
	s.DumpLimit = &v
	return s
}

func (s *DumpMetaDataSourceForOuterRequest) SetPartitionValues(v []*string) *DumpMetaDataSourceForOuterRequest {
	s.PartitionValues = v
	return s
}

type DumpMetaDataSourceForOuterResponseBody struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DumpMetaDataSourceForOuterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DumpMetaDataSourceForOuterResponseBody) GoString() string {
	return s.String()
}

func (s *DumpMetaDataSourceForOuterResponseBody) SetTaskId(v string) *DumpMetaDataSourceForOuterResponseBody {
	s.TaskId = &v
	return s
}

func (s *DumpMetaDataSourceForOuterResponseBody) SetRequestId(v string) *DumpMetaDataSourceForOuterResponseBody {
	s.RequestId = &v
	return s
}

type DumpMetaDataSourceForOuterResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DumpMetaDataSourceForOuterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DumpMetaDataSourceForOuterResponse) String() string {
	return tea.Prettify(s)
}

func (s DumpMetaDataSourceForOuterResponse) GoString() string {
	return s.String()
}

func (s *DumpMetaDataSourceForOuterResponse) SetHeaders(v map[string]*string) *DumpMetaDataSourceForOuterResponse {
	s.Headers = v
	return s
}

func (s *DumpMetaDataSourceForOuterResponse) SetBody(v *DumpMetaDataSourceForOuterResponseBody) *DumpMetaDataSourceForOuterResponse {
	s.Body = v
	return s
}

type GetFlowEntityRelationGraphRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize     *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount       *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField      *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode       *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	EntityType      *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	EntityGroupId   *string `json:"EntityGroupId,omitempty" xml:"EntityGroupId,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Relationship    *string `json:"Relationship,omitempty" xml:"Relationship,omitempty"`
	Direction       *string `json:"Direction,omitempty" xml:"Direction,omitempty"`
}

func (s GetFlowEntityRelationGraphRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFlowEntityRelationGraphRequest) GoString() string {
	return s.String()
}

func (s *GetFlowEntityRelationGraphRequest) SetResourceOwnerId(v int64) *GetFlowEntityRelationGraphRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetRegionId(v string) *GetFlowEntityRelationGraphRequest {
	s.RegionId = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetLimit(v int32) *GetFlowEntityRelationGraphRequest {
	s.Limit = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetPageNumber(v int32) *GetFlowEntityRelationGraphRequest {
	s.PageNumber = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetPageSize(v int32) *GetFlowEntityRelationGraphRequest {
	s.PageSize = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetCurrentSize(v int32) *GetFlowEntityRelationGraphRequest {
	s.CurrentSize = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetPageCount(v int32) *GetFlowEntityRelationGraphRequest {
	s.PageCount = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetOrderField(v string) *GetFlowEntityRelationGraphRequest {
	s.OrderField = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetOrderMode(v string) *GetFlowEntityRelationGraphRequest {
	s.OrderMode = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetEntityType(v string) *GetFlowEntityRelationGraphRequest {
	s.EntityType = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetEntityGroupId(v string) *GetFlowEntityRelationGraphRequest {
	s.EntityGroupId = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetEntityId(v string) *GetFlowEntityRelationGraphRequest {
	s.EntityId = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetRelationship(v string) *GetFlowEntityRelationGraphRequest {
	s.Relationship = &v
	return s
}

func (s *GetFlowEntityRelationGraphRequest) SetDirection(v string) *GetFlowEntityRelationGraphRequest {
	s.Direction = &v
	return s
}

type GetFlowEntityRelationGraphResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s GetFlowEntityRelationGraphResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFlowEntityRelationGraphResponseBody) GoString() string {
	return s.String()
}

func (s *GetFlowEntityRelationGraphResponseBody) SetRequestId(v string) *GetFlowEntityRelationGraphResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFlowEntityRelationGraphResponseBody) SetData(v string) *GetFlowEntityRelationGraphResponseBody {
	s.Data = &v
	return s
}

type GetFlowEntityRelationGraphResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetFlowEntityRelationGraphResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFlowEntityRelationGraphResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFlowEntityRelationGraphResponse) GoString() string {
	return s.String()
}

func (s *GetFlowEntityRelationGraphResponse) SetHeaders(v map[string]*string) *GetFlowEntityRelationGraphResponse {
	s.Headers = v
	return s
}

func (s *GetFlowEntityRelationGraphResponse) SetBody(v *GetFlowEntityRelationGraphResponseBody) *GetFlowEntityRelationGraphResponse {
	s.Body = v
	return s
}

type GetHdfsCapacityStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
}

func (s GetHdfsCapacityStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHdfsCapacityStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetHdfsCapacityStatisticInfoRequest) SetResourceOwnerId(v int64) *GetHdfsCapacityStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoRequest) SetRegionId(v string) *GetHdfsCapacityStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoRequest) SetClusterId(v string) *GetHdfsCapacityStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoRequest) SetFromDatetime(v string) *GetHdfsCapacityStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoRequest) SetToDatetime(v string) *GetHdfsCapacityStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

type GetHdfsCapacityStatisticInfoResponseBody struct {
	RequestId        *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HdfsCapacityList *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityList `json:"HdfsCapacityList,omitempty" xml:"HdfsCapacityList,omitempty" type:"Struct"`
}

func (s GetHdfsCapacityStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHdfsCapacityStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetHdfsCapacityStatisticInfoResponseBody) SetRequestId(v string) *GetHdfsCapacityStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBody) SetHdfsCapacityList(v *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityList) *GetHdfsCapacityStatisticInfoResponseBody {
	s.HdfsCapacityList = v
	return s
}

type GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityList struct {
	ClusterStatHdfsCapacity []*GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity `json:"ClusterStatHdfsCapacity,omitempty" xml:"ClusterStatHdfsCapacity,omitempty" type:"Repeated"`
}

func (s GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityList) String() string {
	return tea.Prettify(s)
}

func (s GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityList) GoString() string {
	return s.String()
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityList) SetClusterStatHdfsCapacity(v []*GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityList {
	s.ClusterStatHdfsCapacity = v
	return s
}

type GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity struct {
	CapacityUsedNonDfs  *int64  `json:"CapacityUsedNonDfs,omitempty" xml:"CapacityUsedNonDfs,omitempty"`
	CapacityTotal       *int64  `json:"CapacityTotal,omitempty" xml:"CapacityTotal,omitempty"`
	CapacityTotalGB     *int64  `json:"CapacityTotalGB,omitempty" xml:"CapacityTotalGB,omitempty"`
	CapacityRemaining   *int64  `json:"CapacityRemaining,omitempty" xml:"CapacityRemaining,omitempty"`
	CapacityUsed        *int64  `json:"CapacityUsed,omitempty" xml:"CapacityUsed,omitempty"`
	ClusterBizId        *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	CapacityUsedGB      *int64  `json:"CapacityUsedGB,omitempty" xml:"CapacityUsedGB,omitempty"`
	DateTime            *string `json:"DateTime,omitempty" xml:"DateTime,omitempty"`
	CapacityRemainingGB *int64  `json:"CapacityRemainingGB,omitempty" xml:"CapacityRemainingGB,omitempty"`
}

func (s GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) String() string {
	return tea.Prettify(s)
}

func (s GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) GoString() string {
	return s.String()
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetCapacityUsedNonDfs(v int64) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.CapacityUsedNonDfs = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetCapacityTotal(v int64) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.CapacityTotal = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetCapacityTotalGB(v int64) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.CapacityTotalGB = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetCapacityRemaining(v int64) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.CapacityRemaining = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetCapacityUsed(v int64) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.CapacityUsed = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetClusterBizId(v string) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.ClusterBizId = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetCapacityUsedGB(v int64) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.CapacityUsedGB = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetDateTime(v string) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.DateTime = &v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity) SetCapacityRemainingGB(v int64) *GetHdfsCapacityStatisticInfoResponseBodyHdfsCapacityListClusterStatHdfsCapacity {
	s.CapacityRemainingGB = &v
	return s
}

type GetHdfsCapacityStatisticInfoResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetHdfsCapacityStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetHdfsCapacityStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHdfsCapacityStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetHdfsCapacityStatisticInfoResponse) SetHeaders(v map[string]*string) *GetHdfsCapacityStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetHdfsCapacityStatisticInfoResponse) SetBody(v *GetHdfsCapacityStatisticInfoResponseBody) *GetHdfsCapacityStatisticInfoResponse {
	s.Body = v
	return s
}

type GetJobInputStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s GetJobInputStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJobInputStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetJobInputStatisticInfoRequest) SetResourceOwnerId(v int64) *GetJobInputStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetJobInputStatisticInfoRequest) SetRegionId(v string) *GetJobInputStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetJobInputStatisticInfoRequest) SetClusterId(v string) *GetJobInputStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetJobInputStatisticInfoRequest) SetFromDatetime(v string) *GetJobInputStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetJobInputStatisticInfoRequest) SetToDatetime(v string) *GetJobInputStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

func (s *GetJobInputStatisticInfoRequest) SetPageSize(v int32) *GetJobInputStatisticInfoRequest {
	s.PageSize = &v
	return s
}

func (s *GetJobInputStatisticInfoRequest) SetPageNumber(v int32) *GetJobInputStatisticInfoRequest {
	s.PageNumber = &v
	return s
}

type GetJobInputStatisticInfoResponseBody struct {
	PageSize     *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	JobInputList *GetJobInputStatisticInfoResponseBodyJobInputList `json:"JobInputList,omitempty" xml:"JobInputList,omitempty" type:"Struct"`
	Total        *int32                                            `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetJobInputStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJobInputStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetJobInputStatisticInfoResponseBody) SetPageSize(v int32) *GetJobInputStatisticInfoResponseBody {
	s.PageSize = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBody) SetRequestId(v string) *GetJobInputStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBody) SetPageNumber(v int32) *GetJobInputStatisticInfoResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBody) SetJobInputList(v *GetJobInputStatisticInfoResponseBodyJobInputList) *GetJobInputStatisticInfoResponseBody {
	s.JobInputList = v
	return s
}

func (s *GetJobInputStatisticInfoResponseBody) SetTotal(v int32) *GetJobInputStatisticInfoResponseBody {
	s.Total = &v
	return s
}

type GetJobInputStatisticInfoResponseBodyJobInputList struct {
	ClusterStatJobInput []*GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput `json:"ClusterStatJobInput,omitempty" xml:"ClusterStatJobInput,omitempty" type:"Repeated"`
}

func (s GetJobInputStatisticInfoResponseBodyJobInputList) String() string {
	return tea.Prettify(s)
}

func (s GetJobInputStatisticInfoResponseBodyJobInputList) GoString() string {
	return s.String()
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputList) SetClusterStatJobInput(v []*GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) *GetJobInputStatisticInfoResponseBodyJobInputList {
	s.ClusterStatJobInput = v
	return s
}

type GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput struct {
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	FinishTime    *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	BytesInput    *int64  `json:"BytesInput,omitempty" xml:"BytesInput,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	User          *string `json:"User,omitempty" xml:"User,omitempty"`
	Queue         *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
}

func (s GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) String() string {
	return tea.Prettify(s)
}

func (s GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) GoString() string {
	return s.String()
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetStartTime(v int64) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.StartTime = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetFinishTime(v int64) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.FinishTime = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetState(v string) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.State = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetBytesInput(v int64) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.BytesInput = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetJobId(v string) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.JobId = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetUser(v string) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.User = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetQueue(v string) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.Queue = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetName(v string) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.Name = &v
	return s
}

func (s *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput) SetApplicationId(v string) *GetJobInputStatisticInfoResponseBodyJobInputListClusterStatJobInput {
	s.ApplicationId = &v
	return s
}

type GetJobInputStatisticInfoResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetJobInputStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetJobInputStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJobInputStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetJobInputStatisticInfoResponse) SetHeaders(v map[string]*string) *GetJobInputStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetJobInputStatisticInfoResponse) SetBody(v *GetJobInputStatisticInfoResponseBody) *GetJobInputStatisticInfoResponse {
	s.Body = v
	return s
}

type GetJobOutputStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s GetJobOutputStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJobOutputStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetJobOutputStatisticInfoRequest) SetResourceOwnerId(v int64) *GetJobOutputStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetJobOutputStatisticInfoRequest) SetRegionId(v string) *GetJobOutputStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetJobOutputStatisticInfoRequest) SetClusterId(v string) *GetJobOutputStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetJobOutputStatisticInfoRequest) SetFromDatetime(v string) *GetJobOutputStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetJobOutputStatisticInfoRequest) SetToDatetime(v string) *GetJobOutputStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

func (s *GetJobOutputStatisticInfoRequest) SetPageSize(v int32) *GetJobOutputStatisticInfoRequest {
	s.PageSize = &v
	return s
}

func (s *GetJobOutputStatisticInfoRequest) SetPageNumber(v int32) *GetJobOutputStatisticInfoRequest {
	s.PageNumber = &v
	return s
}

type GetJobOutputStatisticInfoResponseBody struct {
	PageSize      *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber    *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total         *int32                                              `json:"Total,omitempty" xml:"Total,omitempty"`
	JobOutputList *GetJobOutputStatisticInfoResponseBodyJobOutputList `json:"JobOutputList,omitempty" xml:"JobOutputList,omitempty" type:"Struct"`
}

func (s GetJobOutputStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJobOutputStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetJobOutputStatisticInfoResponseBody) SetPageSize(v int32) *GetJobOutputStatisticInfoResponseBody {
	s.PageSize = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBody) SetRequestId(v string) *GetJobOutputStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBody) SetPageNumber(v int32) *GetJobOutputStatisticInfoResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBody) SetTotal(v int32) *GetJobOutputStatisticInfoResponseBody {
	s.Total = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBody) SetJobOutputList(v *GetJobOutputStatisticInfoResponseBodyJobOutputList) *GetJobOutputStatisticInfoResponseBody {
	s.JobOutputList = v
	return s
}

type GetJobOutputStatisticInfoResponseBodyJobOutputList struct {
	ClusterStatJobOutput []*GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput `json:"ClusterStatJobOutput,omitempty" xml:"ClusterStatJobOutput,omitempty" type:"Repeated"`
}

func (s GetJobOutputStatisticInfoResponseBodyJobOutputList) String() string {
	return tea.Prettify(s)
}

func (s GetJobOutputStatisticInfoResponseBodyJobOutputList) GoString() string {
	return s.String()
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputList) SetClusterStatJobOutput(v []*GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) *GetJobOutputStatisticInfoResponseBodyJobOutputList {
	s.ClusterStatJobOutput = v
	return s
}

type GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput struct {
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	FinishTime    *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	User          *string `json:"User,omitempty" xml:"User,omitempty"`
	Queue         *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
	BytesOutput   *int64  `json:"BytesOutput,omitempty" xml:"BytesOutput,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
}

func (s GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) String() string {
	return tea.Prettify(s)
}

func (s GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) GoString() string {
	return s.String()
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetStartTime(v int64) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.StartTime = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetFinishTime(v int64) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.FinishTime = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetState(v string) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.State = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetJobId(v string) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.JobId = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetUser(v string) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.User = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetQueue(v string) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.Queue = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetBytesOutput(v int64) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.BytesOutput = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetName(v string) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.Name = &v
	return s
}

func (s *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput) SetApplicationId(v string) *GetJobOutputStatisticInfoResponseBodyJobOutputListClusterStatJobOutput {
	s.ApplicationId = &v
	return s
}

type GetJobOutputStatisticInfoResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetJobOutputStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetJobOutputStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJobOutputStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetJobOutputStatisticInfoResponse) SetHeaders(v map[string]*string) *GetJobOutputStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetJobOutputStatisticInfoResponse) SetBody(v *GetJobOutputStatisticInfoResponseBody) *GetJobOutputStatisticInfoResponse {
	s.Body = v
	return s
}

type GetJobRunningTimeStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s GetJobRunningTimeStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJobRunningTimeStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetJobRunningTimeStatisticInfoRequest) SetResourceOwnerId(v int64) *GetJobRunningTimeStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoRequest) SetRegionId(v string) *GetJobRunningTimeStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoRequest) SetClusterId(v string) *GetJobRunningTimeStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoRequest) SetFromDatetime(v string) *GetJobRunningTimeStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoRequest) SetToDatetime(v string) *GetJobRunningTimeStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoRequest) SetPageSize(v int32) *GetJobRunningTimeStatisticInfoRequest {
	s.PageSize = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoRequest) SetPageNumber(v int32) *GetJobRunningTimeStatisticInfoRequest {
	s.PageNumber = &v
	return s
}

type GetJobRunningTimeStatisticInfoResponseBody struct {
	PageSize        *int32                                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId       *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber      *int32                                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total           *int32                                                     `json:"Total,omitempty" xml:"Total,omitempty"`
	RunningTimeList *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeList `json:"RunningTimeList,omitempty" xml:"RunningTimeList,omitempty" type:"Struct"`
}

func (s GetJobRunningTimeStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJobRunningTimeStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetJobRunningTimeStatisticInfoResponseBody) SetPageSize(v int32) *GetJobRunningTimeStatisticInfoResponseBody {
	s.PageSize = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBody) SetRequestId(v string) *GetJobRunningTimeStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBody) SetPageNumber(v int32) *GetJobRunningTimeStatisticInfoResponseBody {
	s.PageNumber = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBody) SetTotal(v int32) *GetJobRunningTimeStatisticInfoResponseBody {
	s.Total = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBody) SetRunningTimeList(v *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeList) *GetJobRunningTimeStatisticInfoResponseBody {
	s.RunningTimeList = v
	return s
}

type GetJobRunningTimeStatisticInfoResponseBodyRunningTimeList struct {
	ClusterStatJobRunningTime []*GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime `json:"ClusterStatJobRunningTime,omitempty" xml:"ClusterStatJobRunningTime,omitempty" type:"Repeated"`
}

func (s GetJobRunningTimeStatisticInfoResponseBodyRunningTimeList) String() string {
	return tea.Prettify(s)
}

func (s GetJobRunningTimeStatisticInfoResponseBodyRunningTimeList) GoString() string {
	return s.String()
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeList) SetClusterStatJobRunningTime(v []*GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeList {
	s.ClusterStatJobRunningTime = v
	return s
}

type GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime struct {
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	RunningTime   *int64  `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	FinishTime    *int64  `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	User          *string `json:"User,omitempty" xml:"User,omitempty"`
	Queue         *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
}

func (s GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) String() string {
	return tea.Prettify(s)
}

func (s GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) GoString() string {
	return s.String()
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetStartTime(v int64) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.StartTime = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetRunningTime(v int64) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.RunningTime = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetFinishTime(v int64) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.FinishTime = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetState(v string) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.State = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetJobId(v string) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.JobId = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetUser(v string) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.User = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetQueue(v string) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.Queue = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetName(v string) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.Name = &v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime) SetApplicationId(v string) *GetJobRunningTimeStatisticInfoResponseBodyRunningTimeListClusterStatJobRunningTime {
	s.ApplicationId = &v
	return s
}

type GetJobRunningTimeStatisticInfoResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetJobRunningTimeStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetJobRunningTimeStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJobRunningTimeStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetJobRunningTimeStatisticInfoResponse) SetHeaders(v map[string]*string) *GetJobRunningTimeStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetJobRunningTimeStatisticInfoResponse) SetBody(v *GetJobRunningTimeStatisticInfoResponseBody) *GetJobRunningTimeStatisticInfoResponse {
	s.Body = v
	return s
}

type GetQueueInputStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
}

func (s GetQueueInputStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueueInputStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetQueueInputStatisticInfoRequest) SetResourceOwnerId(v int64) *GetQueueInputStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetQueueInputStatisticInfoRequest) SetRegionId(v string) *GetQueueInputStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetQueueInputStatisticInfoRequest) SetClusterId(v string) *GetQueueInputStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetQueueInputStatisticInfoRequest) SetFromDatetime(v string) *GetQueueInputStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetQueueInputStatisticInfoRequest) SetToDatetime(v string) *GetQueueInputStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

type GetQueueInputStatisticInfoResponseBody struct {
	RequestId      *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	QueueInputList *GetQueueInputStatisticInfoResponseBodyQueueInputList `json:"QueueInputList,omitempty" xml:"QueueInputList,omitempty" type:"Struct"`
}

func (s GetQueueInputStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueueInputStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueueInputStatisticInfoResponseBody) SetRequestId(v string) *GetQueueInputStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueueInputStatisticInfoResponseBody) SetQueueInputList(v *GetQueueInputStatisticInfoResponseBodyQueueInputList) *GetQueueInputStatisticInfoResponseBody {
	s.QueueInputList = v
	return s
}

type GetQueueInputStatisticInfoResponseBodyQueueInputList struct {
	ClusterStatQueueInput []*GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput `json:"ClusterStatQueueInput,omitempty" xml:"ClusterStatQueueInput,omitempty" type:"Repeated"`
}

func (s GetQueueInputStatisticInfoResponseBodyQueueInputList) String() string {
	return tea.Prettify(s)
}

func (s GetQueueInputStatisticInfoResponseBodyQueueInputList) GoString() string {
	return s.String()
}

func (s *GetQueueInputStatisticInfoResponseBodyQueueInputList) SetClusterStatQueueInput(v []*GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput) *GetQueueInputStatisticInfoResponseBodyQueueInputList {
	s.ClusterStatQueueInput = v
	return s
}

type GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput struct {
	BytesInput *int64  `json:"BytesInput,omitempty" xml:"BytesInput,omitempty"`
	Queue      *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput) String() string {
	return tea.Prettify(s)
}

func (s GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput) GoString() string {
	return s.String()
}

func (s *GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput) SetBytesInput(v int64) *GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput {
	s.BytesInput = &v
	return s
}

func (s *GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput) SetQueue(v string) *GetQueueInputStatisticInfoResponseBodyQueueInputListClusterStatQueueInput {
	s.Queue = &v
	return s
}

type GetQueueInputStatisticInfoResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetQueueInputStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueueInputStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueueInputStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetQueueInputStatisticInfoResponse) SetHeaders(v map[string]*string) *GetQueueInputStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetQueueInputStatisticInfoResponse) SetBody(v *GetQueueInputStatisticInfoResponseBody) *GetQueueInputStatisticInfoResponse {
	s.Body = v
	return s
}

type GetQueueOutputStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
}

func (s GetQueueOutputStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueueOutputStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetQueueOutputStatisticInfoRequest) SetResourceOwnerId(v int64) *GetQueueOutputStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetQueueOutputStatisticInfoRequest) SetRegionId(v string) *GetQueueOutputStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetQueueOutputStatisticInfoRequest) SetClusterId(v string) *GetQueueOutputStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetQueueOutputStatisticInfoRequest) SetFromDatetime(v string) *GetQueueOutputStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetQueueOutputStatisticInfoRequest) SetToDatetime(v string) *GetQueueOutputStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

type GetQueueOutputStatisticInfoResponseBody struct {
	RequestId       *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	QueueOutputList *GetQueueOutputStatisticInfoResponseBodyQueueOutputList `json:"QueueOutputList,omitempty" xml:"QueueOutputList,omitempty" type:"Struct"`
}

func (s GetQueueOutputStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueueOutputStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueueOutputStatisticInfoResponseBody) SetRequestId(v string) *GetQueueOutputStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueueOutputStatisticInfoResponseBody) SetQueueOutputList(v *GetQueueOutputStatisticInfoResponseBodyQueueOutputList) *GetQueueOutputStatisticInfoResponseBody {
	s.QueueOutputList = v
	return s
}

type GetQueueOutputStatisticInfoResponseBodyQueueOutputList struct {
	ClusterStatQueueOutput []*GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput `json:"ClusterStatQueueOutput,omitempty" xml:"ClusterStatQueueOutput,omitempty" type:"Repeated"`
}

func (s GetQueueOutputStatisticInfoResponseBodyQueueOutputList) String() string {
	return tea.Prettify(s)
}

func (s GetQueueOutputStatisticInfoResponseBodyQueueOutputList) GoString() string {
	return s.String()
}

func (s *GetQueueOutputStatisticInfoResponseBodyQueueOutputList) SetClusterStatQueueOutput(v []*GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput) *GetQueueOutputStatisticInfoResponseBodyQueueOutputList {
	s.ClusterStatQueueOutput = v
	return s
}

type GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput struct {
	Queue       *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
	BytesOutput *int64  `json:"BytesOutput,omitempty" xml:"BytesOutput,omitempty"`
}

func (s GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput) String() string {
	return tea.Prettify(s)
}

func (s GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput) GoString() string {
	return s.String()
}

func (s *GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput) SetQueue(v string) *GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput {
	s.Queue = &v
	return s
}

func (s *GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput) SetBytesOutput(v int64) *GetQueueOutputStatisticInfoResponseBodyQueueOutputListClusterStatQueueOutput {
	s.BytesOutput = &v
	return s
}

type GetQueueOutputStatisticInfoResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetQueueOutputStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueueOutputStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueueOutputStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetQueueOutputStatisticInfoResponse) SetHeaders(v map[string]*string) *GetQueueOutputStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetQueueOutputStatisticInfoResponse) SetBody(v *GetQueueOutputStatisticInfoResponseBody) *GetQueueOutputStatisticInfoResponse {
	s.Body = v
	return s
}

type GetQueueSubmissionStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
	ApplicationType *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty"`
	FinalStatus     *string `json:"FinalStatus,omitempty" xml:"FinalStatus,omitempty"`
}

func (s GetQueueSubmissionStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueueSubmissionStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetQueueSubmissionStatisticInfoRequest) SetResourceOwnerId(v int64) *GetQueueSubmissionStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetQueueSubmissionStatisticInfoRequest) SetRegionId(v string) *GetQueueSubmissionStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetQueueSubmissionStatisticInfoRequest) SetClusterId(v string) *GetQueueSubmissionStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetQueueSubmissionStatisticInfoRequest) SetFromDatetime(v string) *GetQueueSubmissionStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetQueueSubmissionStatisticInfoRequest) SetToDatetime(v string) *GetQueueSubmissionStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

func (s *GetQueueSubmissionStatisticInfoRequest) SetApplicationType(v string) *GetQueueSubmissionStatisticInfoRequest {
	s.ApplicationType = &v
	return s
}

func (s *GetQueueSubmissionStatisticInfoRequest) SetFinalStatus(v string) *GetQueueSubmissionStatisticInfoRequest {
	s.FinalStatus = &v
	return s
}

type GetQueueSubmissionStatisticInfoResponseBody struct {
	RequestId           *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	QueueSubmissionList *GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionList `json:"QueueSubmissionList,omitempty" xml:"QueueSubmissionList,omitempty" type:"Struct"`
}

func (s GetQueueSubmissionStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueueSubmissionStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueueSubmissionStatisticInfoResponseBody) SetRequestId(v string) *GetQueueSubmissionStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueueSubmissionStatisticInfoResponseBody) SetQueueSubmissionList(v *GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionList) *GetQueueSubmissionStatisticInfoResponseBody {
	s.QueueSubmissionList = v
	return s
}

type GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionList struct {
	ClusterStatQueueSubmission []*GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission `json:"ClusterStatQueueSubmission,omitempty" xml:"ClusterStatQueueSubmission,omitempty" type:"Repeated"`
}

func (s GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionList) String() string {
	return tea.Prettify(s)
}

func (s GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionList) GoString() string {
	return s.String()
}

func (s *GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionList) SetClusterStatQueueSubmission(v []*GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission) *GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionList {
	s.ClusterStatQueueSubmission = v
	return s
}

type GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission struct {
	Submission *int64  `json:"Submission,omitempty" xml:"Submission,omitempty"`
	Queue      *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission) String() string {
	return tea.Prettify(s)
}

func (s GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission) GoString() string {
	return s.String()
}

func (s *GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission) SetSubmission(v int64) *GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission {
	s.Submission = &v
	return s
}

func (s *GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission) SetQueue(v string) *GetQueueSubmissionStatisticInfoResponseBodyQueueSubmissionListClusterStatQueueSubmission {
	s.Queue = &v
	return s
}

type GetQueueSubmissionStatisticInfoResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetQueueSubmissionStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueueSubmissionStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueueSubmissionStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetQueueSubmissionStatisticInfoResponse) SetHeaders(v map[string]*string) *GetQueueSubmissionStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetQueueSubmissionStatisticInfoResponse) SetBody(v *GetQueueSubmissionStatisticInfoResponseBody) *GetQueueSubmissionStatisticInfoResponse {
	s.Body = v
	return s
}

type GetUserInputStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
}

func (s GetUserInputStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserInputStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetUserInputStatisticInfoRequest) SetResourceOwnerId(v int64) *GetUserInputStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetUserInputStatisticInfoRequest) SetRegionId(v string) *GetUserInputStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetUserInputStatisticInfoRequest) SetClusterId(v string) *GetUserInputStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetUserInputStatisticInfoRequest) SetFromDatetime(v string) *GetUserInputStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetUserInputStatisticInfoRequest) SetToDatetime(v string) *GetUserInputStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

type GetUserInputStatisticInfoResponseBody struct {
	RequestId     *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserInputList *GetUserInputStatisticInfoResponseBodyUserInputList `json:"UserInputList,omitempty" xml:"UserInputList,omitempty" type:"Struct"`
}

func (s GetUserInputStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserInputStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserInputStatisticInfoResponseBody) SetRequestId(v string) *GetUserInputStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserInputStatisticInfoResponseBody) SetUserInputList(v *GetUserInputStatisticInfoResponseBodyUserInputList) *GetUserInputStatisticInfoResponseBody {
	s.UserInputList = v
	return s
}

type GetUserInputStatisticInfoResponseBodyUserInputList struct {
	ClusterStatUserInput []*GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput `json:"ClusterStatUserInput,omitempty" xml:"ClusterStatUserInput,omitempty" type:"Repeated"`
}

func (s GetUserInputStatisticInfoResponseBodyUserInputList) String() string {
	return tea.Prettify(s)
}

func (s GetUserInputStatisticInfoResponseBodyUserInputList) GoString() string {
	return s.String()
}

func (s *GetUserInputStatisticInfoResponseBodyUserInputList) SetClusterStatUserInput(v []*GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput) *GetUserInputStatisticInfoResponseBodyUserInputList {
	s.ClusterStatUserInput = v
	return s
}

type GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput struct {
	BytesInput *int64  `json:"BytesInput,omitempty" xml:"BytesInput,omitempty"`
	User       *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput) String() string {
	return tea.Prettify(s)
}

func (s GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput) GoString() string {
	return s.String()
}

func (s *GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput) SetBytesInput(v int64) *GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput {
	s.BytesInput = &v
	return s
}

func (s *GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput) SetUser(v string) *GetUserInputStatisticInfoResponseBodyUserInputListClusterStatUserInput {
	s.User = &v
	return s
}

type GetUserInputStatisticInfoResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetUserInputStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserInputStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserInputStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetUserInputStatisticInfoResponse) SetHeaders(v map[string]*string) *GetUserInputStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetUserInputStatisticInfoResponse) SetBody(v *GetUserInputStatisticInfoResponseBody) *GetUserInputStatisticInfoResponse {
	s.Body = v
	return s
}

type GetUserOutputStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
}

func (s GetUserOutputStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserOutputStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetUserOutputStatisticInfoRequest) SetResourceOwnerId(v int64) *GetUserOutputStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetUserOutputStatisticInfoRequest) SetRegionId(v string) *GetUserOutputStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetUserOutputStatisticInfoRequest) SetClusterId(v string) *GetUserOutputStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetUserOutputStatisticInfoRequest) SetFromDatetime(v string) *GetUserOutputStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetUserOutputStatisticInfoRequest) SetToDatetime(v string) *GetUserOutputStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

type GetUserOutputStatisticInfoResponseBody struct {
	RequestId      *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserOutputList *GetUserOutputStatisticInfoResponseBodyUserOutputList `json:"UserOutputList,omitempty" xml:"UserOutputList,omitempty" type:"Struct"`
}

func (s GetUserOutputStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserOutputStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserOutputStatisticInfoResponseBody) SetRequestId(v string) *GetUserOutputStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserOutputStatisticInfoResponseBody) SetUserOutputList(v *GetUserOutputStatisticInfoResponseBodyUserOutputList) *GetUserOutputStatisticInfoResponseBody {
	s.UserOutputList = v
	return s
}

type GetUserOutputStatisticInfoResponseBodyUserOutputList struct {
	ClusterStatUserOutput []*GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput `json:"ClusterStatUserOutput,omitempty" xml:"ClusterStatUserOutput,omitempty" type:"Repeated"`
}

func (s GetUserOutputStatisticInfoResponseBodyUserOutputList) String() string {
	return tea.Prettify(s)
}

func (s GetUserOutputStatisticInfoResponseBodyUserOutputList) GoString() string {
	return s.String()
}

func (s *GetUserOutputStatisticInfoResponseBodyUserOutputList) SetClusterStatUserOutput(v []*GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput) *GetUserOutputStatisticInfoResponseBodyUserOutputList {
	s.ClusterStatUserOutput = v
	return s
}

type GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput struct {
	User        *string `json:"User,omitempty" xml:"User,omitempty"`
	BytesOutput *int64  `json:"BytesOutput,omitempty" xml:"BytesOutput,omitempty"`
}

func (s GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput) String() string {
	return tea.Prettify(s)
}

func (s GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput) GoString() string {
	return s.String()
}

func (s *GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput) SetUser(v string) *GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput {
	s.User = &v
	return s
}

func (s *GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput) SetBytesOutput(v int64) *GetUserOutputStatisticInfoResponseBodyUserOutputListClusterStatUserOutput {
	s.BytesOutput = &v
	return s
}

type GetUserOutputStatisticInfoResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetUserOutputStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserOutputStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserOutputStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetUserOutputStatisticInfoResponse) SetHeaders(v map[string]*string) *GetUserOutputStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetUserOutputStatisticInfoResponse) SetBody(v *GetUserOutputStatisticInfoResponseBody) *GetUserOutputStatisticInfoResponse {
	s.Body = v
	return s
}

type GetUserSubmissionStatisticInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	FromDatetime    *string `json:"FromDatetime,omitempty" xml:"FromDatetime,omitempty"`
	ToDatetime      *string `json:"ToDatetime,omitempty" xml:"ToDatetime,omitempty"`
	ApplicationType *string `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty"`
	FinalStatus     *string `json:"FinalStatus,omitempty" xml:"FinalStatus,omitempty"`
}

func (s GetUserSubmissionStatisticInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetUserSubmissionStatisticInfoRequest) GoString() string {
	return s.String()
}

func (s *GetUserSubmissionStatisticInfoRequest) SetResourceOwnerId(v int64) *GetUserSubmissionStatisticInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetUserSubmissionStatisticInfoRequest) SetRegionId(v string) *GetUserSubmissionStatisticInfoRequest {
	s.RegionId = &v
	return s
}

func (s *GetUserSubmissionStatisticInfoRequest) SetClusterId(v string) *GetUserSubmissionStatisticInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *GetUserSubmissionStatisticInfoRequest) SetFromDatetime(v string) *GetUserSubmissionStatisticInfoRequest {
	s.FromDatetime = &v
	return s
}

func (s *GetUserSubmissionStatisticInfoRequest) SetToDatetime(v string) *GetUserSubmissionStatisticInfoRequest {
	s.ToDatetime = &v
	return s
}

func (s *GetUserSubmissionStatisticInfoRequest) SetApplicationType(v string) *GetUserSubmissionStatisticInfoRequest {
	s.ApplicationType = &v
	return s
}

func (s *GetUserSubmissionStatisticInfoRequest) SetFinalStatus(v string) *GetUserSubmissionStatisticInfoRequest {
	s.FinalStatus = &v
	return s
}

type GetUserSubmissionStatisticInfoResponseBody struct {
	RequestId          *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserSubmissionList *GetUserSubmissionStatisticInfoResponseBodyUserSubmissionList `json:"UserSubmissionList,omitempty" xml:"UserSubmissionList,omitempty" type:"Struct"`
}

func (s GetUserSubmissionStatisticInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetUserSubmissionStatisticInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetUserSubmissionStatisticInfoResponseBody) SetRequestId(v string) *GetUserSubmissionStatisticInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetUserSubmissionStatisticInfoResponseBody) SetUserSubmissionList(v *GetUserSubmissionStatisticInfoResponseBodyUserSubmissionList) *GetUserSubmissionStatisticInfoResponseBody {
	s.UserSubmissionList = v
	return s
}

type GetUserSubmissionStatisticInfoResponseBodyUserSubmissionList struct {
	ClusterStatUserSubmission []*GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission `json:"ClusterStatUserSubmission,omitempty" xml:"ClusterStatUserSubmission,omitempty" type:"Repeated"`
}

func (s GetUserSubmissionStatisticInfoResponseBodyUserSubmissionList) String() string {
	return tea.Prettify(s)
}

func (s GetUserSubmissionStatisticInfoResponseBodyUserSubmissionList) GoString() string {
	return s.String()
}

func (s *GetUserSubmissionStatisticInfoResponseBodyUserSubmissionList) SetClusterStatUserSubmission(v []*GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission) *GetUserSubmissionStatisticInfoResponseBodyUserSubmissionList {
	s.ClusterStatUserSubmission = v
	return s
}

type GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission struct {
	Submission *int64  `json:"Submission,omitempty" xml:"Submission,omitempty"`
	User       *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission) String() string {
	return tea.Prettify(s)
}

func (s GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission) GoString() string {
	return s.String()
}

func (s *GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission) SetSubmission(v int64) *GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission {
	s.Submission = &v
	return s
}

func (s *GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission) SetUser(v string) *GetUserSubmissionStatisticInfoResponseBodyUserSubmissionListClusterStatUserSubmission {
	s.User = &v
	return s
}

type GetUserSubmissionStatisticInfoResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetUserSubmissionStatisticInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetUserSubmissionStatisticInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetUserSubmissionStatisticInfoResponse) GoString() string {
	return s.String()
}

func (s *GetUserSubmissionStatisticInfoResponse) SetHeaders(v map[string]*string) *GetUserSubmissionStatisticInfoResponse {
	s.Headers = v
	return s
}

func (s *GetUserSubmissionStatisticInfoResponse) SetBody(v *GetUserSubmissionStatisticInfoResponseBody) *GetUserSubmissionStatisticInfoResponse {
	s.Body = v
	return s
}

type InstallLibrariesRequest struct {
	ResourceOwnerId  *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId         *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LibraryBizId     *string   `json:"LibraryBizId,omitempty" xml:"LibraryBizId,omitempty"`
	ClusterBizIdList []*string `json:"ClusterBizIdList,omitempty" xml:"ClusterBizIdList,omitempty" type:"Repeated"`
}

func (s InstallLibrariesRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallLibrariesRequest) GoString() string {
	return s.String()
}

func (s *InstallLibrariesRequest) SetResourceOwnerId(v int64) *InstallLibrariesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *InstallLibrariesRequest) SetRegionId(v string) *InstallLibrariesRequest {
	s.RegionId = &v
	return s
}

func (s *InstallLibrariesRequest) SetLibraryBizId(v string) *InstallLibrariesRequest {
	s.LibraryBizId = &v
	return s
}

func (s *InstallLibrariesRequest) SetClusterBizIdList(v []*string) *InstallLibrariesRequest {
	s.ClusterBizIdList = v
	return s
}

type InstallLibrariesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s InstallLibrariesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallLibrariesResponseBody) GoString() string {
	return s.String()
}

func (s *InstallLibrariesResponseBody) SetRequestId(v string) *InstallLibrariesResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallLibrariesResponseBody) SetData(v string) *InstallLibrariesResponseBody {
	s.Data = &v
	return s
}

type InstallLibrariesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *InstallLibrariesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s InstallLibrariesResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallLibrariesResponse) GoString() string {
	return s.String()
}

func (s *InstallLibrariesResponse) SetHeaders(v map[string]*string) *InstallLibrariesResponse {
	s.Headers = v
	return s
}

func (s *InstallLibrariesResponse) SetBody(v *InstallLibrariesResponseBody) *InstallLibrariesResponse {
	s.Body = v
	return s
}

type JoinResourceGroupRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId      *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s JoinResourceGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupRequest) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupRequest) SetResourceOwnerId(v int64) *JoinResourceGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetRegionId(v string) *JoinResourceGroupRequest {
	s.RegionId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceType(v string) *JoinResourceGroupRequest {
	s.ResourceType = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceId(v string) *JoinResourceGroupRequest {
	s.ResourceId = &v
	return s
}

func (s *JoinResourceGroupRequest) SetResourceGroupId(v string) *JoinResourceGroupRequest {
	s.ResourceGroupId = &v
	return s
}

type JoinResourceGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s JoinResourceGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupResponseBody) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupResponseBody) SetRequestId(v string) *JoinResourceGroupResponseBody {
	s.RequestId = &v
	return s
}

type JoinResourceGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *JoinResourceGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s JoinResourceGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinResourceGroupResponse) GoString() string {
	return s.String()
}

func (s *JoinResourceGroupResponse) SetHeaders(v map[string]*string) *JoinResourceGroupResponse {
	s.Headers = v
	return s
}

func (s *JoinResourceGroupResponse) SetBody(v *JoinResourceGroupResponseBody) *JoinResourceGroupResponse {
	s.Body = v
	return s
}

type KillExecutionJobInstanceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobInstanceId   *string `json:"JobInstanceId,omitempty" xml:"JobInstanceId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s KillExecutionJobInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s KillExecutionJobInstanceRequest) GoString() string {
	return s.String()
}

func (s *KillExecutionJobInstanceRequest) SetResourceOwnerId(v int64) *KillExecutionJobInstanceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *KillExecutionJobInstanceRequest) SetJobInstanceId(v string) *KillExecutionJobInstanceRequest {
	s.JobInstanceId = &v
	return s
}

func (s *KillExecutionJobInstanceRequest) SetRegionId(v string) *KillExecutionJobInstanceRequest {
	s.RegionId = &v
	return s
}

type KillExecutionJobInstanceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s KillExecutionJobInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s KillExecutionJobInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *KillExecutionJobInstanceResponseBody) SetRequestId(v string) *KillExecutionJobInstanceResponseBody {
	s.RequestId = &v
	return s
}

type KillExecutionJobInstanceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *KillExecutionJobInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s KillExecutionJobInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s KillExecutionJobInstanceResponse) GoString() string {
	return s.String()
}

func (s *KillExecutionJobInstanceResponse) SetHeaders(v map[string]*string) *KillExecutionJobInstanceResponse {
	s.Headers = v
	return s
}

func (s *KillExecutionJobInstanceResponse) SetBody(v *KillExecutionJobInstanceResponseBody) *KillExecutionJobInstanceResponse {
	s.Body = v
	return s
}

type KillFlowJobRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	JobInstanceId *string `json:"JobInstanceId,omitempty" xml:"JobInstanceId,omitempty"`
}

func (s KillFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s KillFlowJobRequest) GoString() string {
	return s.String()
}

func (s *KillFlowJobRequest) SetRegionId(v string) *KillFlowJobRequest {
	s.RegionId = &v
	return s
}

func (s *KillFlowJobRequest) SetProjectId(v string) *KillFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *KillFlowJobRequest) SetJobInstanceId(v string) *KillFlowJobRequest {
	s.JobInstanceId = &v
	return s
}

type KillFlowJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s KillFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s KillFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *KillFlowJobResponseBody) SetRequestId(v string) *KillFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *KillFlowJobResponseBody) SetData(v bool) *KillFlowJobResponseBody {
	s.Data = &v
	return s
}

type KillFlowJobResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *KillFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s KillFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s KillFlowJobResponse) GoString() string {
	return s.String()
}

func (s *KillFlowJobResponse) SetHeaders(v map[string]*string) *KillFlowJobResponse {
	s.Headers = v
	return s
}

func (s *KillFlowJobResponse) SetBody(v *KillFlowJobResponseBody) *KillFlowJobResponse {
	s.Body = v
	return s
}

type ListAdviceActionRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Component       *string `json:"Component,omitempty" xml:"Component,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListAdviceActionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAdviceActionRequest) GoString() string {
	return s.String()
}

func (s *ListAdviceActionRequest) SetResourceOwnerId(v int64) *ListAdviceActionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListAdviceActionRequest) SetRegionId(v string) *ListAdviceActionRequest {
	s.RegionId = &v
	return s
}

func (s *ListAdviceActionRequest) SetClusterId(v string) *ListAdviceActionRequest {
	s.ClusterId = &v
	return s
}

func (s *ListAdviceActionRequest) SetServiceName(v string) *ListAdviceActionRequest {
	s.ServiceName = &v
	return s
}

func (s *ListAdviceActionRequest) SetComponent(v string) *ListAdviceActionRequest {
	s.Component = &v
	return s
}

func (s *ListAdviceActionRequest) SetPageNumber(v int32) *ListAdviceActionRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAdviceActionRequest) SetPageSize(v int32) *ListAdviceActionRequest {
	s.PageSize = &v
	return s
}

type ListAdviceActionResponseBody struct {
	TotalCount *int32                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListAdviceActionResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListAdviceActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAdviceActionResponseBody) GoString() string {
	return s.String()
}

func (s *ListAdviceActionResponseBody) SetTotalCount(v int32) *ListAdviceActionResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListAdviceActionResponseBody) SetRequestId(v string) *ListAdviceActionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAdviceActionResponseBody) SetPageSize(v int32) *ListAdviceActionResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListAdviceActionResponseBody) SetPageNumber(v int32) *ListAdviceActionResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListAdviceActionResponseBody) SetItems(v *ListAdviceActionResponseBodyItems) *ListAdviceActionResponseBody {
	s.Items = v
	return s
}

type ListAdviceActionResponseBodyItems struct {
	Item []*ListAdviceActionResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListAdviceActionResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListAdviceActionResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListAdviceActionResponseBodyItems) SetItem(v []*ListAdviceActionResponseBodyItemsItem) *ListAdviceActionResponseBodyItems {
	s.Item = v
	return s
}

type ListAdviceActionResponseBodyItemsItem struct {
	HostgroupName *string `json:"HostgroupName,omitempty" xml:"HostgroupName,omitempty"`
	ConfigName    *string `json:"ConfigName,omitempty" xml:"ConfigName,omitempty"`
	ActionType    *string `json:"ActionType,omitempty" xml:"ActionType,omitempty"`
	Command       *string `json:"Command,omitempty" xml:"Command,omitempty"`
	GmtCreate     *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Component     *string `json:"Component,omitempty" xml:"Component,omitempty"`
	ConfigItemKey *string `json:"ConfigItemKey,omitempty" xml:"ConfigItemKey,omitempty"`
	GmtModified   *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListAdviceActionResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListAdviceActionResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListAdviceActionResponseBodyItemsItem) SetHostgroupName(v string) *ListAdviceActionResponseBodyItemsItem {
	s.HostgroupName = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetConfigName(v string) *ListAdviceActionResponseBodyItemsItem {
	s.ConfigName = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetActionType(v string) *ListAdviceActionResponseBodyItemsItem {
	s.ActionType = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetCommand(v string) *ListAdviceActionResponseBodyItemsItem {
	s.Command = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetGmtCreate(v int64) *ListAdviceActionResponseBodyItemsItem {
	s.GmtCreate = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetComponent(v string) *ListAdviceActionResponseBodyItemsItem {
	s.Component = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetConfigItemKey(v string) *ListAdviceActionResponseBodyItemsItem {
	s.ConfigItemKey = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetGmtModified(v int64) *ListAdviceActionResponseBodyItemsItem {
	s.GmtModified = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetServiceName(v string) *ListAdviceActionResponseBodyItemsItem {
	s.ServiceName = &v
	return s
}

func (s *ListAdviceActionResponseBodyItemsItem) SetClusterId(v string) *ListAdviceActionResponseBodyItemsItem {
	s.ClusterId = &v
	return s
}

type ListAdviceActionResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAdviceActionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAdviceActionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAdviceActionResponse) GoString() string {
	return s.String()
}

func (s *ListAdviceActionResponse) SetHeaders(v map[string]*string) *ListAdviceActionResponse {
	s.Headers = v
	return s
}

func (s *ListAdviceActionResponse) SetBody(v *ListAdviceActionResponseBody) *ListAdviceActionResponse {
	s.Body = v
	return s
}

type ListApmApplicationRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StartTimeFrom   *int64  `json:"StartTimeFrom,omitempty" xml:"StartTimeFrom,omitempty"`
	StartTimeTo     *int64  `json:"StartTimeTo,omitempty" xml:"StartTimeTo,omitempty"`
	EndTimeFrom     *int64  `json:"EndTimeFrom,omitempty" xml:"EndTimeFrom,omitempty"`
	EndTimeTo       *int64  `json:"EndTimeTo,omitempty" xml:"EndTimeTo,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	AppId           *string `json:"AppId,omitempty" xml:"AppId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	FinalStatus     *string `json:"FinalStatus,omitempty" xml:"FinalStatus,omitempty"`
	User            *string `json:"User,omitempty" xml:"User,omitempty"`
	Queue           *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	JobType         *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	OrderBy         *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	DiagnoseResult  *string `json:"DiagnoseResult,omitempty" xml:"DiagnoseResult,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListApmApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListApmApplicationRequest) GoString() string {
	return s.String()
}

func (s *ListApmApplicationRequest) SetResourceOwnerId(v int64) *ListApmApplicationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListApmApplicationRequest) SetRegionId(v string) *ListApmApplicationRequest {
	s.RegionId = &v
	return s
}

func (s *ListApmApplicationRequest) SetStartTimeFrom(v int64) *ListApmApplicationRequest {
	s.StartTimeFrom = &v
	return s
}

func (s *ListApmApplicationRequest) SetStartTimeTo(v int64) *ListApmApplicationRequest {
	s.StartTimeTo = &v
	return s
}

func (s *ListApmApplicationRequest) SetEndTimeFrom(v int64) *ListApmApplicationRequest {
	s.EndTimeFrom = &v
	return s
}

func (s *ListApmApplicationRequest) SetEndTimeTo(v int64) *ListApmApplicationRequest {
	s.EndTimeTo = &v
	return s
}

func (s *ListApmApplicationRequest) SetClusterId(v string) *ListApmApplicationRequest {
	s.ClusterId = &v
	return s
}

func (s *ListApmApplicationRequest) SetAppId(v string) *ListApmApplicationRequest {
	s.AppId = &v
	return s
}

func (s *ListApmApplicationRequest) SetState(v string) *ListApmApplicationRequest {
	s.State = &v
	return s
}

func (s *ListApmApplicationRequest) SetFinalStatus(v string) *ListApmApplicationRequest {
	s.FinalStatus = &v
	return s
}

func (s *ListApmApplicationRequest) SetUser(v string) *ListApmApplicationRequest {
	s.User = &v
	return s
}

func (s *ListApmApplicationRequest) SetQueue(v string) *ListApmApplicationRequest {
	s.Queue = &v
	return s
}

func (s *ListApmApplicationRequest) SetName(v string) *ListApmApplicationRequest {
	s.Name = &v
	return s
}

func (s *ListApmApplicationRequest) SetJobType(v string) *ListApmApplicationRequest {
	s.JobType = &v
	return s
}

func (s *ListApmApplicationRequest) SetOrderBy(v string) *ListApmApplicationRequest {
	s.OrderBy = &v
	return s
}

func (s *ListApmApplicationRequest) SetDiagnoseResult(v string) *ListApmApplicationRequest {
	s.DiagnoseResult = &v
	return s
}

func (s *ListApmApplicationRequest) SetPageNumber(v int32) *ListApmApplicationRequest {
	s.PageNumber = &v
	return s
}

func (s *ListApmApplicationRequest) SetPageSize(v int32) *ListApmApplicationRequest {
	s.PageSize = &v
	return s
}

type ListApmApplicationResponseBody struct {
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize       *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ApmAppInfoList *ListApmApplicationResponseBodyApmAppInfoList `json:"ApmAppInfoList,omitempty" xml:"ApmAppInfoList,omitempty" type:"Struct"`
	PageNumber     *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total          *int32                                        `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListApmApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListApmApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *ListApmApplicationResponseBody) SetRequestId(v string) *ListApmApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListApmApplicationResponseBody) SetPageSize(v int32) *ListApmApplicationResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListApmApplicationResponseBody) SetApmAppInfoList(v *ListApmApplicationResponseBodyApmAppInfoList) *ListApmApplicationResponseBody {
	s.ApmAppInfoList = v
	return s
}

func (s *ListApmApplicationResponseBody) SetPageNumber(v int32) *ListApmApplicationResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListApmApplicationResponseBody) SetTotal(v int32) *ListApmApplicationResponseBody {
	s.Total = &v
	return s
}

type ListApmApplicationResponseBodyApmAppInfoList struct {
	ApmAppInfo []*ListApmApplicationResponseBodyApmAppInfoListApmAppInfo `json:"ApmAppInfo,omitempty" xml:"ApmAppInfo,omitempty" type:"Repeated"`
}

func (s ListApmApplicationResponseBodyApmAppInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListApmApplicationResponseBodyApmAppInfoList) GoString() string {
	return s.String()
}

func (s *ListApmApplicationResponseBodyApmAppInfoList) SetApmAppInfo(v []*ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) *ListApmApplicationResponseBodyApmAppInfoList {
	s.ApmAppInfo = v
	return s
}

type ListApmApplicationResponseBodyApmAppInfoListApmAppInfo struct {
	VcoreSeconds        *int64   `json:"VcoreSeconds,omitempty" xml:"VcoreSeconds,omitempty"`
	Diagnostics         *string  `json:"Diagnostics,omitempty" xml:"Diagnostics,omitempty"`
	Queue               *string  `json:"Queue,omitempty" xml:"Queue,omitempty"`
	DiagnoseCode        *string  `json:"DiagnoseCode,omitempty" xml:"DiagnoseCode,omitempty"`
	FinalStatus         *string  `json:"FinalStatus,omitempty" xml:"FinalStatus,omitempty"`
	AllocatedVcore      *int64   `json:"AllocatedVcore,omitempty" xml:"AllocatedVcore,omitempty"`
	QueueUsagePercent   *float32 `json:"QueueUsagePercent,omitempty" xml:"QueueUsagePercent,omitempty"`
	Name                *string  `json:"Name,omitempty" xml:"Name,omitempty"`
	ResourceRequests    *string  `json:"ResourceRequests,omitempty" xml:"ResourceRequests,omitempty"`
	Progress            *float32 `json:"Progress,omitempty" xml:"Progress,omitempty"`
	State               *string  `json:"State,omitempty" xml:"State,omitempty"`
	ClusterUsagePercent *float32 `json:"ClusterUsagePercent,omitempty" xml:"ClusterUsagePercent,omitempty"`
	RunningContainers   *int32   `json:"RunningContainers,omitempty" xml:"RunningContainers,omitempty"`
	ApplicationType     *string  `json:"ApplicationType,omitempty" xml:"ApplicationType,omitempty"`
	User                *string  `json:"User,omitempty" xml:"User,omitempty"`
	AllocatedMemory     *int64   `json:"AllocatedMemory,omitempty" xml:"AllocatedMemory,omitempty"`
	RunningDuration     *int32   `json:"RunningDuration,omitempty" xml:"RunningDuration,omitempty"`
	MemorySeconds       *int64   `json:"MemorySeconds,omitempty" xml:"MemorySeconds,omitempty"`
	StartTime           *int64   `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	DiagnoseResult      *string  `json:"DiagnoseResult,omitempty" xml:"DiagnoseResult,omitempty"`
	FinishedTime        *int64   `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	Duration            *int32   `json:"Duration,omitempty" xml:"Duration,omitempty"`
	ClusterBizId        *string  `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	ApplicationId       *string  `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
	SubmitTime          *int64   `json:"SubmitTime,omitempty" xml:"SubmitTime,omitempty"`
}

func (s ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) String() string {
	return tea.Prettify(s)
}

func (s ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) GoString() string {
	return s.String()
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetVcoreSeconds(v int64) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.VcoreSeconds = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetDiagnostics(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.Diagnostics = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetQueue(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.Queue = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetDiagnoseCode(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.DiagnoseCode = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetFinalStatus(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.FinalStatus = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetAllocatedVcore(v int64) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.AllocatedVcore = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetQueueUsagePercent(v float32) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.QueueUsagePercent = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetName(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.Name = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetResourceRequests(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.ResourceRequests = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetProgress(v float32) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.Progress = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetState(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.State = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetClusterUsagePercent(v float32) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.ClusterUsagePercent = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetRunningContainers(v int32) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.RunningContainers = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetApplicationType(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.ApplicationType = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetUser(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.User = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetAllocatedMemory(v int64) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.AllocatedMemory = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetRunningDuration(v int32) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.RunningDuration = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetMemorySeconds(v int64) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.MemorySeconds = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetStartTime(v int64) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.StartTime = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetDiagnoseResult(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.DiagnoseResult = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetFinishedTime(v int64) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.FinishedTime = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetDuration(v int32) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.Duration = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetClusterBizId(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.ClusterBizId = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetApplicationId(v string) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.ApplicationId = &v
	return s
}

func (s *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo) SetSubmitTime(v int64) *ListApmApplicationResponseBodyApmAppInfoListApmAppInfo {
	s.SubmitTime = &v
	return s
}

type ListApmApplicationResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListApmApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListApmApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListApmApplicationResponse) GoString() string {
	return s.String()
}

func (s *ListApmApplicationResponse) SetHeaders(v map[string]*string) *ListApmApplicationResponse {
	s.Headers = v
	return s
}

func (s *ListApmApplicationResponse) SetBody(v *ListApmApplicationResponseBody) *ListApmApplicationResponse {
	s.Body = v
	return s
}

type ListBackupsRequest struct {
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Limit           *int32    `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize     *int32    `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount       *int32    `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderMode       *string   `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	Id              *int64    `json:"Id,omitempty" xml:"Id,omitempty"`
	BizId           *string   `json:"BizId,omitempty" xml:"BizId,omitempty"`
	MetadataType    *string   `json:"MetadataType,omitempty" xml:"MetadataType,omitempty"`
	ServiceName     *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	BackupPlanId    *string   `json:"BackupPlanId,omitempty" xml:"BackupPlanId,omitempty"`
	ClusterId       *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Status          *string   `json:"Status,omitempty" xml:"Status,omitempty"`
	BackupId        []*string `json:"BackupId,omitempty" xml:"BackupId,omitempty" type:"Repeated"`
}

func (s ListBackupsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListBackupsRequest) GoString() string {
	return s.String()
}

func (s *ListBackupsRequest) SetResourceOwnerId(v int64) *ListBackupsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListBackupsRequest) SetRegionId(v string) *ListBackupsRequest {
	s.RegionId = &v
	return s
}

func (s *ListBackupsRequest) SetLimit(v int32) *ListBackupsRequest {
	s.Limit = &v
	return s
}

func (s *ListBackupsRequest) SetPageNumber(v int32) *ListBackupsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListBackupsRequest) SetPageSize(v int32) *ListBackupsRequest {
	s.PageSize = &v
	return s
}

func (s *ListBackupsRequest) SetCurrentSize(v int32) *ListBackupsRequest {
	s.CurrentSize = &v
	return s
}

func (s *ListBackupsRequest) SetPageCount(v int32) *ListBackupsRequest {
	s.PageCount = &v
	return s
}

func (s *ListBackupsRequest) SetOrderMode(v string) *ListBackupsRequest {
	s.OrderMode = &v
	return s
}

func (s *ListBackupsRequest) SetId(v int64) *ListBackupsRequest {
	s.Id = &v
	return s
}

func (s *ListBackupsRequest) SetBizId(v string) *ListBackupsRequest {
	s.BizId = &v
	return s
}

func (s *ListBackupsRequest) SetMetadataType(v string) *ListBackupsRequest {
	s.MetadataType = &v
	return s
}

func (s *ListBackupsRequest) SetServiceName(v string) *ListBackupsRequest {
	s.ServiceName = &v
	return s
}

func (s *ListBackupsRequest) SetBackupPlanId(v string) *ListBackupsRequest {
	s.BackupPlanId = &v
	return s
}

func (s *ListBackupsRequest) SetClusterId(v string) *ListBackupsRequest {
	s.ClusterId = &v
	return s
}

func (s *ListBackupsRequest) SetStatus(v string) *ListBackupsRequest {
	s.Status = &v
	return s
}

func (s *ListBackupsRequest) SetBackupId(v []*string) *ListBackupsRequest {
	s.BackupId = v
	return s
}

type ListBackupsResponseBody struct {
	TotalCount *int32                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListBackupsResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListBackupsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListBackupsResponseBody) GoString() string {
	return s.String()
}

func (s *ListBackupsResponseBody) SetTotalCount(v int32) *ListBackupsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListBackupsResponseBody) SetRequestId(v string) *ListBackupsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListBackupsResponseBody) SetPageSize(v int32) *ListBackupsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListBackupsResponseBody) SetPageNumber(v int32) *ListBackupsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListBackupsResponseBody) SetItems(v *ListBackupsResponseBodyItems) *ListBackupsResponseBody {
	s.Items = v
	return s
}

type ListBackupsResponseBodyItems struct {
	Item []*ListBackupsResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListBackupsResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListBackupsResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListBackupsResponseBodyItems) SetItem(v []*ListBackupsResponseBodyItemsItem) *ListBackupsResponseBodyItems {
	s.Item = v
	return s
}

type ListBackupsResponseBodyItemsItem struct {
	Status       *string                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	TarFileName  *string                                       `json:"TarFileName,omitempty" xml:"TarFileName,omitempty"`
	StorePath    *string                                       `json:"StorePath,omitempty" xml:"StorePath,omitempty"`
	CreateTime   *int64                                        `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Md5          *string                                       `json:"Md5,omitempty" xml:"Md5,omitempty"`
	BackupPlanId *string                                       `json:"BackupPlanId,omitempty" xml:"BackupPlanId,omitempty"`
	MetadataInfo *ListBackupsResponseBodyItemsItemMetadataInfo `json:"MetadataInfo,omitempty" xml:"MetadataInfo,omitempty" type:"Struct"`
	Id           *string                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	ClusterId    *string                                       `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListBackupsResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListBackupsResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListBackupsResponseBodyItemsItem) SetStatus(v string) *ListBackupsResponseBodyItemsItem {
	s.Status = &v
	return s
}

func (s *ListBackupsResponseBodyItemsItem) SetTarFileName(v string) *ListBackupsResponseBodyItemsItem {
	s.TarFileName = &v
	return s
}

func (s *ListBackupsResponseBodyItemsItem) SetStorePath(v string) *ListBackupsResponseBodyItemsItem {
	s.StorePath = &v
	return s
}

func (s *ListBackupsResponseBodyItemsItem) SetCreateTime(v int64) *ListBackupsResponseBodyItemsItem {
	s.CreateTime = &v
	return s
}

func (s *ListBackupsResponseBodyItemsItem) SetMd5(v string) *ListBackupsResponseBodyItemsItem {
	s.Md5 = &v
	return s
}

func (s *ListBackupsResponseBodyItemsItem) SetBackupPlanId(v string) *ListBackupsResponseBodyItemsItem {
	s.BackupPlanId = &v
	return s
}

func (s *ListBackupsResponseBodyItemsItem) SetMetadataInfo(v *ListBackupsResponseBodyItemsItemMetadataInfo) *ListBackupsResponseBodyItemsItem {
	s.MetadataInfo = v
	return s
}

func (s *ListBackupsResponseBodyItemsItem) SetId(v string) *ListBackupsResponseBodyItemsItem {
	s.Id = &v
	return s
}

func (s *ListBackupsResponseBodyItemsItem) SetClusterId(v string) *ListBackupsResponseBodyItemsItem {
	s.ClusterId = &v
	return s
}

type ListBackupsResponseBodyItemsItemMetadataInfo struct {
	MetadataType *string `json:"MetadataType,omitempty" xml:"MetadataType,omitempty"`
	Properties   *string `json:"Properties,omitempty" xml:"Properties,omitempty"`
}

func (s ListBackupsResponseBodyItemsItemMetadataInfo) String() string {
	return tea.Prettify(s)
}

func (s ListBackupsResponseBodyItemsItemMetadataInfo) GoString() string {
	return s.String()
}

func (s *ListBackupsResponseBodyItemsItemMetadataInfo) SetMetadataType(v string) *ListBackupsResponseBodyItemsItemMetadataInfo {
	s.MetadataType = &v
	return s
}

func (s *ListBackupsResponseBodyItemsItemMetadataInfo) SetProperties(v string) *ListBackupsResponseBodyItemsItemMetadataInfo {
	s.Properties = &v
	return s
}

type ListBackupsResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListBackupsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListBackupsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListBackupsResponse) GoString() string {
	return s.String()
}

func (s *ListBackupsResponse) SetHeaders(v map[string]*string) *ListBackupsResponse {
	s.Headers = v
	return s
}

func (s *ListBackupsResponse) SetBody(v *ListBackupsResponseBody) *ListBackupsResponse {
	s.Body = v
	return s
}

type ListClusterHostRequest struct {
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostInstanceId  *string   `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostGroupId     *string   `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostName        *string   `json:"HostName,omitempty" xml:"HostName,omitempty"`
	PrivateIp       *string   `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	PublicIp        *string   `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	GroupType       *string   `json:"GroupType,omitempty" xml:"GroupType,omitempty"`
	ComponentName   *string   `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StatusList      []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListClusterHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostRequest) GoString() string {
	return s.String()
}

func (s *ListClusterHostRequest) SetResourceOwnerId(v int64) *ListClusterHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterHostRequest) SetRegionId(v string) *ListClusterHostRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterHostRequest) SetClusterId(v string) *ListClusterHostRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterHostRequest) SetHostInstanceId(v string) *ListClusterHostRequest {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterHostRequest) SetHostGroupId(v string) *ListClusterHostRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterHostRequest) SetHostName(v string) *ListClusterHostRequest {
	s.HostName = &v
	return s
}

func (s *ListClusterHostRequest) SetPrivateIp(v string) *ListClusterHostRequest {
	s.PrivateIp = &v
	return s
}

func (s *ListClusterHostRequest) SetPublicIp(v string) *ListClusterHostRequest {
	s.PublicIp = &v
	return s
}

func (s *ListClusterHostRequest) SetGroupType(v string) *ListClusterHostRequest {
	s.GroupType = &v
	return s
}

func (s *ListClusterHostRequest) SetComponentName(v string) *ListClusterHostRequest {
	s.ComponentName = &v
	return s
}

func (s *ListClusterHostRequest) SetPageNumber(v int32) *ListClusterHostRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostRequest) SetPageSize(v int32) *ListClusterHostRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostRequest) SetStatusList(v []*string) *ListClusterHostRequest {
	s.StatusList = v
	return s
}

type ListClusterHostResponseBody struct {
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total      *int32                               `json:"Total,omitempty" xml:"Total,omitempty"`
	HostList   *ListClusterHostResponseBodyHostList `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
}

func (s ListClusterHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBody) SetRequestId(v string) *ListClusterHostResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterHostResponseBody) SetPageSize(v int32) *ListClusterHostResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostResponseBody) SetPageNumber(v int32) *ListClusterHostResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostResponseBody) SetTotal(v int32) *ListClusterHostResponseBody {
	s.Total = &v
	return s
}

func (s *ListClusterHostResponseBody) SetHostList(v *ListClusterHostResponseBodyHostList) *ListClusterHostResponseBody {
	s.HostList = v
	return s
}

type ListClusterHostResponseBodyHostList struct {
	Host []*ListClusterHostResponseBodyHostListHost `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s ListClusterHostResponseBodyHostList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBodyHostList) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBodyHostList) SetHost(v []*ListClusterHostResponseBodyHostListHost) *ListClusterHostResponseBodyHostList {
	s.Host = v
	return s
}

type ListClusterHostResponseBodyHostListHost struct {
	Status         *string                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	Type           *string                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	SerialNumber   *string                                          `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	PrivateIp      *string                                          `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	DiskList       *ListClusterHostResponseBodyHostListHostDiskList `json:"DiskList,omitempty" xml:"DiskList,omitempty" type:"Struct"`
	CreateTime     *string                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ChargeType     *string                                          `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	HostName       *string                                          `json:"HostName,omitempty" xml:"HostName,omitempty"`
	HostGroupId    *string                                          `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceType   *string                                          `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	HostInstanceId *string                                          `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	SupportIpV6    *bool                                            `json:"SupportIpV6,omitempty" xml:"SupportIpV6,omitempty"`
	Cpu            *int32                                           `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	ExpiredTime    *int64                                           `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	ZoneId         *string                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	PublicIp       *string                                          `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	InstanceStatus *string                                          `json:"InstanceStatus,omitempty" xml:"InstanceStatus,omitempty"`
	Memory         *int32                                           `json:"Memory,omitempty" xml:"Memory,omitempty"`
	EmrExpiredTime *string                                          `json:"EmrExpiredTime,omitempty" xml:"EmrExpiredTime,omitempty"`
	Role           *string                                          `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s ListClusterHostResponseBodyHostListHost) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBodyHostListHost) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBodyHostListHost) SetStatus(v string) *ListClusterHostResponseBodyHostListHost {
	s.Status = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetType(v string) *ListClusterHostResponseBodyHostListHost {
	s.Type = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetSerialNumber(v string) *ListClusterHostResponseBodyHostListHost {
	s.SerialNumber = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetPrivateIp(v string) *ListClusterHostResponseBodyHostListHost {
	s.PrivateIp = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetDiskList(v *ListClusterHostResponseBodyHostListHostDiskList) *ListClusterHostResponseBodyHostListHost {
	s.DiskList = v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetCreateTime(v string) *ListClusterHostResponseBodyHostListHost {
	s.CreateTime = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetChargeType(v string) *ListClusterHostResponseBodyHostListHost {
	s.ChargeType = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetHostName(v string) *ListClusterHostResponseBodyHostListHost {
	s.HostName = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetHostGroupId(v string) *ListClusterHostResponseBodyHostListHost {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetInstanceType(v string) *ListClusterHostResponseBodyHostListHost {
	s.InstanceType = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetHostInstanceId(v string) *ListClusterHostResponseBodyHostListHost {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetSupportIpV6(v bool) *ListClusterHostResponseBodyHostListHost {
	s.SupportIpV6 = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetCpu(v int32) *ListClusterHostResponseBodyHostListHost {
	s.Cpu = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetExpiredTime(v int64) *ListClusterHostResponseBodyHostListHost {
	s.ExpiredTime = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetZoneId(v string) *ListClusterHostResponseBodyHostListHost {
	s.ZoneId = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetPublicIp(v string) *ListClusterHostResponseBodyHostListHost {
	s.PublicIp = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetInstanceStatus(v string) *ListClusterHostResponseBodyHostListHost {
	s.InstanceStatus = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetMemory(v int32) *ListClusterHostResponseBodyHostListHost {
	s.Memory = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetEmrExpiredTime(v string) *ListClusterHostResponseBodyHostListHost {
	s.EmrExpiredTime = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHost) SetRole(v string) *ListClusterHostResponseBodyHostListHost {
	s.Role = &v
	return s
}

type ListClusterHostResponseBodyHostListHostDiskList struct {
	Disk []*ListClusterHostResponseBodyHostListHostDiskListDisk `json:"Disk,omitempty" xml:"Disk,omitempty" type:"Repeated"`
}

func (s ListClusterHostResponseBodyHostListHostDiskList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBodyHostListHostDiskList) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBodyHostListHostDiskList) SetDisk(v []*ListClusterHostResponseBodyHostListHostDiskListDisk) *ListClusterHostResponseBodyHostListHostDiskList {
	s.Disk = v
	return s
}

type ListClusterHostResponseBodyHostListHostDiskListDisk struct {
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	DiskMountPoint  *string `json:"DiskMountPoint,omitempty" xml:"DiskMountPoint,omitempty"`
	BlockMountPoint *string `json:"BlockMountPoint,omitempty" xml:"BlockMountPoint,omitempty"`
	Device          *string `json:"Device,omitempty" xml:"Device,omitempty"`
	DiskSize        *int32  `json:"DiskSize,omitempty" xml:"DiskSize,omitempty"`
	Event           *string `json:"Event,omitempty" xml:"Event,omitempty"`
	DiskType        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	DiskId          *string `json:"DiskId,omitempty" xml:"DiskId,omitempty"`
}

func (s ListClusterHostResponseBodyHostListHostDiskListDisk) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponseBodyHostListHostDiskListDisk) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetType(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.Type = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDiskMountPoint(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.DiskMountPoint = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetBlockMountPoint(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.BlockMountPoint = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDevice(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.Device = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDiskSize(v int32) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.DiskSize = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetEvent(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.Event = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDiskType(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.DiskType = &v
	return s
}

func (s *ListClusterHostResponseBodyHostListHostDiskListDisk) SetDiskId(v string) *ListClusterHostResponseBodyHostListHostDiskListDisk {
	s.DiskId = &v
	return s
}

type ListClusterHostResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostResponse) GoString() string {
	return s.String()
}

func (s *ListClusterHostResponse) SetHeaders(v map[string]*string) *ListClusterHostResponse {
	s.Headers = v
	return s
}

func (s *ListClusterHostResponse) SetBody(v *ListClusterHostResponseBody) *ListClusterHostResponse {
	s.Body = v
	return s
}

type ListClusterHostComponentRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostInstanceId  *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	HostName        *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ComponentName   *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	ComponentStatus *string `json:"ComponentStatus,omitempty" xml:"ComponentStatus,omitempty"`
	HostRole        *string `json:"HostRole,omitempty" xml:"HostRole,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterHostComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentRequest) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentRequest) SetResourceOwnerId(v int64) *ListClusterHostComponentRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetRegionId(v string) *ListClusterHostComponentRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetClusterId(v string) *ListClusterHostComponentRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetHostInstanceId(v string) *ListClusterHostComponentRequest {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetHostName(v string) *ListClusterHostComponentRequest {
	s.HostName = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetServiceName(v string) *ListClusterHostComponentRequest {
	s.ServiceName = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetComponentName(v string) *ListClusterHostComponentRequest {
	s.ComponentName = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetComponentStatus(v string) *ListClusterHostComponentRequest {
	s.ComponentStatus = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetHostRole(v string) *ListClusterHostComponentRequest {
	s.HostRole = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetPageNumber(v int32) *ListClusterHostComponentRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostComponentRequest) SetPageSize(v int32) *ListClusterHostComponentRequest {
	s.PageSize = &v
	return s
}

type ListClusterHostComponentResponseBody struct {
	RequestId     *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize      *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber    *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total         *int32                                             `json:"Total,omitempty" xml:"Total,omitempty"`
	ComponentList *ListClusterHostComponentResponseBodyComponentList `json:"ComponentList,omitempty" xml:"ComponentList,omitempty" type:"Struct"`
}

func (s ListClusterHostComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentResponseBody) SetRequestId(v string) *ListClusterHostComponentResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterHostComponentResponseBody) SetPageSize(v int32) *ListClusterHostComponentResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostComponentResponseBody) SetPageNumber(v int32) *ListClusterHostComponentResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostComponentResponseBody) SetTotal(v int32) *ListClusterHostComponentResponseBody {
	s.Total = &v
	return s
}

func (s *ListClusterHostComponentResponseBody) SetComponentList(v *ListClusterHostComponentResponseBodyComponentList) *ListClusterHostComponentResponseBody {
	s.ComponentList = v
	return s
}

type ListClusterHostComponentResponseBodyComponentList struct {
	Component []*ListClusterHostComponentResponseBodyComponentListComponent `json:"Component,omitempty" xml:"Component,omitempty" type:"Repeated"`
}

func (s ListClusterHostComponentResponseBodyComponentList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentResponseBodyComponentList) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentResponseBodyComponentList) SetComponent(v []*ListClusterHostComponentResponseBodyComponentListComponent) *ListClusterHostComponentResponseBodyComponentList {
	s.Component = v
	return s
}

type ListClusterHostComponentResponseBodyComponentListComponent struct {
	ServiceDisplayName   *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	SerialNumber         *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	ServerStatus         *string `json:"ServerStatus,omitempty" xml:"ServerStatus,omitempty"`
	PrivateIp            *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	ComponentName        *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	CommissionStatus     *string `json:"CommissionStatus,omitempty" xml:"CommissionStatus,omitempty"`
	HostName             *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	NeedRestart          *bool   `json:"NeedRestart,omitempty" xml:"NeedRestart,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	HostId               *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	HostInstanceId       *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	Cpu                  *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	ComponentDisplayName *string `json:"ComponentDisplayName,omitempty" xml:"ComponentDisplayName,omitempty"`
	PublicIp             *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	Memory               *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	ServiceName          *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterHostComponentResponseBodyComponentListComponent) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentResponseBodyComponentListComponent) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetServiceDisplayName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetStatus(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.Status = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetSerialNumber(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.SerialNumber = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetServerStatus(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ServerStatus = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetPrivateIp(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.PrivateIp = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetComponentName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ComponentName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetCommissionStatus(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.CommissionStatus = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetHostName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.HostName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetNeedRestart(v bool) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.NeedRestart = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetInstanceType(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.InstanceType = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetHostId(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.HostId = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetHostInstanceId(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetCpu(v int32) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.Cpu = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetComponentDisplayName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ComponentDisplayName = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetPublicIp(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.PublicIp = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetMemory(v int32) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.Memory = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetRole(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.Role = &v
	return s
}

func (s *ListClusterHostComponentResponseBodyComponentListComponent) SetServiceName(v string) *ListClusterHostComponentResponseBodyComponentListComponent {
	s.ServiceName = &v
	return s
}

type ListClusterHostComponentResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterHostComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterHostComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostComponentResponse) GoString() string {
	return s.String()
}

func (s *ListClusterHostComponentResponse) SetHeaders(v map[string]*string) *ListClusterHostComponentResponse {
	s.Headers = v
	return s
}

func (s *ListClusterHostComponentResponse) SetBody(v *ListClusterHostComponentResponseBody) *ListClusterHostComponentResponse {
	s.Body = v
	return s
}

type ListClusterHostGroupRequest struct {
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId     *string   `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName   *string   `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	HostGroupType   *string   `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StatusList      []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListClusterHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupRequest) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupRequest) SetResourceOwnerId(v int64) *ListClusterHostGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetRegionId(v string) *ListClusterHostGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetClusterId(v string) *ListClusterHostGroupRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetHostGroupId(v string) *ListClusterHostGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetHostGroupName(v string) *ListClusterHostGroupRequest {
	s.HostGroupName = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetHostGroupType(v string) *ListClusterHostGroupRequest {
	s.HostGroupType = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetPageNumber(v int32) *ListClusterHostGroupRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetPageSize(v int32) *ListClusterHostGroupRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostGroupRequest) SetStatusList(v []*string) *ListClusterHostGroupRequest {
	s.StatusList = v
	return s
}

type ListClusterHostGroupResponseBody struct {
	PageSize      *int32                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId     *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber    *int32                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ClusterId     *string                                        `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Total         *int32                                         `json:"Total,omitempty" xml:"Total,omitempty"`
	HostGroupList *ListClusterHostGroupResponseBodyHostGroupList `json:"HostGroupList,omitempty" xml:"HostGroupList,omitempty" type:"Struct"`
}

func (s ListClusterHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupResponseBody) SetPageSize(v int32) *ListClusterHostGroupResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetRequestId(v string) *ListClusterHostGroupResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetPageNumber(v int32) *ListClusterHostGroupResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetClusterId(v string) *ListClusterHostGroupResponseBody {
	s.ClusterId = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetTotal(v int32) *ListClusterHostGroupResponseBody {
	s.Total = &v
	return s
}

func (s *ListClusterHostGroupResponseBody) SetHostGroupList(v *ListClusterHostGroupResponseBodyHostGroupList) *ListClusterHostGroupResponseBody {
	s.HostGroupList = v
	return s
}

type ListClusterHostGroupResponseBodyHostGroupList struct {
	HostGroup []*ListClusterHostGroupResponseBodyHostGroupListHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
}

func (s ListClusterHostGroupResponseBodyHostGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupResponseBodyHostGroupList) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupResponseBodyHostGroupList) SetHostGroup(v []*ListClusterHostGroupResponseBodyHostGroupListHostGroup) *ListClusterHostGroupResponseBodyHostGroupList {
	s.HostGroup = v
	return s
}

type ListClusterHostGroupResponseBodyHostGroupListHostGroup struct {
	Status                   *string  `json:"Status,omitempty" xml:"Status,omitempty"`
	HostGroupSubType         *string  `json:"HostGroupSubType,omitempty" xml:"HostGroupSubType,omitempty"`
	HostGroupType            *string  `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	Comment                  *string  `json:"Comment,omitempty" xml:"Comment,omitempty"`
	ScalingGroupMinNode      *int32   `json:"ScalingGroupMinNode,omitempty" xml:"ScalingGroupMinNode,omitempty"`
	VswitchId                *string  `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	SecurityGroupId          *string  `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	HostGroupChangeStatus    *string  `json:"HostGroupChangeStatus,omitempty" xml:"HostGroupChangeStatus,omitempty"`
	ChargeType               *string  `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	PayType                  *string  `json:"PayType,omitempty" xml:"PayType,omitempty"`
	DataDiskType             *string  `json:"DataDiskType,omitempty" xml:"DataDiskType,omitempty"`
	SystemDiskCount          *int32   `json:"SystemDiskCount,omitempty" xml:"SystemDiskCount,omitempty"`
	SystemDiskSize           *int32   `json:"SystemDiskSize,omitempty" xml:"SystemDiskSize,omitempty"`
	ScalingGroupBizId        *string  `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	GmtModified              *string  `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	Memory                   *int32   `json:"Memory,omitempty" xml:"Memory,omitempty"`
	ScalingGroupMaxNode      *int32   `json:"ScalingGroupMaxNode,omitempty" xml:"ScalingGroupMaxNode,omitempty"`
	HostGroupChangeType      *string  `json:"HostGroupChangeType,omitempty" xml:"HostGroupChangeType,omitempty"`
	LockType                 *string  `json:"LockType,omitempty" xml:"LockType,omitempty"`
	ScalingInMode            *string  `json:"ScalingInMode,omitempty" xml:"ScalingInMode,omitempty"`
	CostSavingPercent        *float32 `json:"CostSavingPercent,omitempty" xml:"CostSavingPercent,omitempty"`
	DataDiskSize             *int32   `json:"DataDiskSize,omitempty" xml:"DataDiskSize,omitempty"`
	LockReason               *string  `json:"LockReason,omitempty" xml:"LockReason,omitempty"`
	HostGroupId              *string  `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	GmtCreate                *string  `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	InstanceType             *string  `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	Cpu                      *int32   `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	DataDiskCount            *int32   `json:"DataDiskCount,omitempty" xml:"DataDiskCount,omitempty"`
	ScalingGroupActiveStatus *string  `json:"ScalingGroupActiveStatus,omitempty" xml:"ScalingGroupActiveStatus,omitempty"`
	NodeCount                *int32   `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	SystemDiskType           *string  `json:"SystemDiskType,omitempty" xml:"SystemDiskType,omitempty"`
	ScalingGroupConfigState  *string  `json:"ScalingGroupConfigState,omitempty" xml:"ScalingGroupConfigState,omitempty"`
	HostGroupName            *string  `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
}

func (s ListClusterHostGroupResponseBodyHostGroupListHostGroup) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupResponseBodyHostGroupListHostGroup) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetStatus(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.Status = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupSubType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupSubType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetComment(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.Comment = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupMinNode(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupMinNode = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetVswitchId(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.VswitchId = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetSecurityGroupId(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupChangeStatus(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupChangeStatus = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetChargeType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ChargeType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetPayType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.PayType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetDataDiskType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.DataDiskType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetSystemDiskCount(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.SystemDiskCount = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetSystemDiskSize(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.SystemDiskSize = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupBizId(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupBizId = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetGmtModified(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.GmtModified = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetMemory(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.Memory = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupMaxNode(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupMaxNode = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupChangeType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupChangeType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetLockType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.LockType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingInMode(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingInMode = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetCostSavingPercent(v float32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.CostSavingPercent = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetDataDiskSize(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.DataDiskSize = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetLockReason(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.LockReason = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupId(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetGmtCreate(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.GmtCreate = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetInstanceType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.InstanceType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetCpu(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.Cpu = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetDataDiskCount(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.DataDiskCount = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupActiveStatus(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupActiveStatus = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetNodeCount(v int32) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.NodeCount = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetSystemDiskType(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.SystemDiskType = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetScalingGroupConfigState(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.ScalingGroupConfigState = &v
	return s
}

func (s *ListClusterHostGroupResponseBodyHostGroupListHostGroup) SetHostGroupName(v string) *ListClusterHostGroupResponseBodyHostGroupListHostGroup {
	s.HostGroupName = &v
	return s
}

type ListClusterHostGroupResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterHostGroupResponse) GoString() string {
	return s.String()
}

func (s *ListClusterHostGroupResponse) SetHeaders(v map[string]*string) *ListClusterHostGroupResponse {
	s.Headers = v
	return s
}

func (s *ListClusterHostGroupResponse) SetBody(v *ListClusterHostGroupResponseBody) *ListClusterHostGroupResponse {
	s.Body = v
	return s
}

type ListClusterInstalledServiceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterInstalledServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceRequest) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceRequest) SetResourceOwnerId(v int64) *ListClusterInstalledServiceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterInstalledServiceRequest) SetRegionId(v string) *ListClusterInstalledServiceRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterInstalledServiceRequest) SetClusterId(v string) *ListClusterInstalledServiceRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterInstalledServiceRequest) SetPageNumber(v int32) *ListClusterInstalledServiceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterInstalledServiceRequest) SetPageSize(v int32) *ListClusterInstalledServiceRequest {
	s.PageSize = &v
	return s
}

type ListClusterInstalledServiceResponseBody struct {
	RequestId                   *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterInstalledServiceList *ListClusterInstalledServiceResponseBodyClusterInstalledServiceList `json:"ClusterInstalledServiceList,omitempty" xml:"ClusterInstalledServiceList,omitempty" type:"Struct"`
}

func (s ListClusterInstalledServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBody) SetRequestId(v string) *ListClusterInstalledServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBody) SetClusterInstalledServiceList(v *ListClusterInstalledServiceResponseBodyClusterInstalledServiceList) *ListClusterInstalledServiceResponseBody {
	s.ClusterInstalledServiceList = v
	return s
}

type ListClusterInstalledServiceResponseBodyClusterInstalledServiceList struct {
	ClusterInstalledService []*ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService `json:"ClusterInstalledService,omitempty" xml:"ClusterInstalledService,omitempty" type:"Repeated"`
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceList) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceList) SetClusterInstalledService(v []*ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceList {
	s.ClusterInstalledService = v
	return s
}

type ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService struct {
	ServiceEcmVersion  *string                                                                                                     `json:"ServiceEcmVersion,omitempty" xml:"ServiceEcmVersion,omitempty"`
	ServiceDisplayName *string                                                                                                     `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceActionList  *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList `json:"ServiceActionList,omitempty" xml:"ServiceActionList,omitempty" type:"Struct"`
	NotStartedNum      *int32                                                                                                      `json:"notStartedNum,omitempty" xml:"notStartedNum,omitempty"`
	ServiceVersion     *string                                                                                                     `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	Comment            *string                                                                                                     `json:"comment,omitempty" xml:"comment,omitempty"`
	AbnormalNum        *int32                                                                                                      `json:"abnormalNum,omitempty" xml:"abnormalNum,omitempty"`
	ServiceName        *string                                                                                                     `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	OnlyClient         *bool                                                                                                       `json:"onlyClient,omitempty" xml:"onlyClient,omitempty"`
	ServiceStatus      *string                                                                                                     `json:"serviceStatus,omitempty" xml:"serviceStatus,omitempty"`
	NeedRestartNum     *int32                                                                                                      `json:"needRestartNum,omitempty" xml:"needRestartNum,omitempty"`
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceEcmVersion(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceEcmVersion = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceDisplayName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceActionList(v *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceActionList = v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetNotStartedNum(v int32) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.NotStartedNum = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceVersion(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceVersion = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetComment(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.Comment = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetAbnormalNum(v int32) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.AbnormalNum = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetOnlyClient(v bool) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.OnlyClient = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetServiceStatus(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.ServiceStatus = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService) SetNeedRestartNum(v int32) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledService {
	s.NeedRestartNum = &v
	return s
}

type ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList struct {
	ServiceAction []*ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction `json:"ServiceAction,omitempty" xml:"ServiceAction,omitempty" type:"Repeated"`
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList) SetServiceAction(v []*ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionList {
	s.ServiceAction = v
	return s
}

type ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction struct {
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	ComponentName *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	Command       *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ActionName    *string `json:"ActionName,omitempty" xml:"ActionName,omitempty"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetDisplayName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.DisplayName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetComponentName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.ComponentName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetCommand(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.Command = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetActionName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.ActionName = &v
	return s
}

func (s *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction) SetServiceName(v string) *ListClusterInstalledServiceResponseBodyClusterInstalledServiceListClusterInstalledServiceServiceActionListServiceAction {
	s.ServiceName = &v
	return s
}

type ListClusterInstalledServiceResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterInstalledServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterInstalledServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterInstalledServiceResponse) GoString() string {
	return s.String()
}

func (s *ListClusterInstalledServiceResponse) SetHeaders(v map[string]*string) *ListClusterInstalledServiceResponse {
	s.Headers = v
	return s
}

func (s *ListClusterInstalledServiceResponse) SetBody(v *ListClusterInstalledServiceResponseBody) *ListClusterInstalledServiceResponse {
	s.Body = v
	return s
}

type ListClusterOperationRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOperationRequest) SetResourceOwnerId(v int64) *ListClusterOperationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterOperationRequest) SetRegionId(v string) *ListClusterOperationRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterOperationRequest) SetClusterId(v string) *ListClusterOperationRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterOperationRequest) SetServiceName(v string) *ListClusterOperationRequest {
	s.ServiceName = &v
	return s
}

func (s *ListClusterOperationRequest) SetStatus(v string) *ListClusterOperationRequest {
	s.Status = &v
	return s
}

func (s *ListClusterOperationRequest) SetPageNumber(v int32) *ListClusterOperationRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationRequest) SetPageSize(v int32) *ListClusterOperationRequest {
	s.PageSize = &v
	return s
}

type ListClusterOperationResponseBody struct {
	ClusterOperationList *ListClusterOperationResponseBodyClusterOperationList `json:"ClusterOperationList,omitempty" xml:"ClusterOperationList,omitempty" type:"Struct"`
	TotalCount           *int32                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize             *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId            *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber           *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s ListClusterOperationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterOperationResponseBody) SetClusterOperationList(v *ListClusterOperationResponseBodyClusterOperationList) *ListClusterOperationResponseBody {
	s.ClusterOperationList = v
	return s
}

func (s *ListClusterOperationResponseBody) SetTotalCount(v int32) *ListClusterOperationResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListClusterOperationResponseBody) SetPageSize(v int32) *ListClusterOperationResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationResponseBody) SetRequestId(v string) *ListClusterOperationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterOperationResponseBody) SetPageNumber(v int32) *ListClusterOperationResponseBody {
	s.PageNumber = &v
	return s
}

type ListClusterOperationResponseBodyClusterOperationList struct {
	ClusterOperation []*ListClusterOperationResponseBodyClusterOperationListClusterOperation `json:"ClusterOperation,omitempty" xml:"ClusterOperation,omitempty" type:"Repeated"`
}

func (s ListClusterOperationResponseBodyClusterOperationList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationResponseBodyClusterOperationList) GoString() string {
	return s.String()
}

func (s *ListClusterOperationResponseBodyClusterOperationList) SetClusterOperation(v []*ListClusterOperationResponseBodyClusterOperationListClusterOperation) *ListClusterOperationResponseBodyClusterOperationList {
	s.ClusterOperation = v
	return s
}

type ListClusterOperationResponseBodyClusterOperationListClusterOperation struct {
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StartTime     *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Comment       *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	OperationName *string `json:"OperationName,omitempty" xml:"OperationName,omitempty"`
	OperationId   *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	Duration      *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Percentage    *string `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
}

func (s ListClusterOperationResponseBodyClusterOperationListClusterOperation) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationResponseBodyClusterOperationListClusterOperation) GoString() string {
	return s.String()
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetStatus(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.Status = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetStartTime(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.StartTime = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetComment(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.Comment = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetOperationName(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.OperationName = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetOperationId(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetDuration(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.Duration = &v
	return s
}

func (s *ListClusterOperationResponseBodyClusterOperationListClusterOperation) SetPercentage(v string) *ListClusterOperationResponseBodyClusterOperationListClusterOperation {
	s.Percentage = &v
	return s
}

type ListClusterOperationResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterOperationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOperationResponse) SetHeaders(v map[string]*string) *ListClusterOperationResponse {
	s.Headers = v
	return s
}

func (s *ListClusterOperationResponse) SetBody(v *ListClusterOperationResponseBody) *ListClusterOperationResponse {
	s.Body = v
	return s
}

type ListClusterOperationHostRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterOperationHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostRequest) SetResourceOwnerId(v int64) *ListClusterOperationHostRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetRegionId(v string) *ListClusterOperationHostRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetClusterId(v string) *ListClusterOperationHostRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetOperationId(v string) *ListClusterOperationHostRequest {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetStatus(v string) *ListClusterOperationHostRequest {
	s.Status = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetPageNumber(v int32) *ListClusterOperationHostRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationHostRequest) SetPageSize(v int32) *ListClusterOperationHostRequest {
	s.PageSize = &v
	return s
}

type ListClusterOperationHostResponseBody struct {
	TotalCount               *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize                 *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber               *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ClusterOperationHostList *ListClusterOperationHostResponseBodyClusterOperationHostList `json:"ClusterOperationHostList,omitempty" xml:"ClusterOperationHostList,omitempty" type:"Struct"`
}

func (s ListClusterOperationHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostResponseBody) SetTotalCount(v int32) *ListClusterOperationHostResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListClusterOperationHostResponseBody) SetPageSize(v int32) *ListClusterOperationHostResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationHostResponseBody) SetRequestId(v string) *ListClusterOperationHostResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterOperationHostResponseBody) SetPageNumber(v int32) *ListClusterOperationHostResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationHostResponseBody) SetClusterOperationHostList(v *ListClusterOperationHostResponseBodyClusterOperationHostList) *ListClusterOperationHostResponseBody {
	s.ClusterOperationHostList = v
	return s
}

type ListClusterOperationHostResponseBodyClusterOperationHostList struct {
	ClusterOperationHost []*ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost `json:"ClusterOperationHost,omitempty" xml:"ClusterOperationHost,omitempty" type:"Repeated"`
}

func (s ListClusterOperationHostResponseBodyClusterOperationHostList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostResponseBodyClusterOperationHostList) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostList) SetClusterOperationHost(v []*ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) *ListClusterOperationHostResponseBodyClusterOperationHostList {
	s.ClusterOperationHost = v
	return s
}

type ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost struct {
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	HostName   *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Percentage *string `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	HostId     *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
}

func (s ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) SetStatus(v string) *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost {
	s.Status = &v
	return s
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) SetHostName(v string) *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost {
	s.HostName = &v
	return s
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) SetPercentage(v string) *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost {
	s.Percentage = &v
	return s
}

func (s *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost) SetHostId(v string) *ListClusterOperationHostResponseBodyClusterOperationHostListClusterOperationHost {
	s.HostId = &v
	return s
}

type ListClusterOperationHostResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterOperationHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterOperationHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostResponse) SetHeaders(v map[string]*string) *ListClusterOperationHostResponse {
	s.Headers = v
	return s
}

func (s *ListClusterOperationHostResponse) SetBody(v *ListClusterOperationHostResponseBody) *ListClusterOperationHostResponse {
	s.Body = v
	return s
}

type ListClusterOperationHostTaskRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	HostId          *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterOperationHostTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskRequest) SetResourceOwnerId(v int64) *ListClusterOperationHostTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetRegionId(v string) *ListClusterOperationHostTaskRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetClusterId(v string) *ListClusterOperationHostTaskRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetOperationId(v string) *ListClusterOperationHostTaskRequest {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetHostId(v string) *ListClusterOperationHostTaskRequest {
	s.HostId = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetStatus(v string) *ListClusterOperationHostTaskRequest {
	s.Status = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetPageNumber(v int32) *ListClusterOperationHostTaskRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationHostTaskRequest) SetPageSize(v int32) *ListClusterOperationHostTaskRequest {
	s.PageSize = &v
	return s
}

type ListClusterOperationHostTaskResponseBody struct {
	TotalCount                   *int32                                                                `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize                     *int32                                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                    *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber                   *int32                                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ClusterOperationHostTaskList *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList `json:"ClusterOperationHostTaskList,omitempty" xml:"ClusterOperationHostTaskList,omitempty" type:"Struct"`
}

func (s ListClusterOperationHostTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskResponseBody) SetTotalCount(v int32) *ListClusterOperationHostTaskResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBody) SetPageSize(v int32) *ListClusterOperationHostTaskResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBody) SetRequestId(v string) *ListClusterOperationHostTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBody) SetPageNumber(v int32) *ListClusterOperationHostTaskResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBody) SetClusterOperationHostTaskList(v *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList) *ListClusterOperationHostTaskResponseBody {
	s.ClusterOperationHostTaskList = v
	return s
}

type ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList struct {
	ClusterOperationHostTask []*ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask `json:"ClusterOperationHostTask,omitempty" xml:"ClusterOperationHostTask,omitempty" type:"Repeated"`
}

func (s ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList) SetClusterOperationHostTask(v []*ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskList {
	s.ClusterOperationHostTask = v
	return s
}

type ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask struct {
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskName   *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	Percentage *string `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) SetStatus(v string) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask {
	s.Status = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) SetTaskName(v string) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask {
	s.TaskName = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) SetPercentage(v string) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask {
	s.Percentage = &v
	return s
}

func (s *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask) SetTaskId(v string) *ListClusterOperationHostTaskResponseBodyClusterOperationHostTaskListClusterOperationHostTask {
	s.TaskId = &v
	return s
}

type ListClusterOperationHostTaskResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterOperationHostTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterOperationHostTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationHostTaskResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOperationHostTaskResponse) SetHeaders(v map[string]*string) *ListClusterOperationHostTaskResponse {
	s.Headers = v
	return s
}

func (s *ListClusterOperationHostTaskResponse) SetBody(v *ListClusterOperationHostTaskResponseBody) *ListClusterOperationHostTaskResponse {
	s.Body = v
	return s
}

type ListClusterOperationTaskRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterOperationTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskRequest) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskRequest) SetResourceOwnerId(v int64) *ListClusterOperationTaskRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetRegionId(v string) *ListClusterOperationTaskRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetClusterId(v string) *ListClusterOperationTaskRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetOperationId(v string) *ListClusterOperationTaskRequest {
	s.OperationId = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetStatus(v string) *ListClusterOperationTaskRequest {
	s.Status = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetPageNumber(v int32) *ListClusterOperationTaskRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationTaskRequest) SetPageSize(v int32) *ListClusterOperationTaskRequest {
	s.PageSize = &v
	return s
}

type ListClusterOperationTaskResponseBody struct {
	TotalCount               *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize                 *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId                *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber               *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ClusterOperationTaskList *ListClusterOperationTaskResponseBodyClusterOperationTaskList `json:"ClusterOperationTaskList,omitempty" xml:"ClusterOperationTaskList,omitempty" type:"Struct"`
}

func (s ListClusterOperationTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskResponseBody) SetTotalCount(v int32) *ListClusterOperationTaskResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListClusterOperationTaskResponseBody) SetPageSize(v int32) *ListClusterOperationTaskResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterOperationTaskResponseBody) SetRequestId(v string) *ListClusterOperationTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterOperationTaskResponseBody) SetPageNumber(v int32) *ListClusterOperationTaskResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterOperationTaskResponseBody) SetClusterOperationTaskList(v *ListClusterOperationTaskResponseBodyClusterOperationTaskList) *ListClusterOperationTaskResponseBody {
	s.ClusterOperationTaskList = v
	return s
}

type ListClusterOperationTaskResponseBodyClusterOperationTaskList struct {
	ClusterOperationTask []*ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask `json:"ClusterOperationTask,omitempty" xml:"ClusterOperationTask,omitempty" type:"Repeated"`
}

func (s ListClusterOperationTaskResponseBodyClusterOperationTaskList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskResponseBodyClusterOperationTaskList) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskList) SetClusterOperationTask(v []*ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) *ListClusterOperationTaskResponseBodyClusterOperationTaskList {
	s.ClusterOperationTask = v
	return s
}

type ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask struct {
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskName   *string `json:"TaskName,omitempty" xml:"TaskName,omitempty"`
	Percentage *string `json:"Percentage,omitempty" xml:"Percentage,omitempty"`
	TaskId     *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) SetStatus(v string) *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask {
	s.Status = &v
	return s
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) SetTaskName(v string) *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask {
	s.TaskName = &v
	return s
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) SetPercentage(v string) *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask {
	s.Percentage = &v
	return s
}

func (s *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask) SetTaskId(v string) *ListClusterOperationTaskResponseBodyClusterOperationTaskListClusterOperationTask {
	s.TaskId = &v
	return s
}

type ListClusterOperationTaskResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterOperationTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterOperationTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterOperationTaskResponse) GoString() string {
	return s.String()
}

func (s *ListClusterOperationTaskResponse) SetHeaders(v map[string]*string) *ListClusterOperationTaskResponse {
	s.Headers = v
	return s
}

func (s *ListClusterOperationTaskResponse) SetBody(v *ListClusterOperationTaskResponseBody) *ListClusterOperationTaskResponse {
	s.Body = v
	return s
}

type ListClustersRequest struct {
	ResourceOwnerId *int64                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	CreateType      *string                   `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	MachineType     *string                   `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	IsDesc          *bool                     `json:"IsDesc,omitempty" xml:"IsDesc,omitempty"`
	DepositType     *string                   `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	PageNumber      *int32                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	DefaultStatus   *bool                     `json:"DefaultStatus,omitempty" xml:"DefaultStatus,omitempty"`
	Name            *string                   `json:"Name,omitempty" xml:"Name,omitempty"`
	ResourceGroupId *string                   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ClusterTypeList []*string                 `json:"ClusterTypeList,omitempty" xml:"ClusterTypeList,omitempty" type:"Repeated"`
	StatusList      []*string                 `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
	Tag             []*ListClustersRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
	ExpiredTagList  []*string                 `json:"ExpiredTagList,omitempty" xml:"ExpiredTagList,omitempty" type:"Repeated"`
}

func (s ListClustersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClustersRequest) GoString() string {
	return s.String()
}

func (s *ListClustersRequest) SetResourceOwnerId(v int64) *ListClustersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClustersRequest) SetRegionId(v string) *ListClustersRequest {
	s.RegionId = &v
	return s
}

func (s *ListClustersRequest) SetCreateType(v string) *ListClustersRequest {
	s.CreateType = &v
	return s
}

func (s *ListClustersRequest) SetMachineType(v string) *ListClustersRequest {
	s.MachineType = &v
	return s
}

func (s *ListClustersRequest) SetIsDesc(v bool) *ListClustersRequest {
	s.IsDesc = &v
	return s
}

func (s *ListClustersRequest) SetDepositType(v string) *ListClustersRequest {
	s.DepositType = &v
	return s
}

func (s *ListClustersRequest) SetPageNumber(v int32) *ListClustersRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClustersRequest) SetPageSize(v int32) *ListClustersRequest {
	s.PageSize = &v
	return s
}

func (s *ListClustersRequest) SetDefaultStatus(v bool) *ListClustersRequest {
	s.DefaultStatus = &v
	return s
}

func (s *ListClustersRequest) SetName(v string) *ListClustersRequest {
	s.Name = &v
	return s
}

func (s *ListClustersRequest) SetResourceGroupId(v string) *ListClustersRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListClustersRequest) SetClusterTypeList(v []*string) *ListClustersRequest {
	s.ClusterTypeList = v
	return s
}

func (s *ListClustersRequest) SetStatusList(v []*string) *ListClustersRequest {
	s.StatusList = v
	return s
}

func (s *ListClustersRequest) SetTag(v []*ListClustersRequestTag) *ListClustersRequest {
	s.Tag = v
	return s
}

func (s *ListClustersRequest) SetExpiredTagList(v []*string) *ListClustersRequest {
	s.ExpiredTagList = v
	return s
}

type ListClustersRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListClustersRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListClustersRequestTag) GoString() string {
	return s.String()
}

func (s *ListClustersRequestTag) SetKey(v string) *ListClustersRequestTag {
	s.Key = &v
	return s
}

func (s *ListClustersRequestTag) SetValue(v string) *ListClustersRequestTag {
	s.Value = &v
	return s
}

type ListClustersResponseBody struct {
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Clusters   *ListClustersResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Struct"`
}

func (s ListClustersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBody) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBody) SetTotalCount(v int32) *ListClustersResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListClustersResponseBody) SetPageSize(v int32) *ListClustersResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClustersResponseBody) SetRequestId(v string) *ListClustersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClustersResponseBody) SetPageNumber(v int32) *ListClustersResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClustersResponseBody) SetClusters(v *ListClustersResponseBodyClusters) *ListClustersResponseBody {
	s.Clusters = v
	return s
}

type ListClustersResponseBodyClusters struct {
	ClusterInfo []*ListClustersResponseBodyClustersClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Repeated"`
}

func (s ListClustersResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClusters) SetClusterInfo(v []*ListClustersResponseBodyClustersClusterInfo) *ListClustersResponseBodyClusters {
	s.ClusterInfo = v
	return s
}

type ListClustersResponseBodyClustersClusterInfo struct {
	Type                *string                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	Status              *string                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	RunningTime         *int32                                                    `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	MachineType         *string                                                   `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	OrderList           *string                                                   `json:"OrderList,omitempty" xml:"OrderList,omitempty"`
	MetaStoreType       *string                                                   `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	CreateTime          *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ChargeType          *string                                                   `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Tags                *ListClustersResponseBodyClustersClusterInfoTags          `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	OperationId         *int64                                                    `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
	DepositType         *string                                                   `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	Period              *int32                                                    `json:"Period,omitempty" xml:"Period,omitempty"`
	K8sClusterId        *string                                                   `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	ExpiredTime         *int64                                                    `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	HasUncompletedOrder *bool                                                     `json:"HasUncompletedOrder,omitempty" xml:"HasUncompletedOrder,omitempty"`
	OrderTaskInfo       *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo `json:"OrderTaskInfo,omitempty" xml:"OrderTaskInfo,omitempty" type:"Struct"`
	Name                *string                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	CreateResource      *string                                                   `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	Id                  *string                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	FailReason          *ListClustersResponseBodyClustersClusterInfoFailReason    `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
}

func (s ListClustersResponseBodyClustersClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfo) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.Type = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetStatus(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.Status = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetRunningTime(v int32) *ListClustersResponseBodyClustersClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetMachineType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.MachineType = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetOrderList(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.OrderList = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetMetaStoreType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.MetaStoreType = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetCreateTime(v int64) *ListClustersResponseBodyClustersClusterInfo {
	s.CreateTime = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetChargeType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetTags(v *ListClustersResponseBodyClustersClusterInfoTags) *ListClustersResponseBodyClustersClusterInfo {
	s.Tags = v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetOperationId(v int64) *ListClustersResponseBodyClustersClusterInfo {
	s.OperationId = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetDepositType(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.DepositType = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetPeriod(v int32) *ListClustersResponseBodyClustersClusterInfo {
	s.Period = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetK8sClusterId(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetExpiredTime(v int64) *ListClustersResponseBodyClustersClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetHasUncompletedOrder(v bool) *ListClustersResponseBodyClustersClusterInfo {
	s.HasUncompletedOrder = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetOrderTaskInfo(v *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) *ListClustersResponseBodyClustersClusterInfo {
	s.OrderTaskInfo = v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetName(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.Name = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetCreateResource(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetId(v string) *ListClustersResponseBodyClustersClusterInfo {
	s.Id = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfo) SetFailReason(v *ListClustersResponseBodyClustersClusterInfoFailReason) *ListClustersResponseBodyClustersClusterInfo {
	s.FailReason = v
	return s
}

type ListClustersResponseBodyClustersClusterInfoTags struct {
	Tag []*ListClustersResponseBodyClustersClusterInfoTagsTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListClustersResponseBodyClustersClusterInfoTags) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfoTags) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfoTags) SetTag(v []*ListClustersResponseBodyClustersClusterInfoTagsTag) *ListClustersResponseBodyClustersClusterInfoTags {
	s.Tag = v
	return s
}

type ListClustersResponseBodyClustersClusterInfoTagsTag struct {
	TagValue *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	TagKey   *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s ListClustersResponseBodyClustersClusterInfoTagsTag) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfoTagsTag) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfoTagsTag) SetTagValue(v string) *ListClustersResponseBodyClustersClusterInfoTagsTag {
	s.TagValue = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoTagsTag) SetTagKey(v string) *ListClustersResponseBodyClustersClusterInfoTagsTag {
	s.TagKey = &v
	return s
}

type ListClustersResponseBodyClustersClusterInfoOrderTaskInfo struct {
	CurrentCount *int32  `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	OrderIdList  *string `json:"OrderIdList,omitempty" xml:"OrderIdList,omitempty"`
	TargetCount  *int32  `json:"TargetCount,omitempty" xml:"TargetCount,omitempty"`
}

func (s ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) SetCurrentCount(v int32) *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo {
	s.CurrentCount = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) SetOrderIdList(v string) *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo {
	s.OrderIdList = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo) SetTargetCount(v int32) *ListClustersResponseBodyClustersClusterInfoOrderTaskInfo {
	s.TargetCount = &v
	return s
}

type ListClustersResponseBodyClustersClusterInfoFailReason struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
}

func (s ListClustersResponseBodyClustersClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponseBodyClustersClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *ListClustersResponseBodyClustersClusterInfoFailReason) SetRequestId(v string) *ListClustersResponseBodyClustersClusterInfoFailReason {
	s.RequestId = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoFailReason) SetErrorCode(v string) *ListClustersResponseBodyClustersClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *ListClustersResponseBodyClustersClusterInfoFailReason) SetErrorMsg(v string) *ListClustersResponseBodyClustersClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

type ListClustersResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClustersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClustersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClustersResponse) GoString() string {
	return s.String()
}

func (s *ListClustersResponse) SetHeaders(v map[string]*string) *ListClustersResponse {
	s.Headers = v
	return s
}

func (s *ListClustersResponse) SetBody(v *ListClustersResponseBody) *ListClustersResponse {
	s.Body = v
	return s
}

type ListClusterServiceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterServiceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceRequest) SetResourceOwnerId(v int64) *ListClusterServiceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterServiceRequest) SetRegionId(v string) *ListClusterServiceRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceRequest) SetClusterId(v string) *ListClusterServiceRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceRequest) SetPageNumber(v int32) *ListClusterServiceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceRequest) SetPageSize(v int32) *ListClusterServiceRequest {
	s.PageSize = &v
	return s
}

type ListClusterServiceResponseBody struct {
	TotalCount         *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize           *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber         *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ClusterServiceList *ListClusterServiceResponseBodyClusterServiceList `json:"ClusterServiceList,omitempty" xml:"ClusterServiceList,omitempty" type:"Struct"`
}

func (s ListClusterServiceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBody) SetTotalCount(v int32) *ListClusterServiceResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListClusterServiceResponseBody) SetPageSize(v int32) *ListClusterServiceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterServiceResponseBody) SetRequestId(v string) *ListClusterServiceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterServiceResponseBody) SetPageNumber(v int32) *ListClusterServiceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceResponseBody) SetClusterServiceList(v *ListClusterServiceResponseBodyClusterServiceList) *ListClusterServiceResponseBody {
	s.ClusterServiceList = v
	return s
}

type ListClusterServiceResponseBodyClusterServiceList struct {
	ClusterService []*ListClusterServiceResponseBodyClusterServiceListClusterService `json:"ClusterService,omitempty" xml:"ClusterService,omitempty" type:"Repeated"`
}

func (s ListClusterServiceResponseBodyClusterServiceList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBodyClusterServiceList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBodyClusterServiceList) SetClusterService(v []*ListClusterServiceResponseBodyClusterServiceListClusterService) *ListClusterServiceResponseBodyClusterServiceList {
	s.ClusterService = v
	return s
}

type ListClusterServiceResponseBodyClusterServiceListClusterService struct {
	ServiceDisplayName *string                                                                          `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	NotStartInfo       *string                                                                          `json:"NotStartInfo,omitempty" xml:"NotStartInfo,omitempty"`
	ClientType         *bool                                                                            `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	InstallStatus      *bool                                                                            `json:"InstallStatus,omitempty" xml:"InstallStatus,omitempty"`
	ServiceActionList  *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList `json:"ServiceActionList,omitempty" xml:"ServiceActionList,omitempty" type:"Struct"`
	NeedRestartNum     *int32                                                                           `json:"NeedRestartNum,omitempty" xml:"NeedRestartNum,omitempty"`
	ServiceStatus      *string                                                                          `json:"ServiceStatus,omitempty" xml:"ServiceStatus,omitempty"`
	HealthStatus       *string                                                                          `json:"HealthStatus,omitempty" xml:"HealthStatus,omitempty"`
	NeedRestartInfo    *string                                                                          `json:"NeedRestartInfo,omitempty" xml:"NeedRestartInfo,omitempty"`
	StoppedNum         *int32                                                                           `json:"StoppedNum,omitempty" xml:"StoppedNum,omitempty"`
	ServiceVersion     *string                                                                          `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	ServiceName        *string                                                                          `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	AbnormalNum        *int32                                                                           `json:"AbnormalNum,omitempty" xml:"AbnormalNum,omitempty"`
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterService) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterService) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceDisplayName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetNotStartInfo(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.NotStartInfo = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetClientType(v bool) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ClientType = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetInstallStatus(v bool) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.InstallStatus = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceActionList(v *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceActionList = v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetNeedRestartNum(v int32) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.NeedRestartNum = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceStatus(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceStatus = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetHealthStatus(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.HealthStatus = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetNeedRestartInfo(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.NeedRestartInfo = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetStoppedNum(v int32) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.StoppedNum = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceVersion(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceVersion = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetServiceName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterService) SetAbnormalNum(v int32) *ListClusterServiceResponseBodyClusterServiceListClusterService {
	s.AbnormalNum = &v
	return s
}

type ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList struct {
	ServiceAction []*ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction `json:"ServiceAction,omitempty" xml:"ServiceAction,omitempty" type:"Repeated"`
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList) SetServiceAction(v []*ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionList {
	s.ServiceAction = v
	return s
}

type ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction struct {
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	ComponentName *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	Command       *string `json:"Command,omitempty" xml:"Command,omitempty"`
	ActionName    *string `json:"ActionName,omitempty" xml:"ActionName,omitempty"`
	ServiceName   *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetDisplayName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.DisplayName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetComponentName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.ComponentName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetCommand(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.Command = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetActionName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.ActionName = &v
	return s
}

func (s *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction) SetServiceName(v string) *ListClusterServiceResponseBodyClusterServiceListClusterServiceServiceActionListServiceAction {
	s.ServiceName = &v
	return s
}

type ListClusterServiceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterServiceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterServiceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceResponse) SetHeaders(v map[string]*string) *ListClusterServiceResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceResponse) SetBody(v *ListClusterServiceResponseBody) *ListClusterServiceResponse {
	s.Body = v
	return s
}

type ListClusterServiceComponentRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PodName         *string `json:"PodName,omitempty" xml:"PodName,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ComponentName   *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	ComponentStatus *string `json:"ComponentStatus,omitempty" xml:"ComponentStatus,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterServiceComponentRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentRequest) SetResourceOwnerId(v int64) *ListClusterServiceComponentRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterServiceComponentRequest) SetRegionId(v string) *ListClusterServiceComponentRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceComponentRequest) SetClusterId(v string) *ListClusterServiceComponentRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceComponentRequest) SetPodName(v string) *ListClusterServiceComponentRequest {
	s.PodName = &v
	return s
}

func (s *ListClusterServiceComponentRequest) SetServiceName(v string) *ListClusterServiceComponentRequest {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceComponentRequest) SetComponentName(v string) *ListClusterServiceComponentRequest {
	s.ComponentName = &v
	return s
}

func (s *ListClusterServiceComponentRequest) SetComponentStatus(v string) *ListClusterServiceComponentRequest {
	s.ComponentStatus = &v
	return s
}

func (s *ListClusterServiceComponentRequest) SetPageNumber(v int32) *ListClusterServiceComponentRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceComponentRequest) SetPageSize(v int32) *ListClusterServiceComponentRequest {
	s.PageSize = &v
	return s
}

type ListClusterServiceComponentResponseBody struct {
	RequestId     *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize      *int32                                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber    *int32                                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total         *int32                                                `json:"Total,omitempty" xml:"Total,omitempty"`
	ComponentList *ListClusterServiceComponentResponseBodyComponentList `json:"ComponentList,omitempty" xml:"ComponentList,omitempty" type:"Struct"`
}

func (s ListClusterServiceComponentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentResponseBody) SetRequestId(v string) *ListClusterServiceComponentResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterServiceComponentResponseBody) SetPageSize(v int32) *ListClusterServiceComponentResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterServiceComponentResponseBody) SetPageNumber(v int32) *ListClusterServiceComponentResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceComponentResponseBody) SetTotal(v int32) *ListClusterServiceComponentResponseBody {
	s.Total = &v
	return s
}

func (s *ListClusterServiceComponentResponseBody) SetComponentList(v *ListClusterServiceComponentResponseBodyComponentList) *ListClusterServiceComponentResponseBody {
	s.ComponentList = v
	return s
}

type ListClusterServiceComponentResponseBodyComponentList struct {
	Component []*ListClusterServiceComponentResponseBodyComponentListComponent `json:"Component,omitempty" xml:"Component,omitempty" type:"Repeated"`
}

func (s ListClusterServiceComponentResponseBodyComponentList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentResponseBodyComponentList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentResponseBodyComponentList) SetComponent(v []*ListClusterServiceComponentResponseBodyComponentListComponent) *ListClusterServiceComponentResponseBodyComponentList {
	s.Component = v
	return s
}

type ListClusterServiceComponentResponseBodyComponentListComponent struct {
	Status               *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ServiceDisplayName   *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	PrivateIp            *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	ServerStatus         *string `json:"ServerStatus,omitempty" xml:"ServerStatus,omitempty"`
	PodName              *string `json:"PodName,omitempty" xml:"PodName,omitempty"`
	ComponentName        *string `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	CommissionStatus     *string `json:"CommissionStatus,omitempty" xml:"CommissionStatus,omitempty"`
	Namespace            *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	NeedRestart          *bool   `json:"NeedRestart,omitempty" xml:"NeedRestart,omitempty"`
	WorkloadType         *string `json:"WorkloadType,omitempty" xml:"WorkloadType,omitempty"`
	WorkloadName         *string `json:"WorkloadName,omitempty" xml:"WorkloadName,omitempty"`
	ComponentDisplayName *string `json:"ComponentDisplayName,omitempty" xml:"ComponentDisplayName,omitempty"`
	PublicIp             *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	ServiceName          *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	DesiredCount         *int32  `json:"DesiredCount,omitempty" xml:"DesiredCount,omitempty"`
}

func (s ListClusterServiceComponentResponseBodyComponentListComponent) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentResponseBodyComponentListComponent) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetStatus(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.Status = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetServiceDisplayName(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetPrivateIp(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.PrivateIp = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetServerStatus(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.ServerStatus = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetPodName(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.PodName = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetComponentName(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.ComponentName = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetCommissionStatus(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.CommissionStatus = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetNamespace(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.Namespace = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetNeedRestart(v bool) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.NeedRestart = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetWorkloadType(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.WorkloadType = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetWorkloadName(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.WorkloadName = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetComponentDisplayName(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.ComponentDisplayName = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetPublicIp(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.PublicIp = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetServiceName(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetRole(v string) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.Role = &v
	return s
}

func (s *ListClusterServiceComponentResponseBodyComponentListComponent) SetDesiredCount(v int32) *ListClusterServiceComponentResponseBodyComponentListComponent {
	s.DesiredCount = &v
	return s
}

type ListClusterServiceComponentResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterServiceComponentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterServiceComponentResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentResponse) SetHeaders(v map[string]*string) *ListClusterServiceComponentResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceComponentResponse) SetBody(v *ListClusterServiceComponentResponseBody) *ListClusterServiceComponentResponse {
	s.Body = v
	return s
}

type ListClusterServiceComponentHealthInfoRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetResourceOwnerId(v int64) *ListClusterServiceComponentHealthInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetRegionId(v string) *ListClusterServiceComponentHealthInfoRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetClusterId(v string) *ListClusterServiceComponentHealthInfoRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoRequest) SetServiceName(v string) *ListClusterServiceComponentHealthInfoRequest {
	s.ServiceName = &v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBody struct {
	RequestId      *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId      *string                                                          `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HealthInfoList *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList `json:"HealthInfoList,omitempty" xml:"HealthInfoList,omitempty" type:"Struct"`
}

func (s ListClusterServiceComponentHealthInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBody) SetRequestId(v string) *ListClusterServiceComponentHealthInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBody) SetClusterId(v string) *ListClusterServiceComponentHealthInfoResponseBody {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBody) SetHealthInfoList(v *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList) *ListClusterServiceComponentHealthInfoResponseBody {
	s.HealthInfoList = v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList struct {
	HealthInfo []*ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo `json:"HealthInfo,omitempty" xml:"HealthInfo,omitempty" type:"Repeated"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList) SetHealthInfo(v []*ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoList {
	s.HealthInfo = v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo struct {
	HealthLevel           *string                                                                                    `json:"HealthLevel,omitempty" xml:"HealthLevel,omitempty"`
	HealthDetailList      *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList `json:"HealthDetailList,omitempty" xml:"HealthDetailList,omitempty" type:"Struct"`
	ComponentName         *string                                                                                    `json:"ComponentName,omitempty" xml:"ComponentName,omitempty"`
	NormalNum             *int32                                                                                     `json:"NormalNum,omitempty" xml:"NormalNum,omitempty"`
	ManualStoppedNum      *int32                                                                                     `json:"ManualStoppedNum,omitempty" xml:"ManualStoppedNum,omitempty"`
	StoppedNum            *int32                                                                                     `json:"StoppedNum,omitempty" xml:"StoppedNum,omitempty"`
	AgentHeartBeatLostNum *int32                                                                                     `json:"AgentHeartBeatLostNum,omitempty" xml:"AgentHeartBeatLostNum,omitempty"`
	TotalNum              *int32                                                                                     `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	ServiceName           *string                                                                                    `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	CreatedTime           *int64                                                                                     `json:"CreatedTime,omitempty" xml:"CreatedTime,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetHealthLevel(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.HealthLevel = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetHealthDetailList(v *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.HealthDetailList = v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetComponentName(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.ComponentName = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetNormalNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.NormalNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetManualStoppedNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.ManualStoppedNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetStoppedNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.StoppedNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetAgentHeartBeatLostNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.AgentHeartBeatLostNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetTotalNum(v int32) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.TotalNum = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetServiceName(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo) SetCreatedTime(v int64) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfo {
	s.CreatedTime = &v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList struct {
	HealthDetail []*ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail `json:"HealthDetail,omitempty" xml:"HealthDetail,omitempty" type:"Repeated"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList) SetHealthDetail(v []*ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailList {
	s.HealthDetail = v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail struct {
	Code            *string                                                                                                               `json:"code,omitempty" xml:"code,omitempty"`
	HealthRuleParam *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam `json:"HealthRuleParam,omitempty" xml:"HealthRuleParam,omitempty" type:"Struct"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) SetCode(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail {
	s.Code = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail) SetHealthRuleParam(v *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetail {
	s.HealthRuleParam = v
	return s
}

type ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam struct {
	Service         *string `json:"Service,omitempty" xml:"Service,omitempty"`
	Pass            *string `json:"Pass,omitempty" xml:"Pass,omitempty"`
	Component       *string `json:"Component,omitempty" xml:"Component,omitempty"`
	HostNames       *string `json:"HostNames,omitempty" xml:"HostNames,omitempty"`
	RuleTitle       *string `json:"RuleTitle,omitempty" xml:"RuleTitle,omitempty"`
	RuleDescription *string `json:"RuleDescription,omitempty" xml:"RuleDescription,omitempty"`
	RuleId          *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetService(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.Service = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetPass(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.Pass = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetComponent(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.Component = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetHostNames(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.HostNames = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetRuleTitle(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.RuleTitle = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetRuleDescription(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.RuleDescription = &v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam) SetRuleId(v string) *ListClusterServiceComponentHealthInfoResponseBodyHealthInfoListHealthInfoHealthDetailListHealthDetailHealthRuleParam {
	s.RuleId = &v
	return s
}

type ListClusterServiceComponentHealthInfoResponse struct {
	Headers map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterServiceComponentHealthInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterServiceComponentHealthInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceComponentHealthInfoResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceComponentHealthInfoResponse) SetHeaders(v map[string]*string) *ListClusterServiceComponentHealthInfoResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceComponentHealthInfoResponse) SetBody(v *ListClusterServiceComponentHealthInfoResponseBody) *ListClusterServiceComponentHealthInfoResponse {
	s.Body = v
	return s
}

type ListClusterServiceConfigHistoryRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigVersion   *string `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostInstanceId  *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	ConfigFileName  *string `json:"ConfigFileName,omitempty" xml:"ConfigFileName,omitempty"`
	ConfigItemKey   *string `json:"ConfigItemKey,omitempty" xml:"ConfigItemKey,omitempty"`
	Author          *string `json:"Author,omitempty" xml:"Author,omitempty"`
	Comment         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListClusterServiceConfigHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryRequest) SetResourceOwnerId(v int64) *ListClusterServiceConfigHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetRegionId(v string) *ListClusterServiceConfigHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetClusterId(v string) *ListClusterServiceConfigHistoryRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetServiceName(v string) *ListClusterServiceConfigHistoryRequest {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetConfigVersion(v string) *ListClusterServiceConfigHistoryRequest {
	s.ConfigVersion = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetHostGroupId(v string) *ListClusterServiceConfigHistoryRequest {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetHostInstanceId(v string) *ListClusterServiceConfigHistoryRequest {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetConfigFileName(v string) *ListClusterServiceConfigHistoryRequest {
	s.ConfigFileName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetConfigItemKey(v string) *ListClusterServiceConfigHistoryRequest {
	s.ConfigItemKey = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetAuthor(v string) *ListClusterServiceConfigHistoryRequest {
	s.Author = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetComment(v string) *ListClusterServiceConfigHistoryRequest {
	s.Comment = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetPageNumber(v int32) *ListClusterServiceConfigHistoryRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterServiceConfigHistoryRequest) SetPageSize(v int32) *ListClusterServiceConfigHistoryRequest {
	s.PageSize = &v
	return s
}

type ListClusterServiceConfigHistoryResponseBody struct {
	TotalCount        *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	ConfigHistoryList *ListClusterServiceConfigHistoryResponseBodyConfigHistoryList `json:"ConfigHistoryList,omitempty" xml:"ConfigHistoryList,omitempty" type:"Struct"`
	PageSize          *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber        *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s ListClusterServiceConfigHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetTotalCount(v int32) *ListClusterServiceConfigHistoryResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetConfigHistoryList(v *ListClusterServiceConfigHistoryResponseBodyConfigHistoryList) *ListClusterServiceConfigHistoryResponseBody {
	s.ConfigHistoryList = v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetPageSize(v int32) *ListClusterServiceConfigHistoryResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetRequestId(v string) *ListClusterServiceConfigHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBody) SetPageNumber(v int32) *ListClusterServiceConfigHistoryResponseBody {
	s.PageNumber = &v
	return s
}

type ListClusterServiceConfigHistoryResponseBodyConfigHistoryList struct {
	ConfigHistory []*ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory `json:"ConfigHistory,omitempty" xml:"ConfigHistory,omitempty" type:"Repeated"`
}

func (s ListClusterServiceConfigHistoryResponseBodyConfigHistoryList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryResponseBodyConfigHistoryList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryList) SetConfigHistory(v []*ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryList {
	s.ConfigHistory = v
	return s
}

type ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory struct {
	OldValue       *string `json:"OldValue,omitempty" xml:"OldValue,omitempty"`
	Comment        *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Author         *string `json:"Author,omitempty" xml:"Author,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ConfigItemName *string `json:"ConfigItemName,omitempty" xml:"ConfigItemName,omitempty"`
	HostGroupId    *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	NewValue       *string `json:"NewValue,omitempty" xml:"NewValue,omitempty"`
	HostInstanceId *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	ConfigFileName *string `json:"ConfigFileName,omitempty" xml:"ConfigFileName,omitempty"`
	Applied        *bool   `json:"Applied,omitempty" xml:"Applied,omitempty"`
	ConfigVersion  *string `json:"ConfigVersion,omitempty" xml:"ConfigVersion,omitempty"`
	ServiceName    *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	HostGroupName  *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
}

func (s ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetOldValue(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.OldValue = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetComment(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.Comment = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetCreateTime(v int64) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.CreateTime = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetAuthor(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.Author = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetHostName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.HostName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetConfigItemName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.ConfigItemName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetHostGroupId(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetNewValue(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.NewValue = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetHostInstanceId(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.HostInstanceId = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetConfigFileName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.ConfigFileName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetApplied(v bool) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.Applied = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetConfigVersion(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.ConfigVersion = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetServiceName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory) SetHostGroupName(v string) *ListClusterServiceConfigHistoryResponseBodyConfigHistoryListConfigHistory {
	s.HostGroupName = &v
	return s
}

type ListClusterServiceConfigHistoryResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterServiceConfigHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterServiceConfigHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceConfigHistoryResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceConfigHistoryResponse) SetHeaders(v map[string]*string) *ListClusterServiceConfigHistoryResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceConfigHistoryResponse) SetBody(v *ListClusterServiceConfigHistoryResponseBody) *ListClusterServiceConfigHistoryResponse {
	s.Body = v
	return s
}

type ListClusterServiceQuickLinkRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName     *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	DirectType      *bool   `json:"DirectType,omitempty" xml:"DirectType,omitempty"`
}

func (s ListClusterServiceQuickLinkRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkRequest) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkRequest) SetResourceOwnerId(v int64) *ListClusterServiceQuickLinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterServiceQuickLinkRequest) SetRegionId(v string) *ListClusterServiceQuickLinkRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterServiceQuickLinkRequest) SetClusterId(v string) *ListClusterServiceQuickLinkRequest {
	s.ClusterId = &v
	return s
}

func (s *ListClusterServiceQuickLinkRequest) SetServiceName(v string) *ListClusterServiceQuickLinkRequest {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceQuickLinkRequest) SetDirectType(v bool) *ListClusterServiceQuickLinkRequest {
	s.DirectType = &v
	return s
}

type ListClusterServiceQuickLinkResponseBody struct {
	RequestId     *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	QuickLinkList *ListClusterServiceQuickLinkResponseBodyQuickLinkList `json:"QuickLinkList,omitempty" xml:"QuickLinkList,omitempty" type:"Struct"`
}

func (s ListClusterServiceQuickLinkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkResponseBody) SetRequestId(v string) *ListClusterServiceQuickLinkResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBody) SetQuickLinkList(v *ListClusterServiceQuickLinkResponseBodyQuickLinkList) *ListClusterServiceQuickLinkResponseBody {
	s.QuickLinkList = v
	return s
}

type ListClusterServiceQuickLinkResponseBodyQuickLinkList struct {
	QuickLink []*ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink `json:"QuickLink,omitempty" xml:"QuickLink,omitempty" type:"Repeated"`
}

func (s ListClusterServiceQuickLinkResponseBodyQuickLinkList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkResponseBodyQuickLinkList) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkList) SetQuickLink(v []*ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) *ListClusterServiceQuickLinkResponseBodyQuickLinkList {
	s.QuickLink = v
	return s
}

type ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink struct {
	ServiceDisplayName *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Protocol           *string `json:"Protocol,omitempty" xml:"Protocol,omitempty"`
	ServiceName        *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	QuickLinkAddress   *string `json:"QuickLinkAddress,omitempty" xml:"QuickLinkAddress,omitempty"`
	Port               *string `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetServiceDisplayName(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetType(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.Type = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetProtocol(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.Protocol = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetServiceName(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.ServiceName = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetQuickLinkAddress(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.QuickLinkAddress = &v
	return s
}

func (s *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink) SetPort(v string) *ListClusterServiceQuickLinkResponseBodyQuickLinkListQuickLink {
	s.Port = &v
	return s
}

type ListClusterServiceQuickLinkResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterServiceQuickLinkResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterServiceQuickLinkResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterServiceQuickLinkResponse) GoString() string {
	return s.String()
}

func (s *ListClusterServiceQuickLinkResponse) SetHeaders(v map[string]*string) *ListClusterServiceQuickLinkResponse {
	s.Headers = v
	return s
}

func (s *ListClusterServiceQuickLinkResponse) SetBody(v *ListClusterServiceQuickLinkResponseBody) *ListClusterServiceQuickLinkResponse {
	s.Body = v
	return s
}

type ListClusterTemplatesRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ProductType     *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListClusterTemplatesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesRequest) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesRequest) SetResourceOwnerId(v int64) *ListClusterTemplatesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetRegionId(v string) *ListClusterTemplatesRequest {
	s.RegionId = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetBizId(v string) *ListClusterTemplatesRequest {
	s.BizId = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetPageNumber(v int32) *ListClusterTemplatesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetPageSize(v int32) *ListClusterTemplatesRequest {
	s.PageSize = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetProductType(v string) *ListClusterTemplatesRequest {
	s.ProductType = &v
	return s
}

func (s *ListClusterTemplatesRequest) SetResourceGroupId(v string) *ListClusterTemplatesRequest {
	s.ResourceGroupId = &v
	return s
}

type ListClusterTemplatesResponseBody struct {
	TotalCount       *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize         *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId        *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber       *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	TemplateInfoList *ListClusterTemplatesResponseBodyTemplateInfoList `json:"TemplateInfoList,omitempty" xml:"TemplateInfoList,omitempty" type:"Struct"`
}

func (s ListClusterTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBody) SetTotalCount(v int32) *ListClusterTemplatesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListClusterTemplatesResponseBody) SetPageSize(v int32) *ListClusterTemplatesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListClusterTemplatesResponseBody) SetRequestId(v string) *ListClusterTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListClusterTemplatesResponseBody) SetPageNumber(v int32) *ListClusterTemplatesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListClusterTemplatesResponseBody) SetTemplateInfoList(v *ListClusterTemplatesResponseBodyTemplateInfoList) *ListClusterTemplatesResponseBody {
	s.TemplateInfoList = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoList struct {
	TemplateInfo []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo `json:"TemplateInfo,omitempty" xml:"TemplateInfo,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoList) SetTemplateInfo(v []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) *ListClusterTemplatesResponseBodyTemplateInfoList {
	s.TemplateInfo = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo struct {
	VpcId                  *string                                                                          `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	KeyPairName            *string                                                                          `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	LogEnable              *bool                                                                            `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	SshEnable              *bool                                                                            `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	HighAvailabilityEnable *bool                                                                            `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	SecurityGroupId        *string                                                                          `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	UserId                 *string                                                                          `json:"UserId,omitempty" xml:"UserId,omitempty"`
	HostGroupList          *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList       `json:"HostGroupList,omitempty" xml:"HostGroupList,omitempty" type:"Struct"`
	IsOpenPublicIp         *bool                                                                            `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	AllowNotebook          *bool                                                                            `json:"AllowNotebook,omitempty" xml:"AllowNotebook,omitempty"`
	GmtModified            *int64                                                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	TemplateName           *string                                                                          `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	DepositType            *string                                                                          `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	SecurityGroupName      *string                                                                          `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ConfigList             *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList          `json:"ConfigList,omitempty" xml:"ConfigList,omitempty" type:"Struct"`
	BootstrapActionList    *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList `json:"BootstrapActionList,omitempty" xml:"BootstrapActionList,omitempty" type:"Struct"`
	SoftwareInfoList       *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList    `json:"SoftwareInfoList,omitempty" xml:"SoftwareInfoList,omitempty" type:"Struct"`
	InstanceGeneration     *string                                                                          `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	CreateSource           *string                                                                          `json:"CreateSource,omitempty" xml:"CreateSource,omitempty"`
	EasEnable              *bool                                                                            `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	UseCustomHiveMetaDb    *bool                                                                            `json:"UseCustomHiveMetaDb,omitempty" xml:"UseCustomHiveMetaDb,omitempty"`
	UserDefinedEmrEcsRole  *string                                                                          `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	MachineType            *string                                                                          `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	MetaStoreType          *string                                                                          `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	UseLocalMetaDb         *bool                                                                            `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	MasterNodeTotal        *int32                                                                           `json:"MasterNodeTotal,omitempty" xml:"MasterNodeTotal,omitempty"`
	InitCustomHiveMetaDb   *bool                                                                            `json:"InitCustomHiveMetaDb,omitempty" xml:"InitCustomHiveMetaDb,omitempty"`
	IoOptimized            *bool                                                                            `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	MetaStoreConf          *string                                                                          `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	VSwitchId              *string                                                                          `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	Configurations         *string                                                                          `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	LogPath                *string                                                                          `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	ClusterType            *string                                                                          `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	NetType                *string                                                                          `json:"NetType,omitempty" xml:"NetType,omitempty"`
	ZoneId                 *string                                                                          `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	GmtCreate              *int64                                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Id                     *string                                                                          `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetVpcId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.VpcId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetKeyPairName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.KeyPairName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetLogEnable(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.LogEnable = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetSshEnable(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.SshEnable = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetHighAvailabilityEnable(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetSecurityGroupId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.SecurityGroupId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetUserId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.UserId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetHostGroupList(v *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.HostGroupList = v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetIsOpenPublicIp(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.IsOpenPublicIp = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetAllowNotebook(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.AllowNotebook = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetGmtModified(v int64) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.GmtModified = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetTemplateName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.TemplateName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetDepositType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.DepositType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetSecurityGroupName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.SecurityGroupName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetConfigList(v *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.ConfigList = v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetBootstrapActionList(v *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.BootstrapActionList = v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetSoftwareInfoList(v *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.SoftwareInfoList = v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetInstanceGeneration(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.InstanceGeneration = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetCreateSource(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.CreateSource = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetEasEnable(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.EasEnable = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetUseCustomHiveMetaDb(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.UseCustomHiveMetaDb = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetUserDefinedEmrEcsRole(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetMachineType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.MachineType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetMetaStoreType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.MetaStoreType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetUseLocalMetaDb(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.UseLocalMetaDb = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetMasterNodeTotal(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.MasterNodeTotal = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetInitCustomHiveMetaDb(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.InitCustomHiveMetaDb = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetIoOptimized(v bool) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.IoOptimized = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetMetaStoreConf(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.MetaStoreConf = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetVSwitchId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.VSwitchId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetConfigurations(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.Configurations = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetLogPath(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.LogPath = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetClusterType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.ClusterType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetNetType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.NetType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetZoneId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.ZoneId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetGmtCreate(v int64) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.GmtCreate = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo) SetId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfo {
	s.Id = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList struct {
	HostGroup []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList) SetHostGroup(v []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupList {
	s.HostGroup = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup struct {
	SysDiskCapacity    *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	HostGroupType      *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	SysDiskType        *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	MultiInstanceTypes *string `json:"MultiInstanceTypes,omitempty" xml:"MultiInstanceTypes,omitempty"`
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DiskType           *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId        *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DiskCount          *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	Period             *string `json:"Period,omitempty" xml:"Period,omitempty"`
	DiskCapacity       *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	NodeCount          *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	HostGroupName      *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetSysDiskCapacity(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetHostGroupType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetSysDiskType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetMultiInstanceTypes(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.MultiInstanceTypes = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetChargeType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.ChargeType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetDiskType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.DiskType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetHostGroupId(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetInstanceType(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.InstanceType = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetDiskCount(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.DiskCount = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetPeriod(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.Period = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetDiskCapacity(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetNodeCount(v int32) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.NodeCount = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup) SetHostGroupName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoHostGroupListHostGroup {
	s.HostGroupName = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList struct {
	Config []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList) SetConfig(v []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigList {
	s.Config = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetConfigValue(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.ConfigValue = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetReplace(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.Replace = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetFileName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.FileName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetServiceName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.ServiceName = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetConfigKey(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.ConfigKey = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig) SetEncrypt(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoConfigListConfig {
	s.Encrypt = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList struct {
	BootstrapAction []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList) SetBootstrapAction(v []*ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionList {
	s.BootstrapAction = v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction struct {
	Arg  *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) SetArg(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction {
	s.Arg = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) SetPath(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction {
	s.Path = &v
	return s
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction) SetName(v string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoBootstrapActionListBootstrapAction {
	s.Name = &v
	return s
}

type ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList struct {
	SoftwareInfo []*string `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Repeated"`
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList) SetSoftwareInfo(v []*string) *ListClusterTemplatesResponseBodyTemplateInfoListTemplateInfoSoftwareInfoList {
	s.SoftwareInfo = v
	return s
}

type ListClusterTemplatesResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListClusterTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListClusterTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListClusterTemplatesResponse) GoString() string {
	return s.String()
}

func (s *ListClusterTemplatesResponse) SetHeaders(v map[string]*string) *ListClusterTemplatesResponse {
	s.Headers = v
	return s
}

func (s *ListClusterTemplatesResponse) SetBody(v *ListClusterTemplatesResponseBody) *ListClusterTemplatesResponse {
	s.Body = v
	return s
}

type ListDataSourceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SourceType      *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	CreateFrom      *string `json:"CreateFrom,omitempty" xml:"CreateFrom,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceRequest) GoString() string {
	return s.String()
}

func (s *ListDataSourceRequest) SetResourceOwnerId(v int64) *ListDataSourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListDataSourceRequest) SetRegionId(v string) *ListDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *ListDataSourceRequest) SetPageSize(v int32) *ListDataSourceRequest {
	s.PageSize = &v
	return s
}

func (s *ListDataSourceRequest) SetPageNumber(v int32) *ListDataSourceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourceRequest) SetId(v string) *ListDataSourceRequest {
	s.Id = &v
	return s
}

func (s *ListDataSourceRequest) SetProjectId(v string) *ListDataSourceRequest {
	s.ProjectId = &v
	return s
}

func (s *ListDataSourceRequest) SetName(v string) *ListDataSourceRequest {
	s.Name = &v
	return s
}

func (s *ListDataSourceRequest) SetSourceType(v string) *ListDataSourceRequest {
	s.SourceType = &v
	return s
}

func (s *ListDataSourceRequest) SetCreateFrom(v string) *ListDataSourceRequest {
	s.CreateFrom = &v
	return s
}

func (s *ListDataSourceRequest) SetResourceGroupId(v string) *ListDataSourceRequest {
	s.ResourceGroupId = &v
	return s
}

type ListDataSourceResponseBody struct {
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize       *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber     *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total          *int32                                    `json:"Total,omitempty" xml:"Total,omitempty"`
	DataSourceList *ListDataSourceResponseBodyDataSourceList `json:"DataSourceList,omitempty" xml:"DataSourceList,omitempty" type:"Struct"`
}

func (s ListDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *ListDataSourceResponseBody) SetRequestId(v string) *ListDataSourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListDataSourceResponseBody) SetPageSize(v int32) *ListDataSourceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListDataSourceResponseBody) SetPageNumber(v int32) *ListDataSourceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListDataSourceResponseBody) SetTotal(v int32) *ListDataSourceResponseBody {
	s.Total = &v
	return s
}

func (s *ListDataSourceResponseBody) SetDataSourceList(v *ListDataSourceResponseBodyDataSourceList) *ListDataSourceResponseBody {
	s.DataSourceList = v
	return s
}

type ListDataSourceResponseBodyDataSourceList struct {
	DataSource []*ListDataSourceResponseBodyDataSourceListDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s ListDataSourceResponseBodyDataSourceList) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceResponseBodyDataSourceList) GoString() string {
	return s.String()
}

func (s *ListDataSourceResponseBodyDataSourceList) SetDataSource(v []*ListDataSourceResponseBodyDataSourceListDataSource) *ListDataSourceResponseBodyDataSourceList {
	s.DataSource = v
	return s
}

type ListDataSourceResponseBodyDataSourceListDataSource struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Conf        *string `json:"Conf,omitempty" xml:"Conf,omitempty"`
	SourceType  *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Modifier    *string `json:"Modifier,omitempty" xml:"Modifier,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	CreateFrom  *string `json:"CreateFrom,omitempty" xml:"CreateFrom,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ClusterId   *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListDataSourceResponseBodyDataSourceListDataSource) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceResponseBodyDataSourceListDataSource) GoString() string {
	return s.String()
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetStatus(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.Status = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetConf(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.Conf = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetSourceType(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.SourceType = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetGmtModified(v int64) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.GmtModified = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetCreator(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.Creator = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetModifier(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.Modifier = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetDescription(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.Description = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetGmtCreate(v int64) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.GmtCreate = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetCreateFrom(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.CreateFrom = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetName(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.Name = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetId(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.Id = &v
	return s
}

func (s *ListDataSourceResponseBodyDataSourceListDataSource) SetClusterId(v string) *ListDataSourceResponseBodyDataSourceListDataSource {
	s.ClusterId = &v
	return s
}

type ListDataSourceResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListDataSourceResponse) GoString() string {
	return s.String()
}

func (s *ListDataSourceResponse) SetHeaders(v map[string]*string) *ListDataSourceResponse {
	s.Headers = v
	return s
}

func (s *ListDataSourceResponse) SetBody(v *ListDataSourceResponseBody) *ListDataSourceResponse {
	s.Body = v
	return s
}

type ListEmrAvailableConfigRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListEmrAvailableConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigRequest) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigRequest) SetResourceOwnerId(v int64) *ListEmrAvailableConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListEmrAvailableConfigRequest) SetRegionId(v string) *ListEmrAvailableConfigRequest {
	s.RegionId = &v
	return s
}

func (s *ListEmrAvailableConfigRequest) SetResourceGroupId(v string) *ListEmrAvailableConfigRequest {
	s.ResourceGroupId = &v
	return s
}

type ListEmrAvailableConfigResponseBody struct {
	SecurityGroupList  *ListEmrAvailableConfigResponseBodySecurityGroupList  `json:"SecurityGroupList,omitempty" xml:"SecurityGroupList,omitempty" type:"Struct"`
	RequestId          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	KeyPairNameList    *ListEmrAvailableConfigResponseBodyKeyPairNameList    `json:"KeyPairNameList,omitempty" xml:"KeyPairNameList,omitempty" type:"Struct"`
	VpcInfoList        *ListEmrAvailableConfigResponseBodyVpcInfoList        `json:"VpcInfoList,omitempty" xml:"VpcInfoList,omitempty" type:"Struct"`
	EmrMainVersionList *ListEmrAvailableConfigResponseBodyEmrMainVersionList `json:"EmrMainVersionList,omitempty" xml:"EmrMainVersionList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBody) SetSecurityGroupList(v *ListEmrAvailableConfigResponseBodySecurityGroupList) *ListEmrAvailableConfigResponseBody {
	s.SecurityGroupList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBody) SetRequestId(v string) *ListEmrAvailableConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBody) SetKeyPairNameList(v *ListEmrAvailableConfigResponseBodyKeyPairNameList) *ListEmrAvailableConfigResponseBody {
	s.KeyPairNameList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBody) SetVpcInfoList(v *ListEmrAvailableConfigResponseBodyVpcInfoList) *ListEmrAvailableConfigResponseBody {
	s.VpcInfoList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBody) SetEmrMainVersionList(v *ListEmrAvailableConfigResponseBodyEmrMainVersionList) *ListEmrAvailableConfigResponseBody {
	s.EmrMainVersionList = v
	return s
}

type ListEmrAvailableConfigResponseBodySecurityGroupList struct {
	SecurityGroup []*ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup `json:"SecurityGroup,omitempty" xml:"SecurityGroup,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodySecurityGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodySecurityGroupList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupList) SetSecurityGroup(v []*ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) *ListEmrAvailableConfigResponseBodySecurityGroupList {
	s.SecurityGroup = v
	return s
}

type ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup struct {
	VpcId                   *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupId         *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName       *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	EcsCount                *int32  `json:"EcsCount,omitempty" xml:"EcsCount,omitempty"`
	SecurityGroupType       *string `json:"SecurityGroupType,omitempty" xml:"SecurityGroupType,omitempty"`
	AvailableInstanceAmount *int32  `json:"AvailableInstanceAmount,omitempty" xml:"AvailableInstanceAmount,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetVpcId(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.VpcId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetCreationTime(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.CreationTime = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetDescription(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.Description = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupId(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupName(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetEcsCount(v int32) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.EcsCount = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupType(v string) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupType = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup) SetAvailableInstanceAmount(v int32) *ListEmrAvailableConfigResponseBodySecurityGroupListSecurityGroup {
	s.AvailableInstanceAmount = &v
	return s
}

type ListEmrAvailableConfigResponseBodyKeyPairNameList struct {
	KeyPairName []*string `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyKeyPairNameList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyKeyPairNameList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyKeyPairNameList) SetKeyPairName(v []*string) *ListEmrAvailableConfigResponseBodyKeyPairNameList {
	s.KeyPairName = v
	return s
}

type ListEmrAvailableConfigResponseBodyVpcInfoList struct {
	VpcInfo []*ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo `json:"VpcInfo,omitempty" xml:"VpcInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoList) SetVpcInfo(v []*ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) *ListEmrAvailableConfigResponseBodyVpcInfoList {
	s.VpcInfo = v
	return s
}

type ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo struct {
	VpcId           *string                                                              `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VpcName         *string                                                              `json:"VpcName,omitempty" xml:"VpcName,omitempty"`
	CreationTime    *string                                                              `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VRouterId       *string                                                              `json:"VRouterId,omitempty" xml:"VRouterId,omitempty"`
	CidrBlock       *string                                                              `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description     *string                                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	VswitchInfoList *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList `json:"VswitchInfoList,omitempty" xml:"VswitchInfoList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetVpcId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.VpcId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetVpcName(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.VpcName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetCreationTime(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.CreationTime = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetVRouterId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.VRouterId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetCidrBlock(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.CidrBlock = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetDescription(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.Description = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo) SetVswitchInfoList(v *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfo {
	s.VswitchInfoList = v
	return s
}

type ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList struct {
	VswitchInfo []*ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo `json:"VswitchInfo,omitempty" xml:"VswitchInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList) SetVswitchInfo(v []*ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoList {
	s.VswitchInfo = v
	return s
}

type ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo struct {
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VpcId                   *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	CidrBlock               *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	VswitchId               *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	VswitchName             *string `json:"VswitchName,omitempty" xml:"VswitchName,omitempty"`
	AvailableIpAddressCount *int64  `json:"AvailableIpAddressCount,omitempty" xml:"AvailableIpAddressCount,omitempty"`
	ZoneId                  *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetCreationTime(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.CreationTime = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetVpcId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.VpcId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetCidrBlock(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.CidrBlock = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetDescription(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.Description = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetVswitchId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.VswitchId = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetVswitchName(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.VswitchName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetAvailableIpAddressCount(v int64) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.AvailableIpAddressCount = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo) SetZoneId(v string) *ListEmrAvailableConfigResponseBodyVpcInfoListVpcInfoVswitchInfoListVswitchInfo {
	s.ZoneId = &v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionList struct {
	EmrMainVersion []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion `json:"EmrMainVersion,omitempty" xml:"EmrMainVersion,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionList) SetEmrMainVersion(v []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) *ListEmrAvailableConfigResponseBodyEmrMainVersionList {
	s.EmrMainVersion = v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion struct {
	OnCloudNative       *bool                                                                                  `json:"OnCloudNative,omitempty" xml:"OnCloudNative,omitempty"`
	ExtraInfo           *string                                                                                `json:"ExtraInfo,omitempty" xml:"ExtraInfo,omitempty"`
	ClusterTypeInfoList *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList `json:"ClusterTypeInfoList,omitempty" xml:"ClusterTypeInfoList,omitempty" type:"Struct"`
	PublishType         *string                                                                                `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	StackVersion        *string                                                                                `json:"StackVersion,omitempty" xml:"StackVersion,omitempty"`
	StackName           *string                                                                                `json:"StackName,omitempty" xml:"StackName,omitempty"`
	EcmVersion          *bool                                                                                  `json:"EcmVersion,omitempty" xml:"EcmVersion,omitempty"`
	MainVersionName     *string                                                                                `json:"MainVersionName,omitempty" xml:"MainVersionName,omitempty"`
	RegionId            *string                                                                                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetOnCloudNative(v bool) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.OnCloudNative = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetExtraInfo(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.ExtraInfo = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetClusterTypeInfoList(v *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.ClusterTypeInfoList = v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetPublishType(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.PublishType = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetStackVersion(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.StackVersion = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetStackName(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.StackName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetEcmVersion(v bool) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.EcmVersion = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetMainVersionName(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.MainVersionName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion) SetRegionId(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersion {
	s.RegionId = &v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList struct {
	ClusterTypeInfo []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo `json:"ClusterTypeInfo,omitempty" xml:"ClusterTypeInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) SetClusterTypeInfo(v []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList {
	s.ClusterTypeInfo = v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo struct {
	ClusterType            *string                                                                                                                     `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	ClusterServiceInfoList *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList `json:"ClusterServiceInfoList,omitempty" xml:"ClusterServiceInfoList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) SetClusterType(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo {
	s.ClusterType = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) SetClusterServiceInfoList(v *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo {
	s.ClusterServiceInfoList = v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList struct {
	ClusterServiceInfo []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo `json:"ClusterServiceInfo,omitempty" xml:"ClusterServiceInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList) SetClusterServiceInfo(v []*ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoList {
	s.ClusterServiceInfo = v
	return s
}

type ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo struct {
	ServiceDisplayName *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceVersion     *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	Mandatory          *bool   `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	ServiceName        *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) SetServiceDisplayName(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) SetServiceVersion(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo {
	s.ServiceVersion = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) SetMandatory(v bool) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo {
	s.Mandatory = &v
	return s
}

func (s *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo) SetServiceName(v string) *ListEmrAvailableConfigResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoClusterServiceInfoListClusterServiceInfo {
	s.ServiceName = &v
	return s
}

type ListEmrAvailableConfigResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEmrAvailableConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEmrAvailableConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableConfigResponse) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableConfigResponse) SetHeaders(v map[string]*string) *ListEmrAvailableConfigResponse {
	s.Headers = v
	return s
}

func (s *ListEmrAvailableConfigResponse) SetBody(v *ListEmrAvailableConfigResponseBody) *ListEmrAvailableConfigResponse {
	s.Body = v
	return s
}

type ListEmrAvailableResourceRequest struct {
	ResourceOwnerId     *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId            *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	DestinationResource *string `json:"DestinationResource,omitempty" xml:"DestinationResource,omitempty"`
	ClusterType         *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	InstanceChargeType  *string `json:"InstanceChargeType,omitempty" xml:"InstanceChargeType,omitempty"`
	SpotStrategy        *string `json:"SpotStrategy,omitempty" xml:"SpotStrategy,omitempty"`
	ZoneId              *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	NetType             *string `json:"NetType,omitempty" xml:"NetType,omitempty"`
	InstanceType        *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	SystemDiskType      *string `json:"SystemDiskType,omitempty" xml:"SystemDiskType,omitempty"`
	DataDiskType        *string `json:"DataDiskType,omitempty" xml:"DataDiskType,omitempty"`
	DepositType         *string `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	ClusterId           *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ResourceGroupId     *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListEmrAvailableResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceRequest) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceRequest) SetResourceOwnerId(v int64) *ListEmrAvailableResourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetRegionId(v string) *ListEmrAvailableResourceRequest {
	s.RegionId = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetDestinationResource(v string) *ListEmrAvailableResourceRequest {
	s.DestinationResource = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetClusterType(v string) *ListEmrAvailableResourceRequest {
	s.ClusterType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetInstanceChargeType(v string) *ListEmrAvailableResourceRequest {
	s.InstanceChargeType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetSpotStrategy(v string) *ListEmrAvailableResourceRequest {
	s.SpotStrategy = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetZoneId(v string) *ListEmrAvailableResourceRequest {
	s.ZoneId = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetNetType(v string) *ListEmrAvailableResourceRequest {
	s.NetType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetInstanceType(v string) *ListEmrAvailableResourceRequest {
	s.InstanceType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetSystemDiskType(v string) *ListEmrAvailableResourceRequest {
	s.SystemDiskType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetDataDiskType(v string) *ListEmrAvailableResourceRequest {
	s.DataDiskType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetDepositType(v string) *ListEmrAvailableResourceRequest {
	s.DepositType = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetClusterId(v string) *ListEmrAvailableResourceRequest {
	s.ClusterId = &v
	return s
}

func (s *ListEmrAvailableResourceRequest) SetResourceGroupId(v string) *ListEmrAvailableResourceRequest {
	s.ResourceGroupId = &v
	return s
}

type ListEmrAvailableResourceResponseBody struct {
	RequestId       *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RegionId        *string                                              `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EmrZoneInfoList *ListEmrAvailableResourceResponseBodyEmrZoneInfoList `json:"EmrZoneInfoList,omitempty" xml:"EmrZoneInfoList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBody) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBody) SetRequestId(v string) *ListEmrAvailableResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBody) SetRegionId(v string) *ListEmrAvailableResourceResponseBody {
	s.RegionId = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBody) SetEmrZoneInfoList(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoList) *ListEmrAvailableResourceResponseBody {
	s.EmrZoneInfoList = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoList struct {
	EmrZoneInfo []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo `json:"EmrZoneInfo,omitempty" xml:"EmrZoneInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoList) SetEmrZoneInfo(v []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) *ListEmrAvailableResourceResponseBodyEmrZoneInfoList {
	s.EmrZoneInfo = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo struct {
	ZoneId              *string                                                                            `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	EmrResourceInfoList *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList `json:"EmrResourceInfoList,omitempty" xml:"EmrResourceInfoList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) SetZoneId(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo {
	s.ZoneId = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo) SetEmrResourceInfoList(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfo {
	s.EmrResourceInfoList = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList struct {
	EmrResourceInfo []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo `json:"EmrResourceInfo,omitempty" xml:"EmrResourceInfo,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList) SetEmrResourceInfo(v []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoList {
	s.EmrResourceInfo = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo struct {
	Type                  *string                                                                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
	SupportedResourceList *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList `json:"SupportedResourceList,omitempty" xml:"SupportedResourceList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) SetType(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo {
	s.Type = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo) SetSupportedResourceList(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfo {
	s.SupportedResourceList = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList struct {
	SupportedResource []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource `json:"SupportedResource,omitempty" xml:"SupportedResource,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList) SetSupportedResource(v []*ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceList {
	s.SupportedResource = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource struct {
	Value               *string                                                                                                                                                    `json:"Value,omitempty" xml:"Value,omitempty"`
	Max                 *int32                                                                                                                                                     `json:"Max,omitempty" xml:"Max,omitempty"`
	Unit                *string                                                                                                                                                    `json:"Unit,omitempty" xml:"Unit,omitempty"`
	EmrInstanceType     *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType     `json:"EmrInstanceType,omitempty" xml:"EmrInstanceType,omitempty" type:"Struct"`
	Min                 *int32                                                                                                                                                     `json:"Min,omitempty" xml:"Min,omitempty"`
	SupportNodeTypeList *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList `json:"SupportNodeTypeList,omitempty" xml:"SupportNodeTypeList,omitempty" type:"Struct"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetValue(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.Value = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetMax(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.Max = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetUnit(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.Unit = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetEmrInstanceType(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.EmrInstanceType = v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetMin(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.Min = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource) SetSupportNodeTypeList(v *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResource {
	s.SupportNodeTypeList = v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType struct {
	InstanceBandwidthRx  *int32  `json:"InstanceBandwidthRx,omitempty" xml:"InstanceBandwidthRx,omitempty"`
	GPUSpec              *string `json:"GPUSpec,omitempty" xml:"GPUSpec,omitempty"`
	LocalStorageCategory *string `json:"LocalStorageCategory,omitempty" xml:"LocalStorageCategory,omitempty"`
	InstanceBandwidthTx  *int32  `json:"InstanceBandwidthTx,omitempty" xml:"InstanceBandwidthTx,omitempty"`
	GPUAmount            *int32  `json:"GPUAmount,omitempty" xml:"GPUAmount,omitempty"`
	InstanceType         *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	MemorySize           *int32  `json:"MemorySize,omitempty" xml:"MemorySize,omitempty"`
	InitialCredit        *int32  `json:"InitialCredit,omitempty" xml:"InitialCredit,omitempty"`
	LocalStorageCapacity *int64  `json:"LocalStorageCapacity,omitempty" xml:"LocalStorageCapacity,omitempty"`
	LocalStorageAmount   *int32  `json:"LocalStorageAmount,omitempty" xml:"LocalStorageAmount,omitempty"`
	InstancePpsRx        *int64  `json:"InstancePpsRx,omitempty" xml:"InstancePpsRx,omitempty"`
	BaselineCredit       *int32  `json:"BaselineCredit,omitempty" xml:"BaselineCredit,omitempty"`
	InstancePpsTx        *int64  `json:"InstancePpsTx,omitempty" xml:"InstancePpsTx,omitempty"`
	CpuCoreCount         *int32  `json:"CpuCoreCount,omitempty" xml:"CpuCoreCount,omitempty"`
	InstanceTypeFamily   *string `json:"InstanceTypeFamily,omitempty" xml:"InstanceTypeFamily,omitempty"`
	EniQuantity          *int32  `json:"EniQuantity,omitempty" xml:"EniQuantity,omitempty"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstanceBandwidthRx(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstanceBandwidthRx = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetGPUSpec(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.GPUSpec = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetLocalStorageCategory(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.LocalStorageCategory = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstanceBandwidthTx(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstanceBandwidthTx = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetGPUAmount(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.GPUAmount = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstanceType(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstanceType = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetMemorySize(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.MemorySize = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInitialCredit(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InitialCredit = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetLocalStorageCapacity(v int64) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.LocalStorageCapacity = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetLocalStorageAmount(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.LocalStorageAmount = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstancePpsRx(v int64) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstancePpsRx = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetBaselineCredit(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.BaselineCredit = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstancePpsTx(v int64) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstancePpsTx = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetCpuCoreCount(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.CpuCoreCount = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetInstanceTypeFamily(v string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.InstanceTypeFamily = &v
	return s
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType) SetEniQuantity(v int32) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceEmrInstanceType {
	s.EniQuantity = &v
	return s
}

type ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList struct {
	SupportNodeType []*string `json:"SupportNodeType,omitempty" xml:"SupportNodeType,omitempty" type:"Repeated"`
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList) SetSupportNodeType(v []*string) *ListEmrAvailableResourceResponseBodyEmrZoneInfoListEmrZoneInfoEmrResourceInfoListEmrResourceInfoSupportedResourceListSupportedResourceSupportNodeTypeList {
	s.SupportNodeType = v
	return s
}

type ListEmrAvailableResourceResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEmrAvailableResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEmrAvailableResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEmrAvailableResourceResponse) GoString() string {
	return s.String()
}

func (s *ListEmrAvailableResourceResponse) SetHeaders(v map[string]*string) *ListEmrAvailableResourceResponse {
	s.Headers = v
	return s
}

func (s *ListEmrAvailableResourceResponse) SetBody(v *ListEmrAvailableResourceResponseBody) *ListEmrAvailableResourceResponse {
	s.Body = v
	return s
}

type ListEmrMainVersionRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EmrVersion      *string `json:"EmrVersion,omitempty" xml:"EmrVersion,omitempty"`
	StackName       *string `json:"StackName,omitempty" xml:"StackName,omitempty"`
	StackVersion    *string `json:"StackVersion,omitempty" xml:"StackVersion,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListEmrMainVersionRequest) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionRequest) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionRequest) SetResourceOwnerId(v int64) *ListEmrMainVersionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetRegionId(v string) *ListEmrMainVersionRequest {
	s.RegionId = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetEmrVersion(v string) *ListEmrMainVersionRequest {
	s.EmrVersion = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetStackName(v string) *ListEmrMainVersionRequest {
	s.StackName = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetStackVersion(v string) *ListEmrMainVersionRequest {
	s.StackVersion = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetPageNumber(v int32) *ListEmrMainVersionRequest {
	s.PageNumber = &v
	return s
}

func (s *ListEmrMainVersionRequest) SetPageSize(v int32) *ListEmrMainVersionRequest {
	s.PageSize = &v
	return s
}

type ListEmrMainVersionResponseBody struct {
	TotalCount         *int32                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize           *int32                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId          *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber         *int32                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	EmrMainVersionList *ListEmrMainVersionResponseBodyEmrMainVersionList `json:"EmrMainVersionList,omitempty" xml:"EmrMainVersionList,omitempty" type:"Struct"`
}

func (s ListEmrMainVersionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBody) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBody) SetTotalCount(v int32) *ListEmrMainVersionResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListEmrMainVersionResponseBody) SetPageSize(v int32) *ListEmrMainVersionResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListEmrMainVersionResponseBody) SetRequestId(v string) *ListEmrMainVersionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListEmrMainVersionResponseBody) SetPageNumber(v int32) *ListEmrMainVersionResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListEmrMainVersionResponseBody) SetEmrMainVersionList(v *ListEmrMainVersionResponseBodyEmrMainVersionList) *ListEmrMainVersionResponseBody {
	s.EmrMainVersionList = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionList struct {
	EmrMainVersion []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion `json:"EmrMainVersion,omitempty" xml:"EmrMainVersion,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionList) SetEmrMainVersion(v []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) *ListEmrMainVersionResponseBodyEmrMainVersionList {
	s.EmrMainVersion = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion struct {
	ClusterTypeInfoList      *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList      `json:"ClusterTypeInfoList,omitempty" xml:"ClusterTypeInfoList,omitempty" type:"Struct"`
	PublishType              *string                                                                                 `json:"PublishType,omitempty" xml:"PublishType,omitempty"`
	StackVersion             *string                                                                                 `json:"StackVersion,omitempty" xml:"StackVersion,omitempty"`
	EmrVersion               *string                                                                                 `json:"EmrVersion,omitempty" xml:"EmrVersion,omitempty"`
	WhiteUserList            *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList            `json:"WhiteUserList,omitempty" xml:"WhiteUserList,omitempty" type:"Struct"`
	Display                  *bool                                                                                   `json:"Display,omitempty" xml:"Display,omitempty"`
	StackName                *string                                                                                 `json:"StackName,omitempty" xml:"StackName,omitempty"`
	EcmVersion               *bool                                                                                   `json:"EcmVersion,omitempty" xml:"EcmVersion,omitempty"`
	ImageId                  *string                                                                                 `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
	RegionId                 *string                                                                                 `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterTypeWhiteUserList *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList `json:"ClusterTypeWhiteUserList,omitempty" xml:"ClusterTypeWhiteUserList,omitempty" type:"Struct"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetClusterTypeInfoList(v *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.ClusterTypeInfoList = v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetPublishType(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.PublishType = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetStackVersion(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.StackVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetEmrVersion(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.EmrVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetWhiteUserList(v *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.WhiteUserList = v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetDisplay(v bool) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.Display = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetStackName(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.StackName = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetEcmVersion(v bool) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.EcmVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetImageId(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.ImageId = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetRegionId(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.RegionId = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion) SetClusterTypeWhiteUserList(v *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersion {
	s.ClusterTypeWhiteUserList = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList struct {
	ClusterTypeInfo []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo `json:"ClusterTypeInfo,omitempty" xml:"ClusterTypeInfo,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList) SetClusterTypeInfo(v []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoList {
	s.ClusterTypeInfo = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo struct {
	ServiceInfoList *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList `json:"ServiceInfoList,omitempty" xml:"ServiceInfoList,omitempty" type:"Struct"`
	ClusterType     *string                                                                                                          `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) SetServiceInfoList(v *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo {
	s.ServiceInfoList = v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo) SetClusterType(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfo {
	s.ClusterType = &v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList struct {
	ServiceInfo []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo `json:"ServiceInfo,omitempty" xml:"ServiceInfo,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList) SetServiceInfo(v []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoList {
	s.ServiceInfo = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo struct {
	ServiceDisplayName    *string `json:"ServiceDisplayName,omitempty" xml:"ServiceDisplayName,omitempty"`
	ServiceVersion        *string `json:"ServiceVersion,omitempty" xml:"ServiceVersion,omitempty"`
	Display               *bool   `json:"Display,omitempty" xml:"Display,omitempty"`
	ServiceDisplayVersion *string `json:"ServiceDisplayVersion,omitempty" xml:"ServiceDisplayVersion,omitempty"`
	Mandatory             *bool   `json:"Mandatory,omitempty" xml:"Mandatory,omitempty"`
	ServiceName           *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetServiceDisplayName(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.ServiceDisplayName = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetServiceVersion(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.ServiceVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetDisplay(v bool) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.Display = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetServiceDisplayVersion(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.ServiceDisplayVersion = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetMandatory(v bool) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.Mandatory = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo) SetServiceName(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeInfoListClusterTypeInfoServiceInfoListServiceInfo {
	s.ServiceName = &v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList struct {
	WhiteUser []*string `json:"WhiteUser,omitempty" xml:"WhiteUser,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList) SetWhiteUser(v []*string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionWhiteUserList {
	s.WhiteUser = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList struct {
	ClusterTypeWhiteUser []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser `json:"ClusterTypeWhiteUser,omitempty" xml:"ClusterTypeWhiteUser,omitempty" type:"Repeated"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList) SetClusterTypeWhiteUser(v []*ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserList {
	s.ClusterTypeWhiteUser = v
	return s
}

type ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser struct {
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) SetClusterType(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser {
	s.ClusterType = &v
	return s
}

func (s *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser) SetUserId(v string) *ListEmrMainVersionResponseBodyEmrMainVersionListEmrMainVersionClusterTypeWhiteUserListClusterTypeWhiteUser {
	s.UserId = &v
	return s
}

type ListEmrMainVersionResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListEmrMainVersionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListEmrMainVersionResponse) String() string {
	return tea.Prettify(s)
}

func (s ListEmrMainVersionResponse) GoString() string {
	return s.String()
}

func (s *ListEmrMainVersionResponse) SetHeaders(v map[string]*string) *ListEmrMainVersionResponse {
	s.Headers = v
	return s
}

func (s *ListEmrMainVersionResponse) SetBody(v *ListEmrMainVersionResponseBody) *ListEmrMainVersionResponse {
	s.Body = v
	return s
}

type ListExecutionPlanInstancesRequest struct {
	ResourceOwnerId     *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId            *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OnlyLastInstance    *bool     `json:"OnlyLastInstance,omitempty" xml:"OnlyLastInstance,omitempty"`
	IsDesc              *bool     `json:"IsDesc,omitempty" xml:"IsDesc,omitempty"`
	PageNumber          *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize            *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ExecutionPlanIdList []*string `json:"ExecutionPlanIdList,omitempty" xml:"ExecutionPlanIdList,omitempty" type:"Repeated"`
	StatusList          []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListExecutionPlanInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlanInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListExecutionPlanInstancesRequest) SetResourceOwnerId(v int64) *ListExecutionPlanInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListExecutionPlanInstancesRequest) SetRegionId(v string) *ListExecutionPlanInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ListExecutionPlanInstancesRequest) SetOnlyLastInstance(v bool) *ListExecutionPlanInstancesRequest {
	s.OnlyLastInstance = &v
	return s
}

func (s *ListExecutionPlanInstancesRequest) SetIsDesc(v bool) *ListExecutionPlanInstancesRequest {
	s.IsDesc = &v
	return s
}

func (s *ListExecutionPlanInstancesRequest) SetPageNumber(v int32) *ListExecutionPlanInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListExecutionPlanInstancesRequest) SetPageSize(v int32) *ListExecutionPlanInstancesRequest {
	s.PageSize = &v
	return s
}

func (s *ListExecutionPlanInstancesRequest) SetExecutionPlanIdList(v []*string) *ListExecutionPlanInstancesRequest {
	s.ExecutionPlanIdList = v
	return s
}

func (s *ListExecutionPlanInstancesRequest) SetStatusList(v []*string) *ListExecutionPlanInstancesRequest {
	s.StatusList = v
	return s
}

type ListExecutionPlanInstancesResponseBody struct {
	ExecutionPlanInstances *ListExecutionPlanInstancesResponseBodyExecutionPlanInstances `json:"ExecutionPlanInstances,omitempty" xml:"ExecutionPlanInstances,omitempty" type:"Struct"`
	TotalCount             *int32                                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize               *int32                                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId              *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber             *int32                                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s ListExecutionPlanInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlanInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListExecutionPlanInstancesResponseBody) SetExecutionPlanInstances(v *ListExecutionPlanInstancesResponseBodyExecutionPlanInstances) *ListExecutionPlanInstancesResponseBody {
	s.ExecutionPlanInstances = v
	return s
}

func (s *ListExecutionPlanInstancesResponseBody) SetTotalCount(v int32) *ListExecutionPlanInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBody) SetPageSize(v int32) *ListExecutionPlanInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBody) SetRequestId(v string) *ListExecutionPlanInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBody) SetPageNumber(v int32) *ListExecutionPlanInstancesResponseBody {
	s.PageNumber = &v
	return s
}

type ListExecutionPlanInstancesResponseBodyExecutionPlanInstances struct {
	ExecutionPlanInstance []*ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance `json:"ExecutionPlanInstance,omitempty" xml:"ExecutionPlanInstance,omitempty" type:"Repeated"`
}

func (s ListExecutionPlanInstancesResponseBodyExecutionPlanInstances) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlanInstancesResponseBodyExecutionPlanInstances) GoString() string {
	return s.String()
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstances) SetExecutionPlanInstance(v []*ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstances {
	s.ExecutionPlanInstance = v
	return s
}

type ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance struct {
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
	LogEnable         *bool   `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	StartTime         *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	LogPath           *string `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	ExecutionPlanId   *string `json:"ExecutionPlanId,omitempty" xml:"ExecutionPlanId,omitempty"`
	ClusterType       *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	RunTime           *int32  `json:"RunTime,omitempty" xml:"RunTime,omitempty"`
	ClusterName       *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	WorkflowApp       *string `json:"WorkflowApp,omitempty" xml:"WorkflowApp,omitempty"`
	Id                *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ClusterId         *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ExecutionPlanName *string `json:"ExecutionPlanName,omitempty" xml:"ExecutionPlanName,omitempty"`
}

func (s ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) GoString() string {
	return s.String()
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetStatus(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.Status = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetLogEnable(v bool) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.LogEnable = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetStartTime(v int64) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.StartTime = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetLogPath(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.LogPath = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetExecutionPlanId(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.ExecutionPlanId = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetClusterType(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.ClusterType = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetRunTime(v int32) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.RunTime = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetClusterName(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.ClusterName = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetWorkflowApp(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.WorkflowApp = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetId(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.Id = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetClusterId(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.ClusterId = &v
	return s
}

func (s *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance) SetExecutionPlanName(v string) *ListExecutionPlanInstancesResponseBodyExecutionPlanInstancesExecutionPlanInstance {
	s.ExecutionPlanName = &v
	return s
}

type ListExecutionPlanInstancesResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListExecutionPlanInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListExecutionPlanInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlanInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListExecutionPlanInstancesResponse) SetHeaders(v map[string]*string) *ListExecutionPlanInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListExecutionPlanInstancesResponse) SetBody(v *ListExecutionPlanInstancesResponseBody) *ListExecutionPlanInstancesResponse {
	s.Body = v
	return s
}

type ListExecutionPlansRequest struct {
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	JobId           *string   `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Strategy        *string   `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	IsDesc          *bool     `json:"IsDesc,omitempty" xml:"IsDesc,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QueryType       *string   `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	QueryString     *string   `json:"QueryString,omitempty" xml:"QueryString,omitempty"`
	StatusList      []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListExecutionPlansRequest) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlansRequest) GoString() string {
	return s.String()
}

func (s *ListExecutionPlansRequest) SetResourceOwnerId(v int64) *ListExecutionPlansRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListExecutionPlansRequest) SetRegionId(v string) *ListExecutionPlansRequest {
	s.RegionId = &v
	return s
}

func (s *ListExecutionPlansRequest) SetClusterId(v string) *ListExecutionPlansRequest {
	s.ClusterId = &v
	return s
}

func (s *ListExecutionPlansRequest) SetJobId(v string) *ListExecutionPlansRequest {
	s.JobId = &v
	return s
}

func (s *ListExecutionPlansRequest) SetStrategy(v string) *ListExecutionPlansRequest {
	s.Strategy = &v
	return s
}

func (s *ListExecutionPlansRequest) SetIsDesc(v bool) *ListExecutionPlansRequest {
	s.IsDesc = &v
	return s
}

func (s *ListExecutionPlansRequest) SetPageNumber(v int32) *ListExecutionPlansRequest {
	s.PageNumber = &v
	return s
}

func (s *ListExecutionPlansRequest) SetPageSize(v int32) *ListExecutionPlansRequest {
	s.PageSize = &v
	return s
}

func (s *ListExecutionPlansRequest) SetQueryType(v string) *ListExecutionPlansRequest {
	s.QueryType = &v
	return s
}

func (s *ListExecutionPlansRequest) SetQueryString(v string) *ListExecutionPlansRequest {
	s.QueryString = &v
	return s
}

func (s *ListExecutionPlansRequest) SetStatusList(v []*string) *ListExecutionPlansRequest {
	s.StatusList = v
	return s
}

type ListExecutionPlansResponseBody struct {
	TotalCount     *int32                                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize       *int32                                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber     *int32                                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	ExecutionPlans *ListExecutionPlansResponseBodyExecutionPlans `json:"ExecutionPlans,omitempty" xml:"ExecutionPlans,omitempty" type:"Struct"`
}

func (s ListExecutionPlansResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlansResponseBody) GoString() string {
	return s.String()
}

func (s *ListExecutionPlansResponseBody) SetTotalCount(v int32) *ListExecutionPlansResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListExecutionPlansResponseBody) SetPageSize(v int32) *ListExecutionPlansResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListExecutionPlansResponseBody) SetRequestId(v string) *ListExecutionPlansResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListExecutionPlansResponseBody) SetPageNumber(v int32) *ListExecutionPlansResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListExecutionPlansResponseBody) SetExecutionPlans(v *ListExecutionPlansResponseBodyExecutionPlans) *ListExecutionPlansResponseBody {
	s.ExecutionPlans = v
	return s
}

type ListExecutionPlansResponseBodyExecutionPlans struct {
	ExecutionPlanInfo []*ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo `json:"ExecutionPlanInfo,omitempty" xml:"ExecutionPlanInfo,omitempty" type:"Repeated"`
}

func (s ListExecutionPlansResponseBodyExecutionPlans) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlansResponseBodyExecutionPlans) GoString() string {
	return s.String()
}

func (s *ListExecutionPlansResponseBodyExecutionPlans) SetExecutionPlanInfo(v []*ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) *ListExecutionPlansResponseBodyExecutionPlans {
	s.ExecutionPlanInfo = v
	return s
}

type ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo struct {
	Status                *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StartTime             *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TimeInterval          *int32  `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	Stragety              *string `json:"Stragety,omitempty" xml:"Stragety,omitempty"`
	CreateClusterOnDemand *bool   `json:"CreateClusterOnDemand,omitempty" xml:"CreateClusterOnDemand,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TimeUnit              *string `json:"TimeUnit,omitempty" xml:"TimeUnit,omitempty"`
	Id                    *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) GoString() string {
	return s.String()
}

func (s *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) SetStatus(v string) *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo {
	s.Status = &v
	return s
}

func (s *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) SetStartTime(v int64) *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo {
	s.StartTime = &v
	return s
}

func (s *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) SetTimeInterval(v int32) *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo {
	s.TimeInterval = &v
	return s
}

func (s *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) SetStragety(v string) *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo {
	s.Stragety = &v
	return s
}

func (s *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) SetCreateClusterOnDemand(v bool) *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo {
	s.CreateClusterOnDemand = &v
	return s
}

func (s *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) SetName(v string) *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo {
	s.Name = &v
	return s
}

func (s *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) SetTimeUnit(v string) *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo {
	s.TimeUnit = &v
	return s
}

func (s *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo) SetId(v string) *ListExecutionPlansResponseBodyExecutionPlansExecutionPlanInfo {
	s.Id = &v
	return s
}

type ListExecutionPlansResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListExecutionPlansResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListExecutionPlansResponse) String() string {
	return tea.Prettify(s)
}

func (s ListExecutionPlansResponse) GoString() string {
	return s.String()
}

func (s *ListExecutionPlansResponse) SetHeaders(v map[string]*string) *ListExecutionPlansResponse {
	s.Headers = v
	return s
}

func (s *ListExecutionPlansResponse) SetBody(v *ListExecutionPlansResponseBody) *ListExecutionPlansResponse {
	s.Body = v
	return s
}

type ListFlowRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	JobId      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Id         *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ClusterId  *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Periodic   *bool   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowRequest) GoString() string {
	return s.String()
}

func (s *ListFlowRequest) SetRegionId(v string) *ListFlowRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowRequest) SetProjectId(v string) *ListFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowRequest) SetJobId(v string) *ListFlowRequest {
	s.JobId = &v
	return s
}

func (s *ListFlowRequest) SetName(v string) *ListFlowRequest {
	s.Name = &v
	return s
}

func (s *ListFlowRequest) SetId(v string) *ListFlowRequest {
	s.Id = &v
	return s
}

func (s *ListFlowRequest) SetClusterId(v string) *ListFlowRequest {
	s.ClusterId = &v
	return s
}

func (s *ListFlowRequest) SetStatus(v string) *ListFlowRequest {
	s.Status = &v
	return s
}

func (s *ListFlowRequest) SetPeriodic(v bool) *ListFlowRequest {
	s.Periodic = &v
	return s
}

func (s *ListFlowRequest) SetPageNumber(v int32) *ListFlowRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowRequest) SetPageSize(v int32) *ListFlowRequest {
	s.PageSize = &v
	return s
}

type ListFlowResponseBody struct {
	RequestId  *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total      *int32                    `json:"Total,omitempty" xml:"Total,omitempty"`
	Flow       *ListFlowResponseBodyFlow `json:"Flow,omitempty" xml:"Flow,omitempty" type:"Struct"`
}

func (s ListFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowResponseBody) SetRequestId(v string) *ListFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowResponseBody) SetPageSize(v int32) *ListFlowResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowResponseBody) SetPageNumber(v int32) *ListFlowResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowResponseBody) SetTotal(v int32) *ListFlowResponseBody {
	s.Total = &v
	return s
}

func (s *ListFlowResponseBody) SetFlow(v *ListFlowResponseBodyFlow) *ListFlowResponseBody {
	s.Flow = v
	return s
}

type ListFlowResponseBodyFlow struct {
	Flow []*ListFlowResponseBodyFlowFlow `json:"Flow,omitempty" xml:"Flow,omitempty" type:"Repeated"`
}

func (s ListFlowResponseBodyFlow) String() string {
	return tea.Prettify(s)
}

func (s ListFlowResponseBodyFlow) GoString() string {
	return s.String()
}

func (s *ListFlowResponseBodyFlow) SetFlow(v []*ListFlowResponseBodyFlowFlow) *ListFlowResponseBodyFlow {
	s.Flow = v
	return s
}

type ListFlowResponseBodyFlowFlow struct {
	Type                    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	Periodic                *bool   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	GmtModified             *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	Graph                   *string `json:"Graph,omitempty" xml:"Graph,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	GmtCreate               *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	CategoryId              *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Id                      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListFlowResponseBodyFlowFlow) String() string {
	return tea.Prettify(s)
}

func (s ListFlowResponseBodyFlowFlow) GoString() string {
	return s.String()
}

func (s *ListFlowResponseBodyFlowFlow) SetType(v string) *ListFlowResponseBodyFlowFlow {
	s.Type = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetStatus(v string) *ListFlowResponseBodyFlowFlow {
	s.Status = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetAlertUserGroupBizId(v string) *ListFlowResponseBodyFlowFlow {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetPeriodic(v bool) *ListFlowResponseBodyFlowFlow {
	s.Periodic = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetProjectId(v string) *ListFlowResponseBodyFlowFlow {
	s.ProjectId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetHostName(v string) *ListFlowResponseBodyFlowFlow {
	s.HostName = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetGmtModified(v int64) *ListFlowResponseBodyFlowFlow {
	s.GmtModified = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetDescription(v string) *ListFlowResponseBodyFlowFlow {
	s.Description = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetStartSchedule(v int64) *ListFlowResponseBodyFlowFlow {
	s.StartSchedule = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetCreateCluster(v bool) *ListFlowResponseBodyFlowFlow {
	s.CreateCluster = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetEndSchedule(v int64) *ListFlowResponseBodyFlowFlow {
	s.EndSchedule = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetGraph(v string) *ListFlowResponseBodyFlowFlow {
	s.Graph = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetAlertDingDingGroupBizId(v string) *ListFlowResponseBodyFlowFlow {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetGmtCreate(v int64) *ListFlowResponseBodyFlowFlow {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetCategoryId(v string) *ListFlowResponseBodyFlowFlow {
	s.CategoryId = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetCronExpr(v string) *ListFlowResponseBodyFlowFlow {
	s.CronExpr = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetName(v string) *ListFlowResponseBodyFlowFlow {
	s.Name = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetId(v string) *ListFlowResponseBodyFlowFlow {
	s.Id = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetAlertConf(v string) *ListFlowResponseBodyFlowFlow {
	s.AlertConf = &v
	return s
}

func (s *ListFlowResponseBodyFlowFlow) SetClusterId(v string) *ListFlowResponseBodyFlowFlow {
	s.ClusterId = &v
	return s
}

type ListFlowResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowResponse) GoString() string {
	return s.String()
}

func (s *ListFlowResponse) SetHeaders(v map[string]*string) *ListFlowResponse {
	s.Headers = v
	return s
}

func (s *ListFlowResponse) SetBody(v *ListFlowResponseBody) *ListFlowResponse {
	s.Body = v
	return s
}

type ListFlowCategoryRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ParentId   *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	Root       *bool   `json:"Root,omitempty" xml:"Root,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryRequest) SetRegionId(v string) *ListFlowCategoryRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowCategoryRequest) SetProjectId(v string) *ListFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowCategoryRequest) SetParentId(v string) *ListFlowCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *ListFlowCategoryRequest) SetRoot(v bool) *ListFlowCategoryRequest {
	s.Root = &v
	return s
}

func (s *ListFlowCategoryRequest) SetPageNumber(v int32) *ListFlowCategoryRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowCategoryRequest) SetPageSize(v int32) *ListFlowCategoryRequest {
	s.PageSize = &v
	return s
}

type ListFlowCategoryResponseBody struct {
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Categories *ListFlowCategoryResponseBodyCategories `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Struct"`
	Total      *int32                                  `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryResponseBody) SetRequestId(v string) *ListFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowCategoryResponseBody) SetPageSize(v int32) *ListFlowCategoryResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowCategoryResponseBody) SetPageNumber(v int32) *ListFlowCategoryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowCategoryResponseBody) SetCategories(v *ListFlowCategoryResponseBodyCategories) *ListFlowCategoryResponseBody {
	s.Categories = v
	return s
}

func (s *ListFlowCategoryResponseBody) SetTotal(v int32) *ListFlowCategoryResponseBody {
	s.Total = &v
	return s
}

type ListFlowCategoryResponseBodyCategories struct {
	Category []*ListFlowCategoryResponseBodyCategoriesCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s ListFlowCategoryResponseBodyCategories) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryResponseBodyCategories) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryResponseBodyCategories) SetCategory(v []*ListFlowCategoryResponseBodyCategoriesCategory) *ListFlowCategoryResponseBodyCategories {
	s.Category = v
	return s
}

type ListFlowCategoryResponseBodyCategoriesCategory struct {
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
	ParentId     *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	ObjectType   *string `json:"ObjectType,omitempty" xml:"ObjectType,omitempty"`
	ProjectId    *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ObjectId     *string `json:"ObjectId,omitempty" xml:"ObjectId,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	GmtModified  *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	CategoryType *string `json:"CategoryType,omitempty" xml:"CategoryType,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListFlowCategoryResponseBodyCategoriesCategory) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryResponseBodyCategoriesCategory) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetType(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.Type = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetParentId(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.ParentId = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetObjectType(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.ObjectType = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetProjectId(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.ProjectId = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetObjectId(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.ObjectId = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetGmtCreate(v int64) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetName(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.Name = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetGmtModified(v int64) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.GmtModified = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetCategoryType(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.CategoryType = &v
	return s
}

func (s *ListFlowCategoryResponseBodyCategoriesCategory) SetId(v string) *ListFlowCategoryResponseBodyCategoriesCategory {
	s.Id = &v
	return s
}

type ListFlowCategoryResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *ListFlowCategoryResponse) SetHeaders(v map[string]*string) *ListFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *ListFlowCategoryResponse) SetBody(v *ListFlowCategoryResponseBody) *ListFlowCategoryResponse {
	s.Body = v
	return s
}

type ListFlowClusterRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterRequest) GoString() string {
	return s.String()
}

func (s *ListFlowClusterRequest) SetRegionId(v string) *ListFlowClusterRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowClusterRequest) SetProjectId(v string) *ListFlowClusterRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowClusterRequest) SetPageNumber(v int32) *ListFlowClusterRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowClusterRequest) SetPageSize(v int32) *ListFlowClusterRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowClusterRequest) SetResourceGroupId(v string) *ListFlowClusterRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowClusterResponseBody struct {
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Clusters   *ListFlowClusterResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Struct"`
}

func (s ListFlowClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBody) SetTotalCount(v int32) *ListFlowClusterResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListFlowClusterResponseBody) SetPageSize(v int32) *ListFlowClusterResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowClusterResponseBody) SetRequestId(v string) *ListFlowClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowClusterResponseBody) SetPageNumber(v int32) *ListFlowClusterResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowClusterResponseBody) SetClusters(v *ListFlowClusterResponseBodyClusters) *ListFlowClusterResponseBody {
	s.Clusters = v
	return s
}

type ListFlowClusterResponseBodyClusters struct {
	ClusterInfo []*ListFlowClusterResponseBodyClustersClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Repeated"`
}

func (s ListFlowClusterResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBodyClusters) SetClusterInfo(v []*ListFlowClusterResponseBodyClustersClusterInfo) *ListFlowClusterResponseBodyClusters {
	s.ClusterInfo = v
	return s
}

type ListFlowClusterResponseBodyClustersClusterInfo struct {
	Status              *string                                                      `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                *string                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	RunningTime         *int32                                                       `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	OrderList           *string                                                      `json:"OrderList,omitempty" xml:"OrderList,omitempty"`
	CreateTime          *int64                                                       `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ChargeType          *string                                                      `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Period              *int32                                                       `json:"Period,omitempty" xml:"Period,omitempty"`
	K8sClusterId        *string                                                      `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	ExpiredTime         *int64                                                       `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	HasUncompletedOrder *bool                                                        `json:"HasUncompletedOrder,omitempty" xml:"HasUncompletedOrder,omitempty"`
	OrderTaskInfo       *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo `json:"OrderTaskInfo,omitempty" xml:"OrderTaskInfo,omitempty" type:"Struct"`
	Name                *string                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Id                  *string                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	CreateResource      *string                                                      `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	FailReason          *ListFlowClusterResponseBodyClustersClusterInfoFailReason    `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
}

func (s ListFlowClusterResponseBodyClustersClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBodyClustersClusterInfo) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetStatus(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Status = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetType(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Type = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetRunningTime(v int32) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetOrderList(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.OrderList = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetCreateTime(v int64) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.CreateTime = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetChargeType(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetPeriod(v int32) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Period = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetK8sClusterId(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetExpiredTime(v int64) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetHasUncompletedOrder(v bool) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.HasUncompletedOrder = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetOrderTaskInfo(v *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.OrderTaskInfo = v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetName(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Name = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetId(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.Id = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetCreateResource(v string) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfo) SetFailReason(v *ListFlowClusterResponseBodyClustersClusterInfoFailReason) *ListFlowClusterResponseBodyClustersClusterInfo {
	s.FailReason = v
	return s
}

type ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo struct {
	CurrentCount *int32  `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	OrderIdList  *string `json:"OrderIdList,omitempty" xml:"OrderIdList,omitempty"`
	TargetCount  *int32  `json:"TargetCount,omitempty" xml:"TargetCount,omitempty"`
}

func (s ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) SetCurrentCount(v int32) *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo {
	s.CurrentCount = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) SetOrderIdList(v string) *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo {
	s.OrderIdList = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo) SetTargetCount(v int32) *ListFlowClusterResponseBodyClustersClusterInfoOrderTaskInfo {
	s.TargetCount = &v
	return s
}

type ListFlowClusterResponseBodyClustersClusterInfoFailReason struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
}

func (s ListFlowClusterResponseBodyClustersClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponseBodyClustersClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoFailReason) SetRequestId(v string) *ListFlowClusterResponseBodyClustersClusterInfoFailReason {
	s.RequestId = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoFailReason) SetErrorCode(v string) *ListFlowClusterResponseBodyClustersClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *ListFlowClusterResponseBodyClustersClusterInfoFailReason) SetErrorMsg(v string) *ListFlowClusterResponseBodyClustersClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

type ListFlowClusterResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterResponse) GoString() string {
	return s.String()
}

func (s *ListFlowClusterResponse) SetHeaders(v map[string]*string) *ListFlowClusterResponse {
	s.Headers = v
	return s
}

func (s *ListFlowClusterResponse) SetBody(v *ListFlowClusterResponseBody) *ListFlowClusterResponse {
	s.Body = v
	return s
}

type ListFlowClusterAllRequest struct {
	ProductType     *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowClusterAllRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllRequest) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllRequest) SetProductType(v string) *ListFlowClusterAllRequest {
	s.ProductType = &v
	return s
}

func (s *ListFlowClusterAllRequest) SetRegionId(v string) *ListFlowClusterAllRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowClusterAllRequest) SetResourceGroupId(v string) *ListFlowClusterAllRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowClusterAllResponseBody struct {
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Clusters   *ListFlowClusterAllResponseBodyClusters `json:"Clusters,omitempty" xml:"Clusters,omitempty" type:"Struct"`
}

func (s ListFlowClusterAllResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBody) SetTotalCount(v int32) *ListFlowClusterAllResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListFlowClusterAllResponseBody) SetPageSize(v int32) *ListFlowClusterAllResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowClusterAllResponseBody) SetRequestId(v string) *ListFlowClusterAllResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowClusterAllResponseBody) SetPageNumber(v int32) *ListFlowClusterAllResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowClusterAllResponseBody) SetClusters(v *ListFlowClusterAllResponseBodyClusters) *ListFlowClusterAllResponseBody {
	s.Clusters = v
	return s
}

type ListFlowClusterAllResponseBodyClusters struct {
	ClusterInfo []*ListFlowClusterAllResponseBodyClustersClusterInfo `json:"ClusterInfo,omitempty" xml:"ClusterInfo,omitempty" type:"Repeated"`
}

func (s ListFlowClusterAllResponseBodyClusters) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBodyClusters) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBodyClusters) SetClusterInfo(v []*ListFlowClusterAllResponseBodyClustersClusterInfo) *ListFlowClusterAllResponseBodyClusters {
	s.ClusterInfo = v
	return s
}

type ListFlowClusterAllResponseBodyClustersClusterInfo struct {
	Status              *string                                                         `json:"Status,omitempty" xml:"Status,omitempty"`
	Type                *string                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	RunningTime         *int32                                                          `json:"RunningTime,omitempty" xml:"RunningTime,omitempty"`
	OrderList           *string                                                         `json:"OrderList,omitempty" xml:"OrderList,omitempty"`
	CreateTime          *int64                                                          `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ChargeType          *string                                                         `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Period              *int32                                                          `json:"Period,omitempty" xml:"Period,omitempty"`
	K8sClusterId        *string                                                         `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	ExpiredTime         *int64                                                          `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	HasUncompletedOrder *bool                                                           `json:"HasUncompletedOrder,omitempty" xml:"HasUncompletedOrder,omitempty"`
	OrderTaskInfo       *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo `json:"OrderTaskInfo,omitempty" xml:"OrderTaskInfo,omitempty" type:"Struct"`
	Name                *string                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	Id                  *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	CreateResource      *string                                                         `json:"CreateResource,omitempty" xml:"CreateResource,omitempty"`
	FailReason          *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason    `json:"FailReason,omitempty" xml:"FailReason,omitempty" type:"Struct"`
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfo) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetStatus(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Status = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetType(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Type = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetRunningTime(v int32) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.RunningTime = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetOrderList(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.OrderList = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetCreateTime(v int64) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.CreateTime = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetChargeType(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.ChargeType = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetPeriod(v int32) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Period = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetK8sClusterId(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.K8sClusterId = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetExpiredTime(v int64) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.ExpiredTime = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetHasUncompletedOrder(v bool) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.HasUncompletedOrder = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetOrderTaskInfo(v *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.OrderTaskInfo = v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetName(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Name = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetId(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.Id = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetCreateResource(v string) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.CreateResource = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfo) SetFailReason(v *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) *ListFlowClusterAllResponseBodyClustersClusterInfo {
	s.FailReason = v
	return s
}

type ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo struct {
	CurrentCount *int32  `json:"CurrentCount,omitempty" xml:"CurrentCount,omitempty"`
	OrderIdList  *string `json:"OrderIdList,omitempty" xml:"OrderIdList,omitempty"`
	TargetCount  *int32  `json:"TargetCount,omitempty" xml:"TargetCount,omitempty"`
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) SetCurrentCount(v int32) *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo {
	s.CurrentCount = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) SetOrderIdList(v string) *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo {
	s.OrderIdList = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo) SetTargetCount(v int32) *ListFlowClusterAllResponseBodyClustersClusterInfoOrderTaskInfo {
	s.TargetCount = &v
	return s
}

type ListFlowClusterAllResponseBodyClustersClusterInfoFailReason struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMsg  *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) SetRequestId(v string) *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason {
	s.RequestId = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) SetErrorCode(v string) *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason {
	s.ErrorCode = &v
	return s
}

func (s *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason) SetErrorMsg(v string) *ListFlowClusterAllResponseBodyClustersClusterInfoFailReason {
	s.ErrorMsg = &v
	return s
}

type ListFlowClusterAllResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowClusterAllResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowClusterAllResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllResponse) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllResponse) SetHeaders(v map[string]*string) *ListFlowClusterAllResponse {
	s.Headers = v
	return s
}

func (s *ListFlowClusterAllResponse) SetBody(v *ListFlowClusterAllResponseBody) *ListFlowClusterAllResponse {
	s.Body = v
	return s
}

type ListFlowClusterAllHostsRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowClusterAllHostsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsRequest) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsRequest) SetRegionId(v string) *ListFlowClusterAllHostsRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowClusterAllHostsRequest) SetProjectId(v string) *ListFlowClusterAllHostsRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowClusterAllHostsRequest) SetClusterId(v string) *ListFlowClusterAllHostsRequest {
	s.ClusterId = &v
	return s
}

func (s *ListFlowClusterAllHostsRequest) SetResourceGroupId(v string) *ListFlowClusterAllHostsRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowClusterAllHostsResponseBody struct {
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HostList  *ListFlowClusterAllHostsResponseBodyHostList `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
}

func (s ListFlowClusterAllHostsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsResponseBody) SetRequestId(v string) *ListFlowClusterAllHostsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBody) SetHostList(v *ListFlowClusterAllHostsResponseBodyHostList) *ListFlowClusterAllHostsResponseBody {
	s.HostList = v
	return s
}

type ListFlowClusterAllHostsResponseBodyHostList struct {
	Host []*ListFlowClusterAllHostsResponseBodyHostListHost `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s ListFlowClusterAllHostsResponseBodyHostList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsResponseBodyHostList) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsResponseBodyHostList) SetHost(v []*ListFlowClusterAllHostsResponseBodyHostListHost) *ListFlowClusterAllHostsResponseBodyHostList {
	s.Host = v
	return s
}

type ListFlowClusterAllHostsResponseBodyHostListHost struct {
	SerialNumber   *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PrivateIp      *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceType   *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	HostId         *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	HostInstanceId *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	Cpu            *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	PublicIp       *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	Memory         *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	Role           *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s ListFlowClusterAllHostsResponseBodyHostListHost) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsResponseBodyHostListHost) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetSerialNumber(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.SerialNumber = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetType(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Type = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetStatus(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Status = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetPrivateIp(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.PrivateIp = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetHostName(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.HostName = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetInstanceType(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.InstanceType = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetHostId(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.HostId = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetHostInstanceId(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.HostInstanceId = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetCpu(v int32) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Cpu = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetPublicIp(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.PublicIp = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetMemory(v int32) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Memory = &v
	return s
}

func (s *ListFlowClusterAllHostsResponseBodyHostListHost) SetRole(v string) *ListFlowClusterAllHostsResponseBodyHostListHost {
	s.Role = &v
	return s
}

type ListFlowClusterAllHostsResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowClusterAllHostsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowClusterAllHostsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterAllHostsResponse) GoString() string {
	return s.String()
}

func (s *ListFlowClusterAllHostsResponse) SetHeaders(v map[string]*string) *ListFlowClusterAllHostsResponse {
	s.Headers = v
	return s
}

func (s *ListFlowClusterAllHostsResponse) SetBody(v *ListFlowClusterAllHostsResponseBody) *ListFlowClusterAllHostsResponse {
	s.Body = v
	return s
}

type ListFlowClusterHostRequest struct {
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowClusterHostRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostRequest) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostRequest) SetRegionId(v string) *ListFlowClusterHostRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowClusterHostRequest) SetProjectId(v string) *ListFlowClusterHostRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowClusterHostRequest) SetClusterId(v string) *ListFlowClusterHostRequest {
	s.ClusterId = &v
	return s
}

func (s *ListFlowClusterHostRequest) SetResourceGroupId(v string) *ListFlowClusterHostRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowClusterHostResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HostList  *ListFlowClusterHostResponseBodyHostList `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
}

func (s ListFlowClusterHostResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostResponseBody) SetRequestId(v string) *ListFlowClusterHostResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowClusterHostResponseBody) SetHostList(v *ListFlowClusterHostResponseBodyHostList) *ListFlowClusterHostResponseBody {
	s.HostList = v
	return s
}

type ListFlowClusterHostResponseBodyHostList struct {
	Host []*ListFlowClusterHostResponseBodyHostListHost `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s ListFlowClusterHostResponseBodyHostList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostResponseBodyHostList) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostResponseBodyHostList) SetHost(v []*ListFlowClusterHostResponseBodyHostListHost) *ListFlowClusterHostResponseBodyHostList {
	s.Host = v
	return s
}

type ListFlowClusterHostResponseBodyHostListHost struct {
	SerialNumber   *string `json:"SerialNumber,omitempty" xml:"SerialNumber,omitempty"`
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	PrivateIp      *string `json:"PrivateIp,omitempty" xml:"PrivateIp,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	InstanceType   *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	HostId         *string `json:"HostId,omitempty" xml:"HostId,omitempty"`
	HostInstanceId *string `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	Cpu            *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	PublicIp       *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	Memory         *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	Role           *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s ListFlowClusterHostResponseBodyHostListHost) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostResponseBodyHostListHost) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetSerialNumber(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.SerialNumber = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetType(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.Type = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetStatus(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.Status = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetPrivateIp(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.PrivateIp = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetHostName(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.HostName = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetInstanceType(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.InstanceType = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetHostId(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.HostId = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetHostInstanceId(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.HostInstanceId = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetCpu(v int32) *ListFlowClusterHostResponseBodyHostListHost {
	s.Cpu = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetPublicIp(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.PublicIp = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetMemory(v int32) *ListFlowClusterHostResponseBodyHostListHost {
	s.Memory = &v
	return s
}

func (s *ListFlowClusterHostResponseBodyHostListHost) SetRole(v string) *ListFlowClusterHostResponseBodyHostListHost {
	s.Role = &v
	return s
}

type ListFlowClusterHostResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowClusterHostResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowClusterHostResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowClusterHostResponse) GoString() string {
	return s.String()
}

func (s *ListFlowClusterHostResponse) SetHeaders(v map[string]*string) *ListFlowClusterHostResponse {
	s.Headers = v
	return s
}

func (s *ListFlowClusterHostResponse) SetBody(v *ListFlowClusterHostResponseBody) *ListFlowClusterHostResponse {
	s.Body = v
	return s
}

type ListFlowEntitySnapshotRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize     *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount       *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField      *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode       *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	CommitterId     *string `json:"CommitterId,omitempty" xml:"CommitterId,omitempty"`
	EntityType      *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	EntityGroupId   *string `json:"EntityGroupId,omitempty" xml:"EntityGroupId,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Revision        *string `json:"Revision,omitempty" xml:"Revision,omitempty"`
}

func (s ListFlowEntitySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowEntitySnapshotRequest) GoString() string {
	return s.String()
}

func (s *ListFlowEntitySnapshotRequest) SetResourceOwnerId(v int64) *ListFlowEntitySnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetRegionId(v string) *ListFlowEntitySnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetLimit(v int32) *ListFlowEntitySnapshotRequest {
	s.Limit = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetPageNumber(v int32) *ListFlowEntitySnapshotRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetPageSize(v int32) *ListFlowEntitySnapshotRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetCurrentSize(v int32) *ListFlowEntitySnapshotRequest {
	s.CurrentSize = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetPageCount(v int32) *ListFlowEntitySnapshotRequest {
	s.PageCount = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetOrderField(v string) *ListFlowEntitySnapshotRequest {
	s.OrderField = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetOrderMode(v string) *ListFlowEntitySnapshotRequest {
	s.OrderMode = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetCommitterId(v string) *ListFlowEntitySnapshotRequest {
	s.CommitterId = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetEntityType(v string) *ListFlowEntitySnapshotRequest {
	s.EntityType = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetEntityGroupId(v string) *ListFlowEntitySnapshotRequest {
	s.EntityGroupId = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetEntityId(v string) *ListFlowEntitySnapshotRequest {
	s.EntityId = &v
	return s
}

func (s *ListFlowEntitySnapshotRequest) SetRevision(v string) *ListFlowEntitySnapshotRequest {
	s.Revision = &v
	return s
}

type ListFlowEntitySnapshotResponseBody struct {
	TotalCount *int32                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListFlowEntitySnapshotResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListFlowEntitySnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowEntitySnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowEntitySnapshotResponseBody) SetTotalCount(v int32) *ListFlowEntitySnapshotResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBody) SetRequestId(v string) *ListFlowEntitySnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBody) SetPageSize(v int32) *ListFlowEntitySnapshotResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBody) SetPageNumber(v int32) *ListFlowEntitySnapshotResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBody) SetItems(v *ListFlowEntitySnapshotResponseBodyItems) *ListFlowEntitySnapshotResponseBody {
	s.Items = v
	return s
}

type ListFlowEntitySnapshotResponseBodyItems struct {
	Item []*ListFlowEntitySnapshotResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListFlowEntitySnapshotResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListFlowEntitySnapshotResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListFlowEntitySnapshotResponseBodyItems) SetItem(v []*ListFlowEntitySnapshotResponseBodyItemsItem) *ListFlowEntitySnapshotResponseBodyItems {
	s.Item = v
	return s
}

type ListFlowEntitySnapshotResponseBodyItemsItem struct {
	Active        *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	Data          *string `json:"Data,omitempty" xml:"Data,omitempty"`
	EntityId      *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	EntityType    *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	UserId        *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	GmtCreate     *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	EntityGroupId *string `json:"EntityGroupId,omitempty" xml:"EntityGroupId,omitempty"`
	CommitterId   *string `json:"CommitterId,omitempty" xml:"CommitterId,omitempty"`
	Revision      *string `json:"Revision,omitempty" xml:"Revision,omitempty"`
}

func (s ListFlowEntitySnapshotResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListFlowEntitySnapshotResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetActive(v bool) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.Active = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetData(v string) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.Data = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetEntityId(v string) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.EntityId = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetEntityType(v string) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.EntityType = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetUserId(v string) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.UserId = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetGmtCreate(v int64) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetMessage(v string) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.Message = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetEntityGroupId(v string) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.EntityGroupId = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetCommitterId(v string) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.CommitterId = &v
	return s
}

func (s *ListFlowEntitySnapshotResponseBodyItemsItem) SetRevision(v string) *ListFlowEntitySnapshotResponseBodyItemsItem {
	s.Revision = &v
	return s
}

type ListFlowEntitySnapshotResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowEntitySnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowEntitySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowEntitySnapshotResponse) GoString() string {
	return s.String()
}

func (s *ListFlowEntitySnapshotResponse) SetHeaders(v map[string]*string) *ListFlowEntitySnapshotResponse {
	s.Headers = v
	return s
}

func (s *ListFlowEntitySnapshotResponse) SetBody(v *ListFlowEntitySnapshotResponseBody) *ListFlowEntitySnapshotResponse {
	s.Body = v
	return s
}

type ListFlowInstanceRequest struct {
	Id             *string   `json:"Id,omitempty" xml:"Id,omitempty"`
	FlowId         *string   `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	FlowName       *string   `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	Owner          *string   `json:"Owner,omitempty" xml:"Owner,omitempty"`
	InstanceId     *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	NodeInstanceId *string   `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	TimeRange      *string   `json:"TimeRange,omitempty" xml:"TimeRange,omitempty"`
	OrderBy        *string   `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OrderType      *string   `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	RegionId       *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId      *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	PageNumber     *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StatusList     []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListFlowInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceRequest) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceRequest) SetId(v string) *ListFlowInstanceRequest {
	s.Id = &v
	return s
}

func (s *ListFlowInstanceRequest) SetFlowId(v string) *ListFlowInstanceRequest {
	s.FlowId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetFlowName(v string) *ListFlowInstanceRequest {
	s.FlowName = &v
	return s
}

func (s *ListFlowInstanceRequest) SetOwner(v string) *ListFlowInstanceRequest {
	s.Owner = &v
	return s
}

func (s *ListFlowInstanceRequest) SetInstanceId(v string) *ListFlowInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetNodeInstanceId(v string) *ListFlowInstanceRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetTimeRange(v string) *ListFlowInstanceRequest {
	s.TimeRange = &v
	return s
}

func (s *ListFlowInstanceRequest) SetOrderBy(v string) *ListFlowInstanceRequest {
	s.OrderBy = &v
	return s
}

func (s *ListFlowInstanceRequest) SetOrderType(v string) *ListFlowInstanceRequest {
	s.OrderType = &v
	return s
}

func (s *ListFlowInstanceRequest) SetRegionId(v string) *ListFlowInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetProjectId(v string) *ListFlowInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowInstanceRequest) SetPageNumber(v int32) *ListFlowInstanceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowInstanceRequest) SetPageSize(v int32) *ListFlowInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowInstanceRequest) SetStatusList(v []*string) *ListFlowInstanceRequest {
	s.StatusList = v
	return s
}

type ListFlowInstanceResponseBody struct {
	FlowInstances *ListFlowInstanceResponseBodyFlowInstances `json:"FlowInstances,omitempty" xml:"FlowInstances,omitempty" type:"Struct"`
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize      *int32                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber    *int32                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total         *int32                                     `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceResponseBody) SetFlowInstances(v *ListFlowInstanceResponseBodyFlowInstances) *ListFlowInstanceResponseBody {
	s.FlowInstances = v
	return s
}

func (s *ListFlowInstanceResponseBody) SetRequestId(v string) *ListFlowInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowInstanceResponseBody) SetPageSize(v int32) *ListFlowInstanceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowInstanceResponseBody) SetPageNumber(v int32) *ListFlowInstanceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowInstanceResponseBody) SetTotal(v int32) *ListFlowInstanceResponseBody {
	s.Total = &v
	return s
}

type ListFlowInstanceResponseBodyFlowInstances struct {
	FlowInstance []*ListFlowInstanceResponseBodyFlowInstancesFlowInstance `json:"FlowInstance,omitempty" xml:"FlowInstance,omitempty" type:"Repeated"`
}

func (s ListFlowInstanceResponseBodyFlowInstances) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceResponseBodyFlowInstances) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceResponseBodyFlowInstances) SetFlowInstance(v []*ListFlowInstanceResponseBodyFlowInstancesFlowInstance) *ListFlowInstanceResponseBodyFlowInstances {
	s.FlowInstance = v
	return s
}

type ListFlowInstanceResponseBodyFlowInstancesFlowInstance struct {
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Owner         *string `json:"Owner,omitempty" xml:"Owner,omitempty"`
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	FlowName      *string `json:"FlowName,omitempty" xml:"FlowName,omitempty"`
	GmtModified   *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	FlowId        *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	EndTime       *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime     *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	HasNodeFailed *bool   `json:"HasNodeFailed,omitempty" xml:"HasNodeFailed,omitempty"`
	GmtCreate     *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	ScheduleTime  *int64  `json:"ScheduleTime,omitempty" xml:"ScheduleTime,omitempty"`
	Duration      *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListFlowInstanceResponseBodyFlowInstancesFlowInstance) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceResponseBodyFlowInstancesFlowInstance) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetStatus(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.Status = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetOwner(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.Owner = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetProjectId(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.ProjectId = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetFlowName(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.FlowName = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetGmtModified(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.GmtModified = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetFlowId(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.FlowId = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetEndTime(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.EndTime = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetStartTime(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.StartTime = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetHasNodeFailed(v bool) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.HasNodeFailed = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetGmtCreate(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetScheduleTime(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.ScheduleTime = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetDuration(v int64) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.Duration = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetId(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.Id = &v
	return s
}

func (s *ListFlowInstanceResponseBodyFlowInstancesFlowInstance) SetClusterId(v string) *ListFlowInstanceResponseBodyFlowInstancesFlowInstance {
	s.ClusterId = &v
	return s
}

type ListFlowInstanceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowInstanceResponse) GoString() string {
	return s.String()
}

func (s *ListFlowInstanceResponse) SetHeaders(v map[string]*string) *ListFlowInstanceResponse {
	s.Headers = v
	return s
}

func (s *ListFlowInstanceResponse) SetBody(v *ListFlowInstanceResponseBody) *ListFlowInstanceResponse {
	s.Body = v
	return s
}

type ListFlowJobRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id         *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Adhoc      *bool   `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobRequest) GoString() string {
	return s.String()
}

func (s *ListFlowJobRequest) SetRegionId(v string) *ListFlowJobRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowJobRequest) SetProjectId(v string) *ListFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowJobRequest) SetId(v string) *ListFlowJobRequest {
	s.Id = &v
	return s
}

func (s *ListFlowJobRequest) SetName(v string) *ListFlowJobRequest {
	s.Name = &v
	return s
}

func (s *ListFlowJobRequest) SetType(v string) *ListFlowJobRequest {
	s.Type = &v
	return s
}

func (s *ListFlowJobRequest) SetAdhoc(v bool) *ListFlowJobRequest {
	s.Adhoc = &v
	return s
}

func (s *ListFlowJobRequest) SetPageNumber(v int32) *ListFlowJobRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowJobRequest) SetPageSize(v int32) *ListFlowJobRequest {
	s.PageSize = &v
	return s
}

type ListFlowJobResponseBody struct {
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total      *int32                          `json:"Total,omitempty" xml:"Total,omitempty"`
	JobList    *ListFlowJobResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
}

func (s ListFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBody) SetRequestId(v string) *ListFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowJobResponseBody) SetPageSize(v int32) *ListFlowJobResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowJobResponseBody) SetPageNumber(v int32) *ListFlowJobResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowJobResponseBody) SetTotal(v int32) *ListFlowJobResponseBody {
	s.Total = &v
	return s
}

func (s *ListFlowJobResponseBody) SetJobList(v *ListFlowJobResponseBodyJobList) *ListFlowJobResponseBody {
	s.JobList = v
	return s
}

type ListFlowJobResponseBodyJobList struct {
	Job []*ListFlowJobResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s ListFlowJobResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBodyJobList) SetJob(v []*ListFlowJobResponseBodyJobListJob) *ListFlowJobResponseBodyJobList {
	s.Job = v
	return s
}

type ListFlowJobResponseBodyJobListJob struct {
	Type               *string                                        `json:"Type,omitempty" xml:"Type,omitempty"`
	FailAct            *string                                        `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	CustomVariables    *string                                        `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	ResourceList       *ListFlowJobResponseBodyJobListJobResourceList `json:"ResourceList,omitempty" xml:"ResourceList,omitempty" type:"Struct"`
	RetryInterval      *int64                                         `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	EnvConf            *string                                        `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	ParamConf          *string                                        `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	Mode               *string                                        `json:"mode,omitempty" xml:"mode,omitempty"`
	GmtModified        *int64                                         `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	MonitorConf        *string                                        `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	LastInstanceDetail *string                                        `json:"LastInstanceDetail,omitempty" xml:"LastInstanceDetail,omitempty"`
	RunConf            *string                                        `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	Params             *string                                        `json:"Params,omitempty" xml:"Params,omitempty"`
	Description        *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate          *int64                                         `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	CategoryId         *string                                        `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	Adhoc              *string                                        `json:"Adhoc,omitempty" xml:"Adhoc,omitempty"`
	Name               *string                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	Id                 *string                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	AlertConf          *string                                        `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	MaxRetry           *int32                                         `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
}

func (s ListFlowJobResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBodyJobListJob) SetType(v string) *ListFlowJobResponseBodyJobListJob {
	s.Type = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetFailAct(v string) *ListFlowJobResponseBodyJobListJob {
	s.FailAct = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetCustomVariables(v string) *ListFlowJobResponseBodyJobListJob {
	s.CustomVariables = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetResourceList(v *ListFlowJobResponseBodyJobListJobResourceList) *ListFlowJobResponseBodyJobListJob {
	s.ResourceList = v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetRetryInterval(v int64) *ListFlowJobResponseBodyJobListJob {
	s.RetryInterval = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetEnvConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.EnvConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetParamConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.ParamConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetMode(v string) *ListFlowJobResponseBodyJobListJob {
	s.Mode = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetGmtModified(v int64) *ListFlowJobResponseBodyJobListJob {
	s.GmtModified = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetMonitorConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.MonitorConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetLastInstanceDetail(v string) *ListFlowJobResponseBodyJobListJob {
	s.LastInstanceDetail = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetRunConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.RunConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetParams(v string) *ListFlowJobResponseBodyJobListJob {
	s.Params = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetDescription(v string) *ListFlowJobResponseBodyJobListJob {
	s.Description = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetGmtCreate(v int64) *ListFlowJobResponseBodyJobListJob {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetCategoryId(v string) *ListFlowJobResponseBodyJobListJob {
	s.CategoryId = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetAdhoc(v string) *ListFlowJobResponseBodyJobListJob {
	s.Adhoc = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetName(v string) *ListFlowJobResponseBodyJobListJob {
	s.Name = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetId(v string) *ListFlowJobResponseBodyJobListJob {
	s.Id = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetAlertConf(v string) *ListFlowJobResponseBodyJobListJob {
	s.AlertConf = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJob) SetMaxRetry(v int32) *ListFlowJobResponseBodyJobListJob {
	s.MaxRetry = &v
	return s
}

type ListFlowJobResponseBodyJobListJobResourceList struct {
	Resource []*ListFlowJobResponseBodyJobListJobResourceListResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
}

func (s ListFlowJobResponseBodyJobListJobResourceList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBodyJobListJobResourceList) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBodyJobListJobResourceList) SetResource(v []*ListFlowJobResponseBodyJobListJobResourceListResource) *ListFlowJobResponseBodyJobListJobResourceList {
	s.Resource = v
	return s
}

type ListFlowJobResponseBodyJobListJobResourceListResource struct {
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
}

func (s ListFlowJobResponseBodyJobListJobResourceListResource) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponseBodyJobListJobResourceListResource) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponseBodyJobListJobResourceListResource) SetPath(v string) *ListFlowJobResponseBodyJobListJobResourceListResource {
	s.Path = &v
	return s
}

func (s *ListFlowJobResponseBodyJobListJobResourceListResource) SetAlias(v string) *ListFlowJobResponseBodyJobListJobResourceListResource {
	s.Alias = &v
	return s
}

type ListFlowJobResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobResponse) GoString() string {
	return s.String()
}

func (s *ListFlowJobResponse) SetHeaders(v map[string]*string) *ListFlowJobResponse {
	s.Headers = v
	return s
}

func (s *ListFlowJobResponse) SetBody(v *ListFlowJobResponseBody) *ListFlowJobResponse {
	s.Body = v
	return s
}

type ListFlowJobHistoryRequest struct {
	RegionId   *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId  *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id         *string   `json:"Id,omitempty" xml:"Id,omitempty"`
	JobType    *string   `json:"JobType,omitempty" xml:"JobType,omitempty"`
	InstanceId *string   `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	TimeRange  *string   `json:"TimeRange,omitempty" xml:"TimeRange,omitempty"`
	PageNumber *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	StatusList []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListFlowJobHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryRequest) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryRequest) SetRegionId(v string) *ListFlowJobHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetProjectId(v string) *ListFlowJobHistoryRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetId(v string) *ListFlowJobHistoryRequest {
	s.Id = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetJobType(v string) *ListFlowJobHistoryRequest {
	s.JobType = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetInstanceId(v string) *ListFlowJobHistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetTimeRange(v string) *ListFlowJobHistoryRequest {
	s.TimeRange = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetPageNumber(v int32) *ListFlowJobHistoryRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetPageSize(v int32) *ListFlowJobHistoryRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowJobHistoryRequest) SetStatusList(v []*string) *ListFlowJobHistoryRequest {
	s.StatusList = v
	return s
}

type ListFlowJobHistoryResponseBody struct {
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize      *int32                                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber    *int32                                       `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total         *int32                                       `json:"Total,omitempty" xml:"Total,omitempty"`
	NodeInstances *ListFlowJobHistoryResponseBodyNodeInstances `json:"NodeInstances,omitempty" xml:"NodeInstances,omitempty" type:"Struct"`
}

func (s ListFlowJobHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryResponseBody) SetRequestId(v string) *ListFlowJobHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBody) SetPageSize(v int32) *ListFlowJobHistoryResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowJobHistoryResponseBody) SetPageNumber(v int32) *ListFlowJobHistoryResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowJobHistoryResponseBody) SetTotal(v int32) *ListFlowJobHistoryResponseBody {
	s.Total = &v
	return s
}

func (s *ListFlowJobHistoryResponseBody) SetNodeInstances(v *ListFlowJobHistoryResponseBodyNodeInstances) *ListFlowJobHistoryResponseBody {
	s.NodeInstances = v
	return s
}

type ListFlowJobHistoryResponseBodyNodeInstances struct {
	NodeInstance []*ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance `json:"NodeInstance,omitempty" xml:"NodeInstance,omitempty" type:"Repeated"`
}

func (s ListFlowJobHistoryResponseBodyNodeInstances) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryResponseBodyNodeInstances) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryResponseBodyNodeInstances) SetNodeInstance(v []*ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) *ListFlowJobHistoryResponseBodyNodeInstances {
	s.NodeInstance = v
	return s
}

type ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance struct {
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Pending        *bool   `json:"pending,omitempty" xml:"pending,omitempty"`
	EnvConf        *string `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	RetryInterval  *int64  `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	JobType        *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	GmtModified    *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	ExternalInfo   *string `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty"`
	ExternalStatus *string `json:"ExternalStatus,omitempty" xml:"ExternalStatus,omitempty"`
	JobName        *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	ExternalId     *string `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	ClusterId      *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	MaxRetry       *int32  `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	FailAct        *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	JobParams      *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	ParamConf      *string `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	HostName       *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Retries        *int32  `json:"Retries,omitempty" xml:"Retries,omitempty"`
	EndTime        *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime      *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	RunConf        *string `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	NodeName       *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	JobId          *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	GmtCreate      *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Id             *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetType(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Type = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetStatus(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Status = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetPending(v bool) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Pending = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetEnvConf(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.EnvConf = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetRetryInterval(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.RetryInterval = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetProjectId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ProjectId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetJobType(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.JobType = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetGmtModified(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.GmtModified = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetExternalInfo(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ExternalInfo = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetExternalStatus(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ExternalStatus = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetJobName(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.JobName = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetExternalId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ExternalId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetClusterId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ClusterId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetMaxRetry(v int32) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.MaxRetry = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetFailAct(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.FailAct = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetJobParams(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.JobParams = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetParamConf(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.ParamConf = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetHostName(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.HostName = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetRetries(v int32) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Retries = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetEndTime(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.EndTime = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetStartTime(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.StartTime = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetRunConf(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.RunConf = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetNodeName(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.NodeName = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetJobId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.JobId = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetGmtCreate(v int64) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance) SetId(v string) *ListFlowJobHistoryResponseBodyNodeInstancesNodeInstance {
	s.Id = &v
	return s
}

type ListFlowJobHistoryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowJobHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowJobHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowJobHistoryResponse) GoString() string {
	return s.String()
}

func (s *ListFlowJobHistoryResponse) SetHeaders(v map[string]*string) *ListFlowJobHistoryResponse {
	s.Headers = v
	return s
}

func (s *ListFlowJobHistoryResponse) SetBody(v *ListFlowJobHistoryResponseBody) *ListFlowJobHistoryResponse {
	s.Body = v
	return s
}

type ListFlowNodeInstanceRequest struct {
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId       *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	StartTime       *int64    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	OrderBy         *string   `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	OrderType       *string   `json:"OrderType,omitempty" xml:"OrderType,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceGroupId *string   `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	StatusList      []*string `json:"StatusList,omitempty" xml:"StatusList,omitempty" type:"Repeated"`
}

func (s ListFlowNodeInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceRequest) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceRequest) SetRegionId(v string) *ListFlowNodeInstanceRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetProjectId(v string) *ListFlowNodeInstanceRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetStartTime(v int64) *ListFlowNodeInstanceRequest {
	s.StartTime = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetOrderBy(v string) *ListFlowNodeInstanceRequest {
	s.OrderBy = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetOrderType(v string) *ListFlowNodeInstanceRequest {
	s.OrderType = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetPageNumber(v int32) *ListFlowNodeInstanceRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetPageSize(v int32) *ListFlowNodeInstanceRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetResourceGroupId(v string) *ListFlowNodeInstanceRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ListFlowNodeInstanceRequest) SetStatusList(v []*string) *ListFlowNodeInstanceRequest {
	s.StatusList = v
	return s
}

type ListFlowNodeInstanceResponseBody struct {
	RequestId         *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize          *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber        *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	FlowNodeInstances *ListFlowNodeInstanceResponseBodyFlowNodeInstances `json:"FlowNodeInstances,omitempty" xml:"FlowNodeInstances,omitempty" type:"Struct"`
	Total             *int32                                             `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowNodeInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceResponseBody) SetRequestId(v string) *ListFlowNodeInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBody) SetPageSize(v int32) *ListFlowNodeInstanceResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBody) SetPageNumber(v int32) *ListFlowNodeInstanceResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBody) SetFlowNodeInstances(v *ListFlowNodeInstanceResponseBodyFlowNodeInstances) *ListFlowNodeInstanceResponseBody {
	s.FlowNodeInstances = v
	return s
}

func (s *ListFlowNodeInstanceResponseBody) SetTotal(v int32) *ListFlowNodeInstanceResponseBody {
	s.Total = &v
	return s
}

type ListFlowNodeInstanceResponseBodyFlowNodeInstances struct {
	FlowNodeInstance []*ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance `json:"FlowNodeInstance,omitempty" xml:"FlowNodeInstance,omitempty" type:"Repeated"`
}

func (s ListFlowNodeInstanceResponseBodyFlowNodeInstances) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceResponseBodyFlowNodeInstances) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstances) SetFlowNodeInstance(v []*ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) *ListFlowNodeInstanceResponseBodyFlowNodeInstances {
	s.FlowNodeInstance = v
	return s
}

type ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance struct {
	Type             *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	RetryInterval    *string `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	ProjectId        *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	JobType          *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	ExternalInfo     *string `json:"ExternalInfo,omitempty" xml:"ExternalInfo,omitempty"`
	GmtModified      *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	ExternalChildIds *string `json:"ExternalChildIds,omitempty" xml:"ExternalChildIds,omitempty"`
	ExternalStatus   *string `json:"ExternalStatus,omitempty" xml:"ExternalStatus,omitempty"`
	JobName          *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	ExternalId       *string `json:"ExternalId,omitempty" xml:"ExternalId,omitempty"`
	Pending          *bool   `json:"Pending,omitempty" xml:"Pending,omitempty"`
	ClusterId        *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	MaxRetry         *string `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	FailAct          *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	JobParams        *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	FlowInstanceId   *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	HostName         *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	FlowId           *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	Retries          *int32  `json:"Retries,omitempty" xml:"Retries,omitempty"`
	EndTime          *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ExternalSubId    *string `json:"ExternalSubId,omitempty" xml:"ExternalSubId,omitempty"`
	NodeName         *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	JobId            *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	GmtCreate        *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Duration         *int64  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Id               *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetType(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Type = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetStatus(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Status = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetRetryInterval(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.RetryInterval = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetProjectId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ProjectId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetJobType(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.JobType = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalInfo(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalInfo = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetGmtModified(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.GmtModified = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalChildIds(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalChildIds = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalStatus(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalStatus = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetJobName(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.JobName = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetPending(v bool) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Pending = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetClusterId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ClusterId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetMaxRetry(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.MaxRetry = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetFailAct(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.FailAct = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetJobParams(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.JobParams = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetFlowInstanceId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.FlowInstanceId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetHostName(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.HostName = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetFlowId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.FlowId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetRetries(v int32) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Retries = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetEndTime(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.EndTime = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetStartTime(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.StartTime = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetExternalSubId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.ExternalSubId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetNodeName(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.NodeName = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetJobId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.JobId = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetGmtCreate(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetDuration(v int64) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Duration = &v
	return s
}

func (s *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance) SetId(v string) *ListFlowNodeInstanceResponseBodyFlowNodeInstancesFlowNodeInstance {
	s.Id = &v
	return s
}

type ListFlowNodeInstanceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowNodeInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowNodeInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceResponse) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceResponse) SetHeaders(v map[string]*string) *ListFlowNodeInstanceResponse {
	s.Headers = v
	return s
}

func (s *ListFlowNodeInstanceResponse) SetBody(v *ListFlowNodeInstanceResponseBody) *ListFlowNodeInstanceResponse {
	s.Body = v
	return s
}

type ListFlowNodeInstanceContainerStatusRequest struct {
	PageNumber     *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize       *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	NodeInstanceId *string `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListFlowNodeInstanceContainerStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusRequest) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetPageNumber(v int32) *ListFlowNodeInstanceContainerStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetPageSize(v int32) *ListFlowNodeInstanceContainerStatusRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetNodeInstanceId(v string) *ListFlowNodeInstanceContainerStatusRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetProjectId(v string) *ListFlowNodeInstanceContainerStatusRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusRequest) SetRegionId(v string) *ListFlowNodeInstanceContainerStatusRequest {
	s.RegionId = &v
	return s
}

type ListFlowNodeInstanceContainerStatusResponseBody struct {
	RequestId           *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize            *int32                                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber          *int32                                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total               *int32                                                              `json:"Total,omitempty" xml:"Total,omitempty"`
	ContainerStatusList *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList `json:"ContainerStatusList,omitempty" xml:"ContainerStatusList,omitempty" type:"Struct"`
}

func (s ListFlowNodeInstanceContainerStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetRequestId(v string) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetPageSize(v int32) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetPageNumber(v int32) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetTotal(v int32) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.Total = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBody) SetContainerStatusList(v *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList) *ListFlowNodeInstanceContainerStatusResponseBody {
	s.ContainerStatusList = v
	return s
}

type ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList struct {
	ContainerStatus []*ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus `json:"ContainerStatus,omitempty" xml:"ContainerStatus,omitempty" type:"Repeated"`
}

func (s ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList) SetContainerStatus(v []*ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusList {
	s.ContainerStatus = v
	return s
}

type ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus struct {
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ContainerId   *string `json:"ContainerId,omitempty" xml:"ContainerId,omitempty"`
	HostName      *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
}

func (s ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) SetStatus(v string) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus {
	s.Status = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) SetContainerId(v string) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus {
	s.ContainerId = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) SetHostName(v string) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus {
	s.HostName = &v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus) SetApplicationId(v string) *ListFlowNodeInstanceContainerStatusResponseBodyContainerStatusListContainerStatus {
	s.ApplicationId = &v
	return s
}

type ListFlowNodeInstanceContainerStatusResponse struct {
	Headers map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowNodeInstanceContainerStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowNodeInstanceContainerStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeInstanceContainerStatusResponse) GoString() string {
	return s.String()
}

func (s *ListFlowNodeInstanceContainerStatusResponse) SetHeaders(v map[string]*string) *ListFlowNodeInstanceContainerStatusResponse {
	s.Headers = v
	return s
}

func (s *ListFlowNodeInstanceContainerStatusResponse) SetBody(v *ListFlowNodeInstanceContainerStatusResponseBody) *ListFlowNodeInstanceContainerStatusResponse {
	s.Body = v
	return s
}

type ListFlowNodeSqlResultRequest struct {
	NodeInstanceId *string `json:"NodeInstanceId,omitempty" xml:"NodeInstanceId,omitempty"`
	SqlIndex       *int32  `json:"SqlIndex,omitempty" xml:"SqlIndex,omitempty"`
	Offset         *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	Length         *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s ListFlowNodeSqlResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultRequest) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultRequest) SetNodeInstanceId(v string) *ListFlowNodeSqlResultRequest {
	s.NodeInstanceId = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetSqlIndex(v int32) *ListFlowNodeSqlResultRequest {
	s.SqlIndex = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetOffset(v int32) *ListFlowNodeSqlResultRequest {
	s.Offset = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetLength(v int32) *ListFlowNodeSqlResultRequest {
	s.Length = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetProjectId(v string) *ListFlowNodeSqlResultRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowNodeSqlResultRequest) SetRegionId(v string) *ListFlowNodeSqlResultRequest {
	s.RegionId = &v
	return s
}

type ListFlowNodeSqlResultResponseBody struct {
	RowList    *ListFlowNodeSqlResultResponseBodyRowList    `json:"RowList,omitempty" xml:"RowList,omitempty" type:"Struct"`
	RequestId  *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	HeaderList *ListFlowNodeSqlResultResponseBodyHeaderList `json:"HeaderList,omitempty" xml:"HeaderList,omitempty" type:"Struct"`
	End        *bool                                        `json:"End,omitempty" xml:"End,omitempty"`
}

func (s ListFlowNodeSqlResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBody) SetRowList(v *ListFlowNodeSqlResultResponseBodyRowList) *ListFlowNodeSqlResultResponseBody {
	s.RowList = v
	return s
}

func (s *ListFlowNodeSqlResultResponseBody) SetRequestId(v string) *ListFlowNodeSqlResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowNodeSqlResultResponseBody) SetHeaderList(v *ListFlowNodeSqlResultResponseBodyHeaderList) *ListFlowNodeSqlResultResponseBody {
	s.HeaderList = v
	return s
}

func (s *ListFlowNodeSqlResultResponseBody) SetEnd(v bool) *ListFlowNodeSqlResultResponseBody {
	s.End = &v
	return s
}

type ListFlowNodeSqlResultResponseBodyRowList struct {
	Row []*ListFlowNodeSqlResultResponseBodyRowListRow `json:"Row,omitempty" xml:"Row,omitempty" type:"Repeated"`
}

func (s ListFlowNodeSqlResultResponseBodyRowList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBodyRowList) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBodyRowList) SetRow(v []*ListFlowNodeSqlResultResponseBodyRowListRow) *ListFlowNodeSqlResultResponseBodyRowList {
	s.Row = v
	return s
}

type ListFlowNodeSqlResultResponseBodyRowListRow struct {
	RowIndex    *int32                                                  `json:"RowIndex,omitempty" xml:"RowIndex,omitempty"`
	RowItemList *ListFlowNodeSqlResultResponseBodyRowListRowRowItemList `json:"RowItemList,omitempty" xml:"RowItemList,omitempty" type:"Struct"`
}

func (s ListFlowNodeSqlResultResponseBodyRowListRow) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBodyRowListRow) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBodyRowListRow) SetRowIndex(v int32) *ListFlowNodeSqlResultResponseBodyRowListRow {
	s.RowIndex = &v
	return s
}

func (s *ListFlowNodeSqlResultResponseBodyRowListRow) SetRowItemList(v *ListFlowNodeSqlResultResponseBodyRowListRowRowItemList) *ListFlowNodeSqlResultResponseBodyRowListRow {
	s.RowItemList = v
	return s
}

type ListFlowNodeSqlResultResponseBodyRowListRowRowItemList struct {
	RowItem []*string `json:"rowItem,omitempty" xml:"rowItem,omitempty" type:"Repeated"`
}

func (s ListFlowNodeSqlResultResponseBodyRowListRowRowItemList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBodyRowListRowRowItemList) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBodyRowListRowRowItemList) SetRowItem(v []*string) *ListFlowNodeSqlResultResponseBodyRowListRowRowItemList {
	s.RowItem = v
	return s
}

type ListFlowNodeSqlResultResponseBodyHeaderList struct {
	Header []*string `json:"Header,omitempty" xml:"Header,omitempty" type:"Repeated"`
}

func (s ListFlowNodeSqlResultResponseBodyHeaderList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponseBodyHeaderList) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponseBodyHeaderList) SetHeader(v []*string) *ListFlowNodeSqlResultResponseBodyHeaderList {
	s.Header = v
	return s
}

type ListFlowNodeSqlResultResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowNodeSqlResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowNodeSqlResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowNodeSqlResultResponse) GoString() string {
	return s.String()
}

func (s *ListFlowNodeSqlResultResponse) SetHeaders(v map[string]*string) *ListFlowNodeSqlResultResponse {
	s.Headers = v
	return s
}

func (s *ListFlowNodeSqlResultResponse) SetBody(v *ListFlowNodeSqlResultResponseBody) *ListFlowNodeSqlResultResponse {
	s.Body = v
	return s
}

type ListFlowProjectRequest struct {
	ProductType     *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *ListFlowProjectRequest) SetProductType(v string) *ListFlowProjectRequest {
	s.ProductType = &v
	return s
}

func (s *ListFlowProjectRequest) SetRegionId(v string) *ListFlowProjectRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowProjectRequest) SetProjectId(v string) *ListFlowProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectRequest) SetName(v string) *ListFlowProjectRequest {
	s.Name = &v
	return s
}

func (s *ListFlowProjectRequest) SetPageNumber(v int32) *ListFlowProjectRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectRequest) SetPageSize(v int32) *ListFlowProjectRequest {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectRequest) SetResourceGroupId(v string) *ListFlowProjectRequest {
	s.ResourceGroupId = &v
	return s
}

type ListFlowProjectResponseBody struct {
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total      *int32                               `json:"Total,omitempty" xml:"Total,omitempty"`
	Projects   *ListFlowProjectResponseBodyProjects `json:"Projects,omitempty" xml:"Projects,omitempty" type:"Struct"`
}

func (s ListFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowProjectResponseBody) SetRequestId(v string) *ListFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowProjectResponseBody) SetPageSize(v int32) *ListFlowProjectResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectResponseBody) SetPageNumber(v int32) *ListFlowProjectResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectResponseBody) SetTotal(v int32) *ListFlowProjectResponseBody {
	s.Total = &v
	return s
}

func (s *ListFlowProjectResponseBody) SetProjects(v *ListFlowProjectResponseBodyProjects) *ListFlowProjectResponseBody {
	s.Projects = v
	return s
}

type ListFlowProjectResponseBodyProjects struct {
	Project []*ListFlowProjectResponseBodyProjectsProject `json:"Project,omitempty" xml:"Project,omitempty" type:"Repeated"`
}

func (s ListFlowProjectResponseBodyProjects) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectResponseBodyProjects) GoString() string {
	return s.String()
}

func (s *ListFlowProjectResponseBodyProjects) SetProject(v []*ListFlowProjectResponseBodyProjectsProject) *ListFlowProjectResponseBodyProjects {
	s.Project = v
	return s
}

type ListFlowProjectResponseBodyProjectsProject struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	UserId      *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	GmtCreate   *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListFlowProjectResponseBodyProjectsProject) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectResponseBodyProjectsProject) GoString() string {
	return s.String()
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetDescription(v string) *ListFlowProjectResponseBodyProjectsProject {
	s.Description = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetUserId(v string) *ListFlowProjectResponseBodyProjectsProject {
	s.UserId = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetGmtCreate(v int64) *ListFlowProjectResponseBodyProjectsProject {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetGmtModified(v int64) *ListFlowProjectResponseBodyProjectsProject {
	s.GmtModified = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetName(v string) *ListFlowProjectResponseBodyProjectsProject {
	s.Name = &v
	return s
}

func (s *ListFlowProjectResponseBodyProjectsProject) SetId(v string) *ListFlowProjectResponseBodyProjectsProject {
	s.Id = &v
	return s
}

type ListFlowProjectResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *ListFlowProjectResponse) SetHeaders(v map[string]*string) *ListFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *ListFlowProjectResponse) SetBody(v *ListFlowProjectResponseBody) *ListFlowProjectResponse {
	s.Body = v
	return s
}

type ListFlowProjectClusterSettingRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingRequest) SetRegionId(v string) *ListFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowProjectClusterSettingRequest) SetProjectId(v string) *ListFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectClusterSettingRequest) SetPageNumber(v int32) *ListFlowProjectClusterSettingRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectClusterSettingRequest) SetPageSize(v int32) *ListFlowProjectClusterSettingRequest {
	s.PageSize = &v
	return s
}

type ListFlowProjectClusterSettingResponseBody struct {
	ClusterSettings *ListFlowProjectClusterSettingResponseBodyClusterSettings `json:"ClusterSettings,omitempty" xml:"ClusterSettings,omitempty" type:"Struct"`
	RequestId       *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize        *int32                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber      *int32                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total           *int32                                                    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s ListFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBody) SetClusterSettings(v *ListFlowProjectClusterSettingResponseBodyClusterSettings) *ListFlowProjectClusterSettingResponseBody {
	s.ClusterSettings = v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBody) SetRequestId(v string) *ListFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBody) SetPageSize(v int32) *ListFlowProjectClusterSettingResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBody) SetPageNumber(v int32) *ListFlowProjectClusterSettingResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBody) SetTotal(v int32) *ListFlowProjectClusterSettingResponseBody {
	s.Total = &v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettings struct {
	ClusterSetting []*ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting `json:"ClusterSetting,omitempty" xml:"ClusterSetting,omitempty" type:"Repeated"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettings) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettings) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettings) SetClusterSetting(v []*ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) *ListFlowProjectClusterSettingResponseBodyClusterSettings {
	s.ClusterSetting = v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting struct {
	K8sClusterId *string                                                                          `json:"K8sClusterId,omitempty" xml:"K8sClusterId,omitempty"`
	DefaultQueue *string                                                                          `json:"DefaultQueue,omitempty" xml:"DefaultQueue,omitempty"`
	ProjectId    *string                                                                          `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	GmtCreate    *int64                                                                           `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	ClusterName  *string                                                                          `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	QueueList    *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Struct"`
	UserList     *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList  `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Struct"`
	DefaultUser  *string                                                                          `json:"DefaultUser,omitempty" xml:"DefaultUser,omitempty"`
	GmtModified  *int64                                                                           `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	HostList     *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList  `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Struct"`
	ClusterId    *string                                                                          `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetK8sClusterId(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.K8sClusterId = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetDefaultQueue(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.DefaultQueue = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetProjectId(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetGmtCreate(v int64) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetClusterName(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.ClusterName = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetQueueList(v *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.QueueList = v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetUserList(v *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.UserList = v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetDefaultUser(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.DefaultUser = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetGmtModified(v int64) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.GmtModified = &v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetHostList(v *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.HostList = v
	return s
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting) SetClusterId(v string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSetting {
	s.ClusterId = &v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList struct {
	Queue []*string `json:"Queue,omitempty" xml:"Queue,omitempty" type:"Repeated"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList) SetQueue(v []*string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingQueueList {
	s.Queue = v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList struct {
	User []*string `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList) SetUser(v []*string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingUserList {
	s.User = v
	return s
}

type ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList struct {
	Host []*string `json:"Host,omitempty" xml:"Host,omitempty" type:"Repeated"`
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList) SetHost(v []*string) *ListFlowProjectClusterSettingResponseBodyClusterSettingsClusterSettingHostList {
	s.Host = v
	return s
}

type ListFlowProjectClusterSettingResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *ListFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *ListFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *ListFlowProjectClusterSettingResponse) SetBody(v *ListFlowProjectClusterSettingResponseBody) *ListFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type ListFlowProjectUserRequest struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId  *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListFlowProjectUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserRequest) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserRequest) SetRegionId(v string) *ListFlowProjectUserRequest {
	s.RegionId = &v
	return s
}

func (s *ListFlowProjectUserRequest) SetProjectId(v string) *ListFlowProjectUserRequest {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectUserRequest) SetPageNumber(v int32) *ListFlowProjectUserRequest {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectUserRequest) SetPageSize(v int32) *ListFlowProjectUserRequest {
	s.PageSize = &v
	return s
}

type ListFlowProjectUserResponseBody struct {
	RequestId  *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                                `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                                `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total      *int32                                `json:"Total,omitempty" xml:"Total,omitempty"`
	Users      *ListFlowProjectUserResponseBodyUsers `json:"Users,omitempty" xml:"Users,omitempty" type:"Struct"`
}

func (s ListFlowProjectUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserResponseBody) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserResponseBody) SetRequestId(v string) *ListFlowProjectUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFlowProjectUserResponseBody) SetPageSize(v int32) *ListFlowProjectUserResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListFlowProjectUserResponseBody) SetPageNumber(v int32) *ListFlowProjectUserResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListFlowProjectUserResponseBody) SetTotal(v int32) *ListFlowProjectUserResponseBody {
	s.Total = &v
	return s
}

func (s *ListFlowProjectUserResponseBody) SetUsers(v *ListFlowProjectUserResponseBodyUsers) *ListFlowProjectUserResponseBody {
	s.Users = v
	return s
}

type ListFlowProjectUserResponseBodyUsers struct {
	User []*ListFlowProjectUserResponseBodyUsersUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListFlowProjectUserResponseBodyUsers) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserResponseBodyUsers) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserResponseBodyUsers) SetUser(v []*ListFlowProjectUserResponseBodyUsersUser) *ListFlowProjectUserResponseBodyUsers {
	s.User = v
	return s
}

type ListFlowProjectUserResponseBodyUsersUser struct {
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	GmtCreate     *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified   *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	UserName      *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
	AccountUserId *string `json:"AccountUserId,omitempty" xml:"AccountUserId,omitempty"`
	OwnerId       *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s ListFlowProjectUserResponseBodyUsersUser) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserResponseBodyUsersUser) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetProjectId(v string) *ListFlowProjectUserResponseBodyUsersUser {
	s.ProjectId = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetGmtCreate(v int64) *ListFlowProjectUserResponseBodyUsersUser {
	s.GmtCreate = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetGmtModified(v int64) *ListFlowProjectUserResponseBodyUsersUser {
	s.GmtModified = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetUserName(v string) *ListFlowProjectUserResponseBodyUsersUser {
	s.UserName = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetAccountUserId(v string) *ListFlowProjectUserResponseBodyUsersUser {
	s.AccountUserId = &v
	return s
}

func (s *ListFlowProjectUserResponseBodyUsersUser) SetOwnerId(v string) *ListFlowProjectUserResponseBodyUsersUser {
	s.OwnerId = &v
	return s
}

type ListFlowProjectUserResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFlowProjectUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFlowProjectUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFlowProjectUserResponse) GoString() string {
	return s.String()
}

func (s *ListFlowProjectUserResponse) SetHeaders(v map[string]*string) *ListFlowProjectUserResponse {
	s.Headers = v
	return s
}

func (s *ListFlowProjectUserResponse) SetBody(v *ListFlowProjectUserResponseBody) *ListFlowProjectUserResponse {
	s.Body = v
	return s
}

type ListJobExecutionInstancesRequest struct {
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ExecutionPlanInstanceId *string `json:"ExecutionPlanInstanceId,omitempty" xml:"ExecutionPlanInstanceId,omitempty"`
	IsDesc                  *bool   `json:"IsDesc,omitempty" xml:"IsDesc,omitempty"`
	PageNumber              *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize                *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListJobExecutionInstancesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobExecutionInstancesRequest) GoString() string {
	return s.String()
}

func (s *ListJobExecutionInstancesRequest) SetResourceOwnerId(v int64) *ListJobExecutionInstancesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListJobExecutionInstancesRequest) SetRegionId(v string) *ListJobExecutionInstancesRequest {
	s.RegionId = &v
	return s
}

func (s *ListJobExecutionInstancesRequest) SetExecutionPlanInstanceId(v string) *ListJobExecutionInstancesRequest {
	s.ExecutionPlanInstanceId = &v
	return s
}

func (s *ListJobExecutionInstancesRequest) SetIsDesc(v bool) *ListJobExecutionInstancesRequest {
	s.IsDesc = &v
	return s
}

func (s *ListJobExecutionInstancesRequest) SetPageNumber(v int32) *ListJobExecutionInstancesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListJobExecutionInstancesRequest) SetPageSize(v int32) *ListJobExecutionInstancesRequest {
	s.PageSize = &v
	return s
}

type ListJobExecutionInstancesResponseBody struct {
	TotalCount   *int32                                             `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize     *int32                                             `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int32                                             `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	JobInstances *ListJobExecutionInstancesResponseBodyJobInstances `json:"JobInstances,omitempty" xml:"JobInstances,omitempty" type:"Struct"`
}

func (s ListJobExecutionInstancesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobExecutionInstancesResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobExecutionInstancesResponseBody) SetTotalCount(v int32) *ListJobExecutionInstancesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBody) SetPageSize(v int32) *ListJobExecutionInstancesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBody) SetRequestId(v string) *ListJobExecutionInstancesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBody) SetPageNumber(v int32) *ListJobExecutionInstancesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBody) SetJobInstances(v *ListJobExecutionInstancesResponseBodyJobInstances) *ListJobExecutionInstancesResponseBody {
	s.JobInstances = v
	return s
}

type ListJobExecutionInstancesResponseBodyJobInstances struct {
	JobInstance []*ListJobExecutionInstancesResponseBodyJobInstancesJobInstance `json:"JobInstance,omitempty" xml:"JobInstance,omitempty" type:"Repeated"`
}

func (s ListJobExecutionInstancesResponseBodyJobInstances) String() string {
	return tea.Prettify(s)
}

func (s ListJobExecutionInstancesResponseBodyJobInstances) GoString() string {
	return s.String()
}

func (s *ListJobExecutionInstancesResponseBodyJobInstances) SetJobInstance(v []*ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) *ListJobExecutionInstancesResponseBodyJobInstances {
	s.JobInstance = v
	return s
}

type ListJobExecutionInstancesResponseBodyJobInstancesJobInstance struct {
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	StartTime *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	JobName   *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	RetryInfo *string `json:"RetryInfo,omitempty" xml:"RetryInfo,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	RunTime   *int32  `json:"RunTime,omitempty" xml:"RunTime,omitempty"`
	JobType   *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) String() string {
	return tea.Prettify(s)
}

func (s ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) GoString() string {
	return s.String()
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetStatus(v string) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.Status = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetStartTime(v int64) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.StartTime = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetJobName(v string) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.JobName = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetRetryInfo(v string) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.RetryInfo = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetJobId(v string) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.JobId = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetRunTime(v int32) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.RunTime = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetJobType(v string) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.JobType = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetId(v string) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.Id = &v
	return s
}

func (s *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance) SetClusterId(v string) *ListJobExecutionInstancesResponseBodyJobInstancesJobInstance {
	s.ClusterId = &v
	return s
}

type ListJobExecutionInstancesResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListJobExecutionInstancesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobExecutionInstancesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobExecutionInstancesResponse) GoString() string {
	return s.String()
}

func (s *ListJobExecutionInstancesResponse) SetHeaders(v map[string]*string) *ListJobExecutionInstancesResponse {
	s.Headers = v
	return s
}

func (s *ListJobExecutionInstancesResponse) SetBody(v *ListJobExecutionInstancesResponseBody) *ListJobExecutionInstancesResponse {
	s.Body = v
	return s
}

type ListJobInstanceWorkersRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	JobInstanceId   *string `json:"JobInstanceId,omitempty" xml:"JobInstanceId,omitempty"`
}

func (s ListJobInstanceWorkersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobInstanceWorkersRequest) GoString() string {
	return s.String()
}

func (s *ListJobInstanceWorkersRequest) SetResourceOwnerId(v int64) *ListJobInstanceWorkersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListJobInstanceWorkersRequest) SetRegionId(v string) *ListJobInstanceWorkersRequest {
	s.RegionId = &v
	return s
}

func (s *ListJobInstanceWorkersRequest) SetJobInstanceId(v string) *ListJobInstanceWorkersRequest {
	s.JobInstanceId = &v
	return s
}

type ListJobInstanceWorkersResponseBody struct {
	RequestId          *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobInstanceWorkers *ListJobInstanceWorkersResponseBodyJobInstanceWorkers `json:"JobInstanceWorkers,omitempty" xml:"JobInstanceWorkers,omitempty" type:"Struct"`
}

func (s ListJobInstanceWorkersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobInstanceWorkersResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobInstanceWorkersResponseBody) SetRequestId(v string) *ListJobInstanceWorkersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobInstanceWorkersResponseBody) SetJobInstanceWorkers(v *ListJobInstanceWorkersResponseBodyJobInstanceWorkers) *ListJobInstanceWorkersResponseBody {
	s.JobInstanceWorkers = v
	return s
}

type ListJobInstanceWorkersResponseBodyJobInstanceWorkers struct {
	JobInstanceWorkerInfo []*ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo `json:"JobInstanceWorkerInfo,omitempty" xml:"JobInstanceWorkerInfo,omitempty" type:"Repeated"`
}

func (s ListJobInstanceWorkersResponseBodyJobInstanceWorkers) String() string {
	return tea.Prettify(s)
}

func (s ListJobInstanceWorkersResponseBodyJobInstanceWorkers) GoString() string {
	return s.String()
}

func (s *ListJobInstanceWorkersResponseBodyJobInstanceWorkers) SetJobInstanceWorkerInfo(v []*ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo) *ListJobInstanceWorkersResponseBodyJobInstanceWorkers {
	s.JobInstanceWorkerInfo = v
	return s
}

type ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo struct {
	ContainerInfo *string `json:"ContainerInfo,omitempty" xml:"ContainerInfo,omitempty"`
	InstanceInfo  *string `json:"InstanceInfo,omitempty" xml:"InstanceInfo,omitempty"`
	ApplicationId *string `json:"ApplicationId,omitempty" xml:"ApplicationId,omitempty"`
}

func (s ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo) String() string {
	return tea.Prettify(s)
}

func (s ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo) GoString() string {
	return s.String()
}

func (s *ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo) SetContainerInfo(v string) *ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo {
	s.ContainerInfo = &v
	return s
}

func (s *ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo) SetInstanceInfo(v string) *ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo {
	s.InstanceInfo = &v
	return s
}

func (s *ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo) SetApplicationId(v string) *ListJobInstanceWorkersResponseBodyJobInstanceWorkersJobInstanceWorkerInfo {
	s.ApplicationId = &v
	return s
}

type ListJobInstanceWorkersResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListJobInstanceWorkersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobInstanceWorkersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobInstanceWorkersResponse) GoString() string {
	return s.String()
}

func (s *ListJobInstanceWorkersResponse) SetHeaders(v map[string]*string) *ListJobInstanceWorkersResponse {
	s.Headers = v
	return s
}

func (s *ListJobInstanceWorkersResponse) SetBody(v *ListJobInstanceWorkersResponseBody) *ListJobInstanceWorkersResponse {
	s.Body = v
	return s
}

type ListJobsRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	IsDesc          *bool   `json:"IsDesc,omitempty" xml:"IsDesc,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	QueryType       *string `json:"QueryType,omitempty" xml:"QueryType,omitempty"`
	QueryString     *string `json:"QueryString,omitempty" xml:"QueryString,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobsRequest) GoString() string {
	return s.String()
}

func (s *ListJobsRequest) SetResourceOwnerId(v int64) *ListJobsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListJobsRequest) SetRegionId(v string) *ListJobsRequest {
	s.RegionId = &v
	return s
}

func (s *ListJobsRequest) SetIsDesc(v bool) *ListJobsRequest {
	s.IsDesc = &v
	return s
}

func (s *ListJobsRequest) SetPageNumber(v int32) *ListJobsRequest {
	s.PageNumber = &v
	return s
}

func (s *ListJobsRequest) SetPageSize(v int32) *ListJobsRequest {
	s.PageSize = &v
	return s
}

func (s *ListJobsRequest) SetQueryType(v string) *ListJobsRequest {
	s.QueryType = &v
	return s
}

func (s *ListJobsRequest) SetQueryString(v string) *ListJobsRequest {
	s.QueryString = &v
	return s
}

func (s *ListJobsRequest) SetResourceGroupId(v string) *ListJobsRequest {
	s.ResourceGroupId = &v
	return s
}

type ListJobsResponseBody struct {
	TotalCount *int32                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize   *int32                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Jobs       *ListJobsResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Struct"`
}

func (s ListJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBody) SetTotalCount(v int32) *ListJobsResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListJobsResponseBody) SetPageSize(v int32) *ListJobsResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListJobsResponseBody) SetRequestId(v string) *ListJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobsResponseBody) SetPageNumber(v int32) *ListJobsResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListJobsResponseBody) SetJobs(v *ListJobsResponseBodyJobs) *ListJobsResponseBody {
	s.Jobs = v
	return s
}

type ListJobsResponseBodyJobs struct {
	JobInfo []*ListJobsResponseBodyJobsJobInfo `json:"JobInfo,omitempty" xml:"JobInfo,omitempty" type:"Repeated"`
}

func (s ListJobsResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobs) SetJobInfo(v []*ListJobsResponseBodyJobsJobInfo) *ListJobsResponseBodyJobs {
	s.JobInfo = v
	return s
}

type ListJobsResponseBodyJobsJobInfo struct {
	Type          *string `json:"Type,omitempty" xml:"Type,omitempty"`
	FailAct       *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	RetryInterval *int32  `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Id            *string `json:"Id,omitempty" xml:"Id,omitempty"`
	RunParameter  *string `json:"RunParameter,omitempty" xml:"RunParameter,omitempty"`
	MaxRetry      *int32  `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
}

func (s ListJobsResponseBodyJobsJobInfo) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponseBodyJobsJobInfo) GoString() string {
	return s.String()
}

func (s *ListJobsResponseBodyJobsJobInfo) SetType(v string) *ListJobsResponseBodyJobsJobInfo {
	s.Type = &v
	return s
}

func (s *ListJobsResponseBodyJobsJobInfo) SetFailAct(v string) *ListJobsResponseBodyJobsJobInfo {
	s.FailAct = &v
	return s
}

func (s *ListJobsResponseBodyJobsJobInfo) SetRetryInterval(v int32) *ListJobsResponseBodyJobsJobInfo {
	s.RetryInterval = &v
	return s
}

func (s *ListJobsResponseBodyJobsJobInfo) SetName(v string) *ListJobsResponseBodyJobsJobInfo {
	s.Name = &v
	return s
}

func (s *ListJobsResponseBodyJobsJobInfo) SetId(v string) *ListJobsResponseBodyJobsJobInfo {
	s.Id = &v
	return s
}

func (s *ListJobsResponseBodyJobsJobInfo) SetRunParameter(v string) *ListJobsResponseBodyJobsJobInfo {
	s.RunParameter = &v
	return s
}

func (s *ListJobsResponseBodyJobsJobInfo) SetMaxRetry(v int32) *ListJobsResponseBodyJobsJobInfo {
	s.MaxRetry = &v
	return s
}

type ListJobsResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobsResponse) GoString() string {
	return s.String()
}

func (s *ListJobsResponse) SetHeaders(v map[string]*string) *ListJobsResponse {
	s.Headers = v
	return s
}

func (s *ListJobsResponse) SetBody(v *ListJobsResponseBody) *ListJobsResponse {
	s.Body = v
	return s
}

type ListLibrariesRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize     *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount       *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField      *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode       *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	ClusterBizId    *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
}

func (s ListLibrariesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLibrariesRequest) GoString() string {
	return s.String()
}

func (s *ListLibrariesRequest) SetResourceOwnerId(v int64) *ListLibrariesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListLibrariesRequest) SetRegionId(v string) *ListLibrariesRequest {
	s.RegionId = &v
	return s
}

func (s *ListLibrariesRequest) SetLimit(v int32) *ListLibrariesRequest {
	s.Limit = &v
	return s
}

func (s *ListLibrariesRequest) SetPageNumber(v int32) *ListLibrariesRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLibrariesRequest) SetPageSize(v int32) *ListLibrariesRequest {
	s.PageSize = &v
	return s
}

func (s *ListLibrariesRequest) SetCurrentSize(v int32) *ListLibrariesRequest {
	s.CurrentSize = &v
	return s
}

func (s *ListLibrariesRequest) SetPageCount(v int32) *ListLibrariesRequest {
	s.PageCount = &v
	return s
}

func (s *ListLibrariesRequest) SetOrderField(v string) *ListLibrariesRequest {
	s.OrderField = &v
	return s
}

func (s *ListLibrariesRequest) SetOrderMode(v string) *ListLibrariesRequest {
	s.OrderMode = &v
	return s
}

func (s *ListLibrariesRequest) SetClusterBizId(v string) *ListLibrariesRequest {
	s.ClusterBizId = &v
	return s
}

type ListLibrariesResponseBody struct {
	TotalCount *int32                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                         `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListLibrariesResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListLibrariesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLibrariesResponseBody) GoString() string {
	return s.String()
}

func (s *ListLibrariesResponseBody) SetTotalCount(v int32) *ListLibrariesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListLibrariesResponseBody) SetNextToken(v string) *ListLibrariesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListLibrariesResponseBody) SetPageSize(v int32) *ListLibrariesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLibrariesResponseBody) SetRequestId(v string) *ListLibrariesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLibrariesResponseBody) SetPageNumber(v int32) *ListLibrariesResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListLibrariesResponseBody) SetItems(v *ListLibrariesResponseBodyItems) *ListLibrariesResponseBody {
	s.Items = v
	return s
}

type ListLibrariesResponseBodyItems struct {
	Item []*ListLibrariesResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListLibrariesResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListLibrariesResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListLibrariesResponseBodyItems) SetItem(v []*ListLibrariesResponseBodyItemsItem) *ListLibrariesResponseBodyItems {
	s.Item = v
	return s
}

type ListLibrariesResponseBodyItemsItem struct {
	Type           *string `json:"Type,omitempty" xml:"Type,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	SourceType     *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	BizId          *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	Scope          *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	LibraryVersion *string `json:"LibraryVersion,omitempty" xml:"LibraryVersion,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Properties     *string `json:"Properties,omitempty" xml:"Properties,omitempty"`
	SourceLocation *string `json:"SourceLocation,omitempty" xml:"SourceLocation,omitempty"`
}

func (s ListLibrariesResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListLibrariesResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListLibrariesResponseBodyItemsItem) SetType(v string) *ListLibrariesResponseBodyItemsItem {
	s.Type = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetCreateTime(v int64) *ListLibrariesResponseBodyItemsItem {
	s.CreateTime = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetUserId(v string) *ListLibrariesResponseBodyItemsItem {
	s.UserId = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetSourceType(v string) *ListLibrariesResponseBodyItemsItem {
	s.SourceType = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetBizId(v string) *ListLibrariesResponseBodyItemsItem {
	s.BizId = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetScope(v string) *ListLibrariesResponseBodyItemsItem {
	s.Scope = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetLibraryVersion(v string) *ListLibrariesResponseBodyItemsItem {
	s.LibraryVersion = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetName(v string) *ListLibrariesResponseBodyItemsItem {
	s.Name = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetProperties(v string) *ListLibrariesResponseBodyItemsItem {
	s.Properties = &v
	return s
}

func (s *ListLibrariesResponseBodyItemsItem) SetSourceLocation(v string) *ListLibrariesResponseBodyItemsItem {
	s.SourceLocation = &v
	return s
}

type ListLibrariesResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListLibrariesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLibrariesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLibrariesResponse) GoString() string {
	return s.String()
}

func (s *ListLibrariesResponse) SetHeaders(v map[string]*string) *ListLibrariesResponse {
	s.Headers = v
	return s
}

func (s *ListLibrariesResponse) SetBody(v *ListLibrariesResponseBody) *ListLibrariesResponse {
	s.Body = v
	return s
}

type ListLibraryInstallTasksRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize     *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount       *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField      *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode       *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	LibraryBizId    *string `json:"LibraryBizId,omitempty" xml:"LibraryBizId,omitempty"`
	ClusterBizId    *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
}

func (s ListLibraryInstallTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryInstallTasksRequest) GoString() string {
	return s.String()
}

func (s *ListLibraryInstallTasksRequest) SetResourceOwnerId(v int64) *ListLibraryInstallTasksRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetRegionId(v string) *ListLibraryInstallTasksRequest {
	s.RegionId = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetLimit(v int32) *ListLibraryInstallTasksRequest {
	s.Limit = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetPageNumber(v int32) *ListLibraryInstallTasksRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetPageSize(v int32) *ListLibraryInstallTasksRequest {
	s.PageSize = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetCurrentSize(v int32) *ListLibraryInstallTasksRequest {
	s.CurrentSize = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetPageCount(v int32) *ListLibraryInstallTasksRequest {
	s.PageCount = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetOrderField(v string) *ListLibraryInstallTasksRequest {
	s.OrderField = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetOrderMode(v string) *ListLibraryInstallTasksRequest {
	s.OrderMode = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetLibraryBizId(v string) *ListLibraryInstallTasksRequest {
	s.LibraryBizId = &v
	return s
}

func (s *ListLibraryInstallTasksRequest) SetClusterBizId(v string) *ListLibraryInstallTasksRequest {
	s.ClusterBizId = &v
	return s
}

type ListLibraryInstallTasksResponseBody struct {
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListLibraryInstallTasksResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListLibraryInstallTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryInstallTasksResponseBody) GoString() string {
	return s.String()
}

func (s *ListLibraryInstallTasksResponseBody) SetTotalCount(v int32) *ListLibraryInstallTasksResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBody) SetNextToken(v string) *ListLibraryInstallTasksResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBody) SetPageSize(v int32) *ListLibraryInstallTasksResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBody) SetRequestId(v string) *ListLibraryInstallTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBody) SetPageNumber(v int32) *ListLibraryInstallTasksResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBody) SetItems(v *ListLibraryInstallTasksResponseBodyItems) *ListLibraryInstallTasksResponseBody {
	s.Items = v
	return s
}

type ListLibraryInstallTasksResponseBodyItems struct {
	Item []*ListLibraryInstallTasksResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListLibraryInstallTasksResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryInstallTasksResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListLibraryInstallTasksResponseBodyItems) SetItem(v []*ListLibraryInstallTasksResponseBodyItemsItem) *ListLibraryInstallTasksResponseBodyItems {
	s.Item = v
	return s
}

type ListLibraryInstallTasksResponseBodyItemsItem struct {
	LibraryBizId *string `json:"LibraryBizId,omitempty" xml:"LibraryBizId,omitempty"`
	Hostname     *string `json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	EndTime      *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	TaskType     *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	StartTime    *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskStatus   *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskGroupId  *string `json:"TaskGroupId,omitempty" xml:"TaskGroupId,omitempty"`
	TaskProcess  *int32  `json:"TaskProcess,omitempty" xml:"TaskProcess,omitempty"`
	ClusterBizId *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	ExecuteTime  *int64  `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	TaskId       *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Detail       *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
}

func (s ListLibraryInstallTasksResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryInstallTasksResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetLibraryBizId(v string) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.LibraryBizId = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetHostname(v string) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.Hostname = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetEndTime(v int64) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.EndTime = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetTaskType(v string) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.TaskType = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetStartTime(v int64) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.StartTime = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetTaskStatus(v string) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.TaskStatus = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetTaskGroupId(v string) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.TaskGroupId = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetTaskProcess(v int32) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.TaskProcess = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetClusterBizId(v string) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.ClusterBizId = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetExecuteTime(v int64) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.ExecuteTime = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetTaskId(v string) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.TaskId = &v
	return s
}

func (s *ListLibraryInstallTasksResponseBodyItemsItem) SetDetail(v string) *ListLibraryInstallTasksResponseBodyItemsItem {
	s.Detail = &v
	return s
}

type ListLibraryInstallTasksResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListLibraryInstallTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLibraryInstallTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryInstallTasksResponse) GoString() string {
	return s.String()
}

func (s *ListLibraryInstallTasksResponse) SetHeaders(v map[string]*string) *ListLibraryInstallTasksResponse {
	s.Headers = v
	return s
}

func (s *ListLibraryInstallTasksResponse) SetBody(v *ListLibraryInstallTasksResponseBody) *ListLibraryInstallTasksResponse {
	s.Body = v
	return s
}

type ListLibraryStatusRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize     *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount       *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField      *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode       *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	LibraryBizId    *string `json:"LibraryBizId,omitempty" xml:"LibraryBizId,omitempty"`
	ClusterBizId    *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
}

func (s ListLibraryStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryStatusRequest) GoString() string {
	return s.String()
}

func (s *ListLibraryStatusRequest) SetResourceOwnerId(v int64) *ListLibraryStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListLibraryStatusRequest) SetRegionId(v string) *ListLibraryStatusRequest {
	s.RegionId = &v
	return s
}

func (s *ListLibraryStatusRequest) SetLimit(v int32) *ListLibraryStatusRequest {
	s.Limit = &v
	return s
}

func (s *ListLibraryStatusRequest) SetPageNumber(v int32) *ListLibraryStatusRequest {
	s.PageNumber = &v
	return s
}

func (s *ListLibraryStatusRequest) SetPageSize(v int32) *ListLibraryStatusRequest {
	s.PageSize = &v
	return s
}

func (s *ListLibraryStatusRequest) SetCurrentSize(v int32) *ListLibraryStatusRequest {
	s.CurrentSize = &v
	return s
}

func (s *ListLibraryStatusRequest) SetPageCount(v int32) *ListLibraryStatusRequest {
	s.PageCount = &v
	return s
}

func (s *ListLibraryStatusRequest) SetOrderField(v string) *ListLibraryStatusRequest {
	s.OrderField = &v
	return s
}

func (s *ListLibraryStatusRequest) SetOrderMode(v string) *ListLibraryStatusRequest {
	s.OrderMode = &v
	return s
}

func (s *ListLibraryStatusRequest) SetLibraryBizId(v string) *ListLibraryStatusRequest {
	s.LibraryBizId = &v
	return s
}

func (s *ListLibraryStatusRequest) SetClusterBizId(v string) *ListLibraryStatusRequest {
	s.ClusterBizId = &v
	return s
}

type ListLibraryStatusResponseBody struct {
	TotalCount *int32                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                             `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize   *int32                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListLibraryStatusResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListLibraryStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryStatusResponseBody) GoString() string {
	return s.String()
}

func (s *ListLibraryStatusResponseBody) SetTotalCount(v int32) *ListLibraryStatusResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListLibraryStatusResponseBody) SetNextToken(v string) *ListLibraryStatusResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListLibraryStatusResponseBody) SetPageSize(v int32) *ListLibraryStatusResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListLibraryStatusResponseBody) SetRequestId(v string) *ListLibraryStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListLibraryStatusResponseBody) SetPageNumber(v int32) *ListLibraryStatusResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListLibraryStatusResponseBody) SetItems(v *ListLibraryStatusResponseBodyItems) *ListLibraryStatusResponseBody {
	s.Items = v
	return s
}

type ListLibraryStatusResponseBodyItems struct {
	Item []*ListLibraryStatusResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListLibraryStatusResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryStatusResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListLibraryStatusResponseBodyItems) SetItem(v []*ListLibraryStatusResponseBodyItemsItem) *ListLibraryStatusResponseBodyItems {
	s.Item = v
	return s
}

type ListLibraryStatusResponseBodyItemsItem struct {
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	LibraryBizId *string `json:"LibraryBizId,omitempty" xml:"LibraryBizId,omitempty"`
	LibraryName  *string `json:"LibraryName,omitempty" xml:"LibraryName,omitempty"`
	ClusterName  *string `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterBizId *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
}

func (s ListLibraryStatusResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryStatusResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListLibraryStatusResponseBodyItemsItem) SetStatus(v string) *ListLibraryStatusResponseBodyItemsItem {
	s.Status = &v
	return s
}

func (s *ListLibraryStatusResponseBodyItemsItem) SetLibraryBizId(v string) *ListLibraryStatusResponseBodyItemsItem {
	s.LibraryBizId = &v
	return s
}

func (s *ListLibraryStatusResponseBodyItemsItem) SetLibraryName(v string) *ListLibraryStatusResponseBodyItemsItem {
	s.LibraryName = &v
	return s
}

func (s *ListLibraryStatusResponseBodyItemsItem) SetClusterName(v string) *ListLibraryStatusResponseBodyItemsItem {
	s.ClusterName = &v
	return s
}

func (s *ListLibraryStatusResponseBodyItemsItem) SetClusterBizId(v string) *ListLibraryStatusResponseBodyItemsItem {
	s.ClusterBizId = &v
	return s
}

type ListLibraryStatusResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListLibraryStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListLibraryStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s ListLibraryStatusResponse) GoString() string {
	return s.String()
}

func (s *ListLibraryStatusResponse) SetHeaders(v map[string]*string) *ListLibraryStatusResponse {
	s.Headers = v
	return s
}

func (s *ListLibraryStatusResponse) SetBody(v *ListLibraryStatusResponseBody) *ListLibraryStatusResponse {
	s.Body = v
	return s
}

type ListMetaClusterRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	SourceType      *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s ListMetaClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMetaClusterRequest) GoString() string {
	return s.String()
}

func (s *ListMetaClusterRequest) SetResourceOwnerId(v int64) *ListMetaClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListMetaClusterRequest) SetRegionId(v string) *ListMetaClusterRequest {
	s.RegionId = &v
	return s
}

func (s *ListMetaClusterRequest) SetPageNumber(v int32) *ListMetaClusterRequest {
	s.PageNumber = &v
	return s
}

func (s *ListMetaClusterRequest) SetPageSize(v int32) *ListMetaClusterRequest {
	s.PageSize = &v
	return s
}

func (s *ListMetaClusterRequest) SetSourceType(v string) *ListMetaClusterRequest {
	s.SourceType = &v
	return s
}

type ListMetaClusterResponseBody struct {
	TotalCount *int32                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListMetaClusterResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListMetaClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMetaClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ListMetaClusterResponseBody) SetTotalCount(v int32) *ListMetaClusterResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListMetaClusterResponseBody) SetRequestId(v string) *ListMetaClusterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMetaClusterResponseBody) SetPageSize(v int32) *ListMetaClusterResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListMetaClusterResponseBody) SetPageNumber(v int32) *ListMetaClusterResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListMetaClusterResponseBody) SetItems(v *ListMetaClusterResponseBodyItems) *ListMetaClusterResponseBody {
	s.Items = v
	return s
}

type ListMetaClusterResponseBodyItems struct {
	Item []*ListMetaClusterResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListMetaClusterResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListMetaClusterResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListMetaClusterResponseBodyItems) SetItem(v []*ListMetaClusterResponseBodyItemsItem) *ListMetaClusterResponseBodyItems {
	s.Item = v
	return s
}

type ListMetaClusterResponseBodyItemsItem struct {
	Name         *string                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	SoftwareInfo *ListMetaClusterResponseBodyItemsItemSoftwareInfo `json:"SoftwareInfo,omitempty" xml:"SoftwareInfo,omitempty" type:"Struct"`
	Id           *string                                           `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListMetaClusterResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListMetaClusterResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListMetaClusterResponseBodyItemsItem) SetName(v string) *ListMetaClusterResponseBodyItemsItem {
	s.Name = &v
	return s
}

func (s *ListMetaClusterResponseBodyItemsItem) SetSoftwareInfo(v *ListMetaClusterResponseBodyItemsItemSoftwareInfo) *ListMetaClusterResponseBodyItemsItem {
	s.SoftwareInfo = v
	return s
}

func (s *ListMetaClusterResponseBodyItemsItem) SetId(v string) *ListMetaClusterResponseBodyItemsItem {
	s.Id = &v
	return s
}

type ListMetaClusterResponseBodyItemsItemSoftwareInfo struct {
	EmrVer      *string `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType *string `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
}

func (s ListMetaClusterResponseBodyItemsItemSoftwareInfo) String() string {
	return tea.Prettify(s)
}

func (s ListMetaClusterResponseBodyItemsItemSoftwareInfo) GoString() string {
	return s.String()
}

func (s *ListMetaClusterResponseBodyItemsItemSoftwareInfo) SetEmrVer(v string) *ListMetaClusterResponseBodyItemsItemSoftwareInfo {
	s.EmrVer = &v
	return s
}

func (s *ListMetaClusterResponseBodyItemsItemSoftwareInfo) SetClusterType(v string) *ListMetaClusterResponseBodyItemsItemSoftwareInfo {
	s.ClusterType = &v
	return s
}

type ListMetaClusterResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMetaClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMetaClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMetaClusterResponse) GoString() string {
	return s.String()
}

func (s *ListMetaClusterResponse) SetHeaders(v map[string]*string) *ListMetaClusterResponse {
	s.Headers = v
	return s
}

func (s *ListMetaClusterResponse) SetBody(v *ListMetaClusterResponseBody) *ListMetaClusterResponse {
	s.Body = v
	return s
}

type ListMetaDataSourceClusterForOuterRequest struct {
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	UserId          *string   `json:"UserId,omitempty" xml:"UserId,omitempty"`
	PageNumber      *int32    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	DataSourceId    []*string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty" type:"Repeated"`
	ClusterId       []*string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty" type:"Repeated"`
}

func (s ListMetaDataSourceClusterForOuterRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDataSourceClusterForOuterRequest) GoString() string {
	return s.String()
}

func (s *ListMetaDataSourceClusterForOuterRequest) SetResourceOwnerId(v int64) *ListMetaDataSourceClusterForOuterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterRequest) SetRegionId(v string) *ListMetaDataSourceClusterForOuterRequest {
	s.RegionId = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterRequest) SetUserId(v string) *ListMetaDataSourceClusterForOuterRequest {
	s.UserId = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterRequest) SetPageNumber(v int32) *ListMetaDataSourceClusterForOuterRequest {
	s.PageNumber = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterRequest) SetPageSize(v int32) *ListMetaDataSourceClusterForOuterRequest {
	s.PageSize = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterRequest) SetDataSourceId(v []*string) *ListMetaDataSourceClusterForOuterRequest {
	s.DataSourceId = v
	return s
}

func (s *ListMetaDataSourceClusterForOuterRequest) SetClusterId(v []*string) *ListMetaDataSourceClusterForOuterRequest {
	s.ClusterId = v
	return s
}

type ListMetaDataSourceClusterForOuterResponseBody struct {
	TotalCount *int32                                              `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                                              `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                                              `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListMetaDataSourceClusterForOuterResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListMetaDataSourceClusterForOuterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDataSourceClusterForOuterResponseBody) GoString() string {
	return s.String()
}

func (s *ListMetaDataSourceClusterForOuterResponseBody) SetTotalCount(v int32) *ListMetaDataSourceClusterForOuterResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterResponseBody) SetRequestId(v string) *ListMetaDataSourceClusterForOuterResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterResponseBody) SetPageSize(v int32) *ListMetaDataSourceClusterForOuterResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterResponseBody) SetPageNumber(v int32) *ListMetaDataSourceClusterForOuterResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterResponseBody) SetItems(v *ListMetaDataSourceClusterForOuterResponseBodyItems) *ListMetaDataSourceClusterForOuterResponseBody {
	s.Items = v
	return s
}

type ListMetaDataSourceClusterForOuterResponseBodyItems struct {
	Item []*ListMetaDataSourceClusterForOuterResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListMetaDataSourceClusterForOuterResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDataSourceClusterForOuterResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListMetaDataSourceClusterForOuterResponseBodyItems) SetItem(v []*ListMetaDataSourceClusterForOuterResponseBodyItemsItem) *ListMetaDataSourceClusterForOuterResponseBodyItems {
	s.Item = v
	return s
}

type ListMetaDataSourceClusterForOuterResponseBodyItemsItem struct {
	DataSourceId *string `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	ClusterId    *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ListMetaDataSourceClusterForOuterResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDataSourceClusterForOuterResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListMetaDataSourceClusterForOuterResponseBodyItemsItem) SetDataSourceId(v string) *ListMetaDataSourceClusterForOuterResponseBodyItemsItem {
	s.DataSourceId = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterResponseBodyItemsItem) SetUserId(v string) *ListMetaDataSourceClusterForOuterResponseBodyItemsItem {
	s.UserId = &v
	return s
}

func (s *ListMetaDataSourceClusterForOuterResponseBodyItemsItem) SetClusterId(v string) *ListMetaDataSourceClusterForOuterResponseBodyItemsItem {
	s.ClusterId = &v
	return s
}

type ListMetaDataSourceClusterForOuterResponse struct {
	Headers map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMetaDataSourceClusterForOuterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMetaDataSourceClusterForOuterResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMetaDataSourceClusterForOuterResponse) GoString() string {
	return s.String()
}

func (s *ListMetaDataSourceClusterForOuterResponse) SetHeaders(v map[string]*string) *ListMetaDataSourceClusterForOuterResponse {
	s.Headers = v
	return s
}

func (s *ListMetaDataSourceClusterForOuterResponse) SetBody(v *ListMetaDataSourceClusterForOuterResponseBody) *ListMetaDataSourceClusterForOuterResponse {
	s.Body = v
	return s
}

type ListNotesRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ListNotesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListNotesRequest) GoString() string {
	return s.String()
}

func (s *ListNotesRequest) SetResourceOwnerId(v int64) *ListNotesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListNotesRequest) SetRegionId(v string) *ListNotesRequest {
	s.RegionId = &v
	return s
}

func (s *ListNotesRequest) SetResourceGroupId(v string) *ListNotesRequest {
	s.ResourceGroupId = &v
	return s
}

type ListNotesResponseBody struct {
	RequestId *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Notes     *ListNotesResponseBodyNotes `json:"Notes,omitempty" xml:"Notes,omitempty" type:"Struct"`
}

func (s ListNotesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListNotesResponseBody) GoString() string {
	return s.String()
}

func (s *ListNotesResponseBody) SetRequestId(v string) *ListNotesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListNotesResponseBody) SetNotes(v *ListNotesResponseBodyNotes) *ListNotesResponseBody {
	s.Notes = v
	return s
}

type ListNotesResponseBodyNotes struct {
	NoteInfo []*ListNotesResponseBodyNotesNoteInfo `json:"NoteInfo,omitempty" xml:"NoteInfo,omitempty" type:"Repeated"`
}

func (s ListNotesResponseBodyNotes) String() string {
	return tea.Prettify(s)
}

func (s ListNotesResponseBodyNotes) GoString() string {
	return s.String()
}

func (s *ListNotesResponseBodyNotes) SetNoteInfo(v []*ListNotesResponseBodyNotesNoteInfo) *ListNotesResponseBodyNotes {
	s.NoteInfo = v
	return s
}

type ListNotesResponseBodyNotesNoteInfo struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Id   *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListNotesResponseBodyNotesNoteInfo) String() string {
	return tea.Prettify(s)
}

func (s ListNotesResponseBodyNotesNoteInfo) GoString() string {
	return s.String()
}

func (s *ListNotesResponseBodyNotesNoteInfo) SetType(v string) *ListNotesResponseBodyNotesNoteInfo {
	s.Type = &v
	return s
}

func (s *ListNotesResponseBodyNotesNoteInfo) SetName(v string) *ListNotesResponseBodyNotesNoteInfo {
	s.Name = &v
	return s
}

func (s *ListNotesResponseBodyNotesNoteInfo) SetId(v string) *ListNotesResponseBodyNotesNoteInfo {
	s.Id = &v
	return s
}

type ListNotesResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListNotesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListNotesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListNotesResponse) GoString() string {
	return s.String()
}

func (s *ListNotesResponse) SetHeaders(v map[string]*string) *ListNotesResponse {
	s.Headers = v
	return s
}

func (s *ListNotesResponse) SetBody(v *ListNotesResponseBody) *ListNotesResponse {
	s.Body = v
	return s
}

type ListResourcePoolRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	PoolType        *string `json:"PoolType,omitempty" xml:"PoolType,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *ListResourcePoolRequest) SetResourceOwnerId(v int64) *ListResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListResourcePoolRequest) SetRegionId(v string) *ListResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *ListResourcePoolRequest) SetClusterId(v string) *ListResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *ListResourcePoolRequest) SetPoolType(v string) *ListResourcePoolRequest {
	s.PoolType = &v
	return s
}

func (s *ListResourcePoolRequest) SetPageNumber(v int32) *ListResourcePoolRequest {
	s.PageNumber = &v
	return s
}

func (s *ListResourcePoolRequest) SetPageSize(v int32) *ListResourcePoolRequest {
	s.PageSize = &v
	return s
}

type ListResourcePoolResponseBody struct {
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize     *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber   *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Total        *int32                                    `json:"Total,omitempty" xml:"Total,omitempty"`
	PoolInfoList *ListResourcePoolResponseBodyPoolInfoList `json:"PoolInfoList,omitempty" xml:"PoolInfoList,omitempty" type:"Struct"`
}

func (s ListResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBody) SetRequestId(v string) *ListResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListResourcePoolResponseBody) SetPageSize(v int32) *ListResourcePoolResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListResourcePoolResponseBody) SetPageNumber(v int32) *ListResourcePoolResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListResourcePoolResponseBody) SetTotal(v int32) *ListResourcePoolResponseBody {
	s.Total = &v
	return s
}

func (s *ListResourcePoolResponseBody) SetPoolInfoList(v *ListResourcePoolResponseBodyPoolInfoList) *ListResourcePoolResponseBody {
	s.PoolInfoList = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoList struct {
	PoolInfo []*ListResourcePoolResponseBodyPoolInfoListPoolInfo `json:"PoolInfo,omitempty" xml:"PoolInfo,omitempty" type:"Repeated"`
}

func (s ListResourcePoolResponseBodyPoolInfoList) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoList) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoList) SetPoolInfo(v []*ListResourcePoolResponseBodyPoolInfoListPoolInfo) *ListResourcePoolResponseBodyPoolInfoList {
	s.PoolInfo = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfo struct {
	EcmResourcePoolConfigList *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList `json:"EcmResourcePoolConfigList,omitempty" xml:"EcmResourcePoolConfigList,omitempty" type:"Struct"`
	EcmResourcePool           *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool           `json:"EcmResourcePool,omitempty" xml:"EcmResourcePool,omitempty" type:"Struct"`
	QueueList                 *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList                 `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Struct"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfo) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfo) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfo) SetEcmResourcePoolConfigList(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList) *ListResourcePoolResponseBodyPoolInfoListPoolInfo {
	s.EcmResourcePoolConfigList = v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfo) SetEcmResourcePool(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) *ListResourcePoolResponseBodyPoolInfoListPoolInfo {
	s.EcmResourcePool = v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfo) SetQueueList(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList) *ListResourcePoolResponseBodyPoolInfoListPoolInfo {
	s.QueueList = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList struct {
	EcmResourcePoolConfig []*ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig `json:"EcmResourcePoolConfig,omitempty" xml:"EcmResourcePoolConfig,omitempty" type:"Repeated"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList) SetEcmResourcePoolConfig(v []*ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigList {
	s.EcmResourcePoolConfig = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ConfigType  *string `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetStatus(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Status = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigType(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigType = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigValue(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigValue = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetNote(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Note = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetCategory(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Category = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigKey(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigKey = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig) SetId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Id = &v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool struct {
	Active         *bool   `json:"Active,omitempty" xml:"Active,omitempty"`
	PoolType       *string `json:"PoolType,omitempty" xml:"PoolType,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Note           *string `json:"Note,omitempty" xml:"Note,omitempty"`
	YarnSiteConfig *string `json:"YarnSiteConfig,omitempty" xml:"YarnSiteConfig,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetActive(v bool) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.Active = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetPoolType(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.PoolType = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetUserId(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.UserId = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetNote(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.Note = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetYarnSiteConfig(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.YarnSiteConfig = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetName(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.Name = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool) SetId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoEcmResourcePool {
	s.Id = &v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList struct {
	Queue []*ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue `json:"Queue,omitempty" xml:"Queue,omitempty" type:"Repeated"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList) SetQueue(v []*ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueList {
	s.Queue = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue struct {
	EcmResourcePoolConfigList *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList `json:"EcmResourcePoolConfigList,omitempty" xml:"EcmResourcePoolConfigList,omitempty" type:"Struct"`
	EcmResourceQueue          *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue          `json:"EcmResourceQueue,omitempty" xml:"EcmResourceQueue,omitempty" type:"Struct"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) SetEcmResourcePoolConfigList(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue {
	s.EcmResourcePoolConfigList = v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue) SetEcmResourceQueue(v *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueue {
	s.EcmResourceQueue = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList struct {
	EcmResourcePoolConfig []*ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig `json:"EcmResourcePoolConfig,omitempty" xml:"EcmResourcePoolConfig,omitempty" type:"Repeated"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList) SetEcmResourcePoolConfig(v []*ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigList {
	s.EcmResourcePoolConfig = v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ConfigType  *string `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetStatus(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Status = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigType(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigType = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigValue(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigValue = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetNote(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Note = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetCategory(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Category = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetConfigKey(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.ConfigKey = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig) SetId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourcePoolConfigListEcmResourcePoolConfig {
	s.Id = &v
	return s
}

type ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue struct {
	Status         *string `json:"Status,omitempty" xml:"Status,omitempty"`
	ResourcePoolId *int64  `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
	Leaf           *bool   `json:"Leaf,omitempty" xml:"Leaf,omitempty"`
	ParentQueueId  *int64  `json:"ParentQueueId,omitempty" xml:"ParentQueueId,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	QueueType      *string `json:"QueueType,omitempty" xml:"QueueType,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	QualifiedName  *string `json:"QualifiedName,omitempty" xml:"QualifiedName,omitempty"`
	Id             *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetStatus(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.Status = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetResourcePoolId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.ResourcePoolId = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetLeaf(v bool) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.Leaf = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetParentQueueId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.ParentQueueId = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetUserId(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.UserId = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetQueueType(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.QueueType = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetName(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.Name = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetQualifiedName(v string) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.QualifiedName = &v
	return s
}

func (s *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue) SetId(v int64) *ListResourcePoolResponseBodyPoolInfoListPoolInfoQueueListQueueEcmResourceQueue {
	s.Id = &v
	return s
}

type ListResourcePoolResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s ListResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *ListResourcePoolResponse) SetHeaders(v map[string]*string) *ListResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *ListResourcePoolResponse) SetBody(v *ListResourcePoolResponseBody) *ListResourcePoolResponse {
	s.Body = v
	return s
}

type ListRolesRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
}

func (s ListRolesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListRolesRequest) GoString() string {
	return s.String()
}

func (s *ListRolesRequest) SetResourceOwnerId(v int64) *ListRolesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListRolesRequest) SetRegionId(v string) *ListRolesRequest {
	s.RegionId = &v
	return s
}

func (s *ListRolesRequest) SetResourceType(v string) *ListRolesRequest {
	s.ResourceType = &v
	return s
}

type ListRolesResponseBody struct {
	RequestId *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Paging    *bool                      `json:"Paging,omitempty" xml:"Paging,omitempty"`
	Data      *ListRolesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
}

func (s ListRolesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponseBody) GoString() string {
	return s.String()
}

func (s *ListRolesResponseBody) SetRequestId(v string) *ListRolesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListRolesResponseBody) SetPaging(v bool) *ListRolesResponseBody {
	s.Paging = &v
	return s
}

func (s *ListRolesResponseBody) SetData(v *ListRolesResponseBodyData) *ListRolesResponseBody {
	s.Data = v
	return s
}

type ListRolesResponseBodyData struct {
	RoleDTO []*ListRolesResponseBodyDataRoleDTO `json:"roleDTO,omitempty" xml:"roleDTO,omitempty" type:"Repeated"`
}

func (s ListRolesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponseBodyData) GoString() string {
	return s.String()
}

func (s *ListRolesResponseBodyData) SetRoleDTO(v []*ListRolesResponseBodyDataRoleDTO) *ListRolesResponseBodyData {
	s.RoleDTO = v
	return s
}

type ListRolesResponseBodyDataRoleDTO struct {
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate    *string `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	GmtModified  *string `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id           *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListRolesResponseBodyDataRoleDTO) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponseBodyDataRoleDTO) GoString() string {
	return s.String()
}

func (s *ListRolesResponseBodyDataRoleDTO) SetResourceType(v string) *ListRolesResponseBodyDataRoleDTO {
	s.ResourceType = &v
	return s
}

func (s *ListRolesResponseBodyDataRoleDTO) SetDescription(v string) *ListRolesResponseBodyDataRoleDTO {
	s.Description = &v
	return s
}

func (s *ListRolesResponseBodyDataRoleDTO) SetGmtCreate(v string) *ListRolesResponseBodyDataRoleDTO {
	s.GmtCreate = &v
	return s
}

func (s *ListRolesResponseBodyDataRoleDTO) SetName(v string) *ListRolesResponseBodyDataRoleDTO {
	s.Name = &v
	return s
}

func (s *ListRolesResponseBodyDataRoleDTO) SetGmtModified(v string) *ListRolesResponseBodyDataRoleDTO {
	s.GmtModified = &v
	return s
}

func (s *ListRolesResponseBodyDataRoleDTO) SetId(v int64) *ListRolesResponseBodyDataRoleDTO {
	s.Id = &v
	return s
}

type ListRolesResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListRolesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListRolesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListRolesResponse) GoString() string {
	return s.String()
}

func (s *ListRolesResponse) SetHeaders(v map[string]*string) *ListRolesResponse {
	s.Headers = v
	return s
}

func (s *ListRolesResponse) SetBody(v *ListRolesResponseBody) *ListRolesResponse {
	s.Body = v
	return s
}

type ListScalingActivityV2Request struct {
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Limit             *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize       *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount         *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField        *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode         *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	ClusterBizId      *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	HostGroupId       *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ScalingRuleName   *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	HostGroupName     *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	Status            *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ListScalingActivityV2Request) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2Request) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2Request) SetResourceOwnerId(v int64) *ListScalingActivityV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetRegionId(v string) *ListScalingActivityV2Request {
	s.RegionId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetResourceGroupId(v string) *ListScalingActivityV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetLimit(v int32) *ListScalingActivityV2Request {
	s.Limit = &v
	return s
}

func (s *ListScalingActivityV2Request) SetPageNumber(v int32) *ListScalingActivityV2Request {
	s.PageNumber = &v
	return s
}

func (s *ListScalingActivityV2Request) SetPageSize(v int32) *ListScalingActivityV2Request {
	s.PageSize = &v
	return s
}

func (s *ListScalingActivityV2Request) SetCurrentSize(v int32) *ListScalingActivityV2Request {
	s.CurrentSize = &v
	return s
}

func (s *ListScalingActivityV2Request) SetPageCount(v int32) *ListScalingActivityV2Request {
	s.PageCount = &v
	return s
}

func (s *ListScalingActivityV2Request) SetOrderField(v string) *ListScalingActivityV2Request {
	s.OrderField = &v
	return s
}

func (s *ListScalingActivityV2Request) SetOrderMode(v string) *ListScalingActivityV2Request {
	s.OrderMode = &v
	return s
}

func (s *ListScalingActivityV2Request) SetClusterBizId(v string) *ListScalingActivityV2Request {
	s.ClusterBizId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetHostGroupId(v string) *ListScalingActivityV2Request {
	s.HostGroupId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetScalingGroupBizId(v string) *ListScalingActivityV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *ListScalingActivityV2Request) SetScalingRuleName(v string) *ListScalingActivityV2Request {
	s.ScalingRuleName = &v
	return s
}

func (s *ListScalingActivityV2Request) SetHostGroupName(v string) *ListScalingActivityV2Request {
	s.HostGroupName = &v
	return s
}

func (s *ListScalingActivityV2Request) SetStatus(v string) *ListScalingActivityV2Request {
	s.Status = &v
	return s
}

type ListScalingActivityV2ResponseBody struct {
	TotalCount *int32                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                                 `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize   *int32                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListScalingActivityV2ResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListScalingActivityV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2ResponseBody) SetTotalCount(v int32) *ListScalingActivityV2ResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetNextToken(v string) *ListScalingActivityV2ResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetPageSize(v int32) *ListScalingActivityV2ResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetRequestId(v string) *ListScalingActivityV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetPageNumber(v int32) *ListScalingActivityV2ResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListScalingActivityV2ResponseBody) SetItems(v *ListScalingActivityV2ResponseBodyItems) *ListScalingActivityV2ResponseBody {
	s.Items = v
	return s
}

type ListScalingActivityV2ResponseBodyItems struct {
	Item []*ListScalingActivityV2ResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListScalingActivityV2ResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2ResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2ResponseBodyItems) SetItem(v []*ListScalingActivityV2ResponseBodyItemsItem) *ListScalingActivityV2ResponseBodyItems {
	s.Item = v
	return s
}

type ListScalingActivityV2ResponseBodyItemsItem struct {
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TotalCapacity   *int32  `json:"TotalCapacity,omitempty" xml:"TotalCapacity,omitempty"`
	ExpectNum       *int32  `json:"ExpectNum,omitempty" xml:"ExpectNum,omitempty"`
	BizId           *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	InstanceIds     *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	HostGroupBizId  *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
	EndTime         *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime       *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ScalingRuleName *string `json:"ScalingRuleName,omitempty" xml:"ScalingRuleName,omitempty"`
	ScalingRuleId   *string `json:"ScalingRuleId,omitempty" xml:"ScalingRuleId,omitempty"`
	Cause           *string `json:"Cause,omitempty" xml:"Cause,omitempty"`
	HostGroupName   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	Transition      *string `json:"Transition,omitempty" xml:"Transition,omitempty"`
}

func (s ListScalingActivityV2ResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2ResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetStatus(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.Status = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetTotalCapacity(v int32) *ListScalingActivityV2ResponseBodyItemsItem {
	s.TotalCapacity = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetExpectNum(v int32) *ListScalingActivityV2ResponseBodyItemsItem {
	s.ExpectNum = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetBizId(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.BizId = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetInstanceIds(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.InstanceIds = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetHostGroupBizId(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.HostGroupBizId = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetEndTime(v int64) *ListScalingActivityV2ResponseBodyItemsItem {
	s.EndTime = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetStartTime(v int64) *ListScalingActivityV2ResponseBodyItemsItem {
	s.StartTime = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetDescription(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.Description = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetScalingRuleName(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.ScalingRuleName = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetScalingRuleId(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.ScalingRuleId = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetCause(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.Cause = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetHostGroupName(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.HostGroupName = &v
	return s
}

func (s *ListScalingActivityV2ResponseBodyItemsItem) SetTransition(v string) *ListScalingActivityV2ResponseBodyItemsItem {
	s.Transition = &v
	return s
}

type ListScalingActivityV2Response struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListScalingActivityV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScalingActivityV2Response) String() string {
	return tea.Prettify(s)
}

func (s ListScalingActivityV2Response) GoString() string {
	return s.String()
}

func (s *ListScalingActivityV2Response) SetHeaders(v map[string]*string) *ListScalingActivityV2Response {
	s.Headers = v
	return s
}

func (s *ListScalingActivityV2Response) SetBody(v *ListScalingActivityV2ResponseBody) *ListScalingActivityV2Response {
	s.Body = v
	return s
}

type ListScalingConfigItemV2Request struct {
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Limit             *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber        *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize          *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize       *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount         *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField        *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode         *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ConfigItemType    *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
}

func (s ListScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2Request) SetResourceOwnerId(v int64) *ListScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetRegionId(v string) *ListScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetResourceGroupId(v string) *ListScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetLimit(v int32) *ListScalingConfigItemV2Request {
	s.Limit = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetPageNumber(v int32) *ListScalingConfigItemV2Request {
	s.PageNumber = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetPageSize(v int32) *ListScalingConfigItemV2Request {
	s.PageSize = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetCurrentSize(v int32) *ListScalingConfigItemV2Request {
	s.CurrentSize = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetPageCount(v int32) *ListScalingConfigItemV2Request {
	s.PageCount = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetOrderField(v string) *ListScalingConfigItemV2Request {
	s.OrderField = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetOrderMode(v string) *ListScalingConfigItemV2Request {
	s.OrderMode = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetScalingGroupBizId(v string) *ListScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *ListScalingConfigItemV2Request) SetConfigItemType(v string) *ListScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

type ListScalingConfigItemV2ResponseBody struct {
	TotalCount *int32                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize   *int32                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListScalingConfigItemV2ResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2ResponseBody) SetTotalCount(v int32) *ListScalingConfigItemV2ResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetNextToken(v string) *ListScalingConfigItemV2ResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetPageSize(v int32) *ListScalingConfigItemV2ResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetRequestId(v string) *ListScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetPageNumber(v int32) *ListScalingConfigItemV2ResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBody) SetItems(v *ListScalingConfigItemV2ResponseBodyItems) *ListScalingConfigItemV2ResponseBody {
	s.Items = v
	return s
}

type ListScalingConfigItemV2ResponseBodyItems struct {
	Item []*ListScalingConfigItemV2ResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListScalingConfigItemV2ResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2ResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2ResponseBodyItems) SetItem(v []*ListScalingConfigItemV2ResponseBodyItemsItem) *ListScalingConfigItemV2ResponseBodyItems {
	s.Item = v
	return s
}

type ListScalingConfigItemV2ResponseBodyItemsItem struct {
	ConfigItemType         *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	ScalingConfigItemBizId *string `json:"ScalingConfigItemBizId,omitempty" xml:"ScalingConfigItemBizId,omitempty"`
	ScalingGroupBizId      *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ConfigItemInformation  *string `json:"ConfigItemInformation,omitempty" xml:"ConfigItemInformation,omitempty"`
}

func (s ListScalingConfigItemV2ResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2ResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2ResponseBodyItemsItem) SetConfigItemType(v string) *ListScalingConfigItemV2ResponseBodyItemsItem {
	s.ConfigItemType = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBodyItemsItem) SetScalingConfigItemBizId(v string) *ListScalingConfigItemV2ResponseBodyItemsItem {
	s.ScalingConfigItemBizId = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBodyItemsItem) SetScalingGroupBizId(v string) *ListScalingConfigItemV2ResponseBodyItemsItem {
	s.ScalingGroupBizId = &v
	return s
}

func (s *ListScalingConfigItemV2ResponseBodyItemsItem) SetConfigItemInformation(v string) *ListScalingConfigItemV2ResponseBodyItemsItem {
	s.ConfigItemInformation = &v
	return s
}

type ListScalingConfigItemV2Response struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s ListScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *ListScalingConfigItemV2Response) SetHeaders(v map[string]*string) *ListScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *ListScalingConfigItemV2Response) SetBody(v *ListScalingConfigItemV2ResponseBody) *ListScalingConfigItemV2Response {
	s.Body = v
	return s
}

type ListScalingGroupV2Request struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Limit           *int32  `json:"Limit,omitempty" xml:"Limit,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	CurrentSize     *int32  `json:"CurrentSize,omitempty" xml:"CurrentSize,omitempty"`
	PageCount       *int32  `json:"PageCount,omitempty" xml:"PageCount,omitempty"`
	OrderField      *string `json:"OrderField,omitempty" xml:"OrderField,omitempty"`
	OrderMode       *string `json:"OrderMode,omitempty" xml:"OrderMode,omitempty"`
	ClusterBizId    *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
}

func (s ListScalingGroupV2Request) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2Request) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2Request) SetResourceOwnerId(v int64) *ListScalingGroupV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListScalingGroupV2Request) SetRegionId(v string) *ListScalingGroupV2Request {
	s.RegionId = &v
	return s
}

func (s *ListScalingGroupV2Request) SetResourceGroupId(v string) *ListScalingGroupV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ListScalingGroupV2Request) SetLimit(v int32) *ListScalingGroupV2Request {
	s.Limit = &v
	return s
}

func (s *ListScalingGroupV2Request) SetPageNumber(v int32) *ListScalingGroupV2Request {
	s.PageNumber = &v
	return s
}

func (s *ListScalingGroupV2Request) SetPageSize(v int32) *ListScalingGroupV2Request {
	s.PageSize = &v
	return s
}

func (s *ListScalingGroupV2Request) SetCurrentSize(v int32) *ListScalingGroupV2Request {
	s.CurrentSize = &v
	return s
}

func (s *ListScalingGroupV2Request) SetPageCount(v int32) *ListScalingGroupV2Request {
	s.PageCount = &v
	return s
}

func (s *ListScalingGroupV2Request) SetOrderField(v string) *ListScalingGroupV2Request {
	s.OrderField = &v
	return s
}

func (s *ListScalingGroupV2Request) SetOrderMode(v string) *ListScalingGroupV2Request {
	s.OrderMode = &v
	return s
}

func (s *ListScalingGroupV2Request) SetClusterBizId(v string) *ListScalingGroupV2Request {
	s.ClusterBizId = &v
	return s
}

type ListScalingGroupV2ResponseBody struct {
	TotalCount *int32                               `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                              `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize   *int32                               `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int32                               `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *ListScalingGroupV2ResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s ListScalingGroupV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2ResponseBody) SetTotalCount(v int32) *ListScalingGroupV2ResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetNextToken(v string) *ListScalingGroupV2ResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetPageSize(v int32) *ListScalingGroupV2ResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetRequestId(v string) *ListScalingGroupV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetPageNumber(v int32) *ListScalingGroupV2ResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListScalingGroupV2ResponseBody) SetItems(v *ListScalingGroupV2ResponseBodyItems) *ListScalingGroupV2ResponseBody {
	s.Items = v
	return s
}

type ListScalingGroupV2ResponseBodyItems struct {
	Item []*ListScalingGroupV2ResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s ListScalingGroupV2ResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2ResponseBodyItems) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2ResponseBodyItems) SetItem(v []*ListScalingGroupV2ResponseBodyItemsItem) *ListScalingGroupV2ResponseBodyItems {
	s.Item = v
	return s
}

type ListScalingGroupV2ResponseBodyItemsItem struct {
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ScalingInMode  *string `json:"ScalingInMode,omitempty" xml:"ScalingInMode,omitempty"`
	ScalingMaxSize *int32  `json:"ScalingMaxSize,omitempty" xml:"ScalingMaxSize,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	HostGroupBizId *string `json:"HostGroupBizId,omitempty" xml:"HostGroupBizId,omitempty"`
	ScalingMinSize *int32  `json:"ScalingMinSize,omitempty" xml:"ScalingMinSize,omitempty"`
	ActiveStatus   *string `json:"ActiveStatus,omitempty" xml:"ActiveStatus,omitempty"`
	ScalingGroupId *string `json:"ScalingGroupId,omitempty" xml:"ScalingGroupId,omitempty"`
}

func (s ListScalingGroupV2ResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2ResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetDescription(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.Description = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetScalingInMode(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ScalingInMode = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetScalingMaxSize(v int32) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ScalingMaxSize = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetName(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.Name = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetHostGroupBizId(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.HostGroupBizId = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetScalingMinSize(v int32) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ScalingMinSize = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetActiveStatus(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ActiveStatus = &v
	return s
}

func (s *ListScalingGroupV2ResponseBodyItemsItem) SetScalingGroupId(v string) *ListScalingGroupV2ResponseBodyItemsItem {
	s.ScalingGroupId = &v
	return s
}

type ListScalingGroupV2Response struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListScalingGroupV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListScalingGroupV2Response) String() string {
	return tea.Prettify(s)
}

func (s ListScalingGroupV2Response) GoString() string {
	return s.String()
}

func (s *ListScalingGroupV2Response) SetHeaders(v map[string]*string) *ListScalingGroupV2Response {
	s.Headers = v
	return s
}

func (s *ListScalingGroupV2Response) SetBody(v *ListScalingGroupV2ResponseBody) *ListScalingGroupV2Response {
	s.Body = v
	return s
}

type ListSecurityGroupRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NetType     *string `json:"NetType,omitempty" xml:"NetType,omitempty"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	DepositType *string `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
}

func (s ListSecurityGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ListSecurityGroupRequest) GoString() string {
	return s.String()
}

func (s *ListSecurityGroupRequest) SetRegionId(v string) *ListSecurityGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ListSecurityGroupRequest) SetNetType(v string) *ListSecurityGroupRequest {
	s.NetType = &v
	return s
}

func (s *ListSecurityGroupRequest) SetVpcId(v string) *ListSecurityGroupRequest {
	s.VpcId = &v
	return s
}

func (s *ListSecurityGroupRequest) SetDepositType(v string) *ListSecurityGroupRequest {
	s.DepositType = &v
	return s
}

func (s *ListSecurityGroupRequest) SetProductType(v string) *ListSecurityGroupRequest {
	s.ProductType = &v
	return s
}

type ListSecurityGroupResponseBody struct {
	SecurityGroupList *ListSecurityGroupResponseBodySecurityGroupList `json:"SecurityGroupList,omitempty" xml:"SecurityGroupList,omitempty" type:"Struct"`
	RequestId         *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListSecurityGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListSecurityGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ListSecurityGroupResponseBody) SetSecurityGroupList(v *ListSecurityGroupResponseBodySecurityGroupList) *ListSecurityGroupResponseBody {
	s.SecurityGroupList = v
	return s
}

func (s *ListSecurityGroupResponseBody) SetRequestId(v string) *ListSecurityGroupResponseBody {
	s.RequestId = &v
	return s
}

type ListSecurityGroupResponseBodySecurityGroupList struct {
	SecurityGroup []*ListSecurityGroupResponseBodySecurityGroupListSecurityGroup `json:"SecurityGroup,omitempty" xml:"SecurityGroup,omitempty" type:"Repeated"`
}

func (s ListSecurityGroupResponseBodySecurityGroupList) String() string {
	return tea.Prettify(s)
}

func (s ListSecurityGroupResponseBodySecurityGroupList) GoString() string {
	return s.String()
}

func (s *ListSecurityGroupResponseBodySecurityGroupList) SetSecurityGroup(v []*ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) *ListSecurityGroupResponseBodySecurityGroupList {
	s.SecurityGroup = v
	return s
}

type ListSecurityGroupResponseBodySecurityGroupListSecurityGroup struct {
	VpcId                   *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SecurityGroupId         *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	SecurityGroupName       *string `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	EcsCount                *int32  `json:"EcsCount,omitempty" xml:"EcsCount,omitempty"`
	SecurityGroupType       *string `json:"SecurityGroupType,omitempty" xml:"SecurityGroupType,omitempty"`
	AvailableInstanceAmount *int32  `json:"AvailableInstanceAmount,omitempty" xml:"AvailableInstanceAmount,omitempty"`
}

func (s ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) String() string {
	return tea.Prettify(s)
}

func (s ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) GoString() string {
	return s.String()
}

func (s *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) SetVpcId(v string) *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup {
	s.VpcId = &v
	return s
}

func (s *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) SetCreationTime(v string) *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup {
	s.CreationTime = &v
	return s
}

func (s *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) SetDescription(v string) *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup {
	s.Description = &v
	return s
}

func (s *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupId(v string) *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupId = &v
	return s
}

func (s *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupName(v string) *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupName = &v
	return s
}

func (s *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) SetEcsCount(v int32) *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup {
	s.EcsCount = &v
	return s
}

func (s *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) SetSecurityGroupType(v string) *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup {
	s.SecurityGroupType = &v
	return s
}

func (s *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup) SetAvailableInstanceAmount(v int32) *ListSecurityGroupResponseBodySecurityGroupListSecurityGroup {
	s.AvailableInstanceAmount = &v
	return s
}

type ListSecurityGroupResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListSecurityGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListSecurityGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ListSecurityGroupResponse) GoString() string {
	return s.String()
}

func (s *ListSecurityGroupResponse) SetHeaders(v map[string]*string) *ListSecurityGroupResponse {
	s.Headers = v
	return s
}

func (s *ListSecurityGroupResponse) SetBody(v *ListSecurityGroupResponseBody) *ListSecurityGroupResponse {
	s.Body = v
	return s
}

type ListStackRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	StackName       *string `json:"StackName,omitempty" xml:"StackName,omitempty"`
	StackVersion    *string `json:"StackVersion,omitempty" xml:"StackVersion,omitempty"`
	PageNumber      *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s ListStackRequest) String() string {
	return tea.Prettify(s)
}

func (s ListStackRequest) GoString() string {
	return s.String()
}

func (s *ListStackRequest) SetResourceOwnerId(v int64) *ListStackRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListStackRequest) SetRegionId(v string) *ListStackRequest {
	s.RegionId = &v
	return s
}

func (s *ListStackRequest) SetStackName(v string) *ListStackRequest {
	s.StackName = &v
	return s
}

func (s *ListStackRequest) SetStackVersion(v string) *ListStackRequest {
	s.StackVersion = &v
	return s
}

func (s *ListStackRequest) SetPageNumber(v int32) *ListStackRequest {
	s.PageNumber = &v
	return s
}

func (s *ListStackRequest) SetPageSize(v int32) *ListStackRequest {
	s.PageSize = &v
	return s
}

type ListStackResponseBody struct {
	TotalCount *int32                          `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                          `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                          `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	StackList  *ListStackResponseBodyStackList `json:"StackList,omitempty" xml:"StackList,omitempty" type:"Struct"`
}

func (s ListStackResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListStackResponseBody) GoString() string {
	return s.String()
}

func (s *ListStackResponseBody) SetTotalCount(v int32) *ListStackResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListStackResponseBody) SetRequestId(v string) *ListStackResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListStackResponseBody) SetPageSize(v int32) *ListStackResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListStackResponseBody) SetPageNumber(v int32) *ListStackResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListStackResponseBody) SetStackList(v *ListStackResponseBodyStackList) *ListStackResponseBody {
	s.StackList = v
	return s
}

type ListStackResponseBodyStackList struct {
	Stack []*ListStackResponseBodyStackListStack `json:"Stack,omitempty" xml:"Stack,omitempty" type:"Repeated"`
}

func (s ListStackResponseBodyStackList) String() string {
	return tea.Prettify(s)
}

func (s ListStackResponseBodyStackList) GoString() string {
	return s.String()
}

func (s *ListStackResponseBodyStackList) SetStack(v []*ListStackResponseBodyStackListStack) *ListStackResponseBodyStackList {
	s.Stack = v
	return s
}

type ListStackResponseBodyStackListStack struct {
	Status  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ListStackResponseBodyStackListStack) String() string {
	return tea.Prettify(s)
}

func (s ListStackResponseBodyStackListStack) GoString() string {
	return s.String()
}

func (s *ListStackResponseBodyStackListStack) SetStatus(v string) *ListStackResponseBodyStackListStack {
	s.Status = &v
	return s
}

func (s *ListStackResponseBodyStackListStack) SetVersion(v string) *ListStackResponseBodyStackListStack {
	s.Version = &v
	return s
}

func (s *ListStackResponseBodyStackListStack) SetName(v string) *ListStackResponseBodyStackListStack {
	s.Name = &v
	return s
}

type ListStackResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListStackResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListStackResponse) String() string {
	return tea.Prettify(s)
}

func (s ListStackResponse) GoString() string {
	return s.String()
}

func (s *ListStackResponse) SetHeaders(v map[string]*string) *ListStackResponse {
	s.Headers = v
	return s
}

func (s *ListStackResponse) SetBody(v *ListStackResponseBody) *ListStackResponse {
	s.Body = v
	return s
}

type ListTagKeysRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	NextToken       *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Category        *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Scope           *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s ListTagKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagKeysRequest) GoString() string {
	return s.String()
}

func (s *ListTagKeysRequest) SetResourceOwnerId(v int64) *ListTagKeysRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagKeysRequest) SetRegionId(v string) *ListTagKeysRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagKeysRequest) SetNextToken(v string) *ListTagKeysRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagKeysRequest) SetPageSize(v int32) *ListTagKeysRequest {
	s.PageSize = &v
	return s
}

func (s *ListTagKeysRequest) SetResourceType(v string) *ListTagKeysRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagKeysRequest) SetCategory(v string) *ListTagKeysRequest {
	s.Category = &v
	return s
}

func (s *ListTagKeysRequest) SetScope(v string) *ListTagKeysRequest {
	s.Scope = &v
	return s
}

type ListTagKeysResponseBody struct {
	TotalCount *int32                       `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                      `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId  *string                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Message    *string                      `json:"Message,omitempty" xml:"Message,omitempty"`
	PageSize   *int32                       `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Keys       *ListTagKeysResponseBodyKeys `json:"Keys,omitempty" xml:"Keys,omitempty" type:"Struct"`
	Code       *string                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Success    *bool                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListTagKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagKeysResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagKeysResponseBody) SetTotalCount(v int32) *ListTagKeysResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListTagKeysResponseBody) SetNextToken(v string) *ListTagKeysResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagKeysResponseBody) SetRequestId(v string) *ListTagKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagKeysResponseBody) SetMessage(v string) *ListTagKeysResponseBody {
	s.Message = &v
	return s
}

func (s *ListTagKeysResponseBody) SetPageSize(v int32) *ListTagKeysResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListTagKeysResponseBody) SetKeys(v *ListTagKeysResponseBodyKeys) *ListTagKeysResponseBody {
	s.Keys = v
	return s
}

func (s *ListTagKeysResponseBody) SetCode(v string) *ListTagKeysResponseBody {
	s.Code = &v
	return s
}

func (s *ListTagKeysResponseBody) SetSuccess(v bool) *ListTagKeysResponseBody {
	s.Success = &v
	return s
}

type ListTagKeysResponseBodyKeys struct {
	Key []*string `json:"Key,omitempty" xml:"Key,omitempty" type:"Repeated"`
}

func (s ListTagKeysResponseBodyKeys) String() string {
	return tea.Prettify(s)
}

func (s ListTagKeysResponseBodyKeys) GoString() string {
	return s.String()
}

func (s *ListTagKeysResponseBodyKeys) SetKey(v []*string) *ListTagKeysResponseBodyKeys {
	s.Key = v
	return s
}

type ListTagKeysResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTagKeysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagKeysResponse) GoString() string {
	return s.String()
}

func (s *ListTagKeysResponse) SetHeaders(v map[string]*string) *ListTagKeysResponse {
	s.Headers = v
	return s
}

func (s *ListTagKeysResponse) SetBody(v *ListTagKeysResponseBody) *ListTagKeysResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	ResourceOwnerId *int64                        `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                       `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType    *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	NextToken       *string                       `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ResourceId      []*string                     `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag             []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetResourceOwnerId(v int64) *ListTagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagResourcesRequest) SetRegionId(v string) *ListTagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	NextToken    *string                                   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources *ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Struct"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v *ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	TagResource []*ListTagResourcesResponseBodyTagResourcesTagResource `json:"TagResource,omitempty" xml:"TagResource,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagResource(v []*ListTagResourcesResponseBodyTagResourcesTagResource) *ListTagResourcesResponseBodyTagResources {
	s.TagResource = v
	return s
}

type ListTagResourcesResponseBodyTagResourcesTagResource struct {
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResourcesTagResource) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceType(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagValue(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagValue = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetResourceId(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResourcesTagResource) SetTagKey(v string) *ListTagResourcesResponseBodyTagResourcesTagResource {
	s.TagKey = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ListTagValuesRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Key             *string `json:"Key,omitempty" xml:"Key,omitempty"`
	NextToken       *string `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	PageSize        *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	ResourceType    *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Scope           *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s ListTagValuesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagValuesRequest) GoString() string {
	return s.String()
}

func (s *ListTagValuesRequest) SetResourceOwnerId(v int64) *ListTagValuesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTagValuesRequest) SetRegionId(v string) *ListTagValuesRequest {
	s.RegionId = &v
	return s
}

func (s *ListTagValuesRequest) SetKey(v string) *ListTagValuesRequest {
	s.Key = &v
	return s
}

func (s *ListTagValuesRequest) SetNextToken(v string) *ListTagValuesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagValuesRequest) SetPageSize(v int32) *ListTagValuesRequest {
	s.PageSize = &v
	return s
}

func (s *ListTagValuesRequest) SetResourceType(v string) *ListTagValuesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagValuesRequest) SetScope(v string) *ListTagValuesRequest {
	s.Scope = &v
	return s
}

type ListTagValuesResponseBody struct {
	TotalCount *int32                           `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	NextToken  *string                          `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId  *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Message    *string                          `json:"Message,omitempty" xml:"Message,omitempty"`
	PageSize   *int32                           `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Values     *ListTagValuesResponseBodyValues `json:"Values,omitempty" xml:"Values,omitempty" type:"Struct"`
	Code       *string                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Success    *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ListTagValuesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagValuesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagValuesResponseBody) SetTotalCount(v int32) *ListTagValuesResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListTagValuesResponseBody) SetNextToken(v string) *ListTagValuesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagValuesResponseBody) SetRequestId(v string) *ListTagValuesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagValuesResponseBody) SetMessage(v string) *ListTagValuesResponseBody {
	s.Message = &v
	return s
}

func (s *ListTagValuesResponseBody) SetPageSize(v int32) *ListTagValuesResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListTagValuesResponseBody) SetValues(v *ListTagValuesResponseBodyValues) *ListTagValuesResponseBody {
	s.Values = v
	return s
}

func (s *ListTagValuesResponseBody) SetCode(v string) *ListTagValuesResponseBody {
	s.Code = &v
	return s
}

func (s *ListTagValuesResponseBody) SetSuccess(v bool) *ListTagValuesResponseBody {
	s.Success = &v
	return s
}

type ListTagValuesResponseBodyValues struct {
	Value []*string `json:"Value,omitempty" xml:"Value,omitempty" type:"Repeated"`
}

func (s ListTagValuesResponseBodyValues) String() string {
	return tea.Prettify(s)
}

func (s ListTagValuesResponseBodyValues) GoString() string {
	return s.String()
}

func (s *ListTagValuesResponseBodyValues) SetValue(v []*string) *ListTagValuesResponseBodyValues {
	s.Value = v
	return s
}

type ListTagValuesResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTagValuesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTagValuesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagValuesResponse) GoString() string {
	return s.String()
}

func (s *ListTagValuesResponse) SetHeaders(v map[string]*string) *ListTagValuesResponse {
	s.Headers = v
	return s
}

func (s *ListTagValuesResponse) SetBody(v *ListTagValuesResponseBody) *ListTagValuesResponse {
	s.Body = v
	return s
}

type ListUsersRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ListUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s ListUsersRequest) GoString() string {
	return s.String()
}

func (s *ListUsersRequest) SetResourceOwnerId(v int64) *ListUsersRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListUsersRequest) SetRegionId(v string) *ListUsersRequest {
	s.RegionId = &v
	return s
}

func (s *ListUsersRequest) SetClusterId(v string) *ListUsersRequest {
	s.ClusterId = &v
	return s
}

func (s *ListUsersRequest) SetType(v string) *ListUsersRequest {
	s.Type = &v
	return s
}

type ListUsersResponseBody struct {
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserList  *ListUsersResponseBodyUserList `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Struct"`
}

func (s ListUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBody) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBody) SetRequestId(v string) *ListUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListUsersResponseBody) SetUserList(v *ListUsersResponseBodyUserList) *ListUsersResponseBody {
	s.UserList = v
	return s
}

type ListUsersResponseBodyUserList struct {
	User []*ListUsersResponseBodyUserListUser `json:"User,omitempty" xml:"User,omitempty" type:"Repeated"`
}

func (s ListUsersResponseBodyUserList) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUserList) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUserList) SetUser(v []*ListUsersResponseBodyUserListUser) *ListUsersResponseBodyUserList {
	s.User = v
	return s
}

type ListUsersResponseBodyUserListUser struct {
	LinuxStatus    *string `json:"LinuxStatus,omitempty" xml:"LinuxStatus,omitempty"`
	K8sStatus      *string `json:"K8sStatus,omitempty" xml:"K8sStatus,omitempty"`
	KnoxStatus     *string `json:"KnoxStatus,omitempty" xml:"KnoxStatus,omitempty"`
	GroupName      *string `json:"GroupName,omitempty" xml:"GroupName,omitempty"`
	UserId         *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	KerberosStatus *string `json:"KerberosStatus,omitempty" xml:"KerberosStatus,omitempty"`
	UserName       *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ListUsersResponseBodyUserListUser) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponseBodyUserListUser) GoString() string {
	return s.String()
}

func (s *ListUsersResponseBodyUserListUser) SetLinuxStatus(v string) *ListUsersResponseBodyUserListUser {
	s.LinuxStatus = &v
	return s
}

func (s *ListUsersResponseBodyUserListUser) SetK8sStatus(v string) *ListUsersResponseBodyUserListUser {
	s.K8sStatus = &v
	return s
}

func (s *ListUsersResponseBodyUserListUser) SetKnoxStatus(v string) *ListUsersResponseBodyUserListUser {
	s.KnoxStatus = &v
	return s
}

func (s *ListUsersResponseBodyUserListUser) SetGroupName(v string) *ListUsersResponseBodyUserListUser {
	s.GroupName = &v
	return s
}

func (s *ListUsersResponseBodyUserListUser) SetUserId(v string) *ListUsersResponseBodyUserListUser {
	s.UserId = &v
	return s
}

func (s *ListUsersResponseBodyUserListUser) SetKerberosStatus(v string) *ListUsersResponseBodyUserListUser {
	s.KerberosStatus = &v
	return s
}

func (s *ListUsersResponseBodyUserListUser) SetUserName(v string) *ListUsersResponseBodyUserListUser {
	s.UserName = &v
	return s
}

type ListUsersResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListUsersResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s ListUsersResponse) GoString() string {
	return s.String()
}

func (s *ListUsersResponse) SetHeaders(v map[string]*string) *ListUsersResponse {
	s.Headers = v
	return s
}

func (s *ListUsersResponse) SetBody(v *ListUsersResponseBody) *ListUsersResponse {
	s.Body = v
	return s
}

type ListVswitchRequest struct {
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	VpcId       *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	ZoneId      *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	DepositType *string `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	ProductType *string `json:"ProductType,omitempty" xml:"ProductType,omitempty"`
}

func (s ListVswitchRequest) String() string {
	return tea.Prettify(s)
}

func (s ListVswitchRequest) GoString() string {
	return s.String()
}

func (s *ListVswitchRequest) SetRegionId(v string) *ListVswitchRequest {
	s.RegionId = &v
	return s
}

func (s *ListVswitchRequest) SetVpcId(v string) *ListVswitchRequest {
	s.VpcId = &v
	return s
}

func (s *ListVswitchRequest) SetZoneId(v string) *ListVswitchRequest {
	s.ZoneId = &v
	return s
}

func (s *ListVswitchRequest) SetDepositType(v string) *ListVswitchRequest {
	s.DepositType = &v
	return s
}

func (s *ListVswitchRequest) SetProductType(v string) *ListVswitchRequest {
	s.ProductType = &v
	return s
}

type ListVswitchResponseBody struct {
	RequestId   *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VswitchList *ListVswitchResponseBodyVswitchList `json:"VswitchList,omitempty" xml:"VswitchList,omitempty" type:"Struct"`
}

func (s ListVswitchResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListVswitchResponseBody) GoString() string {
	return s.String()
}

func (s *ListVswitchResponseBody) SetRequestId(v string) *ListVswitchResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListVswitchResponseBody) SetVswitchList(v *ListVswitchResponseBodyVswitchList) *ListVswitchResponseBody {
	s.VswitchList = v
	return s
}

type ListVswitchResponseBodyVswitchList struct {
	Vswitch []*ListVswitchResponseBodyVswitchListVswitch `json:"Vswitch,omitempty" xml:"Vswitch,omitempty" type:"Repeated"`
}

func (s ListVswitchResponseBodyVswitchList) String() string {
	return tea.Prettify(s)
}

func (s ListVswitchResponseBodyVswitchList) GoString() string {
	return s.String()
}

func (s *ListVswitchResponseBodyVswitchList) SetVswitch(v []*ListVswitchResponseBodyVswitchListVswitch) *ListVswitchResponseBodyVswitchList {
	s.Vswitch = v
	return s
}

type ListVswitchResponseBodyVswitchListVswitch struct {
	CreationTime            *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	VpcId                   *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	IsDefault               *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	VSwitchId               *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	CidrBlock               *string `json:"CidrBlock,omitempty" xml:"CidrBlock,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	AvailableIpAddressCount *string `json:"AvailableIpAddressCount,omitempty" xml:"AvailableIpAddressCount,omitempty"`
	ResourceGroupId         *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ZoneId                  *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	VSwitchName             *string `json:"VSwitchName,omitempty" xml:"VSwitchName,omitempty"`
}

func (s ListVswitchResponseBodyVswitchListVswitch) String() string {
	return tea.Prettify(s)
}

func (s ListVswitchResponseBodyVswitchListVswitch) GoString() string {
	return s.String()
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetCreationTime(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.CreationTime = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetStatus(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.Status = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetVpcId(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.VpcId = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetIsDefault(v bool) *ListVswitchResponseBodyVswitchListVswitch {
	s.IsDefault = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetVSwitchId(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.VSwitchId = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetCidrBlock(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.CidrBlock = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetDescription(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.Description = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetAvailableIpAddressCount(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.AvailableIpAddressCount = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetResourceGroupId(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.ResourceGroupId = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetZoneId(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.ZoneId = &v
	return s
}

func (s *ListVswitchResponseBodyVswitchListVswitch) SetVSwitchName(v string) *ListVswitchResponseBodyVswitchListVswitch {
	s.VSwitchName = &v
	return s
}

type ListVswitchResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListVswitchResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListVswitchResponse) String() string {
	return tea.Prettify(s)
}

func (s ListVswitchResponse) GoString() string {
	return s.String()
}

func (s *ListVswitchResponse) SetHeaders(v map[string]*string) *ListVswitchResponse {
	s.Headers = v
	return s
}

func (s *ListVswitchResponse) SetBody(v *ListVswitchResponseBody) *ListVswitchResponse {
	s.Body = v
	return s
}

type ModifyClusterBootstrapActionRequest struct {
	ResourceOwnerId *int64                                                `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                                               `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string                                               `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Id              *string                                               `json:"Id,omitempty" xml:"Id,omitempty"`
	BootstrapAction []*ModifyClusterBootstrapActionRequestBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
}

func (s ModifyClusterBootstrapActionRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterBootstrapActionRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterBootstrapActionRequest) SetResourceOwnerId(v int64) *ModifyClusterBootstrapActionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequest) SetRegionId(v string) *ModifyClusterBootstrapActionRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequest) SetClusterId(v string) *ModifyClusterBootstrapActionRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequest) SetId(v string) *ModifyClusterBootstrapActionRequest {
	s.Id = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequest) SetBootstrapAction(v []*ModifyClusterBootstrapActionRequestBootstrapAction) *ModifyClusterBootstrapActionRequest {
	s.BootstrapAction = v
	return s
}

type ModifyClusterBootstrapActionRequestBootstrapAction struct {
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyClusterBootstrapActionRequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterBootstrapActionRequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *ModifyClusterBootstrapActionRequestBootstrapAction) SetExecutionFailStrategy(v string) *ModifyClusterBootstrapActionRequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequestBootstrapAction) SetArg(v string) *ModifyClusterBootstrapActionRequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequestBootstrapAction) SetPath(v string) *ModifyClusterBootstrapActionRequestBootstrapAction {
	s.Path = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequestBootstrapAction) SetExecutionTarget(v string) *ModifyClusterBootstrapActionRequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequestBootstrapAction) SetExecutionMoment(v string) *ModifyClusterBootstrapActionRequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *ModifyClusterBootstrapActionRequestBootstrapAction) SetName(v string) *ModifyClusterBootstrapActionRequestBootstrapAction {
	s.Name = &v
	return s
}

type ModifyClusterBootstrapActionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterBootstrapActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterBootstrapActionResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterBootstrapActionResponseBody) SetRequestId(v string) *ModifyClusterBootstrapActionResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterBootstrapActionResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyClusterBootstrapActionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClusterBootstrapActionResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterBootstrapActionResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterBootstrapActionResponse) SetHeaders(v map[string]*string) *ModifyClusterBootstrapActionResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterBootstrapActionResponse) SetBody(v *ModifyClusterBootstrapActionResponseBody) *ModifyClusterBootstrapActionResponse {
	s.Body = v
	return s
}

type ModifyClusterHostGroupRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	HostGroupName   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	SecurityGroupId *string `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	VswitchId       *string `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	Comment         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
}

func (s ModifyClusterHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterHostGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterHostGroupRequest) SetResourceOwnerId(v int64) *ModifyClusterHostGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterHostGroupRequest) SetRegionId(v string) *ModifyClusterHostGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterHostGroupRequest) SetClusterId(v string) *ModifyClusterHostGroupRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyClusterHostGroupRequest) SetHostGroupId(v string) *ModifyClusterHostGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *ModifyClusterHostGroupRequest) SetHostGroupName(v string) *ModifyClusterHostGroupRequest {
	s.HostGroupName = &v
	return s
}

func (s *ModifyClusterHostGroupRequest) SetSecurityGroupId(v string) *ModifyClusterHostGroupRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifyClusterHostGroupRequest) SetVswitchId(v string) *ModifyClusterHostGroupRequest {
	s.VswitchId = &v
	return s
}

func (s *ModifyClusterHostGroupRequest) SetComment(v string) *ModifyClusterHostGroupRequest {
	s.Comment = &v
	return s
}

type ModifyClusterHostGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterHostGroupResponseBody) SetRequestId(v string) *ModifyClusterHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterHostGroupResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyClusterHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClusterHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterHostGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterHostGroupResponse) SetHeaders(v map[string]*string) *ModifyClusterHostGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterHostGroupResponse) SetBody(v *ModifyClusterHostGroupResponseBody) *ModifyClusterHostGroupResponse {
	s.Body = v
	return s
}

type ModifyClusterMetaCollectRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	SwitchOn        *bool   `json:"SwitchOn,omitempty" xml:"SwitchOn,omitempty"`
}

func (s ModifyClusterMetaCollectRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterMetaCollectRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterMetaCollectRequest) SetResourceOwnerId(v int64) *ModifyClusterMetaCollectRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterMetaCollectRequest) SetRegionId(v string) *ModifyClusterMetaCollectRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterMetaCollectRequest) SetClusterId(v string) *ModifyClusterMetaCollectRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyClusterMetaCollectRequest) SetSwitchOn(v bool) *ModifyClusterMetaCollectRequest {
	s.SwitchOn = &v
	return s
}

type ModifyClusterMetaCollectResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterMetaCollectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterMetaCollectResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterMetaCollectResponseBody) SetRequestId(v string) *ModifyClusterMetaCollectResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterMetaCollectResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyClusterMetaCollectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClusterMetaCollectResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterMetaCollectResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterMetaCollectResponse) SetHeaders(v map[string]*string) *ModifyClusterMetaCollectResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterMetaCollectResponse) SetBody(v *ModifyClusterMetaCollectResponseBody) *ModifyClusterMetaCollectResponse {
	s.Body = v
	return s
}

type ModifyClusterNameRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyClusterNameRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterNameRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterNameRequest) SetResourceOwnerId(v int64) *ModifyClusterNameRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterNameRequest) SetRegionId(v string) *ModifyClusterNameRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterNameRequest) SetId(v string) *ModifyClusterNameRequest {
	s.Id = &v
	return s
}

func (s *ModifyClusterNameRequest) SetName(v string) *ModifyClusterNameRequest {
	s.Name = &v
	return s
}

type ModifyClusterNameResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterNameResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterNameResponseBody) SetRequestId(v string) *ModifyClusterNameResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterNameResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyClusterNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClusterNameResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterNameResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterNameResponse) SetHeaders(v map[string]*string) *ModifyClusterNameResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterNameResponse) SetBody(v *ModifyClusterNameResponseBody) *ModifyClusterNameResponse {
	s.Body = v
	return s
}

type ModifyClusterSecurityGroupRuleRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ModifyType      *string `json:"ModifyType,omitempty" xml:"ModifyType,omitempty"`
	NicType         *string `json:"NicType,omitempty" xml:"NicType,omitempty"`
	IpProtocol      *string `json:"IpProtocol,omitempty" xml:"IpProtocol,omitempty"`
	PortRange       *string `json:"PortRange,omitempty" xml:"PortRange,omitempty"`
	WhiteIp         *string `json:"WhiteIp,omitempty" xml:"WhiteIp,omitempty"`
}

func (s ModifyClusterSecurityGroupRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterSecurityGroupRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterSecurityGroupRuleRequest) SetResourceOwnerId(v int64) *ModifyClusterSecurityGroupRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterSecurityGroupRuleRequest) SetRegionId(v string) *ModifyClusterSecurityGroupRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterSecurityGroupRuleRequest) SetClusterId(v string) *ModifyClusterSecurityGroupRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyClusterSecurityGroupRuleRequest) SetModifyType(v string) *ModifyClusterSecurityGroupRuleRequest {
	s.ModifyType = &v
	return s
}

func (s *ModifyClusterSecurityGroupRuleRequest) SetNicType(v string) *ModifyClusterSecurityGroupRuleRequest {
	s.NicType = &v
	return s
}

func (s *ModifyClusterSecurityGroupRuleRequest) SetIpProtocol(v string) *ModifyClusterSecurityGroupRuleRequest {
	s.IpProtocol = &v
	return s
}

func (s *ModifyClusterSecurityGroupRuleRequest) SetPortRange(v string) *ModifyClusterSecurityGroupRuleRequest {
	s.PortRange = &v
	return s
}

func (s *ModifyClusterSecurityGroupRuleRequest) SetWhiteIp(v string) *ModifyClusterSecurityGroupRuleRequest {
	s.WhiteIp = &v
	return s
}

type ModifyClusterSecurityGroupRuleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterSecurityGroupRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterSecurityGroupRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterSecurityGroupRuleResponseBody) SetRequestId(v string) *ModifyClusterSecurityGroupRuleResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterSecurityGroupRuleResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyClusterSecurityGroupRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClusterSecurityGroupRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterSecurityGroupRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterSecurityGroupRuleResponse) SetHeaders(v map[string]*string) *ModifyClusterSecurityGroupRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterSecurityGroupRuleResponse) SetBody(v *ModifyClusterSecurityGroupRuleResponseBody) *ModifyClusterSecurityGroupRuleResponse {
	s.Body = v
	return s
}

type ModifyClusterServiceConfigRequest struct {
	ResourceOwnerId      *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId            *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ServiceName          *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	Comment              *string   `json:"Comment,omitempty" xml:"Comment,omitempty"`
	ConfigParams         *string   `json:"ConfigParams,omitempty" xml:"ConfigParams,omitempty"`
	CustomConfigParams   *string   `json:"CustomConfigParams,omitempty" xml:"CustomConfigParams,omitempty"`
	GroupId              *string   `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	HostInstanceId       *string   `json:"HostInstanceId,omitempty" xml:"HostInstanceId,omitempty"`
	ConfigType           *string   `json:"ConfigType,omitempty" xml:"ConfigType,omitempty"`
	RefreshHostConfig    *bool     `json:"RefreshHostConfig,omitempty" xml:"RefreshHostConfig,omitempty"`
	GatewayClusterIdList []*string `json:"GatewayClusterIdList,omitempty" xml:"GatewayClusterIdList,omitempty" type:"Repeated"`
}

func (s ModifyClusterServiceConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterServiceConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterServiceConfigRequest) SetResourceOwnerId(v int64) *ModifyClusterServiceConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetRegionId(v string) *ModifyClusterServiceConfigRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetClusterId(v string) *ModifyClusterServiceConfigRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetServiceName(v string) *ModifyClusterServiceConfigRequest {
	s.ServiceName = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetComment(v string) *ModifyClusterServiceConfigRequest {
	s.Comment = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetConfigParams(v string) *ModifyClusterServiceConfigRequest {
	s.ConfigParams = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetCustomConfigParams(v string) *ModifyClusterServiceConfigRequest {
	s.CustomConfigParams = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetGroupId(v string) *ModifyClusterServiceConfigRequest {
	s.GroupId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetHostInstanceId(v string) *ModifyClusterServiceConfigRequest {
	s.HostInstanceId = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetConfigType(v string) *ModifyClusterServiceConfigRequest {
	s.ConfigType = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetRefreshHostConfig(v bool) *ModifyClusterServiceConfigRequest {
	s.RefreshHostConfig = &v
	return s
}

func (s *ModifyClusterServiceConfigRequest) SetGatewayClusterIdList(v []*string) *ModifyClusterServiceConfigRequest {
	s.GatewayClusterIdList = v
	return s
}

type ModifyClusterServiceConfigResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyClusterServiceConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterServiceConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterServiceConfigResponseBody) SetRequestId(v string) *ModifyClusterServiceConfigResponseBody {
	s.RequestId = &v
	return s
}

type ModifyClusterServiceConfigResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyClusterServiceConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClusterServiceConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterServiceConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterServiceConfigResponse) SetHeaders(v map[string]*string) *ModifyClusterServiceConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterServiceConfigResponse) SetBody(v *ModifyClusterServiceConfigResponseBody) *ModifyClusterServiceConfigResponse {
	s.Body = v
	return s
}

type ModifyClusterTemplateRequest struct {
	ResourceOwnerId        *int64                                         `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	BizId                  *string                                        `json:"BizId,omitempty" xml:"BizId,omitempty"`
	TemplateName           *string                                        `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	RegionId               *string                                        `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                 *string                                        `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	LogPath                *string                                        `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	SecurityGroupId        *string                                        `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IsOpenPublicIp         *bool                                          `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	SecurityGroupName      *string                                        `json:"SecurityGroupName,omitempty" xml:"SecurityGroupName,omitempty"`
	ChargeType             *string                                        `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	Period                 *int32                                         `json:"Period,omitempty" xml:"Period,omitempty"`
	AutoRenew              *bool                                          `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	VpcId                  *string                                        `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId              *string                                        `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NetType                *string                                        `json:"NetType,omitempty" xml:"NetType,omitempty"`
	UserDefinedEmrEcsRole  *string                                        `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	EmrVer                 *string                                        `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType            *string                                        `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	HighAvailabilityEnable *bool                                          `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	UseLocalMetaDb         *bool                                          `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	IoOptimized            *bool                                          `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	SshEnable              *bool                                          `json:"SshEnable,omitempty" xml:"SshEnable,omitempty"`
	InstanceGeneration     *string                                        `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	MasterPwd              *string                                        `json:"MasterPwd,omitempty" xml:"MasterPwd,omitempty"`
	KeyPairName            *string                                        `json:"KeyPairName,omitempty" xml:"KeyPairName,omitempty"`
	MetaStoreType          *string                                        `json:"MetaStoreType,omitempty" xml:"MetaStoreType,omitempty"`
	MetaStoreConf          *string                                        `json:"MetaStoreConf,omitempty" xml:"MetaStoreConf,omitempty"`
	Configurations         *string                                        `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	EasEnable              *bool                                          `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	DepositType            *string                                        `json:"DepositType,omitempty" xml:"DepositType,omitempty"`
	MachineType            *string                                        `json:"MachineType,omitempty" xml:"MachineType,omitempty"`
	UseCustomHiveMetaDb    *bool                                          `json:"UseCustomHiveMetaDb,omitempty" xml:"UseCustomHiveMetaDb,omitempty"`
	InitCustomHiveMetaDb   *bool                                          `json:"InitCustomHiveMetaDb,omitempty" xml:"InitCustomHiveMetaDb,omitempty"`
	ResourceGroupId        *string                                        `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	OptionSoftWareList     []*string                                      `json:"OptionSoftWareList,omitempty" xml:"OptionSoftWareList,omitempty" type:"Repeated"`
	HostGroup              []*ModifyClusterTemplateRequestHostGroup       `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
	BootstrapAction        []*ModifyClusterTemplateRequestBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
	Config                 []*ModifyClusterTemplateRequestConfig          `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	Tag                    []*ModifyClusterTemplateRequestTag             `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ModifyClusterTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequest) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequest) SetResourceOwnerId(v int64) *ModifyClusterTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetBizId(v string) *ModifyClusterTemplateRequest {
	s.BizId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetTemplateName(v string) *ModifyClusterTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetRegionId(v string) *ModifyClusterTemplateRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetZoneId(v string) *ModifyClusterTemplateRequest {
	s.ZoneId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetLogPath(v string) *ModifyClusterTemplateRequest {
	s.LogPath = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetSecurityGroupId(v string) *ModifyClusterTemplateRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetIsOpenPublicIp(v bool) *ModifyClusterTemplateRequest {
	s.IsOpenPublicIp = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetSecurityGroupName(v string) *ModifyClusterTemplateRequest {
	s.SecurityGroupName = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetChargeType(v string) *ModifyClusterTemplateRequest {
	s.ChargeType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetPeriod(v int32) *ModifyClusterTemplateRequest {
	s.Period = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetAutoRenew(v bool) *ModifyClusterTemplateRequest {
	s.AutoRenew = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetVpcId(v string) *ModifyClusterTemplateRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetVSwitchId(v string) *ModifyClusterTemplateRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetNetType(v string) *ModifyClusterTemplateRequest {
	s.NetType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetUserDefinedEmrEcsRole(v string) *ModifyClusterTemplateRequest {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetEmrVer(v string) *ModifyClusterTemplateRequest {
	s.EmrVer = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetClusterType(v string) *ModifyClusterTemplateRequest {
	s.ClusterType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetHighAvailabilityEnable(v bool) *ModifyClusterTemplateRequest {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetUseLocalMetaDb(v bool) *ModifyClusterTemplateRequest {
	s.UseLocalMetaDb = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetIoOptimized(v bool) *ModifyClusterTemplateRequest {
	s.IoOptimized = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetSshEnable(v bool) *ModifyClusterTemplateRequest {
	s.SshEnable = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetInstanceGeneration(v string) *ModifyClusterTemplateRequest {
	s.InstanceGeneration = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetMasterPwd(v string) *ModifyClusterTemplateRequest {
	s.MasterPwd = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetKeyPairName(v string) *ModifyClusterTemplateRequest {
	s.KeyPairName = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetMetaStoreType(v string) *ModifyClusterTemplateRequest {
	s.MetaStoreType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetMetaStoreConf(v string) *ModifyClusterTemplateRequest {
	s.MetaStoreConf = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetConfigurations(v string) *ModifyClusterTemplateRequest {
	s.Configurations = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetEasEnable(v bool) *ModifyClusterTemplateRequest {
	s.EasEnable = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetDepositType(v string) *ModifyClusterTemplateRequest {
	s.DepositType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetMachineType(v string) *ModifyClusterTemplateRequest {
	s.MachineType = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetUseCustomHiveMetaDb(v bool) *ModifyClusterTemplateRequest {
	s.UseCustomHiveMetaDb = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetInitCustomHiveMetaDb(v bool) *ModifyClusterTemplateRequest {
	s.InitCustomHiveMetaDb = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetResourceGroupId(v string) *ModifyClusterTemplateRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyClusterTemplateRequest) SetOptionSoftWareList(v []*string) *ModifyClusterTemplateRequest {
	s.OptionSoftWareList = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetHostGroup(v []*ModifyClusterTemplateRequestHostGroup) *ModifyClusterTemplateRequest {
	s.HostGroup = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetBootstrapAction(v []*ModifyClusterTemplateRequestBootstrapAction) *ModifyClusterTemplateRequest {
	s.BootstrapAction = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetConfig(v []*ModifyClusterTemplateRequestConfig) *ModifyClusterTemplateRequest {
	s.Config = v
	return s
}

func (s *ModifyClusterTemplateRequest) SetTag(v []*ModifyClusterTemplateRequestTag) *ModifyClusterTemplateRequest {
	s.Tag = v
	return s
}

type ModifyClusterTemplateRequestHostGroup struct {
	SysDiskCapacity    *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	HostGroupType      *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	Comment            *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	MultiInstanceTypes *string `json:"MultiInstanceTypes,omitempty" xml:"MultiInstanceTypes,omitempty"`
	SysDiskType        *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	AutoRenew          *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ChargeType         *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DiskType           *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId        *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceType       *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DiskCount          *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	CreateType         *string `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	DiskCapacity       *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	VSwitchId          *string `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NodeCount          *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	HostGroupName      *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	ClusterId          *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ModifyClusterTemplateRequestHostGroup) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequestHostGroup) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequestHostGroup) SetSysDiskCapacity(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetHostGroupType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetComment(v string) *ModifyClusterTemplateRequestHostGroup {
	s.Comment = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetMultiInstanceTypes(v string) *ModifyClusterTemplateRequestHostGroup {
	s.MultiInstanceTypes = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetSysDiskType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetAutoRenew(v bool) *ModifyClusterTemplateRequestHostGroup {
	s.AutoRenew = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetChargeType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.ChargeType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetDiskType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.DiskType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetHostGroupId(v string) *ModifyClusterTemplateRequestHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetInstanceType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.InstanceType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetDiskCount(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.DiskCount = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetCreateType(v string) *ModifyClusterTemplateRequestHostGroup {
	s.CreateType = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetPeriod(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.Period = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetDiskCapacity(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetVSwitchId(v string) *ModifyClusterTemplateRequestHostGroup {
	s.VSwitchId = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetNodeCount(v int32) *ModifyClusterTemplateRequestHostGroup {
	s.NodeCount = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetHostGroupName(v string) *ModifyClusterTemplateRequestHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *ModifyClusterTemplateRequestHostGroup) SetClusterId(v string) *ModifyClusterTemplateRequestHostGroup {
	s.ClusterId = &v
	return s
}

type ModifyClusterTemplateRequestBootstrapAction struct {
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyClusterTemplateRequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetExecutionFailStrategy(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetArg(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetPath(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.Path = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetExecutionTarget(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetExecutionMoment(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *ModifyClusterTemplateRequestBootstrapAction) SetName(v string) *ModifyClusterTemplateRequestBootstrapAction {
	s.Name = &v
	return s
}

type ModifyClusterTemplateRequestConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
}

func (s ModifyClusterTemplateRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequestConfig) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequestConfig) SetConfigValue(v string) *ModifyClusterTemplateRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetReplace(v string) *ModifyClusterTemplateRequestConfig {
	s.Replace = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetFileName(v string) *ModifyClusterTemplateRequestConfig {
	s.FileName = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetServiceName(v string) *ModifyClusterTemplateRequestConfig {
	s.ServiceName = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetConfigKey(v string) *ModifyClusterTemplateRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *ModifyClusterTemplateRequestConfig) SetEncrypt(v string) *ModifyClusterTemplateRequestConfig {
	s.Encrypt = &v
	return s
}

type ModifyClusterTemplateRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ModifyClusterTemplateRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateRequestTag) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateRequestTag) SetKey(v string) *ModifyClusterTemplateRequestTag {
	s.Key = &v
	return s
}

func (s *ModifyClusterTemplateRequestTag) SetValue(v string) *ModifyClusterTemplateRequestTag {
	s.Value = &v
	return s
}

type ModifyClusterTemplateResponseBody struct {
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterTemplateId *string `json:"ClusterTemplateId,omitempty" xml:"ClusterTemplateId,omitempty"`
}

func (s ModifyClusterTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateResponseBody) SetRequestId(v string) *ModifyClusterTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyClusterTemplateResponseBody) SetClusterTemplateId(v string) *ModifyClusterTemplateResponseBody {
	s.ClusterTemplateId = &v
	return s
}

type ModifyClusterTemplateResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyClusterTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyClusterTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyClusterTemplateResponse) GoString() string {
	return s.String()
}

func (s *ModifyClusterTemplateResponse) SetHeaders(v map[string]*string) *ModifyClusterTemplateResponse {
	s.Headers = v
	return s
}

func (s *ModifyClusterTemplateResponse) SetBody(v *ModifyClusterTemplateResponseBody) *ModifyClusterTemplateResponse {
	s.Body = v
	return s
}

type ModifyExecutionPlanRequest struct {
	ResourceOwnerId        *int64                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ClusterName            *string                                      `json:"ClusterName,omitempty" xml:"ClusterName,omitempty"`
	ClusterId              *string                                      `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	RegionId               *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ZoneId                 *string                                      `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
	LogEnable              *bool                                        `json:"LogEnable,omitempty" xml:"LogEnable,omitempty"`
	LogPath                *string                                      `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	SecurityGroupId        *string                                      `json:"SecurityGroupId,omitempty" xml:"SecurityGroupId,omitempty"`
	IsOpenPublicIp         *bool                                        `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	CreateClusterOnDemand  *bool                                        `json:"CreateClusterOnDemand,omitempty" xml:"CreateClusterOnDemand,omitempty"`
	EmrVer                 *string                                      `json:"EmrVer,omitempty" xml:"EmrVer,omitempty"`
	ClusterType            *string                                      `json:"ClusterType,omitempty" xml:"ClusterType,omitempty"`
	HighAvailabilityEnable *bool                                        `json:"HighAvailabilityEnable,omitempty" xml:"HighAvailabilityEnable,omitempty"`
	UseLocalMetaDb         *bool                                        `json:"UseLocalMetaDb,omitempty" xml:"UseLocalMetaDb,omitempty"`
	VpcId                  *string                                      `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	VSwitchId              *string                                      `json:"VSwitchId,omitempty" xml:"VSwitchId,omitempty"`
	NetType                *string                                      `json:"NetType,omitempty" xml:"NetType,omitempty"`
	UserDefinedEmrEcsRole  *string                                      `json:"UserDefinedEmrEcsRole,omitempty" xml:"UserDefinedEmrEcsRole,omitempty"`
	IoOptimized            *bool                                        `json:"IoOptimized,omitempty" xml:"IoOptimized,omitempty"`
	InstanceGeneration     *string                                      `json:"InstanceGeneration,omitempty" xml:"InstanceGeneration,omitempty"`
	EasEnable              *bool                                        `json:"EasEnable,omitempty" xml:"EasEnable,omitempty"`
	WorkflowDefinition     *string                                      `json:"WorkflowDefinition,omitempty" xml:"WorkflowDefinition,omitempty"`
	UseCustomHiveMetaDB    *bool                                        `json:"UseCustomHiveMetaDB,omitempty" xml:"UseCustomHiveMetaDB,omitempty"`
	InitCustomHiveMetaDB   *bool                                        `json:"InitCustomHiveMetaDB,omitempty" xml:"InitCustomHiveMetaDB,omitempty"`
	Configurations         *string                                      `json:"Configurations,omitempty" xml:"Configurations,omitempty"`
	Id                     *string                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	ExecutionPlanVersion   *int64                                       `json:"ExecutionPlanVersion,omitempty" xml:"ExecutionPlanVersion,omitempty"`
	Name                   *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Strategy               *string                                      `json:"Strategy,omitempty" xml:"Strategy,omitempty"`
	TimeInterval           *int32                                       `json:"TimeInterval,omitempty" xml:"TimeInterval,omitempty"`
	StartTime              *int64                                       `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TimeUnit               *string                                      `json:"TimeUnit,omitempty" xml:"TimeUnit,omitempty"`
	DayOfWeek              *string                                      `json:"DayOfWeek,omitempty" xml:"DayOfWeek,omitempty"`
	DayOfMonth             *string                                      `json:"DayOfMonth,omitempty" xml:"DayOfMonth,omitempty"`
	OptionSoftWareList     []*string                                    `json:"OptionSoftWareList,omitempty" xml:"OptionSoftWareList,omitempty" type:"Repeated"`
	EcsOrder               []*ModifyExecutionPlanRequestEcsOrder        `json:"EcsOrder,omitempty" xml:"EcsOrder,omitempty" type:"Repeated"`
	BootstrapAction        []*ModifyExecutionPlanRequestBootstrapAction `json:"BootstrapAction,omitempty" xml:"BootstrapAction,omitempty" type:"Repeated"`
	Config                 []*ModifyExecutionPlanRequestConfig          `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
	JobIdList              []*string                                    `json:"JobIdList,omitempty" xml:"JobIdList,omitempty" type:"Repeated"`
}

func (s ModifyExecutionPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyExecutionPlanRequest) GoString() string {
	return s.String()
}

func (s *ModifyExecutionPlanRequest) SetResourceOwnerId(v int64) *ModifyExecutionPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetClusterName(v string) *ModifyExecutionPlanRequest {
	s.ClusterName = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetClusterId(v string) *ModifyExecutionPlanRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetRegionId(v string) *ModifyExecutionPlanRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetZoneId(v string) *ModifyExecutionPlanRequest {
	s.ZoneId = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetLogEnable(v bool) *ModifyExecutionPlanRequest {
	s.LogEnable = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetLogPath(v string) *ModifyExecutionPlanRequest {
	s.LogPath = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetSecurityGroupId(v string) *ModifyExecutionPlanRequest {
	s.SecurityGroupId = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetIsOpenPublicIp(v bool) *ModifyExecutionPlanRequest {
	s.IsOpenPublicIp = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetCreateClusterOnDemand(v bool) *ModifyExecutionPlanRequest {
	s.CreateClusterOnDemand = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetEmrVer(v string) *ModifyExecutionPlanRequest {
	s.EmrVer = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetClusterType(v string) *ModifyExecutionPlanRequest {
	s.ClusterType = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetHighAvailabilityEnable(v bool) *ModifyExecutionPlanRequest {
	s.HighAvailabilityEnable = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetUseLocalMetaDb(v bool) *ModifyExecutionPlanRequest {
	s.UseLocalMetaDb = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetVpcId(v string) *ModifyExecutionPlanRequest {
	s.VpcId = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetVSwitchId(v string) *ModifyExecutionPlanRequest {
	s.VSwitchId = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetNetType(v string) *ModifyExecutionPlanRequest {
	s.NetType = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetUserDefinedEmrEcsRole(v string) *ModifyExecutionPlanRequest {
	s.UserDefinedEmrEcsRole = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetIoOptimized(v bool) *ModifyExecutionPlanRequest {
	s.IoOptimized = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetInstanceGeneration(v string) *ModifyExecutionPlanRequest {
	s.InstanceGeneration = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetEasEnable(v bool) *ModifyExecutionPlanRequest {
	s.EasEnable = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetWorkflowDefinition(v string) *ModifyExecutionPlanRequest {
	s.WorkflowDefinition = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetUseCustomHiveMetaDB(v bool) *ModifyExecutionPlanRequest {
	s.UseCustomHiveMetaDB = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetInitCustomHiveMetaDB(v bool) *ModifyExecutionPlanRequest {
	s.InitCustomHiveMetaDB = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetConfigurations(v string) *ModifyExecutionPlanRequest {
	s.Configurations = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetId(v string) *ModifyExecutionPlanRequest {
	s.Id = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetExecutionPlanVersion(v int64) *ModifyExecutionPlanRequest {
	s.ExecutionPlanVersion = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetName(v string) *ModifyExecutionPlanRequest {
	s.Name = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetStrategy(v string) *ModifyExecutionPlanRequest {
	s.Strategy = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetTimeInterval(v int32) *ModifyExecutionPlanRequest {
	s.TimeInterval = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetStartTime(v int64) *ModifyExecutionPlanRequest {
	s.StartTime = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetTimeUnit(v string) *ModifyExecutionPlanRequest {
	s.TimeUnit = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetDayOfWeek(v string) *ModifyExecutionPlanRequest {
	s.DayOfWeek = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetDayOfMonth(v string) *ModifyExecutionPlanRequest {
	s.DayOfMonth = &v
	return s
}

func (s *ModifyExecutionPlanRequest) SetOptionSoftWareList(v []*string) *ModifyExecutionPlanRequest {
	s.OptionSoftWareList = v
	return s
}

func (s *ModifyExecutionPlanRequest) SetEcsOrder(v []*ModifyExecutionPlanRequestEcsOrder) *ModifyExecutionPlanRequest {
	s.EcsOrder = v
	return s
}

func (s *ModifyExecutionPlanRequest) SetBootstrapAction(v []*ModifyExecutionPlanRequestBootstrapAction) *ModifyExecutionPlanRequest {
	s.BootstrapAction = v
	return s
}

func (s *ModifyExecutionPlanRequest) SetConfig(v []*ModifyExecutionPlanRequestConfig) *ModifyExecutionPlanRequest {
	s.Config = v
	return s
}

func (s *ModifyExecutionPlanRequest) SetJobIdList(v []*string) *ModifyExecutionPlanRequest {
	s.JobIdList = v
	return s
}

type ModifyExecutionPlanRequestEcsOrder struct {
	Index        *int32  `json:"Index,omitempty" xml:"Index,omitempty"`
	DiskCapacity *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	NodeType     *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	NodeCount    *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	DiskType     *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	DiskCount    *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
}

func (s ModifyExecutionPlanRequestEcsOrder) String() string {
	return tea.Prettify(s)
}

func (s ModifyExecutionPlanRequestEcsOrder) GoString() string {
	return s.String()
}

func (s *ModifyExecutionPlanRequestEcsOrder) SetIndex(v int32) *ModifyExecutionPlanRequestEcsOrder {
	s.Index = &v
	return s
}

func (s *ModifyExecutionPlanRequestEcsOrder) SetDiskCapacity(v int32) *ModifyExecutionPlanRequestEcsOrder {
	s.DiskCapacity = &v
	return s
}

func (s *ModifyExecutionPlanRequestEcsOrder) SetNodeType(v string) *ModifyExecutionPlanRequestEcsOrder {
	s.NodeType = &v
	return s
}

func (s *ModifyExecutionPlanRequestEcsOrder) SetNodeCount(v int32) *ModifyExecutionPlanRequestEcsOrder {
	s.NodeCount = &v
	return s
}

func (s *ModifyExecutionPlanRequestEcsOrder) SetDiskType(v string) *ModifyExecutionPlanRequestEcsOrder {
	s.DiskType = &v
	return s
}

func (s *ModifyExecutionPlanRequestEcsOrder) SetInstanceType(v string) *ModifyExecutionPlanRequestEcsOrder {
	s.InstanceType = &v
	return s
}

func (s *ModifyExecutionPlanRequestEcsOrder) SetDiskCount(v int32) *ModifyExecutionPlanRequestEcsOrder {
	s.DiskCount = &v
	return s
}

type ModifyExecutionPlanRequestBootstrapAction struct {
	ExecutionFailStrategy *string `json:"ExecutionFailStrategy,omitempty" xml:"ExecutionFailStrategy,omitempty"`
	Arg                   *string `json:"Arg,omitempty" xml:"Arg,omitempty"`
	Path                  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ExecutionTarget       *string `json:"ExecutionTarget,omitempty" xml:"ExecutionTarget,omitempty"`
	ExecutionMoment       *string `json:"ExecutionMoment,omitempty" xml:"ExecutionMoment,omitempty"`
	Name                  *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s ModifyExecutionPlanRequestBootstrapAction) String() string {
	return tea.Prettify(s)
}

func (s ModifyExecutionPlanRequestBootstrapAction) GoString() string {
	return s.String()
}

func (s *ModifyExecutionPlanRequestBootstrapAction) SetExecutionFailStrategy(v string) *ModifyExecutionPlanRequestBootstrapAction {
	s.ExecutionFailStrategy = &v
	return s
}

func (s *ModifyExecutionPlanRequestBootstrapAction) SetArg(v string) *ModifyExecutionPlanRequestBootstrapAction {
	s.Arg = &v
	return s
}

func (s *ModifyExecutionPlanRequestBootstrapAction) SetPath(v string) *ModifyExecutionPlanRequestBootstrapAction {
	s.Path = &v
	return s
}

func (s *ModifyExecutionPlanRequestBootstrapAction) SetExecutionTarget(v string) *ModifyExecutionPlanRequestBootstrapAction {
	s.ExecutionTarget = &v
	return s
}

func (s *ModifyExecutionPlanRequestBootstrapAction) SetExecutionMoment(v string) *ModifyExecutionPlanRequestBootstrapAction {
	s.ExecutionMoment = &v
	return s
}

func (s *ModifyExecutionPlanRequestBootstrapAction) SetName(v string) *ModifyExecutionPlanRequestBootstrapAction {
	s.Name = &v
	return s
}

type ModifyExecutionPlanRequestConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Replace     *string `json:"Replace,omitempty" xml:"Replace,omitempty"`
	FileName    *string `json:"FileName,omitempty" xml:"FileName,omitempty"`
	ServiceName *string `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Encrypt     *string `json:"Encrypt,omitempty" xml:"Encrypt,omitempty"`
}

func (s ModifyExecutionPlanRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyExecutionPlanRequestConfig) GoString() string {
	return s.String()
}

func (s *ModifyExecutionPlanRequestConfig) SetConfigValue(v string) *ModifyExecutionPlanRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *ModifyExecutionPlanRequestConfig) SetReplace(v string) *ModifyExecutionPlanRequestConfig {
	s.Replace = &v
	return s
}

func (s *ModifyExecutionPlanRequestConfig) SetFileName(v string) *ModifyExecutionPlanRequestConfig {
	s.FileName = &v
	return s
}

func (s *ModifyExecutionPlanRequestConfig) SetServiceName(v string) *ModifyExecutionPlanRequestConfig {
	s.ServiceName = &v
	return s
}

func (s *ModifyExecutionPlanRequestConfig) SetConfigKey(v string) *ModifyExecutionPlanRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *ModifyExecutionPlanRequestConfig) SetEncrypt(v string) *ModifyExecutionPlanRequestConfig {
	s.Encrypt = &v
	return s
}

type ModifyExecutionPlanResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyExecutionPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyExecutionPlanResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyExecutionPlanResponseBody) SetRequestId(v string) *ModifyExecutionPlanResponseBody {
	s.RequestId = &v
	return s
}

type ModifyExecutionPlanResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyExecutionPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyExecutionPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyExecutionPlanResponse) GoString() string {
	return s.String()
}

func (s *ModifyExecutionPlanResponse) SetHeaders(v map[string]*string) *ModifyExecutionPlanResponse {
	s.Headers = v
	return s
}

func (s *ModifyExecutionPlanResponse) SetBody(v *ModifyExecutionPlanResponseBody) *ModifyExecutionPlanResponse {
	s.Body = v
	return s
}

type ModifyFlowRequest struct {
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id                      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Periodic                *bool   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Namespace               *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	LogArchiveLocation      *string `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Lifecycle               *string `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	Application             *string `json:"Application,omitempty" xml:"Application,omitempty"`
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	ParentFlowList          *string `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty"`
	ParentCategory          *string `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
}

func (s ModifyFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowRequest) SetRegionId(v string) *ModifyFlowRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowRequest) SetProjectId(v string) *ModifyFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowRequest) SetId(v string) *ModifyFlowRequest {
	s.Id = &v
	return s
}

func (s *ModifyFlowRequest) SetName(v string) *ModifyFlowRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowRequest) SetStatus(v string) *ModifyFlowRequest {
	s.Status = &v
	return s
}

func (s *ModifyFlowRequest) SetDescription(v string) *ModifyFlowRequest {
	s.Description = &v
	return s
}

func (s *ModifyFlowRequest) SetPeriodic(v bool) *ModifyFlowRequest {
	s.Periodic = &v
	return s
}

func (s *ModifyFlowRequest) SetStartSchedule(v int64) *ModifyFlowRequest {
	s.StartSchedule = &v
	return s
}

func (s *ModifyFlowRequest) SetEndSchedule(v int64) *ModifyFlowRequest {
	s.EndSchedule = &v
	return s
}

func (s *ModifyFlowRequest) SetCronExpr(v string) *ModifyFlowRequest {
	s.CronExpr = &v
	return s
}

func (s *ModifyFlowRequest) SetCreateCluster(v bool) *ModifyFlowRequest {
	s.CreateCluster = &v
	return s
}

func (s *ModifyFlowRequest) SetClusterId(v string) *ModifyFlowRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyFlowRequest) SetHostName(v string) *ModifyFlowRequest {
	s.HostName = &v
	return s
}

func (s *ModifyFlowRequest) SetNamespace(v string) *ModifyFlowRequest {
	s.Namespace = &v
	return s
}

func (s *ModifyFlowRequest) SetLogArchiveLocation(v string) *ModifyFlowRequest {
	s.LogArchiveLocation = &v
	return s
}

func (s *ModifyFlowRequest) SetLifecycle(v string) *ModifyFlowRequest {
	s.Lifecycle = &v
	return s
}

func (s *ModifyFlowRequest) SetApplication(v string) *ModifyFlowRequest {
	s.Application = &v
	return s
}

func (s *ModifyFlowRequest) SetAlertConf(v string) *ModifyFlowRequest {
	s.AlertConf = &v
	return s
}

func (s *ModifyFlowRequest) SetAlertUserGroupBizId(v string) *ModifyFlowRequest {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *ModifyFlowRequest) SetAlertDingDingGroupBizId(v string) *ModifyFlowRequest {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *ModifyFlowRequest) SetParentFlowList(v string) *ModifyFlowRequest {
	s.ParentFlowList = &v
	return s
}

func (s *ModifyFlowRequest) SetParentCategory(v string) *ModifyFlowRequest {
	s.ParentCategory = &v
	return s
}

type ModifyFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowResponseBody) SetRequestId(v string) *ModifyFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFlowResponseBody) SetData(v bool) *ModifyFlowResponseBody {
	s.Data = &v
	return s
}

type ModifyFlowResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowResponse) SetHeaders(v map[string]*string) *ModifyFlowResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowResponse) SetBody(v *ModifyFlowResponseBody) *ModifyFlowResponse {
	s.Body = v
	return s
}

type ModifyFlowCategoryRequest struct {
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ParentId  *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
}

func (s ModifyFlowCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowCategoryRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowCategoryRequest) SetProjectId(v string) *ModifyFlowCategoryRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowCategoryRequest) SetRegionId(v string) *ModifyFlowCategoryRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowCategoryRequest) SetId(v string) *ModifyFlowCategoryRequest {
	s.Id = &v
	return s
}

func (s *ModifyFlowCategoryRequest) SetName(v string) *ModifyFlowCategoryRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowCategoryRequest) SetParentId(v string) *ModifyFlowCategoryRequest {
	s.ParentId = &v
	return s
}

type ModifyFlowCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyFlowCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowCategoryResponseBody) SetRequestId(v string) *ModifyFlowCategoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFlowCategoryResponseBody) SetData(v bool) *ModifyFlowCategoryResponseBody {
	s.Data = &v
	return s
}

type ModifyFlowCategoryResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyFlowCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyFlowCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowCategoryResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowCategoryResponse) SetHeaders(v map[string]*string) *ModifyFlowCategoryResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowCategoryResponse) SetBody(v *ModifyFlowCategoryResponseBody) *ModifyFlowCategoryResponse {
	s.Body = v
	return s
}

type ModifyFlowForWebRequest struct {
	RegionId                *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId               *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id                      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name                    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Status                  *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Description             *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Periodic                *bool   `json:"Periodic,omitempty" xml:"Periodic,omitempty"`
	StartSchedule           *int64  `json:"StartSchedule,omitempty" xml:"StartSchedule,omitempty"`
	EndSchedule             *int64  `json:"EndSchedule,omitempty" xml:"EndSchedule,omitempty"`
	CronExpr                *string `json:"CronExpr,omitempty" xml:"CronExpr,omitempty"`
	CreateCluster           *bool   `json:"CreateCluster,omitempty" xml:"CreateCluster,omitempty"`
	ClusterId               *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostName                *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Namespace               *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	LogArchiveLocation      *string `json:"LogArchiveLocation,omitempty" xml:"LogArchiveLocation,omitempty"`
	Lifecycle               *string `json:"Lifecycle,omitempty" xml:"Lifecycle,omitempty"`
	Graph                   *string `json:"Graph,omitempty" xml:"Graph,omitempty"`
	AlertConf               *string `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	AlertUserGroupBizId     *string `json:"AlertUserGroupBizId,omitempty" xml:"AlertUserGroupBizId,omitempty"`
	AlertDingDingGroupBizId *string `json:"AlertDingDingGroupBizId,omitempty" xml:"AlertDingDingGroupBizId,omitempty"`
	ParentFlowList          *string `json:"ParentFlowList,omitempty" xml:"ParentFlowList,omitempty"`
	ParentCategory          *string `json:"ParentCategory,omitempty" xml:"ParentCategory,omitempty"`
}

func (s ModifyFlowForWebRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowForWebRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowForWebRequest) SetRegionId(v string) *ModifyFlowForWebRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetProjectId(v string) *ModifyFlowForWebRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetId(v string) *ModifyFlowForWebRequest {
	s.Id = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetName(v string) *ModifyFlowForWebRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetStatus(v string) *ModifyFlowForWebRequest {
	s.Status = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetDescription(v string) *ModifyFlowForWebRequest {
	s.Description = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetPeriodic(v bool) *ModifyFlowForWebRequest {
	s.Periodic = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetStartSchedule(v int64) *ModifyFlowForWebRequest {
	s.StartSchedule = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetEndSchedule(v int64) *ModifyFlowForWebRequest {
	s.EndSchedule = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetCronExpr(v string) *ModifyFlowForWebRequest {
	s.CronExpr = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetCreateCluster(v bool) *ModifyFlowForWebRequest {
	s.CreateCluster = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetClusterId(v string) *ModifyFlowForWebRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetHostName(v string) *ModifyFlowForWebRequest {
	s.HostName = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetNamespace(v string) *ModifyFlowForWebRequest {
	s.Namespace = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetLogArchiveLocation(v string) *ModifyFlowForWebRequest {
	s.LogArchiveLocation = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetLifecycle(v string) *ModifyFlowForWebRequest {
	s.Lifecycle = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetGraph(v string) *ModifyFlowForWebRequest {
	s.Graph = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetAlertConf(v string) *ModifyFlowForWebRequest {
	s.AlertConf = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetAlertUserGroupBizId(v string) *ModifyFlowForWebRequest {
	s.AlertUserGroupBizId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetAlertDingDingGroupBizId(v string) *ModifyFlowForWebRequest {
	s.AlertDingDingGroupBizId = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetParentFlowList(v string) *ModifyFlowForWebRequest {
	s.ParentFlowList = &v
	return s
}

func (s *ModifyFlowForWebRequest) SetParentCategory(v string) *ModifyFlowForWebRequest {
	s.ParentCategory = &v
	return s
}

type ModifyFlowForWebResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyFlowForWebResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowForWebResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowForWebResponseBody) SetRequestId(v string) *ModifyFlowForWebResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFlowForWebResponseBody) SetData(v bool) *ModifyFlowForWebResponseBody {
	s.Data = &v
	return s
}

type ModifyFlowForWebResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyFlowForWebResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyFlowForWebResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowForWebResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowForWebResponse) SetHeaders(v map[string]*string) *ModifyFlowForWebResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowForWebResponse) SetBody(v *ModifyFlowForWebResponseBody) *ModifyFlowForWebResponse {
	s.Body = v
	return s
}

type ModifyFlowJobRequest struct {
	RegionId          *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId         *string                             `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	Id                *string                             `json:"Id,omitempty" xml:"Id,omitempty"`
	Name              *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Description       *string                             `json:"Description,omitempty" xml:"Description,omitempty"`
	FailAct           *string                             `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	MaxRetry          *int32                              `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	RetryPolicy       *string                             `json:"RetryPolicy,omitempty" xml:"RetryPolicy,omitempty"`
	MaxRunningTimeSec *int64                              `json:"MaxRunningTimeSec,omitempty" xml:"MaxRunningTimeSec,omitempty"`
	RetryInterval     *int64                              `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	Params            *string                             `json:"Params,omitempty" xml:"Params,omitempty"`
	ParamConf         *string                             `json:"ParamConf,omitempty" xml:"ParamConf,omitempty"`
	CustomVariables   *string                             `json:"CustomVariables,omitempty" xml:"CustomVariables,omitempty"`
	EnvConf           *string                             `json:"EnvConf,omitempty" xml:"EnvConf,omitempty"`
	RunConf           *string                             `json:"RunConf,omitempty" xml:"RunConf,omitempty"`
	MonitorConf       *string                             `json:"MonitorConf,omitempty" xml:"MonitorConf,omitempty"`
	Mode              *string                             `json:"Mode,omitempty" xml:"Mode,omitempty"`
	ClusterId         *string                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	AlertConf         *string                             `json:"AlertConf,omitempty" xml:"AlertConf,omitempty"`
	ResourceList      []*ModifyFlowJobRequestResourceList `json:"ResourceList,omitempty" xml:"ResourceList,omitempty" type:"Repeated"`
}

func (s ModifyFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowJobRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowJobRequest) SetRegionId(v string) *ModifyFlowJobRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowJobRequest) SetProjectId(v string) *ModifyFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowJobRequest) SetId(v string) *ModifyFlowJobRequest {
	s.Id = &v
	return s
}

func (s *ModifyFlowJobRequest) SetName(v string) *ModifyFlowJobRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowJobRequest) SetDescription(v string) *ModifyFlowJobRequest {
	s.Description = &v
	return s
}

func (s *ModifyFlowJobRequest) SetFailAct(v string) *ModifyFlowJobRequest {
	s.FailAct = &v
	return s
}

func (s *ModifyFlowJobRequest) SetMaxRetry(v int32) *ModifyFlowJobRequest {
	s.MaxRetry = &v
	return s
}

func (s *ModifyFlowJobRequest) SetRetryPolicy(v string) *ModifyFlowJobRequest {
	s.RetryPolicy = &v
	return s
}

func (s *ModifyFlowJobRequest) SetMaxRunningTimeSec(v int64) *ModifyFlowJobRequest {
	s.MaxRunningTimeSec = &v
	return s
}

func (s *ModifyFlowJobRequest) SetRetryInterval(v int64) *ModifyFlowJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *ModifyFlowJobRequest) SetParams(v string) *ModifyFlowJobRequest {
	s.Params = &v
	return s
}

func (s *ModifyFlowJobRequest) SetParamConf(v string) *ModifyFlowJobRequest {
	s.ParamConf = &v
	return s
}

func (s *ModifyFlowJobRequest) SetCustomVariables(v string) *ModifyFlowJobRequest {
	s.CustomVariables = &v
	return s
}

func (s *ModifyFlowJobRequest) SetEnvConf(v string) *ModifyFlowJobRequest {
	s.EnvConf = &v
	return s
}

func (s *ModifyFlowJobRequest) SetRunConf(v string) *ModifyFlowJobRequest {
	s.RunConf = &v
	return s
}

func (s *ModifyFlowJobRequest) SetMonitorConf(v string) *ModifyFlowJobRequest {
	s.MonitorConf = &v
	return s
}

func (s *ModifyFlowJobRequest) SetMode(v string) *ModifyFlowJobRequest {
	s.Mode = &v
	return s
}

func (s *ModifyFlowJobRequest) SetClusterId(v string) *ModifyFlowJobRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyFlowJobRequest) SetAlertConf(v string) *ModifyFlowJobRequest {
	s.AlertConf = &v
	return s
}

func (s *ModifyFlowJobRequest) SetResourceList(v []*ModifyFlowJobRequestResourceList) *ModifyFlowJobRequest {
	s.ResourceList = v
	return s
}

type ModifyFlowJobRequestResourceList struct {
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Alias *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
}

func (s ModifyFlowJobRequestResourceList) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowJobRequestResourceList) GoString() string {
	return s.String()
}

func (s *ModifyFlowJobRequestResourceList) SetPath(v string) *ModifyFlowJobRequestResourceList {
	s.Path = &v
	return s
}

func (s *ModifyFlowJobRequestResourceList) SetAlias(v string) *ModifyFlowJobRequestResourceList {
	s.Alias = &v
	return s
}

type ModifyFlowJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowJobResponseBody) SetRequestId(v string) *ModifyFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFlowJobResponseBody) SetData(v bool) *ModifyFlowJobResponseBody {
	s.Data = &v
	return s
}

type ModifyFlowJobResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowJobResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowJobResponse) SetHeaders(v map[string]*string) *ModifyFlowJobResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowJobResponse) SetBody(v *ModifyFlowJobResponseBody) *ModifyFlowJobResponse {
	s.Body = v
	return s
}

type ModifyFlowProjectRequest struct {
	ProjectId   *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s ModifyFlowProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectRequest) SetProjectId(v string) *ModifyFlowProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowProjectRequest) SetRegionId(v string) *ModifyFlowProjectRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowProjectRequest) SetName(v string) *ModifyFlowProjectRequest {
	s.Name = &v
	return s
}

func (s *ModifyFlowProjectRequest) SetDescription(v string) *ModifyFlowProjectRequest {
	s.Description = &v
	return s
}

type ModifyFlowProjectResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyFlowProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectResponseBody) SetRequestId(v string) *ModifyFlowProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFlowProjectResponseBody) SetData(v bool) *ModifyFlowProjectResponseBody {
	s.Data = &v
	return s
}

type ModifyFlowProjectResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyFlowProjectResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyFlowProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectResponse) SetHeaders(v map[string]*string) *ModifyFlowProjectResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowProjectResponse) SetBody(v *ModifyFlowProjectResponseBody) *ModifyFlowProjectResponse {
	s.Body = v
	return s
}

type ModifyFlowProjectClusterSettingRequest struct {
	RegionId     *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId    *string   `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ClusterId    *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	DefaultUser  *string   `json:"DefaultUser,omitempty" xml:"DefaultUser,omitempty"`
	DefaultQueue *string   `json:"DefaultQueue,omitempty" xml:"DefaultQueue,omitempty"`
	UserList     []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
	QueueList    []*string `json:"QueueList,omitempty" xml:"QueueList,omitempty" type:"Repeated"`
	HostList     []*string `json:"HostList,omitempty" xml:"HostList,omitempty" type:"Repeated"`
}

func (s ModifyFlowProjectClusterSettingRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectClusterSettingRequest) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectClusterSettingRequest) SetRegionId(v string) *ModifyFlowProjectClusterSettingRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetProjectId(v string) *ModifyFlowProjectClusterSettingRequest {
	s.ProjectId = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetClusterId(v string) *ModifyFlowProjectClusterSettingRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetDefaultUser(v string) *ModifyFlowProjectClusterSettingRequest {
	s.DefaultUser = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetDefaultQueue(v string) *ModifyFlowProjectClusterSettingRequest {
	s.DefaultQueue = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetUserList(v []*string) *ModifyFlowProjectClusterSettingRequest {
	s.UserList = v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetQueueList(v []*string) *ModifyFlowProjectClusterSettingRequest {
	s.QueueList = v
	return s
}

func (s *ModifyFlowProjectClusterSettingRequest) SetHostList(v []*string) *ModifyFlowProjectClusterSettingRequest {
	s.HostList = v
	return s
}

type ModifyFlowProjectClusterSettingResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyFlowProjectClusterSettingResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectClusterSettingResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectClusterSettingResponseBody) SetRequestId(v string) *ModifyFlowProjectClusterSettingResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyFlowProjectClusterSettingResponseBody) SetData(v bool) *ModifyFlowProjectClusterSettingResponseBody {
	s.Data = &v
	return s
}

type ModifyFlowProjectClusterSettingResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyFlowProjectClusterSettingResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyFlowProjectClusterSettingResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyFlowProjectClusterSettingResponse) GoString() string {
	return s.String()
}

func (s *ModifyFlowProjectClusterSettingResponse) SetHeaders(v map[string]*string) *ModifyFlowProjectClusterSettingResponse {
	s.Headers = v
	return s
}

func (s *ModifyFlowProjectClusterSettingResponse) SetBody(v *ModifyFlowProjectClusterSettingResponseBody) *ModifyFlowProjectClusterSettingResponse {
	s.Body = v
	return s
}

type ModifyJobRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Type            *string `json:"Type,omitempty" xml:"Type,omitempty"`
	RunParameter    *string `json:"RunParameter,omitempty" xml:"RunParameter,omitempty"`
	FailAct         *string `json:"FailAct,omitempty" xml:"FailAct,omitempty"`
	MaxRetry        *int32  `json:"MaxRetry,omitempty" xml:"MaxRetry,omitempty"`
	RetryInterval   *int32  `json:"RetryInterval,omitempty" xml:"RetryInterval,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s ModifyJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobRequest) GoString() string {
	return s.String()
}

func (s *ModifyJobRequest) SetResourceOwnerId(v int64) *ModifyJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyJobRequest) SetId(v string) *ModifyJobRequest {
	s.Id = &v
	return s
}

func (s *ModifyJobRequest) SetName(v string) *ModifyJobRequest {
	s.Name = &v
	return s
}

func (s *ModifyJobRequest) SetRegionId(v string) *ModifyJobRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyJobRequest) SetType(v string) *ModifyJobRequest {
	s.Type = &v
	return s
}

func (s *ModifyJobRequest) SetRunParameter(v string) *ModifyJobRequest {
	s.RunParameter = &v
	return s
}

func (s *ModifyJobRequest) SetFailAct(v string) *ModifyJobRequest {
	s.FailAct = &v
	return s
}

func (s *ModifyJobRequest) SetMaxRetry(v int32) *ModifyJobRequest {
	s.MaxRetry = &v
	return s
}

func (s *ModifyJobRequest) SetRetryInterval(v int32) *ModifyJobRequest {
	s.RetryInterval = &v
	return s
}

func (s *ModifyJobRequest) SetResourceGroupId(v string) *ModifyJobRequest {
	s.ResourceGroupId = &v
	return s
}

type ModifyJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyJobResponseBody) SetRequestId(v string) *ModifyJobResponseBody {
	s.RequestId = &v
	return s
}

type ModifyJobResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyJobResponse) GoString() string {
	return s.String()
}

func (s *ModifyJobResponse) SetHeaders(v map[string]*string) *ModifyJobResponse {
	s.Headers = v
	return s
}

func (s *ModifyJobResponse) SetBody(v *ModifyJobResponseBody) *ModifyJobResponse {
	s.Body = v
	return s
}

type ModifyResourcePoolRequest struct {
	RegionId        *string                            `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64                             `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Id              *string                            `json:"Id,omitempty" xml:"Id,omitempty"`
	Active          *bool                              `json:"Active,omitempty" xml:"Active,omitempty"`
	Name            *string                            `json:"Name,omitempty" xml:"Name,omitempty"`
	ClusterId       *string                            `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	Yarnsiteconfig  *string                            `json:"Yarnsiteconfig,omitempty" xml:"Yarnsiteconfig,omitempty"`
	Config          []*ModifyResourcePoolRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s ModifyResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolRequest) SetRegionId(v string) *ModifyResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetResourceOwnerId(v int64) *ModifyResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetId(v string) *ModifyResourcePoolRequest {
	s.Id = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetActive(v bool) *ModifyResourcePoolRequest {
	s.Active = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetName(v string) *ModifyResourcePoolRequest {
	s.Name = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetClusterId(v string) *ModifyResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetYarnsiteconfig(v string) *ModifyResourcePoolRequest {
	s.Yarnsiteconfig = &v
	return s
}

func (s *ModifyResourcePoolRequest) SetConfig(v []*ModifyResourcePoolRequestConfig) *ModifyResourcePoolRequest {
	s.Config = v
	return s
}

type ModifyResourcePoolRequestConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ModifyResourcePoolRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolRequestConfig) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolRequestConfig) SetConfigValue(v string) *ModifyResourcePoolRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *ModifyResourcePoolRequestConfig) SetNote(v string) *ModifyResourcePoolRequestConfig {
	s.Note = &v
	return s
}

func (s *ModifyResourcePoolRequestConfig) SetCategory(v string) *ModifyResourcePoolRequestConfig {
	s.Category = &v
	return s
}

func (s *ModifyResourcePoolRequestConfig) SetConfigKey(v string) *ModifyResourcePoolRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *ModifyResourcePoolRequestConfig) SetId(v string) *ModifyResourcePoolRequestConfig {
	s.Id = &v
	return s
}

type ModifyResourcePoolResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolResponseBody) SetRequestId(v string) *ModifyResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourcePoolResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolResponse) SetHeaders(v map[string]*string) *ModifyResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourcePoolResponse) SetBody(v *ModifyResourcePoolResponseBody) *ModifyResourcePoolResponse {
	s.Body = v
	return s
}

type ModifyResourcePoolSchedulerTypeRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	SchedulerType   *string `json:"SchedulerType,omitempty" xml:"SchedulerType,omitempty"`
}

func (s ModifyResourcePoolSchedulerTypeRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolSchedulerTypeRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolSchedulerTypeRequest) SetResourceOwnerId(v int64) *ModifyResourcePoolSchedulerTypeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeRequest) SetRegionId(v string) *ModifyResourcePoolSchedulerTypeRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeRequest) SetClusterId(v string) *ModifyResourcePoolSchedulerTypeRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeRequest) SetSchedulerType(v string) *ModifyResourcePoolSchedulerTypeRequest {
	s.SchedulerType = &v
	return s
}

type ModifyResourcePoolSchedulerTypeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourcePoolSchedulerTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolSchedulerTypeResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolSchedulerTypeResponseBody) SetRequestId(v string) *ModifyResourcePoolSchedulerTypeResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourcePoolSchedulerTypeResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyResourcePoolSchedulerTypeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyResourcePoolSchedulerTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourcePoolSchedulerTypeResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourcePoolSchedulerTypeResponse) SetHeaders(v map[string]*string) *ModifyResourcePoolSchedulerTypeResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourcePoolSchedulerTypeResponse) SetBody(v *ModifyResourcePoolSchedulerTypeResponseBody) *ModifyResourcePoolSchedulerTypeResponse {
	s.Body = v
	return s
}

type ModifyResourceQueueRequest struct {
	RegionId        *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceOwnerId *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Id              *string                             `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string                             `json:"Name,omitempty" xml:"Name,omitempty"`
	QualifiedName   *string                             `json:"QualifiedName,omitempty" xml:"QualifiedName,omitempty"`
	ClusterId       *string                             `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ParentQueueId   *int64                              `json:"ParentQueueId,omitempty" xml:"ParentQueueId,omitempty"`
	Leaf            *bool                               `json:"Leaf,omitempty" xml:"Leaf,omitempty"`
	ResourcePoolId  *int64                              `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
	Config          []*ModifyResourceQueueRequestConfig `json:"Config,omitempty" xml:"Config,omitempty" type:"Repeated"`
}

func (s ModifyResourceQueueRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceQueueRequest) GoString() string {
	return s.String()
}

func (s *ModifyResourceQueueRequest) SetRegionId(v string) *ModifyResourceQueueRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetResourceOwnerId(v int64) *ModifyResourceQueueRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetId(v string) *ModifyResourceQueueRequest {
	s.Id = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetName(v string) *ModifyResourceQueueRequest {
	s.Name = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetQualifiedName(v string) *ModifyResourceQueueRequest {
	s.QualifiedName = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetClusterId(v string) *ModifyResourceQueueRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetParentQueueId(v int64) *ModifyResourceQueueRequest {
	s.ParentQueueId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetLeaf(v bool) *ModifyResourceQueueRequest {
	s.Leaf = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetResourcePoolId(v int64) *ModifyResourceQueueRequest {
	s.ResourcePoolId = &v
	return s
}

func (s *ModifyResourceQueueRequest) SetConfig(v []*ModifyResourceQueueRequestConfig) *ModifyResourceQueueRequest {
	s.Config = v
	return s
}

type ModifyResourceQueueRequestConfig struct {
	ConfigValue *string `json:"ConfigValue,omitempty" xml:"ConfigValue,omitempty"`
	Note        *string `json:"Note,omitempty" xml:"Note,omitempty"`
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	ConfigKey   *string `json:"ConfigKey,omitempty" xml:"ConfigKey,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ModifyResourceQueueRequestConfig) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceQueueRequestConfig) GoString() string {
	return s.String()
}

func (s *ModifyResourceQueueRequestConfig) SetConfigValue(v string) *ModifyResourceQueueRequestConfig {
	s.ConfigValue = &v
	return s
}

func (s *ModifyResourceQueueRequestConfig) SetNote(v string) *ModifyResourceQueueRequestConfig {
	s.Note = &v
	return s
}

func (s *ModifyResourceQueueRequestConfig) SetCategory(v string) *ModifyResourceQueueRequestConfig {
	s.Category = &v
	return s
}

func (s *ModifyResourceQueueRequestConfig) SetConfigKey(v string) *ModifyResourceQueueRequestConfig {
	s.ConfigKey = &v
	return s
}

func (s *ModifyResourceQueueRequestConfig) SetId(v int64) *ModifyResourceQueueRequestConfig {
	s.Id = &v
	return s
}

type ModifyResourceQueueResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ModifyResourceQueueResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceQueueResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyResourceQueueResponseBody) SetRequestId(v string) *ModifyResourceQueueResponseBody {
	s.RequestId = &v
	return s
}

type ModifyResourceQueueResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyResourceQueueResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyResourceQueueResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyResourceQueueResponse) GoString() string {
	return s.String()
}

func (s *ModifyResourceQueueResponse) SetHeaders(v map[string]*string) *ModifyResourceQueueResponse {
	s.Headers = v
	return s
}

func (s *ModifyResourceQueueResponse) SetBody(v *ModifyResourceQueueResponseBody) *ModifyResourceQueueResponse {
	s.Body = v
	return s
}

type ModifyScalingConfigItemV2Request struct {
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId              *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId       *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ScalingGroupBizId     *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ConfigItemBizId       *string `json:"ConfigItemBizId,omitempty" xml:"ConfigItemBizId,omitempty"`
	ConfigItemType        *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	ConfigItemInformation *string `json:"ConfigItemInformation,omitempty" xml:"ConfigItemInformation,omitempty"`
}

func (s ModifyScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *ModifyScalingConfigItemV2Request) SetResourceOwnerId(v int64) *ModifyScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetRegionId(v string) *ModifyScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetResourceGroupId(v string) *ModifyScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetScalingGroupBizId(v string) *ModifyScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetConfigItemBizId(v string) *ModifyScalingConfigItemV2Request {
	s.ConfigItemBizId = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetConfigItemType(v string) *ModifyScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *ModifyScalingConfigItemV2Request) SetConfigItemInformation(v string) *ModifyScalingConfigItemV2Request {
	s.ConfigItemInformation = &v
	return s
}

type ModifyScalingConfigItemV2ResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScalingConfigItemV2ResponseBody) SetRequestId(v string) *ModifyScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyScalingConfigItemV2ResponseBody) SetData(v bool) *ModifyScalingConfigItemV2ResponseBody {
	s.Data = &v
	return s
}

type ModifyScalingConfigItemV2Response struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *ModifyScalingConfigItemV2Response) SetHeaders(v map[string]*string) *ModifyScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *ModifyScalingConfigItemV2Response) SetBody(v *ModifyScalingConfigItemV2ResponseBody) *ModifyScalingConfigItemV2Response {
	s.Body = v
	return s
}

type ModifyScalingGroupV2Request struct {
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description       *string `json:"Description,omitempty" xml:"Description,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
}

func (s ModifyScalingGroupV2Request) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingGroupV2Request) GoString() string {
	return s.String()
}

func (s *ModifyScalingGroupV2Request) SetResourceOwnerId(v int64) *ModifyScalingGroupV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetRegionId(v string) *ModifyScalingGroupV2Request {
	s.RegionId = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetResourceGroupId(v string) *ModifyScalingGroupV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetName(v string) *ModifyScalingGroupV2Request {
	s.Name = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetDescription(v string) *ModifyScalingGroupV2Request {
	s.Description = &v
	return s
}

func (s *ModifyScalingGroupV2Request) SetScalingGroupBizId(v string) *ModifyScalingGroupV2Request {
	s.ScalingGroupBizId = &v
	return s
}

type ModifyScalingGroupV2ResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ModifyScalingGroupV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingGroupV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScalingGroupV2ResponseBody) SetRequestId(v string) *ModifyScalingGroupV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyScalingGroupV2ResponseBody) SetData(v bool) *ModifyScalingGroupV2ResponseBody {
	s.Data = &v
	return s
}

type ModifyScalingGroupV2Response struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyScalingGroupV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyScalingGroupV2Response) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingGroupV2Response) GoString() string {
	return s.String()
}

func (s *ModifyScalingGroupV2Response) SetHeaders(v map[string]*string) *ModifyScalingGroupV2Response {
	s.Headers = v
	return s
}

func (s *ModifyScalingGroupV2Response) SetBody(v *ModifyScalingGroupV2ResponseBody) *ModifyScalingGroupV2Response {
	s.Body = v
	return s
}

type ModifyScalingRuleRequest struct {
	ResourceOwnerId      *int64                                       `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                      `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ScalingRuleId        *string                                      `json:"ScalingRuleId,omitempty" xml:"ScalingRuleId,omitempty"`
	ClusterId            *string                                      `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId          *string                                      `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	RuleName             *string                                      `json:"RuleName,omitempty" xml:"RuleName,omitempty"`
	AdjustmentType       *string                                      `json:"AdjustmentType,omitempty" xml:"AdjustmentType,omitempty"`
	AdjustmentValue      *int32                                       `json:"AdjustmentValue,omitempty" xml:"AdjustmentValue,omitempty"`
	Cooldown             *int32                                       `json:"Cooldown,omitempty" xml:"Cooldown,omitempty"`
	LaunchTime           *string                                      `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
	LaunchExpirationTime *int32                                       `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	RecurrenceType       *string                                      `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	RecurrenceValue      *string                                      `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
	RecurrenceEndTime    *string                                      `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	WithGrace            *bool                                        `json:"WithGrace,omitempty" xml:"WithGrace,omitempty"`
	TimeoutWithGrace     *int64                                       `json:"TimeoutWithGrace,omitempty" xml:"TimeoutWithGrace,omitempty"`
	SchedulerTrigger     []*ModifyScalingRuleRequestSchedulerTrigger  `json:"SchedulerTrigger,omitempty" xml:"SchedulerTrigger,omitempty" type:"Repeated"`
	CloudWatchTrigger    []*ModifyScalingRuleRequestCloudWatchTrigger `json:"CloudWatchTrigger,omitempty" xml:"CloudWatchTrigger,omitempty" type:"Repeated"`
}

func (s ModifyScalingRuleRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleRequest) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleRequest) SetResourceOwnerId(v int64) *ModifyScalingRuleRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetRegionId(v string) *ModifyScalingRuleRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetScalingRuleId(v string) *ModifyScalingRuleRequest {
	s.ScalingRuleId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetClusterId(v string) *ModifyScalingRuleRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetHostGroupId(v string) *ModifyScalingRuleRequest {
	s.HostGroupId = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetRuleName(v string) *ModifyScalingRuleRequest {
	s.RuleName = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetAdjustmentType(v string) *ModifyScalingRuleRequest {
	s.AdjustmentType = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetAdjustmentValue(v int32) *ModifyScalingRuleRequest {
	s.AdjustmentValue = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetCooldown(v int32) *ModifyScalingRuleRequest {
	s.Cooldown = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetLaunchTime(v string) *ModifyScalingRuleRequest {
	s.LaunchTime = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetLaunchExpirationTime(v int32) *ModifyScalingRuleRequest {
	s.LaunchExpirationTime = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetRecurrenceType(v string) *ModifyScalingRuleRequest {
	s.RecurrenceType = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetRecurrenceValue(v string) *ModifyScalingRuleRequest {
	s.RecurrenceValue = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetRecurrenceEndTime(v string) *ModifyScalingRuleRequest {
	s.RecurrenceEndTime = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetWithGrace(v bool) *ModifyScalingRuleRequest {
	s.WithGrace = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetTimeoutWithGrace(v int64) *ModifyScalingRuleRequest {
	s.TimeoutWithGrace = &v
	return s
}

func (s *ModifyScalingRuleRequest) SetSchedulerTrigger(v []*ModifyScalingRuleRequestSchedulerTrigger) *ModifyScalingRuleRequest {
	s.SchedulerTrigger = v
	return s
}

func (s *ModifyScalingRuleRequest) SetCloudWatchTrigger(v []*ModifyScalingRuleRequestCloudWatchTrigger) *ModifyScalingRuleRequest {
	s.CloudWatchTrigger = v
	return s
}

type ModifyScalingRuleRequestSchedulerTrigger struct {
	LaunchExpirationTime *int32  `json:"LaunchExpirationTime,omitempty" xml:"LaunchExpirationTime,omitempty"`
	RecurrenceValue      *string `json:"RecurrenceValue,omitempty" xml:"RecurrenceValue,omitempty"`
	RecurrenceType       *string `json:"RecurrenceType,omitempty" xml:"RecurrenceType,omitempty"`
	RecurrenceEndTime    *string `json:"RecurrenceEndTime,omitempty" xml:"RecurrenceEndTime,omitempty"`
	LaunchTime           *string `json:"LaunchTime,omitempty" xml:"LaunchTime,omitempty"`
}

func (s ModifyScalingRuleRequestSchedulerTrigger) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleRequestSchedulerTrigger) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleRequestSchedulerTrigger) SetLaunchExpirationTime(v int32) *ModifyScalingRuleRequestSchedulerTrigger {
	s.LaunchExpirationTime = &v
	return s
}

func (s *ModifyScalingRuleRequestSchedulerTrigger) SetRecurrenceValue(v string) *ModifyScalingRuleRequestSchedulerTrigger {
	s.RecurrenceValue = &v
	return s
}

func (s *ModifyScalingRuleRequestSchedulerTrigger) SetRecurrenceType(v string) *ModifyScalingRuleRequestSchedulerTrigger {
	s.RecurrenceType = &v
	return s
}

func (s *ModifyScalingRuleRequestSchedulerTrigger) SetRecurrenceEndTime(v string) *ModifyScalingRuleRequestSchedulerTrigger {
	s.RecurrenceEndTime = &v
	return s
}

func (s *ModifyScalingRuleRequestSchedulerTrigger) SetLaunchTime(v string) *ModifyScalingRuleRequestSchedulerTrigger {
	s.LaunchTime = &v
	return s
}

type ModifyScalingRuleRequestCloudWatchTrigger struct {
	ComparisonOperator *string `json:"ComparisonOperator,omitempty" xml:"ComparisonOperator,omitempty"`
	MetricName         *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	EvaluationCount    *string `json:"EvaluationCount,omitempty" xml:"EvaluationCount,omitempty"`
	Threshold          *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	Period             *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	Statistics         *string `json:"Statistics,omitempty" xml:"Statistics,omitempty"`
}

func (s ModifyScalingRuleRequestCloudWatchTrigger) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleRequestCloudWatchTrigger) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleRequestCloudWatchTrigger) SetComparisonOperator(v string) *ModifyScalingRuleRequestCloudWatchTrigger {
	s.ComparisonOperator = &v
	return s
}

func (s *ModifyScalingRuleRequestCloudWatchTrigger) SetMetricName(v string) *ModifyScalingRuleRequestCloudWatchTrigger {
	s.MetricName = &v
	return s
}

func (s *ModifyScalingRuleRequestCloudWatchTrigger) SetEvaluationCount(v string) *ModifyScalingRuleRequestCloudWatchTrigger {
	s.EvaluationCount = &v
	return s
}

func (s *ModifyScalingRuleRequestCloudWatchTrigger) SetThreshold(v string) *ModifyScalingRuleRequestCloudWatchTrigger {
	s.Threshold = &v
	return s
}

func (s *ModifyScalingRuleRequestCloudWatchTrigger) SetPeriod(v int32) *ModifyScalingRuleRequestCloudWatchTrigger {
	s.Period = &v
	return s
}

func (s *ModifyScalingRuleRequestCloudWatchTrigger) SetStatistics(v string) *ModifyScalingRuleRequestCloudWatchTrigger {
	s.Statistics = &v
	return s
}

type ModifyScalingRuleResponseBody struct {
	RequestId     *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ScalingRuleId *string `json:"ScalingRuleId,omitempty" xml:"ScalingRuleId,omitempty"`
}

func (s ModifyScalingRuleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleResponseBody) SetRequestId(v string) *ModifyScalingRuleResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyScalingRuleResponseBody) SetScalingRuleId(v string) *ModifyScalingRuleResponseBody {
	s.ScalingRuleId = &v
	return s
}

type ModifyScalingRuleResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyScalingRuleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyScalingRuleResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingRuleResponse) GoString() string {
	return s.String()
}

func (s *ModifyScalingRuleResponse) SetHeaders(v map[string]*string) *ModifyScalingRuleResponse {
	s.Headers = v
	return s
}

func (s *ModifyScalingRuleResponse) SetBody(v *ModifyScalingRuleResponseBody) *ModifyScalingRuleResponse {
	s.Body = v
	return s
}

type ModifyScalingTaskGroupRequest struct {
	ResourceOwnerId    *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId           *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId          *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId        *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	MinSize            *int32  `json:"MinSize,omitempty" xml:"MinSize,omitempty"`
	MaxSize            *int32  `json:"MaxSize,omitempty" xml:"MaxSize,omitempty"`
	DefaultCooldown    *int32  `json:"DefaultCooldown,omitempty" xml:"DefaultCooldown,omitempty"`
	ActiveRuleCategory *string `json:"ActiveRuleCategory,omitempty" xml:"ActiveRuleCategory,omitempty"`
	WithGrace          *bool   `json:"WithGrace,omitempty" xml:"WithGrace,omitempty"`
	TimeoutWithGrace   *int64  `json:"TimeoutWithGrace,omitempty" xml:"TimeoutWithGrace,omitempty"`
}

func (s ModifyScalingTaskGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingTaskGroupRequest) GoString() string {
	return s.String()
}

func (s *ModifyScalingTaskGroupRequest) SetResourceOwnerId(v int64) *ModifyScalingTaskGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetRegionId(v string) *ModifyScalingTaskGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetClusterId(v string) *ModifyScalingTaskGroupRequest {
	s.ClusterId = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetHostGroupId(v string) *ModifyScalingTaskGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetMinSize(v int32) *ModifyScalingTaskGroupRequest {
	s.MinSize = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetMaxSize(v int32) *ModifyScalingTaskGroupRequest {
	s.MaxSize = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetDefaultCooldown(v int32) *ModifyScalingTaskGroupRequest {
	s.DefaultCooldown = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetActiveRuleCategory(v string) *ModifyScalingTaskGroupRequest {
	s.ActiveRuleCategory = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetWithGrace(v bool) *ModifyScalingTaskGroupRequest {
	s.WithGrace = &v
	return s
}

func (s *ModifyScalingTaskGroupRequest) SetTimeoutWithGrace(v int64) *ModifyScalingTaskGroupRequest {
	s.TimeoutWithGrace = &v
	return s
}

type ModifyScalingTaskGroupResponseBody struct {
	HostGroupId *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
}

func (s ModifyScalingTaskGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingTaskGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyScalingTaskGroupResponseBody) SetHostGroupId(v string) *ModifyScalingTaskGroupResponseBody {
	s.HostGroupId = &v
	return s
}

type ModifyScalingTaskGroupResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ModifyScalingTaskGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyScalingTaskGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyScalingTaskGroupResponse) GoString() string {
	return s.String()
}

func (s *ModifyScalingTaskGroupResponse) SetHeaders(v map[string]*string) *ModifyScalingTaskGroupResponse {
	s.Headers = v
	return s
}

func (s *ModifyScalingTaskGroupResponse) SetBody(v *ModifyScalingTaskGroupResponseBody) *ModifyScalingTaskGroupResponse {
	s.Body = v
	return s
}

type QueryAlarmHistoryRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	StartTimeStamp  *int64  `json:"StartTimeStamp,omitempty" xml:"StartTimeStamp,omitempty"`
	EndTimeStamp    *int64  `json:"EndTimeStamp,omitempty" xml:"EndTimeStamp,omitempty"`
	Cursor          *string `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
	Size            *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s QueryAlarmHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmHistoryRequest) GoString() string {
	return s.String()
}

func (s *QueryAlarmHistoryRequest) SetResourceOwnerId(v int64) *QueryAlarmHistoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetRegionId(v string) *QueryAlarmHistoryRequest {
	s.RegionId = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetClusterId(v string) *QueryAlarmHistoryRequest {
	s.ClusterId = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetStartTimeStamp(v int64) *QueryAlarmHistoryRequest {
	s.StartTimeStamp = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetEndTimeStamp(v int64) *QueryAlarmHistoryRequest {
	s.EndTimeStamp = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetCursor(v string) *QueryAlarmHistoryRequest {
	s.Cursor = &v
	return s
}

func (s *QueryAlarmHistoryRequest) SetSize(v int32) *QueryAlarmHistoryRequest {
	s.Size = &v
	return s
}

type QueryAlarmHistoryResponseBody struct {
	AlarmHistoryList *QueryAlarmHistoryResponseBodyAlarmHistoryList `json:"AlarmHistoryList,omitempty" xml:"AlarmHistoryList,omitempty" type:"Struct"`
	RequestId        *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Total            *string                                        `json:"Total,omitempty" xml:"Total,omitempty"`
	Cursor           *string                                        `json:"Cursor,omitempty" xml:"Cursor,omitempty"`
}

func (s QueryAlarmHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAlarmHistoryResponseBody) SetAlarmHistoryList(v *QueryAlarmHistoryResponseBodyAlarmHistoryList) *QueryAlarmHistoryResponseBody {
	s.AlarmHistoryList = v
	return s
}

func (s *QueryAlarmHistoryResponseBody) SetRequestId(v string) *QueryAlarmHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAlarmHistoryResponseBody) SetTotal(v string) *QueryAlarmHistoryResponseBody {
	s.Total = &v
	return s
}

func (s *QueryAlarmHistoryResponseBody) SetCursor(v string) *QueryAlarmHistoryResponseBody {
	s.Cursor = &v
	return s
}

type QueryAlarmHistoryResponseBodyAlarmHistoryList struct {
	EmrAlarmHistory []*QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory `json:"EmrAlarmHistory,omitempty" xml:"EmrAlarmHistory,omitempty" type:"Repeated"`
}

func (s QueryAlarmHistoryResponseBodyAlarmHistoryList) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmHistoryResponseBodyAlarmHistoryList) GoString() string {
	return s.String()
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryList) SetEmrAlarmHistory(v []*QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) *QueryAlarmHistoryResponseBodyAlarmHistoryList {
	s.EmrAlarmHistory = v
	return s
}

type QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory struct {
	Status        *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	LastTime      *int64  `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	MetricName    *string `json:"MetricName,omitempty" xml:"MetricName,omitempty"`
	AlarmTime     *int64  `json:"AlarmTime,omitempty" xml:"AlarmTime,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	ContactGroups *string `json:"ContactGroups,omitempty" xml:"ContactGroups,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Role          *string `json:"Role,omitempty" xml:"Role,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) GoString() string {
	return s.String()
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetStatus(v int32) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.Status = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetLastTime(v int64) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.LastTime = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetMetricName(v string) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.MetricName = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetAlarmTime(v int64) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.AlarmTime = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetState(v string) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.State = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetContactGroups(v string) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.ContactGroups = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetInstanceId(v string) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.InstanceId = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetName(v string) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.Name = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetRole(v string) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.Role = &v
	return s
}

func (s *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory) SetClusterId(v string) *QueryAlarmHistoryResponseBodyAlarmHistoryListEmrAlarmHistory {
	s.ClusterId = &v
	return s
}

type QueryAlarmHistoryResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryAlarmHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryAlarmHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAlarmHistoryResponse) GoString() string {
	return s.String()
}

func (s *QueryAlarmHistoryResponse) SetHeaders(v map[string]*string) *QueryAlarmHistoryResponse {
	s.Headers = v
	return s
}

func (s *QueryAlarmHistoryResponse) SetBody(v *QueryAlarmHistoryResponseBody) *QueryAlarmHistoryResponse {
	s.Body = v
	return s
}

type QueryEntityRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Category        *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s QueryEntityRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEntityRequest) GoString() string {
	return s.String()
}

func (s *QueryEntityRequest) SetResourceOwnerId(v int64) *QueryEntityRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryEntityRequest) SetRegionId(v string) *QueryEntityRequest {
	s.RegionId = &v
	return s
}

func (s *QueryEntityRequest) SetId(v int64) *QueryEntityRequest {
	s.Id = &v
	return s
}

func (s *QueryEntityRequest) SetName(v string) *QueryEntityRequest {
	s.Name = &v
	return s
}

func (s *QueryEntityRequest) SetCategory(v string) *QueryEntityRequest {
	s.Category = &v
	return s
}

func (s *QueryEntityRequest) SetDescription(v string) *QueryEntityRequest {
	s.Description = &v
	return s
}

type QueryEntityResponseBody struct {
	TotalCount *int32                        `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                        `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                        `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *QueryEntityResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s QueryEntityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEntityResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEntityResponseBody) SetTotalCount(v int32) *QueryEntityResponseBody {
	s.TotalCount = &v
	return s
}

func (s *QueryEntityResponseBody) SetRequestId(v string) *QueryEntityResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEntityResponseBody) SetPageSize(v int32) *QueryEntityResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryEntityResponseBody) SetPageNumber(v int32) *QueryEntityResponseBody {
	s.PageNumber = &v
	return s
}

func (s *QueryEntityResponseBody) SetItems(v *QueryEntityResponseBodyItems) *QueryEntityResponseBody {
	s.Items = v
	return s
}

type QueryEntityResponseBodyItems struct {
	Item []*QueryEntityResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QueryEntityResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s QueryEntityResponseBodyItems) GoString() string {
	return s.String()
}

func (s *QueryEntityResponseBodyItems) SetItem(v []*QueryEntityResponseBodyItemsItem) *QueryEntityResponseBodyItems {
	s.Item = v
	return s
}

type QueryEntityResponseBodyItemsItem struct {
	EntityId   *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	EntityType *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	TagId      *int64  `json:"TagId,omitempty" xml:"TagId,omitempty"`
}

func (s QueryEntityResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QueryEntityResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *QueryEntityResponseBodyItemsItem) SetEntityId(v string) *QueryEntityResponseBodyItemsItem {
	s.EntityId = &v
	return s
}

func (s *QueryEntityResponseBodyItemsItem) SetEntityType(v string) *QueryEntityResponseBodyItemsItem {
	s.EntityType = &v
	return s
}

func (s *QueryEntityResponseBodyItemsItem) SetTagId(v int64) *QueryEntityResponseBodyItemsItem {
	s.TagId = &v
	return s
}

type QueryEntityResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEntityResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEntityResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEntityResponse) GoString() string {
	return s.String()
}

func (s *QueryEntityResponse) SetHeaders(v map[string]*string) *QueryEntityResponse {
	s.Headers = v
	return s
}

func (s *QueryEntityResponse) SetBody(v *QueryEntityResponseBody) *QueryEntityResponse {
	s.Body = v
	return s
}

type QueryTableDataRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Payload         *string `json:"Payload,omitempty" xml:"Payload,omitempty"`
}

func (s QueryTableDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTableDataRequest) GoString() string {
	return s.String()
}

func (s *QueryTableDataRequest) SetResourceOwnerId(v int64) *QueryTableDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTableDataRequest) SetRegionId(v string) *QueryTableDataRequest {
	s.RegionId = &v
	return s
}

func (s *QueryTableDataRequest) SetPayload(v string) *QueryTableDataRequest {
	s.Payload = &v
	return s
}

type QueryTableDataResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s QueryTableDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTableDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTableDataResponseBody) SetRequestId(v string) *QueryTableDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTableDataResponseBody) SetData(v string) *QueryTableDataResponseBody {
	s.Data = &v
	return s
}

type QueryTableDataResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTableDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTableDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTableDataResponse) GoString() string {
	return s.String()
}

func (s *QueryTableDataResponse) SetHeaders(v map[string]*string) *QueryTableDataResponse {
	s.Headers = v
	return s
}

func (s *QueryTableDataResponse) SetBody(v *QueryTableDataResponseBody) *QueryTableDataResponse {
	s.Body = v
	return s
}

type QueryTagRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	EntityType      *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	TagId           *int64  `json:"TagId,omitempty" xml:"TagId,omitempty"`
}

func (s QueryTagRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTagRequest) GoString() string {
	return s.String()
}

func (s *QueryTagRequest) SetResourceOwnerId(v int64) *QueryTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTagRequest) SetRegionId(v string) *QueryTagRequest {
	s.RegionId = &v
	return s
}

func (s *QueryTagRequest) SetEntityId(v string) *QueryTagRequest {
	s.EntityId = &v
	return s
}

func (s *QueryTagRequest) SetEntityType(v string) *QueryTagRequest {
	s.EntityType = &v
	return s
}

func (s *QueryTagRequest) SetTagId(v int64) *QueryTagRequest {
	s.TagId = &v
	return s
}

type QueryTagResponseBody struct {
	TotalCount *int32                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	RequestId  *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageSize   *int32                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber *int32                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	Items      *QueryTagResponseBodyItems `json:"Items,omitempty" xml:"Items,omitempty" type:"Struct"`
}

func (s QueryTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTagResponseBody) SetTotalCount(v int32) *QueryTagResponseBody {
	s.TotalCount = &v
	return s
}

func (s *QueryTagResponseBody) SetRequestId(v string) *QueryTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTagResponseBody) SetPageSize(v int32) *QueryTagResponseBody {
	s.PageSize = &v
	return s
}

func (s *QueryTagResponseBody) SetPageNumber(v int32) *QueryTagResponseBody {
	s.PageNumber = &v
	return s
}

func (s *QueryTagResponseBody) SetItems(v *QueryTagResponseBodyItems) *QueryTagResponseBody {
	s.Items = v
	return s
}

type QueryTagResponseBodyItems struct {
	Item []*QueryTagResponseBodyItemsItem `json:"Item,omitempty" xml:"Item,omitempty" type:"Repeated"`
}

func (s QueryTagResponseBodyItems) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResponseBodyItems) GoString() string {
	return s.String()
}

func (s *QueryTagResponseBodyItems) SetItem(v []*QueryTagResponseBodyItemsItem) *QueryTagResponseBodyItems {
	s.Item = v
	return s
}

type QueryTagResponseBodyItemsItem struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Category    *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s QueryTagResponseBodyItemsItem) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResponseBodyItemsItem) GoString() string {
	return s.String()
}

func (s *QueryTagResponseBodyItemsItem) SetDescription(v string) *QueryTagResponseBodyItemsItem {
	s.Description = &v
	return s
}

func (s *QueryTagResponseBodyItemsItem) SetCategory(v string) *QueryTagResponseBodyItemsItem {
	s.Category = &v
	return s
}

func (s *QueryTagResponseBodyItemsItem) SetName(v string) *QueryTagResponseBodyItemsItem {
	s.Name = &v
	return s
}

type QueryTagResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTagResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTagResponse) GoString() string {
	return s.String()
}

func (s *QueryTagResponse) SetHeaders(v map[string]*string) *QueryTagResponse {
	s.Headers = v
	return s
}

func (s *QueryTagResponse) SetBody(v *QueryTagResponseBody) *QueryTagResponse {
	s.Body = v
	return s
}

type QueryTrendDataRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Payload         *string `json:"Payload,omitempty" xml:"Payload,omitempty"`
}

func (s QueryTrendDataRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTrendDataRequest) GoString() string {
	return s.String()
}

func (s *QueryTrendDataRequest) SetResourceOwnerId(v int64) *QueryTrendDataRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTrendDataRequest) SetRegionId(v string) *QueryTrendDataRequest {
	s.RegionId = &v
	return s
}

func (s *QueryTrendDataRequest) SetPayload(v string) *QueryTrendDataRequest {
	s.Payload = &v
	return s
}

type QueryTrendDataResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s QueryTrendDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTrendDataResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTrendDataResponseBody) SetRequestId(v string) *QueryTrendDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTrendDataResponseBody) SetData(v string) *QueryTrendDataResponseBody {
	s.Data = &v
	return s
}

type QueryTrendDataResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTrendDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTrendDataResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTrendDataResponse) GoString() string {
	return s.String()
}

func (s *QueryTrendDataResponse) SetHeaders(v map[string]*string) *QueryTrendDataResponse {
	s.Headers = v
	return s
}

func (s *QueryTrendDataResponse) SetBody(v *QueryTrendDataResponseBody) *QueryTrendDataResponse {
	s.Body = v
	return s
}

type RefreshClusterResourcePoolRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	ResourcePoolId  *int64  `json:"ResourcePoolId,omitempty" xml:"ResourcePoolId,omitempty"`
}

func (s RefreshClusterResourcePoolRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshClusterResourcePoolRequest) GoString() string {
	return s.String()
}

func (s *RefreshClusterResourcePoolRequest) SetResourceOwnerId(v int64) *RefreshClusterResourcePoolRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RefreshClusterResourcePoolRequest) SetRegionId(v string) *RefreshClusterResourcePoolRequest {
	s.RegionId = &v
	return s
}

func (s *RefreshClusterResourcePoolRequest) SetClusterId(v string) *RefreshClusterResourcePoolRequest {
	s.ClusterId = &v
	return s
}

func (s *RefreshClusterResourcePoolRequest) SetResourcePoolId(v int64) *RefreshClusterResourcePoolRequest {
	s.ResourcePoolId = &v
	return s
}

type RefreshClusterResourcePoolResponseBody struct {
	WorkFlowInstanceId *string `json:"WorkFlowInstanceId,omitempty" xml:"WorkFlowInstanceId,omitempty"`
	RequestId          *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	OperationId        *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
}

func (s RefreshClusterResourcePoolResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshClusterResourcePoolResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshClusterResourcePoolResponseBody) SetWorkFlowInstanceId(v string) *RefreshClusterResourcePoolResponseBody {
	s.WorkFlowInstanceId = &v
	return s
}

func (s *RefreshClusterResourcePoolResponseBody) SetRequestId(v string) *RefreshClusterResourcePoolResponseBody {
	s.RequestId = &v
	return s
}

func (s *RefreshClusterResourcePoolResponseBody) SetOperationId(v string) *RefreshClusterResourcePoolResponseBody {
	s.OperationId = &v
	return s
}

type RefreshClusterResourcePoolResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RefreshClusterResourcePoolResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefreshClusterResourcePoolResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshClusterResourcePoolResponse) GoString() string {
	return s.String()
}

func (s *RefreshClusterResourcePoolResponse) SetHeaders(v map[string]*string) *RefreshClusterResourcePoolResponse {
	s.Headers = v
	return s
}

func (s *RefreshClusterResourcePoolResponse) SetBody(v *RefreshClusterResourcePoolResponseBody) *RefreshClusterResourcePoolResponse {
	s.Body = v
	return s
}

type ReleaseClusterRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ForceRelease    *bool   `json:"ForceRelease,omitempty" xml:"ForceRelease,omitempty"`
}

func (s ReleaseClusterRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterRequest) GoString() string {
	return s.String()
}

func (s *ReleaseClusterRequest) SetResourceOwnerId(v int64) *ReleaseClusterRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseClusterRequest) SetRegionId(v string) *ReleaseClusterRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseClusterRequest) SetId(v string) *ReleaseClusterRequest {
	s.Id = &v
	return s
}

func (s *ReleaseClusterRequest) SetForceRelease(v bool) *ReleaseClusterRequest {
	s.ForceRelease = &v
	return s
}

type ReleaseClusterResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseClusterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseClusterResponseBody) SetRequestId(v string) *ReleaseClusterResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseClusterResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseClusterResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseClusterResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterResponse) GoString() string {
	return s.String()
}

func (s *ReleaseClusterResponse) SetHeaders(v map[string]*string) *ReleaseClusterResponse {
	s.Headers = v
	return s
}

func (s *ReleaseClusterResponse) SetBody(v *ReleaseClusterResponseBody) *ReleaseClusterResponse {
	s.Body = v
	return s
}

type ReleaseClusterByTemplateTagForInternalRequest struct {
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TemplateTagSet  []*string `json:"TemplateTagSet,omitempty" xml:"TemplateTagSet,omitempty" type:"Repeated"`
}

func (s ReleaseClusterByTemplateTagForInternalRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterByTemplateTagForInternalRequest) GoString() string {
	return s.String()
}

func (s *ReleaseClusterByTemplateTagForInternalRequest) SetResourceOwnerId(v int64) *ReleaseClusterByTemplateTagForInternalRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseClusterByTemplateTagForInternalRequest) SetRegionId(v string) *ReleaseClusterByTemplateTagForInternalRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseClusterByTemplateTagForInternalRequest) SetTemplateTagSet(v []*string) *ReleaseClusterByTemplateTagForInternalRequest {
	s.TemplateTagSet = v
	return s
}

type ReleaseClusterByTemplateTagForInternalResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseClusterByTemplateTagForInternalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterByTemplateTagForInternalResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseClusterByTemplateTagForInternalResponseBody) SetRequestId(v string) *ReleaseClusterByTemplateTagForInternalResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseClusterByTemplateTagForInternalResponse struct {
	Headers map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseClusterByTemplateTagForInternalResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseClusterByTemplateTagForInternalResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterByTemplateTagForInternalResponse) GoString() string {
	return s.String()
}

func (s *ReleaseClusterByTemplateTagForInternalResponse) SetHeaders(v map[string]*string) *ReleaseClusterByTemplateTagForInternalResponse {
	s.Headers = v
	return s
}

func (s *ReleaseClusterByTemplateTagForInternalResponse) SetBody(v *ReleaseClusterByTemplateTagForInternalResponseBody) *ReleaseClusterByTemplateTagForInternalResponse {
	s.Body = v
	return s
}

type ReleaseClusterHostGroupRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceIdList  *string `json:"InstanceIdList,omitempty" xml:"InstanceIdList,omitempty"`
}

func (s ReleaseClusterHostGroupRequest) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterHostGroupRequest) GoString() string {
	return s.String()
}

func (s *ReleaseClusterHostGroupRequest) SetResourceOwnerId(v int64) *ReleaseClusterHostGroupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetRegionId(v string) *ReleaseClusterHostGroupRequest {
	s.RegionId = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetClusterId(v string) *ReleaseClusterHostGroupRequest {
	s.ClusterId = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetHostGroupId(v string) *ReleaseClusterHostGroupRequest {
	s.HostGroupId = &v
	return s
}

func (s *ReleaseClusterHostGroupRequest) SetInstanceIdList(v string) *ReleaseClusterHostGroupRequest {
	s.InstanceIdList = &v
	return s
}

type ReleaseClusterHostGroupResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ReleaseClusterHostGroupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterHostGroupResponseBody) GoString() string {
	return s.String()
}

func (s *ReleaseClusterHostGroupResponseBody) SetRequestId(v string) *ReleaseClusterHostGroupResponseBody {
	s.RequestId = &v
	return s
}

type ReleaseClusterHostGroupResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReleaseClusterHostGroupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReleaseClusterHostGroupResponse) String() string {
	return tea.Prettify(s)
}

func (s ReleaseClusterHostGroupResponse) GoString() string {
	return s.String()
}

func (s *ReleaseClusterHostGroupResponse) SetHeaders(v map[string]*string) *ReleaseClusterHostGroupResponse {
	s.Headers = v
	return s
}

func (s *ReleaseClusterHostGroupResponse) SetBody(v *ReleaseClusterHostGroupResponseBody) *ReleaseClusterHostGroupResponse {
	s.Body = v
	return s
}

type RemoveScalingConfigItemV2Request struct {
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ConfigItemType    *string `json:"ConfigItemType,omitempty" xml:"ConfigItemType,omitempty"`
	ConfigItemBizId   *string `json:"ConfigItemBizId,omitempty" xml:"ConfigItemBizId,omitempty"`
}

func (s RemoveScalingConfigItemV2Request) String() string {
	return tea.Prettify(s)
}

func (s RemoveScalingConfigItemV2Request) GoString() string {
	return s.String()
}

func (s *RemoveScalingConfigItemV2Request) SetResourceOwnerId(v int64) *RemoveScalingConfigItemV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetRegionId(v string) *RemoveScalingConfigItemV2Request {
	s.RegionId = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetResourceGroupId(v string) *RemoveScalingConfigItemV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetScalingGroupBizId(v string) *RemoveScalingConfigItemV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetConfigItemType(v string) *RemoveScalingConfigItemV2Request {
	s.ConfigItemType = &v
	return s
}

func (s *RemoveScalingConfigItemV2Request) SetConfigItemBizId(v string) *RemoveScalingConfigItemV2Request {
	s.ConfigItemBizId = &v
	return s
}

type RemoveScalingConfigItemV2ResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s RemoveScalingConfigItemV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RemoveScalingConfigItemV2ResponseBody) GoString() string {
	return s.String()
}

func (s *RemoveScalingConfigItemV2ResponseBody) SetRequestId(v string) *RemoveScalingConfigItemV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *RemoveScalingConfigItemV2ResponseBody) SetData(v bool) *RemoveScalingConfigItemV2ResponseBody {
	s.Data = &v
	return s
}

type RemoveScalingConfigItemV2Response struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RemoveScalingConfigItemV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RemoveScalingConfigItemV2Response) String() string {
	return tea.Prettify(s)
}

func (s RemoveScalingConfigItemV2Response) GoString() string {
	return s.String()
}

func (s *RemoveScalingConfigItemV2Response) SetHeaders(v map[string]*string) *RemoveScalingConfigItemV2Response {
	s.Headers = v
	return s
}

func (s *RemoveScalingConfigItemV2Response) SetBody(v *RemoveScalingConfigItemV2ResponseBody) *RemoveScalingConfigItemV2Response {
	s.Body = v
	return s
}

type RerunFlowRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	FlowInstanceId *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
	ReRunFail      *bool   `json:"ReRunFail,omitempty" xml:"ReRunFail,omitempty"`
}

func (s RerunFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s RerunFlowRequest) GoString() string {
	return s.String()
}

func (s *RerunFlowRequest) SetRegionId(v string) *RerunFlowRequest {
	s.RegionId = &v
	return s
}

func (s *RerunFlowRequest) SetProjectId(v string) *RerunFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *RerunFlowRequest) SetFlowInstanceId(v string) *RerunFlowRequest {
	s.FlowInstanceId = &v
	return s
}

func (s *RerunFlowRequest) SetReRunFail(v bool) *RerunFlowRequest {
	s.ReRunFail = &v
	return s
}

type RerunFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s RerunFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RerunFlowResponseBody) GoString() string {
	return s.String()
}

func (s *RerunFlowResponseBody) SetRequestId(v string) *RerunFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *RerunFlowResponseBody) SetData(v bool) *RerunFlowResponseBody {
	s.Data = &v
	return s
}

type RerunFlowResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RerunFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RerunFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s RerunFlowResponse) GoString() string {
	return s.String()
}

func (s *RerunFlowResponse) SetHeaders(v map[string]*string) *RerunFlowResponse {
	s.Headers = v
	return s
}

func (s *RerunFlowResponse) SetBody(v *RerunFlowResponseBody) *RerunFlowResponse {
	s.Body = v
	return s
}

type ResizeClusterV2Request struct {
	RegionId          *string                                    `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId         *string                                    `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	AutoPayOrder      *bool                                      `json:"AutoPayOrder,omitempty" xml:"AutoPayOrder,omitempty"`
	VswitchId         *string                                    `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	IsOpenPublicIp    *bool                                      `json:"IsOpenPublicIp,omitempty" xml:"IsOpenPublicIp,omitempty"`
	HostComponentInfo []*ResizeClusterV2RequestHostComponentInfo `json:"HostComponentInfo,omitempty" xml:"HostComponentInfo,omitempty" type:"Repeated"`
	HostGroup         []*ResizeClusterV2RequestHostGroup         `json:"HostGroup,omitempty" xml:"HostGroup,omitempty" type:"Repeated"`
	PromotionInfo     []*ResizeClusterV2RequestPromotionInfo     `json:"PromotionInfo,omitempty" xml:"PromotionInfo,omitempty" type:"Repeated"`
}

func (s ResizeClusterV2Request) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2Request) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2Request) SetRegionId(v string) *ResizeClusterV2Request {
	s.RegionId = &v
	return s
}

func (s *ResizeClusterV2Request) SetClusterId(v string) *ResizeClusterV2Request {
	s.ClusterId = &v
	return s
}

func (s *ResizeClusterV2Request) SetAutoPayOrder(v bool) *ResizeClusterV2Request {
	s.AutoPayOrder = &v
	return s
}

func (s *ResizeClusterV2Request) SetVswitchId(v string) *ResizeClusterV2Request {
	s.VswitchId = &v
	return s
}

func (s *ResizeClusterV2Request) SetIsOpenPublicIp(v bool) *ResizeClusterV2Request {
	s.IsOpenPublicIp = &v
	return s
}

func (s *ResizeClusterV2Request) SetHostComponentInfo(v []*ResizeClusterV2RequestHostComponentInfo) *ResizeClusterV2Request {
	s.HostComponentInfo = v
	return s
}

func (s *ResizeClusterV2Request) SetHostGroup(v []*ResizeClusterV2RequestHostGroup) *ResizeClusterV2Request {
	s.HostGroup = v
	return s
}

func (s *ResizeClusterV2Request) SetPromotionInfo(v []*ResizeClusterV2RequestPromotionInfo) *ResizeClusterV2Request {
	s.PromotionInfo = v
	return s
}

type ResizeClusterV2RequestHostComponentInfo struct {
	ComponentNameList []*string `json:"ComponentNameList,omitempty" xml:"ComponentNameList,omitempty" type:"Repeated"`
	HostName          *string   `json:"HostName,omitempty" xml:"HostName,omitempty"`
	ServiceName       *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
}

func (s ResizeClusterV2RequestHostComponentInfo) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2RequestHostComponentInfo) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2RequestHostComponentInfo) SetComponentNameList(v []*string) *ResizeClusterV2RequestHostComponentInfo {
	s.ComponentNameList = v
	return s
}

func (s *ResizeClusterV2RequestHostComponentInfo) SetHostName(v string) *ResizeClusterV2RequestHostComponentInfo {
	s.HostName = &v
	return s
}

func (s *ResizeClusterV2RequestHostComponentInfo) SetServiceName(v string) *ResizeClusterV2RequestHostComponentInfo {
	s.ServiceName = &v
	return s
}

type ResizeClusterV2RequestHostGroup struct {
	SysDiskCapacity *int32  `json:"SysDiskCapacity,omitempty" xml:"SysDiskCapacity,omitempty"`
	HostGroupType   *string `json:"HostGroupType,omitempty" xml:"HostGroupType,omitempty"`
	Comment         *string `json:"Comment,omitempty" xml:"Comment,omitempty"`
	VswitchId       *int32  `json:"VswitchId,omitempty" xml:"VswitchId,omitempty"`
	SysDiskType     *string `json:"SysDiskType,omitempty" xml:"SysDiskType,omitempty"`
	AutoRenew       *bool   `json:"AutoRenew,omitempty" xml:"AutoRenew,omitempty"`
	ChargeType      *string `json:"ChargeType,omitempty" xml:"ChargeType,omitempty"`
	DiskType        *string `json:"DiskType,omitempty" xml:"DiskType,omitempty"`
	HostGroupId     *string `json:"HostGroupId,omitempty" xml:"HostGroupId,omitempty"`
	InstanceType    *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	HostKeyPairName *string `json:"HostKeyPairName,omitempty" xml:"HostKeyPairName,omitempty"`
	DiskCount       *int32  `json:"DiskCount,omitempty" xml:"DiskCount,omitempty"`
	CreateType      *string `json:"CreateType,omitempty" xml:"CreateType,omitempty"`
	Period          *int32  `json:"Period,omitempty" xml:"Period,omitempty"`
	HostPassword    *string `json:"HostPassword,omitempty" xml:"HostPassword,omitempty"`
	DiskCapacity    *int32  `json:"DiskCapacity,omitempty" xml:"DiskCapacity,omitempty"`
	NodeCount       *int32  `json:"NodeCount,omitempty" xml:"NodeCount,omitempty"`
	HostGroupName   *string `json:"HostGroupName,omitempty" xml:"HostGroupName,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ResizeClusterV2RequestHostGroup) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2RequestHostGroup) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2RequestHostGroup) SetSysDiskCapacity(v int32) *ResizeClusterV2RequestHostGroup {
	s.SysDiskCapacity = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostGroupType(v string) *ResizeClusterV2RequestHostGroup {
	s.HostGroupType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetComment(v string) *ResizeClusterV2RequestHostGroup {
	s.Comment = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetVswitchId(v int32) *ResizeClusterV2RequestHostGroup {
	s.VswitchId = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetSysDiskType(v string) *ResizeClusterV2RequestHostGroup {
	s.SysDiskType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetAutoRenew(v bool) *ResizeClusterV2RequestHostGroup {
	s.AutoRenew = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetChargeType(v string) *ResizeClusterV2RequestHostGroup {
	s.ChargeType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetDiskType(v string) *ResizeClusterV2RequestHostGroup {
	s.DiskType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostGroupId(v string) *ResizeClusterV2RequestHostGroup {
	s.HostGroupId = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetInstanceType(v string) *ResizeClusterV2RequestHostGroup {
	s.InstanceType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostKeyPairName(v string) *ResizeClusterV2RequestHostGroup {
	s.HostKeyPairName = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetDiskCount(v int32) *ResizeClusterV2RequestHostGroup {
	s.DiskCount = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetCreateType(v string) *ResizeClusterV2RequestHostGroup {
	s.CreateType = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetPeriod(v int32) *ResizeClusterV2RequestHostGroup {
	s.Period = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostPassword(v string) *ResizeClusterV2RequestHostGroup {
	s.HostPassword = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetDiskCapacity(v int32) *ResizeClusterV2RequestHostGroup {
	s.DiskCapacity = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetNodeCount(v int32) *ResizeClusterV2RequestHostGroup {
	s.NodeCount = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetHostGroupName(v string) *ResizeClusterV2RequestHostGroup {
	s.HostGroupName = &v
	return s
}

func (s *ResizeClusterV2RequestHostGroup) SetClusterId(v string) *ResizeClusterV2RequestHostGroup {
	s.ClusterId = &v
	return s
}

type ResizeClusterV2RequestPromotionInfo struct {
	PromotionOptionNo   *string `json:"PromotionOptionNo,omitempty" xml:"PromotionOptionNo,omitempty"`
	PromotionOptionCode *string `json:"PromotionOptionCode,omitempty" xml:"PromotionOptionCode,omitempty"`
	ProductCode         *string `json:"ProductCode,omitempty" xml:"ProductCode,omitempty"`
}

func (s ResizeClusterV2RequestPromotionInfo) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2RequestPromotionInfo) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2RequestPromotionInfo) SetPromotionOptionNo(v string) *ResizeClusterV2RequestPromotionInfo {
	s.PromotionOptionNo = &v
	return s
}

func (s *ResizeClusterV2RequestPromotionInfo) SetPromotionOptionCode(v string) *ResizeClusterV2RequestPromotionInfo {
	s.PromotionOptionCode = &v
	return s
}

func (s *ResizeClusterV2RequestPromotionInfo) SetProductCode(v string) *ResizeClusterV2RequestPromotionInfo {
	s.ProductCode = &v
	return s
}

type ResizeClusterV2ResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ClusterId *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
}

func (s ResizeClusterV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2ResponseBody) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2ResponseBody) SetRequestId(v string) *ResizeClusterV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResizeClusterV2ResponseBody) SetClusterId(v string) *ResizeClusterV2ResponseBody {
	s.ClusterId = &v
	return s
}

type ResizeClusterV2Response struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResizeClusterV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResizeClusterV2Response) String() string {
	return tea.Prettify(s)
}

func (s ResizeClusterV2Response) GoString() string {
	return s.String()
}

func (s *ResizeClusterV2Response) SetHeaders(v map[string]*string) *ResizeClusterV2Response {
	s.Headers = v
	return s
}

func (s *ResizeClusterV2Response) SetBody(v *ResizeClusterV2ResponseBody) *ResizeClusterV2Response {
	s.Body = v
	return s
}

type RestoreBackupRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	BackupPlanId    *string `json:"BackupPlanId,omitempty" xml:"BackupPlanId,omitempty"`
	BackupId        *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
}

func (s RestoreBackupRequest) String() string {
	return tea.Prettify(s)
}

func (s RestoreBackupRequest) GoString() string {
	return s.String()
}

func (s *RestoreBackupRequest) SetResourceOwnerId(v int64) *RestoreBackupRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RestoreBackupRequest) SetRegionId(v string) *RestoreBackupRequest {
	s.RegionId = &v
	return s
}

func (s *RestoreBackupRequest) SetBackupPlanId(v string) *RestoreBackupRequest {
	s.BackupPlanId = &v
	return s
}

func (s *RestoreBackupRequest) SetBackupId(v string) *RestoreBackupRequest {
	s.BackupId = &v
	return s
}

type RestoreBackupResponseBody struct {
	TriggerType      *string `json:"TriggerType,omitempty" xml:"TriggerType,omitempty"`
	EndTime          *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	RequestId        *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	GmtModified      *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	StartTime        *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	TaskStatus       *string `json:"TaskStatus,omitempty" xml:"TaskStatus,omitempty"`
	TaskDetail       *string `json:"TaskDetail,omitempty" xml:"TaskDetail,omitempty"`
	TriggerUser      *string `json:"TriggerUser,omitempty" xml:"TriggerUser,omitempty"`
	GmtCreate        *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	TaskProcess      *int32  `json:"TaskProcess,omitempty" xml:"TaskProcess,omitempty"`
	ClusterBizId     *string `json:"ClusterBizId,omitempty" xml:"ClusterBizId,omitempty"`
	TaskType         *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	BizId            *string `json:"BizId,omitempty" xml:"BizId,omitempty"`
	DataSourceId     *int64  `json:"DataSourceId,omitempty" xml:"DataSourceId,omitempty"`
	HostName         *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	EcmTaskId        *int64  `json:"EcmTaskId,omitempty" xml:"EcmTaskId,omitempty"`
	TaskResultDetail *string `json:"TaskResultDetail,omitempty" xml:"TaskResultDetail,omitempty"`
}

func (s RestoreBackupResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestoreBackupResponseBody) GoString() string {
	return s.String()
}

func (s *RestoreBackupResponseBody) SetTriggerType(v string) *RestoreBackupResponseBody {
	s.TriggerType = &v
	return s
}

func (s *RestoreBackupResponseBody) SetEndTime(v int64) *RestoreBackupResponseBody {
	s.EndTime = &v
	return s
}

func (s *RestoreBackupResponseBody) SetRequestId(v string) *RestoreBackupResponseBody {
	s.RequestId = &v
	return s
}

func (s *RestoreBackupResponseBody) SetGmtModified(v int64) *RestoreBackupResponseBody {
	s.GmtModified = &v
	return s
}

func (s *RestoreBackupResponseBody) SetStartTime(v int64) *RestoreBackupResponseBody {
	s.StartTime = &v
	return s
}

func (s *RestoreBackupResponseBody) SetTaskStatus(v string) *RestoreBackupResponseBody {
	s.TaskStatus = &v
	return s
}

func (s *RestoreBackupResponseBody) SetTaskDetail(v string) *RestoreBackupResponseBody {
	s.TaskDetail = &v
	return s
}

func (s *RestoreBackupResponseBody) SetTriggerUser(v string) *RestoreBackupResponseBody {
	s.TriggerUser = &v
	return s
}

func (s *RestoreBackupResponseBody) SetGmtCreate(v int64) *RestoreBackupResponseBody {
	s.GmtCreate = &v
	return s
}

func (s *RestoreBackupResponseBody) SetTaskProcess(v int32) *RestoreBackupResponseBody {
	s.TaskProcess = &v
	return s
}

func (s *RestoreBackupResponseBody) SetClusterBizId(v string) *RestoreBackupResponseBody {
	s.ClusterBizId = &v
	return s
}

func (s *RestoreBackupResponseBody) SetTaskType(v string) *RestoreBackupResponseBody {
	s.TaskType = &v
	return s
}

func (s *RestoreBackupResponseBody) SetBizId(v string) *RestoreBackupResponseBody {
	s.BizId = &v
	return s
}

func (s *RestoreBackupResponseBody) SetDataSourceId(v int64) *RestoreBackupResponseBody {
	s.DataSourceId = &v
	return s
}

func (s *RestoreBackupResponseBody) SetHostName(v string) *RestoreBackupResponseBody {
	s.HostName = &v
	return s
}

func (s *RestoreBackupResponseBody) SetEcmTaskId(v int64) *RestoreBackupResponseBody {
	s.EcmTaskId = &v
	return s
}

func (s *RestoreBackupResponseBody) SetTaskResultDetail(v string) *RestoreBackupResponseBody {
	s.TaskResultDetail = &v
	return s
}

type RestoreBackupResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestoreBackupResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestoreBackupResponse) String() string {
	return tea.Prettify(s)
}

func (s RestoreBackupResponse) GoString() string {
	return s.String()
}

func (s *RestoreBackupResponse) SetHeaders(v map[string]*string) *RestoreBackupResponse {
	s.Headers = v
	return s
}

func (s *RestoreBackupResponse) SetBody(v *RestoreBackupResponseBody) *RestoreBackupResponse {
	s.Body = v
	return s
}

type RestoreFlowEntitySnapshotRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OperatorId      *string `json:"OperatorId,omitempty" xml:"OperatorId,omitempty"`
	EntityType      *string `json:"EntityType,omitempty" xml:"EntityType,omitempty"`
	EntityId        *string `json:"EntityId,omitempty" xml:"EntityId,omitempty"`
	Revision        *string `json:"Revision,omitempty" xml:"Revision,omitempty"`
}

func (s RestoreFlowEntitySnapshotRequest) String() string {
	return tea.Prettify(s)
}

func (s RestoreFlowEntitySnapshotRequest) GoString() string {
	return s.String()
}

func (s *RestoreFlowEntitySnapshotRequest) SetResourceOwnerId(v int64) *RestoreFlowEntitySnapshotRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RestoreFlowEntitySnapshotRequest) SetRegionId(v string) *RestoreFlowEntitySnapshotRequest {
	s.RegionId = &v
	return s
}

func (s *RestoreFlowEntitySnapshotRequest) SetOperatorId(v string) *RestoreFlowEntitySnapshotRequest {
	s.OperatorId = &v
	return s
}

func (s *RestoreFlowEntitySnapshotRequest) SetEntityType(v string) *RestoreFlowEntitySnapshotRequest {
	s.EntityType = &v
	return s
}

func (s *RestoreFlowEntitySnapshotRequest) SetEntityId(v string) *RestoreFlowEntitySnapshotRequest {
	s.EntityId = &v
	return s
}

func (s *RestoreFlowEntitySnapshotRequest) SetRevision(v string) *RestoreFlowEntitySnapshotRequest {
	s.Revision = &v
	return s
}

type RestoreFlowEntitySnapshotResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s RestoreFlowEntitySnapshotResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RestoreFlowEntitySnapshotResponseBody) GoString() string {
	return s.String()
}

func (s *RestoreFlowEntitySnapshotResponseBody) SetRequestId(v string) *RestoreFlowEntitySnapshotResponseBody {
	s.RequestId = &v
	return s
}

func (s *RestoreFlowEntitySnapshotResponseBody) SetData(v bool) *RestoreFlowEntitySnapshotResponseBody {
	s.Data = &v
	return s
}

type RestoreFlowEntitySnapshotResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RestoreFlowEntitySnapshotResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RestoreFlowEntitySnapshotResponse) String() string {
	return tea.Prettify(s)
}

func (s RestoreFlowEntitySnapshotResponse) GoString() string {
	return s.String()
}

func (s *RestoreFlowEntitySnapshotResponse) SetHeaders(v map[string]*string) *RestoreFlowEntitySnapshotResponse {
	s.Headers = v
	return s
}

func (s *RestoreFlowEntitySnapshotResponse) SetBody(v *RestoreFlowEntitySnapshotResponseBody) *RestoreFlowEntitySnapshotResponse {
	s.Body = v
	return s
}

type ResumeExecutionPlanSchedulerRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ResumeExecutionPlanSchedulerRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeExecutionPlanSchedulerRequest) GoString() string {
	return s.String()
}

func (s *ResumeExecutionPlanSchedulerRequest) SetResourceOwnerId(v int64) *ResumeExecutionPlanSchedulerRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ResumeExecutionPlanSchedulerRequest) SetRegionId(v string) *ResumeExecutionPlanSchedulerRequest {
	s.RegionId = &v
	return s
}

func (s *ResumeExecutionPlanSchedulerRequest) SetId(v string) *ResumeExecutionPlanSchedulerRequest {
	s.Id = &v
	return s
}

type ResumeExecutionPlanSchedulerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ResumeExecutionPlanSchedulerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeExecutionPlanSchedulerResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeExecutionPlanSchedulerResponseBody) SetRequestId(v string) *ResumeExecutionPlanSchedulerResponseBody {
	s.RequestId = &v
	return s
}

type ResumeExecutionPlanSchedulerResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResumeExecutionPlanSchedulerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResumeExecutionPlanSchedulerResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeExecutionPlanSchedulerResponse) GoString() string {
	return s.String()
}

func (s *ResumeExecutionPlanSchedulerResponse) SetHeaders(v map[string]*string) *ResumeExecutionPlanSchedulerResponse {
	s.Headers = v
	return s
}

func (s *ResumeExecutionPlanSchedulerResponse) SetBody(v *ResumeExecutionPlanSchedulerResponseBody) *ResumeExecutionPlanSchedulerResponse {
	s.Body = v
	return s
}

type ResumeFlowRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	FlowInstanceId *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
}

func (s ResumeFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s ResumeFlowRequest) GoString() string {
	return s.String()
}

func (s *ResumeFlowRequest) SetRegionId(v string) *ResumeFlowRequest {
	s.RegionId = &v
	return s
}

func (s *ResumeFlowRequest) SetProjectId(v string) *ResumeFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *ResumeFlowRequest) SetFlowInstanceId(v string) *ResumeFlowRequest {
	s.FlowInstanceId = &v
	return s
}

type ResumeFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s ResumeFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResumeFlowResponseBody) GoString() string {
	return s.String()
}

func (s *ResumeFlowResponseBody) SetRequestId(v string) *ResumeFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResumeFlowResponseBody) SetData(v bool) *ResumeFlowResponseBody {
	s.Data = &v
	return s
}

type ResumeFlowResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ResumeFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ResumeFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s ResumeFlowResponse) GoString() string {
	return s.String()
}

func (s *ResumeFlowResponse) SetHeaders(v map[string]*string) *ResumeFlowResponse {
	s.Headers = v
	return s
}

func (s *ResumeFlowResponse) SetBody(v *ResumeFlowResponseBody) *ResumeFlowResponse {
	s.Body = v
	return s
}

type RetryOperationRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	OperationId     *string `json:"OperationId,omitempty" xml:"OperationId,omitempty"`
}

func (s RetryOperationRequest) String() string {
	return tea.Prettify(s)
}

func (s RetryOperationRequest) GoString() string {
	return s.String()
}

func (s *RetryOperationRequest) SetResourceOwnerId(v int64) *RetryOperationRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RetryOperationRequest) SetRegionId(v string) *RetryOperationRequest {
	s.RegionId = &v
	return s
}

func (s *RetryOperationRequest) SetOperationId(v string) *RetryOperationRequest {
	s.OperationId = &v
	return s
}

type RetryOperationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ErrMsg    *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
	ErrCode   *string `json:"ErrCode,omitempty" xml:"ErrCode,omitempty"`
}

func (s RetryOperationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RetryOperationResponseBody) GoString() string {
	return s.String()
}

func (s *RetryOperationResponseBody) SetRequestId(v string) *RetryOperationResponseBody {
	s.RequestId = &v
	return s
}

func (s *RetryOperationResponseBody) SetErrMsg(v string) *RetryOperationResponseBody {
	s.ErrMsg = &v
	return s
}

func (s *RetryOperationResponseBody) SetSuccess(v string) *RetryOperationResponseBody {
	s.Success = &v
	return s
}

func (s *RetryOperationResponseBody) SetErrCode(v string) *RetryOperationResponseBody {
	s.ErrCode = &v
	return s
}

type RetryOperationResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RetryOperationResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RetryOperationResponse) String() string {
	return tea.Prettify(s)
}

func (s RetryOperationResponse) GoString() string {
	return s.String()
}

func (s *RetryOperationResponse) SetHeaders(v map[string]*string) *RetryOperationResponse {
	s.Headers = v
	return s
}

func (s *RetryOperationResponse) SetBody(v *RetryOperationResponseBody) *RetryOperationResponse {
	s.Body = v
	return s
}

type RunClusterServiceActionRequest struct {
	ResourceOwnerId             *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId                    *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId                   *string   `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostIdList                  *string   `json:"HostIdList,omitempty" xml:"HostIdList,omitempty"`
	ServiceName                 *string   `json:"ServiceName,omitempty" xml:"ServiceName,omitempty"`
	ServiceActionName           *string   `json:"ServiceActionName,omitempty" xml:"ServiceActionName,omitempty"`
	CustomCommand               *string   `json:"CustomCommand,omitempty" xml:"CustomCommand,omitempty"`
	ComponentNameList           *string   `json:"ComponentNameList,omitempty" xml:"ComponentNameList,omitempty"`
	Comment                     *string   `json:"Comment,omitempty" xml:"Comment,omitempty"`
	IsRolling                   *bool     `json:"IsRolling,omitempty" xml:"IsRolling,omitempty"`
	ExecuteStrategy             *string   `json:"ExecuteStrategy,omitempty" xml:"ExecuteStrategy,omitempty"`
	CustomParams                *string   `json:"CustomParams,omitempty" xml:"CustomParams,omitempty"`
	Interval                    *int64    `json:"Interval,omitempty" xml:"Interval,omitempty"`
	NodeCountPerBatch           *int32    `json:"NodeCountPerBatch,omitempty" xml:"NodeCountPerBatch,omitempty"`
	TotlerateFailCount          *int32    `json:"TotlerateFailCount,omitempty" xml:"TotlerateFailCount,omitempty"`
	OnlyRestartStaleConfigNodes *bool     `json:"OnlyRestartStaleConfigNodes,omitempty" xml:"OnlyRestartStaleConfigNodes,omitempty"`
	TurnOnMaintenanceMode       *bool     `json:"TurnOnMaintenanceMode,omitempty" xml:"TurnOnMaintenanceMode,omitempty"`
	HostGroupIdList             []*string `json:"HostGroupIdList,omitempty" xml:"HostGroupIdList,omitempty" type:"Repeated"`
}

func (s RunClusterServiceActionRequest) String() string {
	return tea.Prettify(s)
}

func (s RunClusterServiceActionRequest) GoString() string {
	return s.String()
}

func (s *RunClusterServiceActionRequest) SetResourceOwnerId(v int64) *RunClusterServiceActionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetRegionId(v string) *RunClusterServiceActionRequest {
	s.RegionId = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetClusterId(v string) *RunClusterServiceActionRequest {
	s.ClusterId = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetHostIdList(v string) *RunClusterServiceActionRequest {
	s.HostIdList = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetServiceName(v string) *RunClusterServiceActionRequest {
	s.ServiceName = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetServiceActionName(v string) *RunClusterServiceActionRequest {
	s.ServiceActionName = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetCustomCommand(v string) *RunClusterServiceActionRequest {
	s.CustomCommand = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetComponentNameList(v string) *RunClusterServiceActionRequest {
	s.ComponentNameList = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetComment(v string) *RunClusterServiceActionRequest {
	s.Comment = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetIsRolling(v bool) *RunClusterServiceActionRequest {
	s.IsRolling = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetExecuteStrategy(v string) *RunClusterServiceActionRequest {
	s.ExecuteStrategy = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetCustomParams(v string) *RunClusterServiceActionRequest {
	s.CustomParams = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetInterval(v int64) *RunClusterServiceActionRequest {
	s.Interval = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetNodeCountPerBatch(v int32) *RunClusterServiceActionRequest {
	s.NodeCountPerBatch = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetTotlerateFailCount(v int32) *RunClusterServiceActionRequest {
	s.TotlerateFailCount = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetOnlyRestartStaleConfigNodes(v bool) *RunClusterServiceActionRequest {
	s.OnlyRestartStaleConfigNodes = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetTurnOnMaintenanceMode(v bool) *RunClusterServiceActionRequest {
	s.TurnOnMaintenanceMode = &v
	return s
}

func (s *RunClusterServiceActionRequest) SetHostGroupIdList(v []*string) *RunClusterServiceActionRequest {
	s.HostGroupIdList = v
	return s
}

type RunClusterServiceActionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RunClusterServiceActionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunClusterServiceActionResponseBody) GoString() string {
	return s.String()
}

func (s *RunClusterServiceActionResponseBody) SetRequestId(v string) *RunClusterServiceActionResponseBody {
	s.RequestId = &v
	return s
}

type RunClusterServiceActionResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RunClusterServiceActionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunClusterServiceActionResponse) String() string {
	return tea.Prettify(s)
}

func (s RunClusterServiceActionResponse) GoString() string {
	return s.String()
}

func (s *RunClusterServiceActionResponse) SetHeaders(v map[string]*string) *RunClusterServiceActionResponse {
	s.Headers = v
	return s
}

func (s *RunClusterServiceActionResponse) SetBody(v *RunClusterServiceActionResponseBody) *RunClusterServiceActionResponse {
	s.Body = v
	return s
}

type RunExecutionPlanRequest struct {
	ResourceOwnerId *int64                 `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string                `json:"Id,omitempty" xml:"Id,omitempty"`
	Arguments       map[string]interface{} `json:"Arguments,omitempty" xml:"Arguments,omitempty"`
}

func (s RunExecutionPlanRequest) String() string {
	return tea.Prettify(s)
}

func (s RunExecutionPlanRequest) GoString() string {
	return s.String()
}

func (s *RunExecutionPlanRequest) SetResourceOwnerId(v int64) *RunExecutionPlanRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunExecutionPlanRequest) SetRegionId(v string) *RunExecutionPlanRequest {
	s.RegionId = &v
	return s
}

func (s *RunExecutionPlanRequest) SetId(v string) *RunExecutionPlanRequest {
	s.Id = &v
	return s
}

func (s *RunExecutionPlanRequest) SetArguments(v map[string]interface{}) *RunExecutionPlanRequest {
	s.Arguments = v
	return s
}

type RunExecutionPlanShrinkRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	ArgumentsShrink *string `json:"Arguments,omitempty" xml:"Arguments,omitempty"`
}

func (s RunExecutionPlanShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s RunExecutionPlanShrinkRequest) GoString() string {
	return s.String()
}

func (s *RunExecutionPlanShrinkRequest) SetResourceOwnerId(v int64) *RunExecutionPlanShrinkRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunExecutionPlanShrinkRequest) SetRegionId(v string) *RunExecutionPlanShrinkRequest {
	s.RegionId = &v
	return s
}

func (s *RunExecutionPlanShrinkRequest) SetId(v string) *RunExecutionPlanShrinkRequest {
	s.Id = &v
	return s
}

func (s *RunExecutionPlanShrinkRequest) SetArgumentsShrink(v string) *RunExecutionPlanShrinkRequest {
	s.ArgumentsShrink = &v
	return s
}

type RunExecutionPlanResponseBody struct {
	RequestId               *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ExecutionPlanInstanceId *string `json:"ExecutionPlanInstanceId,omitempty" xml:"ExecutionPlanInstanceId,omitempty"`
}

func (s RunExecutionPlanResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunExecutionPlanResponseBody) GoString() string {
	return s.String()
}

func (s *RunExecutionPlanResponseBody) SetRequestId(v string) *RunExecutionPlanResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunExecutionPlanResponseBody) SetExecutionPlanInstanceId(v string) *RunExecutionPlanResponseBody {
	s.ExecutionPlanInstanceId = &v
	return s
}

type RunExecutionPlanResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RunExecutionPlanResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunExecutionPlanResponse) String() string {
	return tea.Prettify(s)
}

func (s RunExecutionPlanResponse) GoString() string {
	return s.String()
}

func (s *RunExecutionPlanResponse) SetHeaders(v map[string]*string) *RunExecutionPlanResponse {
	s.Headers = v
	return s
}

func (s *RunExecutionPlanResponse) SetBody(v *RunExecutionPlanResponseBody) *RunExecutionPlanResponse {
	s.Body = v
	return s
}

type RunScalingActionV2Request struct {
	ResourceOwnerId   *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId          *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceGroupId   *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	ScalingActionType *string `json:"ScalingActionType,omitempty" xml:"ScalingActionType,omitempty"`
	ScalingGroupBizId *string `json:"ScalingGroupBizId,omitempty" xml:"ScalingGroupBizId,omitempty"`
	ActionParam       *string `json:"ActionParam,omitempty" xml:"ActionParam,omitempty"`
}

func (s RunScalingActionV2Request) String() string {
	return tea.Prettify(s)
}

func (s RunScalingActionV2Request) GoString() string {
	return s.String()
}

func (s *RunScalingActionV2Request) SetResourceOwnerId(v int64) *RunScalingActionV2Request {
	s.ResourceOwnerId = &v
	return s
}

func (s *RunScalingActionV2Request) SetRegionId(v string) *RunScalingActionV2Request {
	s.RegionId = &v
	return s
}

func (s *RunScalingActionV2Request) SetResourceGroupId(v string) *RunScalingActionV2Request {
	s.ResourceGroupId = &v
	return s
}

func (s *RunScalingActionV2Request) SetScalingActionType(v string) *RunScalingActionV2Request {
	s.ScalingActionType = &v
	return s
}

func (s *RunScalingActionV2Request) SetScalingGroupBizId(v string) *RunScalingActionV2Request {
	s.ScalingGroupBizId = &v
	return s
}

func (s *RunScalingActionV2Request) SetActionParam(v string) *RunScalingActionV2Request {
	s.ActionParam = &v
	return s
}

type RunScalingActionV2ResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s RunScalingActionV2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunScalingActionV2ResponseBody) GoString() string {
	return s.String()
}

func (s *RunScalingActionV2ResponseBody) SetRequestId(v string) *RunScalingActionV2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunScalingActionV2ResponseBody) SetData(v string) *RunScalingActionV2ResponseBody {
	s.Data = &v
	return s
}

type RunScalingActionV2Response struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RunScalingActionV2ResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunScalingActionV2Response) String() string {
	return tea.Prettify(s)
}

func (s RunScalingActionV2Response) GoString() string {
	return s.String()
}

func (s *RunScalingActionV2Response) SetHeaders(v map[string]*string) *RunScalingActionV2Response {
	s.Headers = v
	return s
}

func (s *RunScalingActionV2Response) SetBody(v *RunScalingActionV2ResponseBody) *RunScalingActionV2Response {
	s.Body = v
	return s
}

type SearchLogRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ClusterId       *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostInnerIp     *string `json:"HostInnerIp,omitempty" xml:"HostInnerIp,omitempty"`
	HostName        *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	LogstoreName    *string `json:"LogstoreName,omitempty" xml:"LogstoreName,omitempty"`
	FromTimestamp   *int32  `json:"FromTimestamp,omitempty" xml:"FromTimestamp,omitempty"`
	ToTimestamp     *int32  `json:"ToTimestamp,omitempty" xml:"ToTimestamp,omitempty"`
	SlsQueryString  *string `json:"SlsQueryString,omitempty" xml:"SlsQueryString,omitempty"`
	Offset          *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	Line            *int32  `json:"Line,omitempty" xml:"Line,omitempty"`
	Reverse         *bool   `json:"Reverse,omitempty" xml:"Reverse,omitempty"`
}

func (s SearchLogRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchLogRequest) GoString() string {
	return s.String()
}

func (s *SearchLogRequest) SetResourceOwnerId(v int64) *SearchLogRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchLogRequest) SetRegionId(v string) *SearchLogRequest {
	s.RegionId = &v
	return s
}

func (s *SearchLogRequest) SetClusterId(v string) *SearchLogRequest {
	s.ClusterId = &v
	return s
}

func (s *SearchLogRequest) SetHostInnerIp(v string) *SearchLogRequest {
	s.HostInnerIp = &v
	return s
}

func (s *SearchLogRequest) SetHostName(v string) *SearchLogRequest {
	s.HostName = &v
	return s
}

func (s *SearchLogRequest) SetLogstoreName(v string) *SearchLogRequest {
	s.LogstoreName = &v
	return s
}

func (s *SearchLogRequest) SetFromTimestamp(v int32) *SearchLogRequest {
	s.FromTimestamp = &v
	return s
}

func (s *SearchLogRequest) SetToTimestamp(v int32) *SearchLogRequest {
	s.ToTimestamp = &v
	return s
}

func (s *SearchLogRequest) SetSlsQueryString(v string) *SearchLogRequest {
	s.SlsQueryString = &v
	return s
}

func (s *SearchLogRequest) SetOffset(v int32) *SearchLogRequest {
	s.Offset = &v
	return s
}

func (s *SearchLogRequest) SetLine(v int32) *SearchLogRequest {
	s.Line = &v
	return s
}

func (s *SearchLogRequest) SetReverse(v bool) *SearchLogRequest {
	s.Reverse = &v
	return s
}

type SearchLogResponseBody struct {
	SlsLogItemList *SearchLogResponseBodySlsLogItemList `json:"SlsLogItemList,omitempty" xml:"SlsLogItemList,omitempty" type:"Struct"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Completed      *bool                                `json:"Completed,omitempty" xml:"Completed,omitempty"`
}

func (s SearchLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchLogResponseBody) GoString() string {
	return s.String()
}

func (s *SearchLogResponseBody) SetSlsLogItemList(v *SearchLogResponseBodySlsLogItemList) *SearchLogResponseBody {
	s.SlsLogItemList = v
	return s
}

func (s *SearchLogResponseBody) SetRequestId(v string) *SearchLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchLogResponseBody) SetCompleted(v bool) *SearchLogResponseBody {
	s.Completed = &v
	return s
}

type SearchLogResponseBodySlsLogItemList struct {
	SlsLogItem []*SearchLogResponseBodySlsLogItemListSlsLogItem `json:"SlsLogItem,omitempty" xml:"SlsLogItem,omitempty" type:"Repeated"`
}

func (s SearchLogResponseBodySlsLogItemList) String() string {
	return tea.Prettify(s)
}

func (s SearchLogResponseBodySlsLogItemList) GoString() string {
	return s.String()
}

func (s *SearchLogResponseBodySlsLogItemList) SetSlsLogItem(v []*SearchLogResponseBodySlsLogItemListSlsLogItem) *SearchLogResponseBodySlsLogItemList {
	s.SlsLogItem = v
	return s
}

type SearchLogResponseBodySlsLogItemListSlsLogItem struct {
	SourceIp  *string `json:"SourceIp,omitempty" xml:"SourceIp,omitempty"`
	PackId    *string `json:"PackId,omitempty" xml:"PackId,omitempty"`
	Path      *string `json:"Path,omitempty" xml:"Path,omitempty"`
	HostName  *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Timestamp *int32  `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Content   *string `json:"Content,omitempty" xml:"Content,omitempty"`
	PackMeta  *string `json:"PackMeta,omitempty" xml:"PackMeta,omitempty"`
}

func (s SearchLogResponseBodySlsLogItemListSlsLogItem) String() string {
	return tea.Prettify(s)
}

func (s SearchLogResponseBodySlsLogItemListSlsLogItem) GoString() string {
	return s.String()
}

func (s *SearchLogResponseBodySlsLogItemListSlsLogItem) SetSourceIp(v string) *SearchLogResponseBodySlsLogItemListSlsLogItem {
	s.SourceIp = &v
	return s
}

func (s *SearchLogResponseBodySlsLogItemListSlsLogItem) SetPackId(v string) *SearchLogResponseBodySlsLogItemListSlsLogItem {
	s.PackId = &v
	return s
}

func (s *SearchLogResponseBodySlsLogItemListSlsLogItem) SetPath(v string) *SearchLogResponseBodySlsLogItemListSlsLogItem {
	s.Path = &v
	return s
}

func (s *SearchLogResponseBodySlsLogItemListSlsLogItem) SetHostName(v string) *SearchLogResponseBodySlsLogItemListSlsLogItem {
	s.HostName = &v
	return s
}

func (s *SearchLogResponseBodySlsLogItemListSlsLogItem) SetTimestamp(v int32) *SearchLogResponseBodySlsLogItemListSlsLogItem {
	s.Timestamp = &v
	return s
}

func (s *SearchLogResponseBodySlsLogItemListSlsLogItem) SetContent(v string) *SearchLogResponseBodySlsLogItemListSlsLogItem {
	s.Content = &v
	return s
}

func (s *SearchLogResponseBodySlsLogItemListSlsLogItem) SetPackMeta(v string) *SearchLogResponseBodySlsLogItemListSlsLogItem {
	s.PackMeta = &v
	return s
}

type SearchLogResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchLogResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchLogResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchLogResponse) GoString() string {
	return s.String()
}

func (s *SearchLogResponse) SetHeaders(v map[string]*string) *SearchLogResponse {
	s.Headers = v
	return s
}

func (s *SearchLogResponse) SetBody(v *SearchLogResponseBody) *SearchLogResponse {
	s.Body = v
	return s
}

type StartFlowRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	FlowInstanceId *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
}

func (s StartFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s StartFlowRequest) GoString() string {
	return s.String()
}

func (s *StartFlowRequest) SetRegionId(v string) *StartFlowRequest {
	s.RegionId = &v
	return s
}

func (s *StartFlowRequest) SetProjectId(v string) *StartFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *StartFlowRequest) SetFlowInstanceId(v string) *StartFlowRequest {
	s.FlowInstanceId = &v
	return s
}

type StartFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s StartFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartFlowResponseBody) GoString() string {
	return s.String()
}

func (s *StartFlowResponseBody) SetRequestId(v string) *StartFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartFlowResponseBody) SetData(v bool) *StartFlowResponseBody {
	s.Data = &v
	return s
}

type StartFlowResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StartFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StartFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s StartFlowResponse) GoString() string {
	return s.String()
}

func (s *StartFlowResponse) SetHeaders(v map[string]*string) *StartFlowResponse {
	s.Headers = v
	return s
}

func (s *StartFlowResponse) SetBody(v *StartFlowResponseBody) *StartFlowResponse {
	s.Body = v
	return s
}

type SubmitFlowRequest struct {
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	FlowId    *string `json:"FlowId,omitempty" xml:"FlowId,omitempty"`
	Conf      *string `json:"Conf,omitempty" xml:"Conf,omitempty"`
}

func (s SubmitFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowRequest) GoString() string {
	return s.String()
}

func (s *SubmitFlowRequest) SetRegionId(v string) *SubmitFlowRequest {
	s.RegionId = &v
	return s
}

func (s *SubmitFlowRequest) SetProjectId(v string) *SubmitFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitFlowRequest) SetFlowId(v string) *SubmitFlowRequest {
	s.FlowId = &v
	return s
}

func (s *SubmitFlowRequest) SetConf(v string) *SubmitFlowRequest {
	s.Conf = &v
	return s
}

type SubmitFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFlowResponseBody) SetRequestId(v string) *SubmitFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFlowResponseBody) SetId(v string) *SubmitFlowResponseBody {
	s.Id = &v
	return s
}

type SubmitFlowResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowResponse) GoString() string {
	return s.String()
}

func (s *SubmitFlowResponse) SetHeaders(v map[string]*string) *SubmitFlowResponse {
	s.Headers = v
	return s
}

func (s *SubmitFlowResponse) SetBody(v *SubmitFlowResponseBody) *SubmitFlowResponse {
	s.Body = v
	return s
}

type SubmitFlowJobRequest struct {
	RegionId      *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId     *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobInstanceId *string `json:"JobInstanceId,omitempty" xml:"JobInstanceId,omitempty"`
	ClusterId     *string `json:"ClusterId,omitempty" xml:"ClusterId,omitempty"`
	HostName      *string `json:"HostName,omitempty" xml:"HostName,omitempty"`
	Namespace     *string `json:"Namespace,omitempty" xml:"Namespace,omitempty"`
	Conf          *string `json:"Conf,omitempty" xml:"Conf,omitempty"`
}

func (s SubmitFlowJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitFlowJobRequest) SetRegionId(v string) *SubmitFlowJobRequest {
	s.RegionId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetProjectId(v string) *SubmitFlowJobRequest {
	s.ProjectId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetJobId(v string) *SubmitFlowJobRequest {
	s.JobId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetJobInstanceId(v string) *SubmitFlowJobRequest {
	s.JobInstanceId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetClusterId(v string) *SubmitFlowJobRequest {
	s.ClusterId = &v
	return s
}

func (s *SubmitFlowJobRequest) SetHostName(v string) *SubmitFlowJobRequest {
	s.HostName = &v
	return s
}

func (s *SubmitFlowJobRequest) SetNamespace(v string) *SubmitFlowJobRequest {
	s.Namespace = &v
	return s
}

func (s *SubmitFlowJobRequest) SetConf(v string) *SubmitFlowJobRequest {
	s.Conf = &v
	return s
}

type SubmitFlowJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Id        *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitFlowJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFlowJobResponseBody) SetRequestId(v string) *SubmitFlowJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFlowJobResponseBody) SetId(v string) *SubmitFlowJobResponseBody {
	s.Id = &v
	return s
}

type SubmitFlowJobResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitFlowJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitFlowJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFlowJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitFlowJobResponse) SetHeaders(v map[string]*string) *SubmitFlowJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitFlowJobResponse) SetBody(v *SubmitFlowJobResponseBody) *SubmitFlowJobResponse {
	s.Body = v
	return s
}

type SuspendExecutionPlanSchedulerRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SuspendExecutionPlanSchedulerRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendExecutionPlanSchedulerRequest) GoString() string {
	return s.String()
}

func (s *SuspendExecutionPlanSchedulerRequest) SetResourceOwnerId(v int64) *SuspendExecutionPlanSchedulerRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SuspendExecutionPlanSchedulerRequest) SetRegionId(v string) *SuspendExecutionPlanSchedulerRequest {
	s.RegionId = &v
	return s
}

func (s *SuspendExecutionPlanSchedulerRequest) SetId(v string) *SuspendExecutionPlanSchedulerRequest {
	s.Id = &v
	return s
}

type SuspendExecutionPlanSchedulerResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SuspendExecutionPlanSchedulerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendExecutionPlanSchedulerResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendExecutionPlanSchedulerResponseBody) SetRequestId(v string) *SuspendExecutionPlanSchedulerResponseBody {
	s.RequestId = &v
	return s
}

type SuspendExecutionPlanSchedulerResponse struct {
	Headers map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SuspendExecutionPlanSchedulerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendExecutionPlanSchedulerResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendExecutionPlanSchedulerResponse) GoString() string {
	return s.String()
}

func (s *SuspendExecutionPlanSchedulerResponse) SetHeaders(v map[string]*string) *SuspendExecutionPlanSchedulerResponse {
	s.Headers = v
	return s
}

func (s *SuspendExecutionPlanSchedulerResponse) SetBody(v *SuspendExecutionPlanSchedulerResponseBody) *SuspendExecutionPlanSchedulerResponse {
	s.Body = v
	return s
}

type SuspendFlowRequest struct {
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	FlowInstanceId *string `json:"FlowInstanceId,omitempty" xml:"FlowInstanceId,omitempty"`
}

func (s SuspendFlowRequest) String() string {
	return tea.Prettify(s)
}

func (s SuspendFlowRequest) GoString() string {
	return s.String()
}

func (s *SuspendFlowRequest) SetRegionId(v string) *SuspendFlowRequest {
	s.RegionId = &v
	return s
}

func (s *SuspendFlowRequest) SetProjectId(v string) *SuspendFlowRequest {
	s.ProjectId = &v
	return s
}

func (s *SuspendFlowRequest) SetFlowInstanceId(v string) *SuspendFlowRequest {
	s.FlowInstanceId = &v
	return s
}

type SuspendFlowResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s SuspendFlowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SuspendFlowResponseBody) GoString() string {
	return s.String()
}

func (s *SuspendFlowResponseBody) SetRequestId(v string) *SuspendFlowResponseBody {
	s.RequestId = &v
	return s
}

func (s *SuspendFlowResponseBody) SetData(v bool) *SuspendFlowResponseBody {
	s.Data = &v
	return s
}

type SuspendFlowResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SuspendFlowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SuspendFlowResponse) String() string {
	return tea.Prettify(s)
}

func (s SuspendFlowResponse) GoString() string {
	return s.String()
}

func (s *SuspendFlowResponse) SetHeaders(v map[string]*string) *SuspendFlowResponse {
	s.Headers = v
	return s
}

func (s *SuspendFlowResponse) SetBody(v *SuspendFlowResponseBody) *SuspendFlowResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	ResourceOwnerId *int64                    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType    *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	ResourceId      []*string                 `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag             []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceOwnerId(v int64) *TagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesRequest) SetRegionId(v string) *TagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type TagResourcesSystemTagsRequest struct {
	ResourceOwnerId *int64                              `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string                             `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType    *string                             `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagOwnerUid     *int64                              `json:"TagOwnerUid,omitempty" xml:"TagOwnerUid,omitempty"`
	Scope           *string                             `json:"Scope,omitempty" xml:"Scope,omitempty"`
	ResourceId      []*string                           `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	Tag             []*TagResourcesSystemTagsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesSystemTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesSystemTagsRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesSystemTagsRequest) SetResourceOwnerId(v int64) *TagResourcesSystemTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetRegionId(v string) *TagResourcesSystemTagsRequest {
	s.RegionId = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetResourceType(v string) *TagResourcesSystemTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetTagOwnerUid(v int64) *TagResourcesSystemTagsRequest {
	s.TagOwnerUid = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetScope(v string) *TagResourcesSystemTagsRequest {
	s.Scope = &v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetResourceId(v []*string) *TagResourcesSystemTagsRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesSystemTagsRequest) SetTag(v []*TagResourcesSystemTagsRequestTag) *TagResourcesSystemTagsRequest {
	s.Tag = v
	return s
}

type TagResourcesSystemTagsRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesSystemTagsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesSystemTagsRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesSystemTagsRequestTag) SetKey(v string) *TagResourcesSystemTagsRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesSystemTagsRequestTag) SetValue(v string) *TagResourcesSystemTagsRequestTag {
	s.Value = &v
	return s
}

type TagResourcesSystemTagsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagResourcesSystemTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesSystemTagsResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesSystemTagsResponseBody) SetRequestId(v string) *TagResourcesSystemTagsResponseBody {
	s.RequestId = &v
	return s
}

type TagResourcesSystemTagsResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TagResourcesSystemTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagResourcesSystemTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesSystemTagsResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesSystemTagsResponse) SetHeaders(v map[string]*string) *TagResourcesSystemTagsResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesSystemTagsResponse) SetBody(v *TagResourcesSystemTagsResponseBody) *TagResourcesSystemTagsResponse {
	s.Body = v
	return s
}

type UninstallLibrariesRequest struct {
	ResourceOwnerId  *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId         *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	LibraryBizId     *string   `json:"LibraryBizId,omitempty" xml:"LibraryBizId,omitempty"`
	ClusterBizIdList []*string `json:"ClusterBizIdList,omitempty" xml:"ClusterBizIdList,omitempty" type:"Repeated"`
}

func (s UninstallLibrariesRequest) String() string {
	return tea.Prettify(s)
}

func (s UninstallLibrariesRequest) GoString() string {
	return s.String()
}

func (s *UninstallLibrariesRequest) SetResourceOwnerId(v int64) *UninstallLibrariesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UninstallLibrariesRequest) SetRegionId(v string) *UninstallLibrariesRequest {
	s.RegionId = &v
	return s
}

func (s *UninstallLibrariesRequest) SetLibraryBizId(v string) *UninstallLibrariesRequest {
	s.LibraryBizId = &v
	return s
}

func (s *UninstallLibrariesRequest) SetClusterBizIdList(v []*string) *UninstallLibrariesRequest {
	s.ClusterBizIdList = v
	return s
}

type UninstallLibrariesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s UninstallLibrariesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UninstallLibrariesResponseBody) GoString() string {
	return s.String()
}

func (s *UninstallLibrariesResponseBody) SetRequestId(v string) *UninstallLibrariesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UninstallLibrariesResponseBody) SetData(v string) *UninstallLibrariesResponseBody {
	s.Data = &v
	return s
}

type UninstallLibrariesResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UninstallLibrariesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UninstallLibrariesResponse) String() string {
	return tea.Prettify(s)
}

func (s UninstallLibrariesResponse) GoString() string {
	return s.String()
}

func (s *UninstallLibrariesResponse) SetHeaders(v map[string]*string) *UninstallLibrariesResponse {
	s.Headers = v
	return s
}

func (s *UninstallLibrariesResponse) SetBody(v *UninstallLibrariesResponseBody) *UninstallLibrariesResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType    *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	All             *bool     `json:"All,omitempty" xml:"All,omitempty"`
	ResourceId      []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	TagKey          []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetResourceOwnerId(v int64) *UntagResourcesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesRequest) SetRegionId(v string) *UntagResourcesRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UntagResourcesSystemTagsRequest struct {
	ResourceOwnerId *int64    `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceType    *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagOwnerUid     *int64    `json:"TagOwnerUid,omitempty" xml:"TagOwnerUid,omitempty"`
	All             *bool     `json:"All,omitempty" xml:"All,omitempty"`
	ResourceId      []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	TagKey          []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesSystemTagsRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesSystemTagsRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesSystemTagsRequest) SetResourceOwnerId(v int64) *UntagResourcesSystemTagsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetRegionId(v string) *UntagResourcesSystemTagsRequest {
	s.RegionId = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetResourceType(v string) *UntagResourcesSystemTagsRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetTagOwnerUid(v int64) *UntagResourcesSystemTagsRequest {
	s.TagOwnerUid = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetAll(v bool) *UntagResourcesSystemTagsRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetResourceId(v []*string) *UntagResourcesSystemTagsRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesSystemTagsRequest) SetTagKey(v []*string) *UntagResourcesSystemTagsRequest {
	s.TagKey = v
	return s
}

type UntagResourcesSystemTagsResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UntagResourcesSystemTagsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesSystemTagsResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesSystemTagsResponseBody) SetRequestId(v string) *UntagResourcesSystemTagsResponseBody {
	s.RequestId = &v
	return s
}

type UntagResourcesSystemTagsResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UntagResourcesSystemTagsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UntagResourcesSystemTagsResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesSystemTagsResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesSystemTagsResponse) SetHeaders(v map[string]*string) *UntagResourcesSystemTagsResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesSystemTagsResponse) SetBody(v *UntagResourcesSystemTagsResponseBody) *UntagResourcesSystemTagsResponse {
	s.Body = v
	return s
}

type UpdateDataSourceRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Conf            *string `json:"Conf,omitempty" xml:"Conf,omitempty"`
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
}

func (s UpdateDataSourceRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceRequest) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceRequest) SetResourceOwnerId(v int64) *UpdateDataSourceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateDataSourceRequest) SetRegionId(v string) *UpdateDataSourceRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateDataSourceRequest) SetId(v string) *UpdateDataSourceRequest {
	s.Id = &v
	return s
}

func (s *UpdateDataSourceRequest) SetName(v string) *UpdateDataSourceRequest {
	s.Name = &v
	return s
}

func (s *UpdateDataSourceRequest) SetDescription(v string) *UpdateDataSourceRequest {
	s.Description = &v
	return s
}

func (s *UpdateDataSourceRequest) SetConf(v string) *UpdateDataSourceRequest {
	s.Conf = &v
	return s
}

func (s *UpdateDataSourceRequest) SetResourceGroupId(v string) *UpdateDataSourceRequest {
	s.ResourceGroupId = &v
	return s
}

type UpdateDataSourceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateDataSourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponseBody) SetRequestId(v string) *UpdateDataSourceResponseBody {
	s.RequestId = &v
	return s
}

type UpdateDataSourceResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateDataSourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateDataSourceResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateDataSourceResponse) GoString() string {
	return s.String()
}

func (s *UpdateDataSourceResponse) SetHeaders(v map[string]*string) *UpdateDataSourceResponse {
	s.Headers = v
	return s
}

func (s *UpdateDataSourceResponse) SetBody(v *UpdateDataSourceResponseBody) *UpdateDataSourceResponse {
	s.Body = v
	return s
}

type UpdateLibraryInstallTaskStatusRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TaskBizId       *string `json:"TaskBizId,omitempty" xml:"TaskBizId,omitempty"`
	Status          *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateLibraryInstallTaskStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateLibraryInstallTaskStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateLibraryInstallTaskStatusRequest) SetResourceOwnerId(v int64) *UpdateLibraryInstallTaskStatusRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateLibraryInstallTaskStatusRequest) SetRegionId(v string) *UpdateLibraryInstallTaskStatusRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateLibraryInstallTaskStatusRequest) SetTaskBizId(v string) *UpdateLibraryInstallTaskStatusRequest {
	s.TaskBizId = &v
	return s
}

func (s *UpdateLibraryInstallTaskStatusRequest) SetStatus(v string) *UpdateLibraryInstallTaskStatusRequest {
	s.Status = &v
	return s
}

type UpdateLibraryInstallTaskStatusResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s UpdateLibraryInstallTaskStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateLibraryInstallTaskStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateLibraryInstallTaskStatusResponseBody) SetRequestId(v string) *UpdateLibraryInstallTaskStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateLibraryInstallTaskStatusResponseBody) SetData(v bool) *UpdateLibraryInstallTaskStatusResponseBody {
	s.Data = &v
	return s
}

type UpdateLibraryInstallTaskStatusResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateLibraryInstallTaskStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateLibraryInstallTaskStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateLibraryInstallTaskStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateLibraryInstallTaskStatusResponse) SetHeaders(v map[string]*string) *UpdateLibraryInstallTaskStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateLibraryInstallTaskStatusResponse) SetBody(v *UpdateLibraryInstallTaskStatusResponseBody) *UpdateLibraryInstallTaskStatusResponse {
	s.Body = v
	return s
}

type UpdateTagRequest struct {
	ResourceOwnerId *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId        *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Id              *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Category        *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
}

func (s UpdateTagRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTagRequest) GoString() string {
	return s.String()
}

func (s *UpdateTagRequest) SetResourceOwnerId(v int64) *UpdateTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateTagRequest) SetRegionId(v string) *UpdateTagRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateTagRequest) SetId(v int64) *UpdateTagRequest {
	s.Id = &v
	return s
}

func (s *UpdateTagRequest) SetName(v string) *UpdateTagRequest {
	s.Name = &v
	return s
}

func (s *UpdateTagRequest) SetCategory(v string) *UpdateTagRequest {
	s.Category = &v
	return s
}

func (s *UpdateTagRequest) SetDescription(v string) *UpdateTagRequest {
	s.Description = &v
	return s
}

type UpdateTagResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s UpdateTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTagResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTagResponseBody) SetRequestId(v string) *UpdateTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTagResponseBody) SetData(v string) *UpdateTagResponseBody {
	s.Data = &v
	return s
}

type UpdateTagResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTagResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTagResponse) GoString() string {
	return s.String()
}

func (s *UpdateTagResponse) SetHeaders(v map[string]*string) *UpdateTagResponse {
	s.Headers = v
	return s
}

func (s *UpdateTagResponse) SetBody(v *UpdateTagResponseBody) *UpdateTagResponse {
	s.Body = v
	return s
}

type UpdateUserRequest struct {
	ResourceOwnerId      *int64                                   `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RegionId             *string                                  `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	AliyunUserId         *string                                  `json:"AliyunUserId,omitempty" xml:"AliyunUserId,omitempty"`
	UserName             *string                                  `json:"UserName,omitempty" xml:"UserName,omitempty"`
	UserType             *string                                  `json:"UserType,omitempty" xml:"UserType,omitempty"`
	Status               *string                                  `json:"Status,omitempty" xml:"Status,omitempty"`
	Description          *string                                  `json:"Description,omitempty" xml:"Description,omitempty"`
	RoleIdList           []*int                                   `json:"RoleIdList,omitempty" xml:"RoleIdList,omitempty" type:"Repeated"`
	GroupIdList          []*int                                   `json:"GroupIdList,omitempty" xml:"GroupIdList,omitempty" type:"Repeated"`
	UserAccountParamList []*UpdateUserRequestUserAccountParamList `json:"UserAccountParamList,omitempty" xml:"UserAccountParamList,omitempty" type:"Repeated"`
}

func (s UpdateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserRequest) GoString() string {
	return s.String()
}

func (s *UpdateUserRequest) SetResourceOwnerId(v int64) *UpdateUserRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateUserRequest) SetRegionId(v string) *UpdateUserRequest {
	s.RegionId = &v
	return s
}

func (s *UpdateUserRequest) SetAliyunUserId(v string) *UpdateUserRequest {
	s.AliyunUserId = &v
	return s
}

func (s *UpdateUserRequest) SetUserName(v string) *UpdateUserRequest {
	s.UserName = &v
	return s
}

func (s *UpdateUserRequest) SetUserType(v string) *UpdateUserRequest {
	s.UserType = &v
	return s
}

func (s *UpdateUserRequest) SetStatus(v string) *UpdateUserRequest {
	s.Status = &v
	return s
}

func (s *UpdateUserRequest) SetDescription(v string) *UpdateUserRequest {
	s.Description = &v
	return s
}

func (s *UpdateUserRequest) SetRoleIdList(v []*int) *UpdateUserRequest {
	s.RoleIdList = v
	return s
}

func (s *UpdateUserRequest) SetGroupIdList(v []*int) *UpdateUserRequest {
	s.GroupIdList = v
	return s
}

func (s *UpdateUserRequest) SetUserAccountParamList(v []*UpdateUserRequestUserAccountParamList) *UpdateUserRequest {
	s.UserAccountParamList = v
	return s
}

type UpdateUserRequestUserAccountParamList struct {
	AuthType        *string `json:"AuthType,omitempty" xml:"AuthType,omitempty"`
	AccountPassword *string `json:"AccountPassword,omitempty" xml:"AccountPassword,omitempty"`
	AccountType     *string `json:"AccountType,omitempty" xml:"AccountType,omitempty"`
}

func (s UpdateUserRequestUserAccountParamList) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserRequestUserAccountParamList) GoString() string {
	return s.String()
}

func (s *UpdateUserRequestUserAccountParamList) SetAuthType(v string) *UpdateUserRequestUserAccountParamList {
	s.AuthType = &v
	return s
}

func (s *UpdateUserRequestUserAccountParamList) SetAccountPassword(v string) *UpdateUserRequestUserAccountParamList {
	s.AccountPassword = &v
	return s
}

func (s *UpdateUserRequestUserAccountParamList) SetAccountType(v string) *UpdateUserRequestUserAccountParamList {
	s.AccountType = &v
	return s
}

type UpdateUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Paging    *bool   `json:"Paging,omitempty" xml:"Paging,omitempty"`
	Data      *bool   `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s UpdateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateUserResponseBody) SetRequestId(v string) *UpdateUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateUserResponseBody) SetPaging(v bool) *UpdateUserResponseBody {
	s.Paging = &v
	return s
}

func (s *UpdateUserResponseBody) SetData(v bool) *UpdateUserResponseBody {
	s.Data = &v
	return s
}

type UpdateUserResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateUserResponse) GoString() string {
	return s.String()
}

func (s *UpdateUserResponse) SetHeaders(v map[string]*string) *UpdateUserResponse {
	s.Headers = v
	return s
}

func (s *UpdateUserResponse) SetBody(v *UpdateUserResponseBody) *UpdateUserResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-beijing":            tea.String("emr.aliyuncs.com"),
		"cn-hangzhou":           tea.String("emr.aliyuncs.com"),
		"cn-shanghai":           tea.String("emr.aliyuncs.com"),
		"cn-shenzhen":           tea.String("emr.aliyuncs.com"),
		"ap-southeast-1":        tea.String("emr.aliyuncs.com"),
		"us-west-1":             tea.String("emr.aliyuncs.com"),
		"cn-hangzhou-finance":   tea.String("emr.aliyuncs.com"),
		"cn-shenzhen-finance-1": tea.String("emr.aliyuncs.com"),
		"cn-shanghai-finance-1": tea.String("emr.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("emr"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddClusterServiceWithOptions(request *AddClusterServiceRequest, runtime *util.RuntimeOptions) (_result *AddClusterServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddClusterServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddClusterService"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddClusterService(request *AddClusterServiceRequest) (_result *AddClusterServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddClusterServiceResponse{}
	_body, _err := client.AddClusterServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddScalingConfigItemV2WithOptions(request *AddScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *AddScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddScalingConfigItemV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("AddScalingConfigItemV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddScalingConfigItemV2(request *AddScalingConfigItemV2Request) (_result *AddScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddScalingConfigItemV2Response{}
	_body, _err := client.AddScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroupWithOptions(request *AuthorizeSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *AuthorizeSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AuthorizeSecurityGroup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AuthorizeSecurityGroup(request *AuthorizeSecurityGroupRequest) (_result *AuthorizeSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AuthorizeSecurityGroupResponse{}
	_body, _err := client.AuthorizeSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelOrderWithOptions(request *CancelOrderRequest, runtime *util.RuntimeOptions) (_result *CancelOrderResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelOrderResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelOrder"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelOrder(request *CancelOrderRequest) (_result *CancelOrderResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelOrderResponse{}
	_body, _err := client.CancelOrderWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CleanupFlowEntitySnapshotWithOptions(request *CleanupFlowEntitySnapshotRequest, runtime *util.RuntimeOptions) (_result *CleanupFlowEntitySnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CleanupFlowEntitySnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CleanupFlowEntitySnapshot"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CleanupFlowEntitySnapshot(request *CleanupFlowEntitySnapshotRequest) (_result *CleanupFlowEntitySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CleanupFlowEntitySnapshotResponse{}
	_body, _err := client.CleanupFlowEntitySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloneFlowWithOptions(request *CloneFlowRequest, runtime *util.RuntimeOptions) (_result *CloneFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CloneFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CloneFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloneFlow(request *CloneFlowRequest) (_result *CloneFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneFlowResponse{}
	_body, _err := client.CloneFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CloneFlowJobWithOptions(request *CloneFlowJobRequest, runtime *util.RuntimeOptions) (_result *CloneFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CloneFlowJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CloneFlowJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CloneFlowJob(request *CloneFlowJobRequest) (_result *CloneFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CloneFlowJobResponse{}
	_body, _err := client.CloneFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CommitFlowEntitySnapshotWithOptions(request *CommitFlowEntitySnapshotRequest, runtime *util.RuntimeOptions) (_result *CommitFlowEntitySnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CommitFlowEntitySnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CommitFlowEntitySnapshot"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CommitFlowEntitySnapshot(request *CommitFlowEntitySnapshotRequest) (_result *CommitFlowEntitySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CommitFlowEntitySnapshotResponse{}
	_body, _err := client.CommitFlowEntitySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBackupWithOptions(request *CreateBackupRequest, runtime *util.RuntimeOptions) (_result *CreateBackupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateBackupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateBackup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBackup(request *CreateBackupRequest) (_result *CreateBackupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackupResponse{}
	_body, _err := client.CreateBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateBackupPlanWithOptions(request *CreateBackupPlanRequest, runtime *util.RuntimeOptions) (_result *CreateBackupPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateBackupPlanResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateBackupPlan"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateBackupPlan(request *CreateBackupPlanRequest) (_result *CreateBackupPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBackupPlanResponse{}
	_body, _err := client.CreateBackupPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClusterBootstrapActionWithOptions(request *CreateClusterBootstrapActionRequest, runtime *util.RuntimeOptions) (_result *CreateClusterBootstrapActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateClusterBootstrapActionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateClusterBootstrapAction"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClusterBootstrapAction(request *CreateClusterBootstrapActionRequest) (_result *CreateClusterBootstrapActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterBootstrapActionResponse{}
	_body, _err := client.CreateClusterBootstrapActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClusterTemplateWithOptions(request *CreateClusterTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateClusterTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateClusterTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateClusterTemplate"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClusterTemplate(request *CreateClusterTemplateRequest) (_result *CreateClusterTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterTemplateResponse{}
	_body, _err := client.CreateClusterTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClusterV2WithOptions(request *CreateClusterV2Request, runtime *util.RuntimeOptions) (_result *CreateClusterV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateClusterV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("CreateClusterV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClusterV2(request *CreateClusterV2Request) (_result *CreateClusterV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterV2Response{}
	_body, _err := client.CreateClusterV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateClusterWithTemplateWithOptions(request *CreateClusterWithTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateClusterWithTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateClusterWithTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateClusterWithTemplate"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateClusterWithTemplate(request *CreateClusterWithTemplateRequest) (_result *CreateClusterWithTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateClusterWithTemplateResponse{}
	_body, _err := client.CreateClusterWithTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateDataSourceWithOptions(request *CreateDataSourceRequest, runtime *util.RuntimeOptions) (_result *CreateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateDataSourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateDataSource"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateDataSource(request *CreateDataSourceRequest) (_result *CreateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDataSourceResponse{}
	_body, _err := client.CreateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateExecutionPlanWithOptions(request *CreateExecutionPlanRequest, runtime *util.RuntimeOptions) (_result *CreateExecutionPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateExecutionPlanResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateExecutionPlan"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateExecutionPlan(request *CreateExecutionPlanRequest) (_result *CreateExecutionPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateExecutionPlanResponse{}
	_body, _err := client.CreateExecutionPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowWithOptions(request *CreateFlowRequest, runtime *util.RuntimeOptions) (_result *CreateFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlow(request *CreateFlowRequest) (_result *CreateFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowResponse{}
	_body, _err := client.CreateFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowCategoryWithOptions(request *CreateFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *CreateFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFlowCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFlowCategory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowCategory(request *CreateFlowCategoryRequest) (_result *CreateFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowCategoryResponse{}
	_body, _err := client.CreateFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowEditLockWithOptions(request *CreateFlowEditLockRequest, runtime *util.RuntimeOptions) (_result *CreateFlowEditLockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFlowEditLockResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFlowEditLock"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowEditLock(request *CreateFlowEditLockRequest) (_result *CreateFlowEditLockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowEditLockResponse{}
	_body, _err := client.CreateFlowEditLockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowForWebWithOptions(request *CreateFlowForWebRequest, runtime *util.RuntimeOptions) (_result *CreateFlowForWebResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFlowForWebResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFlowForWeb"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowForWeb(request *CreateFlowForWebRequest) (_result *CreateFlowForWebResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowForWebResponse{}
	_body, _err := client.CreateFlowForWebWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowJobWithOptions(request *CreateFlowJobRequest, runtime *util.RuntimeOptions) (_result *CreateFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFlowJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFlowJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowJob(request *CreateFlowJobRequest) (_result *CreateFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowJobResponse{}
	_body, _err := client.CreateFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowProjectWithOptions(request *CreateFlowProjectRequest, runtime *util.RuntimeOptions) (_result *CreateFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFlowProjectResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFlowProject"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowProject(request *CreateFlowProjectRequest) (_result *CreateFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowProjectResponse{}
	_body, _err := client.CreateFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowProjectClusterSettingWithOptions(request *CreateFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *CreateFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFlowProjectClusterSettingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFlowProjectClusterSetting"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowProjectClusterSetting(request *CreateFlowProjectClusterSettingRequest) (_result *CreateFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowProjectClusterSettingResponse{}
	_body, _err := client.CreateFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFlowProjectUserWithOptions(request *CreateFlowProjectUserRequest, runtime *util.RuntimeOptions) (_result *CreateFlowProjectUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFlowProjectUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFlowProjectUser"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFlowProjectUser(request *CreateFlowProjectUserRequest) (_result *CreateFlowProjectUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFlowProjectUserResponse{}
	_body, _err := client.CreateFlowProjectUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateJobWithOptions(request *CreateJobRequest, runtime *util.RuntimeOptions) (_result *CreateJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateJob(request *CreateJobRequest) (_result *CreateJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateJobResponse{}
	_body, _err := client.CreateJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateLibraryWithOptions(request *CreateLibraryRequest, runtime *util.RuntimeOptions) (_result *CreateLibraryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateLibraryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateLibrary"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateLibrary(request *CreateLibraryRequest) (_result *CreateLibraryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateLibraryResponse{}
	_body, _err := client.CreateLibraryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMetaTablePreviewTaskWithOptions(request *CreateMetaTablePreviewTaskRequest, runtime *util.RuntimeOptions) (_result *CreateMetaTablePreviewTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateMetaTablePreviewTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateMetaTablePreviewTask"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMetaTablePreviewTask(request *CreateMetaTablePreviewTaskRequest) (_result *CreateMetaTablePreviewTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMetaTablePreviewTaskResponse{}
	_body, _err := client.CreateMetaTablePreviewTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateNoteWithOptions(request *CreateNoteRequest, runtime *util.RuntimeOptions) (_result *CreateNoteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateNoteResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateNote"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateNote(request *CreateNoteRequest) (_result *CreateNoteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateNoteResponse{}
	_body, _err := client.CreateNoteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateParagraphWithOptions(request *CreateParagraphRequest, runtime *util.RuntimeOptions) (_result *CreateParagraphResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateParagraphResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateParagraph"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateParagraph(request *CreateParagraphRequest) (_result *CreateParagraphResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateParagraphResponse{}
	_body, _err := client.CreateParagraphWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResourcePoolWithOptions(request *CreateResourcePoolRequest, runtime *util.RuntimeOptions) (_result *CreateResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateResourcePoolResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateResourcePool"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateResourcePool(request *CreateResourcePoolRequest) (_result *CreateResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResourcePoolResponse{}
	_body, _err := client.CreateResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateResourceQueueWithOptions(request *CreateResourceQueueRequest, runtime *util.RuntimeOptions) (_result *CreateResourceQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateResourceQueueResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateResourceQueue"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateResourceQueue(request *CreateResourceQueueRequest) (_result *CreateResourceQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateResourceQueueResponse{}
	_body, _err := client.CreateResourceQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateScalingGroupV2WithOptions(request *CreateScalingGroupV2Request, runtime *util.RuntimeOptions) (_result *CreateScalingGroupV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateScalingGroupV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("CreateScalingGroupV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateScalingGroupV2(request *CreateScalingGroupV2Request) (_result *CreateScalingGroupV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateScalingGroupV2Response{}
	_body, _err := client.CreateScalingGroupV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateScalingRuleWithOptions(request *CreateScalingRuleRequest, runtime *util.RuntimeOptions) (_result *CreateScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateScalingRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateScalingRule"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateScalingRule(request *CreateScalingRuleRequest) (_result *CreateScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateScalingRuleResponse{}
	_body, _err := client.CreateScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateTagWithOptions(request *CreateTagRequest, runtime *util.RuntimeOptions) (_result *CreateTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateTagResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateTag"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateTag(request *CreateTagRequest) (_result *CreateTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTagResponse{}
	_body, _err := client.CreateTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUserWithOptions(request *CreateUserRequest, runtime *util.RuntimeOptions) (_result *CreateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateUser"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUser(request *CreateUserRequest) (_result *CreateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUserResponse{}
	_body, _err := client.CreateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateUsersWithOptions(request *CreateUsersRequest, runtime *util.RuntimeOptions) (_result *CreateUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateUsersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateUsers"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateUsers(request *CreateUsersRequest) (_result *CreateUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateUsersResponse{}
	_body, _err := client.CreateUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DecommissionHostComponentWithOptions(request *DecommissionHostComponentRequest, runtime *util.RuntimeOptions) (_result *DecommissionHostComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DecommissionHostComponentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DecommissionHostComponent"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DecommissionHostComponent(request *DecommissionHostComponentRequest) (_result *DecommissionHostComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DecommissionHostComponentResponse{}
	_body, _err := client.DecommissionHostComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteClusterTemplateWithOptions(request *DeleteClusterTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteClusterTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteClusterTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteClusterTemplate"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteClusterTemplate(request *DeleteClusterTemplateRequest) (_result *DeleteClusterTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteClusterTemplateResponse{}
	_body, _err := client.DeleteClusterTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteExecutionPlanWithOptions(request *DeleteExecutionPlanRequest, runtime *util.RuntimeOptions) (_result *DeleteExecutionPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteExecutionPlanResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteExecutionPlan"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteExecutionPlan(request *DeleteExecutionPlanRequest) (_result *DeleteExecutionPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteExecutionPlanResponse{}
	_body, _err := client.DeleteExecutionPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowWithOptions(request *DeleteFlowRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlow(request *DeleteFlowRequest) (_result *DeleteFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowResponse{}
	_body, _err := client.DeleteFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowCategoryWithOptions(request *DeleteFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteFlowCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteFlowCategory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowCategory(request *DeleteFlowCategoryRequest) (_result *DeleteFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowCategoryResponse{}
	_body, _err := client.DeleteFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowEditLockWithOptions(request *DeleteFlowEditLockRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowEditLockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteFlowEditLockResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteFlowEditLock"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowEditLock(request *DeleteFlowEditLockRequest) (_result *DeleteFlowEditLockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowEditLockResponse{}
	_body, _err := client.DeleteFlowEditLockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowJobWithOptions(request *DeleteFlowJobRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteFlowJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteFlowJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowJob(request *DeleteFlowJobRequest) (_result *DeleteFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowJobResponse{}
	_body, _err := client.DeleteFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowProjectWithOptions(request *DeleteFlowProjectRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteFlowProjectResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteFlowProject"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowProject(request *DeleteFlowProjectRequest) (_result *DeleteFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowProjectResponse{}
	_body, _err := client.DeleteFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowProjectClusterSettingWithOptions(request *DeleteFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteFlowProjectClusterSettingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteFlowProjectClusterSetting"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowProjectClusterSetting(request *DeleteFlowProjectClusterSettingRequest) (_result *DeleteFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowProjectClusterSettingResponse{}
	_body, _err := client.DeleteFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteFlowProjectUserWithOptions(request *DeleteFlowProjectUserRequest, runtime *util.RuntimeOptions) (_result *DeleteFlowProjectUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteFlowProjectUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteFlowProjectUser"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteFlowProjectUser(request *DeleteFlowProjectUserRequest) (_result *DeleteFlowProjectUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteFlowProjectUserResponse{}
	_body, _err := client.DeleteFlowProjectUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteJobWithOptions(request *DeleteJobRequest, runtime *util.RuntimeOptions) (_result *DeleteJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteJob(request *DeleteJobRequest) (_result *DeleteJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteJobResponse{}
	_body, _err := client.DeleteJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteLibrariesWithOptions(request *DeleteLibrariesRequest, runtime *util.RuntimeOptions) (_result *DeleteLibrariesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteLibrariesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteLibraries"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteLibraries(request *DeleteLibrariesRequest) (_result *DeleteLibrariesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteLibrariesResponse{}
	_body, _err := client.DeleteLibrariesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteNoteWithOptions(request *DeleteNoteRequest, runtime *util.RuntimeOptions) (_result *DeleteNoteResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteNoteResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteNote"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteNote(request *DeleteNoteRequest) (_result *DeleteNoteResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteNoteResponse{}
	_body, _err := client.DeleteNoteWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteResourcePoolWithOptions(request *DeleteResourcePoolRequest, runtime *util.RuntimeOptions) (_result *DeleteResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteResourcePoolResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteResourcePool"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteResourcePool(request *DeleteResourcePoolRequest) (_result *DeleteResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteResourcePoolResponse{}
	_body, _err := client.DeleteResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteResourceQueueWithOptions(request *DeleteResourceQueueRequest, runtime *util.RuntimeOptions) (_result *DeleteResourceQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteResourceQueueResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteResourceQueue"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteResourceQueue(request *DeleteResourceQueueRequest) (_result *DeleteResourceQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteResourceQueueResponse{}
	_body, _err := client.DeleteResourceQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteScalingRuleWithOptions(request *DeleteScalingRuleRequest, runtime *util.RuntimeOptions) (_result *DeleteScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteScalingRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteScalingRule"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteScalingRule(request *DeleteScalingRuleRequest) (_result *DeleteScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteScalingRuleResponse{}
	_body, _err := client.DeleteScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTagWithOptions(request *DeleteTagRequest, runtime *util.RuntimeOptions) (_result *DeleteTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteTagResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteTag"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTag(request *DeleteTagRequest) (_result *DeleteTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTagResponse{}
	_body, _err := client.DeleteTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteUserWithOptions(request *DeleteUserRequest, runtime *util.RuntimeOptions) (_result *DeleteUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteUser"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteUser(request *DeleteUserRequest) (_result *DeleteUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteUserResponse{}
	_body, _err := client.DeleteUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterBasicInfoWithOptions(request *DescribeClusterBasicInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterBasicInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterBasicInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterBasicInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterBasicInfo(request *DescribeClusterBasicInfoRequest) (_result *DescribeClusterBasicInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterBasicInfoResponse{}
	_body, _err := client.DescribeClusterBasicInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterMetaCollectWithOptions(request *DescribeClusterMetaCollectRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterMetaCollectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterMetaCollectResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterMetaCollect"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterMetaCollect(request *DescribeClusterMetaCollectRequest) (_result *DescribeClusterMetaCollectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterMetaCollectResponse{}
	_body, _err := client.DescribeClusterMetaCollectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterOperationHostTaskLogWithOptions(request *DescribeClusterOperationHostTaskLogRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterOperationHostTaskLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterOperationHostTaskLogResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterOperationHostTaskLog"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterOperationHostTaskLog(request *DescribeClusterOperationHostTaskLogRequest) (_result *DescribeClusterOperationHostTaskLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterOperationHostTaskLogResponse{}
	_body, _err := client.DescribeClusterOperationHostTaskLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterResourcePoolSchedulerTypeWithOptions(request *DescribeClusterResourcePoolSchedulerTypeRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterResourcePoolSchedulerTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterResourcePoolSchedulerTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterResourcePoolSchedulerType"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterResourcePoolSchedulerType(request *DescribeClusterResourcePoolSchedulerTypeRequest) (_result *DescribeClusterResourcePoolSchedulerTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterResourcePoolSchedulerTypeResponse{}
	_body, _err := client.DescribeClusterResourcePoolSchedulerTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterServiceWithOptions(request *DescribeClusterServiceRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterService"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterService(request *DescribeClusterServiceRequest) (_result *DescribeClusterServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterServiceResponse{}
	_body, _err := client.DescribeClusterServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfigWithOptions(request *DescribeClusterServiceConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterServiceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterServiceConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterServiceConfig"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfig(request *DescribeClusterServiceConfigRequest) (_result *DescribeClusterServiceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterServiceConfigResponse{}
	_body, _err := client.DescribeClusterServiceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfigHistoryWithOptions(request *DescribeClusterServiceConfigHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterServiceConfigHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterServiceConfigHistoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterServiceConfigHistory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfigHistory(request *DescribeClusterServiceConfigHistoryRequest) (_result *DescribeClusterServiceConfigHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterServiceConfigHistoryResponse{}
	_body, _err := client.DescribeClusterServiceConfigHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfigTagWithOptions(request *DescribeClusterServiceConfigTagRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterServiceConfigTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterServiceConfigTagResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterServiceConfigTag"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterServiceConfigTag(request *DescribeClusterServiceConfigTagRequest) (_result *DescribeClusterServiceConfigTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterServiceConfigTagResponse{}
	_body, _err := client.DescribeClusterServiceConfigTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterTemplateWithOptions(request *DescribeClusterTemplateRequest, runtime *util.RuntimeOptions) (_result *DescribeClusterTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterTemplate"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterTemplate(request *DescribeClusterTemplateRequest) (_result *DescribeClusterTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterTemplateResponse{}
	_body, _err := client.DescribeClusterTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeClusterV2WithOptions(request *DescribeClusterV2Request, runtime *util.RuntimeOptions) (_result *DescribeClusterV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeClusterV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeClusterV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeClusterV2(request *DescribeClusterV2Request) (_result *DescribeClusterV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeClusterV2Response{}
	_body, _err := client.DescribeClusterV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeDataSourceWithOptions(request *DescribeDataSourceRequest, runtime *util.RuntimeOptions) (_result *DescribeDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeDataSourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeDataSource"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeDataSource(request *DescribeDataSourceRequest) (_result *DescribeDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDataSourceResponse{}
	_body, _err := client.DescribeDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeExecutionPlanWithOptions(request *DescribeExecutionPlanRequest, runtime *util.RuntimeOptions) (_result *DescribeExecutionPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeExecutionPlanResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeExecutionPlan"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeExecutionPlan(request *DescribeExecutionPlanRequest) (_result *DescribeExecutionPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExecutionPlanResponse{}
	_body, _err := client.DescribeExecutionPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowWithOptions(request *DescribeFlowRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlow(request *DescribeFlowRequest) (_result *DescribeFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowResponse{}
	_body, _err := client.DescribeFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowAgentTokenWithOptions(request *DescribeFlowAgentTokenRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowAgentTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowAgentTokenResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowAgentToken"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowAgentToken(request *DescribeFlowAgentTokenRequest) (_result *DescribeFlowAgentTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowAgentTokenResponse{}
	_body, _err := client.DescribeFlowAgentTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowAgentUserWithOptions(request *DescribeFlowAgentUserRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowAgentUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowAgentUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowAgentUser"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowAgentUser(request *DescribeFlowAgentUserRequest) (_result *DescribeFlowAgentUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowAgentUserResponse{}
	_body, _err := client.DescribeFlowAgentUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowCategoryWithOptions(request *DescribeFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowCategory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowCategory(request *DescribeFlowCategoryRequest) (_result *DescribeFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowCategoryResponse{}
	_body, _err := client.DescribeFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowCategoryTreeWithOptions(request *DescribeFlowCategoryTreeRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowCategoryTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowCategoryTreeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowCategoryTree"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowCategoryTree(request *DescribeFlowCategoryTreeRequest) (_result *DescribeFlowCategoryTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowCategoryTreeResponse{}
	_body, _err := client.DescribeFlowCategoryTreeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowEntitySnapshotWithOptions(request *DescribeFlowEntitySnapshotRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowEntitySnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowEntitySnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowEntitySnapshot"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowEntitySnapshot(request *DescribeFlowEntitySnapshotRequest) (_result *DescribeFlowEntitySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowEntitySnapshotResponse{}
	_body, _err := client.DescribeFlowEntitySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowInstanceWithOptions(request *DescribeFlowInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowInstance"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowInstance(request *DescribeFlowInstanceRequest) (_result *DescribeFlowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowInstanceResponse{}
	_body, _err := client.DescribeFlowInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowJobWithOptions(request *DescribeFlowJobRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowJob(request *DescribeFlowJobRequest) (_result *DescribeFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowJobResponse{}
	_body, _err := client.DescribeFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceWithOptions(request *DescribeFlowNodeInstanceRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowNodeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowNodeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowNodeInstance"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstance(request *DescribeFlowNodeInstanceRequest) (_result *DescribeFlowNodeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowNodeInstanceResponse{}
	_body, _err := client.DescribeFlowNodeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceContainerLogWithOptions(request *DescribeFlowNodeInstanceContainerLogRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowNodeInstanceContainerLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowNodeInstanceContainerLogResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowNodeInstanceContainerLog"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceContainerLog(request *DescribeFlowNodeInstanceContainerLogRequest) (_result *DescribeFlowNodeInstanceContainerLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowNodeInstanceContainerLogResponse{}
	_body, _err := client.DescribeFlowNodeInstanceContainerLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceLauncherLogWithOptions(request *DescribeFlowNodeInstanceLauncherLogRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowNodeInstanceLauncherLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowNodeInstanceLauncherLogResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowNodeInstanceLauncherLog"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowNodeInstanceLauncherLog(request *DescribeFlowNodeInstanceLauncherLogRequest) (_result *DescribeFlowNodeInstanceLauncherLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowNodeInstanceLauncherLogResponse{}
	_body, _err := client.DescribeFlowNodeInstanceLauncherLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowProjectWithOptions(request *DescribeFlowProjectRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowProjectResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowProject"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowProject(request *DescribeFlowProjectRequest) (_result *DescribeFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowProjectResponse{}
	_body, _err := client.DescribeFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeFlowProjectClusterSettingWithOptions(request *DescribeFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *DescribeFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeFlowProjectClusterSettingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeFlowProjectClusterSetting"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeFlowProjectClusterSetting(request *DescribeFlowProjectClusterSettingRequest) (_result *DescribeFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFlowProjectClusterSettingResponse{}
	_body, _err := client.DescribeFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeJobWithOptions(request *DescribeJobRequest, runtime *util.RuntimeOptions) (_result *DescribeJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeJob(request *DescribeJobRequest) (_result *DescribeJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeJobResponse{}
	_body, _err := client.DescribeJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLibraryDetailWithOptions(request *DescribeLibraryDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeLibraryDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLibraryDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLibraryDetail"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLibraryDetail(request *DescribeLibraryDetailRequest) (_result *DescribeLibraryDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLibraryDetailResponse{}
	_body, _err := client.DescribeLibraryDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeLibraryInstallTaskDetailWithOptions(request *DescribeLibraryInstallTaskDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeLibraryInstallTaskDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeLibraryInstallTaskDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeLibraryInstallTaskDetail"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeLibraryInstallTaskDetail(request *DescribeLibraryInstallTaskDetailRequest) (_result *DescribeLibraryInstallTaskDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLibraryInstallTaskDetailResponse{}
	_body, _err := client.DescribeLibraryInstallTaskDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMetaTablePreviewTaskWithOptions(request *DescribeMetaTablePreviewTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeMetaTablePreviewTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeMetaTablePreviewTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeMetaTablePreviewTask"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMetaTablePreviewTask(request *DescribeMetaTablePreviewTaskRequest) (_result *DescribeMetaTablePreviewTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetaTablePreviewTaskResponse{}
	_body, _err := client.DescribeMetaTablePreviewTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingActivityWithOptions(request *DescribeScalingActivityRequest, runtime *util.RuntimeOptions) (_result *DescribeScalingActivityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeScalingActivityResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeScalingActivity"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingActivity(request *DescribeScalingActivityRequest) (_result *DescribeScalingActivityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingActivityResponse{}
	_body, _err := client.DescribeScalingActivityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingCommonConfigWithOptions(request *DescribeScalingCommonConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeScalingCommonConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeScalingCommonConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeScalingCommonConfig"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingCommonConfig(request *DescribeScalingCommonConfigRequest) (_result *DescribeScalingCommonConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingCommonConfigResponse{}
	_body, _err := client.DescribeScalingCommonConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingConfigItemV2WithOptions(request *DescribeScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *DescribeScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeScalingConfigItemV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeScalingConfigItemV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingConfigItemV2(request *DescribeScalingConfigItemV2Request) (_result *DescribeScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingConfigItemV2Response{}
	_body, _err := client.DescribeScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingGroupInstanceV2WithOptions(request *DescribeScalingGroupInstanceV2Request, runtime *util.RuntimeOptions) (_result *DescribeScalingGroupInstanceV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeScalingGroupInstanceV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeScalingGroupInstanceV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingGroupInstanceV2(request *DescribeScalingGroupInstanceV2Request) (_result *DescribeScalingGroupInstanceV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingGroupInstanceV2Response{}
	_body, _err := client.DescribeScalingGroupInstanceV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingGroupV2WithOptions(request *DescribeScalingGroupV2Request, runtime *util.RuntimeOptions) (_result *DescribeScalingGroupV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeScalingGroupV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeScalingGroupV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingGroupV2(request *DescribeScalingGroupV2Request) (_result *DescribeScalingGroupV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingGroupV2Response{}
	_body, _err := client.DescribeScalingGroupV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeScalingRuleWithOptions(request *DescribeScalingRuleRequest, runtime *util.RuntimeOptions) (_result *DescribeScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeScalingRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeScalingRule"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeScalingRule(request *DescribeScalingRuleRequest) (_result *DescribeScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeScalingRuleResponse{}
	_body, _err := client.DescribeScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeSecurityGroupAttributeWithOptions(request *DescribeSecurityGroupAttributeRequest, runtime *util.RuntimeOptions) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeSecurityGroupAttribute"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeSecurityGroupAttribute(request *DescribeSecurityGroupAttributeRequest) (_result *DescribeSecurityGroupAttributeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSecurityGroupAttributeResponse{}
	_body, _err := client.DescribeSecurityGroupAttributeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetachAndReleaseClusterEniWithOptions(request *DetachAndReleaseClusterEniRequest, runtime *util.RuntimeOptions) (_result *DetachAndReleaseClusterEniResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DetachAndReleaseClusterEniResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DetachAndReleaseClusterEni"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetachAndReleaseClusterEni(request *DetachAndReleaseClusterEniRequest) (_result *DetachAndReleaseClusterEniResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetachAndReleaseClusterEniResponse{}
	_body, _err := client.DetachAndReleaseClusterEniWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DiffFlowEntitySnapshotWithOptions(request *DiffFlowEntitySnapshotRequest, runtime *util.RuntimeOptions) (_result *DiffFlowEntitySnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DiffFlowEntitySnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DiffFlowEntitySnapshot"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DiffFlowEntitySnapshot(request *DiffFlowEntitySnapshotRequest) (_result *DiffFlowEntitySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DiffFlowEntitySnapshotResponse{}
	_body, _err := client.DiffFlowEntitySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DumpMetaDataSourceForOuterWithOptions(request *DumpMetaDataSourceForOuterRequest, runtime *util.RuntimeOptions) (_result *DumpMetaDataSourceForOuterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DumpMetaDataSourceForOuterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DumpMetaDataSourceForOuter"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DumpMetaDataSourceForOuter(request *DumpMetaDataSourceForOuterRequest) (_result *DumpMetaDataSourceForOuterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DumpMetaDataSourceForOuterResponse{}
	_body, _err := client.DumpMetaDataSourceForOuterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetFlowEntityRelationGraphWithOptions(request *GetFlowEntityRelationGraphRequest, runtime *util.RuntimeOptions) (_result *GetFlowEntityRelationGraphResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetFlowEntityRelationGraphResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetFlowEntityRelationGraph"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetFlowEntityRelationGraph(request *GetFlowEntityRelationGraphRequest) (_result *GetFlowEntityRelationGraphResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFlowEntityRelationGraphResponse{}
	_body, _err := client.GetFlowEntityRelationGraphWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetHdfsCapacityStatisticInfoWithOptions(request *GetHdfsCapacityStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetHdfsCapacityStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetHdfsCapacityStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetHdfsCapacityStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetHdfsCapacityStatisticInfo(request *GetHdfsCapacityStatisticInfoRequest) (_result *GetHdfsCapacityStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHdfsCapacityStatisticInfoResponse{}
	_body, _err := client.GetHdfsCapacityStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetJobInputStatisticInfoWithOptions(request *GetJobInputStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetJobInputStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetJobInputStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetJobInputStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetJobInputStatisticInfo(request *GetJobInputStatisticInfoRequest) (_result *GetJobInputStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetJobInputStatisticInfoResponse{}
	_body, _err := client.GetJobInputStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetJobOutputStatisticInfoWithOptions(request *GetJobOutputStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetJobOutputStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetJobOutputStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetJobOutputStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetJobOutputStatisticInfo(request *GetJobOutputStatisticInfoRequest) (_result *GetJobOutputStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetJobOutputStatisticInfoResponse{}
	_body, _err := client.GetJobOutputStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetJobRunningTimeStatisticInfoWithOptions(request *GetJobRunningTimeStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetJobRunningTimeStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetJobRunningTimeStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetJobRunningTimeStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetJobRunningTimeStatisticInfo(request *GetJobRunningTimeStatisticInfoRequest) (_result *GetJobRunningTimeStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetJobRunningTimeStatisticInfoResponse{}
	_body, _err := client.GetJobRunningTimeStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetQueueInputStatisticInfoWithOptions(request *GetQueueInputStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetQueueInputStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetQueueInputStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetQueueInputStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetQueueInputStatisticInfo(request *GetQueueInputStatisticInfoRequest) (_result *GetQueueInputStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueueInputStatisticInfoResponse{}
	_body, _err := client.GetQueueInputStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetQueueOutputStatisticInfoWithOptions(request *GetQueueOutputStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetQueueOutputStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetQueueOutputStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetQueueOutputStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetQueueOutputStatisticInfo(request *GetQueueOutputStatisticInfoRequest) (_result *GetQueueOutputStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueueOutputStatisticInfoResponse{}
	_body, _err := client.GetQueueOutputStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetQueueSubmissionStatisticInfoWithOptions(request *GetQueueSubmissionStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetQueueSubmissionStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetQueueSubmissionStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetQueueSubmissionStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetQueueSubmissionStatisticInfo(request *GetQueueSubmissionStatisticInfoRequest) (_result *GetQueueSubmissionStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueueSubmissionStatisticInfoResponse{}
	_body, _err := client.GetQueueSubmissionStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserInputStatisticInfoWithOptions(request *GetUserInputStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetUserInputStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetUserInputStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetUserInputStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserInputStatisticInfo(request *GetUserInputStatisticInfoRequest) (_result *GetUserInputStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserInputStatisticInfoResponse{}
	_body, _err := client.GetUserInputStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserOutputStatisticInfoWithOptions(request *GetUserOutputStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetUserOutputStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetUserOutputStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetUserOutputStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserOutputStatisticInfo(request *GetUserOutputStatisticInfoRequest) (_result *GetUserOutputStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserOutputStatisticInfoResponse{}
	_body, _err := client.GetUserOutputStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetUserSubmissionStatisticInfoWithOptions(request *GetUserSubmissionStatisticInfoRequest, runtime *util.RuntimeOptions) (_result *GetUserSubmissionStatisticInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetUserSubmissionStatisticInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetUserSubmissionStatisticInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetUserSubmissionStatisticInfo(request *GetUserSubmissionStatisticInfoRequest) (_result *GetUserSubmissionStatisticInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetUserSubmissionStatisticInfoResponse{}
	_body, _err := client.GetUserSubmissionStatisticInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) InstallLibrariesWithOptions(request *InstallLibrariesRequest, runtime *util.RuntimeOptions) (_result *InstallLibrariesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &InstallLibrariesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("InstallLibraries"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) InstallLibraries(request *InstallLibrariesRequest) (_result *InstallLibrariesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallLibrariesResponse{}
	_body, _err := client.InstallLibrariesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) JoinResourceGroupWithOptions(request *JoinResourceGroupRequest, runtime *util.RuntimeOptions) (_result *JoinResourceGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &JoinResourceGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("JoinResourceGroup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) JoinResourceGroup(request *JoinResourceGroupRequest) (_result *JoinResourceGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinResourceGroupResponse{}
	_body, _err := client.JoinResourceGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) KillExecutionJobInstanceWithOptions(request *KillExecutionJobInstanceRequest, runtime *util.RuntimeOptions) (_result *KillExecutionJobInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &KillExecutionJobInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("KillExecutionJobInstance"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) KillExecutionJobInstance(request *KillExecutionJobInstanceRequest) (_result *KillExecutionJobInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &KillExecutionJobInstanceResponse{}
	_body, _err := client.KillExecutionJobInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) KillFlowJobWithOptions(request *KillFlowJobRequest, runtime *util.RuntimeOptions) (_result *KillFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &KillFlowJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("KillFlowJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) KillFlowJob(request *KillFlowJobRequest) (_result *KillFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &KillFlowJobResponse{}
	_body, _err := client.KillFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAdviceActionWithOptions(request *ListAdviceActionRequest, runtime *util.RuntimeOptions) (_result *ListAdviceActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListAdviceActionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListAdviceAction"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAdviceAction(request *ListAdviceActionRequest) (_result *ListAdviceActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAdviceActionResponse{}
	_body, _err := client.ListAdviceActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListApmApplicationWithOptions(request *ListApmApplicationRequest, runtime *util.RuntimeOptions) (_result *ListApmApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListApmApplicationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListApmApplication"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListApmApplication(request *ListApmApplicationRequest) (_result *ListApmApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListApmApplicationResponse{}
	_body, _err := client.ListApmApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListBackupsWithOptions(request *ListBackupsRequest, runtime *util.RuntimeOptions) (_result *ListBackupsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListBackupsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListBackups"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListBackups(request *ListBackupsRequest) (_result *ListBackupsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListBackupsResponse{}
	_body, _err := client.ListBackupsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterHostWithOptions(request *ListClusterHostRequest, runtime *util.RuntimeOptions) (_result *ListClusterHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterHost"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterHost(request *ListClusterHostRequest) (_result *ListClusterHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterHostResponse{}
	_body, _err := client.ListClusterHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterHostComponentWithOptions(request *ListClusterHostComponentRequest, runtime *util.RuntimeOptions) (_result *ListClusterHostComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterHostComponentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterHostComponent"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterHostComponent(request *ListClusterHostComponentRequest) (_result *ListClusterHostComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterHostComponentResponse{}
	_body, _err := client.ListClusterHostComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterHostGroupWithOptions(request *ListClusterHostGroupRequest, runtime *util.RuntimeOptions) (_result *ListClusterHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterHostGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterHostGroup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterHostGroup(request *ListClusterHostGroupRequest) (_result *ListClusterHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterHostGroupResponse{}
	_body, _err := client.ListClusterHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterInstalledServiceWithOptions(request *ListClusterInstalledServiceRequest, runtime *util.RuntimeOptions) (_result *ListClusterInstalledServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterInstalledServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterInstalledService"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterInstalledService(request *ListClusterInstalledServiceRequest) (_result *ListClusterInstalledServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterInstalledServiceResponse{}
	_body, _err := client.ListClusterInstalledServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterOperationWithOptions(request *ListClusterOperationRequest, runtime *util.RuntimeOptions) (_result *ListClusterOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterOperationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterOperation"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterOperation(request *ListClusterOperationRequest) (_result *ListClusterOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterOperationResponse{}
	_body, _err := client.ListClusterOperationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterOperationHostWithOptions(request *ListClusterOperationHostRequest, runtime *util.RuntimeOptions) (_result *ListClusterOperationHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterOperationHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterOperationHost"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterOperationHost(request *ListClusterOperationHostRequest) (_result *ListClusterOperationHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterOperationHostResponse{}
	_body, _err := client.ListClusterOperationHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterOperationHostTaskWithOptions(request *ListClusterOperationHostTaskRequest, runtime *util.RuntimeOptions) (_result *ListClusterOperationHostTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterOperationHostTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterOperationHostTask"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterOperationHostTask(request *ListClusterOperationHostTaskRequest) (_result *ListClusterOperationHostTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterOperationHostTaskResponse{}
	_body, _err := client.ListClusterOperationHostTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterOperationTaskWithOptions(request *ListClusterOperationTaskRequest, runtime *util.RuntimeOptions) (_result *ListClusterOperationTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterOperationTaskResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterOperationTask"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterOperationTask(request *ListClusterOperationTaskRequest) (_result *ListClusterOperationTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterOperationTaskResponse{}
	_body, _err := client.ListClusterOperationTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClustersWithOptions(request *ListClustersRequest, runtime *util.RuntimeOptions) (_result *ListClustersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClustersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusters"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusters(request *ListClustersRequest) (_result *ListClustersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClustersResponse{}
	_body, _err := client.ListClustersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceWithOptions(request *ListClusterServiceRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterServiceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterService"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterService(request *ListClusterServiceRequest) (_result *ListClusterServiceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceResponse{}
	_body, _err := client.ListClusterServiceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceComponentWithOptions(request *ListClusterServiceComponentRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceComponentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterServiceComponentResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterServiceComponent"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterServiceComponent(request *ListClusterServiceComponentRequest) (_result *ListClusterServiceComponentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceComponentResponse{}
	_body, _err := client.ListClusterServiceComponentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceComponentHealthInfoWithOptions(request *ListClusterServiceComponentHealthInfoRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceComponentHealthInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterServiceComponentHealthInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterServiceComponentHealthInfo"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterServiceComponentHealthInfo(request *ListClusterServiceComponentHealthInfoRequest) (_result *ListClusterServiceComponentHealthInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceComponentHealthInfoResponse{}
	_body, _err := client.ListClusterServiceComponentHealthInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceConfigHistoryWithOptions(request *ListClusterServiceConfigHistoryRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceConfigHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterServiceConfigHistoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterServiceConfigHistory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterServiceConfigHistory(request *ListClusterServiceConfigHistoryRequest) (_result *ListClusterServiceConfigHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceConfigHistoryResponse{}
	_body, _err := client.ListClusterServiceConfigHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterServiceQuickLinkWithOptions(request *ListClusterServiceQuickLinkRequest, runtime *util.RuntimeOptions) (_result *ListClusterServiceQuickLinkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterServiceQuickLinkResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterServiceQuickLink"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterServiceQuickLink(request *ListClusterServiceQuickLinkRequest) (_result *ListClusterServiceQuickLinkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterServiceQuickLinkResponse{}
	_body, _err := client.ListClusterServiceQuickLinkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListClusterTemplatesWithOptions(request *ListClusterTemplatesRequest, runtime *util.RuntimeOptions) (_result *ListClusterTemplatesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListClusterTemplatesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListClusterTemplates"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListClusterTemplates(request *ListClusterTemplatesRequest) (_result *ListClusterTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListClusterTemplatesResponse{}
	_body, _err := client.ListClusterTemplatesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListDataSourceWithOptions(request *ListDataSourceRequest, runtime *util.RuntimeOptions) (_result *ListDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListDataSourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListDataSource"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListDataSource(request *ListDataSourceRequest) (_result *ListDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListDataSourceResponse{}
	_body, _err := client.ListDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEmrAvailableConfigWithOptions(request *ListEmrAvailableConfigRequest, runtime *util.RuntimeOptions) (_result *ListEmrAvailableConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListEmrAvailableConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListEmrAvailableConfig"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEmrAvailableConfig(request *ListEmrAvailableConfigRequest) (_result *ListEmrAvailableConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEmrAvailableConfigResponse{}
	_body, _err := client.ListEmrAvailableConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEmrAvailableResourceWithOptions(request *ListEmrAvailableResourceRequest, runtime *util.RuntimeOptions) (_result *ListEmrAvailableResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListEmrAvailableResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListEmrAvailableResource"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEmrAvailableResource(request *ListEmrAvailableResourceRequest) (_result *ListEmrAvailableResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEmrAvailableResourceResponse{}
	_body, _err := client.ListEmrAvailableResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListEmrMainVersionWithOptions(request *ListEmrMainVersionRequest, runtime *util.RuntimeOptions) (_result *ListEmrMainVersionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListEmrMainVersionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListEmrMainVersion"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListEmrMainVersion(request *ListEmrMainVersionRequest) (_result *ListEmrMainVersionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListEmrMainVersionResponse{}
	_body, _err := client.ListEmrMainVersionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListExecutionPlanInstancesWithOptions(request *ListExecutionPlanInstancesRequest, runtime *util.RuntimeOptions) (_result *ListExecutionPlanInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListExecutionPlanInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListExecutionPlanInstances"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListExecutionPlanInstances(request *ListExecutionPlanInstancesRequest) (_result *ListExecutionPlanInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListExecutionPlanInstancesResponse{}
	_body, _err := client.ListExecutionPlanInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListExecutionPlansWithOptions(request *ListExecutionPlansRequest, runtime *util.RuntimeOptions) (_result *ListExecutionPlansResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListExecutionPlansResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListExecutionPlans"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListExecutionPlans(request *ListExecutionPlansRequest) (_result *ListExecutionPlansResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListExecutionPlansResponse{}
	_body, _err := client.ListExecutionPlansWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowWithOptions(request *ListFlowRequest, runtime *util.RuntimeOptions) (_result *ListFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlow(request *ListFlowRequest) (_result *ListFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowResponse{}
	_body, _err := client.ListFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowCategoryWithOptions(request *ListFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *ListFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowCategory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowCategory(request *ListFlowCategoryRequest) (_result *ListFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowCategoryResponse{}
	_body, _err := client.ListFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowClusterWithOptions(request *ListFlowClusterRequest, runtime *util.RuntimeOptions) (_result *ListFlowClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowClusterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowCluster"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowCluster(request *ListFlowClusterRequest) (_result *ListFlowClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowClusterResponse{}
	_body, _err := client.ListFlowClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowClusterAllWithOptions(request *ListFlowClusterAllRequest, runtime *util.RuntimeOptions) (_result *ListFlowClusterAllResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowClusterAllResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowClusterAll"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowClusterAll(request *ListFlowClusterAllRequest) (_result *ListFlowClusterAllResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowClusterAllResponse{}
	_body, _err := client.ListFlowClusterAllWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowClusterAllHostsWithOptions(request *ListFlowClusterAllHostsRequest, runtime *util.RuntimeOptions) (_result *ListFlowClusterAllHostsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowClusterAllHostsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowClusterAllHosts"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowClusterAllHosts(request *ListFlowClusterAllHostsRequest) (_result *ListFlowClusterAllHostsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowClusterAllHostsResponse{}
	_body, _err := client.ListFlowClusterAllHostsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowClusterHostWithOptions(request *ListFlowClusterHostRequest, runtime *util.RuntimeOptions) (_result *ListFlowClusterHostResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowClusterHostResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowClusterHost"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowClusterHost(request *ListFlowClusterHostRequest) (_result *ListFlowClusterHostResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowClusterHostResponse{}
	_body, _err := client.ListFlowClusterHostWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowEntitySnapshotWithOptions(request *ListFlowEntitySnapshotRequest, runtime *util.RuntimeOptions) (_result *ListFlowEntitySnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowEntitySnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowEntitySnapshot"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowEntitySnapshot(request *ListFlowEntitySnapshotRequest) (_result *ListFlowEntitySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowEntitySnapshotResponse{}
	_body, _err := client.ListFlowEntitySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowInstanceWithOptions(request *ListFlowInstanceRequest, runtime *util.RuntimeOptions) (_result *ListFlowInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowInstance"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowInstance(request *ListFlowInstanceRequest) (_result *ListFlowInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowInstanceResponse{}
	_body, _err := client.ListFlowInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowJobWithOptions(request *ListFlowJobRequest, runtime *util.RuntimeOptions) (_result *ListFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowJob(request *ListFlowJobRequest) (_result *ListFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowJobResponse{}
	_body, _err := client.ListFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowJobHistoryWithOptions(request *ListFlowJobHistoryRequest, runtime *util.RuntimeOptions) (_result *ListFlowJobHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowJobHistoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowJobHistory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowJobHistory(request *ListFlowJobHistoryRequest) (_result *ListFlowJobHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowJobHistoryResponse{}
	_body, _err := client.ListFlowJobHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowNodeInstanceWithOptions(request *ListFlowNodeInstanceRequest, runtime *util.RuntimeOptions) (_result *ListFlowNodeInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowNodeInstanceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowNodeInstance"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowNodeInstance(request *ListFlowNodeInstanceRequest) (_result *ListFlowNodeInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowNodeInstanceResponse{}
	_body, _err := client.ListFlowNodeInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowNodeInstanceContainerStatusWithOptions(request *ListFlowNodeInstanceContainerStatusRequest, runtime *util.RuntimeOptions) (_result *ListFlowNodeInstanceContainerStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowNodeInstanceContainerStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowNodeInstanceContainerStatus"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowNodeInstanceContainerStatus(request *ListFlowNodeInstanceContainerStatusRequest) (_result *ListFlowNodeInstanceContainerStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowNodeInstanceContainerStatusResponse{}
	_body, _err := client.ListFlowNodeInstanceContainerStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowNodeSqlResultWithOptions(request *ListFlowNodeSqlResultRequest, runtime *util.RuntimeOptions) (_result *ListFlowNodeSqlResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowNodeSqlResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowNodeSqlResult"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowNodeSqlResult(request *ListFlowNodeSqlResultRequest) (_result *ListFlowNodeSqlResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowNodeSqlResultResponse{}
	_body, _err := client.ListFlowNodeSqlResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowProjectWithOptions(request *ListFlowProjectRequest, runtime *util.RuntimeOptions) (_result *ListFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowProjectResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowProject"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowProject(request *ListFlowProjectRequest) (_result *ListFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowProjectResponse{}
	_body, _err := client.ListFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowProjectClusterSettingWithOptions(request *ListFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *ListFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowProjectClusterSettingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowProjectClusterSetting"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowProjectClusterSetting(request *ListFlowProjectClusterSettingRequest) (_result *ListFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowProjectClusterSettingResponse{}
	_body, _err := client.ListFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFlowProjectUserWithOptions(request *ListFlowProjectUserRequest, runtime *util.RuntimeOptions) (_result *ListFlowProjectUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFlowProjectUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFlowProjectUser"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFlowProjectUser(request *ListFlowProjectUserRequest) (_result *ListFlowProjectUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFlowProjectUserResponse{}
	_body, _err := client.ListFlowProjectUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobExecutionInstancesWithOptions(request *ListJobExecutionInstancesRequest, runtime *util.RuntimeOptions) (_result *ListJobExecutionInstancesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListJobExecutionInstancesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListJobExecutionInstances"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJobExecutionInstances(request *ListJobExecutionInstancesRequest) (_result *ListJobExecutionInstancesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobExecutionInstancesResponse{}
	_body, _err := client.ListJobExecutionInstancesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobInstanceWorkersWithOptions(request *ListJobInstanceWorkersRequest, runtime *util.RuntimeOptions) (_result *ListJobInstanceWorkersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListJobInstanceWorkersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListJobInstanceWorkers"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJobInstanceWorkers(request *ListJobInstanceWorkersRequest) (_result *ListJobInstanceWorkersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobInstanceWorkersResponse{}
	_body, _err := client.ListJobInstanceWorkersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobsWithOptions(request *ListJobsRequest, runtime *util.RuntimeOptions) (_result *ListJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListJobsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListJobs"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJobs(request *ListJobsRequest) (_result *ListJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobsResponse{}
	_body, _err := client.ListJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLibrariesWithOptions(request *ListLibrariesRequest, runtime *util.RuntimeOptions) (_result *ListLibrariesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListLibrariesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListLibraries"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLibraries(request *ListLibrariesRequest) (_result *ListLibrariesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLibrariesResponse{}
	_body, _err := client.ListLibrariesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLibraryInstallTasksWithOptions(request *ListLibraryInstallTasksRequest, runtime *util.RuntimeOptions) (_result *ListLibraryInstallTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListLibraryInstallTasksResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListLibraryInstallTasks"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLibraryInstallTasks(request *ListLibraryInstallTasksRequest) (_result *ListLibraryInstallTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLibraryInstallTasksResponse{}
	_body, _err := client.ListLibraryInstallTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListLibraryStatusWithOptions(request *ListLibraryStatusRequest, runtime *util.RuntimeOptions) (_result *ListLibraryStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListLibraryStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListLibraryStatus"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListLibraryStatus(request *ListLibraryStatusRequest) (_result *ListLibraryStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListLibraryStatusResponse{}
	_body, _err := client.ListLibraryStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMetaClusterWithOptions(request *ListMetaClusterRequest, runtime *util.RuntimeOptions) (_result *ListMetaClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListMetaClusterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListMetaCluster"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMetaCluster(request *ListMetaClusterRequest) (_result *ListMetaClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMetaClusterResponse{}
	_body, _err := client.ListMetaClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMetaDataSourceClusterForOuterWithOptions(request *ListMetaDataSourceClusterForOuterRequest, runtime *util.RuntimeOptions) (_result *ListMetaDataSourceClusterForOuterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListMetaDataSourceClusterForOuterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListMetaDataSourceClusterForOuter"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMetaDataSourceClusterForOuter(request *ListMetaDataSourceClusterForOuterRequest) (_result *ListMetaDataSourceClusterForOuterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMetaDataSourceClusterForOuterResponse{}
	_body, _err := client.ListMetaDataSourceClusterForOuterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListNotesWithOptions(request *ListNotesRequest, runtime *util.RuntimeOptions) (_result *ListNotesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListNotesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListNotes"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListNotes(request *ListNotesRequest) (_result *ListNotesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListNotesResponse{}
	_body, _err := client.ListNotesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListResourcePoolWithOptions(request *ListResourcePoolRequest, runtime *util.RuntimeOptions) (_result *ListResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListResourcePoolResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListResourcePool"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListResourcePool(request *ListResourcePoolRequest) (_result *ListResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListResourcePoolResponse{}
	_body, _err := client.ListResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListRolesWithOptions(request *ListRolesRequest, runtime *util.RuntimeOptions) (_result *ListRolesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListRolesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListRoles"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListRoles(request *ListRolesRequest) (_result *ListRolesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListRolesResponse{}
	_body, _err := client.ListRolesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScalingActivityV2WithOptions(request *ListScalingActivityV2Request, runtime *util.RuntimeOptions) (_result *ListScalingActivityV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListScalingActivityV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("ListScalingActivityV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScalingActivityV2(request *ListScalingActivityV2Request) (_result *ListScalingActivityV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScalingActivityV2Response{}
	_body, _err := client.ListScalingActivityV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScalingConfigItemV2WithOptions(request *ListScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *ListScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListScalingConfigItemV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("ListScalingConfigItemV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScalingConfigItemV2(request *ListScalingConfigItemV2Request) (_result *ListScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScalingConfigItemV2Response{}
	_body, _err := client.ListScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListScalingGroupV2WithOptions(request *ListScalingGroupV2Request, runtime *util.RuntimeOptions) (_result *ListScalingGroupV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListScalingGroupV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("ListScalingGroupV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListScalingGroupV2(request *ListScalingGroupV2Request) (_result *ListScalingGroupV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListScalingGroupV2Response{}
	_body, _err := client.ListScalingGroupV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListSecurityGroupWithOptions(request *ListSecurityGroupRequest, runtime *util.RuntimeOptions) (_result *ListSecurityGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListSecurityGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListSecurityGroup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListSecurityGroup(request *ListSecurityGroupRequest) (_result *ListSecurityGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListSecurityGroupResponse{}
	_body, _err := client.ListSecurityGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListStackWithOptions(request *ListStackRequest, runtime *util.RuntimeOptions) (_result *ListStackResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListStackResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListStack"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListStack(request *ListStackRequest) (_result *ListStackResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListStackResponse{}
	_body, _err := client.ListStackWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagKeysWithOptions(request *ListTagKeysRequest, runtime *util.RuntimeOptions) (_result *ListTagKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListTagKeysResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListTagKeys"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagKeys(request *ListTagKeysRequest) (_result *ListTagKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagKeysResponse{}
	_body, _err := client.ListTagKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListTagResources"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTagValuesWithOptions(request *ListTagValuesRequest, runtime *util.RuntimeOptions) (_result *ListTagValuesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListTagValuesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListTagValues"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTagValues(request *ListTagValuesRequest) (_result *ListTagValuesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagValuesResponse{}
	_body, _err := client.ListTagValuesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListUsersWithOptions(request *ListUsersRequest, runtime *util.RuntimeOptions) (_result *ListUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListUsersResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListUsers"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListUsers(request *ListUsersRequest) (_result *ListUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListUsersResponse{}
	_body, _err := client.ListUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListVswitchWithOptions(request *ListVswitchRequest, runtime *util.RuntimeOptions) (_result *ListVswitchResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListVswitchResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListVswitch"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListVswitch(request *ListVswitchRequest) (_result *ListVswitchResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListVswitchResponse{}
	_body, _err := client.ListVswitchWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterBootstrapActionWithOptions(request *ModifyClusterBootstrapActionRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterBootstrapActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyClusterBootstrapActionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyClusterBootstrapAction"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterBootstrapAction(request *ModifyClusterBootstrapActionRequest) (_result *ModifyClusterBootstrapActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterBootstrapActionResponse{}
	_body, _err := client.ModifyClusterBootstrapActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterHostGroupWithOptions(request *ModifyClusterHostGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyClusterHostGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyClusterHostGroup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterHostGroup(request *ModifyClusterHostGroupRequest) (_result *ModifyClusterHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterHostGroupResponse{}
	_body, _err := client.ModifyClusterHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterMetaCollectWithOptions(request *ModifyClusterMetaCollectRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterMetaCollectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyClusterMetaCollectResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyClusterMetaCollect"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterMetaCollect(request *ModifyClusterMetaCollectRequest) (_result *ModifyClusterMetaCollectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterMetaCollectResponse{}
	_body, _err := client.ModifyClusterMetaCollectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterNameWithOptions(request *ModifyClusterNameRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyClusterNameResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyClusterName"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterName(request *ModifyClusterNameRequest) (_result *ModifyClusterNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterNameResponse{}
	_body, _err := client.ModifyClusterNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterSecurityGroupRuleWithOptions(request *ModifyClusterSecurityGroupRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterSecurityGroupRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyClusterSecurityGroupRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyClusterSecurityGroupRule"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterSecurityGroupRule(request *ModifyClusterSecurityGroupRuleRequest) (_result *ModifyClusterSecurityGroupRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterSecurityGroupRuleResponse{}
	_body, _err := client.ModifyClusterSecurityGroupRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterServiceConfigWithOptions(request *ModifyClusterServiceConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterServiceConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyClusterServiceConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyClusterServiceConfig"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterServiceConfig(request *ModifyClusterServiceConfigRequest) (_result *ModifyClusterServiceConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterServiceConfigResponse{}
	_body, _err := client.ModifyClusterServiceConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyClusterTemplateWithOptions(request *ModifyClusterTemplateRequest, runtime *util.RuntimeOptions) (_result *ModifyClusterTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyClusterTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyClusterTemplate"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyClusterTemplate(request *ModifyClusterTemplateRequest) (_result *ModifyClusterTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyClusterTemplateResponse{}
	_body, _err := client.ModifyClusterTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyExecutionPlanWithOptions(request *ModifyExecutionPlanRequest, runtime *util.RuntimeOptions) (_result *ModifyExecutionPlanResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyExecutionPlanResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyExecutionPlan"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyExecutionPlan(request *ModifyExecutionPlanRequest) (_result *ModifyExecutionPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyExecutionPlanResponse{}
	_body, _err := client.ModifyExecutionPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowWithOptions(request *ModifyFlowRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlow(request *ModifyFlowRequest) (_result *ModifyFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowResponse{}
	_body, _err := client.ModifyFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowCategoryWithOptions(request *ModifyFlowCategoryRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyFlowCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyFlowCategory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowCategory(request *ModifyFlowCategoryRequest) (_result *ModifyFlowCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowCategoryResponse{}
	_body, _err := client.ModifyFlowCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowForWebWithOptions(request *ModifyFlowForWebRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowForWebResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyFlowForWebResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyFlowForWeb"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowForWeb(request *ModifyFlowForWebRequest) (_result *ModifyFlowForWebResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowForWebResponse{}
	_body, _err := client.ModifyFlowForWebWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowJobWithOptions(request *ModifyFlowJobRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyFlowJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyFlowJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowJob(request *ModifyFlowJobRequest) (_result *ModifyFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowJobResponse{}
	_body, _err := client.ModifyFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowProjectWithOptions(request *ModifyFlowProjectRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyFlowProjectResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyFlowProject"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowProject(request *ModifyFlowProjectRequest) (_result *ModifyFlowProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowProjectResponse{}
	_body, _err := client.ModifyFlowProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyFlowProjectClusterSettingWithOptions(request *ModifyFlowProjectClusterSettingRequest, runtime *util.RuntimeOptions) (_result *ModifyFlowProjectClusterSettingResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyFlowProjectClusterSettingResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyFlowProjectClusterSetting"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyFlowProjectClusterSetting(request *ModifyFlowProjectClusterSettingRequest) (_result *ModifyFlowProjectClusterSettingResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyFlowProjectClusterSettingResponse{}
	_body, _err := client.ModifyFlowProjectClusterSettingWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyJobWithOptions(request *ModifyJobRequest, runtime *util.RuntimeOptions) (_result *ModifyJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyJob(request *ModifyJobRequest) (_result *ModifyJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyJobResponse{}
	_body, _err := client.ModifyJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourcePoolWithOptions(request *ModifyResourcePoolRequest, runtime *util.RuntimeOptions) (_result *ModifyResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyResourcePoolResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyResourcePool"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourcePool(request *ModifyResourcePoolRequest) (_result *ModifyResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourcePoolResponse{}
	_body, _err := client.ModifyResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourcePoolSchedulerTypeWithOptions(request *ModifyResourcePoolSchedulerTypeRequest, runtime *util.RuntimeOptions) (_result *ModifyResourcePoolSchedulerTypeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyResourcePoolSchedulerTypeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyResourcePoolSchedulerType"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourcePoolSchedulerType(request *ModifyResourcePoolSchedulerTypeRequest) (_result *ModifyResourcePoolSchedulerTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourcePoolSchedulerTypeResponse{}
	_body, _err := client.ModifyResourcePoolSchedulerTypeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyResourceQueueWithOptions(request *ModifyResourceQueueRequest, runtime *util.RuntimeOptions) (_result *ModifyResourceQueueResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyResourceQueueResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyResourceQueue"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyResourceQueue(request *ModifyResourceQueueRequest) (_result *ModifyResourceQueueResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyResourceQueueResponse{}
	_body, _err := client.ModifyResourceQueueWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScalingConfigItemV2WithOptions(request *ModifyScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *ModifyScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyScalingConfigItemV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyScalingConfigItemV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScalingConfigItemV2(request *ModifyScalingConfigItemV2Request) (_result *ModifyScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScalingConfigItemV2Response{}
	_body, _err := client.ModifyScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScalingGroupV2WithOptions(request *ModifyScalingGroupV2Request, runtime *util.RuntimeOptions) (_result *ModifyScalingGroupV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyScalingGroupV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyScalingGroupV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScalingGroupV2(request *ModifyScalingGroupV2Request) (_result *ModifyScalingGroupV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScalingGroupV2Response{}
	_body, _err := client.ModifyScalingGroupV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScalingRuleWithOptions(request *ModifyScalingRuleRequest, runtime *util.RuntimeOptions) (_result *ModifyScalingRuleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyScalingRuleResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyScalingRule"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScalingRule(request *ModifyScalingRuleRequest) (_result *ModifyScalingRuleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScalingRuleResponse{}
	_body, _err := client.ModifyScalingRuleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ModifyScalingTaskGroupWithOptions(request *ModifyScalingTaskGroupRequest, runtime *util.RuntimeOptions) (_result *ModifyScalingTaskGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ModifyScalingTaskGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ModifyScalingTaskGroup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ModifyScalingTaskGroup(request *ModifyScalingTaskGroupRequest) (_result *ModifyScalingTaskGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyScalingTaskGroupResponse{}
	_body, _err := client.ModifyScalingTaskGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAlarmHistoryWithOptions(request *QueryAlarmHistoryRequest, runtime *util.RuntimeOptions) (_result *QueryAlarmHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryAlarmHistoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryAlarmHistory"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAlarmHistory(request *QueryAlarmHistoryRequest) (_result *QueryAlarmHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAlarmHistoryResponse{}
	_body, _err := client.QueryAlarmHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEntityWithOptions(request *QueryEntityRequest, runtime *util.RuntimeOptions) (_result *QueryEntityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEntityResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEntity"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEntity(request *QueryEntityRequest) (_result *QueryEntityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEntityResponse{}
	_body, _err := client.QueryEntityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTableDataWithOptions(request *QueryTableDataRequest, runtime *util.RuntimeOptions) (_result *QueryTableDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTableDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTableData"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTableData(request *QueryTableDataRequest) (_result *QueryTableDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTableDataResponse{}
	_body, _err := client.QueryTableDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTagWithOptions(request *QueryTagRequest, runtime *util.RuntimeOptions) (_result *QueryTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTagResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTag"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTag(request *QueryTagRequest) (_result *QueryTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTagResponse{}
	_body, _err := client.QueryTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTrendDataWithOptions(request *QueryTrendDataRequest, runtime *util.RuntimeOptions) (_result *QueryTrendDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTrendDataResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTrendData"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTrendData(request *QueryTrendDataRequest) (_result *QueryTrendDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTrendDataResponse{}
	_body, _err := client.QueryTrendDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefreshClusterResourcePoolWithOptions(request *RefreshClusterResourcePoolRequest, runtime *util.RuntimeOptions) (_result *RefreshClusterResourcePoolResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RefreshClusterResourcePoolResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RefreshClusterResourcePool"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefreshClusterResourcePool(request *RefreshClusterResourcePoolRequest) (_result *RefreshClusterResourcePoolResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshClusterResourcePoolResponse{}
	_body, _err := client.RefreshClusterResourcePoolWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseClusterWithOptions(request *ReleaseClusterRequest, runtime *util.RuntimeOptions) (_result *ReleaseClusterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseClusterResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseCluster"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseCluster(request *ReleaseClusterRequest) (_result *ReleaseClusterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseClusterResponse{}
	_body, _err := client.ReleaseClusterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseClusterByTemplateTagForInternalWithOptions(request *ReleaseClusterByTemplateTagForInternalRequest, runtime *util.RuntimeOptions) (_result *ReleaseClusterByTemplateTagForInternalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseClusterByTemplateTagForInternalResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseClusterByTemplateTagForInternal"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseClusterByTemplateTagForInternal(request *ReleaseClusterByTemplateTagForInternalRequest) (_result *ReleaseClusterByTemplateTagForInternalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseClusterByTemplateTagForInternalResponse{}
	_body, _err := client.ReleaseClusterByTemplateTagForInternalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReleaseClusterHostGroupWithOptions(request *ReleaseClusterHostGroupRequest, runtime *util.RuntimeOptions) (_result *ReleaseClusterHostGroupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReleaseClusterHostGroupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReleaseClusterHostGroup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReleaseClusterHostGroup(request *ReleaseClusterHostGroupRequest) (_result *ReleaseClusterHostGroupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReleaseClusterHostGroupResponse{}
	_body, _err := client.ReleaseClusterHostGroupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RemoveScalingConfigItemV2WithOptions(request *RemoveScalingConfigItemV2Request, runtime *util.RuntimeOptions) (_result *RemoveScalingConfigItemV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RemoveScalingConfigItemV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("RemoveScalingConfigItemV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RemoveScalingConfigItemV2(request *RemoveScalingConfigItemV2Request) (_result *RemoveScalingConfigItemV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RemoveScalingConfigItemV2Response{}
	_body, _err := client.RemoveScalingConfigItemV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RerunFlowWithOptions(request *RerunFlowRequest, runtime *util.RuntimeOptions) (_result *RerunFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RerunFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RerunFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RerunFlow(request *RerunFlowRequest) (_result *RerunFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RerunFlowResponse{}
	_body, _err := client.RerunFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResizeClusterV2WithOptions(request *ResizeClusterV2Request, runtime *util.RuntimeOptions) (_result *ResizeClusterV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResizeClusterV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("ResizeClusterV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResizeClusterV2(request *ResizeClusterV2Request) (_result *ResizeClusterV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResizeClusterV2Response{}
	_body, _err := client.ResizeClusterV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestoreBackupWithOptions(request *RestoreBackupRequest, runtime *util.RuntimeOptions) (_result *RestoreBackupResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RestoreBackupResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RestoreBackup"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestoreBackup(request *RestoreBackupRequest) (_result *RestoreBackupResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestoreBackupResponse{}
	_body, _err := client.RestoreBackupWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RestoreFlowEntitySnapshotWithOptions(request *RestoreFlowEntitySnapshotRequest, runtime *util.RuntimeOptions) (_result *RestoreFlowEntitySnapshotResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RestoreFlowEntitySnapshotResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RestoreFlowEntitySnapshot"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RestoreFlowEntitySnapshot(request *RestoreFlowEntitySnapshotRequest) (_result *RestoreFlowEntitySnapshotResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RestoreFlowEntitySnapshotResponse{}
	_body, _err := client.RestoreFlowEntitySnapshotWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeExecutionPlanSchedulerWithOptions(request *ResumeExecutionPlanSchedulerRequest, runtime *util.RuntimeOptions) (_result *ResumeExecutionPlanSchedulerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResumeExecutionPlanSchedulerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResumeExecutionPlanScheduler"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeExecutionPlanScheduler(request *ResumeExecutionPlanSchedulerRequest) (_result *ResumeExecutionPlanSchedulerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeExecutionPlanSchedulerResponse{}
	_body, _err := client.ResumeExecutionPlanSchedulerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ResumeFlowWithOptions(request *ResumeFlowRequest, runtime *util.RuntimeOptions) (_result *ResumeFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ResumeFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ResumeFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ResumeFlow(request *ResumeFlowRequest) (_result *ResumeFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResumeFlowResponse{}
	_body, _err := client.ResumeFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RetryOperationWithOptions(request *RetryOperationRequest, runtime *util.RuntimeOptions) (_result *RetryOperationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RetryOperationResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RetryOperation"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RetryOperation(request *RetryOperationRequest) (_result *RetryOperationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RetryOperationResponse{}
	_body, _err := client.RetryOperationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunClusterServiceActionWithOptions(request *RunClusterServiceActionRequest, runtime *util.RuntimeOptions) (_result *RunClusterServiceActionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RunClusterServiceActionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RunClusterServiceAction"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunClusterServiceAction(request *RunClusterServiceActionRequest) (_result *RunClusterServiceActionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunClusterServiceActionResponse{}
	_body, _err := client.RunClusterServiceActionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunExecutionPlanWithOptions(tmpReq *RunExecutionPlanRequest, runtime *util.RuntimeOptions) (_result *RunExecutionPlanResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &RunExecutionPlanShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.Arguments)) {
		request.ArgumentsShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.Arguments, tea.String("Arguments"), tea.String("json"))
	}

	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RunExecutionPlanResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RunExecutionPlan"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunExecutionPlan(request *RunExecutionPlanRequest) (_result *RunExecutionPlanResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunExecutionPlanResponse{}
	_body, _err := client.RunExecutionPlanWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RunScalingActionV2WithOptions(request *RunScalingActionV2Request, runtime *util.RuntimeOptions) (_result *RunScalingActionV2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RunScalingActionV2Response{}
	_body, _err := client.DoRPCRequest(tea.String("RunScalingActionV2"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RunScalingActionV2(request *RunScalingActionV2Request) (_result *RunScalingActionV2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunScalingActionV2Response{}
	_body, _err := client.RunScalingActionV2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchLogWithOptions(request *SearchLogRequest, runtime *util.RuntimeOptions) (_result *SearchLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SearchLogResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SearchLog"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchLog(request *SearchLogRequest) (_result *SearchLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchLogResponse{}
	_body, _err := client.SearchLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StartFlowWithOptions(request *StartFlowRequest, runtime *util.RuntimeOptions) (_result *StartFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StartFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StartFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StartFlow(request *StartFlowRequest) (_result *StartFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartFlowResponse{}
	_body, _err := client.StartFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFlowWithOptions(request *SubmitFlowRequest, runtime *util.RuntimeOptions) (_result *SubmitFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFlow(request *SubmitFlowRequest) (_result *SubmitFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFlowResponse{}
	_body, _err := client.SubmitFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFlowJobWithOptions(request *SubmitFlowJobRequest, runtime *util.RuntimeOptions) (_result *SubmitFlowJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitFlowJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitFlowJob"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFlowJob(request *SubmitFlowJobRequest) (_result *SubmitFlowJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFlowJobResponse{}
	_body, _err := client.SubmitFlowJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SuspendExecutionPlanSchedulerWithOptions(request *SuspendExecutionPlanSchedulerRequest, runtime *util.RuntimeOptions) (_result *SuspendExecutionPlanSchedulerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SuspendExecutionPlanSchedulerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SuspendExecutionPlanScheduler"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SuspendExecutionPlanScheduler(request *SuspendExecutionPlanSchedulerRequest) (_result *SuspendExecutionPlanSchedulerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendExecutionPlanSchedulerResponse{}
	_body, _err := client.SuspendExecutionPlanSchedulerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SuspendFlowWithOptions(request *SuspendFlowRequest, runtime *util.RuntimeOptions) (_result *SuspendFlowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SuspendFlowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SuspendFlow"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SuspendFlow(request *SuspendFlowRequest) (_result *SuspendFlowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SuspendFlowResponse{}
	_body, _err := client.SuspendFlowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TagResources"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagResourcesSystemTagsWithOptions(request *TagResourcesSystemTagsRequest, runtime *util.RuntimeOptions) (_result *TagResourcesSystemTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TagResourcesSystemTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TagResourcesSystemTags"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagResourcesSystemTags(request *TagResourcesSystemTagsRequest) (_result *TagResourcesSystemTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesSystemTagsResponse{}
	_body, _err := client.TagResourcesSystemTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UninstallLibrariesWithOptions(request *UninstallLibrariesRequest, runtime *util.RuntimeOptions) (_result *UninstallLibrariesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UninstallLibrariesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UninstallLibraries"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UninstallLibraries(request *UninstallLibrariesRequest) (_result *UninstallLibrariesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UninstallLibrariesResponse{}
	_body, _err := client.UninstallLibrariesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UntagResources"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UntagResourcesSystemTagsWithOptions(request *UntagResourcesSystemTagsRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesSystemTagsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UntagResourcesSystemTagsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UntagResourcesSystemTags"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UntagResourcesSystemTags(request *UntagResourcesSystemTagsRequest) (_result *UntagResourcesSystemTagsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesSystemTagsResponse{}
	_body, _err := client.UntagResourcesSystemTagsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateDataSourceWithOptions(request *UpdateDataSourceRequest, runtime *util.RuntimeOptions) (_result *UpdateDataSourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateDataSource"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateDataSource(request *UpdateDataSourceRequest) (_result *UpdateDataSourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateDataSourceResponse{}
	_body, _err := client.UpdateDataSourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateLibraryInstallTaskStatusWithOptions(request *UpdateLibraryInstallTaskStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateLibraryInstallTaskStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateLibraryInstallTaskStatusResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateLibraryInstallTaskStatus"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateLibraryInstallTaskStatus(request *UpdateLibraryInstallTaskStatusRequest) (_result *UpdateLibraryInstallTaskStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateLibraryInstallTaskStatusResponse{}
	_body, _err := client.UpdateLibraryInstallTaskStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTagWithOptions(request *UpdateTagRequest, runtime *util.RuntimeOptions) (_result *UpdateTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateTagResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateTag"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTag(request *UpdateTagRequest) (_result *UpdateTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTagResponse{}
	_body, _err := client.UpdateTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateUserWithOptions(request *UpdateUserRequest, runtime *util.RuntimeOptions) (_result *UpdateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateUserResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateUser"), tea.String("2016-04-08"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateUser(request *UpdateUserRequest) (_result *UpdateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateUserResponse{}
	_body, _err := client.UpdateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
