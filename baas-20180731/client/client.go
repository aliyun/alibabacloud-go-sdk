// This file is auto-generated, don't edit it. Thanks.
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type AntChainPurposeResponse struct {
	ChainPurposeExtend *string         `json:"ChainPurposeExtend,omitempty" xml:"ChainPurposeExtend,omitempty"`
	ChainPurposeItem   *string         `json:"ChainPurposeItem,omitempty" xml:"ChainPurposeItem,omitempty"`
	CreateTime         *string         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Purpose            *string         `json:"Purpose,omitempty" xml:"Purpose,omitempty"`
	RecordList         []*ChainPurpose `json:"RecordList,omitempty" xml:"RecordList,omitempty" type:"Repeated"`
	Status             *string         `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AntChainPurposeResponse) String() string {
	return tea.Prettify(s)
}

func (s AntChainPurposeResponse) GoString() string {
	return s.String()
}

func (s *AntChainPurposeResponse) SetChainPurposeExtend(v string) *AntChainPurposeResponse {
	s.ChainPurposeExtend = &v
	return s
}

func (s *AntChainPurposeResponse) SetChainPurposeItem(v string) *AntChainPurposeResponse {
	s.ChainPurposeItem = &v
	return s
}

func (s *AntChainPurposeResponse) SetCreateTime(v string) *AntChainPurposeResponse {
	s.CreateTime = &v
	return s
}

func (s *AntChainPurposeResponse) SetPurpose(v string) *AntChainPurposeResponse {
	s.Purpose = &v
	return s
}

func (s *AntChainPurposeResponse) SetRecordList(v []*ChainPurpose) *AntChainPurposeResponse {
	s.RecordList = v
	return s
}

func (s *AntChainPurposeResponse) SetStatus(v string) *AntChainPurposeResponse {
	s.Status = &v
	return s
}

type AntChainPurposeResponseAli struct {
	RecordList []*ChainPurposeInfoAli `json:"RecordList,omitempty" xml:"RecordList,omitempty" type:"Repeated"`
	Status     *string                `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s AntChainPurposeResponseAli) String() string {
	return tea.Prettify(s)
}

func (s AntChainPurposeResponseAli) GoString() string {
	return s.String()
}

func (s *AntChainPurposeResponseAli) SetRecordList(v []*ChainPurposeInfoAli) *AntChainPurposeResponseAli {
	s.RecordList = v
	return s
}

func (s *AntChainPurposeResponseAli) SetStatus(v string) *AntChainPurposeResponseAli {
	s.Status = &v
	return s
}

type ChainPurpose struct {
	Extend      *bool   `json:"Extend,omitempty" xml:"Extend,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Item        *bool   `json:"Item,omitempty" xml:"Item,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PurposeItem *string `json:"PurposeItem,omitempty" xml:"PurposeItem,omitempty"`
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Time        *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s ChainPurpose) String() string {
	return tea.Prettify(s)
}

func (s ChainPurpose) GoString() string {
	return s.String()
}

func (s *ChainPurpose) SetExtend(v bool) *ChainPurpose {
	s.Extend = &v
	return s
}

func (s *ChainPurpose) SetId(v string) *ChainPurpose {
	s.Id = &v
	return s
}

func (s *ChainPurpose) SetItem(v bool) *ChainPurpose {
	s.Item = &v
	return s
}

func (s *ChainPurpose) SetKey(v string) *ChainPurpose {
	s.Key = &v
	return s
}

func (s *ChainPurpose) SetName(v string) *ChainPurpose {
	s.Name = &v
	return s
}

func (s *ChainPurpose) SetPurposeItem(v string) *ChainPurpose {
	s.PurposeItem = &v
	return s
}

func (s *ChainPurpose) SetStatus(v string) *ChainPurpose {
	s.Status = &v
	return s
}

func (s *ChainPurpose) SetTime(v string) *ChainPurpose {
	s.Time = &v
	return s
}

type ChainPurposeInfoAli struct {
	ChainPurposeExtend *string `json:"ChainPurposeExtend,omitempty" xml:"ChainPurposeExtend,omitempty"`
	ChainPurposeItem   *string `json:"ChainPurposeItem,omitempty" xml:"ChainPurposeItem,omitempty"`
	Id                 *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Key                *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Purpose            *string `json:"Purpose,omitempty" xml:"Purpose,omitempty"`
	Status             *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Time               *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s ChainPurposeInfoAli) String() string {
	return tea.Prettify(s)
}

func (s ChainPurposeInfoAli) GoString() string {
	return s.String()
}

func (s *ChainPurposeInfoAli) SetChainPurposeExtend(v string) *ChainPurposeInfoAli {
	s.ChainPurposeExtend = &v
	return s
}

func (s *ChainPurposeInfoAli) SetChainPurposeItem(v string) *ChainPurposeInfoAli {
	s.ChainPurposeItem = &v
	return s
}

func (s *ChainPurposeInfoAli) SetId(v string) *ChainPurposeInfoAli {
	s.Id = &v
	return s
}

func (s *ChainPurposeInfoAli) SetKey(v string) *ChainPurposeInfoAli {
	s.Key = &v
	return s
}

func (s *ChainPurposeInfoAli) SetPurpose(v string) *ChainPurposeInfoAli {
	s.Purpose = &v
	return s
}

func (s *ChainPurposeInfoAli) SetStatus(v string) *ChainPurposeInfoAli {
	s.Status = &v
	return s
}

func (s *ChainPurposeInfoAli) SetTime(v string) *ChainPurposeInfoAli {
	s.Time = &v
	return s
}

type ChainPurposeListAli struct {
	// example:
	//
	// false
	Extend *bool `json:"Extend,omitempty" xml:"Extend,omitempty"`
	// example:
	//
	// 10001
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// false
	Item *bool `json:"Item,omitempty" xml:"Item,omitempty"`
	// example:
	//
	// FIN
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// example:
	//
	// 金融
	Purpose *string `json:"Purpose,omitempty" xml:"Purpose,omitempty"`
}

func (s ChainPurposeListAli) String() string {
	return tea.Prettify(s)
}

func (s ChainPurposeListAli) GoString() string {
	return s.String()
}

func (s *ChainPurposeListAli) SetExtend(v bool) *ChainPurposeListAli {
	s.Extend = &v
	return s
}

func (s *ChainPurposeListAli) SetId(v string) *ChainPurposeListAli {
	s.Id = &v
	return s
}

func (s *ChainPurposeListAli) SetItem(v bool) *ChainPurposeListAli {
	s.Item = &v
	return s
}

func (s *ChainPurposeListAli) SetKey(v string) *ChainPurposeListAli {
	s.Key = &v
	return s
}

func (s *ChainPurposeListAli) SetPurpose(v string) *ChainPurposeListAli {
	s.Purpose = &v
	return s
}

type CheckPointStructBody struct {
	ErrorCount *string `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	Height     *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Index      *string `json:"Index,omitempty" xml:"Index,omitempty"`
	LastError  *string `json:"LastError,omitempty" xml:"LastError,omitempty"`
	TotalCount *string `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CheckPointStructBody) String() string {
	return tea.Prettify(s)
}

func (s CheckPointStructBody) GoString() string {
	return s.String()
}

func (s *CheckPointStructBody) SetErrorCount(v string) *CheckPointStructBody {
	s.ErrorCount = &v
	return s
}

func (s *CheckPointStructBody) SetHeight(v string) *CheckPointStructBody {
	s.Height = &v
	return s
}

func (s *CheckPointStructBody) SetIndex(v string) *CheckPointStructBody {
	s.Index = &v
	return s
}

func (s *CheckPointStructBody) SetLastError(v string) *CheckPointStructBody {
	s.LastError = &v
	return s
}

func (s *CheckPointStructBody) SetTotalCount(v string) *CheckPointStructBody {
	s.TotalCount = &v
	return s
}

func (s *CheckPointStructBody) SetType(v string) *CheckPointStructBody {
	s.Type = &v
	return s
}

type CommonResponsePageableStructBody struct {
	Current  *string                    `json:"Current,omitempty" xml:"Current,omitempty"`
	List     []*TriggerLogDTOStructBody `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	PageSize *string                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *string                    `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s CommonResponsePageableStructBody) String() string {
	return tea.Prettify(s)
}

func (s CommonResponsePageableStructBody) GoString() string {
	return s.String()
}

func (s *CommonResponsePageableStructBody) SetCurrent(v string) *CommonResponsePageableStructBody {
	s.Current = &v
	return s
}

func (s *CommonResponsePageableStructBody) SetList(v []*TriggerLogDTOStructBody) *CommonResponsePageableStructBody {
	s.List = v
	return s
}

func (s *CommonResponsePageableStructBody) SetPageSize(v string) *CommonResponsePageableStructBody {
	s.PageSize = &v
	return s
}

func (s *CommonResponsePageableStructBody) SetTotal(v string) *CommonResponsePageableStructBody {
	s.Total = &v
	return s
}

type PositionStructBody struct {
	ErrorCount *string `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	Height     *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Index      *string `json:"Index,omitempty" xml:"Index,omitempty"`
	LastError  *string `json:"LastError,omitempty" xml:"LastError,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s PositionStructBody) String() string {
	return tea.Prettify(s)
}

func (s PositionStructBody) GoString() string {
	return s.String()
}

func (s *PositionStructBody) SetErrorCount(v string) *PositionStructBody {
	s.ErrorCount = &v
	return s
}

func (s *PositionStructBody) SetHeight(v string) *PositionStructBody {
	s.Height = &v
	return s
}

func (s *PositionStructBody) SetIndex(v string) *PositionStructBody {
	s.Index = &v
	return s
}

func (s *PositionStructBody) SetLastError(v string) *PositionStructBody {
	s.LastError = &v
	return s
}

func (s *PositionStructBody) SetType(v string) *PositionStructBody {
	s.Type = &v
	return s
}

type TriggerDTOStructBody struct {
	Checkpoint       *CheckPointStructBody `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty"`
	CreateTime       *string               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorMessage     *string               `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Name             *string               `json:"Name,omitempty" xml:"Name,omitempty"`
	Option           *string               `json:"Option,omitempty" xml:"Option,omitempty"`
	PendingErrorLogs *string               `json:"PendingErrorLogs,omitempty" xml:"PendingErrorLogs,omitempty"`
	Source           *string               `json:"Source,omitempty" xml:"Source,omitempty"`
	Status           *string               `json:"Status,omitempty" xml:"Status,omitempty"`
	Type             *string               `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s TriggerDTOStructBody) String() string {
	return tea.Prettify(s)
}

func (s TriggerDTOStructBody) GoString() string {
	return s.String()
}

func (s *TriggerDTOStructBody) SetCheckpoint(v *CheckPointStructBody) *TriggerDTOStructBody {
	s.Checkpoint = v
	return s
}

func (s *TriggerDTOStructBody) SetCreateTime(v string) *TriggerDTOStructBody {
	s.CreateTime = &v
	return s
}

func (s *TriggerDTOStructBody) SetErrorMessage(v string) *TriggerDTOStructBody {
	s.ErrorMessage = &v
	return s
}

func (s *TriggerDTOStructBody) SetName(v string) *TriggerDTOStructBody {
	s.Name = &v
	return s
}

func (s *TriggerDTOStructBody) SetOption(v string) *TriggerDTOStructBody {
	s.Option = &v
	return s
}

func (s *TriggerDTOStructBody) SetPendingErrorLogs(v string) *TriggerDTOStructBody {
	s.PendingErrorLogs = &v
	return s
}

func (s *TriggerDTOStructBody) SetSource(v string) *TriggerDTOStructBody {
	s.Source = &v
	return s
}

func (s *TriggerDTOStructBody) SetStatus(v string) *TriggerDTOStructBody {
	s.Status = &v
	return s
}

func (s *TriggerDTOStructBody) SetType(v string) *TriggerDTOStructBody {
	s.Type = &v
	return s
}

type TriggerLogDTOStructBody struct {
	CreateTime *string             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ModifyTime *string             `json:"ModifyTime,omitempty" xml:"ModifyTime,omitempty"`
	Position   *PositionStructBody `json:"Position,omitempty" xml:"Position,omitempty"`
	Status     *string             `json:"Status,omitempty" xml:"Status,omitempty"`
	Uuid       *string             `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s TriggerLogDTOStructBody) String() string {
	return tea.Prettify(s)
}

func (s TriggerLogDTOStructBody) GoString() string {
	return s.String()
}

func (s *TriggerLogDTOStructBody) SetCreateTime(v string) *TriggerLogDTOStructBody {
	s.CreateTime = &v
	return s
}

func (s *TriggerLogDTOStructBody) SetModifyTime(v string) *TriggerLogDTOStructBody {
	s.ModifyTime = &v
	return s
}

func (s *TriggerLogDTOStructBody) SetPosition(v *PositionStructBody) *TriggerLogDTOStructBody {
	s.Position = v
	return s
}

func (s *TriggerLogDTOStructBody) SetStatus(v string) *TriggerLogDTOStructBody {
	s.Status = &v
	return s
}

func (s *TriggerLogDTOStructBody) SetUuid(v string) *TriggerLogDTOStructBody {
	s.Uuid = &v
	return s
}

type AcceptEthereumInvitationRequest struct {
	// This parameter is required.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// This parameter is required.
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s AcceptEthereumInvitationRequest) String() string {
	return tea.Prettify(s)
}

func (s AcceptEthereumInvitationRequest) GoString() string {
	return s.String()
}

func (s *AcceptEthereumInvitationRequest) SetCode(v string) *AcceptEthereumInvitationRequest {
	s.Code = &v
	return s
}

func (s *AcceptEthereumInvitationRequest) SetToken(v string) *AcceptEthereumInvitationRequest {
	s.Token = &v
	return s
}

type AcceptEthereumInvitationResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AcceptEthereumInvitationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AcceptEthereumInvitationResponseBody) GoString() string {
	return s.String()
}

func (s *AcceptEthereumInvitationResponseBody) SetErrorCode(v int32) *AcceptEthereumInvitationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AcceptEthereumInvitationResponseBody) SetRequestId(v string) *AcceptEthereumInvitationResponseBody {
	s.RequestId = &v
	return s
}

func (s *AcceptEthereumInvitationResponseBody) SetResult(v string) *AcceptEthereumInvitationResponseBody {
	s.Result = &v
	return s
}

func (s *AcceptEthereumInvitationResponseBody) SetSuccess(v bool) *AcceptEthereumInvitationResponseBody {
	s.Success = &v
	return s
}

type AcceptEthereumInvitationResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AcceptEthereumInvitationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AcceptEthereumInvitationResponse) String() string {
	return tea.Prettify(s)
}

func (s AcceptEthereumInvitationResponse) GoString() string {
	return s.String()
}

func (s *AcceptEthereumInvitationResponse) SetHeaders(v map[string]*string) *AcceptEthereumInvitationResponse {
	s.Headers = v
	return s
}

func (s *AcceptEthereumInvitationResponse) SetStatusCode(v int32) *AcceptEthereumInvitationResponse {
	s.StatusCode = &v
	return s
}

func (s *AcceptEthereumInvitationResponse) SetBody(v *AcceptEthereumInvitationResponseBody) *AcceptEthereumInvitationResponse {
	s.Body = v
	return s
}

type AcceptInvitationRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// bank
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// true
	IsAccepted *bool `json:"IsAccepted,omitempty" xml:"IsAccepted,omitempty"`
}

func (s AcceptInvitationRequest) String() string {
	return tea.Prettify(s)
}

func (s AcceptInvitationRequest) GoString() string {
	return s.String()
}

func (s *AcceptInvitationRequest) SetCode(v string) *AcceptInvitationRequest {
	s.Code = &v
	return s
}

func (s *AcceptInvitationRequest) SetIsAccepted(v bool) *AcceptInvitationRequest {
	s.IsAccepted = &v
	return s
}

type AcceptInvitationResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 3240E00A-F7B6-4B27-B8B9-E3F459071376
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AcceptInvitationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AcceptInvitationResponseBody) GoString() string {
	return s.String()
}

func (s *AcceptInvitationResponseBody) SetErrorCode(v int32) *AcceptInvitationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AcceptInvitationResponseBody) SetRequestId(v string) *AcceptInvitationResponseBody {
	s.RequestId = &v
	return s
}

func (s *AcceptInvitationResponseBody) SetSuccess(v bool) *AcceptInvitationResponseBody {
	s.Success = &v
	return s
}

type AcceptInvitationResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AcceptInvitationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AcceptInvitationResponse) String() string {
	return tea.Prettify(s)
}

func (s AcceptInvitationResponse) GoString() string {
	return s.String()
}

func (s *AcceptInvitationResponse) SetHeaders(v map[string]*string) *AcceptInvitationResponse {
	s.Headers = v
	return s
}

func (s *AcceptInvitationResponse) SetStatusCode(v int32) *AcceptInvitationResponse {
	s.StatusCode = &v
	return s
}

func (s *AcceptInvitationResponse) SetBody(v *AcceptInvitationResponseBody) *AcceptInvitationResponse {
	s.Body = v
	return s
}

type AddAntChainSubnetMemberCheckRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s AddAntChainSubnetMemberCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetMemberCheckRequest) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetMemberCheckRequest) SetAntChainId(v string) *AddAntChainSubnetMemberCheckRequest {
	s.AntChainId = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckRequest) SetConsortiumId(v string) *AddAntChainSubnetMemberCheckRequest {
	s.ConsortiumId = &v
	return s
}

type AddAntChainSubnetMemberCheckResponseBody struct {
	Code           *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *AddAntChainSubnetMemberCheckResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                         `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                         `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddAntChainSubnetMemberCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetMemberCheckResponseBody) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetMemberCheckResponseBody) SetCode(v string) *AddAntChainSubnetMemberCheckResponseBody {
	s.Code = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponseBody) SetHttpStatusCode(v string) *AddAntChainSubnetMemberCheckResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponseBody) SetMessage(v string) *AddAntChainSubnetMemberCheckResponseBody {
	s.Message = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponseBody) SetRequestId(v string) *AddAntChainSubnetMemberCheckResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponseBody) SetResult(v *AddAntChainSubnetMemberCheckResponseBodyResult) *AddAntChainSubnetMemberCheckResponseBody {
	s.Result = v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponseBody) SetResultCode(v string) *AddAntChainSubnetMemberCheckResponseBody {
	s.ResultCode = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponseBody) SetResultMessage(v string) *AddAntChainSubnetMemberCheckResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponseBody) SetSuccess(v bool) *AddAntChainSubnetMemberCheckResponseBody {
	s.Success = &v
	return s
}

type AddAntChainSubnetMemberCheckResponseBodyResult struct {
	ConsortiumMemberInfoList []*AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList `json:"ConsortiumMemberInfoList,omitempty" xml:"ConsortiumMemberInfoList,omitempty" type:"Repeated"`
}

func (s AddAntChainSubnetMemberCheckResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetMemberCheckResponseBodyResult) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetMemberCheckResponseBodyResult) SetConsortiumMemberInfoList(v []*AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList) *AddAntChainSubnetMemberCheckResponseBodyResult {
	s.ConsortiumMemberInfoList = v
	return s
}

type AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList struct {
	MemberId   *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	MemberName *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
}

func (s AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList) SetMemberId(v string) *AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList {
	s.MemberId = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList) SetMemberName(v string) *AddAntChainSubnetMemberCheckResponseBodyResultConsortiumMemberInfoList {
	s.MemberName = &v
	return s
}

type AddAntChainSubnetMemberCheckResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddAntChainSubnetMemberCheckResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddAntChainSubnetMemberCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetMemberCheckResponse) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetMemberCheckResponse) SetHeaders(v map[string]*string) *AddAntChainSubnetMemberCheckResponse {
	s.Headers = v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponse) SetStatusCode(v int32) *AddAntChainSubnetMemberCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAntChainSubnetMemberCheckResponse) SetBody(v *AddAntChainSubnetMemberCheckResponseBody) *AddAntChainSubnetMemberCheckResponse {
	s.Body = v
	return s
}

type AddAntChainSubnetNodeCheckRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s AddAntChainSubnetNodeCheckRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetNodeCheckRequest) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetNodeCheckRequest) SetAntChainId(v string) *AddAntChainSubnetNodeCheckRequest {
	s.AntChainId = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckRequest) SetConsortiumId(v string) *AddAntChainSubnetNodeCheckRequest {
	s.ConsortiumId = &v
	return s
}

type AddAntChainSubnetNodeCheckResponseBody struct {
	Code           *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                         `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         []*AddAntChainSubnetNodeCheckResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	ResultCode     *string                                         `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                         `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddAntChainSubnetNodeCheckResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetNodeCheckResponseBody) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetNodeCheckResponseBody) SetCode(v string) *AddAntChainSubnetNodeCheckResponseBody {
	s.Code = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponseBody) SetHttpStatusCode(v string) *AddAntChainSubnetNodeCheckResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponseBody) SetMessage(v string) *AddAntChainSubnetNodeCheckResponseBody {
	s.Message = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponseBody) SetRequestId(v string) *AddAntChainSubnetNodeCheckResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponseBody) SetResult(v []*AddAntChainSubnetNodeCheckResponseBodyResult) *AddAntChainSubnetNodeCheckResponseBody {
	s.Result = v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponseBody) SetResultCode(v string) *AddAntChainSubnetNodeCheckResponseBody {
	s.ResultCode = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponseBody) SetResultMessage(v string) *AddAntChainSubnetNodeCheckResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponseBody) SetSuccess(v bool) *AddAntChainSubnetNodeCheckResponseBody {
	s.Success = &v
	return s
}

type AddAntChainSubnetNodeCheckResponseBodyResult struct {
	NodeId   *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
}

func (s AddAntChainSubnetNodeCheckResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetNodeCheckResponseBodyResult) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetNodeCheckResponseBodyResult) SetNodeId(v string) *AddAntChainSubnetNodeCheckResponseBodyResult {
	s.NodeId = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponseBodyResult) SetNodeName(v string) *AddAntChainSubnetNodeCheckResponseBodyResult {
	s.NodeName = &v
	return s
}

type AddAntChainSubnetNodeCheckResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddAntChainSubnetNodeCheckResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddAntChainSubnetNodeCheckResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAntChainSubnetNodeCheckResponse) GoString() string {
	return s.String()
}

func (s *AddAntChainSubnetNodeCheckResponse) SetHeaders(v map[string]*string) *AddAntChainSubnetNodeCheckResponse {
	s.Headers = v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponse) SetStatusCode(v int32) *AddAntChainSubnetNodeCheckResponse {
	s.StatusCode = &v
	return s
}

func (s *AddAntChainSubnetNodeCheckResponse) SetBody(v *AddAntChainSubnetNodeCheckResponseBody) *AddAntChainSubnetNodeCheckResponse {
	s.Body = v
	return s
}

type AddEthereumNodeRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	EthereumId   *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
	ExternalNode *bool   `json:"ExternalNode,omitempty" xml:"ExternalNode,omitempty"`
	NodeName     *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
}

func (s AddEthereumNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s AddEthereumNodeRequest) GoString() string {
	return s.String()
}

func (s *AddEthereumNodeRequest) SetDescription(v string) *AddEthereumNodeRequest {
	s.Description = &v
	return s
}

func (s *AddEthereumNodeRequest) SetEthereumId(v string) *AddEthereumNodeRequest {
	s.EthereumId = &v
	return s
}

func (s *AddEthereumNodeRequest) SetExternalNode(v bool) *AddEthereumNodeRequest {
	s.ExternalNode = &v
	return s
}

func (s *AddEthereumNodeRequest) SetNodeName(v string) *AddEthereumNodeRequest {
	s.NodeName = &v
	return s
}

type AddEthereumNodeResponseBody struct {
	ErrorCode *int32                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *AddEthereumNodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddEthereumNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddEthereumNodeResponseBody) GoString() string {
	return s.String()
}

func (s *AddEthereumNodeResponseBody) SetErrorCode(v int32) *AddEthereumNodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddEthereumNodeResponseBody) SetRequestId(v string) *AddEthereumNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddEthereumNodeResponseBody) SetResult(v *AddEthereumNodeResponseBodyResult) *AddEthereumNodeResponseBody {
	s.Result = v
	return s
}

func (s *AddEthereumNodeResponseBody) SetSuccess(v bool) *AddEthereumNodeResponseBody {
	s.Success = &v
	return s
}

type AddEthereumNodeResponseBodyResult struct {
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator      *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EthereumId   *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
	EthereumName *string `json:"EthereumName,omitempty" xml:"EthereumName,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	NetworkId    *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NodeName     *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RpcPort      *int32  `json:"RpcPort,omitempty" xml:"RpcPort,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	WsPort       *int32  `json:"WsPort,omitempty" xml:"WsPort,omitempty"`
}

func (s AddEthereumNodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s AddEthereumNodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *AddEthereumNodeResponseBodyResult) SetCreateTime(v int64) *AddEthereumNodeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetCreator(v string) *AddEthereumNodeResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetDescription(v string) *AddEthereumNodeResponseBodyResult {
	s.Description = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetEthereumId(v string) *AddEthereumNodeResponseBodyResult {
	s.EthereumId = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetEthereumName(v string) *AddEthereumNodeResponseBodyResult {
	s.EthereumName = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetId(v string) *AddEthereumNodeResponseBodyResult {
	s.Id = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetNetworkId(v string) *AddEthereumNodeResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetNodeName(v string) *AddEthereumNodeResponseBodyResult {
	s.NodeName = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetPublicIp(v string) *AddEthereumNodeResponseBodyResult {
	s.PublicIp = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetRegionId(v string) *AddEthereumNodeResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetRpcPort(v int32) *AddEthereumNodeResponseBodyResult {
	s.RpcPort = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetState(v string) *AddEthereumNodeResponseBodyResult {
	s.State = &v
	return s
}

func (s *AddEthereumNodeResponseBodyResult) SetWsPort(v int32) *AddEthereumNodeResponseBodyResult {
	s.WsPort = &v
	return s
}

type AddEthereumNodeResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddEthereumNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddEthereumNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s AddEthereumNodeResponse) GoString() string {
	return s.String()
}

func (s *AddEthereumNodeResponse) SetHeaders(v map[string]*string) *AddEthereumNodeResponse {
	s.Headers = v
	return s
}

func (s *AddEthereumNodeResponse) SetStatusCode(v int32) *AddEthereumNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *AddEthereumNodeResponse) SetBody(v *AddEthereumNodeResponseBody) *AddEthereumNodeResponse {
	s.Body = v
	return s
}

type AddFabricExternalOrganizationToChannelRequest struct {
	// This parameter is required.
	ChannelId   *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	JoinRequest *string `json:"JoinRequest,omitempty" xml:"JoinRequest,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelRequest) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelRequest) SetChannelId(v string) *AddFabricExternalOrganizationToChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelRequest) SetDescription(v string) *AddFabricExternalOrganizationToChannelRequest {
	s.Description = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelRequest) SetJoinRequest(v string) *AddFabricExternalOrganizationToChannelRequest {
	s.JoinRequest = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelRequest) SetOrganizationId(v string) *AddFabricExternalOrganizationToChannelRequest {
	s.OrganizationId = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBody struct {
	ErrorCode *int32                                                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *AddFabricExternalOrganizationToChannelResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBody) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBody) SetErrorCode(v int32) *AddFabricExternalOrganizationToChannelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBody) SetRequestId(v string) *AddFabricExternalOrganizationToChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBody) SetResult(v *AddFabricExternalOrganizationToChannelResponseBodyResult) *AddFabricExternalOrganizationToChannelResponseBody {
	s.Result = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBody) SetSuccess(v bool) *AddFabricExternalOrganizationToChannelResponseBody {
	s.Success = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResult struct {
	Content     *AddFabricExternalOrganizationToChannelResponseBodyResultContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	CreateTime  *int64                                                           `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator     *string                                                          `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string                                                          `json:"Description,omitempty" xml:"Description,omitempty"`
	Status      *string                                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId      *string                                                          `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Type        *string                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResult) SetContent(v *AddFabricExternalOrganizationToChannelResponseBodyResultContent) *AddFabricExternalOrganizationToChannelResponseBodyResult {
	s.Content = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResult) SetCreateTime(v int64) *AddFabricExternalOrganizationToChannelResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResult) SetCreator(v string) *AddFabricExternalOrganizationToChannelResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResult) SetDescription(v string) *AddFabricExternalOrganizationToChannelResponseBodyResult {
	s.Description = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResult) SetStatus(v string) *AddFabricExternalOrganizationToChannelResponseBodyResult {
	s.Status = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResult) SetTaskId(v string) *AddFabricExternalOrganizationToChannelResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResult) SetType(v string) *AddFabricExternalOrganizationToChannelResponseBodyResult {
	s.Type = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContent struct {
	AddedOrganizations   []*AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations   `json:"AddedOrganizations,omitempty" xml:"AddedOrganizations,omitempty" type:"Repeated"`
	ChaincodeSpecPkg     *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg       `json:"ChaincodeSpecPkg,omitempty" xml:"ChaincodeSpecPkg,omitempty" type:"Struct"`
	OrdererConfig        *AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig          `json:"OrdererConfig,omitempty" xml:"OrdererConfig,omitempty" type:"Struct"`
	Raw                  *string                                                                                `json:"Raw,omitempty" xml:"Raw,omitempty"`
	RemovedOrganizations []*AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations `json:"RemovedOrganizations,omitempty" xml:"RemovedOrganizations,omitempty" type:"Repeated"`
	RwSets               *string                                                                                `json:"RwSets,omitempty" xml:"RwSets,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContent) SetAddedOrganizations(v []*AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) *AddFabricExternalOrganizationToChannelResponseBodyResultContent {
	s.AddedOrganizations = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContent) SetChaincodeSpecPkg(v *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg) *AddFabricExternalOrganizationToChannelResponseBodyResultContent {
	s.ChaincodeSpecPkg = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContent) SetOrdererConfig(v *AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig) *AddFabricExternalOrganizationToChannelResponseBodyResultContent {
	s.OrdererConfig = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContent) SetRaw(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContent {
	s.Raw = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContent) SetRemovedOrganizations(v []*AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) *AddFabricExternalOrganizationToChannelResponseBodyResultContent {
	s.RemovedOrganizations = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContent) SetRwSets(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContent {
	s.RwSets = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations struct {
	AnchorPeers         []*AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                                          `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                                          `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                                          `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                                            `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                                          `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                                          `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) SetAnchorPeers(v []*AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) SetCrls(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations {
	s.Crls = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) SetMspId(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations {
	s.MspId = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) SetMspType(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations {
	s.MspType = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) SetOrderer(v bool) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations {
	s.Orderer = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) SetOrdererNodes(v []*AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) SetRootCertificates(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations) SetTlsRootCertificates(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers) SetHost(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers) SetPort(v int32) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes) SetAddress(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes) SetCertificate(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes) SetKey(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes) SetTlsroot(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg struct {
	Cs     *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs `json:"Cs,omitempty" xml:"Cs,omitempty" type:"Struct"`
	Policy *string                                                                            `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Sha256 *string                                                                            `json:"Sha256,omitempty" xml:"Sha256,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg) SetCs(v *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs) *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg {
	s.Cs = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg) SetPolicy(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg {
	s.Policy = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg) SetSha256(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkg {
	s.Sha256 = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs struct {
	Input   *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path    *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Type    *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs) SetInput(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs {
	s.Input = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs) SetName(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs {
	s.Name = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs) SetPath(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs {
	s.Path = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs) SetType(v int32) *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs {
	s.Type = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs) SetVersion(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentChaincodeSpecPkgCs {
	s.Version = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig struct {
	BatchTimeout      *string `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	MaxMessageCount   *int32  `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	PreferredMaxBytes *int32  `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig) SetBatchTimeout(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig {
	s.BatchTimeout = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig) SetMaxMessageCount(v int32) *AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig {
	s.MaxMessageCount = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig) SetPreferredMaxBytes(v int32) *AddFabricExternalOrganizationToChannelResponseBodyResultContentOrdererConfig {
	s.PreferredMaxBytes = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations struct {
	AnchorPeers         []*AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                                            `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                                            `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                                            `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                                              `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                                            `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                                            `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) SetAnchorPeers(v []*AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) SetCrls(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations {
	s.Crls = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) SetMspId(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations {
	s.MspId = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) SetMspType(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations {
	s.MspType = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) SetOrderer(v bool) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations {
	s.Orderer = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) SetOrdererNodes(v []*AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) SetRootCertificates(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations) SetTlsRootCertificates(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetHost(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetPort(v int32) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetAddress(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetCertificate(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetKey(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetTlsroot(v string) *AddFabricExternalOrganizationToChannelResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type AddFabricExternalOrganizationToChannelResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddFabricExternalOrganizationToChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddFabricExternalOrganizationToChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s AddFabricExternalOrganizationToChannelResponse) GoString() string {
	return s.String()
}

func (s *AddFabricExternalOrganizationToChannelResponse) SetHeaders(v map[string]*string) *AddFabricExternalOrganizationToChannelResponse {
	s.Headers = v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponse) SetStatusCode(v int32) *AddFabricExternalOrganizationToChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *AddFabricExternalOrganizationToChannelResponse) SetBody(v *AddFabricExternalOrganizationToChannelResponseBody) *AddFabricExternalOrganizationToChannelResponse {
	s.Body = v
	return s
}

type AddFabricOrganizationToExternalChannelRequest struct {
	// This parameter is required.
	JoinResponse *string `json:"JoinResponse,omitempty" xml:"JoinResponse,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s AddFabricOrganizationToExternalChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s AddFabricOrganizationToExternalChannelRequest) GoString() string {
	return s.String()
}

func (s *AddFabricOrganizationToExternalChannelRequest) SetJoinResponse(v string) *AddFabricOrganizationToExternalChannelRequest {
	s.JoinResponse = &v
	return s
}

func (s *AddFabricOrganizationToExternalChannelRequest) SetOrganizationId(v string) *AddFabricOrganizationToExternalChannelRequest {
	s.OrganizationId = &v
	return s
}

type AddFabricOrganizationToExternalChannelResponseBody struct {
	ErrorCode *int32                                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*AddFabricOrganizationToExternalChannelResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s AddFabricOrganizationToExternalChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddFabricOrganizationToExternalChannelResponseBody) GoString() string {
	return s.String()
}

func (s *AddFabricOrganizationToExternalChannelResponseBody) SetErrorCode(v int32) *AddFabricOrganizationToExternalChannelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *AddFabricOrganizationToExternalChannelResponseBody) SetRequestId(v string) *AddFabricOrganizationToExternalChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddFabricOrganizationToExternalChannelResponseBody) SetResult(v []*AddFabricOrganizationToExternalChannelResponseBodyResult) *AddFabricOrganizationToExternalChannelResponseBody {
	s.Result = v
	return s
}

func (s *AddFabricOrganizationToExternalChannelResponseBody) SetSuccess(v bool) *AddFabricOrganizationToExternalChannelResponseBody {
	s.Success = &v
	return s
}

type AddFabricOrganizationToExternalChannelResponseBodyResult struct {
	M *int32 `json:"M,omitempty" xml:"M,omitempty"`
	N *int32 `json:"N,omitempty" xml:"N,omitempty"`
}

func (s AddFabricOrganizationToExternalChannelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s AddFabricOrganizationToExternalChannelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *AddFabricOrganizationToExternalChannelResponseBodyResult) SetM(v int32) *AddFabricOrganizationToExternalChannelResponseBodyResult {
	s.M = &v
	return s
}

func (s *AddFabricOrganizationToExternalChannelResponseBodyResult) SetN(v int32) *AddFabricOrganizationToExternalChannelResponseBodyResult {
	s.N = &v
	return s
}

type AddFabricOrganizationToExternalChannelResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *AddFabricOrganizationToExternalChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s AddFabricOrganizationToExternalChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s AddFabricOrganizationToExternalChannelResponse) GoString() string {
	return s.String()
}

func (s *AddFabricOrganizationToExternalChannelResponse) SetHeaders(v map[string]*string) *AddFabricOrganizationToExternalChannelResponse {
	s.Headers = v
	return s
}

func (s *AddFabricOrganizationToExternalChannelResponse) SetStatusCode(v int32) *AddFabricOrganizationToExternalChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *AddFabricOrganizationToExternalChannelResponse) SetBody(v *AddFabricOrganizationToExternalChannelResponseBody) *AddFabricOrganizationToExternalChannelResponse {
	s.Body = v
	return s
}

type ApplyAntChainRequest struct {
	Bizid        *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	UploadReq    *string `json:"UploadReq,omitempty" xml:"UploadReq,omitempty"`
}

func (s ApplyAntChainRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainRequest) GoString() string {
	return s.String()
}

func (s *ApplyAntChainRequest) SetBizid(v string) *ApplyAntChainRequest {
	s.Bizid = &v
	return s
}

func (s *ApplyAntChainRequest) SetConsortiumId(v string) *ApplyAntChainRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ApplyAntChainRequest) SetUploadReq(v string) *ApplyAntChainRequest {
	s.UploadReq = &v
	return s
}

type ApplyAntChainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ApplyAntChainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyAntChainResponseBody) SetRequestId(v string) *ApplyAntChainResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyAntChainResponseBody) SetResult(v string) *ApplyAntChainResponseBody {
	s.Result = &v
	return s
}

type ApplyAntChainResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyAntChainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyAntChainResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainResponse) GoString() string {
	return s.String()
}

func (s *ApplyAntChainResponse) SetHeaders(v map[string]*string) *ApplyAntChainResponse {
	s.Headers = v
	return s
}

func (s *ApplyAntChainResponse) SetStatusCode(v int32) *ApplyAntChainResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyAntChainResponse) SetBody(v *ApplyAntChainResponseBody) *ApplyAntChainResponse {
	s.Body = v
	return s
}

type ApplyAntChainCertificateRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	UploadReq *string `json:"UploadReq,omitempty" xml:"UploadReq,omitempty"`
}

func (s ApplyAntChainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainCertificateRequest) GoString() string {
	return s.String()
}

func (s *ApplyAntChainCertificateRequest) SetAntChainId(v string) *ApplyAntChainCertificateRequest {
	s.AntChainId = &v
	return s
}

func (s *ApplyAntChainCertificateRequest) SetUploadReq(v string) *ApplyAntChainCertificateRequest {
	s.UploadReq = &v
	return s
}

type ApplyAntChainCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ApplyAntChainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyAntChainCertificateResponseBody) SetRequestId(v string) *ApplyAntChainCertificateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyAntChainCertificateResponseBody) SetResult(v string) *ApplyAntChainCertificateResponseBody {
	s.Result = &v
	return s
}

type ApplyAntChainCertificateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyAntChainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyAntChainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainCertificateResponse) GoString() string {
	return s.String()
}

func (s *ApplyAntChainCertificateResponse) SetHeaders(v map[string]*string) *ApplyAntChainCertificateResponse {
	s.Headers = v
	return s
}

func (s *ApplyAntChainCertificateResponse) SetStatusCode(v int32) *ApplyAntChainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyAntChainCertificateResponse) SetBody(v *ApplyAntChainCertificateResponseBody) *ApplyAntChainCertificateResponse {
	s.Body = v
	return s
}

type ApplyAntChainCertificateWithKeyAutoCreationRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	CommonName *string `json:"CommonName,omitempty" xml:"CommonName,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	CountryName *string `json:"CountryName,omitempty" xml:"CountryName,omitempty"`
	// This parameter is required.
	LocalityName *string `json:"LocalityName,omitempty" xml:"LocalityName,omitempty"`
	// This parameter is required.
	OrganizationName *string `json:"OrganizationName,omitempty" xml:"OrganizationName,omitempty"`
	// This parameter is required.
	OrganizationUnitName *string `json:"OrganizationUnitName,omitempty" xml:"OrganizationUnitName,omitempty"`
	// This parameter is required.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	StateOrProvinceName *string `json:"StateOrProvinceName,omitempty" xml:"StateOrProvinceName,omitempty"`
}

func (s ApplyAntChainCertificateWithKeyAutoCreationRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainCertificateWithKeyAutoCreationRequest) GoString() string {
	return s.String()
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetAntChainId(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.AntChainId = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetCommonName(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.CommonName = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetConsortiumId(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetCountryName(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.CountryName = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetLocalityName(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.LocalityName = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetOrganizationName(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.OrganizationName = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetOrganizationUnitName(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.OrganizationUnitName = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetPassword(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.Password = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationRequest) SetStateOrProvinceName(v string) *ApplyAntChainCertificateWithKeyAutoCreationRequest {
	s.StateOrProvinceName = &v
	return s
}

type ApplyAntChainCertificateWithKeyAutoCreationResponseBody struct {
	RequestId *string                                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ApplyAntChainCertificateWithKeyAutoCreationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainCertificateWithKeyAutoCreationResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponseBody) SetRequestId(v string) *ApplyAntChainCertificateWithKeyAutoCreationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponseBody) SetResult(v *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult) *ApplyAntChainCertificateWithKeyAutoCreationResponseBody {
	s.Result = v
	return s
}

type ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult struct {
	DownloadPath *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath `json:"DownloadPath,omitempty" xml:"DownloadPath,omitempty" type:"Struct"`
	PrivateKey   *string                                                                    `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
}

func (s ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult) SetDownloadPath(v *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath) *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult {
	s.DownloadPath = v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult) SetPrivateKey(v string) *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResult {
	s.PrivateKey = &v
	return s
}

type ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath struct {
	CaCrtUrl     *string `json:"CaCrtUrl,omitempty" xml:"CaCrtUrl,omitempty"`
	ClientCrtUrl *string `json:"ClientCrtUrl,omitempty" xml:"ClientCrtUrl,omitempty"`
	SdkUrl       *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
	TrustCaUrl   *string `json:"TrustCaUrl,omitempty" xml:"TrustCaUrl,omitempty"`
}

func (s ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath) GoString() string {
	return s.String()
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath) SetCaCrtUrl(v string) *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.CaCrtUrl = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath) SetClientCrtUrl(v string) *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.ClientCrtUrl = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath) SetSdkUrl(v string) *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.SdkUrl = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath) SetTrustCaUrl(v string) *ApplyAntChainCertificateWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.TrustCaUrl = &v
	return s
}

type ApplyAntChainCertificateWithKeyAutoCreationResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyAntChainCertificateWithKeyAutoCreationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyAntChainCertificateWithKeyAutoCreationResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainCertificateWithKeyAutoCreationResponse) GoString() string {
	return s.String()
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponse) SetHeaders(v map[string]*string) *ApplyAntChainCertificateWithKeyAutoCreationResponse {
	s.Headers = v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponse) SetStatusCode(v int32) *ApplyAntChainCertificateWithKeyAutoCreationResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyAntChainCertificateWithKeyAutoCreationResponse) SetBody(v *ApplyAntChainCertificateWithKeyAutoCreationResponseBody) *ApplyAntChainCertificateWithKeyAutoCreationResponse {
	s.Body = v
	return s
}

type ApplyAntChainWithKeyAutoCreationRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	CommonName *string `json:"CommonName,omitempty" xml:"CommonName,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	CountryName *string `json:"CountryName,omitempty" xml:"CountryName,omitempty"`
	// This parameter is required.
	LocalityName *string `json:"LocalityName,omitempty" xml:"LocalityName,omitempty"`
	// This parameter is required.
	OrganizationName *string `json:"OrganizationName,omitempty" xml:"OrganizationName,omitempty"`
	// This parameter is required.
	OrganizationUnitName *string `json:"OrganizationUnitName,omitempty" xml:"OrganizationUnitName,omitempty"`
	// This parameter is required.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	StateOrProvinceName *string `json:"StateOrProvinceName,omitempty" xml:"StateOrProvinceName,omitempty"`
}

func (s ApplyAntChainWithKeyAutoCreationRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainWithKeyAutoCreationRequest) GoString() string {
	return s.String()
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetAntChainId(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.AntChainId = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetCommonName(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.CommonName = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetConsortiumId(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetCountryName(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.CountryName = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetLocalityName(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.LocalityName = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetOrganizationName(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.OrganizationName = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetOrganizationUnitName(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.OrganizationUnitName = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetPassword(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.Password = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationRequest) SetStateOrProvinceName(v string) *ApplyAntChainWithKeyAutoCreationRequest {
	s.StateOrProvinceName = &v
	return s
}

type ApplyAntChainWithKeyAutoCreationResponseBody struct {
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ApplyAntChainWithKeyAutoCreationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ApplyAntChainWithKeyAutoCreationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainWithKeyAutoCreationResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyAntChainWithKeyAutoCreationResponseBody) SetRequestId(v string) *ApplyAntChainWithKeyAutoCreationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationResponseBody) SetResult(v *ApplyAntChainWithKeyAutoCreationResponseBodyResult) *ApplyAntChainWithKeyAutoCreationResponseBody {
	s.Result = v
	return s
}

type ApplyAntChainWithKeyAutoCreationResponseBodyResult struct {
	DownloadPath *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath `json:"DownloadPath,omitempty" xml:"DownloadPath,omitempty" type:"Struct"`
	PrivateKey   *string                                                         `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
}

func (s ApplyAntChainWithKeyAutoCreationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainWithKeyAutoCreationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ApplyAntChainWithKeyAutoCreationResponseBodyResult) SetDownloadPath(v *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) *ApplyAntChainWithKeyAutoCreationResponseBodyResult {
	s.DownloadPath = v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationResponseBodyResult) SetPrivateKey(v string) *ApplyAntChainWithKeyAutoCreationResponseBodyResult {
	s.PrivateKey = &v
	return s
}

type ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath struct {
	CaCrtUrl     *string `json:"CaCrtUrl,omitempty" xml:"CaCrtUrl,omitempty"`
	ClientCrtUrl *string `json:"ClientCrtUrl,omitempty" xml:"ClientCrtUrl,omitempty"`
	SdkUrl       *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
	TrustCaUrl   *string `json:"TrustCaUrl,omitempty" xml:"TrustCaUrl,omitempty"`
}

func (s ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) GoString() string {
	return s.String()
}

func (s *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) SetCaCrtUrl(v string) *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.CaCrtUrl = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) SetClientCrtUrl(v string) *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.ClientCrtUrl = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) SetSdkUrl(v string) *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.SdkUrl = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) SetTrustCaUrl(v string) *ApplyAntChainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.TrustCaUrl = &v
	return s
}

type ApplyAntChainWithKeyAutoCreationResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyAntChainWithKeyAutoCreationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyAntChainWithKeyAutoCreationResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyAntChainWithKeyAutoCreationResponse) GoString() string {
	return s.String()
}

func (s *ApplyAntChainWithKeyAutoCreationResponse) SetHeaders(v map[string]*string) *ApplyAntChainWithKeyAutoCreationResponse {
	s.Headers = v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationResponse) SetStatusCode(v int32) *ApplyAntChainWithKeyAutoCreationResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyAntChainWithKeyAutoCreationResponse) SetBody(v *ApplyAntChainWithKeyAutoCreationResponseBody) *ApplyAntChainWithKeyAutoCreationResponse {
	s.Body = v
	return s
}

type ApplyBlockchainRequest struct {
	Account              *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AccountPubKey        *string `json:"AccountPubKey,omitempty" xml:"AccountPubKey,omitempty"`
	AccountRecoverPubKey *string `json:"AccountRecoverPubKey,omitempty" xml:"AccountRecoverPubKey,omitempty"`
	Blockchain           *string `json:"Blockchain,omitempty" xml:"Blockchain,omitempty"`
	UploadReq            *string `json:"UploadReq,omitempty" xml:"UploadReq,omitempty"`
}

func (s ApplyBlockchainRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyBlockchainRequest) GoString() string {
	return s.String()
}

func (s *ApplyBlockchainRequest) SetAccount(v string) *ApplyBlockchainRequest {
	s.Account = &v
	return s
}

func (s *ApplyBlockchainRequest) SetAccountPubKey(v string) *ApplyBlockchainRequest {
	s.AccountPubKey = &v
	return s
}

func (s *ApplyBlockchainRequest) SetAccountRecoverPubKey(v string) *ApplyBlockchainRequest {
	s.AccountRecoverPubKey = &v
	return s
}

func (s *ApplyBlockchainRequest) SetBlockchain(v string) *ApplyBlockchainRequest {
	s.Blockchain = &v
	return s
}

func (s *ApplyBlockchainRequest) SetUploadReq(v string) *ApplyBlockchainRequest {
	s.UploadReq = &v
	return s
}

type ApplyBlockchainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ApplyBlockchainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyBlockchainResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyBlockchainResponseBody) SetRequestId(v string) *ApplyBlockchainResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyBlockchainResponseBody) SetResult(v string) *ApplyBlockchainResponseBody {
	s.Result = &v
	return s
}

type ApplyBlockchainResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyBlockchainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyBlockchainResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyBlockchainResponse) GoString() string {
	return s.String()
}

func (s *ApplyBlockchainResponse) SetHeaders(v map[string]*string) *ApplyBlockchainResponse {
	s.Headers = v
	return s
}

func (s *ApplyBlockchainResponse) SetStatusCode(v int32) *ApplyBlockchainResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyBlockchainResponse) SetBody(v *ApplyBlockchainResponseBody) *ApplyBlockchainResponse {
	s.Body = v
	return s
}

type ApplyBlockchainWithKeyAutoCreationRequest struct {
	Bizid                *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	CommonName           *string `json:"CommonName,omitempty" xml:"CommonName,omitempty"`
	CountryName          *string `json:"CountryName,omitempty" xml:"CountryName,omitempty"`
	LocalityName         *string `json:"LocalityName,omitempty" xml:"LocalityName,omitempty"`
	OrganizationName     *string `json:"OrganizationName,omitempty" xml:"OrganizationName,omitempty"`
	OrganizationUnitName *string `json:"OrganizationUnitName,omitempty" xml:"OrganizationUnitName,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	StateOrProvinceName  *string `json:"StateOrProvinceName,omitempty" xml:"StateOrProvinceName,omitempty"`
}

func (s ApplyBlockchainWithKeyAutoCreationRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyBlockchainWithKeyAutoCreationRequest) GoString() string {
	return s.String()
}

func (s *ApplyBlockchainWithKeyAutoCreationRequest) SetBizid(v string) *ApplyBlockchainWithKeyAutoCreationRequest {
	s.Bizid = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationRequest) SetCommonName(v string) *ApplyBlockchainWithKeyAutoCreationRequest {
	s.CommonName = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationRequest) SetCountryName(v string) *ApplyBlockchainWithKeyAutoCreationRequest {
	s.CountryName = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationRequest) SetLocalityName(v string) *ApplyBlockchainWithKeyAutoCreationRequest {
	s.LocalityName = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationRequest) SetOrganizationName(v string) *ApplyBlockchainWithKeyAutoCreationRequest {
	s.OrganizationName = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationRequest) SetOrganizationUnitName(v string) *ApplyBlockchainWithKeyAutoCreationRequest {
	s.OrganizationUnitName = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationRequest) SetPassword(v string) *ApplyBlockchainWithKeyAutoCreationRequest {
	s.Password = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationRequest) SetStateOrProvinceName(v string) *ApplyBlockchainWithKeyAutoCreationRequest {
	s.StateOrProvinceName = &v
	return s
}

type ApplyBlockchainWithKeyAutoCreationResponseBody struct {
	RequestId *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ApplyBlockchainWithKeyAutoCreationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ApplyBlockchainWithKeyAutoCreationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyBlockchainWithKeyAutoCreationResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyBlockchainWithKeyAutoCreationResponseBody) SetRequestId(v string) *ApplyBlockchainWithKeyAutoCreationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationResponseBody) SetResult(v *ApplyBlockchainWithKeyAutoCreationResponseBodyResult) *ApplyBlockchainWithKeyAutoCreationResponseBody {
	s.Result = v
	return s
}

type ApplyBlockchainWithKeyAutoCreationResponseBodyResult struct {
	DownloadPath *ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath `json:"DownloadPath,omitempty" xml:"DownloadPath,omitempty" type:"Struct"`
	PrivateKey   *string                                                           `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
}

func (s ApplyBlockchainWithKeyAutoCreationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ApplyBlockchainWithKeyAutoCreationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ApplyBlockchainWithKeyAutoCreationResponseBodyResult) SetDownloadPath(v *ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath) *ApplyBlockchainWithKeyAutoCreationResponseBodyResult {
	s.DownloadPath = v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationResponseBodyResult) SetPrivateKey(v string) *ApplyBlockchainWithKeyAutoCreationResponseBodyResult {
	s.PrivateKey = &v
	return s
}

type ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath struct {
	BizviewUrl *string `json:"BizviewUrl,omitempty" xml:"BizviewUrl,omitempty"`
	CertUrl    *string `json:"CertUrl,omitempty" xml:"CertUrl,omitempty"`
	SdkUrl     *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
}

func (s ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath) String() string {
	return tea.Prettify(s)
}

func (s ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath) GoString() string {
	return s.String()
}

func (s *ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath) SetBizviewUrl(v string) *ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.BizviewUrl = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath) SetCertUrl(v string) *ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.CertUrl = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath) SetSdkUrl(v string) *ApplyBlockchainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.SdkUrl = &v
	return s
}

type ApplyBlockchainWithKeyAutoCreationResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyBlockchainWithKeyAutoCreationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyBlockchainWithKeyAutoCreationResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyBlockchainWithKeyAutoCreationResponse) GoString() string {
	return s.String()
}

func (s *ApplyBlockchainWithKeyAutoCreationResponse) SetHeaders(v map[string]*string) *ApplyBlockchainWithKeyAutoCreationResponse {
	s.Headers = v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationResponse) SetStatusCode(v int32) *ApplyBlockchainWithKeyAutoCreationResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyBlockchainWithKeyAutoCreationResponse) SetBody(v *ApplyBlockchainWithKeyAutoCreationResponseBody) *ApplyBlockchainWithKeyAutoCreationResponse {
	s.Body = v
	return s
}

type ApplyPublicAntChainRequest struct {
	Bizid        *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	UploadReq    *string `json:"UploadReq,omitempty" xml:"UploadReq,omitempty"`
}

func (s ApplyPublicAntChainRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyPublicAntChainRequest) GoString() string {
	return s.String()
}

func (s *ApplyPublicAntChainRequest) SetBizid(v string) *ApplyPublicAntChainRequest {
	s.Bizid = &v
	return s
}

func (s *ApplyPublicAntChainRequest) SetConsortiumId(v string) *ApplyPublicAntChainRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ApplyPublicAntChainRequest) SetUploadReq(v string) *ApplyPublicAntChainRequest {
	s.UploadReq = &v
	return s
}

type ApplyPublicAntChainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ApplyPublicAntChainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyPublicAntChainResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyPublicAntChainResponseBody) SetRequestId(v string) *ApplyPublicAntChainResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyPublicAntChainResponseBody) SetResult(v string) *ApplyPublicAntChainResponseBody {
	s.Result = &v
	return s
}

type ApplyPublicAntChainResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyPublicAntChainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyPublicAntChainResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyPublicAntChainResponse) GoString() string {
	return s.String()
}

func (s *ApplyPublicAntChainResponse) SetHeaders(v map[string]*string) *ApplyPublicAntChainResponse {
	s.Headers = v
	return s
}

func (s *ApplyPublicAntChainResponse) SetStatusCode(v int32) *ApplyPublicAntChainResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyPublicAntChainResponse) SetBody(v *ApplyPublicAntChainResponseBody) *ApplyPublicAntChainResponse {
	s.Body = v
	return s
}

type ApplyPublicAntChainWithKeyAutoCreationRequest struct {
	Bizid                *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	CommonName           *string `json:"CommonName,omitempty" xml:"CommonName,omitempty"`
	CountryName          *string `json:"CountryName,omitempty" xml:"CountryName,omitempty"`
	LocalityName         *string `json:"LocalityName,omitempty" xml:"LocalityName,omitempty"`
	OrganizationName     *string `json:"OrganizationName,omitempty" xml:"OrganizationName,omitempty"`
	OrganizationUnitName *string `json:"OrganizationUnitName,omitempty" xml:"OrganizationUnitName,omitempty"`
	Password             *string `json:"Password,omitempty" xml:"Password,omitempty"`
	StateOrProvinceName  *string `json:"StateOrProvinceName,omitempty" xml:"StateOrProvinceName,omitempty"`
}

func (s ApplyPublicAntChainWithKeyAutoCreationRequest) String() string {
	return tea.Prettify(s)
}

func (s ApplyPublicAntChainWithKeyAutoCreationRequest) GoString() string {
	return s.String()
}

func (s *ApplyPublicAntChainWithKeyAutoCreationRequest) SetBizid(v string) *ApplyPublicAntChainWithKeyAutoCreationRequest {
	s.Bizid = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationRequest) SetCommonName(v string) *ApplyPublicAntChainWithKeyAutoCreationRequest {
	s.CommonName = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationRequest) SetCountryName(v string) *ApplyPublicAntChainWithKeyAutoCreationRequest {
	s.CountryName = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationRequest) SetLocalityName(v string) *ApplyPublicAntChainWithKeyAutoCreationRequest {
	s.LocalityName = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationRequest) SetOrganizationName(v string) *ApplyPublicAntChainWithKeyAutoCreationRequest {
	s.OrganizationName = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationRequest) SetOrganizationUnitName(v string) *ApplyPublicAntChainWithKeyAutoCreationRequest {
	s.OrganizationUnitName = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationRequest) SetPassword(v string) *ApplyPublicAntChainWithKeyAutoCreationRequest {
	s.Password = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationRequest) SetStateOrProvinceName(v string) *ApplyPublicAntChainWithKeyAutoCreationRequest {
	s.StateOrProvinceName = &v
	return s
}

type ApplyPublicAntChainWithKeyAutoCreationResponseBody struct {
	RequestId *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s ApplyPublicAntChainWithKeyAutoCreationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApplyPublicAntChainWithKeyAutoCreationResponseBody) GoString() string {
	return s.String()
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponseBody) SetRequestId(v string) *ApplyPublicAntChainWithKeyAutoCreationResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponseBody) SetResult(v *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult) *ApplyPublicAntChainWithKeyAutoCreationResponseBody {
	s.Result = v
	return s
}

type ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult struct {
	DownloadPath *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath `json:"DownloadPath,omitempty" xml:"DownloadPath,omitempty" type:"Struct"`
	PrivateKey   *string                                                               `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
}

func (s ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult) SetDownloadPath(v *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult {
	s.DownloadPath = v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult) SetPrivateKey(v string) *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResult {
	s.PrivateKey = &v
	return s
}

type ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath struct {
	CaCrtUrl     *string `json:"CaCrtUrl,omitempty" xml:"CaCrtUrl,omitempty"`
	ClientCrtUrl *string `json:"ClientCrtUrl,omitempty" xml:"ClientCrtUrl,omitempty"`
	SdkUrl       *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
	TrustCaUrl   *string `json:"TrustCaUrl,omitempty" xml:"TrustCaUrl,omitempty"`
}

func (s ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) String() string {
	return tea.Prettify(s)
}

func (s ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) GoString() string {
	return s.String()
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) SetCaCrtUrl(v string) *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.CaCrtUrl = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) SetClientCrtUrl(v string) *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.ClientCrtUrl = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) SetSdkUrl(v string) *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.SdkUrl = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath) SetTrustCaUrl(v string) *ApplyPublicAntChainWithKeyAutoCreationResponseBodyResultDownloadPath {
	s.TrustCaUrl = &v
	return s
}

type ApplyPublicAntChainWithKeyAutoCreationResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApplyPublicAntChainWithKeyAutoCreationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApplyPublicAntChainWithKeyAutoCreationResponse) String() string {
	return tea.Prettify(s)
}

func (s ApplyPublicAntChainWithKeyAutoCreationResponse) GoString() string {
	return s.String()
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponse) SetHeaders(v map[string]*string) *ApplyPublicAntChainWithKeyAutoCreationResponse {
	s.Headers = v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponse) SetStatusCode(v int32) *ApplyPublicAntChainWithKeyAutoCreationResponse {
	s.StatusCode = &v
	return s
}

func (s *ApplyPublicAntChainWithKeyAutoCreationResponse) SetBody(v *ApplyPublicAntChainWithKeyAutoCreationResponseBody) *ApplyPublicAntChainWithKeyAutoCreationResponse {
	s.Body = v
	return s
}

type ApproveEthereumInviteeRequest struct {
	// This parameter is required.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// This parameter is required.
	Invitee []*ApproveEthereumInviteeRequestInvitee `json:"Invitee,omitempty" xml:"Invitee,omitempty" type:"Repeated"`
}

func (s ApproveEthereumInviteeRequest) String() string {
	return tea.Prettify(s)
}

func (s ApproveEthereumInviteeRequest) GoString() string {
	return s.String()
}

func (s *ApproveEthereumInviteeRequest) SetId(v string) *ApproveEthereumInviteeRequest {
	s.Id = &v
	return s
}

func (s *ApproveEthereumInviteeRequest) SetInvitee(v []*ApproveEthereumInviteeRequestInvitee) *ApproveEthereumInviteeRequest {
	s.Invitee = v
	return s
}

type ApproveEthereumInviteeRequestInvitee struct {
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ApproveEthereumInviteeRequestInvitee) String() string {
	return tea.Prettify(s)
}

func (s ApproveEthereumInviteeRequestInvitee) GoString() string {
	return s.String()
}

func (s *ApproveEthereumInviteeRequestInvitee) SetId(v string) *ApproveEthereumInviteeRequestInvitee {
	s.Id = &v
	return s
}

type ApproveEthereumInviteeResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ApproveEthereumInviteeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApproveEthereumInviteeResponseBody) GoString() string {
	return s.String()
}

func (s *ApproveEthereumInviteeResponseBody) SetErrorCode(v int32) *ApproveEthereumInviteeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ApproveEthereumInviteeResponseBody) SetRequestId(v string) *ApproveEthereumInviteeResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApproveEthereumInviteeResponseBody) SetResult(v string) *ApproveEthereumInviteeResponseBody {
	s.Result = &v
	return s
}

func (s *ApproveEthereumInviteeResponseBody) SetSuccess(v bool) *ApproveEthereumInviteeResponseBody {
	s.Success = &v
	return s
}

type ApproveEthereumInviteeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApproveEthereumInviteeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApproveEthereumInviteeResponse) String() string {
	return tea.Prettify(s)
}

func (s ApproveEthereumInviteeResponse) GoString() string {
	return s.String()
}

func (s *ApproveEthereumInviteeResponse) SetHeaders(v map[string]*string) *ApproveEthereumInviteeResponse {
	s.Headers = v
	return s
}

func (s *ApproveEthereumInviteeResponse) SetStatusCode(v int32) *ApproveEthereumInviteeResponse {
	s.StatusCode = &v
	return s
}

func (s *ApproveEthereumInviteeResponse) SetBody(v *ApproveEthereumInviteeResponseBody) *ApproveEthereumInviteeResponse {
	s.Body = v
	return s
}

type ApproveFabricChaincodeDefinitionRequest struct {
	ChaincodeId        *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	ChaincodePackageId *string `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	Location           *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s ApproveFabricChaincodeDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s ApproveFabricChaincodeDefinitionRequest) GoString() string {
	return s.String()
}

func (s *ApproveFabricChaincodeDefinitionRequest) SetChaincodeId(v string) *ApproveFabricChaincodeDefinitionRequest {
	s.ChaincodeId = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionRequest) SetChaincodePackageId(v string) *ApproveFabricChaincodeDefinitionRequest {
	s.ChaincodePackageId = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionRequest) SetLocation(v string) *ApproveFabricChaincodeDefinitionRequest {
	s.Location = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionRequest) SetOrganizationId(v string) *ApproveFabricChaincodeDefinitionRequest {
	s.OrganizationId = &v
	return s
}

type ApproveFabricChaincodeDefinitionResponseBody struct {
	ChaincodeDefinitionId *string                                             `json:"ChaincodeDefinitionId,omitempty" xml:"ChaincodeDefinitionId,omitempty"`
	ChaincodePackageId    *string                                             `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	ErrorCode             *int32                                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	InitRequired          *bool                                               `json:"InitRequired,omitempty" xml:"InitRequired,omitempty"`
	RequestId             *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result                *ApproveFabricChaincodeDefinitionResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success               *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ApproveFabricChaincodeDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ApproveFabricChaincodeDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *ApproveFabricChaincodeDefinitionResponseBody) SetChaincodeDefinitionId(v string) *ApproveFabricChaincodeDefinitionResponseBody {
	s.ChaincodeDefinitionId = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBody) SetChaincodePackageId(v string) *ApproveFabricChaincodeDefinitionResponseBody {
	s.ChaincodePackageId = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBody) SetErrorCode(v int32) *ApproveFabricChaincodeDefinitionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBody) SetInitRequired(v bool) *ApproveFabricChaincodeDefinitionResponseBody {
	s.InitRequired = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBody) SetRequestId(v string) *ApproveFabricChaincodeDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBody) SetResult(v *ApproveFabricChaincodeDefinitionResponseBodyResult) *ApproveFabricChaincodeDefinitionResponseBody {
	s.Result = v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBody) SetSuccess(v bool) *ApproveFabricChaincodeDefinitionResponseBody {
	s.Success = &v
	return s
}

type ApproveFabricChaincodeDefinitionResponseBodyResult struct {
	ChaincodeId   *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	ChannelName   *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ConsortiumId  *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeployTime    *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	Input         *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Install       *bool   `json:"Install,omitempty" xml:"Install,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path          *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ProviderId    *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	ProviderName  *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	Type          *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s ApproveFabricChaincodeDefinitionResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ApproveFabricChaincodeDefinitionResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetChaincodeId(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetChannelName(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetConsortiumId(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetCreateTime(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetDeployTime(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetEndorsePolicy(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetInput(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.Input = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetInstall(v bool) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.Install = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetMessage(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.Message = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetName(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetPath(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.Path = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetProviderId(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetProviderName(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetState(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.State = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetType(v int32) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.Type = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponseBodyResult) SetVersion(v string) *ApproveFabricChaincodeDefinitionResponseBodyResult {
	s.Version = &v
	return s
}

type ApproveFabricChaincodeDefinitionResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ApproveFabricChaincodeDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ApproveFabricChaincodeDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s ApproveFabricChaincodeDefinitionResponse) GoString() string {
	return s.String()
}

func (s *ApproveFabricChaincodeDefinitionResponse) SetHeaders(v map[string]*string) *ApproveFabricChaincodeDefinitionResponse {
	s.Headers = v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponse) SetStatusCode(v int32) *ApproveFabricChaincodeDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *ApproveFabricChaincodeDefinitionResponse) SetBody(v *ApproveFabricChaincodeDefinitionResponseBody) *ApproveFabricChaincodeDefinitionResponse {
	s.Body = v
	return s
}

type BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	PhoneList map[string]interface{} `json:"PhoneList,omitempty" xml:"PhoneList,omitempty"`
}

func (s BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest) GoString() string {
	return s.String()
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest) SetAntChainId(v string) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest {
	s.AntChainId = &v
	return s
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest) SetPhoneList(v map[string]interface{}) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest {
	s.PhoneList = v
	return s
}

type BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	PhoneListShrink *string `json:"PhoneList,omitempty" xml:"PhoneList,omitempty"`
}

func (s BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest) GoString() string {
	return s.String()
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest) SetAntChainId(v string) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest {
	s.AntChainId = &v
	return s
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest) SetPhoneListShrink(v string) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest {
	s.PhoneListShrink = &v
	return s
}

type BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody) GoString() string {
	return s.String()
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody) SetRequestId(v string) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody) SetResult(v string) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody {
	s.Result = &v
	return s
}

type BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse struct {
	Headers    map[string]*string                                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse) GoString() string {
	return s.String()
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse) SetHeaders(v map[string]*string) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse {
	s.Headers = v
	return s
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse) SetStatusCode(v int32) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse) SetBody(v *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponseBody) *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse {
	s.Body = v
	return s
}

type BindFabricManagementChaincodeRequest struct {
	// This parameter is required.
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s BindFabricManagementChaincodeRequest) String() string {
	return tea.Prettify(s)
}

func (s BindFabricManagementChaincodeRequest) GoString() string {
	return s.String()
}

func (s *BindFabricManagementChaincodeRequest) SetChaincodeId(v string) *BindFabricManagementChaincodeRequest {
	s.ChaincodeId = &v
	return s
}

func (s *BindFabricManagementChaincodeRequest) SetChannelId(v string) *BindFabricManagementChaincodeRequest {
	s.ChannelId = &v
	return s
}

func (s *BindFabricManagementChaincodeRequest) SetOrganizationId(v string) *BindFabricManagementChaincodeRequest {
	s.OrganizationId = &v
	return s
}

type BindFabricManagementChaincodeResponseBody struct {
	ErrorCode *int32                                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *BindFabricManagementChaincodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s BindFabricManagementChaincodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindFabricManagementChaincodeResponseBody) GoString() string {
	return s.String()
}

func (s *BindFabricManagementChaincodeResponseBody) SetErrorCode(v int32) *BindFabricManagementChaincodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *BindFabricManagementChaincodeResponseBody) SetRequestId(v string) *BindFabricManagementChaincodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *BindFabricManagementChaincodeResponseBody) SetResult(v *BindFabricManagementChaincodeResponseBodyResult) *BindFabricManagementChaincodeResponseBody {
	s.Result = v
	return s
}

func (s *BindFabricManagementChaincodeResponseBody) SetSuccess(v bool) *BindFabricManagementChaincodeResponseBody {
	s.Success = &v
	return s
}

type BindFabricManagementChaincodeResponseBodyResult struct {
	Input   *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path    *int64  `json:"Path,omitempty" xml:"Path,omitempty"`
	Type    *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s BindFabricManagementChaincodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s BindFabricManagementChaincodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *BindFabricManagementChaincodeResponseBodyResult) SetInput(v string) *BindFabricManagementChaincodeResponseBodyResult {
	s.Input = &v
	return s
}

func (s *BindFabricManagementChaincodeResponseBodyResult) SetName(v string) *BindFabricManagementChaincodeResponseBodyResult {
	s.Name = &v
	return s
}

func (s *BindFabricManagementChaincodeResponseBodyResult) SetPath(v int64) *BindFabricManagementChaincodeResponseBodyResult {
	s.Path = &v
	return s
}

func (s *BindFabricManagementChaincodeResponseBodyResult) SetType(v int32) *BindFabricManagementChaincodeResponseBodyResult {
	s.Type = &v
	return s
}

func (s *BindFabricManagementChaincodeResponseBodyResult) SetVersion(v string) *BindFabricManagementChaincodeResponseBodyResult {
	s.Version = &v
	return s
}

type BindFabricManagementChaincodeResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *BindFabricManagementChaincodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s BindFabricManagementChaincodeResponse) String() string {
	return tea.Prettify(s)
}

func (s BindFabricManagementChaincodeResponse) GoString() string {
	return s.String()
}

func (s *BindFabricManagementChaincodeResponse) SetHeaders(v map[string]*string) *BindFabricManagementChaincodeResponse {
	s.Headers = v
	return s
}

func (s *BindFabricManagementChaincodeResponse) SetStatusCode(v int32) *BindFabricManagementChaincodeResponse {
	s.StatusCode = &v
	return s
}

func (s *BindFabricManagementChaincodeResponse) SetBody(v *BindFabricManagementChaincodeResponseBody) *BindFabricManagementChaincodeResponse {
	s.Body = v
	return s
}

type CheckConsortiumDomainRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// bank
	DomainCode *string `json:"DomainCode,omitempty" xml:"DomainCode,omitempty"`
}

func (s CheckConsortiumDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckConsortiumDomainRequest) GoString() string {
	return s.String()
}

func (s *CheckConsortiumDomainRequest) SetDomainCode(v string) *CheckConsortiumDomainRequest {
	s.DomainCode = &v
	return s
}

type CheckConsortiumDomainResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// CD264CC8-B892-4CDC-BD31-7D179EE6E396
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CheckConsortiumDomainResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CheckConsortiumDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckConsortiumDomainResponseBody) GoString() string {
	return s.String()
}

func (s *CheckConsortiumDomainResponseBody) SetErrorCode(v int32) *CheckConsortiumDomainResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CheckConsortiumDomainResponseBody) SetRequestId(v string) *CheckConsortiumDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckConsortiumDomainResponseBody) SetResult(v *CheckConsortiumDomainResponseBodyResult) *CheckConsortiumDomainResponseBody {
	s.Result = v
	return s
}

func (s *CheckConsortiumDomainResponseBody) SetSuccess(v bool) *CheckConsortiumDomainResponseBody {
	s.Success = &v
	return s
}

type CheckConsortiumDomainResponseBodyResult struct {
	// example:
	//
	// bank
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// OK
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// true
	Valid *bool `json:"Valid,omitempty" xml:"Valid,omitempty"`
}

func (s CheckConsortiumDomainResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CheckConsortiumDomainResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CheckConsortiumDomainResponseBodyResult) SetDomain(v string) *CheckConsortiumDomainResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *CheckConsortiumDomainResponseBodyResult) SetPrompt(v string) *CheckConsortiumDomainResponseBodyResult {
	s.Prompt = &v
	return s
}

func (s *CheckConsortiumDomainResponseBodyResult) SetValid(v bool) *CheckConsortiumDomainResponseBodyResult {
	s.Valid = &v
	return s
}

type CheckConsortiumDomainResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckConsortiumDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckConsortiumDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckConsortiumDomainResponse) GoString() string {
	return s.String()
}

func (s *CheckConsortiumDomainResponse) SetHeaders(v map[string]*string) *CheckConsortiumDomainResponse {
	s.Headers = v
	return s
}

func (s *CheckConsortiumDomainResponse) SetStatusCode(v int32) *CheckConsortiumDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckConsortiumDomainResponse) SetBody(v *CheckConsortiumDomainResponseBody) *CheckConsortiumDomainResponse {
	s.Body = v
	return s
}

type CheckOrganizationDomainRequest struct {
	// example:
	//
	// bank
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// bank
	DomainCode *string `json:"DomainCode,omitempty" xml:"DomainCode,omitempty"`
}

func (s CheckOrganizationDomainRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckOrganizationDomainRequest) GoString() string {
	return s.String()
}

func (s *CheckOrganizationDomainRequest) SetDomain(v string) *CheckOrganizationDomainRequest {
	s.Domain = &v
	return s
}

func (s *CheckOrganizationDomainRequest) SetDomainCode(v string) *CheckOrganizationDomainRequest {
	s.DomainCode = &v
	return s
}

type CheckOrganizationDomainResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// CD264CC8-B892-4CDC-BD31-7D179EE6E396
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CheckOrganizationDomainResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CheckOrganizationDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckOrganizationDomainResponseBody) GoString() string {
	return s.String()
}

func (s *CheckOrganizationDomainResponseBody) SetErrorCode(v int32) *CheckOrganizationDomainResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CheckOrganizationDomainResponseBody) SetRequestId(v string) *CheckOrganizationDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *CheckOrganizationDomainResponseBody) SetResult(v *CheckOrganizationDomainResponseBodyResult) *CheckOrganizationDomainResponseBody {
	s.Result = v
	return s
}

func (s *CheckOrganizationDomainResponseBody) SetSuccess(v bool) *CheckOrganizationDomainResponseBody {
	s.Success = &v
	return s
}

type CheckOrganizationDomainResponseBodyResult struct {
	// example:
	//
	// bank
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// OK
	Prompt *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	// example:
	//
	// true
	Valid *bool `json:"Valid,omitempty" xml:"Valid,omitempty"`
}

func (s CheckOrganizationDomainResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CheckOrganizationDomainResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CheckOrganizationDomainResponseBodyResult) SetDomain(v string) *CheckOrganizationDomainResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *CheckOrganizationDomainResponseBodyResult) SetPrompt(v string) *CheckOrganizationDomainResponseBodyResult {
	s.Prompt = &v
	return s
}

func (s *CheckOrganizationDomainResponseBodyResult) SetValid(v bool) *CheckOrganizationDomainResponseBodyResult {
	s.Valid = &v
	return s
}

type CheckOrganizationDomainResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CheckOrganizationDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CheckOrganizationDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckOrganizationDomainResponse) GoString() string {
	return s.String()
}

func (s *CheckOrganizationDomainResponse) SetHeaders(v map[string]*string) *CheckOrganizationDomainResponse {
	s.Headers = v
	return s
}

func (s *CheckOrganizationDomainResponse) SetStatusCode(v int32) *CheckOrganizationDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *CheckOrganizationDomainResponse) SetBody(v *CheckOrganizationDomainResponseBody) *CheckOrganizationDomainResponse {
	s.Body = v
	return s
}

type ConfirmConsortiumMemberRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// consortium-aaaaaa-akpcsjjac2jd
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	Organization []*ConfirmConsortiumMemberRequestOrganization `json:"Organization,omitempty" xml:"Organization,omitempty" type:"Repeated"`
}

func (s ConfirmConsortiumMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsortiumMemberRequest) GoString() string {
	return s.String()
}

func (s *ConfirmConsortiumMemberRequest) SetConsortiumId(v string) *ConfirmConsortiumMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *ConfirmConsortiumMemberRequest) SetOrganization(v []*ConfirmConsortiumMemberRequestOrganization) *ConfirmConsortiumMemberRequest {
	s.Organization = v
	return s
}

type ConfirmConsortiumMemberRequestOrganization struct {
	// example:
	//
	// peers-aaaaaa1-1oxw31d046jtl
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ConfirmConsortiumMemberRequestOrganization) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsortiumMemberRequestOrganization) GoString() string {
	return s.String()
}

func (s *ConfirmConsortiumMemberRequestOrganization) SetId(v string) *ConfirmConsortiumMemberRequestOrganization {
	s.Id = &v
	return s
}

type ConfirmConsortiumMemberResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 50B3ACF3-CE12-433C-A834-9E8C657A4934
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ConfirmConsortiumMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsortiumMemberResponseBody) GoString() string {
	return s.String()
}

func (s *ConfirmConsortiumMemberResponseBody) SetErrorCode(v int32) *ConfirmConsortiumMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ConfirmConsortiumMemberResponseBody) SetRequestId(v string) *ConfirmConsortiumMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *ConfirmConsortiumMemberResponseBody) SetResult(v bool) *ConfirmConsortiumMemberResponseBody {
	s.Result = &v
	return s
}

func (s *ConfirmConsortiumMemberResponseBody) SetSuccess(v bool) *ConfirmConsortiumMemberResponseBody {
	s.Success = &v
	return s
}

type ConfirmConsortiumMemberResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ConfirmConsortiumMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ConfirmConsortiumMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s ConfirmConsortiumMemberResponse) GoString() string {
	return s.String()
}

func (s *ConfirmConsortiumMemberResponse) SetHeaders(v map[string]*string) *ConfirmConsortiumMemberResponse {
	s.Headers = v
	return s
}

func (s *ConfirmConsortiumMemberResponse) SetStatusCode(v int32) *ConfirmConsortiumMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *ConfirmConsortiumMemberResponse) SetBody(v *ConfirmConsortiumMemberResponseBody) *ConfirmConsortiumMemberResponse {
	s.Body = v
	return s
}

type CopyAntChainContractProjectRequest struct {
	ProjectDescription *string `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	// This parameter is required.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	// This parameter is required.
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	// This parameter is required.
	ProjectVersion *string `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
}

func (s CopyAntChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CopyAntChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *CopyAntChainContractProjectRequest) SetProjectDescription(v string) *CopyAntChainContractProjectRequest {
	s.ProjectDescription = &v
	return s
}

func (s *CopyAntChainContractProjectRequest) SetProjectId(v string) *CopyAntChainContractProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *CopyAntChainContractProjectRequest) SetProjectName(v string) *CopyAntChainContractProjectRequest {
	s.ProjectName = &v
	return s
}

func (s *CopyAntChainContractProjectRequest) SetProjectVersion(v string) *CopyAntChainContractProjectRequest {
	s.ProjectVersion = &v
	return s
}

type CopyAntChainContractProjectResponseBody struct {
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CopyAntChainContractProjectResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CopyAntChainContractProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CopyAntChainContractProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CopyAntChainContractProjectResponseBody) SetRequestId(v string) *CopyAntChainContractProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *CopyAntChainContractProjectResponseBody) SetResult(v *CopyAntChainContractProjectResponseBodyResult) *CopyAntChainContractProjectResponseBody {
	s.Result = v
	return s
}

type CopyAntChainContractProjectResponseBodyResult struct {
	ConsortiumId       *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ProjectDescription *string `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	ProjectId          *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName        *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectVersion     *string `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
	UpdateTime         *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s CopyAntChainContractProjectResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CopyAntChainContractProjectResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CopyAntChainContractProjectResponseBodyResult) SetConsortiumId(v string) *CopyAntChainContractProjectResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *CopyAntChainContractProjectResponseBodyResult) SetCreateTime(v int64) *CopyAntChainContractProjectResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CopyAntChainContractProjectResponseBodyResult) SetProjectDescription(v string) *CopyAntChainContractProjectResponseBodyResult {
	s.ProjectDescription = &v
	return s
}

func (s *CopyAntChainContractProjectResponseBodyResult) SetProjectId(v string) *CopyAntChainContractProjectResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *CopyAntChainContractProjectResponseBodyResult) SetProjectName(v string) *CopyAntChainContractProjectResponseBodyResult {
	s.ProjectName = &v
	return s
}

func (s *CopyAntChainContractProjectResponseBodyResult) SetProjectVersion(v string) *CopyAntChainContractProjectResponseBodyResult {
	s.ProjectVersion = &v
	return s
}

func (s *CopyAntChainContractProjectResponseBodyResult) SetUpdateTime(v int64) *CopyAntChainContractProjectResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type CopyAntChainContractProjectResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CopyAntChainContractProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CopyAntChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CopyAntChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *CopyAntChainContractProjectResponse) SetHeaders(v map[string]*string) *CopyAntChainContractProjectResponse {
	s.Headers = v
	return s
}

func (s *CopyAntChainContractProjectResponse) SetStatusCode(v int32) *CopyAntChainContractProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CopyAntChainContractProjectResponse) SetBody(v *CopyAntChainContractProjectResponseBody) *CopyAntChainContractProjectResponse {
	s.Body = v
	return s
}

type CreateAccessTokenRequest struct {
	// This parameter is required.
	AccessTokenLifetime *string `json:"AccessTokenLifetime,omitempty" xml:"AccessTokenLifetime,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	RefreshTokenLifetime *string `json:"RefreshTokenLifetime,omitempty" xml:"RefreshTokenLifetime,omitempty"`
	// This parameter is required.
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
}

func (s CreateAccessTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessTokenRequest) GoString() string {
	return s.String()
}

func (s *CreateAccessTokenRequest) SetAccessTokenLifetime(v string) *CreateAccessTokenRequest {
	s.AccessTokenLifetime = &v
	return s
}

func (s *CreateAccessTokenRequest) SetOrganizationId(v string) *CreateAccessTokenRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateAccessTokenRequest) SetRefreshTokenLifetime(v string) *CreateAccessTokenRequest {
	s.RefreshTokenLifetime = &v
	return s
}

func (s *CreateAccessTokenRequest) SetScope(v string) *CreateAccessTokenRequest {
	s.Scope = &v
	return s
}

type CreateAccessTokenResponseBody struct {
	ErrorCode *int32                               `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateAccessTokenResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateAccessTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessTokenResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAccessTokenResponseBody) SetErrorCode(v int32) *CreateAccessTokenResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateAccessTokenResponseBody) SetRequestId(v string) *CreateAccessTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAccessTokenResponseBody) SetResult(v *CreateAccessTokenResponseBodyResult) *CreateAccessTokenResponseBody {
	s.Result = v
	return s
}

func (s *CreateAccessTokenResponseBody) SetSuccess(v bool) *CreateAccessTokenResponseBody {
	s.Success = &v
	return s
}

type CreateAccessTokenResponseBodyResult struct {
	AccessToken  *string `json:"AccessToken,omitempty" xml:"AccessToken,omitempty"`
	ExpiresIn    *int64  `json:"ExpiresIn,omitempty" xml:"ExpiresIn,omitempty"`
	RefreshToken *string `json:"RefreshToken,omitempty" xml:"RefreshToken,omitempty"`
	TokenType    *string `json:"TokenType,omitempty" xml:"TokenType,omitempty"`
}

func (s CreateAccessTokenResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessTokenResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateAccessTokenResponseBodyResult) SetAccessToken(v string) *CreateAccessTokenResponseBodyResult {
	s.AccessToken = &v
	return s
}

func (s *CreateAccessTokenResponseBodyResult) SetExpiresIn(v int64) *CreateAccessTokenResponseBodyResult {
	s.ExpiresIn = &v
	return s
}

func (s *CreateAccessTokenResponseBodyResult) SetRefreshToken(v string) *CreateAccessTokenResponseBodyResult {
	s.RefreshToken = &v
	return s
}

func (s *CreateAccessTokenResponseBodyResult) SetTokenType(v string) *CreateAccessTokenResponseBodyResult {
	s.TokenType = &v
	return s
}

type CreateAccessTokenResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAccessTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAccessTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccessTokenResponse) GoString() string {
	return s.String()
}

func (s *CreateAccessTokenResponse) SetHeaders(v map[string]*string) *CreateAccessTokenResponse {
	s.Headers = v
	return s
}

func (s *CreateAccessTokenResponse) SetStatusCode(v int32) *CreateAccessTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAccessTokenResponse) SetBody(v *CreateAccessTokenResponseBody) *CreateAccessTokenResponse {
	s.Body = v
	return s
}

type CreateAccountRequest struct {
	Account              *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AccountPubKey        *string `json:"AccountPubKey,omitempty" xml:"AccountPubKey,omitempty"`
	AccountRecoverPubKey *string `json:"AccountRecoverPubKey,omitempty" xml:"AccountRecoverPubKey,omitempty"`
	Bizid                *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s CreateAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateAccountRequest) SetAccount(v string) *CreateAccountRequest {
	s.Account = &v
	return s
}

func (s *CreateAccountRequest) SetAccountPubKey(v string) *CreateAccountRequest {
	s.AccountPubKey = &v
	return s
}

func (s *CreateAccountRequest) SetAccountRecoverPubKey(v string) *CreateAccountRequest {
	s.AccountRecoverPubKey = &v
	return s
}

func (s *CreateAccountRequest) SetBizid(v string) *CreateAccountRequest {
	s.Bizid = &v
	return s
}

type CreateAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAccountResponseBody) SetRequestId(v string) *CreateAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAccountResponseBody) SetResult(v string) *CreateAccountResponseBody {
	s.Result = &v
	return s
}

type CreateAccountResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateAccountResponse) SetHeaders(v map[string]*string) *CreateAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateAccountResponse) SetStatusCode(v int32) *CreateAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAccountResponse) SetBody(v *CreateAccountResponseBody) *CreateAccountResponse {
	s.Body = v
	return s
}

type CreateAccountWithKeyPairAutoCreationRequest struct {
	Account  *string `json:"Account,omitempty" xml:"Account,omitempty"`
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
}

func (s CreateAccountWithKeyPairAutoCreationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountWithKeyPairAutoCreationRequest) GoString() string {
	return s.String()
}

func (s *CreateAccountWithKeyPairAutoCreationRequest) SetAccount(v string) *CreateAccountWithKeyPairAutoCreationRequest {
	s.Account = &v
	return s
}

func (s *CreateAccountWithKeyPairAutoCreationRequest) SetBizid(v string) *CreateAccountWithKeyPairAutoCreationRequest {
	s.Bizid = &v
	return s
}

func (s *CreateAccountWithKeyPairAutoCreationRequest) SetPassword(v string) *CreateAccountWithKeyPairAutoCreationRequest {
	s.Password = &v
	return s
}

type CreateAccountWithKeyPairAutoCreationResponseBody struct {
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateAccountWithKeyPairAutoCreationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateAccountWithKeyPairAutoCreationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountWithKeyPairAutoCreationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAccountWithKeyPairAutoCreationResponseBody) SetRequestId(v string) *CreateAccountWithKeyPairAutoCreationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAccountWithKeyPairAutoCreationResponseBody) SetResult(v *CreateAccountWithKeyPairAutoCreationResponseBodyResult) *CreateAccountWithKeyPairAutoCreationResponseBody {
	s.Result = v
	return s
}

type CreateAccountWithKeyPairAutoCreationResponseBodyResult struct {
	AccountPrivateKey        *string `json:"AccountPrivateKey,omitempty" xml:"AccountPrivateKey,omitempty"`
	AccountPublicKey         *string `json:"AccountPublicKey,omitempty" xml:"AccountPublicKey,omitempty"`
	AccountRecoverPrivateKey *string `json:"AccountRecoverPrivateKey,omitempty" xml:"AccountRecoverPrivateKey,omitempty"`
	AccountRecoverPublicKey  *string `json:"AccountRecoverPublicKey,omitempty" xml:"AccountRecoverPublicKey,omitempty"`
}

func (s CreateAccountWithKeyPairAutoCreationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountWithKeyPairAutoCreationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountPrivateKey(v string) *CreateAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountPrivateKey = &v
	return s
}

func (s *CreateAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountPublicKey(v string) *CreateAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountPublicKey = &v
	return s
}

func (s *CreateAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountRecoverPrivateKey(v string) *CreateAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountRecoverPrivateKey = &v
	return s
}

func (s *CreateAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountRecoverPublicKey(v string) *CreateAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountRecoverPublicKey = &v
	return s
}

type CreateAccountWithKeyPairAutoCreationResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAccountWithKeyPairAutoCreationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAccountWithKeyPairAutoCreationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAccountWithKeyPairAutoCreationResponse) GoString() string {
	return s.String()
}

func (s *CreateAccountWithKeyPairAutoCreationResponse) SetHeaders(v map[string]*string) *CreateAccountWithKeyPairAutoCreationResponse {
	s.Headers = v
	return s
}

func (s *CreateAccountWithKeyPairAutoCreationResponse) SetStatusCode(v int32) *CreateAccountWithKeyPairAutoCreationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAccountWithKeyPairAutoCreationResponse) SetBody(v *CreateAccountWithKeyPairAutoCreationResponseBody) *CreateAccountWithKeyPairAutoCreationResponse {
	s.Body = v
	return s
}

type CreateAntChainRequest struct {
	// This parameter is required.
	AntChainName *string `json:"AntChainName,omitempty" xml:"AntChainName,omitempty"`
	// This parameter is required.
	BlockchainRegionId *string `json:"BlockchainRegionId,omitempty" xml:"BlockchainRegionId,omitempty"`
	// This parameter is required.
	CipherSuit *string `json:"CipherSuit,omitempty" xml:"CipherSuit,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	LiveTime *int32 `json:"LiveTime,omitempty" xml:"LiveTime,omitempty"`
	// This parameter is required.
	MerkleTreeSuit *string `json:"MerkleTreeSuit,omitempty" xml:"MerkleTreeSuit,omitempty"`
	// This parameter is required.
	NodeNum *int32 `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
	// This parameter is required.
	ResourceSize *int32 `json:"ResourceSize,omitempty" xml:"ResourceSize,omitempty"`
	// This parameter is required.
	TlsAlgo *string `json:"TlsAlgo,omitempty" xml:"TlsAlgo,omitempty"`
}

func (s CreateAntChainRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainRequest) GoString() string {
	return s.String()
}

func (s *CreateAntChainRequest) SetAntChainName(v string) *CreateAntChainRequest {
	s.AntChainName = &v
	return s
}

func (s *CreateAntChainRequest) SetBlockchainRegionId(v string) *CreateAntChainRequest {
	s.BlockchainRegionId = &v
	return s
}

func (s *CreateAntChainRequest) SetCipherSuit(v string) *CreateAntChainRequest {
	s.CipherSuit = &v
	return s
}

func (s *CreateAntChainRequest) SetConsortiumId(v string) *CreateAntChainRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateAntChainRequest) SetLiveTime(v int32) *CreateAntChainRequest {
	s.LiveTime = &v
	return s
}

func (s *CreateAntChainRequest) SetMerkleTreeSuit(v string) *CreateAntChainRequest {
	s.MerkleTreeSuit = &v
	return s
}

func (s *CreateAntChainRequest) SetNodeNum(v int32) *CreateAntChainRequest {
	s.NodeNum = &v
	return s
}

func (s *CreateAntChainRequest) SetResourceSize(v int32) *CreateAntChainRequest {
	s.ResourceSize = &v
	return s
}

func (s *CreateAntChainRequest) SetTlsAlgo(v string) *CreateAntChainRequest {
	s.TlsAlgo = &v
	return s
}

type CreateAntChainResponseBody struct {
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateAntChainResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateAntChainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAntChainResponseBody) SetRequestId(v string) *CreateAntChainResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAntChainResponseBody) SetResult(v *CreateAntChainResponseBodyResult) *CreateAntChainResponseBody {
	s.Result = v
	return s
}

type CreateAntChainResponseBodyResult struct {
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s CreateAntChainResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateAntChainResponseBodyResult) SetAntChainId(v string) *CreateAntChainResponseBodyResult {
	s.AntChainId = &v
	return s
}

type CreateAntChainResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAntChainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAntChainResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainResponse) GoString() string {
	return s.String()
}

func (s *CreateAntChainResponse) SetHeaders(v map[string]*string) *CreateAntChainResponse {
	s.Headers = v
	return s
}

func (s *CreateAntChainResponse) SetStatusCode(v int32) *CreateAntChainResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAntChainResponse) SetBody(v *CreateAntChainResponseBody) *CreateAntChainResponse {
	s.Body = v
	return s
}

type CreateAntChainAccountRequest struct {
	Account              *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AccountPubKey        *string `json:"AccountPubKey,omitempty" xml:"AccountPubKey,omitempty"`
	AccountRecoverPubKey *string `json:"AccountRecoverPubKey,omitempty" xml:"AccountRecoverPubKey,omitempty"`
	AntChainId           *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s CreateAntChainAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateAntChainAccountRequest) SetAccount(v string) *CreateAntChainAccountRequest {
	s.Account = &v
	return s
}

func (s *CreateAntChainAccountRequest) SetAccountPubKey(v string) *CreateAntChainAccountRequest {
	s.AccountPubKey = &v
	return s
}

func (s *CreateAntChainAccountRequest) SetAccountRecoverPubKey(v string) *CreateAntChainAccountRequest {
	s.AccountRecoverPubKey = &v
	return s
}

func (s *CreateAntChainAccountRequest) SetAntChainId(v string) *CreateAntChainAccountRequest {
	s.AntChainId = &v
	return s
}

type CreateAntChainAccountResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateAntChainAccountResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateAntChainAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAntChainAccountResponseBody) SetRequestId(v string) *CreateAntChainAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAntChainAccountResponseBody) SetResult(v *CreateAntChainAccountResponseBodyResult) *CreateAntChainAccountResponseBody {
	s.Result = v
	return s
}

type CreateAntChainAccountResponseBodyResult struct {
	Account    *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s CreateAntChainAccountResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainAccountResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateAntChainAccountResponseBodyResult) SetAccount(v string) *CreateAntChainAccountResponseBodyResult {
	s.Account = &v
	return s
}

func (s *CreateAntChainAccountResponseBodyResult) SetAntChainId(v string) *CreateAntChainAccountResponseBodyResult {
	s.AntChainId = &v
	return s
}

type CreateAntChainAccountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAntChainAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAntChainAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateAntChainAccountResponse) SetHeaders(v map[string]*string) *CreateAntChainAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateAntChainAccountResponse) SetStatusCode(v int32) *CreateAntChainAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAntChainAccountResponse) SetBody(v *CreateAntChainAccountResponseBody) *CreateAntChainAccountResponse {
	s.Body = v
	return s
}

type CreateAntChainAccountWithKeyPairAutoCreationRequest struct {
	Account         *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AntChainId      *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	Password        *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RecoverPassword *string `json:"RecoverPassword,omitempty" xml:"RecoverPassword,omitempty"`
}

func (s CreateAntChainAccountWithKeyPairAutoCreationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainAccountWithKeyPairAutoCreationRequest) GoString() string {
	return s.String()
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationRequest) SetAccount(v string) *CreateAntChainAccountWithKeyPairAutoCreationRequest {
	s.Account = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationRequest) SetAntChainId(v string) *CreateAntChainAccountWithKeyPairAutoCreationRequest {
	s.AntChainId = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationRequest) SetPassword(v string) *CreateAntChainAccountWithKeyPairAutoCreationRequest {
	s.Password = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationRequest) SetRecoverPassword(v string) *CreateAntChainAccountWithKeyPairAutoCreationRequest {
	s.RecoverPassword = &v
	return s
}

type CreateAntChainAccountWithKeyPairAutoCreationResponseBody struct {
	RequestId *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateAntChainAccountWithKeyPairAutoCreationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainAccountWithKeyPairAutoCreationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponseBody) SetRequestId(v string) *CreateAntChainAccountWithKeyPairAutoCreationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponseBody) SetResult(v *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) *CreateAntChainAccountWithKeyPairAutoCreationResponseBody {
	s.Result = v
	return s
}

type CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult struct {
	Account                  *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AccountPrivateKey        *string `json:"AccountPrivateKey,omitempty" xml:"AccountPrivateKey,omitempty"`
	AccountPublicKey         *string `json:"AccountPublicKey,omitempty" xml:"AccountPublicKey,omitempty"`
	AccountRecoverPrivateKey *string `json:"AccountRecoverPrivateKey,omitempty" xml:"AccountRecoverPrivateKey,omitempty"`
	AccountRecoverPublicKey  *string `json:"AccountRecoverPublicKey,omitempty" xml:"AccountRecoverPublicKey,omitempty"`
	AntChainId               *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) SetAccount(v string) *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult {
	s.Account = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountPrivateKey(v string) *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountPrivateKey = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountPublicKey(v string) *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountPublicKey = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountRecoverPrivateKey(v string) *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountRecoverPrivateKey = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountRecoverPublicKey(v string) *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountRecoverPublicKey = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult) SetAntChainId(v string) *CreateAntChainAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AntChainId = &v
	return s
}

type CreateAntChainAccountWithKeyPairAutoCreationResponse struct {
	Headers    map[string]*string                                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAntChainAccountWithKeyPairAutoCreationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAntChainAccountWithKeyPairAutoCreationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainAccountWithKeyPairAutoCreationResponse) GoString() string {
	return s.String()
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponse) SetHeaders(v map[string]*string) *CreateAntChainAccountWithKeyPairAutoCreationResponse {
	s.Headers = v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponse) SetStatusCode(v int32) *CreateAntChainAccountWithKeyPairAutoCreationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAntChainAccountWithKeyPairAutoCreationResponse) SetBody(v *CreateAntChainAccountWithKeyPairAutoCreationResponseBody) *CreateAntChainAccountWithKeyPairAutoCreationResponse {
	s.Body = v
	return s
}

type CreateAntChainConsortiumRequest struct {
	ConsortiumDescription *string `json:"ConsortiumDescription,omitempty" xml:"ConsortiumDescription,omitempty"`
	// This parameter is required.
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
}

func (s CreateAntChainConsortiumRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainConsortiumRequest) GoString() string {
	return s.String()
}

func (s *CreateAntChainConsortiumRequest) SetConsortiumDescription(v string) *CreateAntChainConsortiumRequest {
	s.ConsortiumDescription = &v
	return s
}

func (s *CreateAntChainConsortiumRequest) SetConsortiumName(v string) *CreateAntChainConsortiumRequest {
	s.ConsortiumName = &v
	return s
}

type CreateAntChainConsortiumResponseBody struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateAntChainConsortiumResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateAntChainConsortiumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainConsortiumResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAntChainConsortiumResponseBody) SetRequestId(v string) *CreateAntChainConsortiumResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAntChainConsortiumResponseBody) SetResult(v *CreateAntChainConsortiumResponseBodyResult) *CreateAntChainConsortiumResponseBody {
	s.Result = v
	return s
}

type CreateAntChainConsortiumResponseBodyResult struct {
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s CreateAntChainConsortiumResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainConsortiumResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateAntChainConsortiumResponseBodyResult) SetConsortiumId(v string) *CreateAntChainConsortiumResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

type CreateAntChainConsortiumResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAntChainConsortiumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAntChainConsortiumResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainConsortiumResponse) GoString() string {
	return s.String()
}

func (s *CreateAntChainConsortiumResponse) SetHeaders(v map[string]*string) *CreateAntChainConsortiumResponse {
	s.Headers = v
	return s
}

func (s *CreateAntChainConsortiumResponse) SetStatusCode(v int32) *CreateAntChainConsortiumResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAntChainConsortiumResponse) SetBody(v *CreateAntChainConsortiumResponseBody) *CreateAntChainConsortiumResponse {
	s.Body = v
	return s
}

type CreateAntChainContractContentRequest struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	ContentName *string `json:"ContentName,omitempty" xml:"ContentName,omitempty"`
	// This parameter is required.
	IsDirectory     *bool   `json:"IsDirectory,omitempty" xml:"IsDirectory,omitempty"`
	ParentContentId *string `json:"ParentContentId,omitempty" xml:"ParentContentId,omitempty"`
	// This parameter is required.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s CreateAntChainContractContentRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainContractContentRequest) GoString() string {
	return s.String()
}

func (s *CreateAntChainContractContentRequest) SetContent(v string) *CreateAntChainContractContentRequest {
	s.Content = &v
	return s
}

func (s *CreateAntChainContractContentRequest) SetContentName(v string) *CreateAntChainContractContentRequest {
	s.ContentName = &v
	return s
}

func (s *CreateAntChainContractContentRequest) SetIsDirectory(v bool) *CreateAntChainContractContentRequest {
	s.IsDirectory = &v
	return s
}

func (s *CreateAntChainContractContentRequest) SetParentContentId(v string) *CreateAntChainContractContentRequest {
	s.ParentContentId = &v
	return s
}

func (s *CreateAntChainContractContentRequest) SetProjectId(v string) *CreateAntChainContractContentRequest {
	s.ProjectId = &v
	return s
}

type CreateAntChainContractContentResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateAntChainContractContentResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateAntChainContractContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainContractContentResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAntChainContractContentResponseBody) SetRequestId(v string) *CreateAntChainContractContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAntChainContractContentResponseBody) SetResult(v *CreateAntChainContractContentResponseBodyResult) *CreateAntChainContractContentResponseBody {
	s.Result = v
	return s
}

type CreateAntChainContractContentResponseBodyResult struct {
	Content         *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ContentId       *string `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
	ContentName     *string `json:"ContentName,omitempty" xml:"ContentName,omitempty"`
	CreateTime      *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsDirectory     *bool   `json:"IsDirectory,omitempty" xml:"IsDirectory,omitempty"`
	ParentContentId *string `json:"ParentContentId,omitempty" xml:"ParentContentId,omitempty"`
	ProjectId       *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	UpdateTime      *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s CreateAntChainContractContentResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainContractContentResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateAntChainContractContentResponseBodyResult) SetContent(v string) *CreateAntChainContractContentResponseBodyResult {
	s.Content = &v
	return s
}

func (s *CreateAntChainContractContentResponseBodyResult) SetContentId(v string) *CreateAntChainContractContentResponseBodyResult {
	s.ContentId = &v
	return s
}

func (s *CreateAntChainContractContentResponseBodyResult) SetContentName(v string) *CreateAntChainContractContentResponseBodyResult {
	s.ContentName = &v
	return s
}

func (s *CreateAntChainContractContentResponseBodyResult) SetCreateTime(v string) *CreateAntChainContractContentResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateAntChainContractContentResponseBodyResult) SetIsDirectory(v bool) *CreateAntChainContractContentResponseBodyResult {
	s.IsDirectory = &v
	return s
}

func (s *CreateAntChainContractContentResponseBodyResult) SetParentContentId(v string) *CreateAntChainContractContentResponseBodyResult {
	s.ParentContentId = &v
	return s
}

func (s *CreateAntChainContractContentResponseBodyResult) SetProjectId(v string) *CreateAntChainContractContentResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *CreateAntChainContractContentResponseBodyResult) SetUpdateTime(v string) *CreateAntChainContractContentResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type CreateAntChainContractContentResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAntChainContractContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAntChainContractContentResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainContractContentResponse) GoString() string {
	return s.String()
}

func (s *CreateAntChainContractContentResponse) SetHeaders(v map[string]*string) *CreateAntChainContractContentResponse {
	s.Headers = v
	return s
}

func (s *CreateAntChainContractContentResponse) SetStatusCode(v int32) *CreateAntChainContractContentResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAntChainContractContentResponse) SetBody(v *CreateAntChainContractContentResponseBody) *CreateAntChainContractContentResponse {
	s.Body = v
	return s
}

type CreateAntChainContractProjectRequest struct {
	// This parameter is required.
	ConsortiumId       *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	ProjectDescription *string `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	// This parameter is required.
	ProjectName *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	// This parameter is required.
	ProjectVersion *string `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
}

func (s CreateAntChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *CreateAntChainContractProjectRequest) SetConsortiumId(v string) *CreateAntChainContractProjectRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateAntChainContractProjectRequest) SetProjectDescription(v string) *CreateAntChainContractProjectRequest {
	s.ProjectDescription = &v
	return s
}

func (s *CreateAntChainContractProjectRequest) SetProjectName(v string) *CreateAntChainContractProjectRequest {
	s.ProjectName = &v
	return s
}

func (s *CreateAntChainContractProjectRequest) SetProjectVersion(v string) *CreateAntChainContractProjectRequest {
	s.ProjectVersion = &v
	return s
}

type CreateAntChainContractProjectResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateAntChainContractProjectResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreateAntChainContractProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainContractProjectResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAntChainContractProjectResponseBody) SetRequestId(v string) *CreateAntChainContractProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAntChainContractProjectResponseBody) SetResult(v *CreateAntChainContractProjectResponseBodyResult) *CreateAntChainContractProjectResponseBody {
	s.Result = v
	return s
}

type CreateAntChainContractProjectResponseBodyResult struct {
	ConsortiumId       *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ProjectDescription *string `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	ProjectId          *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName        *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectVersion     *string `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
	UpdateTime         *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s CreateAntChainContractProjectResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainContractProjectResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateAntChainContractProjectResponseBodyResult) SetConsortiumId(v string) *CreateAntChainContractProjectResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *CreateAntChainContractProjectResponseBodyResult) SetCreateTime(v int64) *CreateAntChainContractProjectResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateAntChainContractProjectResponseBodyResult) SetProjectDescription(v string) *CreateAntChainContractProjectResponseBodyResult {
	s.ProjectDescription = &v
	return s
}

func (s *CreateAntChainContractProjectResponseBodyResult) SetProjectId(v string) *CreateAntChainContractProjectResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *CreateAntChainContractProjectResponseBodyResult) SetProjectName(v string) *CreateAntChainContractProjectResponseBodyResult {
	s.ProjectName = &v
	return s
}

func (s *CreateAntChainContractProjectResponseBodyResult) SetProjectVersion(v string) *CreateAntChainContractProjectResponseBodyResult {
	s.ProjectVersion = &v
	return s
}

func (s *CreateAntChainContractProjectResponseBodyResult) SetUpdateTime(v int64) *CreateAntChainContractProjectResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type CreateAntChainContractProjectResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateAntChainContractProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateAntChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAntChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *CreateAntChainContractProjectResponse) SetHeaders(v map[string]*string) *CreateAntChainContractProjectResponse {
	s.Headers = v
	return s
}

func (s *CreateAntChainContractProjectResponse) SetStatusCode(v int32) *CreateAntChainContractProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAntChainContractProjectResponse) SetBody(v *CreateAntChainContractProjectResponseBody) *CreateAntChainContractProjectResponse {
	s.Body = v
	return s
}

type CreateBlockchainRequest struct {
	Bizid              *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	BlockchainRegionId *string `json:"BlockchainRegionId,omitempty" xml:"BlockchainRegionId,omitempty"`
	BlockchainType     *string `json:"BlockchainType,omitempty" xml:"BlockchainType,omitempty"`
	CipherSuit         *string `json:"CipherSuit,omitempty" xml:"CipherSuit,omitempty"`
	LiveTime           *int32  `json:"LiveTime,omitempty" xml:"LiveTime,omitempty"`
	MachineNum         *int32  `json:"MachineNum,omitempty" xml:"MachineNum,omitempty"`
	MerkleTreeSuit     *string `json:"MerkleTreeSuit,omitempty" xml:"MerkleTreeSuit,omitempty"`
	Size               *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	TlsAlgo            *string `json:"TlsAlgo,omitempty" xml:"TlsAlgo,omitempty"`
}

func (s CreateBlockchainRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainRequest) GoString() string {
	return s.String()
}

func (s *CreateBlockchainRequest) SetBizid(v string) *CreateBlockchainRequest {
	s.Bizid = &v
	return s
}

func (s *CreateBlockchainRequest) SetBlockchainRegionId(v string) *CreateBlockchainRequest {
	s.BlockchainRegionId = &v
	return s
}

func (s *CreateBlockchainRequest) SetBlockchainType(v string) *CreateBlockchainRequest {
	s.BlockchainType = &v
	return s
}

func (s *CreateBlockchainRequest) SetCipherSuit(v string) *CreateBlockchainRequest {
	s.CipherSuit = &v
	return s
}

func (s *CreateBlockchainRequest) SetLiveTime(v int32) *CreateBlockchainRequest {
	s.LiveTime = &v
	return s
}

func (s *CreateBlockchainRequest) SetMachineNum(v int32) *CreateBlockchainRequest {
	s.MachineNum = &v
	return s
}

func (s *CreateBlockchainRequest) SetMerkleTreeSuit(v string) *CreateBlockchainRequest {
	s.MerkleTreeSuit = &v
	return s
}

func (s *CreateBlockchainRequest) SetSize(v int32) *CreateBlockchainRequest {
	s.Size = &v
	return s
}

func (s *CreateBlockchainRequest) SetTlsAlgo(v string) *CreateBlockchainRequest {
	s.TlsAlgo = &v
	return s
}

type CreateBlockchainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateBlockchainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBlockchainResponseBody) SetRequestId(v string) *CreateBlockchainResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBlockchainResponseBody) SetResult(v string) *CreateBlockchainResponseBody {
	s.Result = &v
	return s
}

type CreateBlockchainResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBlockchainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBlockchainResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainResponse) GoString() string {
	return s.String()
}

func (s *CreateBlockchainResponse) SetHeaders(v map[string]*string) *CreateBlockchainResponse {
	s.Headers = v
	return s
}

func (s *CreateBlockchainResponse) SetStatusCode(v int32) *CreateBlockchainResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBlockchainResponse) SetBody(v *CreateBlockchainResponseBody) *CreateBlockchainResponse {
	s.Body = v
	return s
}

type CreateBlockchainApplicationRequest struct {
	Bizid              *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	BlockchainRegionId *string `json:"BlockchainRegionId,omitempty" xml:"BlockchainRegionId,omitempty"`
	BlockchainType     *string `json:"BlockchainType,omitempty" xml:"BlockchainType,omitempty"`
	CipherSuit         *string `json:"CipherSuit,omitempty" xml:"CipherSuit,omitempty"`
	LiveTime           *int32  `json:"LiveTime,omitempty" xml:"LiveTime,omitempty"`
	MachineNum         *int32  `json:"MachineNum,omitempty" xml:"MachineNum,omitempty"`
	MerkleTreeSuit     *string `json:"MerkleTreeSuit,omitempty" xml:"MerkleTreeSuit,omitempty"`
	Size               *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	TlsAlgo            *string `json:"TlsAlgo,omitempty" xml:"TlsAlgo,omitempty"`
}

func (s CreateBlockchainApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainApplicationRequest) GoString() string {
	return s.String()
}

func (s *CreateBlockchainApplicationRequest) SetBizid(v string) *CreateBlockchainApplicationRequest {
	s.Bizid = &v
	return s
}

func (s *CreateBlockchainApplicationRequest) SetBlockchainRegionId(v string) *CreateBlockchainApplicationRequest {
	s.BlockchainRegionId = &v
	return s
}

func (s *CreateBlockchainApplicationRequest) SetBlockchainType(v string) *CreateBlockchainApplicationRequest {
	s.BlockchainType = &v
	return s
}

func (s *CreateBlockchainApplicationRequest) SetCipherSuit(v string) *CreateBlockchainApplicationRequest {
	s.CipherSuit = &v
	return s
}

func (s *CreateBlockchainApplicationRequest) SetLiveTime(v int32) *CreateBlockchainApplicationRequest {
	s.LiveTime = &v
	return s
}

func (s *CreateBlockchainApplicationRequest) SetMachineNum(v int32) *CreateBlockchainApplicationRequest {
	s.MachineNum = &v
	return s
}

func (s *CreateBlockchainApplicationRequest) SetMerkleTreeSuit(v string) *CreateBlockchainApplicationRequest {
	s.MerkleTreeSuit = &v
	return s
}

func (s *CreateBlockchainApplicationRequest) SetSize(v int32) *CreateBlockchainApplicationRequest {
	s.Size = &v
	return s
}

func (s *CreateBlockchainApplicationRequest) SetTlsAlgo(v string) *CreateBlockchainApplicationRequest {
	s.TlsAlgo = &v
	return s
}

type CreateBlockchainApplicationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateBlockchainApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBlockchainApplicationResponseBody) SetRequestId(v string) *CreateBlockchainApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBlockchainApplicationResponseBody) SetResult(v string) *CreateBlockchainApplicationResponseBody {
	s.Result = &v
	return s
}

type CreateBlockchainApplicationResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBlockchainApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBlockchainApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainApplicationResponse) GoString() string {
	return s.String()
}

func (s *CreateBlockchainApplicationResponse) SetHeaders(v map[string]*string) *CreateBlockchainApplicationResponse {
	s.Headers = v
	return s
}

func (s *CreateBlockchainApplicationResponse) SetStatusCode(v int32) *CreateBlockchainApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBlockchainApplicationResponse) SetBody(v *CreateBlockchainApplicationResponseBody) *CreateBlockchainApplicationResponse {
	s.Body = v
	return s
}

type CreateBlockchainApplyRequest struct {
	Bizid      *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	LiveTime   *int32  `json:"LiveTime,omitempty" xml:"LiveTime,omitempty"`
	MachineNum *int32  `json:"MachineNum,omitempty" xml:"MachineNum,omitempty"`
	Size       *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s CreateBlockchainApplyRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainApplyRequest) GoString() string {
	return s.String()
}

func (s *CreateBlockchainApplyRequest) SetBizid(v string) *CreateBlockchainApplyRequest {
	s.Bizid = &v
	return s
}

func (s *CreateBlockchainApplyRequest) SetLiveTime(v int32) *CreateBlockchainApplyRequest {
	s.LiveTime = &v
	return s
}

func (s *CreateBlockchainApplyRequest) SetMachineNum(v int32) *CreateBlockchainApplyRequest {
	s.MachineNum = &v
	return s
}

func (s *CreateBlockchainApplyRequest) SetSize(v int32) *CreateBlockchainApplyRequest {
	s.Size = &v
	return s
}

type CreateBlockchainApplyResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateBlockchainApplyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainApplyResponseBody) GoString() string {
	return s.String()
}

func (s *CreateBlockchainApplyResponseBody) SetRequestId(v string) *CreateBlockchainApplyResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateBlockchainApplyResponseBody) SetResult(v string) *CreateBlockchainApplyResponseBody {
	s.Result = &v
	return s
}

type CreateBlockchainApplyResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateBlockchainApplyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateBlockchainApplyResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateBlockchainApplyResponse) GoString() string {
	return s.String()
}

func (s *CreateBlockchainApplyResponse) SetHeaders(v map[string]*string) *CreateBlockchainApplyResponse {
	s.Headers = v
	return s
}

func (s *CreateBlockchainApplyResponse) SetStatusCode(v int32) *CreateBlockchainApplyResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateBlockchainApplyResponse) SetBody(v *CreateBlockchainApplyResponseBody) *CreateBlockchainApplyResponse {
	s.Body = v
	return s
}

type CreateChaincodeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// chan-first-channel-1w55v3u39x2xz
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// consortium-aaaaaa-akpcsjjac2jd
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// OR (\\"aaaaaa1MSP.peer\\")
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa1-1oxw31d046jtl
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// https://chaincode.oss-cn-beijing.aliyuncs.com
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// aaaaaa1/a0cf8729-7d47-44c9-9ed5-6d2fdfc8dc2c/sacc.cc
	OssUrl *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
}

func (s CreateChaincodeRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChaincodeRequest) GoString() string {
	return s.String()
}

func (s *CreateChaincodeRequest) SetChannelId(v string) *CreateChaincodeRequest {
	s.ChannelId = &v
	return s
}

func (s *CreateChaincodeRequest) SetConsortiumId(v string) *CreateChaincodeRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChaincodeRequest) SetEndorsePolicy(v string) *CreateChaincodeRequest {
	s.EndorsePolicy = &v
	return s
}

func (s *CreateChaincodeRequest) SetLocation(v string) *CreateChaincodeRequest {
	s.Location = &v
	return s
}

func (s *CreateChaincodeRequest) SetOrganizationId(v string) *CreateChaincodeRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateChaincodeRequest) SetOssBucket(v string) *CreateChaincodeRequest {
	s.OssBucket = &v
	return s
}

func (s *CreateChaincodeRequest) SetOssUrl(v string) *CreateChaincodeRequest {
	s.OssUrl = &v
	return s
}

type CreateChaincodeResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// CD264CC8-B892-4CDC-BD31-7D179EE6E396
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateChaincodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateChaincodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateChaincodeResponseBody) GoString() string {
	return s.String()
}

func (s *CreateChaincodeResponseBody) SetErrorCode(v int32) *CreateChaincodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateChaincodeResponseBody) SetRequestId(v string) *CreateChaincodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateChaincodeResponseBody) SetResult(v *CreateChaincodeResponseBodyResult) *CreateChaincodeResponseBody {
	s.Result = v
	return s
}

func (s *CreateChaincodeResponseBody) SetSuccess(v bool) *CreateChaincodeResponseBody {
	s.Success = &v
	return s
}

type CreateChaincodeResponseBodyResult struct {
	// example:
	//
	// code-sacc-1pr09q7jmo0np
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// first-channel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// example:
	//
	// consortium-aaaaaa-akpcsjjac2jd
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1544766801000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1544766801000
	DeployTime *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	// example:
	//
	// OR (\\"aaaaaa1MSP.peer\\")
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// string
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// true
	Install *bool `json:"Install,omitempty" xml:"Install,omitempty"`
	// example:
	//
	// string
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// sacc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// go-sdk-demo/chaincode/src
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// peers-aaaaaa1-1oxw31d046jtl
	ProviderId *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	// example:
	//
	// peers-aaaaaa1-1oxw31d046jtl
	ProviderName *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	// example:
	//
	// Instantiatable
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s CreateChaincodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateChaincodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateChaincodeResponseBodyResult) SetChaincodeId(v string) *CreateChaincodeResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetChannelName(v string) *CreateChaincodeResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetConsortiumId(v string) *CreateChaincodeResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetCreateTime(v string) *CreateChaincodeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetDeployTime(v string) *CreateChaincodeResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetEndorsePolicy(v string) *CreateChaincodeResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetInput(v string) *CreateChaincodeResponseBodyResult {
	s.Input = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetInstall(v bool) *CreateChaincodeResponseBodyResult {
	s.Install = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetMessage(v string) *CreateChaincodeResponseBodyResult {
	s.Message = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetName(v string) *CreateChaincodeResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetPath(v string) *CreateChaincodeResponseBodyResult {
	s.Path = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetProviderId(v string) *CreateChaincodeResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetProviderName(v string) *CreateChaincodeResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetState(v string) *CreateChaincodeResponseBodyResult {
	s.State = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetType(v int32) *CreateChaincodeResponseBodyResult {
	s.Type = &v
	return s
}

func (s *CreateChaincodeResponseBodyResult) SetVersion(v string) *CreateChaincodeResponseBodyResult {
	s.Version = &v
	return s
}

type CreateChaincodeResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateChaincodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateChaincodeResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChaincodeResponse) GoString() string {
	return s.String()
}

func (s *CreateChaincodeResponse) SetHeaders(v map[string]*string) *CreateChaincodeResponse {
	s.Headers = v
	return s
}

func (s *CreateChaincodeResponse) SetStatusCode(v int32) *CreateChaincodeResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateChaincodeResponse) SetBody(v *CreateChaincodeResponseBody) *CreateChaincodeResponse {
	s.Body = v
	return s
}

type CreateChannelRequest struct {
	// example:
	//
	// 2
	BatchTimeout *int32 `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// channelx
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// consortium-aaaaaa-akpcsjjac2jd
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 2
	MaxMessageCount *int32 `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	// This parameter is required.
	Organization []*CreateChannelRequestOrganization `json:"Organization,omitempty" xml:"Organization,omitempty" type:"Repeated"`
	// example:
	//
	// 2
	PreferredMaxBytes *int32 `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
}

func (s CreateChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelRequest) GoString() string {
	return s.String()
}

func (s *CreateChannelRequest) SetBatchTimeout(v int32) *CreateChannelRequest {
	s.BatchTimeout = &v
	return s
}

func (s *CreateChannelRequest) SetChannelName(v string) *CreateChannelRequest {
	s.ChannelName = &v
	return s
}

func (s *CreateChannelRequest) SetConsortiumId(v string) *CreateChannelRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChannelRequest) SetMaxMessageCount(v int32) *CreateChannelRequest {
	s.MaxMessageCount = &v
	return s
}

func (s *CreateChannelRequest) SetOrganization(v []*CreateChannelRequestOrganization) *CreateChannelRequest {
	s.Organization = v
	return s
}

func (s *CreateChannelRequest) SetPreferredMaxBytes(v int32) *CreateChannelRequest {
	s.PreferredMaxBytes = &v
	return s
}

type CreateChannelRequestOrganization struct {
	// example:
	//
	// peers-aaaaaa1-1oxw31d046jtl
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateChannelRequestOrganization) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelRequestOrganization) GoString() string {
	return s.String()
}

func (s *CreateChannelRequestOrganization) SetId(v string) *CreateChannelRequestOrganization {
	s.Id = &v
	return s
}

type CreateChannelResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateChannelResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelResponseBody) GoString() string {
	return s.String()
}

func (s *CreateChannelResponseBody) SetErrorCode(v int32) *CreateChannelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateChannelResponseBody) SetRequestId(v string) *CreateChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateChannelResponseBody) SetResult(v *CreateChannelResponseBodyResult) *CreateChannelResponseBody {
	s.Result = v
	return s
}

func (s *CreateChannelResponseBody) SetSuccess(v bool) *CreateChannelResponseBody {
	s.Success = &v
	return s
}

type CreateChannelResponseBodyResult struct {
	// example:
	//
	// 2
	BatchTimeout *int32 `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	// example:
	//
	// 2
	BlockCount *int32 `json:"BlockCount,omitempty" xml:"BlockCount,omitempty"`
	// example:
	//
	// 2
	ChaincodeCount *int32 `json:"ChaincodeCount,omitempty" xml:"ChaincodeCount,omitempty"`
	// example:
	//
	// chan-channelx-1l1hmckuuisxo
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// consortium-aaaaaa-akpcsjjac2jd
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// aaaaaa
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	// example:
	//
	// 1544768139624
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 2
	MaxMessageCount *int32 `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	// example:
	//
	// 1
	MemberCount *int32 `json:"MemberCount,omitempty" xml:"MemberCount,omitempty"`
	// example:
	//
	// channelx
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 26842
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// uid-
	OwnerName *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	// example:
	//
	// 1234
	OwnerUid *int32 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// 2
	PreferredMaxBytes *int32 `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Pending
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// true
	SupportConfig *bool `json:"SupportConfig,omitempty" xml:"SupportConfig,omitempty"`
	// example:
	//
	// 1544768139624
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s CreateChannelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateChannelResponseBodyResult) SetBatchTimeout(v int32) *CreateChannelResponseBodyResult {
	s.BatchTimeout = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetBlockCount(v int32) *CreateChannelResponseBodyResult {
	s.BlockCount = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetChaincodeCount(v int32) *CreateChannelResponseBodyResult {
	s.ChaincodeCount = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetChannelId(v string) *CreateChannelResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetConsortiumId(v string) *CreateChannelResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetConsortiumName(v string) *CreateChannelResponseBodyResult {
	s.ConsortiumName = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetCreateTime(v string) *CreateChannelResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetMaxMessageCount(v int32) *CreateChannelResponseBodyResult {
	s.MaxMessageCount = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetMemberCount(v int32) *CreateChannelResponseBodyResult {
	s.MemberCount = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetName(v string) *CreateChannelResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetOwnerBid(v string) *CreateChannelResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetOwnerName(v string) *CreateChannelResponseBodyResult {
	s.OwnerName = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetOwnerUid(v int32) *CreateChannelResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetPreferredMaxBytes(v int32) *CreateChannelResponseBodyResult {
	s.PreferredMaxBytes = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetRequestId(v string) *CreateChannelResponseBodyResult {
	s.RequestId = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetState(v string) *CreateChannelResponseBodyResult {
	s.State = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetSupportConfig(v bool) *CreateChannelResponseBodyResult {
	s.SupportConfig = &v
	return s
}

func (s *CreateChannelResponseBodyResult) SetUpdateTime(v string) *CreateChannelResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type CreateChannelResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelResponse) GoString() string {
	return s.String()
}

func (s *CreateChannelResponse) SetHeaders(v map[string]*string) *CreateChannelResponse {
	s.Headers = v
	return s
}

func (s *CreateChannelResponse) SetStatusCode(v int32) *CreateChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateChannelResponse) SetBody(v *CreateChannelResponseBody) *CreateChannelResponse {
	s.Body = v
	return s
}

type CreateChannelMemberRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// chan-channelx-1l1hmckuuisxo
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	Organization []*CreateChannelMemberRequestOrganization `json:"Organization,omitempty" xml:"Organization,omitempty" type:"Repeated"`
}

func (s CreateChannelMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelMemberRequest) GoString() string {
	return s.String()
}

func (s *CreateChannelMemberRequest) SetChannelId(v string) *CreateChannelMemberRequest {
	s.ChannelId = &v
	return s
}

func (s *CreateChannelMemberRequest) SetOrganization(v []*CreateChannelMemberRequestOrganization) *CreateChannelMemberRequest {
	s.Organization = v
	return s
}

type CreateChannelMemberRequestOrganization struct {
	// example:
	//
	// peers-aaaaaa1-1oxw31d046jtl
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateChannelMemberRequestOrganization) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelMemberRequestOrganization) GoString() string {
	return s.String()
}

func (s *CreateChannelMemberRequestOrganization) SetId(v string) *CreateChannelMemberRequestOrganization {
	s.Id = &v
	return s
}

type CreateChannelMemberResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateChannelMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelMemberResponseBody) GoString() string {
	return s.String()
}

func (s *CreateChannelMemberResponseBody) SetErrorCode(v int32) *CreateChannelMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateChannelMemberResponseBody) SetRequestId(v string) *CreateChannelMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateChannelMemberResponseBody) SetResult(v bool) *CreateChannelMemberResponseBody {
	s.Result = &v
	return s
}

func (s *CreateChannelMemberResponseBody) SetSuccess(v bool) *CreateChannelMemberResponseBody {
	s.Success = &v
	return s
}

type CreateChannelMemberResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateChannelMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateChannelMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateChannelMemberResponse) GoString() string {
	return s.String()
}

func (s *CreateChannelMemberResponse) SetHeaders(v map[string]*string) *CreateChannelMemberResponse {
	s.Headers = v
	return s
}

func (s *CreateChannelMemberResponse) SetStatusCode(v int32) *CreateChannelMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateChannelMemberResponse) SetBody(v *CreateChannelMemberResponseBody) *CreateChannelMemberResponse {
	s.Body = v
	return s
}

type CreateCloudIntegrationServiceTokenRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	Service *string `json:"Service,omitempty" xml:"Service,omitempty"`
}

func (s CreateCloudIntegrationServiceTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudIntegrationServiceTokenRequest) GoString() string {
	return s.String()
}

func (s *CreateCloudIntegrationServiceTokenRequest) SetOrganizationId(v string) *CreateCloudIntegrationServiceTokenRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateCloudIntegrationServiceTokenRequest) SetService(v string) *CreateCloudIntegrationServiceTokenRequest {
	s.Service = &v
	return s
}

type CreateCloudIntegrationServiceTokenResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCloudIntegrationServiceTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudIntegrationServiceTokenResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCloudIntegrationServiceTokenResponseBody) SetErrorCode(v int32) *CreateCloudIntegrationServiceTokenResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateCloudIntegrationServiceTokenResponseBody) SetRequestId(v string) *CreateCloudIntegrationServiceTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCloudIntegrationServiceTokenResponseBody) SetResult(v string) *CreateCloudIntegrationServiceTokenResponseBody {
	s.Result = &v
	return s
}

func (s *CreateCloudIntegrationServiceTokenResponseBody) SetSuccess(v bool) *CreateCloudIntegrationServiceTokenResponseBody {
	s.Success = &v
	return s
}

type CreateCloudIntegrationServiceTokenResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCloudIntegrationServiceTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCloudIntegrationServiceTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudIntegrationServiceTokenResponse) GoString() string {
	return s.String()
}

func (s *CreateCloudIntegrationServiceTokenResponse) SetHeaders(v map[string]*string) *CreateCloudIntegrationServiceTokenResponse {
	s.Headers = v
	return s
}

func (s *CreateCloudIntegrationServiceTokenResponse) SetStatusCode(v int32) *CreateCloudIntegrationServiceTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCloudIntegrationServiceTokenResponse) SetBody(v *CreateCloudIntegrationServiceTokenResponseBody) *CreateCloudIntegrationServiceTokenResponse {
	s.Body = v
	return s
}

type CreateCloudServiceIntegrationRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s CreateCloudServiceIntegrationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudServiceIntegrationRequest) GoString() string {
	return s.String()
}

func (s *CreateCloudServiceIntegrationRequest) SetOrganizationId(v string) *CreateCloudServiceIntegrationRequest {
	s.OrganizationId = &v
	return s
}

type CreateCloudServiceIntegrationResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCloudServiceIntegrationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudServiceIntegrationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCloudServiceIntegrationResponseBody) SetErrorCode(v int32) *CreateCloudServiceIntegrationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateCloudServiceIntegrationResponseBody) SetRequestId(v string) *CreateCloudServiceIntegrationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCloudServiceIntegrationResponseBody) SetResult(v bool) *CreateCloudServiceIntegrationResponseBody {
	s.Result = &v
	return s
}

func (s *CreateCloudServiceIntegrationResponseBody) SetSuccess(v bool) *CreateCloudServiceIntegrationResponseBody {
	s.Success = &v
	return s
}

type CreateCloudServiceIntegrationResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCloudServiceIntegrationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCloudServiceIntegrationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudServiceIntegrationResponse) GoString() string {
	return s.String()
}

func (s *CreateCloudServiceIntegrationResponse) SetHeaders(v map[string]*string) *CreateCloudServiceIntegrationResponse {
	s.Headers = v
	return s
}

func (s *CreateCloudServiceIntegrationResponse) SetStatusCode(v int32) *CreateCloudServiceIntegrationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCloudServiceIntegrationResponse) SetBody(v *CreateCloudServiceIntegrationResponseBody) *CreateCloudServiceIntegrationResponse {
	s.Body = v
	return s
}

type CreateCloudServiceSessionRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s CreateCloudServiceSessionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudServiceSessionRequest) GoString() string {
	return s.String()
}

func (s *CreateCloudServiceSessionRequest) SetOrganizationId(v string) *CreateCloudServiceSessionRequest {
	s.OrganizationId = &v
	return s
}

type CreateCloudServiceSessionResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCloudServiceSessionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudServiceSessionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCloudServiceSessionResponseBody) SetErrorCode(v int32) *CreateCloudServiceSessionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateCloudServiceSessionResponseBody) SetRequestId(v string) *CreateCloudServiceSessionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCloudServiceSessionResponseBody) SetResult(v string) *CreateCloudServiceSessionResponseBody {
	s.Result = &v
	return s
}

func (s *CreateCloudServiceSessionResponseBody) SetSuccess(v bool) *CreateCloudServiceSessionResponseBody {
	s.Success = &v
	return s
}

type CreateCloudServiceSessionResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateCloudServiceSessionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateCloudServiceSessionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudServiceSessionResponse) GoString() string {
	return s.String()
}

func (s *CreateCloudServiceSessionResponse) SetHeaders(v map[string]*string) *CreateCloudServiceSessionResponse {
	s.Headers = v
	return s
}

func (s *CreateCloudServiceSessionResponse) SetStatusCode(v int32) *CreateCloudServiceSessionResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCloudServiceSessionResponse) SetBody(v *CreateCloudServiceSessionResponseBody) *CreateCloudServiceSessionResponse {
	s.Body = v
	return s
}

type CreateConsortiumRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Any
	ChannelPolicy *string `json:"ChannelPolicy,omitempty" xml:"ChannelPolicy,omitempty"`
	// example:
	//
	// some
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// helloworld
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// 24
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	Location     *string `json:"Location,omitempty" xml:"Location,omitempty"`
	MajorVersion *string `json:"MajorVersion,omitempty" xml:"MajorVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// helloworld
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Kafka
	OrdererType *string `json:"OrdererType,omitempty" xml:"OrdererType,omitempty"`
	// example:
	//
	// 2
	OrderersCount *int32                                 `json:"OrderersCount,omitempty" xml:"OrderersCount,omitempty"`
	Organization  []*CreateConsortiumRequestOrganization `json:"Organization,omitempty" xml:"Organization,omitempty" type:"Repeated"`
	// example:
	//
	// 2
	PeersCount *int32 `json:"PeersCount,omitempty" xml:"PeersCount,omitempty"`
	// example:
	//
	// 12
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// basic
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// example:
	//
	// zone
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateConsortiumRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumRequest) GoString() string {
	return s.String()
}

func (s *CreateConsortiumRequest) SetChannelPolicy(v string) *CreateConsortiumRequest {
	s.ChannelPolicy = &v
	return s
}

func (s *CreateConsortiumRequest) SetDescription(v string) *CreateConsortiumRequest {
	s.Description = &v
	return s
}

func (s *CreateConsortiumRequest) SetDomain(v string) *CreateConsortiumRequest {
	s.Domain = &v
	return s
}

func (s *CreateConsortiumRequest) SetDuration(v int32) *CreateConsortiumRequest {
	s.Duration = &v
	return s
}

func (s *CreateConsortiumRequest) SetLocation(v string) *CreateConsortiumRequest {
	s.Location = &v
	return s
}

func (s *CreateConsortiumRequest) SetMajorVersion(v string) *CreateConsortiumRequest {
	s.MajorVersion = &v
	return s
}

func (s *CreateConsortiumRequest) SetName(v string) *CreateConsortiumRequest {
	s.Name = &v
	return s
}

func (s *CreateConsortiumRequest) SetOrdererType(v string) *CreateConsortiumRequest {
	s.OrdererType = &v
	return s
}

func (s *CreateConsortiumRequest) SetOrderersCount(v int32) *CreateConsortiumRequest {
	s.OrderersCount = &v
	return s
}

func (s *CreateConsortiumRequest) SetOrganization(v []*CreateConsortiumRequestOrganization) *CreateConsortiumRequest {
	s.Organization = v
	return s
}

func (s *CreateConsortiumRequest) SetPeersCount(v int32) *CreateConsortiumRequest {
	s.PeersCount = &v
	return s
}

func (s *CreateConsortiumRequest) SetPricingCycle(v string) *CreateConsortiumRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateConsortiumRequest) SetSpecName(v string) *CreateConsortiumRequest {
	s.SpecName = &v
	return s
}

func (s *CreateConsortiumRequest) SetZoneId(v string) *CreateConsortiumRequest {
	s.ZoneId = &v
	return s
}

type CreateConsortiumRequestOrganization struct {
	// example:
	//
	// peers-yidio-1tuigx42b1goc
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateConsortiumRequestOrganization) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumRequestOrganization) GoString() string {
	return s.String()
}

func (s *CreateConsortiumRequestOrganization) SetId(v string) *CreateConsortiumRequestOrganization {
	s.Id = &v
	return s
}

type CreateConsortiumResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateConsortiumResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateConsortiumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConsortiumResponseBody) SetErrorCode(v int32) *CreateConsortiumResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateConsortiumResponseBody) SetRequestId(v string) *CreateConsortiumResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConsortiumResponseBody) SetResult(v *CreateConsortiumResponseBodyResult) *CreateConsortiumResponseBody {
	s.Result = v
	return s
}

func (s *CreateConsortiumResponseBody) SetSuccess(v bool) *CreateConsortiumResponseBody {
	s.Success = &v
	return s
}

type CreateConsortiumResponseBodyResult struct {
	// example:
	//
	// 0
	ChannelCount *int32 `json:"ChannelCount,omitempty" xml:"ChannelCount,omitempty"`
	// example:
	//
	// Any
	ChannelPolicy *string `json:"ChannelPolicy,omitempty" xml:"ChannelPolicy,omitempty"`
	// example:
	//
	// Pending
	ClusterState *string `json:"ClusterState,omitempty" xml:"ClusterState,omitempty"`
	// example:
	//
	// lianmenyumingyi
	CodeName *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1544086901984
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// string
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// hello
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// 2
	MemberCount *int32 `json:"MemberCount,omitempty" xml:"MemberCount,omitempty"`
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1
	OrdererCount *int32 `json:"OrdererCount,omitempty" xml:"OrdererCount,omitempty"`
	// example:
	//
	// Kafka
	OrdererType *string `json:"OrdererType,omitempty" xml:"OrdererType,omitempty"`
	// example:
	//
	// 26842
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// 1019556
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// Pending
	ServiceState *string `json:"ServiceState,omitempty" xml:"ServiceState,omitempty"`
	// example:
	//
	// basic
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// example:
	//
	// zone
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateConsortiumResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateConsortiumResponseBodyResult) SetChannelCount(v int32) *CreateConsortiumResponseBodyResult {
	s.ChannelCount = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetChannelPolicy(v string) *CreateConsortiumResponseBodyResult {
	s.ChannelPolicy = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetClusterState(v string) *CreateConsortiumResponseBodyResult {
	s.ClusterState = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetCodeName(v string) *CreateConsortiumResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetConsortiumId(v string) *CreateConsortiumResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetCreateTime(v string) *CreateConsortiumResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetDescription(v string) *CreateConsortiumResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetDomain(v string) *CreateConsortiumResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetMemberCount(v int32) *CreateConsortiumResponseBodyResult {
	s.MemberCount = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetName(v string) *CreateConsortiumResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetOrdererCount(v int32) *CreateConsortiumResponseBodyResult {
	s.OrdererCount = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetOrdererType(v string) *CreateConsortiumResponseBodyResult {
	s.OrdererType = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetOwnerBid(v string) *CreateConsortiumResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetOwnerUid(v int64) *CreateConsortiumResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetRegionId(v string) *CreateConsortiumResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetServiceState(v string) *CreateConsortiumResponseBodyResult {
	s.ServiceState = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetSpecName(v string) *CreateConsortiumResponseBodyResult {
	s.SpecName = &v
	return s
}

func (s *CreateConsortiumResponseBodyResult) SetZoneId(v string) *CreateConsortiumResponseBodyResult {
	s.ZoneId = &v
	return s
}

type CreateConsortiumResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateConsortiumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateConsortiumResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumResponse) GoString() string {
	return s.String()
}

func (s *CreateConsortiumResponse) SetHeaders(v map[string]*string) *CreateConsortiumResponse {
	s.Headers = v
	return s
}

func (s *CreateConsortiumResponse) SetStatusCode(v int32) *CreateConsortiumResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateConsortiumResponse) SetBody(v *CreateConsortiumResponseBody) *CreateConsortiumResponse {
	s.Body = v
	return s
}

type CreateConsortiumMemberRequest struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// consortium-aaaaaa-akpcsjjac2jd
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	Organization []*CreateConsortiumMemberRequestOrganization `json:"Organization,omitempty" xml:"Organization,omitempty" type:"Repeated"`
}

func (s CreateConsortiumMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumMemberRequest) GoString() string {
	return s.String()
}

func (s *CreateConsortiumMemberRequest) SetCode(v string) *CreateConsortiumMemberRequest {
	s.Code = &v
	return s
}

func (s *CreateConsortiumMemberRequest) SetConsortiumId(v string) *CreateConsortiumMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *CreateConsortiumMemberRequest) SetOrganization(v []*CreateConsortiumMemberRequestOrganization) *CreateConsortiumMemberRequest {
	s.Organization = v
	return s
}

type CreateConsortiumMemberRequestOrganization struct {
	// example:
	//
	// peers-aaaaaa1-1oxw31d046jtl
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s CreateConsortiumMemberRequestOrganization) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumMemberRequestOrganization) GoString() string {
	return s.String()
}

func (s *CreateConsortiumMemberRequestOrganization) SetId(v string) *CreateConsortiumMemberRequestOrganization {
	s.Id = &v
	return s
}

type CreateConsortiumMemberResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Result *bool `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateConsortiumMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumMemberResponseBody) GoString() string {
	return s.String()
}

func (s *CreateConsortiumMemberResponseBody) SetErrorCode(v int32) *CreateConsortiumMemberResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateConsortiumMemberResponseBody) SetRequestId(v string) *CreateConsortiumMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateConsortiumMemberResponseBody) SetResult(v bool) *CreateConsortiumMemberResponseBody {
	s.Result = &v
	return s
}

func (s *CreateConsortiumMemberResponseBody) SetSuccess(v bool) *CreateConsortiumMemberResponseBody {
	s.Success = &v
	return s
}

type CreateConsortiumMemberResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateConsortiumMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateConsortiumMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateConsortiumMemberResponse) GoString() string {
	return s.String()
}

func (s *CreateConsortiumMemberResponse) SetHeaders(v map[string]*string) *CreateConsortiumMemberResponse {
	s.Headers = v
	return s
}

func (s *CreateConsortiumMemberResponse) SetStatusCode(v int32) *CreateConsortiumMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateConsortiumMemberResponse) SetBody(v *CreateConsortiumMemberResponseBody) *CreateConsortiumMemberResponse {
	s.Body = v
	return s
}

type CreateEcosphereRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// Any
	ChannelPolicy *string `json:"ChannelPolicy,omitempty" xml:"ChannelPolicy,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Name
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	// example:
	//
	// string
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// 12
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	Location     *string `json:"Location,omitempty" xml:"Location,omitempty"`
	MajorVersion *string `json:"MajorVersion,omitempty" xml:"MajorVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// hello
	OrdererDomain *string `json:"OrdererDomain,omitempty" xml:"OrdererDomain,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// Kafka
	OrdererType *string `json:"OrdererType,omitempty" xml:"OrdererType,omitempty"`
	// example:
	//
	// 2
	OrderersCount *int32 `json:"OrderersCount,omitempty" xml:"OrderersCount,omitempty"`
	// This parameter is required.
	Organization []*CreateEcosphereRequestOrganization `json:"Organization,omitempty" xml:"Organization,omitempty" type:"Repeated"`
	// example:
	//
	// 2
	PeersCount   *int32  `json:"PeersCount,omitempty" xml:"PeersCount,omitempty"`
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// basic
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// example:
	//
	// cn-hangzhou
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateEcosphereRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEcosphereRequest) GoString() string {
	return s.String()
}

func (s *CreateEcosphereRequest) SetChannelPolicy(v string) *CreateEcosphereRequest {
	s.ChannelPolicy = &v
	return s
}

func (s *CreateEcosphereRequest) SetConsortiumName(v string) *CreateEcosphereRequest {
	s.ConsortiumName = &v
	return s
}

func (s *CreateEcosphereRequest) SetDescription(v string) *CreateEcosphereRequest {
	s.Description = &v
	return s
}

func (s *CreateEcosphereRequest) SetDuration(v int32) *CreateEcosphereRequest {
	s.Duration = &v
	return s
}

func (s *CreateEcosphereRequest) SetLocation(v string) *CreateEcosphereRequest {
	s.Location = &v
	return s
}

func (s *CreateEcosphereRequest) SetMajorVersion(v string) *CreateEcosphereRequest {
	s.MajorVersion = &v
	return s
}

func (s *CreateEcosphereRequest) SetOrdererDomain(v string) *CreateEcosphereRequest {
	s.OrdererDomain = &v
	return s
}

func (s *CreateEcosphereRequest) SetOrdererType(v string) *CreateEcosphereRequest {
	s.OrdererType = &v
	return s
}

func (s *CreateEcosphereRequest) SetOrderersCount(v int32) *CreateEcosphereRequest {
	s.OrderersCount = &v
	return s
}

func (s *CreateEcosphereRequest) SetOrganization(v []*CreateEcosphereRequestOrganization) *CreateEcosphereRequest {
	s.Organization = v
	return s
}

func (s *CreateEcosphereRequest) SetPeersCount(v int32) *CreateEcosphereRequest {
	s.PeersCount = &v
	return s
}

func (s *CreateEcosphereRequest) SetPricingCycle(v string) *CreateEcosphereRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateEcosphereRequest) SetSpecName(v string) *CreateEcosphereRequest {
	s.SpecName = &v
	return s
}

func (s *CreateEcosphereRequest) SetZoneId(v string) *CreateEcosphereRequest {
	s.ZoneId = &v
	return s
}

type CreateEcosphereRequestOrganization struct {
	// example:
	//
	// string
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// domain1
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// name1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateEcosphereRequestOrganization) String() string {
	return tea.Prettify(s)
}

func (s CreateEcosphereRequestOrganization) GoString() string {
	return s.String()
}

func (s *CreateEcosphereRequestOrganization) SetDescription(v string) *CreateEcosphereRequestOrganization {
	s.Description = &v
	return s
}

func (s *CreateEcosphereRequestOrganization) SetDomain(v string) *CreateEcosphereRequestOrganization {
	s.Domain = &v
	return s
}

func (s *CreateEcosphereRequestOrganization) SetName(v string) *CreateEcosphereRequestOrganization {
	s.Name = &v
	return s
}

type CreateEcosphereResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// ok
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateEcosphereResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateEcosphereResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEcosphereResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEcosphereResponseBody) SetErrorCode(v int32) *CreateEcosphereResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateEcosphereResponseBody) SetErrorMessage(v string) *CreateEcosphereResponseBody {
	s.ErrorMessage = &v
	return s
}

func (s *CreateEcosphereResponseBody) SetRequestId(v string) *CreateEcosphereResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEcosphereResponseBody) SetResult(v *CreateEcosphereResponseBodyResult) *CreateEcosphereResponseBody {
	s.Result = v
	return s
}

func (s *CreateEcosphereResponseBody) SetSuccess(v bool) *CreateEcosphereResponseBody {
	s.Success = &v
	return s
}

type CreateEcosphereResponseBodyResult struct {
	// example:
	//
	// 2
	ChannelCount *int32 `json:"ChannelCount,omitempty" xml:"ChannelCount,omitempty"`
	// example:
	//
	// Any
	ChannelPolicy *string `json:"ChannelPolicy,omitempty" xml:"ChannelPolicy,omitempty"`
	// example:
	//
	// Pending
	ClusterState *string `json:"ClusterState,omitempty" xml:"ClusterState,omitempty"`
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1544411108000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// hello
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// hello
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// 2
	MemberCount *int32 `json:"MemberCount,omitempty" xml:"MemberCount,omitempty"`
	// example:
	//
	// hello
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2
	OrdererCount *int32 `json:"OrdererCount,omitempty" xml:"OrdererCount,omitempty"`
	// example:
	//
	// Kafka
	OrdererType   *string                                           `json:"OrdererType,omitempty" xml:"OrdererType,omitempty"`
	Organizations []*CreateEcosphereResponseBodyResultOrganizations `json:"Organizations,omitempty" xml:"Organizations,omitempty" type:"Repeated"`
	// example:
	//
	// 26842
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// 144566
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// Pending
	ServiceState *string `json:"ServiceState,omitempty" xml:"ServiceState,omitempty"`
	// example:
	//
	// basic
	SpecName      *string                                         `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	Specification *CreateEcosphereResponseBodyResultSpecification `json:"Specification,omitempty" xml:"Specification,omitempty" type:"Struct"`
	// example:
	//
	// zone
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateEcosphereResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateEcosphereResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateEcosphereResponseBodyResult) SetChannelCount(v int32) *CreateEcosphereResponseBodyResult {
	s.ChannelCount = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetChannelPolicy(v string) *CreateEcosphereResponseBodyResult {
	s.ChannelPolicy = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetClusterState(v string) *CreateEcosphereResponseBodyResult {
	s.ClusterState = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetCode(v string) *CreateEcosphereResponseBodyResult {
	s.Code = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetConsortiumId(v string) *CreateEcosphereResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetCreateTime(v string) *CreateEcosphereResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetDescription(v string) *CreateEcosphereResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetDomain(v string) *CreateEcosphereResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetMemberCount(v int32) *CreateEcosphereResponseBodyResult {
	s.MemberCount = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetName(v string) *CreateEcosphereResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetOrdererCount(v int32) *CreateEcosphereResponseBodyResult {
	s.OrdererCount = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetOrdererType(v string) *CreateEcosphereResponseBodyResult {
	s.OrdererType = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetOrganizations(v []*CreateEcosphereResponseBodyResultOrganizations) *CreateEcosphereResponseBodyResult {
	s.Organizations = v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetOwnerBid(v string) *CreateEcosphereResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetOwnerUid(v int64) *CreateEcosphereResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetRegionId(v string) *CreateEcosphereResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetServiceState(v string) *CreateEcosphereResponseBodyResult {
	s.ServiceState = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetSpecName(v string) *CreateEcosphereResponseBodyResult {
	s.SpecName = &v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetSpecification(v *CreateEcosphereResponseBodyResultSpecification) *CreateEcosphereResponseBodyResult {
	s.Specification = v
	return s
}

func (s *CreateEcosphereResponseBodyResult) SetZoneId(v string) *CreateEcosphereResponseBodyResult {
	s.ZoneId = &v
	return s
}

type CreateEcosphereResponseBodyResultOrganizations struct {
	// example:
	//
	// Pending
	ClusterState *string `json:"ClusterState,omitempty" xml:"ClusterState,omitempty"`
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// 1544411108000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// string
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// string
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// string
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Pending
	ServiceState *string `json:"ServiceState,omitempty" xml:"ServiceState,omitempty"`
}

func (s CreateEcosphereResponseBodyResultOrganizations) String() string {
	return tea.Prettify(s)
}

func (s CreateEcosphereResponseBodyResultOrganizations) GoString() string {
	return s.String()
}

func (s *CreateEcosphereResponseBodyResultOrganizations) SetClusterState(v string) *CreateEcosphereResponseBodyResultOrganizations {
	s.ClusterState = &v
	return s
}

func (s *CreateEcosphereResponseBodyResultOrganizations) SetCode(v string) *CreateEcosphereResponseBodyResultOrganizations {
	s.Code = &v
	return s
}

func (s *CreateEcosphereResponseBodyResultOrganizations) SetCreateTime(v string) *CreateEcosphereResponseBodyResultOrganizations {
	s.CreateTime = &v
	return s
}

func (s *CreateEcosphereResponseBodyResultOrganizations) SetDescription(v string) *CreateEcosphereResponseBodyResultOrganizations {
	s.Description = &v
	return s
}

func (s *CreateEcosphereResponseBodyResultOrganizations) SetDomain(v string) *CreateEcosphereResponseBodyResultOrganizations {
	s.Domain = &v
	return s
}

func (s *CreateEcosphereResponseBodyResultOrganizations) SetName(v string) *CreateEcosphereResponseBodyResultOrganizations {
	s.Name = &v
	return s
}

func (s *CreateEcosphereResponseBodyResultOrganizations) SetServiceState(v string) *CreateEcosphereResponseBodyResultOrganizations {
	s.ServiceState = &v
	return s
}

type CreateEcosphereResponseBodyResultSpecification struct {
	// example:
	//
	// basic
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2
	NumOfNodes *int32 `json:"NumOfNodes,omitempty" xml:"NumOfNodes,omitempty"`
	// example:
	//
	// basic
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s CreateEcosphereResponseBodyResultSpecification) String() string {
	return tea.Prettify(s)
}

func (s CreateEcosphereResponseBodyResultSpecification) GoString() string {
	return s.String()
}

func (s *CreateEcosphereResponseBodyResultSpecification) SetName(v string) *CreateEcosphereResponseBodyResultSpecification {
	s.Name = &v
	return s
}

func (s *CreateEcosphereResponseBodyResultSpecification) SetNumOfNodes(v int32) *CreateEcosphereResponseBodyResultSpecification {
	s.NumOfNodes = &v
	return s
}

func (s *CreateEcosphereResponseBodyResultSpecification) SetTitle(v string) *CreateEcosphereResponseBodyResultSpecification {
	s.Title = &v
	return s
}

type CreateEcosphereResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEcosphereResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEcosphereResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEcosphereResponse) GoString() string {
	return s.String()
}

func (s *CreateEcosphereResponse) SetHeaders(v map[string]*string) *CreateEcosphereResponse {
	s.Headers = v
	return s
}

func (s *CreateEcosphereResponse) SetStatusCode(v int32) *CreateEcosphereResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEcosphereResponse) SetBody(v *CreateEcosphereResponseBody) *CreateEcosphereResponse {
	s.Body = v
	return s
}

type CreateEthereumRequest struct {
	// This parameter is required.
	Consensus   *string `json:"Consensus,omitempty" xml:"Consensus,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Difficulty  *string `json:"Difficulty,omitempty" xml:"Difficulty,omitempty"`
	Gas         *string `json:"Gas,omitempty" xml:"Gas,omitempty"`
	// This parameter is required.
	Name      *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkId *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	// This parameter is required.
	Node   []*CreateEthereumRequestNode `json:"Node,omitempty" xml:"Node,omitempty" type:"Repeated"`
	Region *string                      `json:"Region,omitempty" xml:"Region,omitempty"`
}

func (s CreateEthereumRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumRequest) GoString() string {
	return s.String()
}

func (s *CreateEthereumRequest) SetConsensus(v string) *CreateEthereumRequest {
	s.Consensus = &v
	return s
}

func (s *CreateEthereumRequest) SetDescription(v string) *CreateEthereumRequest {
	s.Description = &v
	return s
}

func (s *CreateEthereumRequest) SetDifficulty(v string) *CreateEthereumRequest {
	s.Difficulty = &v
	return s
}

func (s *CreateEthereumRequest) SetGas(v string) *CreateEthereumRequest {
	s.Gas = &v
	return s
}

func (s *CreateEthereumRequest) SetName(v string) *CreateEthereumRequest {
	s.Name = &v
	return s
}

func (s *CreateEthereumRequest) SetNetworkId(v string) *CreateEthereumRequest {
	s.NetworkId = &v
	return s
}

func (s *CreateEthereumRequest) SetNode(v []*CreateEthereumRequestNode) *CreateEthereumRequest {
	s.Node = v
	return s
}

func (s *CreateEthereumRequest) SetRegion(v string) *CreateEthereumRequest {
	s.Region = &v
	return s
}

type CreateEthereumRequestNode struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s CreateEthereumRequestNode) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumRequestNode) GoString() string {
	return s.String()
}

func (s *CreateEthereumRequestNode) SetName(v string) *CreateEthereumRequestNode {
	s.Name = &v
	return s
}

type CreateEthereumResponseBody struct {
	ErrorCode *int32                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateEthereumResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateEthereumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEthereumResponseBody) SetErrorCode(v int32) *CreateEthereumResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateEthereumResponseBody) SetRequestId(v string) *CreateEthereumResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEthereumResponseBody) SetResult(v *CreateEthereumResponseBodyResult) *CreateEthereumResponseBody {
	s.Result = v
	return s
}

func (s *CreateEthereumResponseBody) SetSuccess(v bool) *CreateEthereumResponseBody {
	s.Success = &v
	return s
}

type CreateEthereumResponseBodyResult struct {
	Consensus   *string `json:"Consensus,omitempty" xml:"Consensus,omitempty"`
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s CreateEthereumResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateEthereumResponseBodyResult) SetConsensus(v string) *CreateEthereumResponseBodyResult {
	s.Consensus = &v
	return s
}

func (s *CreateEthereumResponseBodyResult) SetCreator(v string) *CreateEthereumResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *CreateEthereumResponseBodyResult) SetDescription(v string) *CreateEthereumResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateEthereumResponseBodyResult) SetId(v string) *CreateEthereumResponseBodyResult {
	s.Id = &v
	return s
}

func (s *CreateEthereumResponseBodyResult) SetName(v string) *CreateEthereumResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateEthereumResponseBodyResult) SetNetworkId(v string) *CreateEthereumResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *CreateEthereumResponseBodyResult) SetRegionId(v string) *CreateEthereumResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *CreateEthereumResponseBodyResult) SetState(v string) *CreateEthereumResponseBodyResult {
	s.State = &v
	return s
}

type CreateEthereumResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEthereumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEthereumResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumResponse) GoString() string {
	return s.String()
}

func (s *CreateEthereumResponse) SetHeaders(v map[string]*string) *CreateEthereumResponse {
	s.Headers = v
	return s
}

func (s *CreateEthereumResponse) SetStatusCode(v int32) *CreateEthereumResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEthereumResponse) SetBody(v *CreateEthereumResponseBody) *CreateEthereumResponse {
	s.Body = v
	return s
}

type CreateEthereumInvitationRequest struct {
	// This parameter is required.
	EthereumId *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
}

func (s CreateEthereumInvitationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumInvitationRequest) GoString() string {
	return s.String()
}

func (s *CreateEthereumInvitationRequest) SetEthereumId(v string) *CreateEthereumInvitationRequest {
	s.EthereumId = &v
	return s
}

type CreateEthereumInvitationResponseBody struct {
	ErrorCode *int32                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateEthereumInvitationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateEthereumInvitationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumInvitationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateEthereumInvitationResponseBody) SetErrorCode(v int32) *CreateEthereumInvitationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateEthereumInvitationResponseBody) SetRequestId(v string) *CreateEthereumInvitationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateEthereumInvitationResponseBody) SetResult(v *CreateEthereumInvitationResponseBodyResult) *CreateEthereumInvitationResponseBody {
	s.Result = v
	return s
}

func (s *CreateEthereumInvitationResponseBody) SetSuccess(v bool) *CreateEthereumInvitationResponseBody {
	s.Success = &v
	return s
}

type CreateEthereumInvitationResponseBodyResult struct {
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	Token      *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s CreateEthereumInvitationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumInvitationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateEthereumInvitationResponseBodyResult) SetCode(v string) *CreateEthereumInvitationResponseBodyResult {
	s.Code = &v
	return s
}

func (s *CreateEthereumInvitationResponseBodyResult) SetCreateTime(v string) *CreateEthereumInvitationResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateEthereumInvitationResponseBodyResult) SetExpireTime(v string) *CreateEthereumInvitationResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *CreateEthereumInvitationResponseBodyResult) SetToken(v string) *CreateEthereumInvitationResponseBodyResult {
	s.Token = &v
	return s
}

type CreateEthereumInvitationResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateEthereumInvitationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateEthereumInvitationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateEthereumInvitationResponse) GoString() string {
	return s.String()
}

func (s *CreateEthereumInvitationResponse) SetHeaders(v map[string]*string) *CreateEthereumInvitationResponse {
	s.Headers = v
	return s
}

func (s *CreateEthereumInvitationResponse) SetStatusCode(v int32) *CreateEthereumInvitationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateEthereumInvitationResponse) SetBody(v *CreateEthereumInvitationResponseBody) *CreateEthereumInvitationResponse {
	s.Body = v
	return s
}

type CreateFabricChaincodePackageRequest struct {
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	OssBucket *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	// This parameter is required.
	OssUrl *string `json:"OssUrl,omitempty" xml:"OssUrl,omitempty"`
}

func (s CreateFabricChaincodePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFabricChaincodePackageRequest) GoString() string {
	return s.String()
}

func (s *CreateFabricChaincodePackageRequest) SetLocation(v string) *CreateFabricChaincodePackageRequest {
	s.Location = &v
	return s
}

func (s *CreateFabricChaincodePackageRequest) SetOrganizationId(v string) *CreateFabricChaincodePackageRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateFabricChaincodePackageRequest) SetOssBucket(v string) *CreateFabricChaincodePackageRequest {
	s.OssBucket = &v
	return s
}

func (s *CreateFabricChaincodePackageRequest) SetOssUrl(v string) *CreateFabricChaincodePackageRequest {
	s.OssUrl = &v
	return s
}

type CreateFabricChaincodePackageResponseBody struct {
	ErrorCode *int32                                          `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateFabricChaincodePackageResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                           `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateFabricChaincodePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFabricChaincodePackageResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFabricChaincodePackageResponseBody) SetErrorCode(v int32) *CreateFabricChaincodePackageResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBody) SetMessage(v string) *CreateFabricChaincodePackageResponseBody {
	s.Message = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBody) SetRequestId(v string) *CreateFabricChaincodePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBody) SetResult(v *CreateFabricChaincodePackageResponseBodyResult) *CreateFabricChaincodePackageResponseBody {
	s.Result = v
	return s
}

func (s *CreateFabricChaincodePackageResponseBody) SetSuccess(v bool) *CreateFabricChaincodePackageResponseBody {
	s.Success = &v
	return s
}

type CreateFabricChaincodePackageResponseBodyResult struct {
	ChaincodePackageId *int32  `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	Checksum           *string `json:"Checksum,omitempty" xml:"Checksum,omitempty"`
	DeleteTime         *int64  `json:"DeleteTime,omitempty" xml:"DeleteTime,omitempty"`
	Deleted            *bool   `json:"Deleted,omitempty" xml:"Deleted,omitempty"`
	InstallTime        *int64  `json:"InstallTime,omitempty" xml:"InstallTime,omitempty"`
	Label              *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Md5sum             *string `json:"Md5sum,omitempty" xml:"Md5sum,omitempty"`
	OrganizationId     *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	OssBucket          *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssURL             *string `json:"OssURL,omitempty" xml:"OssURL,omitempty"`
	ProviderBid        *string `json:"ProviderBid,omitempty" xml:"ProviderBid,omitempty"`
	ProviderUid        *int64  `json:"ProviderUid,omitempty" xml:"ProviderUid,omitempty"`
	State              *string `json:"State,omitempty" xml:"State,omitempty"`
	Type               *string `json:"Type,omitempty" xml:"Type,omitempty"`
	TypeString         *bool   `json:"TypeString,omitempty" xml:"TypeString,omitempty"`
	UploadTime         *int64  `json:"UploadTime,omitempty" xml:"UploadTime,omitempty"`
}

func (s CreateFabricChaincodePackageResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateFabricChaincodePackageResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetChaincodePackageId(v int32) *CreateFabricChaincodePackageResponseBodyResult {
	s.ChaincodePackageId = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetChecksum(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.Checksum = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetDeleteTime(v int64) *CreateFabricChaincodePackageResponseBodyResult {
	s.DeleteTime = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetDeleted(v bool) *CreateFabricChaincodePackageResponseBodyResult {
	s.Deleted = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetInstallTime(v int64) *CreateFabricChaincodePackageResponseBodyResult {
	s.InstallTime = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetLabel(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.Label = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetMd5sum(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.Md5sum = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetOrganizationId(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetOssBucket(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.OssBucket = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetOssURL(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.OssURL = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetProviderBid(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.ProviderBid = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetProviderUid(v int64) *CreateFabricChaincodePackageResponseBodyResult {
	s.ProviderUid = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetState(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.State = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetType(v string) *CreateFabricChaincodePackageResponseBodyResult {
	s.Type = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetTypeString(v bool) *CreateFabricChaincodePackageResponseBodyResult {
	s.TypeString = &v
	return s
}

func (s *CreateFabricChaincodePackageResponseBodyResult) SetUploadTime(v int64) *CreateFabricChaincodePackageResponseBodyResult {
	s.UploadTime = &v
	return s
}

type CreateFabricChaincodePackageResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateFabricChaincodePackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateFabricChaincodePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFabricChaincodePackageResponse) GoString() string {
	return s.String()
}

func (s *CreateFabricChaincodePackageResponse) SetHeaders(v map[string]*string) *CreateFabricChaincodePackageResponse {
	s.Headers = v
	return s
}

func (s *CreateFabricChaincodePackageResponse) SetStatusCode(v int32) *CreateFabricChaincodePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateFabricChaincodePackageResponse) SetBody(v *CreateFabricChaincodePackageResponseBody) *CreateFabricChaincodePackageResponse {
	s.Body = v
	return s
}

type CreateOrganizationRequest struct {
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// 24
	Duration *int32 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// cn-hangzhou
	Location     *string `json:"Location,omitempty" xml:"Location,omitempty"`
	MajorVersion *string `json:"MajorVersion,omitempty" xml:"MajorVersion,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 2
	PeersCount   *int32  `json:"PeersCount,omitempty" xml:"PeersCount,omitempty"`
	PricingCycle *string `json:"PricingCycle,omitempty" xml:"PricingCycle,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// basic
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
}

func (s CreateOrganizationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrganizationRequest) GoString() string {
	return s.String()
}

func (s *CreateOrganizationRequest) SetDescription(v string) *CreateOrganizationRequest {
	s.Description = &v
	return s
}

func (s *CreateOrganizationRequest) SetDomain(v string) *CreateOrganizationRequest {
	s.Domain = &v
	return s
}

func (s *CreateOrganizationRequest) SetDuration(v int32) *CreateOrganizationRequest {
	s.Duration = &v
	return s
}

func (s *CreateOrganizationRequest) SetLocation(v string) *CreateOrganizationRequest {
	s.Location = &v
	return s
}

func (s *CreateOrganizationRequest) SetMajorVersion(v string) *CreateOrganizationRequest {
	s.MajorVersion = &v
	return s
}

func (s *CreateOrganizationRequest) SetName(v string) *CreateOrganizationRequest {
	s.Name = &v
	return s
}

func (s *CreateOrganizationRequest) SetPeersCount(v int32) *CreateOrganizationRequest {
	s.PeersCount = &v
	return s
}

func (s *CreateOrganizationRequest) SetPricingCycle(v string) *CreateOrganizationRequest {
	s.PricingCycle = &v
	return s
}

func (s *CreateOrganizationRequest) SetSpecName(v string) *CreateOrganizationRequest {
	s.SpecName = &v
	return s
}

type CreateOrganizationResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateOrganizationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateOrganizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrganizationResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrganizationResponseBody) SetErrorCode(v int32) *CreateOrganizationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateOrganizationResponseBody) SetRequestId(v string) *CreateOrganizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOrganizationResponseBody) SetResult(v *CreateOrganizationResponseBodyResult) *CreateOrganizationResponseBody {
	s.Result = v
	return s
}

func (s *CreateOrganizationResponseBody) SetSuccess(v bool) *CreateOrganizationResponseBody {
	s.Success = &v
	return s
}

type CreateOrganizationResponseBodyResult struct {
	// example:
	//
	// Pending
	ClusterState *string `json:"ClusterState,omitempty" xml:"ClusterState,omitempty"`
	// example:
	//
	// name
	CodeName *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	// example:
	//
	// 2
	ConsortiumCount *int32 `json:"ConsortiumCount,omitempty" xml:"ConsortiumCount,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// Name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// 2544
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// uid-23434
	OwnerName *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	// example:
	//
	// 23434
	OwnerUid *int32 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// 2
	PeerCount *int32 `json:"PeerCount,omitempty" xml:"PeerCount,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Running
	ServiceState *string `json:"ServiceState,omitempty" xml:"ServiceState,omitempty"`
	// example:
	//
	// basic
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// example:
	//
	// 2
	UserCount *int32 `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
	// example:
	//
	// zone
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s CreateOrganizationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateOrganizationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateOrganizationResponseBodyResult) SetClusterState(v string) *CreateOrganizationResponseBodyResult {
	s.ClusterState = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetCodeName(v string) *CreateOrganizationResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetConsortiumCount(v int32) *CreateOrganizationResponseBodyResult {
	s.ConsortiumCount = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetCreateTime(v string) *CreateOrganizationResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetDescription(v string) *CreateOrganizationResponseBodyResult {
	s.Description = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetDomain(v string) *CreateOrganizationResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetName(v string) *CreateOrganizationResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetOrganizationId(v string) *CreateOrganizationResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetOwnerBid(v string) *CreateOrganizationResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetOwnerName(v string) *CreateOrganizationResponseBodyResult {
	s.OwnerName = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetOwnerUid(v int32) *CreateOrganizationResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetPeerCount(v int32) *CreateOrganizationResponseBodyResult {
	s.PeerCount = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetRegionId(v string) *CreateOrganizationResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetRequestId(v string) *CreateOrganizationResponseBodyResult {
	s.RequestId = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetServiceState(v string) *CreateOrganizationResponseBodyResult {
	s.ServiceState = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetSpecName(v string) *CreateOrganizationResponseBodyResult {
	s.SpecName = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetUserCount(v int32) *CreateOrganizationResponseBodyResult {
	s.UserCount = &v
	return s
}

func (s *CreateOrganizationResponseBodyResult) SetZoneId(v string) *CreateOrganizationResponseBodyResult {
	s.ZoneId = &v
	return s
}

type CreateOrganizationResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrganizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrganizationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrganizationResponse) GoString() string {
	return s.String()
}

func (s *CreateOrganizationResponse) SetHeaders(v map[string]*string) *CreateOrganizationResponse {
	s.Headers = v
	return s
}

func (s *CreateOrganizationResponse) SetStatusCode(v int32) *CreateOrganizationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrganizationResponse) SetBody(v *CreateOrganizationResponseBody) *CreateOrganizationResponse {
	s.Body = v
	return s
}

type CreateOrganizationUserRequest struct {
	// example:
	//
	// a
	Attrs *string `json:"Attrs,omitempty" xml:"Attrs,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-yidio-1tuigx42b****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// password
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// username
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s CreateOrganizationUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOrganizationUserRequest) GoString() string {
	return s.String()
}

func (s *CreateOrganizationUserRequest) SetAttrs(v string) *CreateOrganizationUserRequest {
	s.Attrs = &v
	return s
}

func (s *CreateOrganizationUserRequest) SetOrganizationId(v string) *CreateOrganizationUserRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateOrganizationUserRequest) SetPassword(v string) *CreateOrganizationUserRequest {
	s.Password = &v
	return s
}

func (s *CreateOrganizationUserRequest) SetUsername(v string) *CreateOrganizationUserRequest {
	s.Username = &v
	return s
}

type CreateOrganizationUserResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateOrganizationUserResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateOrganizationUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOrganizationUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOrganizationUserResponseBody) SetErrorCode(v int32) *CreateOrganizationUserResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateOrganizationUserResponseBody) SetRequestId(v string) *CreateOrganizationUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOrganizationUserResponseBody) SetResult(v *CreateOrganizationUserResponseBodyResult) *CreateOrganizationUserResponseBody {
	s.Result = v
	return s
}

func (s *CreateOrganizationUserResponseBody) SetSuccess(v bool) *CreateOrganizationUserResponseBody {
	s.Success = &v
	return s
}

type CreateOrganizationUserResponseBodyResult struct {
	// example:
	//
	// 1544086901984
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1544411108000
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// fullname
	Fullname *string `json:"Fullname,omitempty" xml:"Fullname,omitempty"`
	// example:
	//
	// peers-yidio-1tuigx42b****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// password
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// username
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s CreateOrganizationUserResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateOrganizationUserResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateOrganizationUserResponseBodyResult) SetCreateTime(v string) *CreateOrganizationUserResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateOrganizationUserResponseBodyResult) SetExpireTime(v string) *CreateOrganizationUserResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *CreateOrganizationUserResponseBodyResult) SetFullname(v string) *CreateOrganizationUserResponseBodyResult {
	s.Fullname = &v
	return s
}

func (s *CreateOrganizationUserResponseBodyResult) SetOrganizationId(v string) *CreateOrganizationUserResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *CreateOrganizationUserResponseBodyResult) SetPassword(v string) *CreateOrganizationUserResponseBodyResult {
	s.Password = &v
	return s
}

func (s *CreateOrganizationUserResponseBodyResult) SetUsername(v string) *CreateOrganizationUserResponseBodyResult {
	s.Username = &v
	return s
}

type CreateOrganizationUserResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOrganizationUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOrganizationUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOrganizationUserResponse) GoString() string {
	return s.String()
}

func (s *CreateOrganizationUserResponse) SetHeaders(v map[string]*string) *CreateOrganizationUserResponse {
	s.Headers = v
	return s
}

func (s *CreateOrganizationUserResponse) SetStatusCode(v int32) *CreateOrganizationUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOrganizationUserResponse) SetBody(v *CreateOrganizationUserResponseBody) *CreateOrganizationUserResponse {
	s.Body = v
	return s
}

type CreateOwnAccountRequest struct {
	Bizid       *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Identity    *string `json:"Identity,omitempty" xml:"Identity,omitempty"`
	PublicKey   *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
	RecoveryKey *string `json:"RecoveryKey,omitempty" xml:"RecoveryKey,omitempty"`
}

func (s CreateOwnAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateOwnAccountRequest) GoString() string {
	return s.String()
}

func (s *CreateOwnAccountRequest) SetBizid(v string) *CreateOwnAccountRequest {
	s.Bizid = &v
	return s
}

func (s *CreateOwnAccountRequest) SetIdentity(v string) *CreateOwnAccountRequest {
	s.Identity = &v
	return s
}

func (s *CreateOwnAccountRequest) SetPublicKey(v string) *CreateOwnAccountRequest {
	s.PublicKey = &v
	return s
}

func (s *CreateOwnAccountRequest) SetRecoveryKey(v string) *CreateOwnAccountRequest {
	s.RecoveryKey = &v
	return s
}

type CreateOwnAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreateOwnAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateOwnAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreateOwnAccountResponseBody) SetRequestId(v string) *CreateOwnAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateOwnAccountResponseBody) SetResult(v string) *CreateOwnAccountResponseBody {
	s.Result = &v
	return s
}

type CreateOwnAccountResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateOwnAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateOwnAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateOwnAccountResponse) GoString() string {
	return s.String()
}

func (s *CreateOwnAccountResponse) SetHeaders(v map[string]*string) *CreateOwnAccountResponse {
	s.Headers = v
	return s
}

func (s *CreateOwnAccountResponse) SetStatusCode(v int32) *CreateOwnAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateOwnAccountResponse) SetBody(v *CreateOwnAccountResponseBody) *CreateOwnAccountResponse {
	s.Body = v
	return s
}

type CreatePublicAccountWithKeyPairAutoCreationRequest struct {
	Account         *string `json:"Account,omitempty" xml:"Account,omitempty"`
	Bizid           *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Password        *string `json:"Password,omitempty" xml:"Password,omitempty"`
	RecoverPassword *string `json:"RecoverPassword,omitempty" xml:"RecoverPassword,omitempty"`
}

func (s CreatePublicAccountWithKeyPairAutoCreationRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePublicAccountWithKeyPairAutoCreationRequest) GoString() string {
	return s.String()
}

func (s *CreatePublicAccountWithKeyPairAutoCreationRequest) SetAccount(v string) *CreatePublicAccountWithKeyPairAutoCreationRequest {
	s.Account = &v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationRequest) SetBizid(v string) *CreatePublicAccountWithKeyPairAutoCreationRequest {
	s.Bizid = &v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationRequest) SetPassword(v string) *CreatePublicAccountWithKeyPairAutoCreationRequest {
	s.Password = &v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationRequest) SetRecoverPassword(v string) *CreatePublicAccountWithKeyPairAutoCreationRequest {
	s.RecoverPassword = &v
	return s
}

type CreatePublicAccountWithKeyPairAutoCreationResponseBody struct {
	RequestId *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s CreatePublicAccountWithKeyPairAutoCreationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePublicAccountWithKeyPairAutoCreationResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponseBody) SetRequestId(v string) *CreatePublicAccountWithKeyPairAutoCreationResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponseBody) SetResult(v *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult) *CreatePublicAccountWithKeyPairAutoCreationResponseBody {
	s.Result = v
	return s
}

type CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult struct {
	AccountPrivateKey        *string `json:"AccountPrivateKey,omitempty" xml:"AccountPrivateKey,omitempty"`
	AccountPublicKey         *string `json:"AccountPublicKey,omitempty" xml:"AccountPublicKey,omitempty"`
	AccountRecoverPrivateKey *string `json:"AccountRecoverPrivateKey,omitempty" xml:"AccountRecoverPrivateKey,omitempty"`
	AccountRecoverPublicKey  *string `json:"AccountRecoverPublicKey,omitempty" xml:"AccountRecoverPublicKey,omitempty"`
}

func (s CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountPrivateKey(v string) *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountPrivateKey = &v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountPublicKey(v string) *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountPublicKey = &v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountRecoverPrivateKey(v string) *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountRecoverPrivateKey = &v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult) SetAccountRecoverPublicKey(v string) *CreatePublicAccountWithKeyPairAutoCreationResponseBodyResult {
	s.AccountRecoverPublicKey = &v
	return s
}

type CreatePublicAccountWithKeyPairAutoCreationResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePublicAccountWithKeyPairAutoCreationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePublicAccountWithKeyPairAutoCreationResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePublicAccountWithKeyPairAutoCreationResponse) GoString() string {
	return s.String()
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponse) SetHeaders(v map[string]*string) *CreatePublicAccountWithKeyPairAutoCreationResponse {
	s.Headers = v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponse) SetStatusCode(v int32) *CreatePublicAccountWithKeyPairAutoCreationResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePublicAccountWithKeyPairAutoCreationResponse) SetBody(v *CreatePublicAccountWithKeyPairAutoCreationResponseBody) *CreatePublicAccountWithKeyPairAutoCreationResponse {
	s.Body = v
	return s
}

type CreatePublicAntChainAccountRequest struct {
	Account              *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AccountPubKey        *string `json:"AccountPubKey,omitempty" xml:"AccountPubKey,omitempty"`
	AccountRecoverPubKey *string `json:"AccountRecoverPubKey,omitempty" xml:"AccountRecoverPubKey,omitempty"`
	Bizid                *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s CreatePublicAntChainAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s CreatePublicAntChainAccountRequest) GoString() string {
	return s.String()
}

func (s *CreatePublicAntChainAccountRequest) SetAccount(v string) *CreatePublicAntChainAccountRequest {
	s.Account = &v
	return s
}

func (s *CreatePublicAntChainAccountRequest) SetAccountPubKey(v string) *CreatePublicAntChainAccountRequest {
	s.AccountPubKey = &v
	return s
}

func (s *CreatePublicAntChainAccountRequest) SetAccountRecoverPubKey(v string) *CreatePublicAntChainAccountRequest {
	s.AccountRecoverPubKey = &v
	return s
}

func (s *CreatePublicAntChainAccountRequest) SetBizid(v string) *CreatePublicAntChainAccountRequest {
	s.Bizid = &v
	return s
}

type CreatePublicAntChainAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s CreatePublicAntChainAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreatePublicAntChainAccountResponseBody) GoString() string {
	return s.String()
}

func (s *CreatePublicAntChainAccountResponseBody) SetRequestId(v string) *CreatePublicAntChainAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreatePublicAntChainAccountResponseBody) SetResult(v string) *CreatePublicAntChainAccountResponseBody {
	s.Result = &v
	return s
}

type CreatePublicAntChainAccountResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreatePublicAntChainAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreatePublicAntChainAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s CreatePublicAntChainAccountResponse) GoString() string {
	return s.String()
}

func (s *CreatePublicAntChainAccountResponse) SetHeaders(v map[string]*string) *CreatePublicAntChainAccountResponse {
	s.Headers = v
	return s
}

func (s *CreatePublicAntChainAccountResponse) SetStatusCode(v int32) *CreatePublicAntChainAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *CreatePublicAntChainAccountResponse) SetBody(v *CreatePublicAntChainAccountResponseBody) *CreatePublicAntChainAccountResponse {
	s.Body = v
	return s
}

type CreateSmartContractJobResponseBody struct {
	ErrorCode *int32                                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateSmartContractJobResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateSmartContractJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartContractJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSmartContractJobResponseBody) SetErrorCode(v int32) *CreateSmartContractJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateSmartContractJobResponseBody) SetRequestId(v string) *CreateSmartContractJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSmartContractJobResponseBody) SetResult(v *CreateSmartContractJobResponseBodyResult) *CreateSmartContractJobResponseBody {
	s.Result = v
	return s
}

func (s *CreateSmartContractJobResponseBody) SetSuccess(v bool) *CreateSmartContractJobResponseBody {
	s.Success = &v
	return s
}

type CreateSmartContractJobResponseBodyResult struct {
	AccessId  *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	Dir       *int32  `json:"Dir,omitempty" xml:"Dir,omitempty"`
	Expire    *int64  `json:"Expire,omitempty" xml:"Expire,omitempty"`
	Host      *string `json:"Host,omitempty" xml:"Host,omitempty"`
	JobID     *string `json:"JobID,omitempty" xml:"JobID,omitempty"`
	Policy    *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s CreateSmartContractJobResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartContractJobResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateSmartContractJobResponseBodyResult) SetAccessId(v string) *CreateSmartContractJobResponseBodyResult {
	s.AccessId = &v
	return s
}

func (s *CreateSmartContractJobResponseBodyResult) SetDir(v int32) *CreateSmartContractJobResponseBodyResult {
	s.Dir = &v
	return s
}

func (s *CreateSmartContractJobResponseBodyResult) SetExpire(v int64) *CreateSmartContractJobResponseBodyResult {
	s.Expire = &v
	return s
}

func (s *CreateSmartContractJobResponseBodyResult) SetHost(v string) *CreateSmartContractJobResponseBodyResult {
	s.Host = &v
	return s
}

func (s *CreateSmartContractJobResponseBodyResult) SetJobID(v string) *CreateSmartContractJobResponseBodyResult {
	s.JobID = &v
	return s
}

func (s *CreateSmartContractJobResponseBodyResult) SetPolicy(v string) *CreateSmartContractJobResponseBodyResult {
	s.Policy = &v
	return s
}

func (s *CreateSmartContractJobResponseBodyResult) SetSignature(v string) *CreateSmartContractJobResponseBodyResult {
	s.Signature = &v
	return s
}

type CreateSmartContractJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateSmartContractJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateSmartContractJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSmartContractJobResponse) GoString() string {
	return s.String()
}

func (s *CreateSmartContractJobResponse) SetHeaders(v map[string]*string) *CreateSmartContractJobResponse {
	s.Headers = v
	return s
}

func (s *CreateSmartContractJobResponse) SetStatusCode(v int32) *CreateSmartContractJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateSmartContractJobResponse) SetBody(v *CreateSmartContractJobResponseBody) *CreateSmartContractJobResponse {
	s.Body = v
	return s
}

type CreateTriggerRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Options *string `json:"Options,omitempty" xml:"Options,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// This parameter is required.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateTriggerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateTriggerRequest) GoString() string {
	return s.String()
}

func (s *CreateTriggerRequest) SetChannelId(v string) *CreateTriggerRequest {
	s.ChannelId = &v
	return s
}

func (s *CreateTriggerRequest) SetName(v string) *CreateTriggerRequest {
	s.Name = &v
	return s
}

func (s *CreateTriggerRequest) SetOptions(v string) *CreateTriggerRequest {
	s.Options = &v
	return s
}

func (s *CreateTriggerRequest) SetOrganizationId(v string) *CreateTriggerRequest {
	s.OrganizationId = &v
	return s
}

func (s *CreateTriggerRequest) SetSource(v string) *CreateTriggerRequest {
	s.Source = &v
	return s
}

func (s *CreateTriggerRequest) SetStatus(v string) *CreateTriggerRequest {
	s.Status = &v
	return s
}

func (s *CreateTriggerRequest) SetType(v string) *CreateTriggerRequest {
	s.Type = &v
	return s
}

type CreateTriggerResponseBody struct {
	ErrorCode *int32                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *CreateTriggerResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateTriggerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateTriggerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateTriggerResponseBody) SetErrorCode(v int32) *CreateTriggerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *CreateTriggerResponseBody) SetRequestId(v string) *CreateTriggerResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateTriggerResponseBody) SetResult(v *CreateTriggerResponseBodyResult) *CreateTriggerResponseBody {
	s.Result = v
	return s
}

func (s *CreateTriggerResponseBody) SetSuccess(v bool) *CreateTriggerResponseBody {
	s.Success = &v
	return s
}

type CreateTriggerResponseBodyResult struct {
	ChannelId    *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName  *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Options      *string `json:"Options,omitempty" xml:"Options,omitempty"`
	Source       *string `json:"Source,omitempty" xml:"Source,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Type         *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateTriggerResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s CreateTriggerResponseBodyResult) GoString() string {
	return s.String()
}

func (s *CreateTriggerResponseBodyResult) SetChannelId(v string) *CreateTriggerResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *CreateTriggerResponseBodyResult) SetChannelName(v string) *CreateTriggerResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *CreateTriggerResponseBodyResult) SetCreateTime(v int64) *CreateTriggerResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *CreateTriggerResponseBodyResult) SetErrorMessage(v string) *CreateTriggerResponseBodyResult {
	s.ErrorMessage = &v
	return s
}

func (s *CreateTriggerResponseBodyResult) SetName(v string) *CreateTriggerResponseBodyResult {
	s.Name = &v
	return s
}

func (s *CreateTriggerResponseBodyResult) SetOptions(v string) *CreateTriggerResponseBodyResult {
	s.Options = &v
	return s
}

func (s *CreateTriggerResponseBodyResult) SetSource(v string) *CreateTriggerResponseBodyResult {
	s.Source = &v
	return s
}

func (s *CreateTriggerResponseBodyResult) SetStatus(v int32) *CreateTriggerResponseBodyResult {
	s.Status = &v
	return s
}

func (s *CreateTriggerResponseBodyResult) SetType(v string) *CreateTriggerResponseBodyResult {
	s.Type = &v
	return s
}

type CreateTriggerResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *CreateTriggerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s CreateTriggerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateTriggerResponse) GoString() string {
	return s.String()
}

func (s *CreateTriggerResponse) SetHeaders(v map[string]*string) *CreateTriggerResponse {
	s.Headers = v
	return s
}

func (s *CreateTriggerResponse) SetStatusCode(v int32) *CreateTriggerResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateTriggerResponse) SetBody(v *CreateTriggerResponseBody) *CreateTriggerResponse {
	s.Body = v
	return s
}

type DeleteAntChainConsortiumRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DeleteAntChainConsortiumRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainConsortiumRequest) GoString() string {
	return s.String()
}

func (s *DeleteAntChainConsortiumRequest) SetConsortiumId(v string) *DeleteAntChainConsortiumRequest {
	s.ConsortiumId = &v
	return s
}

type DeleteAntChainConsortiumResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteAntChainConsortiumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainConsortiumResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAntChainConsortiumResponseBody) SetRequestId(v string) *DeleteAntChainConsortiumResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAntChainConsortiumResponseBody) SetResult(v string) *DeleteAntChainConsortiumResponseBody {
	s.Result = &v
	return s
}

type DeleteAntChainConsortiumResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAntChainConsortiumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAntChainConsortiumResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainConsortiumResponse) GoString() string {
	return s.String()
}

func (s *DeleteAntChainConsortiumResponse) SetHeaders(v map[string]*string) *DeleteAntChainConsortiumResponse {
	s.Headers = v
	return s
}

func (s *DeleteAntChainConsortiumResponse) SetStatusCode(v int32) *DeleteAntChainConsortiumResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAntChainConsortiumResponse) SetBody(v *DeleteAntChainConsortiumResponseBody) *DeleteAntChainConsortiumResponse {
	s.Body = v
	return s
}

type DeleteAntChainContractContentRequest struct {
	// This parameter is required.
	ContentId *string `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
}

func (s DeleteAntChainContractContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainContractContentRequest) GoString() string {
	return s.String()
}

func (s *DeleteAntChainContractContentRequest) SetContentId(v string) *DeleteAntChainContractContentRequest {
	s.ContentId = &v
	return s
}

type DeleteAntChainContractContentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteAntChainContractContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainContractContentResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAntChainContractContentResponseBody) SetRequestId(v string) *DeleteAntChainContractContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAntChainContractContentResponseBody) SetResult(v string) *DeleteAntChainContractContentResponseBody {
	s.Result = &v
	return s
}

type DeleteAntChainContractContentResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAntChainContractContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAntChainContractContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainContractContentResponse) GoString() string {
	return s.String()
}

func (s *DeleteAntChainContractContentResponse) SetHeaders(v map[string]*string) *DeleteAntChainContractContentResponse {
	s.Headers = v
	return s
}

func (s *DeleteAntChainContractContentResponse) SetStatusCode(v int32) *DeleteAntChainContractContentResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAntChainContractContentResponse) SetBody(v *DeleteAntChainContractContentResponseBody) *DeleteAntChainContractContentResponse {
	s.Body = v
	return s
}

type DeleteAntChainContractProjectRequest struct {
	// This parameter is required.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DeleteAntChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *DeleteAntChainContractProjectRequest) SetProjectId(v string) *DeleteAntChainContractProjectRequest {
	s.ProjectId = &v
	return s
}

type DeleteAntChainContractProjectResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteAntChainContractProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainContractProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAntChainContractProjectResponseBody) SetRequestId(v string) *DeleteAntChainContractProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAntChainContractProjectResponseBody) SetResult(v string) *DeleteAntChainContractProjectResponseBody {
	s.Result = &v
	return s
}

type DeleteAntChainContractProjectResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAntChainContractProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAntChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *DeleteAntChainContractProjectResponse) SetHeaders(v map[string]*string) *DeleteAntChainContractProjectResponse {
	s.Headers = v
	return s
}

func (s *DeleteAntChainContractProjectResponse) SetStatusCode(v int32) *DeleteAntChainContractProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAntChainContractProjectResponse) SetBody(v *DeleteAntChainContractProjectResponseBody) *DeleteAntChainContractProjectResponse {
	s.Body = v
	return s
}

type DeleteAntChainMiniAppQRCodeAuthorizedUserRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	Phone *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s DeleteAntChainMiniAppQRCodeAuthorizedUserRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainMiniAppQRCodeAuthorizedUserRequest) GoString() string {
	return s.String()
}

func (s *DeleteAntChainMiniAppQRCodeAuthorizedUserRequest) SetAntChainId(v string) *DeleteAntChainMiniAppQRCodeAuthorizedUserRequest {
	s.AntChainId = &v
	return s
}

func (s *DeleteAntChainMiniAppQRCodeAuthorizedUserRequest) SetPhone(v string) *DeleteAntChainMiniAppQRCodeAuthorizedUserRequest {
	s.Phone = &v
	return s
}

type DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody) SetRequestId(v string) *DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody) SetResult(v string) *DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody {
	s.Result = &v
	return s
}

type DeleteAntChainMiniAppQRCodeAuthorizedUserResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteAntChainMiniAppQRCodeAuthorizedUserResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteAntChainMiniAppQRCodeAuthorizedUserResponse) GoString() string {
	return s.String()
}

func (s *DeleteAntChainMiniAppQRCodeAuthorizedUserResponse) SetHeaders(v map[string]*string) *DeleteAntChainMiniAppQRCodeAuthorizedUserResponse {
	s.Headers = v
	return s
}

func (s *DeleteAntChainMiniAppQRCodeAuthorizedUserResponse) SetStatusCode(v int32) *DeleteAntChainMiniAppQRCodeAuthorizedUserResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteAntChainMiniAppQRCodeAuthorizedUserResponse) SetBody(v *DeleteAntChainMiniAppQRCodeAuthorizedUserResponseBody) *DeleteAntChainMiniAppQRCodeAuthorizedUserResponse {
	s.Body = v
	return s
}

type DeleteChaincodeRequest struct {
	// example:
	//
	// code-sacc-1pr09q7jm****
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
}

func (s DeleteChaincodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteChaincodeRequest) GoString() string {
	return s.String()
}

func (s *DeleteChaincodeRequest) SetChaincodeId(v string) *DeleteChaincodeRequest {
	s.ChaincodeId = &v
	return s
}

type DeleteChaincodeResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// @guid
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteChaincodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteChaincodeResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteChaincodeResponseBody) SetErrorCode(v int32) *DeleteChaincodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteChaincodeResponseBody) SetRequestId(v string) *DeleteChaincodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteChaincodeResponseBody) SetSuccess(v bool) *DeleteChaincodeResponseBody {
	s.Success = &v
	return s
}

type DeleteChaincodeResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteChaincodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteChaincodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteChaincodeResponse) GoString() string {
	return s.String()
}

func (s *DeleteChaincodeResponse) SetHeaders(v map[string]*string) *DeleteChaincodeResponse {
	s.Headers = v
	return s
}

func (s *DeleteChaincodeResponse) SetStatusCode(v int32) *DeleteChaincodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteChaincodeResponse) SetBody(v *DeleteChaincodeResponseBody) *DeleteChaincodeResponse {
	s.Body = v
	return s
}

type DeleteGovernanceTaskRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteGovernanceTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskRequest) SetChannelId(v string) *DeleteGovernanceTaskRequest {
	s.ChannelId = &v
	return s
}

func (s *DeleteGovernanceTaskRequest) SetOrganizationId(v string) *DeleteGovernanceTaskRequest {
	s.OrganizationId = &v
	return s
}

func (s *DeleteGovernanceTaskRequest) SetTaskId(v string) *DeleteGovernanceTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteGovernanceTaskResponseBody struct {
	ErrorCode *int32                                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DeleteGovernanceTaskResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteGovernanceTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBody) SetErrorCode(v int32) *DeleteGovernanceTaskResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBody) SetRequestId(v string) *DeleteGovernanceTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBody) SetResult(v *DeleteGovernanceTaskResponseBodyResult) *DeleteGovernanceTaskResponseBody {
	s.Result = v
	return s
}

func (s *DeleteGovernanceTaskResponseBody) SetSuccess(v bool) *DeleteGovernanceTaskResponseBody {
	s.Success = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResult struct {
	ChannelName *string                                        `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Content     *DeleteGovernanceTaskResponseBodyResultContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	CreateTime  *int64                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator     *string                                        `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	Status      *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId      *string                                        `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Type        *string                                        `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResult) SetChannelName(v string) *DeleteGovernanceTaskResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResult) SetContent(v *DeleteGovernanceTaskResponseBodyResultContent) *DeleteGovernanceTaskResponseBodyResult {
	s.Content = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResult) SetCreateTime(v int64) *DeleteGovernanceTaskResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResult) SetCreator(v string) *DeleteGovernanceTaskResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResult) SetDescription(v string) *DeleteGovernanceTaskResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResult) SetStatus(v string) *DeleteGovernanceTaskResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResult) SetTaskId(v string) *DeleteGovernanceTaskResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResult) SetType(v string) *DeleteGovernanceTaskResponseBodyResult {
	s.Type = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContent struct {
	AddedOrganizations   []*DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations   `json:"AddedOrganizations,omitempty" xml:"AddedOrganizations,omitempty" type:"Repeated"`
	ChaincodeSpecPkg     *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg       `json:"ChaincodeSpecPkg,omitempty" xml:"ChaincodeSpecPkg,omitempty" type:"Struct"`
	OrdererConfig        *DeleteGovernanceTaskResponseBodyResultContentOrdererConfig          `json:"OrdererConfig,omitempty" xml:"OrdererConfig,omitempty" type:"Struct"`
	Raw                  *string                                                              `json:"Raw,omitempty" xml:"Raw,omitempty"`
	RemovedOrganizations []*DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations `json:"RemovedOrganizations,omitempty" xml:"RemovedOrganizations,omitempty" type:"Repeated"`
	RwSets               *string                                                              `json:"RwSets,omitempty" xml:"RwSets,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContent) SetAddedOrganizations(v []*DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) *DeleteGovernanceTaskResponseBodyResultContent {
	s.AddedOrganizations = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContent) SetChaincodeSpecPkg(v *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) *DeleteGovernanceTaskResponseBodyResultContent {
	s.ChaincodeSpecPkg = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContent) SetOrdererConfig(v *DeleteGovernanceTaskResponseBodyResultContentOrdererConfig) *DeleteGovernanceTaskResponseBodyResultContent {
	s.OrdererConfig = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContent) SetRaw(v string) *DeleteGovernanceTaskResponseBodyResultContent {
	s.Raw = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContent) SetRemovedOrganizations(v []*DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) *DeleteGovernanceTaskResponseBodyResultContent {
	s.RemovedOrganizations = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContent) SetRwSets(v string) *DeleteGovernanceTaskResponseBodyResultContent {
	s.RwSets = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations struct {
	AnchorPeers         []*DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                        `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                        `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                        `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                          `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                        `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                        `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) SetAnchorPeers(v []*DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) SetCrls(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.Crls = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) SetMspId(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.MspId = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) SetMspType(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.MspType = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) SetOrderer(v bool) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.Orderer = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) SetOrdererNodes(v []*DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) SetRootCertificates(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations) SetTlsRootCertificates(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) SetHost(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) SetPort(v int32) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetAddress(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetCertificate(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetKey(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetTlsroot(v string) *DeleteGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg struct {
	Cs     *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs `json:"Cs,omitempty" xml:"Cs,omitempty" type:"Struct"`
	Policy *string                                                          `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Sha256 *string                                                          `json:"Sha256,omitempty" xml:"Sha256,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetCs(v *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Cs = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetPolicy(v string) *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Policy = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetSha256(v string) *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Sha256 = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs struct {
	Input   *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path    *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Type    *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetInput(v string) *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Input = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetName(v string) *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Name = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetPath(v string) *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Path = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetType(v int32) *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Type = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetVersion(v string) *DeleteGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Version = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentOrdererConfig struct {
	BatchTimeout      *string `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	MaxMessageCount   *int32  `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	PreferredMaxBytes *int32  `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentOrdererConfig) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentOrdererConfig) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentOrdererConfig) SetBatchTimeout(v string) *DeleteGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.BatchTimeout = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentOrdererConfig) SetMaxMessageCount(v int32) *DeleteGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.MaxMessageCount = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentOrdererConfig) SetPreferredMaxBytes(v int32) *DeleteGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.PreferredMaxBytes = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations struct {
	AnchorPeers         []*DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                          `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                          `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                          `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                            `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                          `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                          `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetAnchorPeers(v []*DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetCrls(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.Crls = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetMspId(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.MspId = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetMspType(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.MspType = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetOrderer(v bool) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.Orderer = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetOrdererNodes(v []*DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetRootCertificates(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetTlsRootCertificates(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetHost(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetPort(v int32) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetAddress(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetCertificate(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetKey(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetTlsroot(v string) *DeleteGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type DeleteGovernanceTaskResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteGovernanceTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteGovernanceTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteGovernanceTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteGovernanceTaskResponse) SetHeaders(v map[string]*string) *DeleteGovernanceTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteGovernanceTaskResponse) SetStatusCode(v int32) *DeleteGovernanceTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteGovernanceTaskResponse) SetBody(v *DeleteGovernanceTaskResponseBody) *DeleteGovernanceTaskResponse {
	s.Body = v
	return s
}

type DeleteTriggerRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DeleteTriggerRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTriggerRequest) GoString() string {
	return s.String()
}

func (s *DeleteTriggerRequest) SetChannelId(v string) *DeleteTriggerRequest {
	s.ChannelId = &v
	return s
}

func (s *DeleteTriggerRequest) SetName(v string) *DeleteTriggerRequest {
	s.Name = &v
	return s
}

func (s *DeleteTriggerRequest) SetOrganizationId(v string) *DeleteTriggerRequest {
	s.OrganizationId = &v
	return s
}

type DeleteTriggerResponseBody struct {
	ErrorCode *int32                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DeleteTriggerResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteTriggerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTriggerResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTriggerResponseBody) SetErrorCode(v int32) *DeleteTriggerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DeleteTriggerResponseBody) SetRequestId(v string) *DeleteTriggerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTriggerResponseBody) SetResult(v *DeleteTriggerResponseBodyResult) *DeleteTriggerResponseBody {
	s.Result = v
	return s
}

func (s *DeleteTriggerResponseBody) SetSuccess(v bool) *DeleteTriggerResponseBody {
	s.Success = &v
	return s
}

type DeleteTriggerResponseBodyResult struct {
	ChannelId    *string                                    `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName  *string                                    `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Checkpoint   *DeleteTriggerResponseBodyResultCheckpoint `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty" type:"Struct"`
	CreateTime   *int64                                     `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Name         *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Options      *string                                    `json:"Options,omitempty" xml:"Options,omitempty"`
	Source       *string                                    `json:"Source,omitempty" xml:"Source,omitempty"`
	Status       *int32                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	Type         *string                                    `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteTriggerResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DeleteTriggerResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DeleteTriggerResponseBodyResult) SetChannelId(v string) *DeleteTriggerResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetChannelName(v string) *DeleteTriggerResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetCheckpoint(v *DeleteTriggerResponseBodyResultCheckpoint) *DeleteTriggerResponseBodyResult {
	s.Checkpoint = v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetCreateTime(v int64) *DeleteTriggerResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetErrorMessage(v string) *DeleteTriggerResponseBodyResult {
	s.ErrorMessage = &v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetName(v string) *DeleteTriggerResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetOptions(v string) *DeleteTriggerResponseBodyResult {
	s.Options = &v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetSource(v string) *DeleteTriggerResponseBodyResult {
	s.Source = &v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetStatus(v int32) *DeleteTriggerResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DeleteTriggerResponseBodyResult) SetType(v string) *DeleteTriggerResponseBodyResult {
	s.Type = &v
	return s
}

type DeleteTriggerResponseBodyResultCheckpoint struct {
	ErrorCount *int64  `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	Height     *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
	Index      *int64  `json:"Index,omitempty" xml:"Index,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DeleteTriggerResponseBodyResultCheckpoint) String() string {
	return tea.Prettify(s)
}

func (s DeleteTriggerResponseBodyResultCheckpoint) GoString() string {
	return s.String()
}

func (s *DeleteTriggerResponseBodyResultCheckpoint) SetErrorCount(v int64) *DeleteTriggerResponseBodyResultCheckpoint {
	s.ErrorCount = &v
	return s
}

func (s *DeleteTriggerResponseBodyResultCheckpoint) SetHeight(v int64) *DeleteTriggerResponseBodyResultCheckpoint {
	s.Height = &v
	return s
}

func (s *DeleteTriggerResponseBodyResultCheckpoint) SetIndex(v int64) *DeleteTriggerResponseBodyResultCheckpoint {
	s.Index = &v
	return s
}

func (s *DeleteTriggerResponseBodyResultCheckpoint) SetType(v string) *DeleteTriggerResponseBodyResultCheckpoint {
	s.Type = &v
	return s
}

type DeleteTriggerResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DeleteTriggerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DeleteTriggerResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTriggerResponse) GoString() string {
	return s.String()
}

func (s *DeleteTriggerResponse) SetHeaders(v map[string]*string) *DeleteTriggerResponse {
	s.Headers = v
	return s
}

func (s *DeleteTriggerResponse) SetStatusCode(v int32) *DeleteTriggerResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteTriggerResponse) SetBody(v *DeleteTriggerResponseBody) *DeleteTriggerResponse {
	s.Body = v
	return s
}

type DescribeAntChainAccountsRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	PageNumber *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainAccountsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsRequest) SetAntChainId(v string) *DescribeAntChainAccountsRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainAccountsRequest) SetPageNumber(v int32) *DescribeAntChainAccountsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainAccountsRequest) SetPageSize(v int32) *DescribeAntChainAccountsRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainAccountsResponseBody struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainAccountsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainAccountsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsResponseBody) SetRequestId(v string) *DescribeAntChainAccountsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainAccountsResponseBody) SetResult(v *DescribeAntChainAccountsResponseBodyResult) *DescribeAntChainAccountsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainAccountsResponseBodyResult struct {
	Accounts   []*DescribeAntChainAccountsResponseBodyResultAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Repeated"`
	Pagination *DescribeAntChainAccountsResponseBodyResultPagination `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainAccountsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsResponseBodyResult) SetAccounts(v []*DescribeAntChainAccountsResponseBodyResultAccounts) *DescribeAntChainAccountsResponseBodyResult {
	s.Accounts = v
	return s
}

func (s *DescribeAntChainAccountsResponseBodyResult) SetPagination(v *DescribeAntChainAccountsResponseBodyResultPagination) *DescribeAntChainAccountsResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainAccountsResponseBodyResultAccounts struct {
	Account            *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AccountPublicKey   *string `json:"AccountPublicKey,omitempty" xml:"AccountPublicKey,omitempty"`
	AccountRecoveryKey *string `json:"AccountRecoveryKey,omitempty" xml:"AccountRecoveryKey,omitempty"`
	AccountStatus      *string `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty"`
	AntChainId         *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s DescribeAntChainAccountsResponseBodyResultAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsResponseBodyResultAccounts) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsResponseBodyResultAccounts) SetAccount(v string) *DescribeAntChainAccountsResponseBodyResultAccounts {
	s.Account = &v
	return s
}

func (s *DescribeAntChainAccountsResponseBodyResultAccounts) SetAccountPublicKey(v string) *DescribeAntChainAccountsResponseBodyResultAccounts {
	s.AccountPublicKey = &v
	return s
}

func (s *DescribeAntChainAccountsResponseBodyResultAccounts) SetAccountRecoveryKey(v string) *DescribeAntChainAccountsResponseBodyResultAccounts {
	s.AccountRecoveryKey = &v
	return s
}

func (s *DescribeAntChainAccountsResponseBodyResultAccounts) SetAccountStatus(v string) *DescribeAntChainAccountsResponseBodyResultAccounts {
	s.AccountStatus = &v
	return s
}

func (s *DescribeAntChainAccountsResponseBodyResultAccounts) SetAntChainId(v string) *DescribeAntChainAccountsResponseBodyResultAccounts {
	s.AntChainId = &v
	return s
}

type DescribeAntChainAccountsResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainAccountsResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainAccountsResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainAccountsResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainAccountsResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainAccountsResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainAccountsResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainAccountsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainAccountsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainAccountsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsResponse) SetHeaders(v map[string]*string) *DescribeAntChainAccountsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainAccountsResponse) SetStatusCode(v int32) *DescribeAntChainAccountsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainAccountsResponse) SetBody(v *DescribeAntChainAccountsResponseBody) *DescribeAntChainAccountsResponse {
	s.Body = v
	return s
}

type DescribeAntChainAccountsNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainAccountsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsNewRequest) SetAntChainId(v string) *DescribeAntChainAccountsNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainAccountsNewRequest) SetConsortiumId(v string) *DescribeAntChainAccountsNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainAccountsNewRequest) SetPageNumber(v int32) *DescribeAntChainAccountsNewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainAccountsNewRequest) SetPageSize(v int32) *DescribeAntChainAccountsNewRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainAccountsNewResponseBody struct {
	Code           *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                        `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainAccountsNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                        `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                        `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainAccountsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsNewResponseBody) SetCode(v string) *DescribeAntChainAccountsNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainAccountsNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBody) SetMessage(v string) *DescribeAntChainAccountsNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBody) SetRequestId(v string) *DescribeAntChainAccountsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBody) SetResult(v *DescribeAntChainAccountsNewResponseBodyResult) *DescribeAntChainAccountsNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBody) SetResultCode(v string) *DescribeAntChainAccountsNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBody) SetResultMessage(v string) *DescribeAntChainAccountsNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBody) SetSuccess(v bool) *DescribeAntChainAccountsNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainAccountsNewResponseBodyResult struct {
	Accounts        []*DescribeAntChainAccountsNewResponseBodyResultAccounts `json:"Accounts,omitempty" xml:"Accounts,omitempty" type:"Repeated"`
	ConsortiumAdmin *bool                                                    `json:"ConsortiumAdmin,omitempty" xml:"ConsortiumAdmin,omitempty"`
	Pagination      *DescribeAntChainAccountsNewResponseBodyResultPagination `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainAccountsNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsNewResponseBodyResult) SetAccounts(v []*DescribeAntChainAccountsNewResponseBodyResultAccounts) *DescribeAntChainAccountsNewResponseBodyResult {
	s.Accounts = v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResult) SetConsortiumAdmin(v bool) *DescribeAntChainAccountsNewResponseBodyResult {
	s.ConsortiumAdmin = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResult) SetPagination(v *DescribeAntChainAccountsNewResponseBodyResultPagination) *DescribeAntChainAccountsNewResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainAccountsNewResponseBodyResultAccounts struct {
	Account            *string `json:"Account,omitempty" xml:"Account,omitempty"`
	AccountPublicKey   *string `json:"AccountPublicKey,omitempty" xml:"AccountPublicKey,omitempty"`
	AccountRecoveryKey *string `json:"AccountRecoveryKey,omitempty" xml:"AccountRecoveryKey,omitempty"`
	AccountStatus      *string `json:"AccountStatus,omitempty" xml:"AccountStatus,omitempty"`
	AntChainId         *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	MemberName         *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
}

func (s DescribeAntChainAccountsNewResponseBodyResultAccounts) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsNewResponseBodyResultAccounts) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsNewResponseBodyResultAccounts) SetAccount(v string) *DescribeAntChainAccountsNewResponseBodyResultAccounts {
	s.Account = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResultAccounts) SetAccountPublicKey(v string) *DescribeAntChainAccountsNewResponseBodyResultAccounts {
	s.AccountPublicKey = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResultAccounts) SetAccountRecoveryKey(v string) *DescribeAntChainAccountsNewResponseBodyResultAccounts {
	s.AccountRecoveryKey = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResultAccounts) SetAccountStatus(v string) *DescribeAntChainAccountsNewResponseBodyResultAccounts {
	s.AccountStatus = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResultAccounts) SetAntChainId(v string) *DescribeAntChainAccountsNewResponseBodyResultAccounts {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResultAccounts) SetCreateTime(v int64) *DescribeAntChainAccountsNewResponseBodyResultAccounts {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResultAccounts) SetMemberName(v string) *DescribeAntChainAccountsNewResponseBodyResultAccounts {
	s.MemberName = &v
	return s
}

type DescribeAntChainAccountsNewResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainAccountsNewResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsNewResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsNewResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainAccountsNewResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainAccountsNewResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainAccountsNewResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainAccountsNewResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainAccountsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainAccountsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainAccountsNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainAccountsNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainAccountsNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainAccountsNewResponse) SetStatusCode(v int32) *DescribeAntChainAccountsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainAccountsNewResponse) SetBody(v *DescribeAntChainAccountsNewResponseBody) *DescribeAntChainAccountsNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainApplicationsRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Current  *int32  `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAntChainApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainApplicationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainApplicationsRequest) SetBizid(v string) *DescribeAntChainApplicationsRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeAntChainApplicationsRequest) SetCurrent(v int32) *DescribeAntChainApplicationsRequest {
	s.Current = &v
	return s
}

func (s *DescribeAntChainApplicationsRequest) SetPageSize(v int32) *DescribeAntChainApplicationsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainApplicationsRequest) SetStatus(v string) *DescribeAntChainApplicationsRequest {
	s.Status = &v
	return s
}

type DescribeAntChainApplicationsResponseBody struct {
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainApplicationsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainApplicationsResponseBody) SetRequestId(v string) *DescribeAntChainApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBody) SetResult(v *DescribeAntChainApplicationsResponseBodyResult) *DescribeAntChainApplicationsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainApplicationsResponseBodyResult struct {
	ApplyHistoryList []*DescribeAntChainApplicationsResponseBodyResultApplyHistoryList `json:"ApplyHistoryList,omitempty" xml:"ApplyHistoryList,omitempty" type:"Repeated"`
	Pagination       *DescribeAntChainApplicationsResponseBodyResultPagination         `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainApplicationsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainApplicationsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainApplicationsResponseBodyResult) SetApplyHistoryList(v []*DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) *DescribeAntChainApplicationsResponseBodyResult {
	s.ApplyHistoryList = v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResult) SetPagination(v *DescribeAntChainApplicationsResponseBodyResultPagination) *DescribeAntChainApplicationsResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainApplicationsResponseBodyResultApplyHistoryList struct {
	Bizid        *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Createtime   *int64  `json:"Createtime,omitempty" xml:"Createtime,omitempty"`
	Id           *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	RejectReason *string `json:"RejectReason,omitempty" xml:"RejectReason,omitempty"`
	ReqAddr      *string `json:"ReqAddr,omitempty" xml:"ReqAddr,omitempty"`
	SignedAddr   *string `json:"SignedAddr,omitempty" xml:"SignedAddr,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Updatetime   *int64  `json:"Updatetime,omitempty" xml:"Updatetime,omitempty"`
	Username     *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) GoString() string {
	return s.String()
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetBizid(v string) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.Bizid = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetCreatetime(v int64) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.Createtime = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetId(v int32) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.Id = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetRejectReason(v string) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.RejectReason = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetReqAddr(v string) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.ReqAddr = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetSignedAddr(v string) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.SignedAddr = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetStatus(v int32) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.Status = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetUpdatetime(v int64) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.Updatetime = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList) SetUsername(v string) *DescribeAntChainApplicationsResponseBodyResultApplyHistoryList {
	s.Username = &v
	return s
}

type DescribeAntChainApplicationsResponseBodyResultPagination struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeAntChainApplicationsResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainApplicationsResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainApplicationsResponseBodyResultPagination) SetCurrent(v int32) *DescribeAntChainApplicationsResponseBodyResultPagination {
	s.Current = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainApplicationsResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainApplicationsResponseBodyResultPagination) SetTotal(v int32) *DescribeAntChainApplicationsResponseBodyResultPagination {
	s.Total = &v
	return s
}

type DescribeAntChainApplicationsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainApplicationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainApplicationsResponse) SetHeaders(v map[string]*string) *DescribeAntChainApplicationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainApplicationsResponse) SetStatusCode(v int32) *DescribeAntChainApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainApplicationsResponse) SetBody(v *DescribeAntChainApplicationsResponseBody) *DescribeAntChainApplicationsResponse {
	s.Body = v
	return s
}

type DescribeAntChainBlockRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	Height *int64 `json:"Height,omitempty" xml:"Height,omitempty"`
}

func (s DescribeAntChainBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockRequest) SetAntChainId(v string) *DescribeAntChainBlockRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainBlockRequest) SetHeight(v int64) *DescribeAntChainBlockRequest {
	s.Height = &v
	return s
}

type DescribeAntChainBlockResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainBlockResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainBlockResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockResponseBody) SetRequestId(v string) *DescribeAntChainBlockResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainBlockResponseBody) SetResult(v *DescribeAntChainBlockResponseBodyResult) *DescribeAntChainBlockResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainBlockResponseBodyResult struct {
	AntChainId       *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	BlockHash        *string `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Height           *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	PreviousHash     *string `json:"PreviousHash,omitempty" xml:"PreviousHash,omitempty"`
	RootTxHash       *string `json:"RootTxHash,omitempty" xml:"RootTxHash,omitempty"`
	TransSummaryList *string `json:"TransSummaryList,omitempty" xml:"TransSummaryList,omitempty"`
	TransactionSize  *int32  `json:"TransactionSize,omitempty" xml:"TransactionSize,omitempty"`
	Version          *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainBlockResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockResponseBodyResult) SetAntChainId(v string) *DescribeAntChainBlockResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainBlockResponseBodyResult) SetBlockHash(v string) *DescribeAntChainBlockResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *DescribeAntChainBlockResponseBodyResult) SetCreateTime(v int64) *DescribeAntChainBlockResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainBlockResponseBodyResult) SetHeight(v int32) *DescribeAntChainBlockResponseBodyResult {
	s.Height = &v
	return s
}

func (s *DescribeAntChainBlockResponseBodyResult) SetPreviousHash(v string) *DescribeAntChainBlockResponseBodyResult {
	s.PreviousHash = &v
	return s
}

func (s *DescribeAntChainBlockResponseBodyResult) SetRootTxHash(v string) *DescribeAntChainBlockResponseBodyResult {
	s.RootTxHash = &v
	return s
}

func (s *DescribeAntChainBlockResponseBodyResult) SetTransSummaryList(v string) *DescribeAntChainBlockResponseBodyResult {
	s.TransSummaryList = &v
	return s
}

func (s *DescribeAntChainBlockResponseBodyResult) SetTransactionSize(v int32) *DescribeAntChainBlockResponseBodyResult {
	s.TransactionSize = &v
	return s
}

func (s *DescribeAntChainBlockResponseBodyResult) SetVersion(v int64) *DescribeAntChainBlockResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeAntChainBlockResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainBlockResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockResponse) SetHeaders(v map[string]*string) *DescribeAntChainBlockResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainBlockResponse) SetStatusCode(v int32) *DescribeAntChainBlockResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainBlockResponse) SetBody(v *DescribeAntChainBlockResponseBody) *DescribeAntChainBlockResponse {
	s.Body = v
	return s
}

type DescribeAntChainBlockNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	Height *int64 `json:"Height,omitempty" xml:"Height,omitempty"`
}

func (s DescribeAntChainBlockNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockNewRequest) SetAntChainId(v string) *DescribeAntChainBlockNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainBlockNewRequest) SetConsortiumId(v string) *DescribeAntChainBlockNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainBlockNewRequest) SetHeight(v int64) *DescribeAntChainBlockNewRequest {
	s.Height = &v
	return s
}

type DescribeAntChainBlockNewResponseBody struct {
	Code           *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                     `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainBlockNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                     `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                     `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainBlockNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockNewResponseBody) SetCode(v string) *DescribeAntChainBlockNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainBlockNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBody) SetMessage(v string) *DescribeAntChainBlockNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBody) SetRequestId(v string) *DescribeAntChainBlockNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBody) SetResult(v *DescribeAntChainBlockNewResponseBodyResult) *DescribeAntChainBlockNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainBlockNewResponseBody) SetResultCode(v string) *DescribeAntChainBlockNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBody) SetResultMessage(v string) *DescribeAntChainBlockNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBody) SetSuccess(v bool) *DescribeAntChainBlockNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainBlockNewResponseBodyResult struct {
	AntChainId       *string                                                       `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	BlockHash        *string                                                       `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	CreateTime       *int64                                                        `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Height           *int32                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	PreviousHash     *string                                                       `json:"PreviousHash,omitempty" xml:"PreviousHash,omitempty"`
	RootTxHash       *string                                                       `json:"RootTxHash,omitempty" xml:"RootTxHash,omitempty"`
	TransSummaryList []*DescribeAntChainBlockNewResponseBodyResultTransSummaryList `json:"TransSummaryList,omitempty" xml:"TransSummaryList,omitempty" type:"Repeated"`
	TransactionSize  *int32                                                        `json:"TransactionSize,omitempty" xml:"TransactionSize,omitempty"`
	Version          *int64                                                        `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainBlockNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetAntChainId(v string) *DescribeAntChainBlockNewResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetBlockHash(v string) *DescribeAntChainBlockNewResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetCreateTime(v int64) *DescribeAntChainBlockNewResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetHeight(v int32) *DescribeAntChainBlockNewResponseBodyResult {
	s.Height = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetPreviousHash(v string) *DescribeAntChainBlockNewResponseBodyResult {
	s.PreviousHash = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetRootTxHash(v string) *DescribeAntChainBlockNewResponseBodyResult {
	s.RootTxHash = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetTransSummaryList(v []*DescribeAntChainBlockNewResponseBodyResultTransSummaryList) *DescribeAntChainBlockNewResponseBodyResult {
	s.TransSummaryList = v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetTransactionSize(v int32) *DescribeAntChainBlockNewResponseBodyResult {
	s.TransactionSize = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResult) SetVersion(v int64) *DescribeAntChainBlockNewResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeAntChainBlockNewResponseBodyResultTransSummaryList struct {
	Alias          *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	BlockHash      *string `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	Category       *int32  `json:"Category,omitempty" xml:"Category,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	From           *string `json:"From,omitempty" xml:"From,omitempty"`
	GasUsed        *int64  `json:"GasUsed,omitempty" xml:"GasUsed,omitempty"`
	Hash           *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
	Height         *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
	ReferenceCount *int32  `json:"ReferenceCount,omitempty" xml:"ReferenceCount,omitempty"`
	To             *string `json:"To,omitempty" xml:"To,omitempty"`
	TransTypeV10   *string `json:"TransTypeV10,omitempty" xml:"TransTypeV10,omitempty"`
	TransTypeV6    *string `json:"TransTypeV6,omitempty" xml:"TransTypeV6,omitempty"`
}

func (s DescribeAntChainBlockNewResponseBodyResultTransSummaryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockNewResponseBodyResultTransSummaryList) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetAlias(v string) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.Alias = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetBlockHash(v string) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.BlockHash = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetCategory(v int32) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.Category = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetCreateTime(v int64) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetFrom(v string) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.From = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetGasUsed(v int64) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.GasUsed = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetHash(v string) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.Hash = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetHeight(v int64) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.Height = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetReferenceCount(v int32) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.ReferenceCount = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetTo(v string) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.To = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetTransTypeV10(v string) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.TransTypeV10 = &v
	return s
}

func (s *DescribeAntChainBlockNewResponseBodyResultTransSummaryList) SetTransTypeV6(v string) *DescribeAntChainBlockNewResponseBodyResultTransSummaryList {
	s.TransTypeV6 = &v
	return s
}

type DescribeAntChainBlockNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainBlockNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainBlockNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainBlockNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainBlockNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainBlockNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainBlockNewResponse) SetStatusCode(v int32) *DescribeAntChainBlockNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainBlockNewResponse) SetBody(v *DescribeAntChainBlockNewResponseBody) *DescribeAntChainBlockNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainCertificateApplicationsRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsRequest) SetAntChainId(v string) *DescribeAntChainCertificateApplicationsRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsRequest) SetPageNumber(v int32) *DescribeAntChainCertificateApplicationsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsRequest) SetPageSize(v int32) *DescribeAntChainCertificateApplicationsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsRequest) SetStatus(v string) *DescribeAntChainCertificateApplicationsRequest {
	s.Status = &v
	return s
}

type DescribeAntChainCertificateApplicationsResponseBody struct {
	RequestId *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainCertificateApplicationsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainCertificateApplicationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsResponseBody) SetRequestId(v string) *DescribeAntChainCertificateApplicationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBody) SetResult(v *DescribeAntChainCertificateApplicationsResponseBodyResult) *DescribeAntChainCertificateApplicationsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainCertificateApplicationsResponseBodyResult struct {
	CertificateApplications []*DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications `json:"CertificateApplications,omitempty" xml:"CertificateApplications,omitempty" type:"Repeated"`
	Pagination              *DescribeAntChainCertificateApplicationsResponseBodyResultPagination                `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainCertificateApplicationsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResult) SetCertificateApplications(v []*DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) *DescribeAntChainCertificateApplicationsResponseBodyResult {
	s.CertificateApplications = v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResult) SetPagination(v *DescribeAntChainCertificateApplicationsResponseBodyResultPagination) *DescribeAntChainCertificateApplicationsResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications struct {
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	Bid        *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Createtime *int64  `json:"Createtime,omitempty" xml:"Createtime,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Updatetime *int64  `json:"Updatetime,omitempty" xml:"Updatetime,omitempty"`
	Username   *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) SetAntChainId(v string) *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) SetBid(v string) *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications {
	s.Bid = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) SetCreatetime(v int64) *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications {
	s.Createtime = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) SetStatus(v string) *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications {
	s.Status = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) SetUpdatetime(v int64) *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications {
	s.Updatetime = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications) SetUsername(v string) *DescribeAntChainCertificateApplicationsResponseBodyResultCertificateApplications {
	s.Username = &v
	return s
}

type DescribeAntChainCertificateApplicationsResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainCertificateApplicationsResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainCertificateApplicationsResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainCertificateApplicationsResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainCertificateApplicationsResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainCertificateApplicationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsResponse) SetHeaders(v map[string]*string) *DescribeAntChainCertificateApplicationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponse) SetStatusCode(v int32) *DescribeAntChainCertificateApplicationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsResponse) SetBody(v *DescribeAntChainCertificateApplicationsResponseBody) *DescribeAntChainCertificateApplicationsResponse {
	s.Body = v
	return s
}

type DescribeAntChainCertificateApplicationsNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsNewRequest) SetAntChainId(v string) *DescribeAntChainCertificateApplicationsNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewRequest) SetConsortiumId(v string) *DescribeAntChainCertificateApplicationsNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewRequest) SetPageNumber(v int32) *DescribeAntChainCertificateApplicationsNewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewRequest) SetPageSize(v int32) *DescribeAntChainCertificateApplicationsNewRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewRequest) SetStatus(v string) *DescribeAntChainCertificateApplicationsNewRequest {
	s.Status = &v
	return s
}

type DescribeAntChainCertificateApplicationsNewResponseBody struct {
	Code           *string                                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainCertificateApplicationsNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                                       `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                                       `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBody) SetCode(v string) *DescribeAntChainCertificateApplicationsNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainCertificateApplicationsNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBody) SetMessage(v string) *DescribeAntChainCertificateApplicationsNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBody) SetRequestId(v string) *DescribeAntChainCertificateApplicationsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBody) SetResult(v *DescribeAntChainCertificateApplicationsNewResponseBodyResult) *DescribeAntChainCertificateApplicationsNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBody) SetResultCode(v string) *DescribeAntChainCertificateApplicationsNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBody) SetResultMessage(v string) *DescribeAntChainCertificateApplicationsNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBody) SetSuccess(v bool) *DescribeAntChainCertificateApplicationsNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainCertificateApplicationsNewResponseBodyResult struct {
	CertificateApplications []*DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications `json:"CertificateApplications,omitempty" xml:"CertificateApplications,omitempty" type:"Repeated"`
	Pagination              *DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination                `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainCertificateApplicationsNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResult) SetCertificateApplications(v []*DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) *DescribeAntChainCertificateApplicationsNewResponseBodyResult {
	s.CertificateApplications = v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResult) SetPagination(v *DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination) *DescribeAntChainCertificateApplicationsNewResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications struct {
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	Bid        *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Createtime *int64  `json:"Createtime,omitempty" xml:"Createtime,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Updatetime *int64  `json:"Updatetime,omitempty" xml:"Updatetime,omitempty"`
	Username   *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) SetAntChainId(v string) *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) SetBid(v string) *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications {
	s.Bid = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) SetCreatetime(v int64) *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications {
	s.Createtime = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) SetStatus(v string) *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications {
	s.Status = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) SetUpdatetime(v int64) *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications {
	s.Updatetime = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications) SetUsername(v string) *DescribeAntChainCertificateApplicationsNewResponseBodyResultCertificateApplications {
	s.Username = &v
	return s
}

type DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainCertificateApplicationsNewResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainCertificateApplicationsNewResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainCertificateApplicationsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainCertificateApplicationsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainCertificateApplicationsNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainCertificateApplicationsNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainCertificateApplicationsNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponse) SetStatusCode(v int32) *DescribeAntChainCertificateApplicationsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainCertificateApplicationsNewResponse) SetBody(v *DescribeAntChainCertificateApplicationsNewResponseBody) *DescribeAntChainCertificateApplicationsNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainConfigOptionsRequest struct {
	Purpose *string `json:"Purpose,omitempty" xml:"Purpose,omitempty"`
}

func (s DescribeAntChainConfigOptionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConfigOptionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConfigOptionsRequest) SetPurpose(v string) *DescribeAntChainConfigOptionsRequest {
	s.Purpose = &v
	return s
}

type DescribeAntChainConfigOptionsResponseBody struct {
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeAntChainConfigOptionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConfigOptionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConfigOptionsResponseBody) SetRequestId(v string) *DescribeAntChainConfigOptionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainConfigOptionsResponseBody) SetResult(v map[string]interface{}) *DescribeAntChainConfigOptionsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainConfigOptionsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainConfigOptionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainConfigOptionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConfigOptionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConfigOptionsResponse) SetHeaders(v map[string]*string) *DescribeAntChainConfigOptionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainConfigOptionsResponse) SetStatusCode(v int32) *DescribeAntChainConfigOptionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainConfigOptionsResponse) SetBody(v *DescribeAntChainConfigOptionsResponseBody) *DescribeAntChainConfigOptionsResponse {
	s.Body = v
	return s
}

type DescribeAntChainConsortiumsRequest struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainConsortiumsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsRequest) SetPageNumber(v int32) *DescribeAntChainConsortiumsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainConsortiumsRequest) SetPageSize(v int32) *DescribeAntChainConsortiumsRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainConsortiumsResponseBody struct {
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainConsortiumsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainConsortiumsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsResponseBody) SetRequestId(v string) *DescribeAntChainConsortiumsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBody) SetResult(v *DescribeAntChainConsortiumsResponseBodyResult) *DescribeAntChainConsortiumsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainConsortiumsResponseBodyResult struct {
	AntConsortiums []*DescribeAntChainConsortiumsResponseBodyResultAntConsortiums `json:"AntConsortiums,omitempty" xml:"AntConsortiums,omitempty" type:"Repeated"`
	Pagination     *DescribeAntChainConsortiumsResponseBodyResultPagination       `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainConsortiumsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsResponseBodyResult) SetAntConsortiums(v []*DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) *DescribeAntChainConsortiumsResponseBodyResult {
	s.AntConsortiums = v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResult) SetPagination(v *DescribeAntChainConsortiumsResponseBodyResultPagination) *DescribeAntChainConsortiumsResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainConsortiumsResponseBodyResultAntConsortiums struct {
	ChainNum              *int64  `json:"ChainNum,omitempty" xml:"ChainNum,omitempty"`
	ConsortiumDescription *string `json:"ConsortiumDescription,omitempty" xml:"ConsortiumDescription,omitempty"`
	ConsortiumId          *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	ConsortiumName        *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	CreateTime            *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsEmptyConsortium     *bool   `json:"IsEmptyConsortium,omitempty" xml:"IsEmptyConsortium,omitempty"`
	MemberNum             *int64  `json:"MemberNum,omitempty" xml:"MemberNum,omitempty"`
	Role                  *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Status                *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetChainNum(v int64) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.ChainNum = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetConsortiumDescription(v string) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.ConsortiumDescription = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetConsortiumId(v string) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetConsortiumName(v string) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.ConsortiumName = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetCreateTime(v int64) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetIsEmptyConsortium(v bool) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.IsEmptyConsortium = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetMemberNum(v int64) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.MemberNum = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetRole(v string) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.Role = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums) SetStatus(v string) *DescribeAntChainConsortiumsResponseBodyResultAntConsortiums {
	s.Status = &v
	return s
}

type DescribeAntChainConsortiumsResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainConsortiumsResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainConsortiumsResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainConsortiumsResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainConsortiumsResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainConsortiumsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainConsortiumsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainConsortiumsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsResponse) SetHeaders(v map[string]*string) *DescribeAntChainConsortiumsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainConsortiumsResponse) SetStatusCode(v int32) *DescribeAntChainConsortiumsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainConsortiumsResponse) SetBody(v *DescribeAntChainConsortiumsResponseBody) *DescribeAntChainConsortiumsResponse {
	s.Body = v
	return s
}

type DescribeAntChainConsortiumsNewRequest struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainConsortiumsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsNewRequest) SetPageNumber(v int32) *DescribeAntChainConsortiumsNewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewRequest) SetPageSize(v int32) *DescribeAntChainConsortiumsNewRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainConsortiumsNewResponseBody struct {
	Code           *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainConsortiumsNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                           `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainConsortiumsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsNewResponseBody) SetCode(v string) *DescribeAntChainConsortiumsNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainConsortiumsNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBody) SetMessage(v string) *DescribeAntChainConsortiumsNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBody) SetRequestId(v string) *DescribeAntChainConsortiumsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBody) SetResult(v *DescribeAntChainConsortiumsNewResponseBodyResult) *DescribeAntChainConsortiumsNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBody) SetResultCode(v string) *DescribeAntChainConsortiumsNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBody) SetResultMessage(v string) *DescribeAntChainConsortiumsNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBody) SetSuccess(v bool) *DescribeAntChainConsortiumsNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainConsortiumsNewResponseBodyResult struct {
	AntConsortiums []*DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums `json:"AntConsortiums,omitempty" xml:"AntConsortiums,omitempty" type:"Repeated"`
	Pagination     *DescribeAntChainConsortiumsNewResponseBodyResultPagination       `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainConsortiumsNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResult) SetAntConsortiums(v []*DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) *DescribeAntChainConsortiumsNewResponseBodyResult {
	s.AntConsortiums = v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResult) SetPagination(v *DescribeAntChainConsortiumsNewResponseBodyResultPagination) *DescribeAntChainConsortiumsNewResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums struct {
	ChainNum              *int64  `json:"ChainNum,omitempty" xml:"ChainNum,omitempty"`
	ConsortiumDescription *string `json:"ConsortiumDescription,omitempty" xml:"ConsortiumDescription,omitempty"`
	ConsortiumId          *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	ConsortiumName        *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	CreateTime            *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsEmptyConsortium     *bool   `json:"IsEmptyConsortium,omitempty" xml:"IsEmptyConsortium,omitempty"`
	MemberNum             *int64  `json:"MemberNum,omitempty" xml:"MemberNum,omitempty"`
	Role                  *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Status                *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetChainNum(v int64) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.ChainNum = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetConsortiumDescription(v string) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.ConsortiumDescription = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetConsortiumId(v string) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetConsortiumName(v string) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.ConsortiumName = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetCreateTime(v int64) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetIsEmptyConsortium(v bool) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.IsEmptyConsortium = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetMemberNum(v int64) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.MemberNum = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetRole(v string) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.Role = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums) SetStatus(v string) *DescribeAntChainConsortiumsNewResponseBodyResultAntConsortiums {
	s.Status = &v
	return s
}

type DescribeAntChainConsortiumsNewResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainConsortiumsNewResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsNewResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainConsortiumsNewResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainConsortiumsNewResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainConsortiumsNewResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainConsortiumsNewResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainConsortiumsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainConsortiumsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainConsortiumsNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainConsortiumsNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainConsortiumsNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponse) SetStatusCode(v int32) *DescribeAntChainConsortiumsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainConsortiumsNewResponse) SetBody(v *DescribeAntChainConsortiumsNewResponseBody) *DescribeAntChainConsortiumsNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainContractProjectContentTreeRequest struct {
	// This parameter is required.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DescribeAntChainContractProjectContentTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectContentTreeRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectContentTreeRequest) SetProjectId(v string) *DescribeAntChainContractProjectContentTreeRequest {
	s.ProjectId = &v
	return s
}

type DescribeAntChainContractProjectContentTreeResponseBody struct {
	RequestId *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainContractProjectContentTreeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainContractProjectContentTreeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectContentTreeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectContentTreeResponseBody) SetRequestId(v string) *DescribeAntChainContractProjectContentTreeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeResponseBody) SetResult(v *DescribeAntChainContractProjectContentTreeResponseBodyResult) *DescribeAntChainContractProjectContentTreeResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainContractProjectContentTreeResponseBodyResult struct {
	Children           []map[string]interface{} `json:"Children,omitempty" xml:"Children,omitempty" type:"Repeated"`
	ProjectDescription *string                  `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	ProjectId          *string                  `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName        *string                  `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectVersion     *string                  `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
}

func (s DescribeAntChainContractProjectContentTreeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectContentTreeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectContentTreeResponseBodyResult) SetChildren(v []map[string]interface{}) *DescribeAntChainContractProjectContentTreeResponseBodyResult {
	s.Children = v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeResponseBodyResult) SetProjectDescription(v string) *DescribeAntChainContractProjectContentTreeResponseBodyResult {
	s.ProjectDescription = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeResponseBodyResult) SetProjectId(v string) *DescribeAntChainContractProjectContentTreeResponseBodyResult {
	s.ProjectId = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeResponseBodyResult) SetProjectName(v string) *DescribeAntChainContractProjectContentTreeResponseBodyResult {
	s.ProjectName = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeResponseBodyResult) SetProjectVersion(v string) *DescribeAntChainContractProjectContentTreeResponseBodyResult {
	s.ProjectVersion = &v
	return s
}

type DescribeAntChainContractProjectContentTreeResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainContractProjectContentTreeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainContractProjectContentTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectContentTreeResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectContentTreeResponse) SetHeaders(v map[string]*string) *DescribeAntChainContractProjectContentTreeResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeResponse) SetStatusCode(v int32) *DescribeAntChainContractProjectContentTreeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeResponse) SetBody(v *DescribeAntChainContractProjectContentTreeResponseBody) *DescribeAntChainContractProjectContentTreeResponse {
	s.Body = v
	return s
}

type DescribeAntChainContractProjectContentTreeNewRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	ProjectId *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
}

func (s DescribeAntChainContractProjectContentTreeNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectContentTreeNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectContentTreeNewRequest) SetConsortiumId(v string) *DescribeAntChainContractProjectContentTreeNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewRequest) SetProjectId(v string) *DescribeAntChainContractProjectContentTreeNewRequest {
	s.ProjectId = &v
	return s
}

type DescribeAntChainContractProjectContentTreeNewResponseBody struct {
	Code           *string `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *string `json:"Result,omitempty" xml:"Result,omitempty"`
	ResultCode     *string `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainContractProjectContentTreeNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectContentTreeNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectContentTreeNewResponseBody) SetCode(v string) *DescribeAntChainContractProjectContentTreeNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainContractProjectContentTreeNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponseBody) SetMessage(v string) *DescribeAntChainContractProjectContentTreeNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponseBody) SetRequestId(v string) *DescribeAntChainContractProjectContentTreeNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponseBody) SetResult(v string) *DescribeAntChainContractProjectContentTreeNewResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponseBody) SetResultCode(v string) *DescribeAntChainContractProjectContentTreeNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponseBody) SetResultMessage(v string) *DescribeAntChainContractProjectContentTreeNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponseBody) SetSuccess(v bool) *DescribeAntChainContractProjectContentTreeNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainContractProjectContentTreeNewResponse struct {
	Headers    map[string]*string                                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainContractProjectContentTreeNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainContractProjectContentTreeNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectContentTreeNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectContentTreeNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainContractProjectContentTreeNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponse) SetStatusCode(v int32) *DescribeAntChainContractProjectContentTreeNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainContractProjectContentTreeNewResponse) SetBody(v *DescribeAntChainContractProjectContentTreeNewResponseBody) *DescribeAntChainContractProjectContentTreeNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainContractProjectsRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainContractProjectsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsRequest) SetConsortiumId(v string) *DescribeAntChainContractProjectsRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainContractProjectsRequest) SetPageNumber(v int32) *DescribeAntChainContractProjectsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainContractProjectsRequest) SetPageSize(v int32) *DescribeAntChainContractProjectsRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainContractProjectsResponseBody struct {
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainContractProjectsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainContractProjectsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsResponseBody) SetRequestId(v string) *DescribeAntChainContractProjectsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBody) SetResult(v *DescribeAntChainContractProjectsResponseBodyResult) *DescribeAntChainContractProjectsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainContractProjectsResponseBodyResult struct {
	ContractProjects []*DescribeAntChainContractProjectsResponseBodyResultContractProjects `json:"ContractProjects,omitempty" xml:"ContractProjects,omitempty" type:"Repeated"`
	Pagination       *DescribeAntChainContractProjectsResponseBodyResultPagination         `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainContractProjectsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsResponseBodyResult) SetContractProjects(v []*DescribeAntChainContractProjectsResponseBodyResultContractProjects) *DescribeAntChainContractProjectsResponseBodyResult {
	s.ContractProjects = v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResult) SetPagination(v *DescribeAntChainContractProjectsResponseBodyResultPagination) *DescribeAntChainContractProjectsResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainContractProjectsResponseBodyResultContractProjects struct {
	ConsortiumId       *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ProjectDescription *string `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	ProjectId          *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName        *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectVersion     *string `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
	UpdateTime         *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeAntChainContractProjectsResponseBodyResultContractProjects) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsResponseBodyResultContractProjects) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsResponseBodyResultContractProjects) SetConsortiumId(v string) *DescribeAntChainContractProjectsResponseBodyResultContractProjects {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResultContractProjects) SetCreateTime(v int64) *DescribeAntChainContractProjectsResponseBodyResultContractProjects {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResultContractProjects) SetProjectDescription(v string) *DescribeAntChainContractProjectsResponseBodyResultContractProjects {
	s.ProjectDescription = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResultContractProjects) SetProjectId(v string) *DescribeAntChainContractProjectsResponseBodyResultContractProjects {
	s.ProjectId = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResultContractProjects) SetProjectName(v string) *DescribeAntChainContractProjectsResponseBodyResultContractProjects {
	s.ProjectName = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResultContractProjects) SetProjectVersion(v string) *DescribeAntChainContractProjectsResponseBodyResultContractProjects {
	s.ProjectVersion = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResultContractProjects) SetUpdateTime(v int64) *DescribeAntChainContractProjectsResponseBodyResultContractProjects {
	s.UpdateTime = &v
	return s
}

type DescribeAntChainContractProjectsResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainContractProjectsResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainContractProjectsResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainContractProjectsResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainContractProjectsResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainContractProjectsResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainContractProjectsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainContractProjectsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsResponse) SetHeaders(v map[string]*string) *DescribeAntChainContractProjectsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainContractProjectsResponse) SetStatusCode(v int32) *DescribeAntChainContractProjectsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainContractProjectsResponse) SetBody(v *DescribeAntChainContractProjectsResponseBody) *DescribeAntChainContractProjectsResponse {
	s.Body = v
	return s
}

type DescribeAntChainContractProjectsNewRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainContractProjectsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsNewRequest) SetConsortiumId(v string) *DescribeAntChainContractProjectsNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewRequest) SetPageNumber(v int32) *DescribeAntChainContractProjectsNewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewRequest) SetPageSize(v int32) *DescribeAntChainContractProjectsNewRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainContractProjectsNewResponseBody struct {
	Code           *string                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                                `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainContractProjectsNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                                `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                                `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainContractProjectsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsNewResponseBody) SetCode(v string) *DescribeAntChainContractProjectsNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainContractProjectsNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBody) SetMessage(v string) *DescribeAntChainContractProjectsNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBody) SetRequestId(v string) *DescribeAntChainContractProjectsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBody) SetResult(v *DescribeAntChainContractProjectsNewResponseBodyResult) *DescribeAntChainContractProjectsNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBody) SetResultCode(v string) *DescribeAntChainContractProjectsNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBody) SetResultMessage(v string) *DescribeAntChainContractProjectsNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBody) SetSuccess(v bool) *DescribeAntChainContractProjectsNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainContractProjectsNewResponseBodyResult struct {
	ContractProjects []*DescribeAntChainContractProjectsNewResponseBodyResultContractProjects `json:"ContractProjects,omitempty" xml:"ContractProjects,omitempty" type:"Repeated"`
	Pagination       *DescribeAntChainContractProjectsNewResponseBodyResultPagination         `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainContractProjectsNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResult) SetContractProjects(v []*DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) *DescribeAntChainContractProjectsNewResponseBodyResult {
	s.ContractProjects = v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResult) SetPagination(v *DescribeAntChainContractProjectsNewResponseBodyResultPagination) *DescribeAntChainContractProjectsNewResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainContractProjectsNewResponseBodyResultContractProjects struct {
	ConsortiumId       *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	CreateTime         *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ProjectDescription *string `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	ProjectId          *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName        *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectVersion     *string `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
	UpdateTime         *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) SetConsortiumId(v string) *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) SetCreateTime(v int64) *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) SetProjectDescription(v string) *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects {
	s.ProjectDescription = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) SetProjectId(v string) *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects {
	s.ProjectId = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) SetProjectName(v string) *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects {
	s.ProjectName = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) SetProjectVersion(v string) *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects {
	s.ProjectVersion = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects) SetUpdateTime(v int64) *DescribeAntChainContractProjectsNewResponseBodyResultContractProjects {
	s.UpdateTime = &v
	return s
}

type DescribeAntChainContractProjectsNewResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainContractProjectsNewResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsNewResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainContractProjectsNewResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainContractProjectsNewResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainContractProjectsNewResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainContractProjectsNewResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainContractProjectsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainContractProjectsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainContractProjectsNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainContractProjectsNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainContractProjectsNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponse) SetStatusCode(v int32) *DescribeAntChainContractProjectsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainContractProjectsNewResponse) SetBody(v *DescribeAntChainContractProjectsNewResponseBody) *DescribeAntChainContractProjectsNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainDownloadPathsRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s DescribeAntChainDownloadPathsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainDownloadPathsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainDownloadPathsRequest) SetAntChainId(v string) *DescribeAntChainDownloadPathsRequest {
	s.AntChainId = &v
	return s
}

type DescribeAntChainDownloadPathsResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainDownloadPathsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainDownloadPathsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainDownloadPathsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainDownloadPathsResponseBody) SetRequestId(v string) *DescribeAntChainDownloadPathsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainDownloadPathsResponseBody) SetResult(v *DescribeAntChainDownloadPathsResponseBodyResult) *DescribeAntChainDownloadPathsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainDownloadPathsResponseBodyResult struct {
	CaCrtUrl     *string `json:"CaCrtUrl,omitempty" xml:"CaCrtUrl,omitempty"`
	ClientCrtUrl *string `json:"ClientCrtUrl,omitempty" xml:"ClientCrtUrl,omitempty"`
	SdkUrl       *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
	TrustCaUrl   *string `json:"TrustCaUrl,omitempty" xml:"TrustCaUrl,omitempty"`
}

func (s DescribeAntChainDownloadPathsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainDownloadPathsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainDownloadPathsResponseBodyResult) SetCaCrtUrl(v string) *DescribeAntChainDownloadPathsResponseBodyResult {
	s.CaCrtUrl = &v
	return s
}

func (s *DescribeAntChainDownloadPathsResponseBodyResult) SetClientCrtUrl(v string) *DescribeAntChainDownloadPathsResponseBodyResult {
	s.ClientCrtUrl = &v
	return s
}

func (s *DescribeAntChainDownloadPathsResponseBodyResult) SetSdkUrl(v string) *DescribeAntChainDownloadPathsResponseBodyResult {
	s.SdkUrl = &v
	return s
}

func (s *DescribeAntChainDownloadPathsResponseBodyResult) SetTrustCaUrl(v string) *DescribeAntChainDownloadPathsResponseBodyResult {
	s.TrustCaUrl = &v
	return s
}

type DescribeAntChainDownloadPathsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainDownloadPathsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainDownloadPathsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainDownloadPathsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainDownloadPathsResponse) SetHeaders(v map[string]*string) *DescribeAntChainDownloadPathsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainDownloadPathsResponse) SetStatusCode(v int32) *DescribeAntChainDownloadPathsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainDownloadPathsResponse) SetBody(v *DescribeAntChainDownloadPathsResponseBody) *DescribeAntChainDownloadPathsResponse {
	s.Body = v
	return s
}

type DescribeAntChainDownloadPathsNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeAntChainDownloadPathsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainDownloadPathsNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainDownloadPathsNewRequest) SetAntChainId(v string) *DescribeAntChainDownloadPathsNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewRequest) SetConsortiumId(v string) *DescribeAntChainDownloadPathsNewRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeAntChainDownloadPathsNewResponseBody struct {
	Code           *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainDownloadPathsNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainDownloadPathsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainDownloadPathsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainDownloadPathsNewResponseBody) SetCode(v string) *DescribeAntChainDownloadPathsNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainDownloadPathsNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBody) SetMessage(v string) *DescribeAntChainDownloadPathsNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBody) SetRequestId(v string) *DescribeAntChainDownloadPathsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBody) SetResult(v *DescribeAntChainDownloadPathsNewResponseBodyResult) *DescribeAntChainDownloadPathsNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBody) SetResultCode(v string) *DescribeAntChainDownloadPathsNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBody) SetResultMessage(v string) *DescribeAntChainDownloadPathsNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBody) SetSuccess(v bool) *DescribeAntChainDownloadPathsNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainDownloadPathsNewResponseBodyResult struct {
	CaCrtUrl     *string `json:"CaCrtUrl,omitempty" xml:"CaCrtUrl,omitempty"`
	ClientCrtUrl *string `json:"ClientCrtUrl,omitempty" xml:"ClientCrtUrl,omitempty"`
	SdkUrl       *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
	TrustCaUrl   *string `json:"TrustCaUrl,omitempty" xml:"TrustCaUrl,omitempty"`
}

func (s DescribeAntChainDownloadPathsNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainDownloadPathsNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainDownloadPathsNewResponseBodyResult) SetCaCrtUrl(v string) *DescribeAntChainDownloadPathsNewResponseBodyResult {
	s.CaCrtUrl = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBodyResult) SetClientCrtUrl(v string) *DescribeAntChainDownloadPathsNewResponseBodyResult {
	s.ClientCrtUrl = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBodyResult) SetSdkUrl(v string) *DescribeAntChainDownloadPathsNewResponseBodyResult {
	s.SdkUrl = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponseBodyResult) SetTrustCaUrl(v string) *DescribeAntChainDownloadPathsNewResponseBodyResult {
	s.TrustCaUrl = &v
	return s
}

type DescribeAntChainDownloadPathsNewResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainDownloadPathsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainDownloadPathsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainDownloadPathsNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainDownloadPathsNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainDownloadPathsNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponse) SetStatusCode(v int32) *DescribeAntChainDownloadPathsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainDownloadPathsNewResponse) SetBody(v *DescribeAntChainDownloadPathsNewResponseBody) *DescribeAntChainDownloadPathsNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainInformationRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s DescribeAntChainInformationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationRequest) SetAntChainId(v string) *DescribeAntChainInformationRequest {
	s.AntChainId = &v
	return s
}

type DescribeAntChainInformationResponseBody struct {
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainInformationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainInformationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationResponseBody) SetRequestId(v string) *DescribeAntChainInformationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainInformationResponseBody) SetResult(v *DescribeAntChainInformationResponseBodyResult) *DescribeAntChainInformationResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainInformationResponseBodyResult struct {
	AbnormalNodes  *int32                                                    `json:"AbnormalNodes,omitempty" xml:"AbnormalNodes,omitempty"`
	AntChainId     *string                                                   `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	BlockHeight    *int32                                                    `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	CreateTime     *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsRole         *bool                                                     `json:"IsRole,omitempty" xml:"IsRole,omitempty"`
	NodeInfos      []*DescribeAntChainInformationResponseBodyResultNodeInfos `json:"NodeInfos,omitempty" xml:"NodeInfos,omitempty" type:"Repeated"`
	NodeNumber     *int32                                                    `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Normal         *bool                                                     `json:"Normal,omitempty" xml:"Normal,omitempty"`
	TransactionSum *int32                                                    `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
	Version        *string                                                   `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainInformationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationResponseBodyResult) SetAbnormalNodes(v int32) *DescribeAntChainInformationResponseBodyResult {
	s.AbnormalNodes = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetAntChainId(v string) *DescribeAntChainInformationResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetBlockHeight(v int32) *DescribeAntChainInformationResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetCreateTime(v int64) *DescribeAntChainInformationResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetIsRole(v bool) *DescribeAntChainInformationResponseBodyResult {
	s.IsRole = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetNodeInfos(v []*DescribeAntChainInformationResponseBodyResultNodeInfos) *DescribeAntChainInformationResponseBodyResult {
	s.NodeInfos = v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetNodeNumber(v int32) *DescribeAntChainInformationResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetNormal(v bool) *DescribeAntChainInformationResponseBodyResult {
	s.Normal = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetTransactionSum(v int32) *DescribeAntChainInformationResponseBodyResult {
	s.TransactionSum = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResult) SetVersion(v string) *DescribeAntChainInformationResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeAntChainInformationResponseBodyResultNodeInfos struct {
	BlockHeight *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Status      *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainInformationResponseBodyResultNodeInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationResponseBodyResultNodeInfos) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationResponseBodyResultNodeInfos) SetBlockHeight(v int64) *DescribeAntChainInformationResponseBodyResultNodeInfos {
	s.BlockHeight = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResultNodeInfos) SetNodeName(v string) *DescribeAntChainInformationResponseBodyResultNodeInfos {
	s.NodeName = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResultNodeInfos) SetStatus(v bool) *DescribeAntChainInformationResponseBodyResultNodeInfos {
	s.Status = &v
	return s
}

func (s *DescribeAntChainInformationResponseBodyResultNodeInfos) SetVersion(v string) *DescribeAntChainInformationResponseBodyResultNodeInfos {
	s.Version = &v
	return s
}

type DescribeAntChainInformationResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainInformationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainInformationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationResponse) SetHeaders(v map[string]*string) *DescribeAntChainInformationResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainInformationResponse) SetStatusCode(v int32) *DescribeAntChainInformationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainInformationResponse) SetBody(v *DescribeAntChainInformationResponseBody) *DescribeAntChainInformationResponse {
	s.Body = v
	return s
}

type DescribeAntChainInformationNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeAntChainInformationNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationNewRequest) SetAntChainId(v string) *DescribeAntChainInformationNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainInformationNewRequest) SetConsortiumId(v string) *DescribeAntChainInformationNewRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeAntChainInformationNewResponseBody struct {
	Code           *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainInformationNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                           `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainInformationNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationNewResponseBody) SetCode(v string) *DescribeAntChainInformationNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainInformationNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBody) SetMessage(v string) *DescribeAntChainInformationNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBody) SetRequestId(v string) *DescribeAntChainInformationNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBody) SetResult(v *DescribeAntChainInformationNewResponseBodyResult) *DescribeAntChainInformationNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainInformationNewResponseBody) SetResultCode(v string) *DescribeAntChainInformationNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBody) SetResultMessage(v string) *DescribeAntChainInformationNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBody) SetSuccess(v bool) *DescribeAntChainInformationNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainInformationNewResponseBodyResult struct {
	AbnormalNodes  *int32                                                       `json:"AbnormalNodes,omitempty" xml:"AbnormalNodes,omitempty"`
	AntChainId     *string                                                      `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	BlockHeight    *int32                                                       `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	CreateTime     *int64                                                       `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsRole         *bool                                                        `json:"IsRole,omitempty" xml:"IsRole,omitempty"`
	NodeInfos      []*DescribeAntChainInformationNewResponseBodyResultNodeInfos `json:"NodeInfos,omitempty" xml:"NodeInfos,omitempty" type:"Repeated"`
	NodeNumber     *int32                                                       `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Normal         *bool                                                        `json:"Normal,omitempty" xml:"Normal,omitempty"`
	TransactionSum *int32                                                       `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
	Version        *string                                                      `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainInformationNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetAbnormalNodes(v int32) *DescribeAntChainInformationNewResponseBodyResult {
	s.AbnormalNodes = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetAntChainId(v string) *DescribeAntChainInformationNewResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetBlockHeight(v int32) *DescribeAntChainInformationNewResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetCreateTime(v int64) *DescribeAntChainInformationNewResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetIsRole(v bool) *DescribeAntChainInformationNewResponseBodyResult {
	s.IsRole = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetNodeInfos(v []*DescribeAntChainInformationNewResponseBodyResultNodeInfos) *DescribeAntChainInformationNewResponseBodyResult {
	s.NodeInfos = v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetNodeNumber(v int32) *DescribeAntChainInformationNewResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetNormal(v bool) *DescribeAntChainInformationNewResponseBodyResult {
	s.Normal = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetTransactionSum(v int32) *DescribeAntChainInformationNewResponseBodyResult {
	s.TransactionSum = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResult) SetVersion(v string) *DescribeAntChainInformationNewResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeAntChainInformationNewResponseBodyResultNodeInfos struct {
	BlockHeight *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Status      *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainInformationNewResponseBodyResultNodeInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationNewResponseBodyResultNodeInfos) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationNewResponseBodyResultNodeInfos) SetBlockHeight(v int64) *DescribeAntChainInformationNewResponseBodyResultNodeInfos {
	s.BlockHeight = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResultNodeInfos) SetNodeName(v string) *DescribeAntChainInformationNewResponseBodyResultNodeInfos {
	s.NodeName = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResultNodeInfos) SetStatus(v bool) *DescribeAntChainInformationNewResponseBodyResultNodeInfos {
	s.Status = &v
	return s
}

func (s *DescribeAntChainInformationNewResponseBodyResultNodeInfos) SetVersion(v string) *DescribeAntChainInformationNewResponseBodyResultNodeInfos {
	s.Version = &v
	return s
}

type DescribeAntChainInformationNewResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainInformationNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainInformationNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainInformationNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainInformationNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainInformationNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainInformationNewResponse) SetStatusCode(v int32) *DescribeAntChainInformationNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainInformationNewResponse) SetBody(v *DescribeAntChainInformationNewResponseBody) *DescribeAntChainInformationNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainLatestBlocksRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s DescribeAntChainLatestBlocksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestBlocksRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestBlocksRequest) SetAntChainId(v string) *DescribeAntChainLatestBlocksRequest {
	s.AntChainId = &v
	return s
}

type DescribeAntChainLatestBlocksResponseBody struct {
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeAntChainLatestBlocksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestBlocksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestBlocksResponseBody) SetRequestId(v string) *DescribeAntChainLatestBlocksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainLatestBlocksResponseBody) SetResult(v []map[string]interface{}) *DescribeAntChainLatestBlocksResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainLatestBlocksResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainLatestBlocksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainLatestBlocksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestBlocksResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestBlocksResponse) SetHeaders(v map[string]*string) *DescribeAntChainLatestBlocksResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainLatestBlocksResponse) SetStatusCode(v int32) *DescribeAntChainLatestBlocksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainLatestBlocksResponse) SetBody(v *DescribeAntChainLatestBlocksResponseBody) *DescribeAntChainLatestBlocksResponse {
	s.Body = v
	return s
}

type DescribeAntChainLatestBlocksNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeAntChainLatestBlocksNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestBlocksNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestBlocksNewRequest) SetAntChainId(v string) *DescribeAntChainLatestBlocksNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewRequest) SetConsortiumId(v string) *DescribeAntChainLatestBlocksNewRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeAntChainLatestBlocksNewResponseBody struct {
	Code           *string                                              `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                              `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         []*DescribeAntChainLatestBlocksNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	ResultCode     *string                                              `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                              `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainLatestBlocksNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestBlocksNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestBlocksNewResponseBody) SetCode(v string) *DescribeAntChainLatestBlocksNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainLatestBlocksNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBody) SetMessage(v string) *DescribeAntChainLatestBlocksNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBody) SetRequestId(v string) *DescribeAntChainLatestBlocksNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBody) SetResult(v []*DescribeAntChainLatestBlocksNewResponseBodyResult) *DescribeAntChainLatestBlocksNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBody) SetResultCode(v string) *DescribeAntChainLatestBlocksNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBody) SetResultMessage(v string) *DescribeAntChainLatestBlocksNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBody) SetSuccess(v bool) *DescribeAntChainLatestBlocksNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainLatestBlocksNewResponseBodyResult struct {
	Alias           *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	BizData         *string `json:"BizData,omitempty" xml:"BizData,omitempty"`
	BlockHash       *string `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	CreateTime      *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Height          *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
	PreviousHash    *string `json:"PreviousHash,omitempty" xml:"PreviousHash,omitempty"`
	RootTxHash      *string `json:"RootTxHash,omitempty" xml:"RootTxHash,omitempty"`
	Size            *int64  `json:"Size,omitempty" xml:"Size,omitempty"`
	TransactionSize *int64  `json:"TransactionSize,omitempty" xml:"TransactionSize,omitempty"`
	Version         *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainLatestBlocksNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestBlocksNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetAlias(v string) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.Alias = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetBizData(v string) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.BizData = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetBlockHash(v string) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetCreateTime(v int64) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetHeight(v int64) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.Height = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetPreviousHash(v string) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.PreviousHash = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetRootTxHash(v string) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.RootTxHash = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetSize(v int64) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.Size = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetTransactionSize(v int64) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.TransactionSize = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponseBodyResult) SetVersion(v int64) *DescribeAntChainLatestBlocksNewResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeAntChainLatestBlocksNewResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainLatestBlocksNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainLatestBlocksNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestBlocksNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestBlocksNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainLatestBlocksNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponse) SetStatusCode(v int32) *DescribeAntChainLatestBlocksNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainLatestBlocksNewResponse) SetBody(v *DescribeAntChainLatestBlocksNewResponseBody) *DescribeAntChainLatestBlocksNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainLatestTransactionDigestsRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s DescribeAntChainLatestTransactionDigestsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestTransactionDigestsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestTransactionDigestsRequest) SetAntChainId(v string) *DescribeAntChainLatestTransactionDigestsRequest {
	s.AntChainId = &v
	return s
}

type DescribeAntChainLatestTransactionDigestsResponseBody struct {
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeAntChainLatestTransactionDigestsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestTransactionDigestsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestTransactionDigestsResponseBody) SetRequestId(v string) *DescribeAntChainLatestTransactionDigestsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsResponseBody) SetResult(v []map[string]interface{}) *DescribeAntChainLatestTransactionDigestsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainLatestTransactionDigestsResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainLatestTransactionDigestsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainLatestTransactionDigestsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestTransactionDigestsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestTransactionDigestsResponse) SetHeaders(v map[string]*string) *DescribeAntChainLatestTransactionDigestsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsResponse) SetStatusCode(v int32) *DescribeAntChainLatestTransactionDigestsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsResponse) SetBody(v *DescribeAntChainLatestTransactionDigestsResponseBody) *DescribeAntChainLatestTransactionDigestsResponse {
	s.Body = v
	return s
}

type DescribeAntChainLatestTransactionDigestsNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeAntChainLatestTransactionDigestsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestTransactionDigestsNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestTransactionDigestsNewRequest) SetAntChainId(v string) *DescribeAntChainLatestTransactionDigestsNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewRequest) SetConsortiumId(v string) *DescribeAntChainLatestTransactionDigestsNewRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeAntChainLatestTransactionDigestsNewResponseBody struct {
	Code           *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         []*string `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	ResultCode     *string   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainLatestTransactionDigestsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestTransactionDigestsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponseBody) SetCode(v string) *DescribeAntChainLatestTransactionDigestsNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainLatestTransactionDigestsNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponseBody) SetMessage(v string) *DescribeAntChainLatestTransactionDigestsNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponseBody) SetRequestId(v string) *DescribeAntChainLatestTransactionDigestsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponseBody) SetResult(v []*string) *DescribeAntChainLatestTransactionDigestsNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponseBody) SetResultCode(v string) *DescribeAntChainLatestTransactionDigestsNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponseBody) SetResultMessage(v string) *DescribeAntChainLatestTransactionDigestsNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponseBody) SetSuccess(v bool) *DescribeAntChainLatestTransactionDigestsNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainLatestTransactionDigestsNewResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainLatestTransactionDigestsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainLatestTransactionDigestsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainLatestTransactionDigestsNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainLatestTransactionDigestsNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponse) SetStatusCode(v int32) *DescribeAntChainLatestTransactionDigestsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainLatestTransactionDigestsNewResponse) SetBody(v *DescribeAntChainLatestTransactionDigestsNewResponseBody) *DescribeAntChainLatestTransactionDigestsNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainMembersRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersRequest) SetConsortiumId(v string) *DescribeAntChainMembersRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainMembersRequest) SetPageNumber(v int32) *DescribeAntChainMembersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainMembersRequest) SetPageSize(v int32) *DescribeAntChainMembersRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainMembersResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainMembersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersResponseBody) SetRequestId(v string) *DescribeAntChainMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainMembersResponseBody) SetResult(v *DescribeAntChainMembersResponseBodyResult) *DescribeAntChainMembersResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainMembersResponseBodyResult struct {
	Members    []*DescribeAntChainMembersResponseBodyResultMembers  `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
	Pagination *DescribeAntChainMembersResponseBodyResultPagination `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainMembersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersResponseBodyResult) SetMembers(v []*DescribeAntChainMembersResponseBodyResultMembers) *DescribeAntChainMembersResponseBodyResult {
	s.Members = v
	return s
}

func (s *DescribeAntChainMembersResponseBodyResult) SetPagination(v *DescribeAntChainMembersResponseBodyResultPagination) *DescribeAntChainMembersResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainMembersResponseBodyResultMembers struct {
	JoinTime   *int64  `json:"JoinTime,omitempty" xml:"JoinTime,omitempty"`
	MemberId   *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	MemberName *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
	Role       *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAntChainMembersResponseBodyResultMembers) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersResponseBodyResultMembers) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersResponseBodyResultMembers) SetJoinTime(v int64) *DescribeAntChainMembersResponseBodyResultMembers {
	s.JoinTime = &v
	return s
}

func (s *DescribeAntChainMembersResponseBodyResultMembers) SetMemberId(v string) *DescribeAntChainMembersResponseBodyResultMembers {
	s.MemberId = &v
	return s
}

func (s *DescribeAntChainMembersResponseBodyResultMembers) SetMemberName(v string) *DescribeAntChainMembersResponseBodyResultMembers {
	s.MemberName = &v
	return s
}

func (s *DescribeAntChainMembersResponseBodyResultMembers) SetRole(v string) *DescribeAntChainMembersResponseBodyResultMembers {
	s.Role = &v
	return s
}

func (s *DescribeAntChainMembersResponseBodyResultMembers) SetStatus(v string) *DescribeAntChainMembersResponseBodyResultMembers {
	s.Status = &v
	return s
}

type DescribeAntChainMembersResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainMembersResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainMembersResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainMembersResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainMembersResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainMembersResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainMembersResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainMembersResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersResponse) SetHeaders(v map[string]*string) *DescribeAntChainMembersResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainMembersResponse) SetStatusCode(v int32) *DescribeAntChainMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainMembersResponse) SetBody(v *DescribeAntChainMembersResponseBody) *DescribeAntChainMembersResponse {
	s.Body = v
	return s
}

type DescribeAntChainMembersNewRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainMembersNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersNewRequest) SetConsortiumId(v string) *DescribeAntChainMembersNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainMembersNewRequest) SetPageNumber(v int32) *DescribeAntChainMembersNewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainMembersNewRequest) SetPageSize(v int32) *DescribeAntChainMembersNewRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainMembersNewResponseBody struct {
	Code           *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainMembersNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                       `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                       `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainMembersNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersNewResponseBody) SetCode(v string) *DescribeAntChainMembersNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainMembersNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBody) SetMessage(v string) *DescribeAntChainMembersNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBody) SetRequestId(v string) *DescribeAntChainMembersNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBody) SetResult(v *DescribeAntChainMembersNewResponseBodyResult) *DescribeAntChainMembersNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainMembersNewResponseBody) SetResultCode(v string) *DescribeAntChainMembersNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBody) SetResultMessage(v string) *DescribeAntChainMembersNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBody) SetSuccess(v bool) *DescribeAntChainMembersNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainMembersNewResponseBodyResult struct {
	Members    []*DescribeAntChainMembersNewResponseBodyResultMembers  `json:"Members,omitempty" xml:"Members,omitempty" type:"Repeated"`
	Pagination *DescribeAntChainMembersNewResponseBodyResultPagination `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainMembersNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersNewResponseBodyResult) SetMembers(v []*DescribeAntChainMembersNewResponseBodyResultMembers) *DescribeAntChainMembersNewResponseBodyResult {
	s.Members = v
	return s
}

func (s *DescribeAntChainMembersNewResponseBodyResult) SetPagination(v *DescribeAntChainMembersNewResponseBodyResultPagination) *DescribeAntChainMembersNewResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainMembersNewResponseBodyResultMembers struct {
	JoinTime   *int64  `json:"JoinTime,omitempty" xml:"JoinTime,omitempty"`
	MemberId   *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	MemberName *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
	Role       *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAntChainMembersNewResponseBodyResultMembers) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersNewResponseBodyResultMembers) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersNewResponseBodyResultMembers) SetJoinTime(v int64) *DescribeAntChainMembersNewResponseBodyResultMembers {
	s.JoinTime = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBodyResultMembers) SetMemberId(v string) *DescribeAntChainMembersNewResponseBodyResultMembers {
	s.MemberId = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBodyResultMembers) SetMemberName(v string) *DescribeAntChainMembersNewResponseBodyResultMembers {
	s.MemberName = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBodyResultMembers) SetRole(v string) *DescribeAntChainMembersNewResponseBodyResultMembers {
	s.Role = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBodyResultMembers) SetStatus(v string) *DescribeAntChainMembersNewResponseBodyResultMembers {
	s.Status = &v
	return s
}

type DescribeAntChainMembersNewResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainMembersNewResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersNewResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersNewResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainMembersNewResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainMembersNewResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainMembersNewResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainMembersNewResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainMembersNewResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainMembersNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainMembersNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMembersNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMembersNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainMembersNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainMembersNewResponse) SetStatusCode(v int32) *DescribeAntChainMembersNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainMembersNewResponse) SetBody(v *DescribeAntChainMembersNewResponseBody) *DescribeAntChainMembersNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	QRCodeType *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest) SetQRCodeType(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody struct {
	RequestId *string                                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody) SetRequestId(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody) SetResult(v *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult) *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult struct {
	AccessAlipayAccountCount *int64 `json:"AccessAlipayAccountCount,omitempty" xml:"AccessAlipayAccountCount,omitempty"`
	AccessCount              *int64 `json:"AccessCount,omitempty" xml:"AccessCount,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult) SetAccessAlipayAccountCount(v int64) *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult {
	s.AccessAlipayAccountCount = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult) SetAccessCount(v int64) *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBodyResult {
	s.AccessCount = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse struct {
	Headers    map[string]*string                                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse) SetHeaders(v map[string]*string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse) SetStatusCode(v int32) *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse) SetBody(v *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponseBody) *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse {
	s.Body = v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	QRCodeType *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest) SetQRCodeType(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody struct {
	Code           *string                                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) SetCode(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) SetMessage(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) SetRequestId(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) SetResult(v *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) SetResultCode(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) SetResultMessage(v string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) SetSuccess(v bool) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult struct {
	AccessAlipayAccountCount *int64 `json:"AccessAlipayAccountCount,omitempty" xml:"AccessAlipayAccountCount,omitempty"`
	AccessCount              *int64 `json:"AccessCount,omitempty" xml:"AccessCount,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult) SetAccessAlipayAccountCount(v int64) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult {
	s.AccessAlipayAccountCount = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult) SetAccessCount(v int64) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBodyResult {
	s.AccessCount = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse struct {
	Headers    map[string]*string                                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse) SetStatusCode(v int32) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse) SetBody(v *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponseBody) *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	QRCodeType *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest) SetPageNumber(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest) SetPageSize(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest) SetQRCodeType(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody struct {
	RequestId *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody) SetRequestId(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody) SetResult(v *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult struct {
	AntChainId         *string                                                                                    `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	AuthorizationType  *string                                                                                    `json:"AuthorizationType,omitempty" xml:"AuthorizationType,omitempty"`
	AuthorizedUserList []*DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList `json:"AuthorizedUserList,omitempty" xml:"AuthorizedUserList,omitempty" type:"Repeated"`
	Pagination         *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination           `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
	QRCodeType         *string                                                                                    `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult) SetAuthorizationType(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult {
	s.AuthorizationType = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult) SetAuthorizedUserList(v []*DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult {
	s.AuthorizedUserList = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult) SetPagination(v *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult {
	s.Pagination = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult) SetQRCodeType(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResult {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList struct {
	GmtAuthorized *string `json:"GmtAuthorized,omitempty" xml:"GmtAuthorized,omitempty"`
	Phone         *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList) SetGmtAuthorized(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList {
	s.GmtAuthorized = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList) SetPhone(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultAuthorizedUserList {
	s.Phone = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse struct {
	Headers    map[string]*string                                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse) SetHeaders(v map[string]*string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse) SetStatusCode(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse) SetBody(v *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponseBody) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse {
	s.Body = v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// This parameter is required.
	QRCodeType *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest) SetPageNumber(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest) SetPageSize(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest) SetQRCodeType(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody struct {
	Code           *string                                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) SetCode(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) SetMessage(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) SetRequestId(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) SetResult(v *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) SetResultCode(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) SetResultMessage(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) SetSuccess(v bool) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult struct {
	AntChainId         *string                                                                                       `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	AuthorizationType  *string                                                                                       `json:"AuthorizationType,omitempty" xml:"AuthorizationType,omitempty"`
	AuthorizedUserList []*DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList `json:"AuthorizedUserList,omitempty" xml:"AuthorizedUserList,omitempty" type:"Repeated"`
	Pagination         *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination           `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
	QRCodeType         *string                                                                                       `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult) SetAuthorizationType(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult {
	s.AuthorizationType = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult) SetAuthorizedUserList(v []*DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult {
	s.AuthorizedUserList = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult) SetPagination(v *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult {
	s.Pagination = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult) SetQRCodeType(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResult {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList struct {
	GmtAuthorized *string `json:"GmtAuthorized,omitempty" xml:"GmtAuthorized,omitempty"`
	Phone         *string `json:"Phone,omitempty" xml:"Phone,omitempty"`
	UserId        *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList) SetGmtAuthorized(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList {
	s.GmtAuthorized = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList) SetPhone(v string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList {
	s.Phone = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList) SetUserId(v int64) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultAuthorizedUserList {
	s.UserId = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse struct {
	Headers    map[string]*string                                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse) SetStatusCode(v int32) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse) SetBody(v *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponseBody) *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainMiniAppBrowserTransactionQRCodeRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	TransactionHash *string `json:"TransactionHash,omitempty" xml:"TransactionHash,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeRequest) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeRequest) SetTransactionHash(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeRequest {
	s.TransactionHash = &v
	return s
}

type DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody struct {
	RequestId *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody) SetRequestId(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody) SetResult(v *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult struct {
	AntChainId      *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	Base64QRCodePNG *string `json:"Base64QRCodePNG,omitempty" xml:"Base64QRCodePNG,omitempty"`
	QRCodeContent   *string `json:"QRCodeContent,omitempty" xml:"QRCodeContent,omitempty"`
	TransactionHash *string `json:"TransactionHash,omitempty" xml:"TransactionHash,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult) SetBase64QRCodePNG(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult {
	s.Base64QRCodePNG = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult) SetQRCodeContent(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult {
	s.QRCodeContent = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult) SetTransactionHash(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBodyResult {
	s.TransactionHash = &v
	return s
}

type DescribeAntChainMiniAppBrowserTransactionQRCodeResponse struct {
	Headers    map[string]*string                                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponse) SetHeaders(v map[string]*string) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponse) SetStatusCode(v int32) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeResponse) SetBody(v *DescribeAntChainMiniAppBrowserTransactionQRCodeResponseBody) *DescribeAntChainMiniAppBrowserTransactionQRCodeResponse {
	s.Body = v
	return s
}

type DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ContractId *string `json:"ContractId,omitempty" xml:"ContractId,omitempty"`
	// This parameter is required.
	TransactionHash *string `json:"TransactionHash,omitempty" xml:"TransactionHash,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest) SetContractId(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest {
	s.ContractId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest) SetTransactionHash(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest {
	s.TransactionHash = &v
	return s
}

type DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody struct {
	Code           *string                                                               `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                                               `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                               `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                                               `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                                               `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) SetCode(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) SetMessage(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) SetRequestId(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) SetResult(v *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) SetResultCode(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) SetResultMessage(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) SetSuccess(v bool) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult struct {
	AntChainId      *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	Base64QRCodePNG *string `json:"Base64QRCodePNG,omitempty" xml:"Base64QRCodePNG,omitempty"`
	QRCodeContent   *string `json:"QRCodeContent,omitempty" xml:"QRCodeContent,omitempty"`
	TransactionHash *string `json:"TransactionHash,omitempty" xml:"TransactionHash,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult) SetAntChainId(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult) SetBase64QRCodePNG(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult {
	s.Base64QRCodePNG = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult) SetQRCodeContent(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult {
	s.QRCodeContent = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult) SetTransactionHash(v string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBodyResult {
	s.TransactionHash = &v
	return s
}

type DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse struct {
	Headers    map[string]*string                                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse) SetStatusCode(v int32) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse) SetBody(v *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponseBody) *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainNodesNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeAntChainNodesNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainNodesNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainNodesNewRequest) SetAntChainId(v string) *DescribeAntChainNodesNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainNodesNewRequest) SetConsortiumId(v string) *DescribeAntChainNodesNewRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeAntChainNodesNewResponseBody struct {
	Code           *string   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         []*string `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	ResultCode     *string   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainNodesNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainNodesNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainNodesNewResponseBody) SetCode(v string) *DescribeAntChainNodesNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainNodesNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainNodesNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainNodesNewResponseBody) SetMessage(v string) *DescribeAntChainNodesNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainNodesNewResponseBody) SetRequestId(v string) *DescribeAntChainNodesNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainNodesNewResponseBody) SetResult(v []*string) *DescribeAntChainNodesNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainNodesNewResponseBody) SetResultCode(v string) *DescribeAntChainNodesNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainNodesNewResponseBody) SetResultMessage(v string) *DescribeAntChainNodesNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainNodesNewResponseBody) SetSuccess(v bool) *DescribeAntChainNodesNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainNodesNewResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainNodesNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainNodesNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainNodesNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainNodesNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainNodesNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainNodesNewResponse) SetStatusCode(v int32) *DescribeAntChainNodesNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainNodesNewResponse) SetBody(v *DescribeAntChainNodesNewResponseBody) *DescribeAntChainNodesNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainQRCodeAuthorizationRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	QRCodeType *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainQRCodeAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainQRCodeAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainQRCodeAuthorizationRequest) SetAntChainId(v string) *DescribeAntChainQRCodeAuthorizationRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationRequest) SetQRCodeType(v string) *DescribeAntChainQRCodeAuthorizationRequest {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainQRCodeAuthorizationResponseBody struct {
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainQRCodeAuthorizationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainQRCodeAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainQRCodeAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainQRCodeAuthorizationResponseBody) SetRequestId(v string) *DescribeAntChainQRCodeAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationResponseBody) SetResult(v *DescribeAntChainQRCodeAuthorizationResponseBodyResult) *DescribeAntChainQRCodeAuthorizationResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainQRCodeAuthorizationResponseBodyResult struct {
	AntChainId        *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	AuthorizationType *string `json:"AuthorizationType,omitempty" xml:"AuthorizationType,omitempty"`
	QRCodeType        *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainQRCodeAuthorizationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainQRCodeAuthorizationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainQRCodeAuthorizationResponseBodyResult) SetAntChainId(v string) *DescribeAntChainQRCodeAuthorizationResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationResponseBodyResult) SetAuthorizationType(v string) *DescribeAntChainQRCodeAuthorizationResponseBodyResult {
	s.AuthorizationType = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationResponseBodyResult) SetQRCodeType(v string) *DescribeAntChainQRCodeAuthorizationResponseBodyResult {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainQRCodeAuthorizationResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainQRCodeAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainQRCodeAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainQRCodeAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainQRCodeAuthorizationResponse) SetHeaders(v map[string]*string) *DescribeAntChainQRCodeAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationResponse) SetStatusCode(v int32) *DescribeAntChainQRCodeAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationResponse) SetBody(v *DescribeAntChainQRCodeAuthorizationResponseBody) *DescribeAntChainQRCodeAuthorizationResponse {
	s.Body = v
	return s
}

type DescribeAntChainQRCodeAuthorizationNewRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	QRCodeType *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainQRCodeAuthorizationNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainQRCodeAuthorizationNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainQRCodeAuthorizationNewRequest) SetAntChainId(v string) *DescribeAntChainQRCodeAuthorizationNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewRequest) SetQRCodeType(v string) *DescribeAntChainQRCodeAuthorizationNewRequest {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainQRCodeAuthorizationNewResponseBody struct {
	Code           *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainQRCodeAuthorizationNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainQRCodeAuthorizationNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainQRCodeAuthorizationNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBody) SetCode(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBody) SetMessage(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBody) SetRequestId(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBody) SetResult(v *DescribeAntChainQRCodeAuthorizationNewResponseBodyResult) *DescribeAntChainQRCodeAuthorizationNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBody) SetResultCode(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBody) SetResultMessage(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBody) SetSuccess(v bool) *DescribeAntChainQRCodeAuthorizationNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainQRCodeAuthorizationNewResponseBodyResult struct {
	AntChainId        *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	AuthorizationType *string `json:"AuthorizationType,omitempty" xml:"AuthorizationType,omitempty"`
	QRCodeType        *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s DescribeAntChainQRCodeAuthorizationNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainQRCodeAuthorizationNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBodyResult) SetAntChainId(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBodyResult) SetAuthorizationType(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBodyResult {
	s.AuthorizationType = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponseBodyResult) SetQRCodeType(v string) *DescribeAntChainQRCodeAuthorizationNewResponseBodyResult {
	s.QRCodeType = &v
	return s
}

type DescribeAntChainQRCodeAuthorizationNewResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainQRCodeAuthorizationNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainQRCodeAuthorizationNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainQRCodeAuthorizationNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainQRCodeAuthorizationNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponse) SetStatusCode(v int32) *DescribeAntChainQRCodeAuthorizationNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainQRCodeAuthorizationNewResponse) SetBody(v *DescribeAntChainQRCodeAuthorizationNewResponseBody) *DescribeAntChainQRCodeAuthorizationNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainRegionNamesRequest struct {
	Locale *string `json:"Locale,omitempty" xml:"Locale,omitempty"`
}

func (s DescribeAntChainRegionNamesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRegionNamesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRegionNamesRequest) SetLocale(v string) *DescribeAntChainRegionNamesRequest {
	s.Locale = &v
	return s
}

type DescribeAntChainRegionNamesResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeAntChainRegionNamesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeAntChainRegionNamesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRegionNamesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRegionNamesResponseBody) SetRequestId(v string) *DescribeAntChainRegionNamesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainRegionNamesResponseBody) SetResult(v []*DescribeAntChainRegionNamesResponseBodyResult) *DescribeAntChainRegionNamesResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainRegionNamesResponseBodyResult struct {
	RegionId   *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RegionName *string `json:"RegionName,omitempty" xml:"RegionName,omitempty"`
}

func (s DescribeAntChainRegionNamesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRegionNamesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRegionNamesResponseBodyResult) SetRegionId(v string) *DescribeAntChainRegionNamesResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeAntChainRegionNamesResponseBodyResult) SetRegionName(v string) *DescribeAntChainRegionNamesResponseBodyResult {
	s.RegionName = &v
	return s
}

type DescribeAntChainRegionNamesResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainRegionNamesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainRegionNamesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRegionNamesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRegionNamesResponse) SetHeaders(v map[string]*string) *DescribeAntChainRegionNamesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainRegionNamesResponse) SetStatusCode(v int32) *DescribeAntChainRegionNamesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainRegionNamesResponse) SetBody(v *DescribeAntChainRegionNamesResponseBody) *DescribeAntChainRegionNamesResponse {
	s.Body = v
	return s
}

type DescribeAntChainRegionsForSaleResponseBody struct {
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeAntChainRegionsForSaleResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeAntChainRegionsForSaleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRegionsForSaleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRegionsForSaleResponseBody) SetRequestId(v string) *DescribeAntChainRegionsForSaleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainRegionsForSaleResponseBody) SetResult(v []*DescribeAntChainRegionsForSaleResponseBodyResult) *DescribeAntChainRegionsForSaleResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainRegionsForSaleResponseBodyResult struct {
	RegionId *string   `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	TypeList []*string `json:"TypeList,omitempty" xml:"TypeList,omitempty" type:"Repeated"`
}

func (s DescribeAntChainRegionsForSaleResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRegionsForSaleResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRegionsForSaleResponseBodyResult) SetRegionId(v string) *DescribeAntChainRegionsForSaleResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeAntChainRegionsForSaleResponseBodyResult) SetTypeList(v []*string) *DescribeAntChainRegionsForSaleResponseBodyResult {
	s.TypeList = v
	return s
}

type DescribeAntChainRegionsForSaleResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainRegionsForSaleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainRegionsForSaleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRegionsForSaleResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRegionsForSaleResponse) SetHeaders(v map[string]*string) *DescribeAntChainRegionsForSaleResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainRegionsForSaleResponse) SetStatusCode(v int32) *DescribeAntChainRegionsForSaleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainRegionsForSaleResponse) SetBody(v *DescribeAntChainRegionsForSaleResponseBody) *DescribeAntChainRegionsForSaleResponse {
	s.Body = v
	return s
}

type DescribeAntChainResourceTypesResponseBody struct {
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeAntChainResourceTypesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeAntChainResourceTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainResourceTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainResourceTypesResponseBody) SetRequestId(v string) *DescribeAntChainResourceTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainResourceTypesResponseBody) SetResult(v []*DescribeAntChainResourceTypesResponseBodyResult) *DescribeAntChainResourceTypesResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainResourceTypesResponseBodyResult struct {
	Cpu    *int32 `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	Disk   *int32 `json:"Disk,omitempty" xml:"Disk,omitempty"`
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	TypeId *int32 `json:"TypeId,omitempty" xml:"TypeId,omitempty"`
}

func (s DescribeAntChainResourceTypesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainResourceTypesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainResourceTypesResponseBodyResult) SetCpu(v int32) *DescribeAntChainResourceTypesResponseBodyResult {
	s.Cpu = &v
	return s
}

func (s *DescribeAntChainResourceTypesResponseBodyResult) SetDisk(v int32) *DescribeAntChainResourceTypesResponseBodyResult {
	s.Disk = &v
	return s
}

func (s *DescribeAntChainResourceTypesResponseBodyResult) SetMemory(v int32) *DescribeAntChainResourceTypesResponseBodyResult {
	s.Memory = &v
	return s
}

func (s *DescribeAntChainResourceTypesResponseBodyResult) SetTypeId(v int32) *DescribeAntChainResourceTypesResponseBodyResult {
	s.TypeId = &v
	return s
}

type DescribeAntChainResourceTypesResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainResourceTypesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainResourceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainResourceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainResourceTypesResponse) SetHeaders(v map[string]*string) *DescribeAntChainResourceTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainResourceTypesResponse) SetStatusCode(v int32) *DescribeAntChainResourceTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainResourceTypesResponse) SetBody(v *DescribeAntChainResourceTypesResponseBody) *DescribeAntChainResourceTypesResponse {
	s.Body = v
	return s
}

type DescribeAntChainRestRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeAntChainRestRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRestRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRestRequest) SetAntChainId(v string) *DescribeAntChainRestRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainRestRequest) SetConsortiumId(v string) *DescribeAntChainRestRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeAntChainRestResponseBody struct {
	Code           *string                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                   `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         []*DescribeAntChainRestResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	ResultCode     *string                                   `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                   `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainRestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRestResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRestResponseBody) SetCode(v string) *DescribeAntChainRestResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainRestResponseBody) SetHttpStatusCode(v string) *DescribeAntChainRestResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainRestResponseBody) SetMessage(v string) *DescribeAntChainRestResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainRestResponseBody) SetRequestId(v string) *DescribeAntChainRestResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainRestResponseBody) SetResult(v []*DescribeAntChainRestResponseBodyResult) *DescribeAntChainRestResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainRestResponseBody) SetResultCode(v string) *DescribeAntChainRestResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainRestResponseBody) SetResultMessage(v string) *DescribeAntChainRestResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainRestResponseBody) SetSuccess(v bool) *DescribeAntChainRestResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainRestResponseBodyResult struct {
	AccessId   *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	CreateTime *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	UpdateTime *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeAntChainRestResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRestResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRestResponseBodyResult) SetAccessId(v string) *DescribeAntChainRestResponseBodyResult {
	s.AccessId = &v
	return s
}

func (s *DescribeAntChainRestResponseBodyResult) SetCreateTime(v int64) *DescribeAntChainRestResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainRestResponseBodyResult) SetUpdateTime(v int64) *DescribeAntChainRestResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type DescribeAntChainRestResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainRestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainRestResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainRestResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainRestResponse) SetHeaders(v map[string]*string) *DescribeAntChainRestResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainRestResponse) SetStatusCode(v int32) *DescribeAntChainRestResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainRestResponse) SetBody(v *DescribeAntChainRestResponseBody) *DescribeAntChainRestResponse {
	s.Body = v
	return s
}

type DescribeAntChainSubnetListRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeAntChainSubnetListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetListRequest) SetAntChainId(v string) *DescribeAntChainSubnetListRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainSubnetListRequest) SetConsortiumId(v string) *DescribeAntChainSubnetListRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeAntChainSubnetListResponseBody struct {
	Code           *string                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainSubnetListResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                       `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                       `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainSubnetListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetListResponseBody) SetCode(v string) *DescribeAntChainSubnetListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBody) SetHttpStatusCode(v string) *DescribeAntChainSubnetListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBody) SetMessage(v string) *DescribeAntChainSubnetListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBody) SetRequestId(v string) *DescribeAntChainSubnetListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBody) SetResult(v *DescribeAntChainSubnetListResponseBodyResult) *DescribeAntChainSubnetListResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainSubnetListResponseBody) SetResultCode(v string) *DescribeAntChainSubnetListResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBody) SetResultMessage(v string) *DescribeAntChainSubnetListResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBody) SetSuccess(v bool) *DescribeAntChainSubnetListResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainSubnetListResponseBodyResult struct {
	AntChainId           *string                                                             `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	BlockchainName       *string                                                             `json:"BlockchainName,omitempty" xml:"BlockchainName,omitempty"`
	BlockchainSubnetList []*DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList `json:"BlockchainSubnetList,omitempty" xml:"BlockchainSubnetList,omitempty" type:"Repeated"`
	ConsortiumAdmin      *bool                                                               `json:"ConsortiumAdmin,omitempty" xml:"ConsortiumAdmin,omitempty"`
}

func (s DescribeAntChainSubnetListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetListResponseBodyResult) SetAntChainId(v string) *DescribeAntChainSubnetListResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResult) SetBlockchainName(v string) *DescribeAntChainSubnetListResponseBodyResult {
	s.BlockchainName = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResult) SetBlockchainSubnetList(v []*DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) *DescribeAntChainSubnetListResponseBodyResult {
	s.BlockchainSubnetList = v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResult) SetConsortiumAdmin(v bool) *DescribeAntChainSubnetListResponseBodyResult {
	s.ConsortiumAdmin = &v
	return s
}

type DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList struct {
	AntChainId       *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	BlockHeight      *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	ConsortiumMember *bool   `json:"ConsortiumMember,omitempty" xml:"ConsortiumMember,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	GroupId          *string `json:"GroupId,omitempty" xml:"GroupId,omitempty"`
	Monitor          *bool   `json:"Monitor,omitempty" xml:"Monitor,omitempty"`
	Name             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeSum          *int32  `json:"NodeSum,omitempty" xml:"NodeSum,omitempty"`
	Rest             *string `json:"Rest,omitempty" xml:"Rest,omitempty"`
	Status           *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TransactionSum   *int64  `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
}

func (s DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetAntChainId(v string) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetBlockHeight(v int64) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.BlockHeight = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetConsortiumMember(v bool) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.ConsortiumMember = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetCreateTime(v int64) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetGroupId(v string) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.GroupId = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetMonitor(v bool) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.Monitor = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetName(v string) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.Name = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetNodeSum(v int32) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.NodeSum = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetRest(v string) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.Rest = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetStatus(v string) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.Status = &v
	return s
}

func (s *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList) SetTransactionSum(v int64) *DescribeAntChainSubnetListResponseBodyResultBlockchainSubnetList {
	s.TransactionSum = &v
	return s
}

type DescribeAntChainSubnetListResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainSubnetListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainSubnetListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetListResponse) SetHeaders(v map[string]*string) *DescribeAntChainSubnetListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainSubnetListResponse) SetStatusCode(v int32) *DescribeAntChainSubnetListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainSubnetListResponse) SetBody(v *DescribeAntChainSubnetListResponseBody) *DescribeAntChainSubnetListResponse {
	s.Body = v
	return s
}

type DescribeAntChainSubnetMemberListRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	PageNumber *string `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainSubnetMemberListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetMemberListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetMemberListRequest) SetAntChainId(v string) *DescribeAntChainSubnetMemberListRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListRequest) SetConsortiumId(v string) *DescribeAntChainSubnetMemberListRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListRequest) SetPageNumber(v string) *DescribeAntChainSubnetMemberListRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListRequest) SetPageSize(v string) *DescribeAntChainSubnetMemberListRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainSubnetMemberListResponseBody struct {
	Code           *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainSubnetMemberListResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainSubnetMemberListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetMemberListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetMemberListResponseBody) SetCode(v string) *DescribeAntChainSubnetMemberListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBody) SetHttpStatusCode(v string) *DescribeAntChainSubnetMemberListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBody) SetMessage(v string) *DescribeAntChainSubnetMemberListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBody) SetRequestId(v string) *DescribeAntChainSubnetMemberListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBody) SetResult(v *DescribeAntChainSubnetMemberListResponseBodyResult) *DescribeAntChainSubnetMemberListResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBody) SetResultCode(v string) *DescribeAntChainSubnetMemberListResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBody) SetResultMessage(v string) *DescribeAntChainSubnetMemberListResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBody) SetSuccess(v bool) *DescribeAntChainSubnetMemberListResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainSubnetMemberListResponseBodyResult struct {
	ConsortiumAdmin          *bool                                                                         `json:"ConsortiumAdmin,omitempty" xml:"ConsortiumAdmin,omitempty"`
	ConsortiumMemberInfoList []*DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList `json:"ConsortiumMemberInfoList,omitempty" xml:"ConsortiumMemberInfoList,omitempty" type:"Repeated"`
	Pagination               *DescribeAntChainSubnetMemberListResponseBodyResultPagination                 `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainSubnetMemberListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetMemberListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResult) SetConsortiumAdmin(v bool) *DescribeAntChainSubnetMemberListResponseBodyResult {
	s.ConsortiumAdmin = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResult) SetConsortiumMemberInfoList(v []*DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList) *DescribeAntChainSubnetMemberListResponseBodyResult {
	s.ConsortiumMemberInfoList = v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResult) SetPagination(v *DescribeAntChainSubnetMemberListResponseBodyResultPagination) *DescribeAntChainSubnetMemberListResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList struct {
	JoinTime   *int64  `json:"JoinTime,omitempty" xml:"JoinTime,omitempty"`
	MemberId   *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	MemberName *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
	Role       *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList) SetJoinTime(v int64) *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList {
	s.JoinTime = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList) SetMemberId(v string) *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList {
	s.MemberId = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList) SetMemberName(v string) *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList {
	s.MemberName = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList) SetRole(v string) *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList {
	s.Role = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList) SetStatus(v string) *DescribeAntChainSubnetMemberListResponseBodyResultConsortiumMemberInfoList {
	s.Status = &v
	return s
}

type DescribeAntChainSubnetMemberListResponseBodyResultPagination struct {
	PageNumber *int64 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainSubnetMemberListResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetMemberListResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResultPagination) SetPageNumber(v int64) *DescribeAntChainSubnetMemberListResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResultPagination) SetPageSize(v int64) *DescribeAntChainSubnetMemberListResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponseBodyResultPagination) SetTotalCount(v int64) *DescribeAntChainSubnetMemberListResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainSubnetMemberListResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainSubnetMemberListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainSubnetMemberListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetMemberListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetMemberListResponse) SetHeaders(v map[string]*string) *DescribeAntChainSubnetMemberListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponse) SetStatusCode(v int32) *DescribeAntChainSubnetMemberListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainSubnetMemberListResponse) SetBody(v *DescribeAntChainSubnetMemberListResponseBody) *DescribeAntChainSubnetMemberListResponse {
	s.Body = v
	return s
}

type DescribeAntChainSubnetNodeListRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeAntChainSubnetNodeListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetNodeListRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetNodeListRequest) SetAntChainId(v string) *DescribeAntChainSubnetNodeListRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListRequest) SetConsortiumId(v string) *DescribeAntChainSubnetNodeListRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeAntChainSubnetNodeListResponseBody struct {
	Code           *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                             `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         []*DescribeAntChainSubnetNodeListResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	ResultCode     *string                                             `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                             `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainSubnetNodeListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetNodeListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetNodeListResponseBody) SetCode(v string) *DescribeAntChainSubnetNodeListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBody) SetHttpStatusCode(v string) *DescribeAntChainSubnetNodeListResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBody) SetMessage(v string) *DescribeAntChainSubnetNodeListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBody) SetRequestId(v string) *DescribeAntChainSubnetNodeListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBody) SetResult(v []*DescribeAntChainSubnetNodeListResponseBodyResult) *DescribeAntChainSubnetNodeListResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBody) SetResultCode(v string) *DescribeAntChainSubnetNodeListResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBody) SetResultMessage(v string) *DescribeAntChainSubnetNodeListResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBody) SetSuccess(v bool) *DescribeAntChainSubnetNodeListResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainSubnetNodeListResponseBodyResult struct {
	ChainNodeInfoList []*DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList `json:"ChainNodeInfoList,omitempty" xml:"ChainNodeInfoList,omitempty" type:"Repeated"`
	ConsortiumAdmin   *bool                                                                `json:"ConsortiumAdmin,omitempty" xml:"ConsortiumAdmin,omitempty"`
}

func (s DescribeAntChainSubnetNodeListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetNodeListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResult) SetChainNodeInfoList(v []*DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) *DescribeAntChainSubnetNodeListResponseBodyResult {
	s.ChainNodeInfoList = v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResult) SetConsortiumAdmin(v bool) *DescribeAntChainSubnetNodeListResponseBodyResult {
	s.ConsortiumAdmin = &v
	return s
}

type DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList struct {
	DiskTotal  *string `json:"DiskTotal,omitempty" xml:"DiskTotal,omitempty"`
	DiskUse    *string `json:"DiskUse,omitempty" xml:"DiskUse,omitempty"`
	NodeId     *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeIp     *string `json:"NodeIp,omitempty" xml:"NodeIp,omitempty"`
	NodeName   *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	NodePort   *string `json:"NodePort,omitempty" xml:"NodePort,omitempty"`
	NodeSource *string `json:"NodeSource,omitempty" xml:"NodeSource,omitempty"`
	NodeState  *string `json:"NodeState,omitempty" xml:"NodeState,omitempty"`
	NodeType   *string `json:"NodeType,omitempty" xml:"NodeType,omitempty"`
	PublicKey  *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
}

func (s DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetDiskTotal(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.DiskTotal = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetDiskUse(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.DiskUse = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetNodeId(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.NodeId = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetNodeIp(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.NodeIp = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetNodeName(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.NodeName = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetNodePort(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.NodePort = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetNodeSource(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.NodeSource = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetNodeState(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.NodeState = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetNodeType(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.NodeType = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList) SetPublicKey(v string) *DescribeAntChainSubnetNodeListResponseBodyResultChainNodeInfoList {
	s.PublicKey = &v
	return s
}

type DescribeAntChainSubnetNodeListResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainSubnetNodeListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainSubnetNodeListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainSubnetNodeListResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainSubnetNodeListResponse) SetHeaders(v map[string]*string) *DescribeAntChainSubnetNodeListResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponse) SetStatusCode(v int32) *DescribeAntChainSubnetNodeListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainSubnetNodeListResponse) SetBody(v *DescribeAntChainSubnetNodeListResponseBody) *DescribeAntChainSubnetNodeListResponse {
	s.Body = v
	return s
}

type DescribeAntChainTransactionRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	Hash *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
}

func (s DescribeAntChainTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionRequest) SetAntChainId(v string) *DescribeAntChainTransactionRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainTransactionRequest) SetHash(v string) *DescribeAntChainTransactionRequest {
	s.Hash = &v
	return s
}

type DescribeAntChainTransactionResponseBody struct {
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainTransactionResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainTransactionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionResponseBody) SetRequestId(v string) *DescribeAntChainTransactionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBody) SetResult(v *DescribeAntChainTransactionResponseBodyResult) *DescribeAntChainTransactionResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainTransactionResponseBodyResult struct {
	BlockHash    *string                                                   `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	BlockHeight  *int64                                                    `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	BlockVersion *string                                                   `json:"BlockVersion,omitempty" xml:"BlockVersion,omitempty"`
	CreateTime   *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Hash         *string                                                   `json:"Hash,omitempty" xml:"Hash,omitempty"`
	Transaction  *DescribeAntChainTransactionResponseBodyResultTransaction `json:"Transaction,omitempty" xml:"Transaction,omitempty" type:"Struct"`
}

func (s DescribeAntChainTransactionResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionResponseBodyResult) SetBlockHash(v string) *DescribeAntChainTransactionResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResult) SetBlockHeight(v int64) *DescribeAntChainTransactionResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResult) SetBlockVersion(v string) *DescribeAntChainTransactionResponseBodyResult {
	s.BlockVersion = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResult) SetCreateTime(v int64) *DescribeAntChainTransactionResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResult) SetHash(v string) *DescribeAntChainTransactionResponseBodyResult {
	s.Hash = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResult) SetTransaction(v *DescribeAntChainTransactionResponseBodyResultTransaction) *DescribeAntChainTransactionResponseBodyResult {
	s.Transaction = v
	return s
}

type DescribeAntChainTransactionResponseBodyResultTransaction struct {
	Data       *string   `json:"Data,omitempty" xml:"Data,omitempty"`
	Extentions []*string `json:"Extentions,omitempty" xml:"Extentions,omitempty" type:"Repeated"`
	From       *string   `json:"From,omitempty" xml:"From,omitempty"`
	Gas        *string   `json:"Gas,omitempty" xml:"Gas,omitempty"`
	Hash       *string   `json:"Hash,omitempty" xml:"Hash,omitempty"`
	Nonce      *string   `json:"Nonce,omitempty" xml:"Nonce,omitempty"`
	Period     *int64    `json:"Period,omitempty" xml:"Period,omitempty"`
	Signatures []*string `json:"Signatures,omitempty" xml:"Signatures,omitempty" type:"Repeated"`
	Timestamp  *int64    `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	To         *string   `json:"To,omitempty" xml:"To,omitempty"`
	TxType     *string   `json:"TxType,omitempty" xml:"TxType,omitempty"`
	Value      *string   `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAntChainTransactionResponseBodyResultTransaction) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionResponseBodyResultTransaction) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetData(v string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Data = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetExtentions(v []*string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Extentions = v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetFrom(v string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.From = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetGas(v string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Gas = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetHash(v string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Hash = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetNonce(v string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Nonce = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetPeriod(v int64) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Period = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetSignatures(v []*string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Signatures = v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetTimestamp(v int64) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Timestamp = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetTo(v string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.To = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetTxType(v string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.TxType = &v
	return s
}

func (s *DescribeAntChainTransactionResponseBodyResultTransaction) SetValue(v string) *DescribeAntChainTransactionResponseBodyResultTransaction {
	s.Value = &v
	return s
}

type DescribeAntChainTransactionResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainTransactionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionResponse) SetHeaders(v map[string]*string) *DescribeAntChainTransactionResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainTransactionResponse) SetStatusCode(v int32) *DescribeAntChainTransactionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainTransactionResponse) SetBody(v *DescribeAntChainTransactionResponseBody) *DescribeAntChainTransactionResponse {
	s.Body = v
	return s
}

type DescribeAntChainTransactionNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	Hash *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
}

func (s DescribeAntChainTransactionNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionNewRequest) SetAntChainId(v string) *DescribeAntChainTransactionNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainTransactionNewRequest) SetConsortiumId(v string) *DescribeAntChainTransactionNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainTransactionNewRequest) SetHash(v string) *DescribeAntChainTransactionNewRequest {
	s.Hash = &v
	return s
}

type DescribeAntChainTransactionNewResponseBody struct {
	Code           *string                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                           `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainTransactionNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                           `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                           `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainTransactionNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionNewResponseBody) SetCode(v string) *DescribeAntChainTransactionNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainTransactionNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBody) SetMessage(v string) *DescribeAntChainTransactionNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBody) SetRequestId(v string) *DescribeAntChainTransactionNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBody) SetResult(v *DescribeAntChainTransactionNewResponseBodyResult) *DescribeAntChainTransactionNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBody) SetResultCode(v string) *DescribeAntChainTransactionNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBody) SetResultMessage(v string) *DescribeAntChainTransactionNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBody) SetSuccess(v bool) *DescribeAntChainTransactionNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainTransactionNewResponseBodyResult struct {
	BlockHash    *string                                                      `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	BlockHeight  *int64                                                       `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	BlockVersion *string                                                      `json:"BlockVersion,omitempty" xml:"BlockVersion,omitempty"`
	CreateTime   *int64                                                       `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Hash         *string                                                      `json:"Hash,omitempty" xml:"Hash,omitempty"`
	Transaction  *DescribeAntChainTransactionNewResponseBodyResultTransaction `json:"Transaction,omitempty" xml:"Transaction,omitempty" type:"Struct"`
}

func (s DescribeAntChainTransactionNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionNewResponseBodyResult) SetBlockHash(v string) *DescribeAntChainTransactionNewResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResult) SetBlockHeight(v int64) *DescribeAntChainTransactionNewResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResult) SetBlockVersion(v string) *DescribeAntChainTransactionNewResponseBodyResult {
	s.BlockVersion = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResult) SetCreateTime(v int64) *DescribeAntChainTransactionNewResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResult) SetHash(v string) *DescribeAntChainTransactionNewResponseBodyResult {
	s.Hash = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResult) SetTransaction(v *DescribeAntChainTransactionNewResponseBodyResultTransaction) *DescribeAntChainTransactionNewResponseBodyResult {
	s.Transaction = v
	return s
}

type DescribeAntChainTransactionNewResponseBodyResultTransaction struct {
	Data       *string   `json:"Data,omitempty" xml:"Data,omitempty"`
	Extentions []*string `json:"Extentions,omitempty" xml:"Extentions,omitempty" type:"Repeated"`
	From       *string   `json:"From,omitempty" xml:"From,omitempty"`
	Gas        *string   `json:"Gas,omitempty" xml:"Gas,omitempty"`
	Hash       *string   `json:"Hash,omitempty" xml:"Hash,omitempty"`
	Nonce      *string   `json:"Nonce,omitempty" xml:"Nonce,omitempty"`
	Period     *int64    `json:"Period,omitempty" xml:"Period,omitempty"`
	Signatures []*string `json:"Signatures,omitempty" xml:"Signatures,omitempty" type:"Repeated"`
	Timestamp  *int64    `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	To         *string   `json:"To,omitempty" xml:"To,omitempty"`
	TxType     *string   `json:"TxType,omitempty" xml:"TxType,omitempty"`
	Value      *string   `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeAntChainTransactionNewResponseBodyResultTransaction) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionNewResponseBodyResultTransaction) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetData(v string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Data = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetExtentions(v []*string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Extentions = v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetFrom(v string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.From = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetGas(v string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Gas = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetHash(v string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Hash = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetNonce(v string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Nonce = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetPeriod(v int64) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Period = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetSignatures(v []*string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Signatures = v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetTimestamp(v int64) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Timestamp = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetTo(v string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.To = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetTxType(v string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.TxType = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponseBodyResultTransaction) SetValue(v string) *DescribeAntChainTransactionNewResponseBodyResultTransaction {
	s.Value = &v
	return s
}

type DescribeAntChainTransactionNewResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainTransactionNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainTransactionNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainTransactionNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainTransactionNewResponse) SetStatusCode(v int32) *DescribeAntChainTransactionNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainTransactionNewResponse) SetBody(v *DescribeAntChainTransactionNewResponseBody) *DescribeAntChainTransactionNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainTransactionReceiptNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	Hash *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
}

func (s DescribeAntChainTransactionReceiptNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionReceiptNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionReceiptNewRequest) SetAntChainId(v string) *DescribeAntChainTransactionReceiptNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewRequest) SetConsortiumId(v string) *DescribeAntChainTransactionReceiptNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewRequest) SetHash(v string) *DescribeAntChainTransactionReceiptNewRequest {
	s.Hash = &v
	return s
}

type DescribeAntChainTransactionReceiptNewResponseBody struct {
	Code           *string                                                  `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                                  `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                  `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainTransactionReceiptNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                                  `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                                  `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                    `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainTransactionReceiptNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionReceiptNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionReceiptNewResponseBody) SetCode(v string) *DescribeAntChainTransactionReceiptNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainTransactionReceiptNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBody) SetMessage(v string) *DescribeAntChainTransactionReceiptNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBody) SetRequestId(v string) *DescribeAntChainTransactionReceiptNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBody) SetResult(v *DescribeAntChainTransactionReceiptNewResponseBodyResult) *DescribeAntChainTransactionReceiptNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBody) SetResultCode(v string) *DescribeAntChainTransactionReceiptNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBody) SetResultMessage(v string) *DescribeAntChainTransactionReceiptNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBody) SetSuccess(v bool) *DescribeAntChainTransactionReceiptNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainTransactionReceiptNewResponseBodyResult struct {
	Data    *string   `json:"Data,omitempty" xml:"Data,omitempty"`
	GasUsed *string   `json:"GasUsed,omitempty" xml:"GasUsed,omitempty"`
	Logs    []*string `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	Result  *int64    `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeAntChainTransactionReceiptNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionReceiptNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionReceiptNewResponseBodyResult) SetData(v string) *DescribeAntChainTransactionReceiptNewResponseBodyResult {
	s.Data = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBodyResult) SetGasUsed(v string) *DescribeAntChainTransactionReceiptNewResponseBodyResult {
	s.GasUsed = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBodyResult) SetLogs(v []*string) *DescribeAntChainTransactionReceiptNewResponseBodyResult {
	s.Logs = v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponseBodyResult) SetResult(v int64) *DescribeAntChainTransactionReceiptNewResponseBodyResult {
	s.Result = &v
	return s
}

type DescribeAntChainTransactionReceiptNewResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainTransactionReceiptNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainTransactionReceiptNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionReceiptNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionReceiptNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainTransactionReceiptNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponse) SetStatusCode(v int32) *DescribeAntChainTransactionReceiptNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainTransactionReceiptNewResponse) SetBody(v *DescribeAntChainTransactionReceiptNewResponseBody) *DescribeAntChainTransactionReceiptNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainTransactionStatisticsRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	End        *int64  `json:"End,omitempty" xml:"End,omitempty"`
	Start      *int64  `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s DescribeAntChainTransactionStatisticsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionStatisticsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionStatisticsRequest) SetAntChainId(v string) *DescribeAntChainTransactionStatisticsRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsRequest) SetEnd(v int64) *DescribeAntChainTransactionStatisticsRequest {
	s.End = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsRequest) SetStart(v int64) *DescribeAntChainTransactionStatisticsRequest {
	s.Start = &v
	return s
}

type DescribeAntChainTransactionStatisticsResponseBody struct {
	RequestId *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeAntChainTransactionStatisticsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeAntChainTransactionStatisticsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionStatisticsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionStatisticsResponseBody) SetRequestId(v string) *DescribeAntChainTransactionStatisticsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsResponseBody) SetResult(v []*DescribeAntChainTransactionStatisticsResponseBodyResult) *DescribeAntChainTransactionStatisticsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainTransactionStatisticsResponseBodyResult struct {
	AntChainId         *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	CreatTime          *int64  `json:"CreatTime,omitempty" xml:"CreatTime,omitempty"`
	Dt                 *int64  `json:"Dt,omitempty" xml:"Dt,omitempty"`
	LastSumBlockHeight *int64  `json:"LastSumBlockHeight,omitempty" xml:"LastSumBlockHeight,omitempty"`
	TransCount         *int64  `json:"TransCount,omitempty" xml:"TransCount,omitempty"`
}

func (s DescribeAntChainTransactionStatisticsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionStatisticsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionStatisticsResponseBodyResult) SetAntChainId(v string) *DescribeAntChainTransactionStatisticsResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsResponseBodyResult) SetCreatTime(v int64) *DescribeAntChainTransactionStatisticsResponseBodyResult {
	s.CreatTime = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsResponseBodyResult) SetDt(v int64) *DescribeAntChainTransactionStatisticsResponseBodyResult {
	s.Dt = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsResponseBodyResult) SetLastSumBlockHeight(v int64) *DescribeAntChainTransactionStatisticsResponseBodyResult {
	s.LastSumBlockHeight = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsResponseBodyResult) SetTransCount(v int64) *DescribeAntChainTransactionStatisticsResponseBodyResult {
	s.TransCount = &v
	return s
}

type DescribeAntChainTransactionStatisticsResponse struct {
	Headers    map[string]*string                                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainTransactionStatisticsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainTransactionStatisticsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionStatisticsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionStatisticsResponse) SetHeaders(v map[string]*string) *DescribeAntChainTransactionStatisticsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainTransactionStatisticsResponse) SetStatusCode(v int32) *DescribeAntChainTransactionStatisticsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsResponse) SetBody(v *DescribeAntChainTransactionStatisticsResponseBody) *DescribeAntChainTransactionStatisticsResponse {
	s.Body = v
	return s
}

type DescribeAntChainTransactionStatisticsNewRequest struct {
	// This parameter is required.
	AntChainId   *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	End          *int64  `json:"End,omitempty" xml:"End,omitempty"`
	Start        *int64  `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s DescribeAntChainTransactionStatisticsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionStatisticsNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionStatisticsNewRequest) SetAntChainId(v string) *DescribeAntChainTransactionStatisticsNewRequest {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewRequest) SetConsortiumId(v string) *DescribeAntChainTransactionStatisticsNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewRequest) SetEnd(v int64) *DescribeAntChainTransactionStatisticsNewRequest {
	s.End = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewRequest) SetStart(v int64) *DescribeAntChainTransactionStatisticsNewRequest {
	s.Start = &v
	return s
}

type DescribeAntChainTransactionStatisticsNewResponseBody struct {
	Code           *string                                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                                       `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         []*DescribeAntChainTransactionStatisticsNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	ResultCode     *string                                                       `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                                       `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainTransactionStatisticsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionStatisticsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBody) SetCode(v string) *DescribeAntChainTransactionStatisticsNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainTransactionStatisticsNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBody) SetMessage(v string) *DescribeAntChainTransactionStatisticsNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBody) SetRequestId(v string) *DescribeAntChainTransactionStatisticsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBody) SetResult(v []*DescribeAntChainTransactionStatisticsNewResponseBodyResult) *DescribeAntChainTransactionStatisticsNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBody) SetResultCode(v string) *DescribeAntChainTransactionStatisticsNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBody) SetResultMessage(v string) *DescribeAntChainTransactionStatisticsNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBody) SetSuccess(v bool) *DescribeAntChainTransactionStatisticsNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainTransactionStatisticsNewResponseBodyResult struct {
	AntChainId         *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	CreatTime          *int64  `json:"CreatTime,omitempty" xml:"CreatTime,omitempty"`
	Dt                 *int64  `json:"Dt,omitempty" xml:"Dt,omitempty"`
	LastSumBlockHeight *int64  `json:"LastSumBlockHeight,omitempty" xml:"LastSumBlockHeight,omitempty"`
	TransCount         *int64  `json:"TransCount,omitempty" xml:"TransCount,omitempty"`
}

func (s DescribeAntChainTransactionStatisticsNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionStatisticsNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBodyResult) SetAntChainId(v string) *DescribeAntChainTransactionStatisticsNewResponseBodyResult {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBodyResult) SetCreatTime(v int64) *DescribeAntChainTransactionStatisticsNewResponseBodyResult {
	s.CreatTime = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBodyResult) SetDt(v int64) *DescribeAntChainTransactionStatisticsNewResponseBodyResult {
	s.Dt = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBodyResult) SetLastSumBlockHeight(v int64) *DescribeAntChainTransactionStatisticsNewResponseBodyResult {
	s.LastSumBlockHeight = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponseBodyResult) SetTransCount(v int64) *DescribeAntChainTransactionStatisticsNewResponseBodyResult {
	s.TransCount = &v
	return s
}

type DescribeAntChainTransactionStatisticsNewResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainTransactionStatisticsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainTransactionStatisticsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainTransactionStatisticsNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainTransactionStatisticsNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainTransactionStatisticsNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponse) SetStatusCode(v int32) *DescribeAntChainTransactionStatisticsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainTransactionStatisticsNewResponse) SetBody(v *DescribeAntChainTransactionStatisticsNewResponseBody) *DescribeAntChainTransactionStatisticsNewResponse {
	s.Body = v
	return s
}

type DescribeAntChainsRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsRequest) SetConsortiumId(v string) *DescribeAntChainsRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainsRequest) SetPageNumber(v int32) *DescribeAntChainsRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainsRequest) SetPageSize(v int32) *DescribeAntChainsRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainsResponseBody struct {
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAntChainsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAntChainsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsResponseBody) SetRequestId(v string) *DescribeAntChainsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainsResponseBody) SetResult(v *DescribeAntChainsResponseBodyResult) *DescribeAntChainsResponseBody {
	s.Result = v
	return s
}

type DescribeAntChainsResponseBodyResult struct {
	AntChains  []*DescribeAntChainsResponseBodyResultAntChains `json:"AntChains,omitempty" xml:"AntChains,omitempty" type:"Repeated"`
	IsExist    *bool                                           `json:"IsExist,omitempty" xml:"IsExist,omitempty"`
	Pagination *DescribeAntChainsResponseBodyResultPagination  `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsResponseBodyResult) SetAntChains(v []*DescribeAntChainsResponseBodyResultAntChains) *DescribeAntChainsResponseBodyResult {
	s.AntChains = v
	return s
}

func (s *DescribeAntChainsResponseBodyResult) SetIsExist(v bool) *DescribeAntChainsResponseBodyResult {
	s.IsExist = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResult) SetPagination(v *DescribeAntChainsResponseBodyResultPagination) *DescribeAntChainsResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainsResponseBodyResultAntChains struct {
	AntChainId     *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	AntChainName   *string `json:"AntChainName,omitempty" xml:"AntChainName,omitempty"`
	ChainType      *string `json:"ChainType,omitempty" xml:"ChainType,omitempty"`
	CipherSuit     *string `json:"CipherSuit,omitempty" xml:"CipherSuit,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ExpireTime     *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	IsAdmin        *bool   `json:"IsAdmin,omitempty" xml:"IsAdmin,omitempty"`
	MemberStatus   *string `json:"MemberStatus,omitempty" xml:"MemberStatus,omitempty"`
	MerkleTreeSuit *string `json:"MerkleTreeSuit,omitempty" xml:"MerkleTreeSuit,omitempty"`
	Network        *string `json:"Network,omitempty" xml:"Network,omitempty"`
	NodeNum        *int32  `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceSize   *string `json:"ResourceSize,omitempty" xml:"ResourceSize,omitempty"`
	TlsAlgo        *string `json:"TlsAlgo,omitempty" xml:"TlsAlgo,omitempty"`
	Version        *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainsResponseBodyResultAntChains) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsResponseBodyResultAntChains) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetAntChainId(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetAntChainName(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.AntChainName = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetChainType(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.ChainType = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetCipherSuit(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.CipherSuit = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetCreateTime(v int64) *DescribeAntChainsResponseBodyResultAntChains {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetExpireTime(v int64) *DescribeAntChainsResponseBodyResultAntChains {
	s.ExpireTime = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetIsAdmin(v bool) *DescribeAntChainsResponseBodyResultAntChains {
	s.IsAdmin = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetMemberStatus(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.MemberStatus = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetMerkleTreeSuit(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.MerkleTreeSuit = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetNetwork(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.Network = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetNodeNum(v int32) *DescribeAntChainsResponseBodyResultAntChains {
	s.NodeNum = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetRegionId(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.RegionId = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetResourceSize(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.ResourceSize = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetTlsAlgo(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.TlsAlgo = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultAntChains) SetVersion(v string) *DescribeAntChainsResponseBodyResultAntChains {
	s.Version = &v
	return s
}

type DescribeAntChainsResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainsResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainsResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainsResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainsResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainsResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsResponse) SetHeaders(v map[string]*string) *DescribeAntChainsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainsResponse) SetStatusCode(v int32) *DescribeAntChainsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainsResponse) SetBody(v *DescribeAntChainsResponseBody) *DescribeAntChainsResponse {
	s.Body = v
	return s
}

type DescribeAntChainsNewRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	PageNumber   *int32  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	// This parameter is required.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeAntChainsNewRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsNewRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsNewRequest) SetConsortiumId(v string) *DescribeAntChainsNewRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeAntChainsNewRequest) SetPageNumber(v int32) *DescribeAntChainsNewRequest {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainsNewRequest) SetPageSize(v int32) *DescribeAntChainsNewRequest {
	s.PageSize = &v
	return s
}

type DescribeAntChainsNewResponseBody struct {
	Code           *string                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	HttpStatusCode *string                                 `json:"HttpStatusCode,omitempty" xml:"HttpStatusCode,omitempty"`
	Message        *string                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DescribeAntChainsNewResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	ResultCode     *string                                 `json:"ResultCode,omitempty" xml:"ResultCode,omitempty"`
	ResultMessage  *string                                 `json:"ResultMessage,omitempty" xml:"ResultMessage,omitempty"`
	Success        *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAntChainsNewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsNewResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsNewResponseBody) SetCode(v string) *DescribeAntChainsNewResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAntChainsNewResponseBody) SetHttpStatusCode(v string) *DescribeAntChainsNewResponseBody {
	s.HttpStatusCode = &v
	return s
}

func (s *DescribeAntChainsNewResponseBody) SetMessage(v string) *DescribeAntChainsNewResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAntChainsNewResponseBody) SetRequestId(v string) *DescribeAntChainsNewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntChainsNewResponseBody) SetResult(v *DescribeAntChainsNewResponseBodyResult) *DescribeAntChainsNewResponseBody {
	s.Result = v
	return s
}

func (s *DescribeAntChainsNewResponseBody) SetResultCode(v string) *DescribeAntChainsNewResponseBody {
	s.ResultCode = &v
	return s
}

func (s *DescribeAntChainsNewResponseBody) SetResultMessage(v string) *DescribeAntChainsNewResponseBody {
	s.ResultMessage = &v
	return s
}

func (s *DescribeAntChainsNewResponseBody) SetSuccess(v bool) *DescribeAntChainsNewResponseBody {
	s.Success = &v
	return s
}

type DescribeAntChainsNewResponseBodyResult struct {
	AntChains  []*DescribeAntChainsNewResponseBodyResultAntChains `json:"AntChains,omitempty" xml:"AntChains,omitempty" type:"Repeated"`
	IsExist    *bool                                              `json:"IsExist,omitempty" xml:"IsExist,omitempty"`
	Pagination *DescribeAntChainsNewResponseBodyResultPagination  `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAntChainsNewResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsNewResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsNewResponseBodyResult) SetAntChains(v []*DescribeAntChainsNewResponseBodyResultAntChains) *DescribeAntChainsNewResponseBodyResult {
	s.AntChains = v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResult) SetIsExist(v bool) *DescribeAntChainsNewResponseBodyResult {
	s.IsExist = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResult) SetPagination(v *DescribeAntChainsNewResponseBodyResultPagination) *DescribeAntChainsNewResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAntChainsNewResponseBodyResultAntChains struct {
	AntChainId     *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	AntChainName   *string `json:"AntChainName,omitempty" xml:"AntChainName,omitempty"`
	ChainType      *string `json:"ChainType,omitempty" xml:"ChainType,omitempty"`
	CipherSuit     *string `json:"CipherSuit,omitempty" xml:"CipherSuit,omitempty"`
	CreateTime     *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ExpireTime     *int64  `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	InstanceId     *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	IsAdmin        *bool   `json:"IsAdmin,omitempty" xml:"IsAdmin,omitempty"`
	MemberStatus   *string `json:"MemberStatus,omitempty" xml:"MemberStatus,omitempty"`
	MerkleTreeSuit *string `json:"MerkleTreeSuit,omitempty" xml:"MerkleTreeSuit,omitempty"`
	MonitorStatus  *bool   `json:"MonitorStatus,omitempty" xml:"MonitorStatus,omitempty"`
	Network        *string `json:"Network,omitempty" xml:"Network,omitempty"`
	NodeNum        *int32  `json:"NodeNum,omitempty" xml:"NodeNum,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	ResourceSize   *string `json:"ResourceSize,omitempty" xml:"ResourceSize,omitempty"`
	RestStatus     *string `json:"RestStatus,omitempty" xml:"RestStatus,omitempty"`
	TlsAlgo        *string `json:"TlsAlgo,omitempty" xml:"TlsAlgo,omitempty"`
	Version        *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeAntChainsNewResponseBodyResultAntChains) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsNewResponseBodyResultAntChains) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetAntChainId(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.AntChainId = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetAntChainName(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.AntChainName = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetChainType(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.ChainType = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetCipherSuit(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.CipherSuit = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetCreateTime(v int64) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.CreateTime = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetExpireTime(v int64) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.ExpireTime = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetInstanceId(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.InstanceId = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetIsAdmin(v bool) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.IsAdmin = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetMemberStatus(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.MemberStatus = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetMerkleTreeSuit(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.MerkleTreeSuit = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetMonitorStatus(v bool) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.MonitorStatus = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetNetwork(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.Network = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetNodeNum(v int32) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.NodeNum = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetRegionId(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.RegionId = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetResourceSize(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.ResourceSize = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetRestStatus(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.RestStatus = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetTlsAlgo(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.TlsAlgo = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultAntChains) SetVersion(v string) *DescribeAntChainsNewResponseBodyResultAntChains {
	s.Version = &v
	return s
}

type DescribeAntChainsNewResponseBodyResultPagination struct {
	PageNumber *int32 `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PageSize   *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	TotalCount *int32 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DescribeAntChainsNewResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsNewResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsNewResponseBodyResultPagination) SetPageNumber(v int32) *DescribeAntChainsNewResponseBodyResultPagination {
	s.PageNumber = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultPagination) SetPageSize(v int32) *DescribeAntChainsNewResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAntChainsNewResponseBodyResultPagination) SetTotalCount(v int32) *DescribeAntChainsNewResponseBodyResultPagination {
	s.TotalCount = &v
	return s
}

type DescribeAntChainsNewResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntChainsNewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntChainsNewResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntChainsNewResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntChainsNewResponse) SetHeaders(v map[string]*string) *DescribeAntChainsNewResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntChainsNewResponse) SetStatusCode(v int32) *DescribeAntChainsNewResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntChainsNewResponse) SetBody(v *DescribeAntChainsNewResponseBody) *DescribeAntChainsNewResponse {
	s.Body = v
	return s
}

type DescribeAntRegionsRequest struct {
	Locale *string `json:"Locale,omitempty" xml:"Locale,omitempty"`
}

func (s DescribeAntRegionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntRegionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeAntRegionsRequest) SetLocale(v string) *DescribeAntRegionsRequest {
	s.Locale = &v
	return s
}

type DescribeAntRegionsResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeAntRegionsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeAntRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAntRegionsResponseBody) SetRequestId(v string) *DescribeAntRegionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAntRegionsResponseBody) SetResult(v []*DescribeAntRegionsResponseBodyResult) *DescribeAntRegionsResponseBody {
	s.Result = v
	return s
}

type DescribeAntRegionsResponseBodyResult struct {
	LocalName *string `json:"LocalName,omitempty" xml:"LocalName,omitempty"`
	RegionId  *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
}

func (s DescribeAntRegionsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntRegionsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAntRegionsResponseBodyResult) SetLocalName(v string) *DescribeAntRegionsResponseBodyResult {
	s.LocalName = &v
	return s
}

func (s *DescribeAntRegionsResponseBodyResult) SetRegionId(v string) *DescribeAntRegionsResponseBodyResult {
	s.RegionId = &v
	return s
}

type DescribeAntRegionsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAntRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAntRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAntRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeAntRegionsResponse) SetHeaders(v map[string]*string) *DescribeAntRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeAntRegionsResponse) SetStatusCode(v int32) *DescribeAntRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAntRegionsResponse) SetBody(v *DescribeAntRegionsResponseBody) *DescribeAntRegionsResponse {
	s.Body = v
	return s
}

type DescribeAppliesRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Current  *int32  `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeAppliesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppliesRequest) GoString() string {
	return s.String()
}

func (s *DescribeAppliesRequest) SetBizid(v string) *DescribeAppliesRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeAppliesRequest) SetCurrent(v int32) *DescribeAppliesRequest {
	s.Current = &v
	return s
}

func (s *DescribeAppliesRequest) SetPageSize(v int32) *DescribeAppliesRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeAppliesRequest) SetStatus(v string) *DescribeAppliesRequest {
	s.Status = &v
	return s
}

type DescribeAppliesResponseBody struct {
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeAppliesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeAppliesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppliesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAppliesResponseBody) SetRequestId(v string) *DescribeAppliesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAppliesResponseBody) SetResult(v *DescribeAppliesResponseBodyResult) *DescribeAppliesResponseBody {
	s.Result = v
	return s
}

type DescribeAppliesResponseBodyResult struct {
	ApplyHistoryList []*DescribeAppliesResponseBodyResultApplyHistoryList `json:"ApplyHistoryList,omitempty" xml:"ApplyHistoryList,omitempty" type:"Repeated"`
	Pagination       *DescribeAppliesResponseBodyResultPagination         `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeAppliesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppliesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeAppliesResponseBodyResult) SetApplyHistoryList(v []*DescribeAppliesResponseBodyResultApplyHistoryList) *DescribeAppliesResponseBodyResult {
	s.ApplyHistoryList = v
	return s
}

func (s *DescribeAppliesResponseBodyResult) SetPagination(v *DescribeAppliesResponseBodyResultPagination) *DescribeAppliesResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeAppliesResponseBodyResultApplyHistoryList struct {
	Bizid        *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Createtime   *int64  `json:"Createtime,omitempty" xml:"Createtime,omitempty"`
	Id           *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	RejectReason *string `json:"RejectReason,omitempty" xml:"RejectReason,omitempty"`
	ReqAddr      *string `json:"ReqAddr,omitempty" xml:"ReqAddr,omitempty"`
	SignedAddr   *string `json:"SignedAddr,omitempty" xml:"SignedAddr,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Updatetime   *int64  `json:"Updatetime,omitempty" xml:"Updatetime,omitempty"`
	Username     *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeAppliesResponseBodyResultApplyHistoryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppliesResponseBodyResultApplyHistoryList) GoString() string {
	return s.String()
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetBizid(v string) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.Bizid = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetCreatetime(v int64) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.Createtime = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetId(v int32) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.Id = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetRejectReason(v string) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.RejectReason = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetReqAddr(v string) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.ReqAddr = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetSignedAddr(v string) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.SignedAddr = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetStatus(v int32) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.Status = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetUpdatetime(v int64) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.Updatetime = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultApplyHistoryList) SetUsername(v string) *DescribeAppliesResponseBodyResultApplyHistoryList {
	s.Username = &v
	return s
}

type DescribeAppliesResponseBodyResultPagination struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeAppliesResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppliesResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeAppliesResponseBodyResultPagination) SetCurrent(v int32) *DescribeAppliesResponseBodyResultPagination {
	s.Current = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultPagination) SetPageSize(v int32) *DescribeAppliesResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeAppliesResponseBodyResultPagination) SetTotal(v int32) *DescribeAppliesResponseBodyResultPagination {
	s.Total = &v
	return s
}

type DescribeAppliesResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeAppliesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeAppliesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAppliesResponse) GoString() string {
	return s.String()
}

func (s *DescribeAppliesResponse) SetHeaders(v map[string]*string) *DescribeAppliesResponse {
	s.Headers = v
	return s
}

func (s *DescribeAppliesResponse) SetStatusCode(v int32) *DescribeAppliesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAppliesResponse) SetBody(v *DescribeAppliesResponseBody) *DescribeAppliesResponse {
	s.Body = v
	return s
}

type DescribeBcSchemaRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeBcSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBcSchemaRequest) GoString() string {
	return s.String()
}

func (s *DescribeBcSchemaRequest) SetBizid(v string) *DescribeBcSchemaRequest {
	s.Bizid = &v
	return s
}

type DescribeBcSchemaResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBcSchemaResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBcSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBcSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBcSchemaResponseBody) SetRequestId(v string) *DescribeBcSchemaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBcSchemaResponseBody) SetResult(v *DescribeBcSchemaResponseBodyResult) *DescribeBcSchemaResponseBody {
	s.Result = v
	return s
}

type DescribeBcSchemaResponseBodyResult struct {
	Responses []*DescribeBcSchemaResponseBodyResultResponses `json:"Responses,omitempty" xml:"Responses,omitempty" type:"Repeated"`
	Schema    *DescribeBcSchemaResponseBodyResultSchema      `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
}

func (s DescribeBcSchemaResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBcSchemaResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBcSchemaResponseBodyResult) SetResponses(v []*DescribeBcSchemaResponseBodyResultResponses) *DescribeBcSchemaResponseBodyResult {
	s.Responses = v
	return s
}

func (s *DescribeBcSchemaResponseBodyResult) SetSchema(v *DescribeBcSchemaResponseBodyResultSchema) *DescribeBcSchemaResponseBodyResult {
	s.Schema = v
	return s
}

type DescribeBcSchemaResponseBodyResultResponses struct {
	Category     *string                                                `json:"Category,omitempty" xml:"Category,omitempty"`
	CategoryName *string                                                `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Description  *string                                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Properties   *DescribeBcSchemaResponseBodyResultResponsesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s DescribeBcSchemaResponseBodyResultResponses) String() string {
	return tea.Prettify(s)
}

func (s DescribeBcSchemaResponseBodyResultResponses) GoString() string {
	return s.String()
}

func (s *DescribeBcSchemaResponseBodyResultResponses) SetCategory(v string) *DescribeBcSchemaResponseBodyResultResponses {
	s.Category = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponses) SetCategoryName(v string) *DescribeBcSchemaResponseBodyResultResponses {
	s.CategoryName = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponses) SetDescription(v string) *DescribeBcSchemaResponseBodyResultResponses {
	s.Description = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponses) SetProperties(v *DescribeBcSchemaResponseBodyResultResponsesProperties) *DescribeBcSchemaResponseBodyResultResponses {
	s.Properties = v
	return s
}

type DescribeBcSchemaResponseBodyResultResponsesProperties struct {
	Count      *int32                                                             `json:"Count,omitempty" xml:"Count,omitempty"`
	DataSource []*DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s DescribeBcSchemaResponseBodyResultResponsesProperties) String() string {
	return tea.Prettify(s)
}

func (s DescribeBcSchemaResponseBodyResultResponsesProperties) GoString() string {
	return s.String()
}

func (s *DescribeBcSchemaResponseBodyResultResponsesProperties) SetCount(v int32) *DescribeBcSchemaResponseBodyResultResponsesProperties {
	s.Count = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponsesProperties) SetDataSource(v []*DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) *DescribeBcSchemaResponseBodyResultResponsesProperties {
	s.DataSource = v
	return s
}

type DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource struct {
	AllowNull  *int32  `json:"AllowNull,omitempty" xml:"AllowNull,omitempty"`
	Annotation *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Indexes    *int32  `json:"Indexes,omitempty" xml:"Indexes,omitempty"`
	Key        *int32  `json:"Key,omitempty" xml:"Key,omitempty"`
	Length     *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reg        *string `json:"Reg,omitempty" xml:"Reg,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) String() string {
	return tea.Prettify(s)
}

func (s DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) GoString() string {
	return s.String()
}

func (s *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetAllowNull(v int32) *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.AllowNull = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetAnnotation(v string) *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Annotation = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetField(v string) *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Field = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetIndexes(v int32) *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Indexes = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetKey(v int32) *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Key = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetLength(v int32) *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Length = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetReg(v string) *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Reg = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetType(v string) *DescribeBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Type = &v
	return s
}

type DescribeBcSchemaResponseBodyResultSchema struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *bool   `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBcSchemaResponseBodyResultSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeBcSchemaResponseBodyResultSchema) GoString() string {
	return s.String()
}

func (s *DescribeBcSchemaResponseBodyResultSchema) SetCreateTime(v int64) *DescribeBcSchemaResponseBodyResultSchema {
	s.CreateTime = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultSchema) SetDescription(v string) *DescribeBcSchemaResponseBodyResultSchema {
	s.Description = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultSchema) SetId(v int64) *DescribeBcSchemaResponseBodyResultSchema {
	s.Id = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultSchema) SetIsTemplate(v bool) *DescribeBcSchemaResponseBodyResultSchema {
	s.IsTemplate = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultSchema) SetName(v string) *DescribeBcSchemaResponseBodyResultSchema {
	s.Name = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultSchema) SetUpdateTime(v int64) *DescribeBcSchemaResponseBodyResultSchema {
	s.UpdateTime = &v
	return s
}

func (s *DescribeBcSchemaResponseBodyResultSchema) SetVersion(v int64) *DescribeBcSchemaResponseBodyResultSchema {
	s.Version = &v
	return s
}

type DescribeBcSchemaResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBcSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBcSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBcSchemaResponse) GoString() string {
	return s.String()
}

func (s *DescribeBcSchemaResponse) SetHeaders(v map[string]*string) *DescribeBcSchemaResponse {
	s.Headers = v
	return s
}

func (s *DescribeBcSchemaResponse) SetStatusCode(v int32) *DescribeBcSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBcSchemaResponse) SetBody(v *DescribeBcSchemaResponseBody) *DescribeBcSchemaResponse {
	s.Body = v
	return s
}

type DescribeBlockRequest struct {
	Bizid  *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Height *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
}

func (s DescribeBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockRequest) SetBizid(v string) *DescribeBlockRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeBlockRequest) SetHeight(v int64) *DescribeBlockRequest {
	s.Height = &v
	return s
}

type DescribeBlockResponseBody struct {
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBlockResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBlockResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockResponseBody) SetRequestId(v string) *DescribeBlockResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockResponseBody) SetResult(v *DescribeBlockResponseBodyResult) *DescribeBlockResponseBody {
	s.Result = v
	return s
}

type DescribeBlockResponseBodyResult struct {
	Alias            *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	BlockHash        *string `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Height           *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	PreviousHash     *string `json:"PreviousHash,omitempty" xml:"PreviousHash,omitempty"`
	RootTxHash       *string `json:"RootTxHash,omitempty" xml:"RootTxHash,omitempty"`
	TransSummaryList *string `json:"TransSummaryList,omitempty" xml:"TransSummaryList,omitempty"`
	TransactionSize  *int32  `json:"TransactionSize,omitempty" xml:"TransactionSize,omitempty"`
	Version          *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBlockResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBlockResponseBodyResult) SetAlias(v string) *DescribeBlockResponseBodyResult {
	s.Alias = &v
	return s
}

func (s *DescribeBlockResponseBodyResult) SetBlockHash(v string) *DescribeBlockResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *DescribeBlockResponseBodyResult) SetCreateTime(v int64) *DescribeBlockResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeBlockResponseBodyResult) SetHeight(v int32) *DescribeBlockResponseBodyResult {
	s.Height = &v
	return s
}

func (s *DescribeBlockResponseBodyResult) SetPreviousHash(v string) *DescribeBlockResponseBodyResult {
	s.PreviousHash = &v
	return s
}

func (s *DescribeBlockResponseBodyResult) SetRootTxHash(v string) *DescribeBlockResponseBodyResult {
	s.RootTxHash = &v
	return s
}

func (s *DescribeBlockResponseBodyResult) SetTransSummaryList(v string) *DescribeBlockResponseBodyResult {
	s.TransSummaryList = &v
	return s
}

func (s *DescribeBlockResponseBodyResult) SetTransactionSize(v int32) *DescribeBlockResponseBodyResult {
	s.TransactionSize = &v
	return s
}

func (s *DescribeBlockResponseBodyResult) SetVersion(v int64) *DescribeBlockResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeBlockResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockResponse) SetHeaders(v map[string]*string) *DescribeBlockResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockResponse) SetStatusCode(v int32) *DescribeBlockResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockResponse) SetBody(v *DescribeBlockResponseBody) *DescribeBlockResponse {
	s.Body = v
	return s
}

type DescribeBlockchainApplicationRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Current  *int32  `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeBlockchainApplicationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainApplicationRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainApplicationRequest) SetBizid(v string) *DescribeBlockchainApplicationRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeBlockchainApplicationRequest) SetCurrent(v int32) *DescribeBlockchainApplicationRequest {
	s.Current = &v
	return s
}

func (s *DescribeBlockchainApplicationRequest) SetPageSize(v int32) *DescribeBlockchainApplicationRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeBlockchainApplicationRequest) SetStatus(v string) *DescribeBlockchainApplicationRequest {
	s.Status = &v
	return s
}

type DescribeBlockchainApplicationResponseBody struct {
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBlockchainApplicationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBlockchainApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainApplicationResponseBody) SetRequestId(v string) *DescribeBlockchainApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBody) SetResult(v *DescribeBlockchainApplicationResponseBodyResult) *DescribeBlockchainApplicationResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainApplicationResponseBodyResult struct {
	ApplyHistoryList []*DescribeBlockchainApplicationResponseBodyResultApplyHistoryList `json:"ApplyHistoryList,omitempty" xml:"ApplyHistoryList,omitempty" type:"Repeated"`
	Pagination       *DescribeBlockchainApplicationResponseBodyResultPagination         `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeBlockchainApplicationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainApplicationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainApplicationResponseBodyResult) SetApplyHistoryList(v []*DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) *DescribeBlockchainApplicationResponseBodyResult {
	s.ApplyHistoryList = v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResult) SetPagination(v *DescribeBlockchainApplicationResponseBodyResultPagination) *DescribeBlockchainApplicationResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeBlockchainApplicationResponseBodyResultApplyHistoryList struct {
	Bizid        *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Createtime   *int64  `json:"Createtime,omitempty" xml:"Createtime,omitempty"`
	Id           *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	RejectReason *string `json:"RejectReason,omitempty" xml:"RejectReason,omitempty"`
	ReqAddr      *string `json:"ReqAddr,omitempty" xml:"ReqAddr,omitempty"`
	SignedAddr   *string `json:"SignedAddr,omitempty" xml:"SignedAddr,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Updatetime   *int64  `json:"Updatetime,omitempty" xml:"Updatetime,omitempty"`
	Username     *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetBizid(v string) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.Bizid = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetCreatetime(v int64) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.Createtime = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetId(v int32) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.Id = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetRejectReason(v string) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.RejectReason = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetReqAddr(v string) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.ReqAddr = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetSignedAddr(v string) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.SignedAddr = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetStatus(v int32) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.Status = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetUpdatetime(v int64) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.Updatetime = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList) SetUsername(v string) *DescribeBlockchainApplicationResponseBodyResultApplyHistoryList {
	s.Username = &v
	return s
}

type DescribeBlockchainApplicationResponseBodyResultPagination struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeBlockchainApplicationResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainApplicationResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainApplicationResponseBodyResultPagination) SetCurrent(v int32) *DescribeBlockchainApplicationResponseBodyResultPagination {
	s.Current = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultPagination) SetPageSize(v int32) *DescribeBlockchainApplicationResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeBlockchainApplicationResponseBodyResultPagination) SetTotal(v int32) *DescribeBlockchainApplicationResponseBodyResultPagination {
	s.Total = &v
	return s
}

type DescribeBlockchainApplicationResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainApplicationResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainApplicationResponse) SetHeaders(v map[string]*string) *DescribeBlockchainApplicationResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainApplicationResponse) SetStatusCode(v int32) *DescribeBlockchainApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainApplicationResponse) SetBody(v *DescribeBlockchainApplicationResponseBody) *DescribeBlockchainApplicationResponse {
	s.Body = v
	return s
}

type DescribeBlockchainConfigOptionRequest struct {
	Purpose *string `json:"Purpose,omitempty" xml:"Purpose,omitempty"`
}

func (s DescribeBlockchainConfigOptionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainConfigOptionRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainConfigOptionRequest) SetPurpose(v string) *DescribeBlockchainConfigOptionRequest {
	s.Purpose = &v
	return s
}

type DescribeBlockchainConfigOptionResponseBody struct {
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeBlockchainConfigOptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainConfigOptionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainConfigOptionResponseBody) SetRequestId(v string) *DescribeBlockchainConfigOptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainConfigOptionResponseBody) SetResult(v map[string]interface{}) *DescribeBlockchainConfigOptionResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainConfigOptionResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainConfigOptionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainConfigOptionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainConfigOptionResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainConfigOptionResponse) SetHeaders(v map[string]*string) *DescribeBlockchainConfigOptionResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainConfigOptionResponse) SetStatusCode(v int32) *DescribeBlockchainConfigOptionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainConfigOptionResponse) SetBody(v *DescribeBlockchainConfigOptionResponseBody) *DescribeBlockchainConfigOptionResponse {
	s.Body = v
	return s
}

type DescribeBlockchainCreateTaskRequest struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeBlockchainCreateTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreateTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreateTaskRequest) SetCurrent(v int32) *DescribeBlockchainCreateTaskRequest {
	s.Current = &v
	return s
}

func (s *DescribeBlockchainCreateTaskRequest) SetPageSize(v int32) *DescribeBlockchainCreateTaskRequest {
	s.PageSize = &v
	return s
}

type DescribeBlockchainCreateTaskResponseBody struct {
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBlockchainCreateTaskResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBlockchainCreateTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreateTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreateTaskResponseBody) SetRequestId(v string) *DescribeBlockchainCreateTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainCreateTaskResponseBody) SetResult(v *DescribeBlockchainCreateTaskResponseBodyResult) *DescribeBlockchainCreateTaskResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainCreateTaskResponseBodyResult struct {
	BlockchainCreateTasks []*DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks `json:"BlockchainCreateTasks,omitempty" xml:"BlockchainCreateTasks,omitempty" type:"Repeated"`
	Pagination            *DescribeBlockchainCreateTaskResponseBodyResultPagination              `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeBlockchainCreateTaskResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreateTaskResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreateTaskResponseBodyResult) SetBlockchainCreateTasks(v []*DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) *DescribeBlockchainCreateTaskResponseBodyResult {
	s.BlockchainCreateTasks = v
	return s
}

func (s *DescribeBlockchainCreateTaskResponseBodyResult) SetPagination(v *DescribeBlockchainCreateTaskResponseBodyResultPagination) *DescribeBlockchainCreateTaskResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks struct {
	Bizid      *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	CreateTime *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Memo       *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) SetBizid(v string) *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks {
	s.Bizid = &v
	return s
}

func (s *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) SetCreateTime(v int64) *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks {
	s.CreateTime = &v
	return s
}

func (s *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) SetMemo(v string) *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks {
	s.Memo = &v
	return s
}

func (s *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) SetName(v string) *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks {
	s.Name = &v
	return s
}

func (s *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) SetStatus(v string) *DescribeBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks {
	s.Status = &v
	return s
}

type DescribeBlockchainCreateTaskResponseBodyResultPagination struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeBlockchainCreateTaskResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreateTaskResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreateTaskResponseBodyResultPagination) SetCurrent(v int32) *DescribeBlockchainCreateTaskResponseBodyResultPagination {
	s.Current = &v
	return s
}

func (s *DescribeBlockchainCreateTaskResponseBodyResultPagination) SetPageSize(v int32) *DescribeBlockchainCreateTaskResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeBlockchainCreateTaskResponseBodyResultPagination) SetTotal(v int32) *DescribeBlockchainCreateTaskResponseBodyResultPagination {
	s.Total = &v
	return s
}

type DescribeBlockchainCreateTaskResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainCreateTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainCreateTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreateTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreateTaskResponse) SetHeaders(v map[string]*string) *DescribeBlockchainCreateTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainCreateTaskResponse) SetStatusCode(v int32) *DescribeBlockchainCreateTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainCreateTaskResponse) SetBody(v *DescribeBlockchainCreateTaskResponseBody) *DescribeBlockchainCreateTaskResponse {
	s.Body = v
	return s
}

type DescribeBlockchainCreationConfigOptionsRequest struct {
	Purpose *string `json:"Purpose,omitempty" xml:"Purpose,omitempty"`
}

func (s DescribeBlockchainCreationConfigOptionsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreationConfigOptionsRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreationConfigOptionsRequest) SetPurpose(v string) *DescribeBlockchainCreationConfigOptionsRequest {
	s.Purpose = &v
	return s
}

type DescribeBlockchainCreationConfigOptionsResponseBody struct {
	RequestId *string                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeBlockchainCreationConfigOptionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreationConfigOptionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreationConfigOptionsResponseBody) SetRequestId(v string) *DescribeBlockchainCreationConfigOptionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainCreationConfigOptionsResponseBody) SetResult(v map[string]interface{}) *DescribeBlockchainCreationConfigOptionsResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainCreationConfigOptionsResponse struct {
	Headers    map[string]*string                                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainCreationConfigOptionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainCreationConfigOptionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainCreationConfigOptionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainCreationConfigOptionsResponse) SetHeaders(v map[string]*string) *DescribeBlockchainCreationConfigOptionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainCreationConfigOptionsResponse) SetStatusCode(v int32) *DescribeBlockchainCreationConfigOptionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainCreationConfigOptionsResponse) SetBody(v *DescribeBlockchainCreationConfigOptionsResponseBody) *DescribeBlockchainCreationConfigOptionsResponse {
	s.Body = v
	return s
}

type DescribeBlockchainInfoRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeBlockchainInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainInfoRequest) SetBizid(v string) *DescribeBlockchainInfoRequest {
	s.Bizid = &v
	return s
}

type DescribeBlockchainInfoResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBlockchainInfoResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBlockchainInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainInfoResponseBody) SetRequestId(v string) *DescribeBlockchainInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBody) SetResult(v *DescribeBlockchainInfoResponseBodyResult) *DescribeBlockchainInfoResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainInfoResponseBodyResult struct {
	AbnormalNodes  *int32                                                  `json:"AbnormalNodes,omitempty" xml:"AbnormalNodes,omitempty"`
	Bizid          *string                                                 `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	BlockHeight    *int32                                                  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	CreateTime     *int64                                                  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsRole         *bool                                                   `json:"IsRole,omitempty" xml:"IsRole,omitempty"`
	NodeInfoList   []*DescribeBlockchainInfoResponseBodyResultNodeInfoList `json:"NodeInfoList,omitempty" xml:"NodeInfoList,omitempty" type:"Repeated"`
	NodeNumber     *int32                                                  `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Normal         *bool                                                   `json:"Normal,omitempty" xml:"Normal,omitempty"`
	TransactionSum *int32                                                  `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
	Version        *string                                                 `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBlockchainInfoResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainInfoResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetAbnormalNodes(v int32) *DescribeBlockchainInfoResponseBodyResult {
	s.AbnormalNodes = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetBizid(v string) *DescribeBlockchainInfoResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetBlockHeight(v int32) *DescribeBlockchainInfoResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetCreateTime(v int64) *DescribeBlockchainInfoResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetIsRole(v bool) *DescribeBlockchainInfoResponseBodyResult {
	s.IsRole = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetNodeInfoList(v []*DescribeBlockchainInfoResponseBodyResultNodeInfoList) *DescribeBlockchainInfoResponseBodyResult {
	s.NodeInfoList = v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetNodeNumber(v int32) *DescribeBlockchainInfoResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetNormal(v bool) *DescribeBlockchainInfoResponseBodyResult {
	s.Normal = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetTransactionSum(v int32) *DescribeBlockchainInfoResponseBodyResult {
	s.TransactionSum = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResult) SetVersion(v string) *DescribeBlockchainInfoResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeBlockchainInfoResponseBodyResultNodeInfoList struct {
	BlockHeight *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Status      *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBlockchainInfoResponseBodyResultNodeInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainInfoResponseBodyResultNodeInfoList) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainInfoResponseBodyResultNodeInfoList) SetBlockHeight(v int64) *DescribeBlockchainInfoResponseBodyResultNodeInfoList {
	s.BlockHeight = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResultNodeInfoList) SetNodeName(v string) *DescribeBlockchainInfoResponseBodyResultNodeInfoList {
	s.NodeName = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResultNodeInfoList) SetStatus(v bool) *DescribeBlockchainInfoResponseBodyResultNodeInfoList {
	s.Status = &v
	return s
}

func (s *DescribeBlockchainInfoResponseBodyResultNodeInfoList) SetVersion(v string) *DescribeBlockchainInfoResponseBodyResultNodeInfoList {
	s.Version = &v
	return s
}

type DescribeBlockchainInfoResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainInfoResponse) SetHeaders(v map[string]*string) *DescribeBlockchainInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainInfoResponse) SetStatusCode(v int32) *DescribeBlockchainInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainInfoResponse) SetBody(v *DescribeBlockchainInfoResponseBody) *DescribeBlockchainInfoResponse {
	s.Body = v
	return s
}

type DescribeBlockchainSchemaRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeBlockchainSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaRequest) SetBizid(v string) *DescribeBlockchainSchemaRequest {
	s.Bizid = &v
	return s
}

type DescribeBlockchainSchemaResponseBody struct {
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBlockchainSchemaResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBlockchainSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaResponseBody) SetRequestId(v string) *DescribeBlockchainSchemaResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBody) SetResult(v *DescribeBlockchainSchemaResponseBodyResult) *DescribeBlockchainSchemaResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainSchemaResponseBodyResult struct {
	Responses []*DescribeBlockchainSchemaResponseBodyResultResponses `json:"Responses,omitempty" xml:"Responses,omitempty" type:"Repeated"`
	Schema    *DescribeBlockchainSchemaResponseBodyResultSchema      `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
}

func (s DescribeBlockchainSchemaResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaResponseBodyResult) SetResponses(v []*DescribeBlockchainSchemaResponseBodyResultResponses) *DescribeBlockchainSchemaResponseBodyResult {
	s.Responses = v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResult) SetSchema(v *DescribeBlockchainSchemaResponseBodyResultSchema) *DescribeBlockchainSchemaResponseBodyResult {
	s.Schema = v
	return s
}

type DescribeBlockchainSchemaResponseBodyResultResponses struct {
	Category     *string                                                        `json:"Category,omitempty" xml:"Category,omitempty"`
	CategoryName *string                                                        `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Description  *string                                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	Properties   *DescribeBlockchainSchemaResponseBodyResultResponsesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s DescribeBlockchainSchemaResponseBodyResultResponses) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaResponseBodyResultResponses) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponses) SetCategory(v string) *DescribeBlockchainSchemaResponseBodyResultResponses {
	s.Category = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponses) SetCategoryName(v string) *DescribeBlockchainSchemaResponseBodyResultResponses {
	s.CategoryName = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponses) SetDescription(v string) *DescribeBlockchainSchemaResponseBodyResultResponses {
	s.Description = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponses) SetProperties(v *DescribeBlockchainSchemaResponseBodyResultResponsesProperties) *DescribeBlockchainSchemaResponseBodyResultResponses {
	s.Properties = v
	return s
}

type DescribeBlockchainSchemaResponseBodyResultResponsesProperties struct {
	Count      *int32                                                                     `json:"Count,omitempty" xml:"Count,omitempty"`
	DataSource []*DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s DescribeBlockchainSchemaResponseBodyResultResponsesProperties) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaResponseBodyResultResponsesProperties) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesProperties) SetCount(v int32) *DescribeBlockchainSchemaResponseBodyResultResponsesProperties {
	s.Count = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesProperties) SetDataSource(v []*DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) *DescribeBlockchainSchemaResponseBodyResultResponsesProperties {
	s.DataSource = v
	return s
}

type DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource struct {
	AllowNull  *int32  `json:"AllowNull,omitempty" xml:"AllowNull,omitempty"`
	Annotation *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Indexes    *int32  `json:"Indexes,omitempty" xml:"Indexes,omitempty"`
	Key        *int32  `json:"Key,omitempty" xml:"Key,omitempty"`
	Length     *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reg        *string `json:"Reg,omitempty" xml:"Reg,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetAllowNull(v int32) *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.AllowNull = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetAnnotation(v string) *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Annotation = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetField(v string) *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Field = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetIndexes(v int32) *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Indexes = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetKey(v int32) *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Key = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetLength(v int32) *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Length = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetReg(v string) *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Reg = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetType(v string) *DescribeBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Type = &v
	return s
}

type DescribeBlockchainSchemaResponseBodyResultSchema struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *bool   `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBlockchainSchemaResponseBodyResultSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaResponseBodyResultSchema) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaResponseBodyResultSchema) SetCreateTime(v int64) *DescribeBlockchainSchemaResponseBodyResultSchema {
	s.CreateTime = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultSchema) SetDescription(v string) *DescribeBlockchainSchemaResponseBodyResultSchema {
	s.Description = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultSchema) SetId(v int64) *DescribeBlockchainSchemaResponseBodyResultSchema {
	s.Id = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultSchema) SetIsTemplate(v bool) *DescribeBlockchainSchemaResponseBodyResultSchema {
	s.IsTemplate = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultSchema) SetName(v string) *DescribeBlockchainSchemaResponseBodyResultSchema {
	s.Name = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultSchema) SetUpdateTime(v int64) *DescribeBlockchainSchemaResponseBodyResultSchema {
	s.UpdateTime = &v
	return s
}

func (s *DescribeBlockchainSchemaResponseBodyResultSchema) SetVersion(v int64) *DescribeBlockchainSchemaResponseBodyResultSchema {
	s.Version = &v
	return s
}

type DescribeBlockchainSchemaResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaResponse) SetHeaders(v map[string]*string) *DescribeBlockchainSchemaResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainSchemaResponse) SetStatusCode(v int32) *DescribeBlockchainSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainSchemaResponse) SetBody(v *DescribeBlockchainSchemaResponseBody) *DescribeBlockchainSchemaResponse {
	s.Body = v
	return s
}

type DescribeBlockchainSchemaDetailRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	SchemaId *int64  `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s DescribeBlockchainSchemaDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaDetailRequest) SetBizid(v string) *DescribeBlockchainSchemaDetailRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailRequest) SetSchemaId(v int64) *DescribeBlockchainSchemaDetailRequest {
	s.SchemaId = &v
	return s
}

type DescribeBlockchainSchemaDetailResponseBody struct {
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBlockchainSchemaDetailResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBlockchainSchemaDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaDetailResponseBody) SetRequestId(v string) *DescribeBlockchainSchemaDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBody) SetResult(v *DescribeBlockchainSchemaDetailResponseBodyResult) *DescribeBlockchainSchemaDetailResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainSchemaDetailResponseBodyResult struct {
	Responses []*DescribeBlockchainSchemaDetailResponseBodyResultResponses `json:"Responses,omitempty" xml:"Responses,omitempty" type:"Repeated"`
	Schema    *DescribeBlockchainSchemaDetailResponseBodyResultSchema      `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
}

func (s DescribeBlockchainSchemaDetailResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaDetailResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResult) SetResponses(v []*DescribeBlockchainSchemaDetailResponseBodyResultResponses) *DescribeBlockchainSchemaDetailResponseBodyResult {
	s.Responses = v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResult) SetSchema(v *DescribeBlockchainSchemaDetailResponseBodyResultSchema) *DescribeBlockchainSchemaDetailResponseBodyResult {
	s.Schema = v
	return s
}

type DescribeBlockchainSchemaDetailResponseBodyResultResponses struct {
	Category     *string                                                              `json:"Category,omitempty" xml:"Category,omitempty"`
	CategoryName *string                                                              `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Description  *string                                                              `json:"Description,omitempty" xml:"Description,omitempty"`
	Properties   *DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s DescribeBlockchainSchemaDetailResponseBodyResultResponses) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaDetailResponseBodyResultResponses) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponses) SetCategory(v string) *DescribeBlockchainSchemaDetailResponseBodyResultResponses {
	s.Category = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponses) SetCategoryName(v string) *DescribeBlockchainSchemaDetailResponseBodyResultResponses {
	s.CategoryName = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponses) SetDescription(v string) *DescribeBlockchainSchemaDetailResponseBodyResultResponses {
	s.Description = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponses) SetProperties(v *DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties) *DescribeBlockchainSchemaDetailResponseBodyResultResponses {
	s.Properties = v
	return s
}

type DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties struct {
	Count      *int32                                                                           `json:"Count,omitempty" xml:"Count,omitempty"`
	DataSource []*DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties) SetCount(v int32) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties {
	s.Count = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties) SetDataSource(v []*DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesProperties {
	s.DataSource = v
	return s
}

type DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource struct {
	AllowNull  *int32  `json:"AllowNull,omitempty" xml:"AllowNull,omitempty"`
	Annotation *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Indexes    *int32  `json:"Indexes,omitempty" xml:"Indexes,omitempty"`
	Key        *int32  `json:"Key,omitempty" xml:"Key,omitempty"`
	Length     *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reg        *string `json:"Reg,omitempty" xml:"Reg,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetAllowNull(v int32) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.AllowNull = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetAnnotation(v string) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Annotation = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetField(v string) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Field = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetIndexes(v int32) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Indexes = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetKey(v int32) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Key = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetLength(v int32) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Length = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetReg(v string) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Reg = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetType(v string) *DescribeBlockchainSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Type = &v
	return s
}

type DescribeBlockchainSchemaDetailResponseBodyResultSchema struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *bool   `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBlockchainSchemaDetailResponseBodyResultSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaDetailResponseBodyResultSchema) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultSchema) SetCreateTime(v int64) *DescribeBlockchainSchemaDetailResponseBodyResultSchema {
	s.CreateTime = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultSchema) SetDescription(v string) *DescribeBlockchainSchemaDetailResponseBodyResultSchema {
	s.Description = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultSchema) SetId(v int64) *DescribeBlockchainSchemaDetailResponseBodyResultSchema {
	s.Id = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultSchema) SetIsTemplate(v bool) *DescribeBlockchainSchemaDetailResponseBodyResultSchema {
	s.IsTemplate = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultSchema) SetName(v string) *DescribeBlockchainSchemaDetailResponseBodyResultSchema {
	s.Name = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultSchema) SetUpdateTime(v int64) *DescribeBlockchainSchemaDetailResponseBodyResultSchema {
	s.UpdateTime = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponseBodyResultSchema) SetVersion(v int64) *DescribeBlockchainSchemaDetailResponseBodyResultSchema {
	s.Version = &v
	return s
}

type DescribeBlockchainSchemaDetailResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainSchemaDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainSchemaDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaDetailResponse) SetHeaders(v map[string]*string) *DescribeBlockchainSchemaDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponse) SetStatusCode(v int32) *DescribeBlockchainSchemaDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainSchemaDetailResponse) SetBody(v *DescribeBlockchainSchemaDetailResponseBody) *DescribeBlockchainSchemaDetailResponse {
	s.Body = v
	return s
}

type DescribeBlockchainSchemaFileOSSPropertiesRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeBlockchainSchemaFileOSSPropertiesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaFileOSSPropertiesRequest) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesRequest) SetBizid(v string) *DescribeBlockchainSchemaFileOSSPropertiesRequest {
	s.Bizid = &v
	return s
}

type DescribeBlockchainSchemaFileOSSPropertiesResponseBody struct {
	RequestId *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBlockchainSchemaFileOSSPropertiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaFileOSSPropertiesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponseBody) SetRequestId(v string) *DescribeBlockchainSchemaFileOSSPropertiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponseBody) SetResult(v *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult) *DescribeBlockchainSchemaFileOSSPropertiesResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult struct {
	AccessKeyId     *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	AccessKeySecret *string `json:"AccessKeySecret,omitempty" xml:"AccessKeySecret,omitempty"`
	BucketName      *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	Endpoint        *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	FolderName      *string `json:"FolderName,omitempty" xml:"FolderName,omitempty"`
}

func (s DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult) SetAccessKeyId(v string) *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult {
	s.AccessKeyId = &v
	return s
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult) SetAccessKeySecret(v string) *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult {
	s.AccessKeySecret = &v
	return s
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult) SetBucketName(v string) *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult {
	s.BucketName = &v
	return s
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult) SetEndpoint(v string) *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult {
	s.Endpoint = &v
	return s
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult) SetFolderName(v string) *DescribeBlockchainSchemaFileOSSPropertiesResponseBodyResult {
	s.FolderName = &v
	return s
}

type DescribeBlockchainSchemaFileOSSPropertiesResponse struct {
	Headers    map[string]*string                                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainSchemaFileOSSPropertiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainSchemaFileOSSPropertiesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaFileOSSPropertiesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponse) SetHeaders(v map[string]*string) *DescribeBlockchainSchemaFileOSSPropertiesResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponse) SetStatusCode(v int32) *DescribeBlockchainSchemaFileOSSPropertiesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainSchemaFileOSSPropertiesResponse) SetBody(v *DescribeBlockchainSchemaFileOSSPropertiesResponseBody) *DescribeBlockchainSchemaFileOSSPropertiesResponse {
	s.Body = v
	return s
}

type DescribeBlockchainSchemaTemplatesResponseBody struct {
	RequestId *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeBlockchainSchemaTemplatesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeBlockchainSchemaTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaTemplatesResponseBody) SetRequestId(v string) *DescribeBlockchainSchemaTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponseBody) SetResult(v *DescribeBlockchainSchemaTemplatesResponseBodyResult) *DescribeBlockchainSchemaTemplatesResponseBody {
	s.Result = v
	return s
}

type DescribeBlockchainSchemaTemplatesResponseBodyResult struct {
	SchemaList []*DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList `json:"SchemaList,omitempty" xml:"SchemaList,omitempty" type:"Repeated"`
}

func (s DescribeBlockchainSchemaTemplatesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaTemplatesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaTemplatesResponseBodyResult) SetSchemaList(v []*DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) *DescribeBlockchainSchemaTemplatesResponseBodyResult {
	s.SchemaList = v
	return s
}

type DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *int32  `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) SetCreateTime(v int64) *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList {
	s.CreateTime = &v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) SetDescription(v string) *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList {
	s.Description = &v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) SetId(v int64) *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList {
	s.Id = &v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) SetIsTemplate(v int32) *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList {
	s.IsTemplate = &v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) SetName(v string) *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList {
	s.Name = &v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) SetUpdateTime(v int64) *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList {
	s.UpdateTime = &v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList) SetVersion(v int64) *DescribeBlockchainSchemaTemplatesResponseBodyResultSchemaList {
	s.Version = &v
	return s
}

type DescribeBlockchainSchemaTemplatesResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeBlockchainSchemaTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeBlockchainSchemaTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeBlockchainSchemaTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribeBlockchainSchemaTemplatesResponse) SetHeaders(v map[string]*string) *DescribeBlockchainSchemaTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponse) SetStatusCode(v int32) *DescribeBlockchainSchemaTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeBlockchainSchemaTemplatesResponse) SetBody(v *DescribeBlockchainSchemaTemplatesResponseBody) *DescribeBlockchainSchemaTemplatesResponse {
	s.Body = v
	return s
}

type DescribeCSIGatewayEndpointRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeCSIGatewayEndpointRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCSIGatewayEndpointRequest) GoString() string {
	return s.String()
}

func (s *DescribeCSIGatewayEndpointRequest) SetOrganizationId(v string) *DescribeCSIGatewayEndpointRequest {
	s.OrganizationId = &v
	return s
}

type DescribeCSIGatewayEndpointResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCSIGatewayEndpointResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCSIGatewayEndpointResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCSIGatewayEndpointResponseBody) SetErrorCode(v int32) *DescribeCSIGatewayEndpointResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCSIGatewayEndpointResponseBody) SetRequestId(v string) *DescribeCSIGatewayEndpointResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCSIGatewayEndpointResponseBody) SetResult(v string) *DescribeCSIGatewayEndpointResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeCSIGatewayEndpointResponseBody) SetSuccess(v bool) *DescribeCSIGatewayEndpointResponseBody {
	s.Success = &v
	return s
}

type DescribeCSIGatewayEndpointResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCSIGatewayEndpointResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCSIGatewayEndpointResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCSIGatewayEndpointResponse) GoString() string {
	return s.String()
}

func (s *DescribeCSIGatewayEndpointResponse) SetHeaders(v map[string]*string) *DescribeCSIGatewayEndpointResponse {
	s.Headers = v
	return s
}

func (s *DescribeCSIGatewayEndpointResponse) SetStatusCode(v int32) *DescribeCSIGatewayEndpointResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCSIGatewayEndpointResponse) SetBody(v *DescribeCSIGatewayEndpointResponseBody) *DescribeCSIGatewayEndpointResponse {
	s.Body = v
	return s
}

type DescribeCandidateOrganizationsRequest struct {
	// example:
	//
	// DescribeCandidateOrganizations
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeCandidateOrganizationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCandidateOrganizationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCandidateOrganizationsRequest) SetLocation(v string) *DescribeCandidateOrganizationsRequest {
	s.Location = &v
	return s
}

type DescribeCandidateOrganizationsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeCandidateOrganizationsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCandidateOrganizationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCandidateOrganizationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCandidateOrganizationsResponseBody) SetErrorCode(v int32) *DescribeCandidateOrganizationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCandidateOrganizationsResponseBody) SetRequestId(v string) *DescribeCandidateOrganizationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCandidateOrganizationsResponseBody) SetResult(v []*DescribeCandidateOrganizationsResponseBodyResult) *DescribeCandidateOrganizationsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeCandidateOrganizationsResponseBody) SetSuccess(v bool) *DescribeCandidateOrganizationsResponseBody {
	s.Success = &v
	return s
}

type DescribeCandidateOrganizationsResponseBodyResult struct {
	// example:
	//
	// Running
	ClusterState *string `json:"ClusterState,omitempty" xml:"ClusterState,omitempty"`
	// example:
	//
	// peers-1oxw31d04****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// org1
	OrganizationName *string `json:"OrganizationName,omitempty" xml:"OrganizationName,omitempty"`
	// example:
	//
	// Running
	ServiceState *string `json:"ServiceState,omitempty" xml:"ServiceState,omitempty"`
}

func (s DescribeCandidateOrganizationsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeCandidateOrganizationsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeCandidateOrganizationsResponseBodyResult) SetClusterState(v string) *DescribeCandidateOrganizationsResponseBodyResult {
	s.ClusterState = &v
	return s
}

func (s *DescribeCandidateOrganizationsResponseBodyResult) SetOrganizationId(v string) *DescribeCandidateOrganizationsResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeCandidateOrganizationsResponseBodyResult) SetOrganizationName(v string) *DescribeCandidateOrganizationsResponseBodyResult {
	s.OrganizationName = &v
	return s
}

func (s *DescribeCandidateOrganizationsResponseBodyResult) SetServiceState(v string) *DescribeCandidateOrganizationsResponseBodyResult {
	s.ServiceState = &v
	return s
}

type DescribeCandidateOrganizationsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCandidateOrganizationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCandidateOrganizationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCandidateOrganizationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCandidateOrganizationsResponse) SetHeaders(v map[string]*string) *DescribeCandidateOrganizationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCandidateOrganizationsResponse) SetStatusCode(v int32) *DescribeCandidateOrganizationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCandidateOrganizationsResponse) SetBody(v *DescribeCandidateOrganizationsResponseBody) *DescribeCandidateOrganizationsResponse {
	s.Body = v
	return s
}

type DescribeChaincodeCollectionConfigRequest struct {
	// This parameter is required.
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	Location    *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeChaincodeCollectionConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeCollectionConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeCollectionConfigRequest) SetChaincodeId(v string) *DescribeChaincodeCollectionConfigRequest {
	s.ChaincodeId = &v
	return s
}

func (s *DescribeChaincodeCollectionConfigRequest) SetLocation(v string) *DescribeChaincodeCollectionConfigRequest {
	s.Location = &v
	return s
}

type DescribeChaincodeCollectionConfigResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeChaincodeCollectionConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeCollectionConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeCollectionConfigResponseBody) SetErrorCode(v int32) *DescribeChaincodeCollectionConfigResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeChaincodeCollectionConfigResponseBody) SetRequestId(v string) *DescribeChaincodeCollectionConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeChaincodeCollectionConfigResponseBody) SetResult(v string) *DescribeChaincodeCollectionConfigResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeChaincodeCollectionConfigResponseBody) SetSuccess(v bool) *DescribeChaincodeCollectionConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeChaincodeCollectionConfigResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeChaincodeCollectionConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeChaincodeCollectionConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeCollectionConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeCollectionConfigResponse) SetHeaders(v map[string]*string) *DescribeChaincodeCollectionConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeChaincodeCollectionConfigResponse) SetStatusCode(v int32) *DescribeChaincodeCollectionConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeChaincodeCollectionConfigResponse) SetBody(v *DescribeChaincodeCollectionConfigResponseBody) *DescribeChaincodeCollectionConfigResponse {
	s.Body = v
	return s
}

type DescribeChaincodeDefinitionTaskRequest struct {
	// This parameter is required.
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeChaincodeDefinitionTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeDefinitionTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeDefinitionTaskRequest) SetChaincodeId(v string) *DescribeChaincodeDefinitionTaskRequest {
	s.ChaincodeId = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskRequest) SetOrganizationId(v string) *DescribeChaincodeDefinitionTaskRequest {
	s.OrganizationId = &v
	return s
}

type DescribeChaincodeDefinitionTaskResponseBody struct {
	ErrorCode *int32                                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeChaincodeDefinitionTaskResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeChaincodeDefinitionTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeDefinitionTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeDefinitionTaskResponseBody) SetErrorCode(v int32) *DescribeChaincodeDefinitionTaskResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBody) SetRequestId(v string) *DescribeChaincodeDefinitionTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBody) SetResult(v *DescribeChaincodeDefinitionTaskResponseBodyResult) *DescribeChaincodeDefinitionTaskResponseBody {
	s.Result = v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBody) SetSuccess(v bool) *DescribeChaincodeDefinitionTaskResponseBody {
	s.Success = &v
	return s
}

type DescribeChaincodeDefinitionTaskResponseBodyResult struct {
	Approvers   []*string                                                 `json:"Approvers,omitempty" xml:"Approvers,omitempty" type:"Repeated"`
	ChannelName *string                                                   `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Content     *DescribeChaincodeDefinitionTaskResponseBodyResultContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	CreateTime  *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator     *string                                                   `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string                                                   `json:"Description,omitempty" xml:"Description,omitempty"`
	Status      *string                                                   `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId      *string                                                   `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Type        *string                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeChaincodeDefinitionTaskResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeDefinitionTaskResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetApprovers(v []*string) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.Approvers = v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetChannelName(v string) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetContent(v *DescribeChaincodeDefinitionTaskResponseBodyResultContent) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.Content = v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetCreateTime(v int64) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetCreator(v string) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetDescription(v string) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetStatus(v string) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetTaskId(v string) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResult) SetType(v string) *DescribeChaincodeDefinitionTaskResponseBodyResult {
	s.Type = &v
	return s
}

type DescribeChaincodeDefinitionTaskResponseBodyResultContent struct {
	ChaincodeDefinition *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition `json:"ChaincodeDefinition,omitempty" xml:"ChaincodeDefinition,omitempty" type:"Struct"`
}

func (s DescribeChaincodeDefinitionTaskResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeDefinitionTaskResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResultContent) SetChaincodeDefinition(v *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) *DescribeChaincodeDefinitionTaskResponseBodyResultContent {
	s.ChaincodeDefinition = v
	return s
}

type DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition struct {
	ChaincodePackageId *string `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	CollectionConfig   *string `json:"CollectionConfig,omitempty" xml:"CollectionConfig,omitempty"`
	EndorsementPolicy  *string `json:"EndorsementPolicy,omitempty" xml:"EndorsementPolicy,omitempty"`
	InitRequired       *bool   `json:"InitRequired,omitempty" xml:"InitRequired,omitempty"`
	Name               *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Sequence           *int64  `json:"Sequence,omitempty" xml:"Sequence,omitempty"`
	Version            *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) SetChaincodePackageId(v string) *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition {
	s.ChaincodePackageId = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) SetCollectionConfig(v string) *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition {
	s.CollectionConfig = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) SetEndorsementPolicy(v string) *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition {
	s.EndorsementPolicy = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) SetInitRequired(v bool) *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition {
	s.InitRequired = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) SetName(v string) *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition {
	s.Name = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) SetSequence(v int64) *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition {
	s.Sequence = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition) SetVersion(v string) *DescribeChaincodeDefinitionTaskResponseBodyResultContentChaincodeDefinition {
	s.Version = &v
	return s
}

type DescribeChaincodeDefinitionTaskResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeChaincodeDefinitionTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeChaincodeDefinitionTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeDefinitionTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeDefinitionTaskResponse) SetHeaders(v map[string]*string) *DescribeChaincodeDefinitionTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponse) SetStatusCode(v int32) *DescribeChaincodeDefinitionTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeChaincodeDefinitionTaskResponse) SetBody(v *DescribeChaincodeDefinitionTaskResponseBody) *DescribeChaincodeDefinitionTaskResponse {
	s.Body = v
	return s
}

type DescribeChaincodeUploadPolicyRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa1-1oxw31d04****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeChaincodeUploadPolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeUploadPolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeUploadPolicyRequest) SetOrganizationId(v string) *DescribeChaincodeUploadPolicyRequest {
	s.OrganizationId = &v
	return s
}

type DescribeChaincodeUploadPolicyResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeChaincodeUploadPolicyResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeChaincodeUploadPolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeUploadPolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeUploadPolicyResponseBody) SetErrorCode(v int32) *DescribeChaincodeUploadPolicyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponseBody) SetRequestId(v string) *DescribeChaincodeUploadPolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponseBody) SetResult(v *DescribeChaincodeUploadPolicyResponseBodyResult) *DescribeChaincodeUploadPolicyResponseBody {
	s.Result = v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponseBody) SetSuccess(v bool) *DescribeChaincodeUploadPolicyResponseBody {
	s.Success = &v
	return s
}

type DescribeChaincodeUploadPolicyResponseBodyResult struct {
	// example:
	//
	// accessId
	AccessId *string `json:"AccessId,omitempty" xml:"AccessId,omitempty"`
	// example:
	//
	// test3/4bd1de21-2fff-4405-a8e9-f864c4bee24f
	Dir *string `json:"Dir,omitempty" xml:"Dir,omitempty"`
	// example:
	//
	// 1533025590
	Expire *int32 `json:"Expire,omitempty" xml:"Expire,omitempty"`
	// example:
	//
	// https://chaincode.oss-cn-beijing.aliyuncs.com
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// example:
	//
	// eyJleHBpcmF0aW9uIjoiMjAxOC0wNy0zMVQwODoyNjozMC40NzdaIiwiY29uZGl
	Policy *string `json:"Policy,omitempty" xml:"Policy,omitempty"`
	// example:
	//
	// signature
	Signature *string `json:"Signature,omitempty" xml:"Signature,omitempty"`
}

func (s DescribeChaincodeUploadPolicyResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeUploadPolicyResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeUploadPolicyResponseBodyResult) SetAccessId(v string) *DescribeChaincodeUploadPolicyResponseBodyResult {
	s.AccessId = &v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponseBodyResult) SetDir(v string) *DescribeChaincodeUploadPolicyResponseBodyResult {
	s.Dir = &v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponseBodyResult) SetExpire(v int32) *DescribeChaincodeUploadPolicyResponseBodyResult {
	s.Expire = &v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponseBodyResult) SetHost(v string) *DescribeChaincodeUploadPolicyResponseBodyResult {
	s.Host = &v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponseBodyResult) SetPolicy(v string) *DescribeChaincodeUploadPolicyResponseBodyResult {
	s.Policy = &v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponseBodyResult) SetSignature(v string) *DescribeChaincodeUploadPolicyResponseBodyResult {
	s.Signature = &v
	return s
}

type DescribeChaincodeUploadPolicyResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeChaincodeUploadPolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeChaincodeUploadPolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChaincodeUploadPolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeChaincodeUploadPolicyResponse) SetHeaders(v map[string]*string) *DescribeChaincodeUploadPolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponse) SetStatusCode(v int32) *DescribeChaincodeUploadPolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeChaincodeUploadPolicyResponse) SetBody(v *DescribeChaincodeUploadPolicyResponseBody) *DescribeChaincodeUploadPolicyResponse {
	s.Body = v
	return s
}

type DescribeChannelChaincodesRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeChannelChaincodesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelChaincodesRequest) GoString() string {
	return s.String()
}

func (s *DescribeChannelChaincodesRequest) SetChannelId(v string) *DescribeChannelChaincodesRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeChannelChaincodesRequest) SetOrganizationId(v string) *DescribeChannelChaincodesRequest {
	s.OrganizationId = &v
	return s
}

type DescribeChannelChaincodesResponseBody struct {
	ErrorCode *int32                                         `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeChannelChaincodesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeChannelChaincodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelChaincodesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChannelChaincodesResponseBody) SetErrorCode(v int32) *DescribeChannelChaincodesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBody) SetRequestId(v string) *DescribeChannelChaincodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBody) SetResult(v []*DescribeChannelChaincodesResponseBodyResult) *DescribeChannelChaincodesResponseBody {
	s.Result = v
	return s
}

func (s *DescribeChannelChaincodesResponseBody) SetSuccess(v bool) *DescribeChannelChaincodesResponseBody {
	s.Success = &v
	return s
}

type DescribeChannelChaincodesResponseBodyResult struct {
	Binding       *bool   `json:"Binding,omitempty" xml:"Binding,omitempty"`
	ChaincodeId   *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	ChannelId     *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName   *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ConsortiumId  *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator       *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DeployTime    *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	Installed     *string `json:"Installed,omitempty" xml:"Installed,omitempty"`
	Management    *bool   `json:"Management,omitempty" xml:"Management,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeChannelChaincodesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelChaincodesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetBinding(v bool) *DescribeChannelChaincodesResponseBodyResult {
	s.Binding = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetChaincodeId(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetChannelId(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetChannelName(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetConsortiumId(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetCreateTime(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetCreator(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetDeployTime(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetEndorsePolicy(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetInstalled(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.Installed = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetManagement(v bool) *DescribeChannelChaincodesResponseBodyResult {
	s.Management = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetMessage(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.Message = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetName(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetState(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeChannelChaincodesResponseBodyResult) SetVersion(v string) *DescribeChannelChaincodesResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeChannelChaincodesResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeChannelChaincodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeChannelChaincodesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelChaincodesResponse) GoString() string {
	return s.String()
}

func (s *DescribeChannelChaincodesResponse) SetHeaders(v map[string]*string) *DescribeChannelChaincodesResponse {
	s.Headers = v
	return s
}

func (s *DescribeChannelChaincodesResponse) SetStatusCode(v int32) *DescribeChannelChaincodesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeChannelChaincodesResponse) SetBody(v *DescribeChannelChaincodesResponseBody) *DescribeChannelChaincodesResponse {
	s.Body = v
	return s
}

type DescribeChannelMembersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// chan-channelx-1l1hmckuu****
	ChannelId      *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeChannelMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelMembersRequest) GoString() string {
	return s.String()
}

func (s *DescribeChannelMembersRequest) SetChannelId(v string) *DescribeChannelMembersRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeChannelMembersRequest) SetOrganizationId(v string) *DescribeChannelMembersRequest {
	s.OrganizationId = &v
	return s
}

type DescribeChannelMembersResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeChannelMembersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeChannelMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelMembersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChannelMembersResponseBody) SetErrorCode(v int32) *DescribeChannelMembersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeChannelMembersResponseBody) SetRequestId(v string) *DescribeChannelMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeChannelMembersResponseBody) SetResult(v []*DescribeChannelMembersResponseBodyResult) *DescribeChannelMembersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeChannelMembersResponseBody) SetSuccess(v bool) *DescribeChannelMembersResponseBody {
	s.Success = &v
	return s
}

type DescribeChannelMembersResponseBodyResult struct {
	// example:
	//
	// 1544411108000
	AcceptTime *string `json:"AcceptTime,omitempty" xml:"AcceptTime,omitempty"`
	// example:
	//
	// chan-channelx-1l1hmckuuisxo
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// hello
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// 1544411108000
	InviteTime *string `json:"InviteTime,omitempty" xml:"InviteTime,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// peers-aaaaaa1-1oxw31d046jtl
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// true
	WithPeer *bool `json:"WithPeer,omitempty" xml:"WithPeer,omitempty"`
}

func (s DescribeChannelMembersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelMembersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeChannelMembersResponseBodyResult) SetAcceptTime(v string) *DescribeChannelMembersResponseBodyResult {
	s.AcceptTime = &v
	return s
}

func (s *DescribeChannelMembersResponseBodyResult) SetChannelId(v string) *DescribeChannelMembersResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeChannelMembersResponseBodyResult) SetDescription(v string) *DescribeChannelMembersResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeChannelMembersResponseBodyResult) SetDomain(v string) *DescribeChannelMembersResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeChannelMembersResponseBodyResult) SetInviteTime(v string) *DescribeChannelMembersResponseBodyResult {
	s.InviteTime = &v
	return s
}

func (s *DescribeChannelMembersResponseBodyResult) SetName(v string) *DescribeChannelMembersResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeChannelMembersResponseBodyResult) SetOrganizationId(v string) *DescribeChannelMembersResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeChannelMembersResponseBodyResult) SetState(v string) *DescribeChannelMembersResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeChannelMembersResponseBodyResult) SetWithPeer(v bool) *DescribeChannelMembersResponseBodyResult {
	s.WithPeer = &v
	return s
}

type DescribeChannelMembersResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeChannelMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeChannelMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelMembersResponse) GoString() string {
	return s.String()
}

func (s *DescribeChannelMembersResponse) SetHeaders(v map[string]*string) *DescribeChannelMembersResponse {
	s.Headers = v
	return s
}

func (s *DescribeChannelMembersResponse) SetStatusCode(v int32) *DescribeChannelMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeChannelMembersResponse) SetBody(v *DescribeChannelMembersResponseBody) *DescribeChannelMembersResponse {
	s.Body = v
	return s
}

type DescribeChannelTriggersRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeChannelTriggersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelTriggersRequest) GoString() string {
	return s.String()
}

func (s *DescribeChannelTriggersRequest) SetChannelId(v string) *DescribeChannelTriggersRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeChannelTriggersRequest) SetOrganizationId(v string) *DescribeChannelTriggersRequest {
	s.OrganizationId = &v
	return s
}

type DescribeChannelTriggersResponseBody struct {
	ErrorCode *int32                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeChannelTriggersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeChannelTriggersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelTriggersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeChannelTriggersResponseBody) SetErrorCode(v int32) *DescribeChannelTriggersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeChannelTriggersResponseBody) SetRequestId(v string) *DescribeChannelTriggersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeChannelTriggersResponseBody) SetResult(v []*DescribeChannelTriggersResponseBodyResult) *DescribeChannelTriggersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeChannelTriggersResponseBody) SetSuccess(v bool) *DescribeChannelTriggersResponseBody {
	s.Success = &v
	return s
}

type DescribeChannelTriggersResponseBodyResult struct {
	ChannelId    *string                                              `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName  *string                                              `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Checkpoint   *DescribeChannelTriggersResponseBodyResultCheckpoint `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty" type:"Struct"`
	CreateTime   *int64                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorMessage *string                                              `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Name         *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Options      *string                                              `json:"Options,omitempty" xml:"Options,omitempty"`
	Source       *string                                              `json:"Source,omitempty" xml:"Source,omitempty"`
	Status       *int32                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	Type         *string                                              `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeChannelTriggersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelTriggersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeChannelTriggersResponseBodyResult) SetChannelId(v string) *DescribeChannelTriggersResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetChannelName(v string) *DescribeChannelTriggersResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetCheckpoint(v *DescribeChannelTriggersResponseBodyResultCheckpoint) *DescribeChannelTriggersResponseBodyResult {
	s.Checkpoint = v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetCreateTime(v int64) *DescribeChannelTriggersResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetErrorMessage(v string) *DescribeChannelTriggersResponseBodyResult {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetName(v string) *DescribeChannelTriggersResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetOptions(v string) *DescribeChannelTriggersResponseBodyResult {
	s.Options = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetSource(v string) *DescribeChannelTriggersResponseBodyResult {
	s.Source = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetStatus(v int32) *DescribeChannelTriggersResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResult) SetType(v string) *DescribeChannelTriggersResponseBodyResult {
	s.Type = &v
	return s
}

type DescribeChannelTriggersResponseBodyResultCheckpoint struct {
	ErrorCount *int64  `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	Height     *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
	Index      *int64  `json:"Index,omitempty" xml:"Index,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeChannelTriggersResponseBodyResultCheckpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelTriggersResponseBodyResultCheckpoint) GoString() string {
	return s.String()
}

func (s *DescribeChannelTriggersResponseBodyResultCheckpoint) SetErrorCount(v int64) *DescribeChannelTriggersResponseBodyResultCheckpoint {
	s.ErrorCount = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResultCheckpoint) SetHeight(v int64) *DescribeChannelTriggersResponseBodyResultCheckpoint {
	s.Height = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResultCheckpoint) SetIndex(v int64) *DescribeChannelTriggersResponseBodyResultCheckpoint {
	s.Index = &v
	return s
}

func (s *DescribeChannelTriggersResponseBodyResultCheckpoint) SetType(v string) *DescribeChannelTriggersResponseBodyResultCheckpoint {
	s.Type = &v
	return s
}

type DescribeChannelTriggersResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeChannelTriggersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeChannelTriggersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeChannelTriggersResponse) GoString() string {
	return s.String()
}

func (s *DescribeChannelTriggersResponse) SetHeaders(v map[string]*string) *DescribeChannelTriggersResponse {
	s.Headers = v
	return s
}

func (s *DescribeChannelTriggersResponse) SetStatusCode(v int32) *DescribeChannelTriggersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeChannelTriggersResponse) SetBody(v *DescribeChannelTriggersResponseBody) *DescribeChannelTriggersResponse {
	s.Body = v
	return s
}

type DescribeCloudIntegrationServiceTokenRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	Service *string `json:"Service,omitempty" xml:"Service,omitempty"`
}

func (s DescribeCloudIntegrationServiceTokenRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudIntegrationServiceTokenRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudIntegrationServiceTokenRequest) SetOrganizationId(v string) *DescribeCloudIntegrationServiceTokenRequest {
	s.OrganizationId = &v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenRequest) SetService(v string) *DescribeCloudIntegrationServiceTokenRequest {
	s.Service = &v
	return s
}

type DescribeCloudIntegrationServiceTokenResponseBody struct {
	ErrorCode *int32                                                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeCloudIntegrationServiceTokenResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudIntegrationServiceTokenResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudIntegrationServiceTokenResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudIntegrationServiceTokenResponseBody) SetErrorCode(v int32) *DescribeCloudIntegrationServiceTokenResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponseBody) SetRequestId(v string) *DescribeCloudIntegrationServiceTokenResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponseBody) SetResult(v *DescribeCloudIntegrationServiceTokenResponseBodyResult) *DescribeCloudIntegrationServiceTokenResponseBody {
	s.Result = v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponseBody) SetSuccess(v bool) *DescribeCloudIntegrationServiceTokenResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudIntegrationServiceTokenResponseBodyResult struct {
	History []*DescribeCloudIntegrationServiceTokenResponseBodyResultHistory `json:"History,omitempty" xml:"History,omitempty" type:"Repeated"`
	Service *string                                                          `json:"Service,omitempty" xml:"Service,omitempty"`
	Token   *string                                                          `json:"Token,omitempty" xml:"Token,omitempty"`
	Type    *string                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCloudIntegrationServiceTokenResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudIntegrationServiceTokenResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeCloudIntegrationServiceTokenResponseBodyResult) SetHistory(v []*DescribeCloudIntegrationServiceTokenResponseBodyResultHistory) *DescribeCloudIntegrationServiceTokenResponseBodyResult {
	s.History = v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponseBodyResult) SetService(v string) *DescribeCloudIntegrationServiceTokenResponseBodyResult {
	s.Service = &v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponseBodyResult) SetToken(v string) *DescribeCloudIntegrationServiceTokenResponseBodyResult {
	s.Token = &v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponseBodyResult) SetType(v string) *DescribeCloudIntegrationServiceTokenResponseBodyResult {
	s.Type = &v
	return s
}

type DescribeCloudIntegrationServiceTokenResponseBodyResultHistory struct {
	Service *string `json:"Service,omitempty" xml:"Service,omitempty"`
	Token   *string `json:"Token,omitempty" xml:"Token,omitempty"`
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCloudIntegrationServiceTokenResponseBodyResultHistory) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudIntegrationServiceTokenResponseBodyResultHistory) GoString() string {
	return s.String()
}

func (s *DescribeCloudIntegrationServiceTokenResponseBodyResultHistory) SetService(v string) *DescribeCloudIntegrationServiceTokenResponseBodyResultHistory {
	s.Service = &v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponseBodyResultHistory) SetToken(v string) *DescribeCloudIntegrationServiceTokenResponseBodyResultHistory {
	s.Token = &v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponseBodyResultHistory) SetType(v string) *DescribeCloudIntegrationServiceTokenResponseBodyResultHistory {
	s.Type = &v
	return s
}

type DescribeCloudIntegrationServiceTokenResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudIntegrationServiceTokenResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudIntegrationServiceTokenResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudIntegrationServiceTokenResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudIntegrationServiceTokenResponse) SetHeaders(v map[string]*string) *DescribeCloudIntegrationServiceTokenResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponse) SetStatusCode(v int32) *DescribeCloudIntegrationServiceTokenResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudIntegrationServiceTokenResponse) SetBody(v *DescribeCloudIntegrationServiceTokenResponseBody) *DescribeCloudIntegrationServiceTokenResponse {
	s.Body = v
	return s
}

type DescribeCloudServiceOrganizationStatusRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeCloudServiceOrganizationStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudServiceOrganizationStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudServiceOrganizationStatusRequest) SetOrganizationId(v string) *DescribeCloudServiceOrganizationStatusRequest {
	s.OrganizationId = &v
	return s
}

type DescribeCloudServiceOrganizationStatusResponseBody struct {
	ErrorCode *int32                                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeCloudServiceOrganizationStatusResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudServiceOrganizationStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudServiceOrganizationStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudServiceOrganizationStatusResponseBody) SetErrorCode(v int32) *DescribeCloudServiceOrganizationStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponseBody) SetRequestId(v string) *DescribeCloudServiceOrganizationStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponseBody) SetResult(v []*DescribeCloudServiceOrganizationStatusResponseBodyResult) *DescribeCloudServiceOrganizationStatusResponseBody {
	s.Result = v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponseBody) SetSuccess(v bool) *DescribeCloudServiceOrganizationStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudServiceOrganizationStatusResponseBodyResult struct {
	GrantPrivilegeUrl      *string `json:"GrantPrivilegeUrl,omitempty" xml:"GrantPrivilegeUrl,omitempty"`
	OrganizationId         *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	ServiceOpenStatus      *bool   `json:"ServiceOpenStatus,omitempty" xml:"ServiceOpenStatus,omitempty"`
	ServiceOpenUrl         *string `json:"ServiceOpenUrl,omitempty" xml:"ServiceOpenUrl,omitempty"`
	ServicePrivilegeStatus *bool   `json:"ServicePrivilegeStatus,omitempty" xml:"ServicePrivilegeStatus,omitempty"`
	ServiceType            *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
}

func (s DescribeCloudServiceOrganizationStatusResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudServiceOrganizationStatusResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeCloudServiceOrganizationStatusResponseBodyResult) SetGrantPrivilegeUrl(v string) *DescribeCloudServiceOrganizationStatusResponseBodyResult {
	s.GrantPrivilegeUrl = &v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponseBodyResult) SetOrganizationId(v string) *DescribeCloudServiceOrganizationStatusResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponseBodyResult) SetServiceOpenStatus(v bool) *DescribeCloudServiceOrganizationStatusResponseBodyResult {
	s.ServiceOpenStatus = &v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponseBodyResult) SetServiceOpenUrl(v string) *DescribeCloudServiceOrganizationStatusResponseBodyResult {
	s.ServiceOpenUrl = &v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponseBodyResult) SetServicePrivilegeStatus(v bool) *DescribeCloudServiceOrganizationStatusResponseBodyResult {
	s.ServicePrivilegeStatus = &v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponseBodyResult) SetServiceType(v string) *DescribeCloudServiceOrganizationStatusResponseBodyResult {
	s.ServiceType = &v
	return s
}

type DescribeCloudServiceOrganizationStatusResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudServiceOrganizationStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudServiceOrganizationStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudServiceOrganizationStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudServiceOrganizationStatusResponse) SetHeaders(v map[string]*string) *DescribeCloudServiceOrganizationStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponse) SetStatusCode(v int32) *DescribeCloudServiceOrganizationStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudServiceOrganizationStatusResponse) SetBody(v *DescribeCloudServiceOrganizationStatusResponseBody) *DescribeCloudServiceOrganizationStatusResponse {
	s.Body = v
	return s
}

type DescribeCloudServiceTypeStatusRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	ServiceType *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
}

func (s DescribeCloudServiceTypeStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudServiceTypeStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudServiceTypeStatusRequest) SetOrganizationId(v string) *DescribeCloudServiceTypeStatusRequest {
	s.OrganizationId = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusRequest) SetServiceType(v string) *DescribeCloudServiceTypeStatusRequest {
	s.ServiceType = &v
	return s
}

type DescribeCloudServiceTypeStatusResponseBody struct {
	ErrorCode *int32                                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeCloudServiceTypeStatusResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudServiceTypeStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudServiceTypeStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudServiceTypeStatusResponseBody) SetErrorCode(v int32) *DescribeCloudServiceTypeStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponseBody) SetRequestId(v string) *DescribeCloudServiceTypeStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponseBody) SetResult(v *DescribeCloudServiceTypeStatusResponseBodyResult) *DescribeCloudServiceTypeStatusResponseBody {
	s.Result = v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponseBody) SetSuccess(v bool) *DescribeCloudServiceTypeStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudServiceTypeStatusResponseBodyResult struct {
	GrantPrivilegeUrl      *string `json:"GrantPrivilegeUrl,omitempty" xml:"GrantPrivilegeUrl,omitempty"`
	OrganizationId         *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	ServiceOpenStatus      *bool   `json:"ServiceOpenStatus,omitempty" xml:"ServiceOpenStatus,omitempty"`
	ServiceOpenUrl         *string `json:"ServiceOpenUrl,omitempty" xml:"ServiceOpenUrl,omitempty"`
	ServicePrivilegeStatus *bool   `json:"ServicePrivilegeStatus,omitempty" xml:"ServicePrivilegeStatus,omitempty"`
	ServiceType            *string `json:"ServiceType,omitempty" xml:"ServiceType,omitempty"`
}

func (s DescribeCloudServiceTypeStatusResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudServiceTypeStatusResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeCloudServiceTypeStatusResponseBodyResult) SetGrantPrivilegeUrl(v string) *DescribeCloudServiceTypeStatusResponseBodyResult {
	s.GrantPrivilegeUrl = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponseBodyResult) SetOrganizationId(v string) *DescribeCloudServiceTypeStatusResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponseBodyResult) SetServiceOpenStatus(v bool) *DescribeCloudServiceTypeStatusResponseBodyResult {
	s.ServiceOpenStatus = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponseBodyResult) SetServiceOpenUrl(v string) *DescribeCloudServiceTypeStatusResponseBodyResult {
	s.ServiceOpenUrl = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponseBodyResult) SetServicePrivilegeStatus(v bool) *DescribeCloudServiceTypeStatusResponseBodyResult {
	s.ServicePrivilegeStatus = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponseBodyResult) SetServiceType(v string) *DescribeCloudServiceTypeStatusResponseBodyResult {
	s.ServiceType = &v
	return s
}

type DescribeCloudServiceTypeStatusResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeCloudServiceTypeStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeCloudServiceTypeStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudServiceTypeStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudServiceTypeStatusResponse) SetHeaders(v map[string]*string) *DescribeCloudServiceTypeStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponse) SetStatusCode(v int32) *DescribeCloudServiceTypeStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudServiceTypeStatusResponse) SetBody(v *DescribeCloudServiceTypeStatusResponseBody) *DescribeCloudServiceTypeStatusResponse {
	s.Body = v
	return s
}

type DescribeConsortiumAdminStatusRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeConsortiumAdminStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumAdminStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumAdminStatusRequest) SetLocation(v string) *DescribeConsortiumAdminStatusRequest {
	s.Location = &v
	return s
}

type DescribeConsortiumAdminStatusResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeConsortiumAdminStatusResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumAdminStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumAdminStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumAdminStatusResponseBody) SetErrorCode(v int32) *DescribeConsortiumAdminStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumAdminStatusResponseBody) SetRequestId(v string) *DescribeConsortiumAdminStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumAdminStatusResponseBody) SetResult(v []*DescribeConsortiumAdminStatusResponseBodyResult) *DescribeConsortiumAdminStatusResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumAdminStatusResponseBody) SetSuccess(v bool) *DescribeConsortiumAdminStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumAdminStatusResponseBodyResult struct {
	// example:
	//
	// true
	ConsortiumAdministrator *bool `json:"ConsortiumAdministrator,omitempty" xml:"ConsortiumAdministrator,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeConsortiumAdminStatusResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumAdminStatusResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumAdminStatusResponseBodyResult) SetConsortiumAdministrator(v bool) *DescribeConsortiumAdminStatusResponseBodyResult {
	s.ConsortiumAdministrator = &v
	return s
}

func (s *DescribeConsortiumAdminStatusResponseBodyResult) SetConsortiumId(v string) *DescribeConsortiumAdminStatusResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

type DescribeConsortiumAdminStatusResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumAdminStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumAdminStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumAdminStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumAdminStatusResponse) SetHeaders(v map[string]*string) *DescribeConsortiumAdminStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumAdminStatusResponse) SetStatusCode(v int32) *DescribeConsortiumAdminStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumAdminStatusResponse) SetBody(v *DescribeConsortiumAdminStatusResponseBody) *DescribeConsortiumAdminStatusResponse {
	s.Body = v
	return s
}

type DescribeConsortiumChaincodesRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeConsortiumChaincodesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumChaincodesRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumChaincodesRequest) SetConsortiumId(v string) *DescribeConsortiumChaincodesRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumChaincodesRequest) SetLocation(v string) *DescribeConsortiumChaincodesRequest {
	s.Location = &v
	return s
}

type DescribeConsortiumChaincodesResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeConsortiumChaincodesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumChaincodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumChaincodesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumChaincodesResponseBody) SetErrorCode(v int32) *DescribeConsortiumChaincodesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBody) SetRequestId(v string) *DescribeConsortiumChaincodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBody) SetResult(v []*DescribeConsortiumChaincodesResponseBodyResult) *DescribeConsortiumChaincodesResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBody) SetSuccess(v bool) *DescribeConsortiumChaincodesResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumChaincodesResponseBodyResult struct {
	// example:
	//
	// code-sacc-1pr09q7jmo0np
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// chan-channelx-1l1hmckuuisxo
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// cname
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1544411108000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1544411108000
	DeployTime *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	// example:
	//
	// OR (\\"aaaaaa1MSP.peer\\")
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// input
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// true
	Install    *bool `json:"Install,omitempty" xml:"Install,omitempty"`
	Management *bool `json:"Management,omitempty" xml:"Management,omitempty"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// sacc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// go-sdk-demo/chaincode/src
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	ProviderId *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	// example:
	//
	// name
	ProviderName *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	// example:
	//
	// Instantiatable
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeConsortiumChaincodesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumChaincodesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetChaincodeId(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetChannelId(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetChannelName(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetConsortiumId(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetCreateTime(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetDeployTime(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetEndorsePolicy(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetInput(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.Input = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetInstall(v bool) *DescribeConsortiumChaincodesResponseBodyResult {
	s.Install = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetManagement(v bool) *DescribeConsortiumChaincodesResponseBodyResult {
	s.Management = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetMessage(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.Message = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetName(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetPath(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.Path = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetProviderId(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetProviderName(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetState(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetType(v int32) *DescribeConsortiumChaincodesResponseBodyResult {
	s.Type = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponseBodyResult) SetVersion(v string) *DescribeConsortiumChaincodesResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeConsortiumChaincodesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumChaincodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumChaincodesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumChaincodesResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumChaincodesResponse) SetHeaders(v map[string]*string) *DescribeConsortiumChaincodesResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumChaincodesResponse) SetStatusCode(v int32) *DescribeConsortiumChaincodesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumChaincodesResponse) SetBody(v *DescribeConsortiumChaincodesResponseBody) *DescribeConsortiumChaincodesResponse {
	s.Body = v
	return s
}

type DescribeConsortiumChannelsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeConsortiumChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumChannelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumChannelsRequest) SetConsortiumId(v string) *DescribeConsortiumChannelsRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumChannelsRequest) SetLocation(v string) *DescribeConsortiumChannelsRequest {
	s.Location = &v
	return s
}

type DescribeConsortiumChannelsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeConsortiumChannelsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumChannelsResponseBody) SetErrorCode(v int32) *DescribeConsortiumChannelsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBody) SetRequestId(v string) *DescribeConsortiumChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBody) SetResult(v []*DescribeConsortiumChannelsResponseBodyResult) *DescribeConsortiumChannelsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumChannelsResponseBody) SetSuccess(v bool) *DescribeConsortiumChannelsResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumChannelsResponseBodyResult struct {
	// example:
	//
	// 2
	BatchTimeout *int32 `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	// example:
	//
	// 2
	BlockCount *int32 `json:"BlockCount,omitempty" xml:"BlockCount,omitempty"`
	// example:
	//
	// 2
	ChaincodeCount *int32 `json:"ChaincodeCount,omitempty" xml:"ChaincodeCount,omitempty"`
	// example:
	//
	// chan-channelx-1l1hmckuuisxo
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// name
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	// example:
	//
	// 1544411108000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1544411108000
	DeleteTime *string `json:"DeleteTime,omitempty" xml:"DeleteTime,omitempty"`
	// example:
	//
	// true
	Deleted *bool `json:"Deleted,omitempty" xml:"Deleted,omitempty"`
	Hybird  *bool `json:"Hybird,omitempty" xml:"Hybird,omitempty"`
	// Id
	//
	// example:
	//
	// 2
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 2
	MaxMessageCount *int32 `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	// example:
	//
	// 2
	MemberCount *int32 `json:"MemberCount,omitempty" xml:"MemberCount,omitempty"`
	// example:
	//
	// 3
	MemberJoinedCount *string `json:"MemberJoinedCount,omitempty" xml:"MemberJoinedCount,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// true
	NeedJoined *bool `json:"NeedJoined,omitempty" xml:"NeedJoined,omitempty"`
	// example:
	//
	// 26842
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// uid-*
	OwnerName *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	// example:
	//
	// 212
	OwnerUid *int32 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// 2
	PreferredMaxBytes *int32 `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// true
	SupportChannelConfig *bool `json:"SupportChannelConfig,omitempty" xml:"SupportChannelConfig,omitempty"`
	// example:
	//
	// 1544411108000
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeConsortiumChannelsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumChannelsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetBatchTimeout(v int32) *DescribeConsortiumChannelsResponseBodyResult {
	s.BatchTimeout = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetBlockCount(v int32) *DescribeConsortiumChannelsResponseBodyResult {
	s.BlockCount = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetChaincodeCount(v int32) *DescribeConsortiumChannelsResponseBodyResult {
	s.ChaincodeCount = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetChannelId(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetConsortiumId(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetConsortiumName(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.ConsortiumName = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetCreateTime(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetDeleteTime(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.DeleteTime = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetDeleted(v bool) *DescribeConsortiumChannelsResponseBodyResult {
	s.Deleted = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetHybird(v bool) *DescribeConsortiumChannelsResponseBodyResult {
	s.Hybird = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetId(v int32) *DescribeConsortiumChannelsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetMaxMessageCount(v int32) *DescribeConsortiumChannelsResponseBodyResult {
	s.MaxMessageCount = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetMemberCount(v int32) *DescribeConsortiumChannelsResponseBodyResult {
	s.MemberCount = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetMemberJoinedCount(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.MemberJoinedCount = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetName(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetNeedJoined(v bool) *DescribeConsortiumChannelsResponseBodyResult {
	s.NeedJoined = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetOwnerBid(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetOwnerName(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.OwnerName = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetOwnerUid(v int32) *DescribeConsortiumChannelsResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetPreferredMaxBytes(v int32) *DescribeConsortiumChannelsResponseBodyResult {
	s.PreferredMaxBytes = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetRequestId(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetState(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetSupportChannelConfig(v bool) *DescribeConsortiumChannelsResponseBodyResult {
	s.SupportChannelConfig = &v
	return s
}

func (s *DescribeConsortiumChannelsResponseBodyResult) SetUpdateTime(v string) *DescribeConsortiumChannelsResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type DescribeConsortiumChannelsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumChannelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumChannelsResponse) SetHeaders(v map[string]*string) *DescribeConsortiumChannelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumChannelsResponse) SetStatusCode(v int32) *DescribeConsortiumChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumChannelsResponse) SetBody(v *DescribeConsortiumChannelsResponseBody) *DescribeConsortiumChannelsResponse {
	s.Body = v
	return s
}

type DescribeConsortiumConfigResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeConsortiumConfigResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumConfigResponseBody) SetErrorCode(v int32) *DescribeConsortiumConfigResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumConfigResponseBody) SetRequestId(v string) *DescribeConsortiumConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumConfigResponseBody) SetResult(v *DescribeConsortiumConfigResponseBodyResult) *DescribeConsortiumConfigResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumConfigResponseBody) SetSuccess(v bool) *DescribeConsortiumConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumConfigResponseBodyResult struct {
	ChannelPolicy []*string `json:"ChannelPolicy,omitempty" xml:"ChannelPolicy,omitempty" type:"Repeated"`
	OrdererType   []*string `json:"OrdererType,omitempty" xml:"OrdererType,omitempty" type:"Repeated"`
}

func (s DescribeConsortiumConfigResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumConfigResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumConfigResponseBodyResult) SetChannelPolicy(v []*string) *DescribeConsortiumConfigResponseBodyResult {
	s.ChannelPolicy = v
	return s
}

func (s *DescribeConsortiumConfigResponseBodyResult) SetOrdererType(v []*string) *DescribeConsortiumConfigResponseBodyResult {
	s.OrdererType = v
	return s
}

type DescribeConsortiumConfigResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumConfigResponse) SetHeaders(v map[string]*string) *DescribeConsortiumConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumConfigResponse) SetStatusCode(v int32) *DescribeConsortiumConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumConfigResponse) SetBody(v *DescribeConsortiumConfigResponseBody) *DescribeConsortiumConfigResponse {
	s.Body = v
	return s
}

type DescribeConsortiumDeletableRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeConsortiumDeletableRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumDeletableRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumDeletableRequest) SetConsortiumId(v string) *DescribeConsortiumDeletableRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumDeletableRequest) SetLocation(v string) *DescribeConsortiumDeletableRequest {
	s.Location = &v
	return s
}

type DescribeConsortiumDeletableResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeConsortiumDeletableResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumDeletableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumDeletableResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumDeletableResponseBody) SetErrorCode(v int32) *DescribeConsortiumDeletableResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBody) SetRequestId(v string) *DescribeConsortiumDeletableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBody) SetResult(v *DescribeConsortiumDeletableResponseBodyResult) *DescribeConsortiumDeletableResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumDeletableResponseBody) SetSuccess(v bool) *DescribeConsortiumDeletableResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumDeletableResponseBodyResult struct {
	// example:
	//
	// codename
	CodeName *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// true
	Deletable *bool `json:"Deletable,omitempty" xml:"Deletable,omitempty"`
	// example:
	//
	// description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// zone
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeConsortiumDeletableResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumDeletableResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetCodeName(v string) *DescribeConsortiumDeletableResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetConsortiumId(v string) *DescribeConsortiumDeletableResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetDeletable(v bool) *DescribeConsortiumDeletableResponseBodyResult {
	s.Deletable = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetDescription(v string) *DescribeConsortiumDeletableResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetDomain(v string) *DescribeConsortiumDeletableResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetName(v string) *DescribeConsortiumDeletableResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetRegionId(v string) *DescribeConsortiumDeletableResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetState(v string) *DescribeConsortiumDeletableResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeConsortiumDeletableResponseBodyResult) SetZoneId(v string) *DescribeConsortiumDeletableResponseBodyResult {
	s.ZoneId = &v
	return s
}

type DescribeConsortiumDeletableResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumDeletableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumDeletableResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumDeletableResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumDeletableResponse) SetHeaders(v map[string]*string) *DescribeConsortiumDeletableResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumDeletableResponse) SetStatusCode(v int32) *DescribeConsortiumDeletableResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumDeletableResponse) SetBody(v *DescribeConsortiumDeletableResponseBody) *DescribeConsortiumDeletableResponse {
	s.Body = v
	return s
}

type DescribeConsortiumMemberApprovalRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeConsortiumMemberApprovalRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumMemberApprovalRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumMemberApprovalRequest) SetConsortiumId(v string) *DescribeConsortiumMemberApprovalRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalRequest) SetLocation(v string) *DescribeConsortiumMemberApprovalRequest {
	s.Location = &v
	return s
}

type DescribeConsortiumMemberApprovalResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeConsortiumMemberApprovalResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumMemberApprovalResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumMemberApprovalResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumMemberApprovalResponseBody) SetErrorCode(v int32) *DescribeConsortiumMemberApprovalResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBody) SetRequestId(v string) *DescribeConsortiumMemberApprovalResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBody) SetResult(v []*DescribeConsortiumMemberApprovalResponseBodyResult) *DescribeConsortiumMemberApprovalResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBody) SetSuccess(v bool) *DescribeConsortiumMemberApprovalResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumMemberApprovalResponseBodyResult struct {
	// example:
	//
	// Any
	ChannelCreatePolicy *string `json:"ChannelCreatePolicy,omitempty" xml:"ChannelCreatePolicy,omitempty"`
	// example:
	//
	// 1544411108000
	ConfirmTime *string `json:"ConfirmTime,omitempty" xml:"ConfirmTime,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// name
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	// example:
	//
	// domain
	DomainName *string `json:"DomainName,omitempty" xml:"DomainName,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// orgname
	OrganizationName *string `json:"OrganizationName,omitempty" xml:"OrganizationName,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeConsortiumMemberApprovalResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumMemberApprovalResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumMemberApprovalResponseBodyResult) SetChannelCreatePolicy(v string) *DescribeConsortiumMemberApprovalResponseBodyResult {
	s.ChannelCreatePolicy = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBodyResult) SetConfirmTime(v string) *DescribeConsortiumMemberApprovalResponseBodyResult {
	s.ConfirmTime = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBodyResult) SetConsortiumId(v string) *DescribeConsortiumMemberApprovalResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBodyResult) SetConsortiumName(v string) *DescribeConsortiumMemberApprovalResponseBodyResult {
	s.ConsortiumName = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBodyResult) SetDomainName(v string) *DescribeConsortiumMemberApprovalResponseBodyResult {
	s.DomainName = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBodyResult) SetOrganizationId(v string) *DescribeConsortiumMemberApprovalResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBodyResult) SetOrganizationName(v string) *DescribeConsortiumMemberApprovalResponseBodyResult {
	s.OrganizationName = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponseBodyResult) SetState(v string) *DescribeConsortiumMemberApprovalResponseBodyResult {
	s.State = &v
	return s
}

type DescribeConsortiumMemberApprovalResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumMemberApprovalResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumMemberApprovalResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumMemberApprovalResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumMemberApprovalResponse) SetHeaders(v map[string]*string) *DescribeConsortiumMemberApprovalResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponse) SetStatusCode(v int32) *DescribeConsortiumMemberApprovalResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumMemberApprovalResponse) SetBody(v *DescribeConsortiumMemberApprovalResponseBody) *DescribeConsortiumMemberApprovalResponse {
	s.Body = v
	return s
}

type DescribeConsortiumMembersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeConsortiumMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumMembersRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumMembersRequest) SetConsortiumId(v string) *DescribeConsortiumMembersRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumMembersRequest) SetLocation(v string) *DescribeConsortiumMembersRequest {
	s.Location = &v
	return s
}

type DescribeConsortiumMembersResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeConsortiumMembersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumMembersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumMembersResponseBody) SetErrorCode(v int32) *DescribeConsortiumMembersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumMembersResponseBody) SetRequestId(v string) *DescribeConsortiumMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumMembersResponseBody) SetResult(v []*DescribeConsortiumMembersResponseBodyResult) *DescribeConsortiumMembersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumMembersResponseBody) SetSuccess(v bool) *DescribeConsortiumMembersResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumMembersResponseBodyResult struct {
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// 1544411108000
	JoinedTime *string `json:"JoinedTime,omitempty" xml:"JoinedTime,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeConsortiumMembersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumMembersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumMembersResponseBodyResult) SetConsortiumId(v string) *DescribeConsortiumMembersResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumMembersResponseBodyResult) SetDescription(v string) *DescribeConsortiumMembersResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeConsortiumMembersResponseBodyResult) SetDomain(v string) *DescribeConsortiumMembersResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeConsortiumMembersResponseBodyResult) SetJoinedTime(v string) *DescribeConsortiumMembersResponseBodyResult {
	s.JoinedTime = &v
	return s
}

func (s *DescribeConsortiumMembersResponseBodyResult) SetName(v string) *DescribeConsortiumMembersResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeConsortiumMembersResponseBodyResult) SetOrganizationId(v string) *DescribeConsortiumMembersResponseBodyResult {
	s.OrganizationId = &v
	return s
}

type DescribeConsortiumMembersResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumMembersResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumMembersResponse) SetHeaders(v map[string]*string) *DescribeConsortiumMembersResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumMembersResponse) SetStatusCode(v int32) *DescribeConsortiumMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumMembersResponse) SetBody(v *DescribeConsortiumMembersResponseBody) *DescribeConsortiumMembersResponse {
	s.Body = v
	return s
}

type DescribeConsortiumOrderersRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// DescribeConsortiumOrderers
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s DescribeConsortiumOrderersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumOrderersRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumOrderersRequest) SetConsortiumId(v string) *DescribeConsortiumOrderersRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumOrderersRequest) SetLocation(v string) *DescribeConsortiumOrderersRequest {
	s.Location = &v
	return s
}

type DescribeConsortiumOrderersResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeConsortiumOrderersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumOrderersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumOrderersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumOrderersResponseBody) SetErrorCode(v int32) *DescribeConsortiumOrderersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumOrderersResponseBody) SetRequestId(v string) *DescribeConsortiumOrderersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumOrderersResponseBody) SetResult(v []*DescribeConsortiumOrderersResponseBodyResult) *DescribeConsortiumOrderersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumOrderersResponseBody) SetSuccess(v bool) *DescribeConsortiumOrderersResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumOrderersResponseBodyResult struct {
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// ecs.n1.small
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// order1
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 7050
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// 1544411108000
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeConsortiumOrderersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumOrderersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumOrderersResponseBodyResult) SetCreateTime(v string) *DescribeConsortiumOrderersResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeConsortiumOrderersResponseBodyResult) SetDomain(v string) *DescribeConsortiumOrderersResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeConsortiumOrderersResponseBodyResult) SetInstanceType(v string) *DescribeConsortiumOrderersResponseBodyResult {
	s.InstanceType = &v
	return s
}

func (s *DescribeConsortiumOrderersResponseBodyResult) SetName(v string) *DescribeConsortiumOrderersResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeConsortiumOrderersResponseBodyResult) SetPort(v int32) *DescribeConsortiumOrderersResponseBodyResult {
	s.Port = &v
	return s
}

func (s *DescribeConsortiumOrderersResponseBodyResult) SetUpdateTime(v string) *DescribeConsortiumOrderersResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type DescribeConsortiumOrderersResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumOrderersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumOrderersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumOrderersResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumOrderersResponse) SetHeaders(v map[string]*string) *DescribeConsortiumOrderersResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumOrderersResponse) SetStatusCode(v int32) *DescribeConsortiumOrderersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumOrderersResponse) SetBody(v *DescribeConsortiumOrderersResponseBody) *DescribeConsortiumOrderersResponse {
	s.Body = v
	return s
}

type DescribeConsortiumSpecsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeConsortiumSpecsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumSpecsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumSpecsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumSpecsResponseBody) SetErrorCode(v int32) *DescribeConsortiumSpecsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumSpecsResponseBody) SetRequestId(v string) *DescribeConsortiumSpecsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumSpecsResponseBody) SetResult(v []*DescribeConsortiumSpecsResponseBodyResult) *DescribeConsortiumSpecsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumSpecsResponseBody) SetSuccess(v bool) *DescribeConsortiumSpecsResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumSpecsResponseBodyResult struct {
	// example:
	//
	// true
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// example:
	//
	// basic
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeConsortiumSpecsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumSpecsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumSpecsResponseBodyResult) SetEnable(v bool) *DescribeConsortiumSpecsResponseBodyResult {
	s.Enable = &v
	return s
}

func (s *DescribeConsortiumSpecsResponseBodyResult) SetName(v string) *DescribeConsortiumSpecsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeConsortiumSpecsResponseBodyResult) SetTitle(v string) *DescribeConsortiumSpecsResponseBodyResult {
	s.Title = &v
	return s
}

type DescribeConsortiumSpecsResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumSpecsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumSpecsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumSpecsResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumSpecsResponse) SetHeaders(v map[string]*string) *DescribeConsortiumSpecsResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumSpecsResponse) SetStatusCode(v int32) *DescribeConsortiumSpecsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumSpecsResponse) SetBody(v *DescribeConsortiumSpecsResponseBody) *DescribeConsortiumSpecsResponse {
	s.Body = v
	return s
}

type DescribeConsortiumsRequest struct {
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string                          `json:"Location,omitempty" xml:"Location,omitempty"`
	Tag      []*DescribeConsortiumsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeConsortiumsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumsRequest) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumsRequest) SetConsortiumId(v string) *DescribeConsortiumsRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumsRequest) SetLocation(v string) *DescribeConsortiumsRequest {
	s.Location = &v
	return s
}

func (s *DescribeConsortiumsRequest) SetTag(v []*DescribeConsortiumsRequestTag) *DescribeConsortiumsRequest {
	s.Tag = v
	return s
}

type DescribeConsortiumsRequestTag struct {
	// This parameter is required.
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeConsortiumsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumsRequestTag) SetKey(v string) *DescribeConsortiumsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeConsortiumsRequestTag) SetValue(v string) *DescribeConsortiumsRequestTag {
	s.Value = &v
	return s
}

type DescribeConsortiumsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeConsortiumsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeConsortiumsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumsResponseBody) SetErrorCode(v int32) *DescribeConsortiumsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeConsortiumsResponseBody) SetRequestId(v string) *DescribeConsortiumsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumsResponseBody) SetResult(v []*DescribeConsortiumsResponseBodyResult) *DescribeConsortiumsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeConsortiumsResponseBody) SetSuccess(v bool) *DescribeConsortiumsResponseBody {
	s.Success = &v
	return s
}

type DescribeConsortiumsResponseBodyResult struct {
	CAName *string `json:"CAName,omitempty" xml:"CAName,omitempty"`
	CAUrl  *string `json:"CAUrl,omitempty" xml:"CAUrl,omitempty"`
	// example:
	//
	// 2
	ChannelCount *int32 `json:"ChannelCount,omitempty" xml:"ChannelCount,omitempty"`
	// example:
	//
	// any
	ChannelPolicy *string `json:"ChannelPolicy,omitempty" xml:"ChannelPolicy,omitempty"`
	// example:
	//
	// code
	CodeName *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1544411108000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// domain
	Domain      *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	ExpireState *string `json:"ExpireState,omitempty" xml:"ExpireState,omitempty"`
	// example:
	//
	// 1544411108000
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// example:
	//
	// true
	Hybrid       *bool   `json:"Hybrid,omitempty" xml:"Hybrid,omitempty"`
	MSP          *string `json:"MSP,omitempty" xml:"MSP,omitempty"`
	MajorVersion *string `json:"MajorVersion,omitempty" xml:"MajorVersion,omitempty"`
	// example:
	//
	// name
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OrdererCount *int32  `json:"OrdererCount,omitempty" xml:"OrdererCount,omitempty"`
	// example:
	//
	// 2
	OrganizationCount *int32 `json:"OrganizationCount,omitempty" xml:"OrganizationCount,omitempty"`
	// example:
	//
	// 26842
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// ownername
	OwnerName *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	// example:
	//
	// 1287126
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// basic
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// example:
	//
	// Pending
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// true
	SupportChannelConfig *bool                                        `json:"SupportChannelConfig,omitempty" xml:"SupportChannelConfig,omitempty"`
	Tags                 []*DescribeConsortiumsResponseBodyResultTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
}

func (s DescribeConsortiumsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumsResponseBodyResult) SetCAName(v string) *DescribeConsortiumsResponseBodyResult {
	s.CAName = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetCAUrl(v string) *DescribeConsortiumsResponseBodyResult {
	s.CAUrl = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetChannelCount(v int32) *DescribeConsortiumsResponseBodyResult {
	s.ChannelCount = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetChannelPolicy(v string) *DescribeConsortiumsResponseBodyResult {
	s.ChannelPolicy = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetCodeName(v string) *DescribeConsortiumsResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetConsortiumId(v string) *DescribeConsortiumsResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetCreateTime(v string) *DescribeConsortiumsResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetDomain(v string) *DescribeConsortiumsResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetExpireState(v string) *DescribeConsortiumsResponseBodyResult {
	s.ExpireState = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetExpiredTime(v string) *DescribeConsortiumsResponseBodyResult {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetHybrid(v bool) *DescribeConsortiumsResponseBodyResult {
	s.Hybrid = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetMSP(v string) *DescribeConsortiumsResponseBodyResult {
	s.MSP = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetMajorVersion(v string) *DescribeConsortiumsResponseBodyResult {
	s.MajorVersion = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetName(v string) *DescribeConsortiumsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetOrdererCount(v int32) *DescribeConsortiumsResponseBodyResult {
	s.OrdererCount = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetOrganizationCount(v int32) *DescribeConsortiumsResponseBodyResult {
	s.OrganizationCount = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetOwnerBid(v string) *DescribeConsortiumsResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetOwnerName(v string) *DescribeConsortiumsResponseBodyResult {
	s.OwnerName = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetOwnerUid(v int64) *DescribeConsortiumsResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetRegionId(v string) *DescribeConsortiumsResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetRequestId(v string) *DescribeConsortiumsResponseBodyResult {
	s.RequestId = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetSpecName(v string) *DescribeConsortiumsResponseBodyResult {
	s.SpecName = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetState(v string) *DescribeConsortiumsResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetSupportChannelConfig(v bool) *DescribeConsortiumsResponseBodyResult {
	s.SupportChannelConfig = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResult) SetTags(v []*DescribeConsortiumsResponseBodyResultTags) *DescribeConsortiumsResponseBodyResult {
	s.Tags = v
	return s
}

type DescribeConsortiumsResponseBodyResultTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeConsortiumsResponseBodyResultTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumsResponseBodyResultTags) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumsResponseBodyResultTags) SetKey(v string) *DescribeConsortiumsResponseBodyResultTags {
	s.Key = &v
	return s
}

func (s *DescribeConsortiumsResponseBodyResultTags) SetValue(v string) *DescribeConsortiumsResponseBodyResultTags {
	s.Value = &v
	return s
}

type DescribeConsortiumsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeConsortiumsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeConsortiumsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeConsortiumsResponse) GoString() string {
	return s.String()
}

func (s *DescribeConsortiumsResponse) SetHeaders(v map[string]*string) *DescribeConsortiumsResponse {
	s.Headers = v
	return s
}

func (s *DescribeConsortiumsResponse) SetStatusCode(v int32) *DescribeConsortiumsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeConsortiumsResponse) SetBody(v *DescribeConsortiumsResponseBody) *DescribeConsortiumsResponse {
	s.Body = v
	return s
}

type DescribeDownloadPathsRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeDownloadPathsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsRequest) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsRequest) SetBizid(v string) *DescribeDownloadPathsRequest {
	s.Bizid = &v
	return s
}

type DescribeDownloadPathsResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeDownloadPathsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeDownloadPathsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsResponseBody) SetRequestId(v string) *DescribeDownloadPathsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDownloadPathsResponseBody) SetResult(v *DescribeDownloadPathsResponseBodyResult) *DescribeDownloadPathsResponseBody {
	s.Result = v
	return s
}

type DescribeDownloadPathsResponseBodyResult struct {
	BizviewUrl *string `json:"BizviewUrl,omitempty" xml:"BizviewUrl,omitempty"`
	CertUrl    *string `json:"CertUrl,omitempty" xml:"CertUrl,omitempty"`
	SdkUrl     *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
}

func (s DescribeDownloadPathsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsResponseBodyResult) SetBizviewUrl(v string) *DescribeDownloadPathsResponseBodyResult {
	s.BizviewUrl = &v
	return s
}

func (s *DescribeDownloadPathsResponseBodyResult) SetCertUrl(v string) *DescribeDownloadPathsResponseBodyResult {
	s.CertUrl = &v
	return s
}

func (s *DescribeDownloadPathsResponseBodyResult) SetSdkUrl(v string) *DescribeDownloadPathsResponseBodyResult {
	s.SdkUrl = &v
	return s
}

type DescribeDownloadPathsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDownloadPathsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDownloadPathsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsResponse) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsResponse) SetHeaders(v map[string]*string) *DescribeDownloadPathsResponse {
	s.Headers = v
	return s
}

func (s *DescribeDownloadPathsResponse) SetStatusCode(v int32) *DescribeDownloadPathsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDownloadPathsResponse) SetBody(v *DescribeDownloadPathsResponseBody) *DescribeDownloadPathsResponse {
	s.Body = v
	return s
}

type DescribeDownloadPathsOfContractChainRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeDownloadPathsOfContractChainRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsOfContractChainRequest) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsOfContractChainRequest) SetBizid(v string) *DescribeDownloadPathsOfContractChainRequest {
	s.Bizid = &v
	return s
}

type DescribeDownloadPathsOfContractChainResponseBody struct {
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeDownloadPathsOfContractChainResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeDownloadPathsOfContractChainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsOfContractChainResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsOfContractChainResponseBody) SetRequestId(v string) *DescribeDownloadPathsOfContractChainResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDownloadPathsOfContractChainResponseBody) SetResult(v *DescribeDownloadPathsOfContractChainResponseBodyResult) *DescribeDownloadPathsOfContractChainResponseBody {
	s.Result = v
	return s
}

type DescribeDownloadPathsOfContractChainResponseBodyResult struct {
	CaUrl      *string `json:"CaUrl,omitempty" xml:"CaUrl,omitempty"`
	CertUrl    *string `json:"CertUrl,omitempty" xml:"CertUrl,omitempty"`
	TrustCaUrl *string `json:"TrustCaUrl,omitempty" xml:"TrustCaUrl,omitempty"`
}

func (s DescribeDownloadPathsOfContractChainResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsOfContractChainResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsOfContractChainResponseBodyResult) SetCaUrl(v string) *DescribeDownloadPathsOfContractChainResponseBodyResult {
	s.CaUrl = &v
	return s
}

func (s *DescribeDownloadPathsOfContractChainResponseBodyResult) SetCertUrl(v string) *DescribeDownloadPathsOfContractChainResponseBodyResult {
	s.CertUrl = &v
	return s
}

func (s *DescribeDownloadPathsOfContractChainResponseBodyResult) SetTrustCaUrl(v string) *DescribeDownloadPathsOfContractChainResponseBodyResult {
	s.TrustCaUrl = &v
	return s
}

type DescribeDownloadPathsOfContractChainResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDownloadPathsOfContractChainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDownloadPathsOfContractChainResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsOfContractChainResponse) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsOfContractChainResponse) SetHeaders(v map[string]*string) *DescribeDownloadPathsOfContractChainResponse {
	s.Headers = v
	return s
}

func (s *DescribeDownloadPathsOfContractChainResponse) SetStatusCode(v int32) *DescribeDownloadPathsOfContractChainResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDownloadPathsOfContractChainResponse) SetBody(v *DescribeDownloadPathsOfContractChainResponseBody) *DescribeDownloadPathsOfContractChainResponse {
	s.Body = v
	return s
}

type DescribeDownloadPathsOfNotaryChainRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeDownloadPathsOfNotaryChainRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsOfNotaryChainRequest) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsOfNotaryChainRequest) SetBizid(v string) *DescribeDownloadPathsOfNotaryChainRequest {
	s.Bizid = &v
	return s
}

type DescribeDownloadPathsOfNotaryChainResponseBody struct {
	RequestId *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeDownloadPathsOfNotaryChainResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeDownloadPathsOfNotaryChainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsOfNotaryChainResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsOfNotaryChainResponseBody) SetRequestId(v string) *DescribeDownloadPathsOfNotaryChainResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDownloadPathsOfNotaryChainResponseBody) SetResult(v *DescribeDownloadPathsOfNotaryChainResponseBodyResult) *DescribeDownloadPathsOfNotaryChainResponseBody {
	s.Result = v
	return s
}

type DescribeDownloadPathsOfNotaryChainResponseBodyResult struct {
	BizviewUrl *string `json:"BizviewUrl,omitempty" xml:"BizviewUrl,omitempty"`
	CertUrl    *string `json:"CertUrl,omitempty" xml:"CertUrl,omitempty"`
	SdkUrl     *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
}

func (s DescribeDownloadPathsOfNotaryChainResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsOfNotaryChainResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsOfNotaryChainResponseBodyResult) SetBizviewUrl(v string) *DescribeDownloadPathsOfNotaryChainResponseBodyResult {
	s.BizviewUrl = &v
	return s
}

func (s *DescribeDownloadPathsOfNotaryChainResponseBodyResult) SetCertUrl(v string) *DescribeDownloadPathsOfNotaryChainResponseBodyResult {
	s.CertUrl = &v
	return s
}

func (s *DescribeDownloadPathsOfNotaryChainResponseBodyResult) SetSdkUrl(v string) *DescribeDownloadPathsOfNotaryChainResponseBodyResult {
	s.SdkUrl = &v
	return s
}

type DescribeDownloadPathsOfNotaryChainResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeDownloadPathsOfNotaryChainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeDownloadPathsOfNotaryChainResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDownloadPathsOfNotaryChainResponse) GoString() string {
	return s.String()
}

func (s *DescribeDownloadPathsOfNotaryChainResponse) SetHeaders(v map[string]*string) *DescribeDownloadPathsOfNotaryChainResponse {
	s.Headers = v
	return s
}

func (s *DescribeDownloadPathsOfNotaryChainResponse) SetStatusCode(v int32) *DescribeDownloadPathsOfNotaryChainResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDownloadPathsOfNotaryChainResponse) SetBody(v *DescribeDownloadPathsOfNotaryChainResponseBody) *DescribeDownloadPathsOfNotaryChainResponse {
	s.Body = v
	return s
}

type DescribeEcosphereSpecsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeEcosphereSpecsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEcosphereSpecsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcosphereSpecsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEcosphereSpecsResponseBody) SetErrorCode(v int32) *DescribeEcosphereSpecsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEcosphereSpecsResponseBody) SetRequestId(v string) *DescribeEcosphereSpecsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEcosphereSpecsResponseBody) SetResult(v []*DescribeEcosphereSpecsResponseBodyResult) *DescribeEcosphereSpecsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEcosphereSpecsResponseBody) SetSuccess(v bool) *DescribeEcosphereSpecsResponseBody {
	s.Success = &v
	return s
}

type DescribeEcosphereSpecsResponseBodyResult struct {
	// example:
	//
	// true
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// example:
	//
	// enterprise
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeEcosphereSpecsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcosphereSpecsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEcosphereSpecsResponseBodyResult) SetEnable(v bool) *DescribeEcosphereSpecsResponseBodyResult {
	s.Enable = &v
	return s
}

func (s *DescribeEcosphereSpecsResponseBodyResult) SetName(v string) *DescribeEcosphereSpecsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeEcosphereSpecsResponseBodyResult) SetTitle(v string) *DescribeEcosphereSpecsResponseBodyResult {
	s.Title = &v
	return s
}

type DescribeEcosphereSpecsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEcosphereSpecsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEcosphereSpecsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEcosphereSpecsResponse) GoString() string {
	return s.String()
}

func (s *DescribeEcosphereSpecsResponse) SetHeaders(v map[string]*string) *DescribeEcosphereSpecsResponse {
	s.Headers = v
	return s
}

func (s *DescribeEcosphereSpecsResponse) SetStatusCode(v int32) *DescribeEcosphereSpecsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEcosphereSpecsResponse) SetBody(v *DescribeEcosphereSpecsResponseBody) *DescribeEcosphereSpecsResponse {
	s.Body = v
	return s
}

type DescribeEthereumRequest struct {
	// This parameter is required.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeEthereumRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumRequest) SetId(v string) *DescribeEthereumRequest {
	s.Id = &v
	return s
}

type DescribeEthereumResponseBody struct {
	ErrorCode *int32                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeEthereumResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumResponseBody) SetErrorCode(v int32) *DescribeEthereumResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumResponseBody) SetRequestId(v string) *DescribeEthereumResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumResponseBody) SetResult(v *DescribeEthereumResponseBodyResult) *DescribeEthereumResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumResponseBody) SetSuccess(v bool) *DescribeEthereumResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumResponseBodyResult struct {
	Consensus   *string `json:"Consensus,omitempty" xml:"Consensus,omitempty"`
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeEthereumResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumResponseBodyResult) SetConsensus(v string) *DescribeEthereumResponseBodyResult {
	s.Consensus = &v
	return s
}

func (s *DescribeEthereumResponseBodyResult) SetCreator(v string) *DescribeEthereumResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeEthereumResponseBodyResult) SetDescription(v string) *DescribeEthereumResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeEthereumResponseBodyResult) SetId(v string) *DescribeEthereumResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeEthereumResponseBodyResult) SetName(v string) *DescribeEthereumResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeEthereumResponseBodyResult) SetNetworkId(v string) *DescribeEthereumResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *DescribeEthereumResponseBodyResult) SetRegionId(v string) *DescribeEthereumResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeEthereumResponseBodyResult) SetState(v string) *DescribeEthereumResponseBodyResult {
	s.State = &v
	return s
}

type DescribeEthereumResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumResponse) SetHeaders(v map[string]*string) *DescribeEthereumResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumResponse) SetStatusCode(v int32) *DescribeEthereumResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumResponse) SetBody(v *DescribeEthereumResponseBody) *DescribeEthereumResponse {
	s.Body = v
	return s
}

type DescribeEthereumClientUsersRequest struct {
	// This parameter is required.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeEthereumClientUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumClientUsersRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumClientUsersRequest) SetNodeId(v string) *DescribeEthereumClientUsersRequest {
	s.NodeId = &v
	return s
}

type DescribeEthereumClientUsersResponseBody struct {
	ErrorCode *int32                                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeEthereumClientUsersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumClientUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumClientUsersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumClientUsersResponseBody) SetErrorCode(v int32) *DescribeEthereumClientUsersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumClientUsersResponseBody) SetRequestId(v string) *DescribeEthereumClientUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumClientUsersResponseBody) SetResult(v []*DescribeEthereumClientUsersResponseBodyResult) *DescribeEthereumClientUsersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumClientUsersResponseBody) SetSuccess(v bool) *DescribeEthereumClientUsersResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumClientUsersResponseBodyResult struct {
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeEthereumClientUsersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumClientUsersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumClientUsersResponseBodyResult) SetUsername(v string) *DescribeEthereumClientUsersResponseBodyResult {
	s.Username = &v
	return s
}

type DescribeEthereumClientUsersResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumClientUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumClientUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumClientUsersResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumClientUsersResponse) SetHeaders(v map[string]*string) *DescribeEthereumClientUsersResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumClientUsersResponse) SetStatusCode(v int32) *DescribeEthereumClientUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumClientUsersResponse) SetBody(v *DescribeEthereumClientUsersResponseBody) *DescribeEthereumClientUsersResponse {
	s.Body = v
	return s
}

type DescribeEthereumDeletableRequest struct {
	// This parameter is required.
	EthereumId *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
}

func (s DescribeEthereumDeletableRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumDeletableRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumDeletableRequest) SetEthereumId(v string) *DescribeEthereumDeletableRequest {
	s.EthereumId = &v
	return s
}

type DescribeEthereumDeletableResponseBody struct {
	ErrorCode *int32                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeEthereumDeletableResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumDeletableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumDeletableResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumDeletableResponseBody) SetErrorCode(v int32) *DescribeEthereumDeletableResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumDeletableResponseBody) SetRequestId(v string) *DescribeEthereumDeletableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumDeletableResponseBody) SetResult(v *DescribeEthereumDeletableResponseBodyResult) *DescribeEthereumDeletableResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumDeletableResponseBody) SetSuccess(v bool) *DescribeEthereumDeletableResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumDeletableResponseBodyResult struct {
	Deletable  *bool   `json:"Deletable,omitempty" xml:"Deletable,omitempty"`
	EthereumId *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
}

func (s DescribeEthereumDeletableResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumDeletableResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumDeletableResponseBodyResult) SetDeletable(v bool) *DescribeEthereumDeletableResponseBodyResult {
	s.Deletable = &v
	return s
}

func (s *DescribeEthereumDeletableResponseBodyResult) SetEthereumId(v string) *DescribeEthereumDeletableResponseBodyResult {
	s.EthereumId = &v
	return s
}

type DescribeEthereumDeletableResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumDeletableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumDeletableResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumDeletableResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumDeletableResponse) SetHeaders(v map[string]*string) *DescribeEthereumDeletableResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumDeletableResponse) SetStatusCode(v int32) *DescribeEthereumDeletableResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumDeletableResponse) SetBody(v *DescribeEthereumDeletableResponseBody) *DescribeEthereumDeletableResponse {
	s.Body = v
	return s
}

type DescribeEthereumInvitaionRequest struct {
	// This parameter is required.
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
}

func (s DescribeEthereumInvitaionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumInvitaionRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumInvitaionRequest) SetToken(v string) *DescribeEthereumInvitaionRequest {
	s.Token = &v
	return s
}

type DescribeEthereumInvitaionResponseBody struct {
	ErrorCode *int32                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeEthereumInvitaionResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumInvitaionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumInvitaionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumInvitaionResponseBody) SetErrorCode(v int32) *DescribeEthereumInvitaionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBody) SetRequestId(v string) *DescribeEthereumInvitaionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBody) SetResult(v *DescribeEthereumInvitaionResponseBodyResult) *DescribeEthereumInvitaionResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumInvitaionResponseBody) SetSuccess(v bool) *DescribeEthereumInvitaionResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumInvitaionResponseBodyResult struct {
	Consensus   *string `json:"Consensus,omitempty" xml:"Consensus,omitempty"`
	CreateTime  *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeEthereumInvitaionResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumInvitaionResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetConsensus(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.Consensus = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetCreateTime(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetCreator(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetDescription(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetId(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetName(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetNetworkId(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetRegionId(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeEthereumInvitaionResponseBodyResult) SetState(v string) *DescribeEthereumInvitaionResponseBodyResult {
	s.State = &v
	return s
}

type DescribeEthereumInvitaionResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumInvitaionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumInvitaionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumInvitaionResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumInvitaionResponse) SetHeaders(v map[string]*string) *DescribeEthereumInvitaionResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumInvitaionResponse) SetStatusCode(v int32) *DescribeEthereumInvitaionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumInvitaionResponse) SetBody(v *DescribeEthereumInvitaionResponseBody) *DescribeEthereumInvitaionResponse {
	s.Body = v
	return s
}

type DescribeEthereumInviteeRequest struct {
	// This parameter is required.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeEthereumInviteeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumInviteeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumInviteeRequest) SetId(v string) *DescribeEthereumInviteeRequest {
	s.Id = &v
	return s
}

type DescribeEthereumInviteeResponseBody struct {
	ErrorCode *int32                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeEthereumInviteeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumInviteeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumInviteeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumInviteeResponseBody) SetErrorCode(v int32) *DescribeEthereumInviteeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBody) SetRequestId(v string) *DescribeEthereumInviteeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBody) SetResult(v []*DescribeEthereumInviteeResponseBodyResult) *DescribeEthereumInviteeResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumInviteeResponseBody) SetSuccess(v bool) *DescribeEthereumInviteeResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumInviteeResponseBodyResult struct {
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator      *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EthereumId   *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
	EthereumName *string `json:"EthereumName,omitempty" xml:"EthereumName,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	NetworkId    *int64  `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NodeName     *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RpcPort      *string `json:"RpcPort,omitempty" xml:"RpcPort,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	WsPort       *string `json:"WsPort,omitempty" xml:"WsPort,omitempty"`
}

func (s DescribeEthereumInviteeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumInviteeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetCreateTime(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetCreator(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetDescription(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetEthereumId(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.EthereumId = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetEthereumName(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.EthereumName = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetId(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetNetworkId(v int64) *DescribeEthereumInviteeResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetNodeName(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.NodeName = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetPublicIp(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.PublicIp = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetRegionId(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetRpcPort(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.RpcPort = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetState(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeEthereumInviteeResponseBodyResult) SetWsPort(v string) *DescribeEthereumInviteeResponseBodyResult {
	s.WsPort = &v
	return s
}

type DescribeEthereumInviteeResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumInviteeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumInviteeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumInviteeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumInviteeResponse) SetHeaders(v map[string]*string) *DescribeEthereumInviteeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumInviteeResponse) SetStatusCode(v int32) *DescribeEthereumInviteeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumInviteeResponse) SetBody(v *DescribeEthereumInviteeResponseBody) *DescribeEthereumInviteeResponse {
	s.Body = v
	return s
}

type DescribeEthereumNodeRequest struct {
	// This parameter is required.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeEthereumNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeRequest) SetId(v string) *DescribeEthereumNodeRequest {
	s.Id = &v
	return s
}

type DescribeEthereumNodeResponseBody struct {
	ErrorCode *int32                                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeEthereumNodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeResponseBody) SetErrorCode(v int32) *DescribeEthereumNodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumNodeResponseBody) SetRequestId(v string) *DescribeEthereumNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumNodeResponseBody) SetResult(v *DescribeEthereumNodeResponseBodyResult) *DescribeEthereumNodeResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumNodeResponseBody) SetSuccess(v bool) *DescribeEthereumNodeResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumNodeResponseBodyResult struct {
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator      *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EthereumId   *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
	EthereumName *string `json:"EthereumName,omitempty" xml:"EthereumName,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	NetworkId    *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NodeName     *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RpcPort      *int32  `json:"RpcPort,omitempty" xml:"RpcPort,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	WsPort       *int32  `json:"WsPort,omitempty" xml:"WsPort,omitempty"`
}

func (s DescribeEthereumNodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeResponseBodyResult) SetCreateTime(v int64) *DescribeEthereumNodeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetCreator(v string) *DescribeEthereumNodeResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetDescription(v string) *DescribeEthereumNodeResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetEthereumId(v string) *DescribeEthereumNodeResponseBodyResult {
	s.EthereumId = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetEthereumName(v string) *DescribeEthereumNodeResponseBodyResult {
	s.EthereumName = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetId(v string) *DescribeEthereumNodeResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetNetworkId(v string) *DescribeEthereumNodeResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetNodeName(v string) *DescribeEthereumNodeResponseBodyResult {
	s.NodeName = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetPublicIp(v string) *DescribeEthereumNodeResponseBodyResult {
	s.PublicIp = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetRegionId(v string) *DescribeEthereumNodeResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetRpcPort(v int32) *DescribeEthereumNodeResponseBodyResult {
	s.RpcPort = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetState(v string) *DescribeEthereumNodeResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeEthereumNodeResponseBodyResult) SetWsPort(v int32) *DescribeEthereumNodeResponseBodyResult {
	s.WsPort = &v
	return s
}

type DescribeEthereumNodeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeResponse) SetHeaders(v map[string]*string) *DescribeEthereumNodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumNodeResponse) SetStatusCode(v int32) *DescribeEthereumNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumNodeResponse) SetBody(v *DescribeEthereumNodeResponseBody) *DescribeEthereumNodeResponse {
	s.Body = v
	return s
}

type DescribeEthereumNodeConfigurationRequest struct {
	// This parameter is required.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeEthereumNodeConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeConfigurationRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeConfigurationRequest) SetNodeId(v string) *DescribeEthereumNodeConfigurationRequest {
	s.NodeId = &v
	return s
}

type DescribeEthereumNodeConfigurationResponseBody struct {
	ErrorCode *int32                                                 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeEthereumNodeConfigurationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumNodeConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeConfigurationResponseBody) SetErrorCode(v int32) *DescribeEthereumNodeConfigurationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBody) SetRequestId(v string) *DescribeEthereumNodeConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBody) SetResult(v []*DescribeEthereumNodeConfigurationResponseBodyResult) *DescribeEthereumNodeConfigurationResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBody) SetSuccess(v bool) *DescribeEthereumNodeConfigurationResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumNodeConfigurationResponseBodyResult struct {
	GenesisJson           *string `json:"GenesisJson,omitempty" xml:"GenesisJson,omitempty"`
	IP                    *string `json:"IP,omitempty" xml:"IP,omitempty"`
	NodePub               *string `json:"NodePub,omitempty" xml:"NodePub,omitempty"`
	P2pPort               *int32  `json:"P2pPort,omitempty" xml:"P2pPort,omitempty"`
	PermissionedNodesJson *string `json:"PermissionedNodesJson,omitempty" xml:"PermissionedNodesJson,omitempty"`
	RaftPort              *int32  `json:"RaftPort,omitempty" xml:"RaftPort,omitempty"`
	RpcPort               *int32  `json:"RpcPort,omitempty" xml:"RpcPort,omitempty"`
	StaticNodesJson       *string `json:"StaticNodesJson,omitempty" xml:"StaticNodesJson,omitempty"`
	TMJson                *string `json:"TMJson,omitempty" xml:"TMJson,omitempty"`
	TMPort                *int32  `json:"TMPort,omitempty" xml:"TMPort,omitempty"`
	TMPub                 *string `json:"TMPub,omitempty" xml:"TMPub,omitempty"`
	WSPort                *int32  `json:"WSPort,omitempty" xml:"WSPort,omitempty"`
}

func (s DescribeEthereumNodeConfigurationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeConfigurationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetGenesisJson(v string) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.GenesisJson = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetIP(v string) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.IP = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetNodePub(v string) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.NodePub = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetP2pPort(v int32) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.P2pPort = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetPermissionedNodesJson(v string) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.PermissionedNodesJson = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetRaftPort(v int32) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.RaftPort = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetRpcPort(v int32) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.RpcPort = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetStaticNodesJson(v string) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.StaticNodesJson = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetTMJson(v string) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.TMJson = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetTMPort(v int32) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.TMPort = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetTMPub(v string) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.TMPub = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponseBodyResult) SetWSPort(v int32) *DescribeEthereumNodeConfigurationResponseBodyResult {
	s.WSPort = &v
	return s
}

type DescribeEthereumNodeConfigurationResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumNodeConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumNodeConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeConfigurationResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeConfigurationResponse) SetHeaders(v map[string]*string) *DescribeEthereumNodeConfigurationResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponse) SetStatusCode(v int32) *DescribeEthereumNodeConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumNodeConfigurationResponse) SetBody(v *DescribeEthereumNodeConfigurationResponseBody) *DescribeEthereumNodeConfigurationResponse {
	s.Body = v
	return s
}

type DescribeEthereumNodeInfoRequest struct {
	// This parameter is required.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeEthereumNodeInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeInfoRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeInfoRequest) SetNodeId(v string) *DescribeEthereumNodeInfoRequest {
	s.NodeId = &v
	return s
}

type DescribeEthereumNodeInfoResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumNodeInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeInfoResponseBody) SetErrorCode(v int32) *DescribeEthereumNodeInfoResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumNodeInfoResponseBody) SetRequestId(v string) *DescribeEthereumNodeInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumNodeInfoResponseBody) SetResult(v string) *DescribeEthereumNodeInfoResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeEthereumNodeInfoResponseBody) SetSuccess(v bool) *DescribeEthereumNodeInfoResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumNodeInfoResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumNodeInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumNodeInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeInfoResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeInfoResponse) SetHeaders(v map[string]*string) *DescribeEthereumNodeInfoResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumNodeInfoResponse) SetStatusCode(v int32) *DescribeEthereumNodeInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumNodeInfoResponse) SetBody(v *DescribeEthereumNodeInfoResponseBody) *DescribeEthereumNodeInfoResponse {
	s.Body = v
	return s
}

type DescribeEthereumNodeLogsRequest struct {
	Lines *string `json:"Lines,omitempty" xml:"Lines,omitempty"`
	// This parameter is required.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s DescribeEthereumNodeLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeLogsRequest) SetLines(v string) *DescribeEthereumNodeLogsRequest {
	s.Lines = &v
	return s
}

func (s *DescribeEthereumNodeLogsRequest) SetNodeId(v string) *DescribeEthereumNodeLogsRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeEthereumNodeLogsRequest) SetTarget(v string) *DescribeEthereumNodeLogsRequest {
	s.Target = &v
	return s
}

type DescribeEthereumNodeLogsResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumNodeLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeLogsResponseBody) SetErrorCode(v int32) *DescribeEthereumNodeLogsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumNodeLogsResponseBody) SetRequestId(v string) *DescribeEthereumNodeLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumNodeLogsResponseBody) SetResult(v string) *DescribeEthereumNodeLogsResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeEthereumNodeLogsResponseBody) SetSuccess(v bool) *DescribeEthereumNodeLogsResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumNodeLogsResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumNodeLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumNodeLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodeLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodeLogsResponse) SetHeaders(v map[string]*string) *DescribeEthereumNodeLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumNodeLogsResponse) SetStatusCode(v int32) *DescribeEthereumNodeLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumNodeLogsResponse) SetBody(v *DescribeEthereumNodeLogsResponseBody) *DescribeEthereumNodeLogsResponse {
	s.Body = v
	return s
}

type DescribeEthereumNodesResponseBody struct {
	ErrorCode *int32                                     `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeEthereumNodesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                      `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumNodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodesResponseBody) SetErrorCode(v int32) *DescribeEthereumNodesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumNodesResponseBody) SetRequestId(v string) *DescribeEthereumNodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumNodesResponseBody) SetResult(v []*DescribeEthereumNodesResponseBodyResult) *DescribeEthereumNodesResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumNodesResponseBody) SetSuccess(v bool) *DescribeEthereumNodesResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumNodesResponseBodyResult struct {
	Consensus    *string `json:"Consensus,omitempty" xml:"Consensus,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator      *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EthereumId   *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
	EthereumName *string `json:"EthereumName,omitempty" xml:"EthereumName,omitempty"`
	External     *bool   `json:"External,omitempty" xml:"External,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	NetworkId    *int64  `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NodeName     *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RpcPort      *string `json:"RpcPort,omitempty" xml:"RpcPort,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	Validator    *bool   `json:"Validator,omitempty" xml:"Validator,omitempty"`
	WsPort       *string `json:"WsPort,omitempty" xml:"WsPort,omitempty"`
}

func (s DescribeEthereumNodesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodesResponseBodyResult) SetConsensus(v string) *DescribeEthereumNodesResponseBodyResult {
	s.Consensus = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetCreateTime(v string) *DescribeEthereumNodesResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetCreator(v string) *DescribeEthereumNodesResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetDescription(v string) *DescribeEthereumNodesResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetEthereumId(v string) *DescribeEthereumNodesResponseBodyResult {
	s.EthereumId = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetEthereumName(v string) *DescribeEthereumNodesResponseBodyResult {
	s.EthereumName = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetExternal(v bool) *DescribeEthereumNodesResponseBodyResult {
	s.External = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetId(v string) *DescribeEthereumNodesResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetNetworkId(v int64) *DescribeEthereumNodesResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetNodeName(v string) *DescribeEthereumNodesResponseBodyResult {
	s.NodeName = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetPublicIp(v string) *DescribeEthereumNodesResponseBodyResult {
	s.PublicIp = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetRegionId(v string) *DescribeEthereumNodesResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetRpcPort(v string) *DescribeEthereumNodesResponseBodyResult {
	s.RpcPort = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetState(v string) *DescribeEthereumNodesResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetValidator(v bool) *DescribeEthereumNodesResponseBodyResult {
	s.Validator = &v
	return s
}

func (s *DescribeEthereumNodesResponseBodyResult) SetWsPort(v string) *DescribeEthereumNodesResponseBodyResult {
	s.WsPort = &v
	return s
}

type DescribeEthereumNodesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumNodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumNodesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumNodesResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumNodesResponse) SetHeaders(v map[string]*string) *DescribeEthereumNodesResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumNodesResponse) SetStatusCode(v int32) *DescribeEthereumNodesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumNodesResponse) SetBody(v *DescribeEthereumNodesResponseBody) *DescribeEthereumNodesResponse {
	s.Body = v
	return s
}

type DescribeEthereumsResponseBody struct {
	ErrorCode *int32                                 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeEthereumsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeEthereumsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeEthereumsResponseBody) SetErrorCode(v int32) *DescribeEthereumsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeEthereumsResponseBody) SetRequestId(v string) *DescribeEthereumsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeEthereumsResponseBody) SetResult(v []*DescribeEthereumsResponseBodyResult) *DescribeEthereumsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeEthereumsResponseBody) SetSuccess(v bool) *DescribeEthereumsResponseBody {
	s.Success = &v
	return s
}

type DescribeEthereumsResponseBodyResult struct {
	Consensus   *string `json:"Consensus,omitempty" xml:"Consensus,omitempty"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Deletable   *bool   `json:"Deletable,omitempty" xml:"Deletable,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NodeNumber  *int32  `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeEthereumsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeEthereumsResponseBodyResult) SetConsensus(v string) *DescribeEthereumsResponseBodyResult {
	s.Consensus = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetCreateTime(v int64) *DescribeEthereumsResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetCreator(v string) *DescribeEthereumsResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetDeletable(v bool) *DescribeEthereumsResponseBodyResult {
	s.Deletable = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetDescription(v string) *DescribeEthereumsResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetId(v string) *DescribeEthereumsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetName(v string) *DescribeEthereumsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetNetworkId(v string) *DescribeEthereumsResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetNodeNumber(v int32) *DescribeEthereumsResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetRegionId(v string) *DescribeEthereumsResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeEthereumsResponseBodyResult) SetState(v string) *DescribeEthereumsResponseBodyResult {
	s.State = &v
	return s
}

type DescribeEthereumsResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeEthereumsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeEthereumsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeEthereumsResponse) GoString() string {
	return s.String()
}

func (s *DescribeEthereumsResponse) SetHeaders(v map[string]*string) *DescribeEthereumsResponse {
	s.Headers = v
	return s
}

func (s *DescribeEthereumsResponse) SetStatusCode(v int32) *DescribeEthereumsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeEthereumsResponse) SetBody(v *DescribeEthereumsResponseBody) *DescribeEthereumsResponse {
	s.Body = v
	return s
}

type DescribeExplorerRequest struct {
	ExBody *string `json:"ExBody,omitempty" xml:"ExBody,omitempty"`
	// This parameter is required.
	ExMethod *string `json:"ExMethod,omitempty" xml:"ExMethod,omitempty"`
	ExUrl    *string `json:"ExUrl,omitempty" xml:"ExUrl,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeExplorerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExplorerRequest) GoString() string {
	return s.String()
}

func (s *DescribeExplorerRequest) SetExBody(v string) *DescribeExplorerRequest {
	s.ExBody = &v
	return s
}

func (s *DescribeExplorerRequest) SetExMethod(v string) *DescribeExplorerRequest {
	s.ExMethod = &v
	return s
}

func (s *DescribeExplorerRequest) SetExUrl(v string) *DescribeExplorerRequest {
	s.ExUrl = &v
	return s
}

func (s *DescribeExplorerRequest) SetOrganizationId(v string) *DescribeExplorerRequest {
	s.OrganizationId = &v
	return s
}

type DescribeExplorerResponseBody struct {
	DynamicCode    *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrorCode      *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId      *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeExplorerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExplorerResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExplorerResponseBody) SetDynamicCode(v string) *DescribeExplorerResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeExplorerResponseBody) SetDynamicMessage(v string) *DescribeExplorerResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeExplorerResponseBody) SetErrorCode(v int32) *DescribeExplorerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeExplorerResponseBody) SetRequestId(v string) *DescribeExplorerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExplorerResponseBody) SetResult(v string) *DescribeExplorerResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeExplorerResponseBody) SetSuccess(v bool) *DescribeExplorerResponseBody {
	s.Success = &v
	return s
}

type DescribeExplorerResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExplorerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExplorerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExplorerResponse) GoString() string {
	return s.String()
}

func (s *DescribeExplorerResponse) SetHeaders(v map[string]*string) *DescribeExplorerResponse {
	s.Headers = v
	return s
}

func (s *DescribeExplorerResponse) SetStatusCode(v int32) *DescribeExplorerResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExplorerResponse) SetBody(v *DescribeExplorerResponseBody) *DescribeExplorerResponse {
	s.Body = v
	return s
}

type DescribeExplorerURLRequest struct {
	// This parameter is required.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeExplorerURLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeExplorerURLRequest) GoString() string {
	return s.String()
}

func (s *DescribeExplorerURLRequest) SetNodeId(v string) *DescribeExplorerURLRequest {
	s.NodeId = &v
	return s
}

type DescribeExplorerURLResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeExplorerURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeExplorerURLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeExplorerURLResponseBody) SetErrorCode(v int32) *DescribeExplorerURLResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeExplorerURLResponseBody) SetRequestId(v string) *DescribeExplorerURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeExplorerURLResponseBody) SetResult(v string) *DescribeExplorerURLResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeExplorerURLResponseBody) SetSuccess(v bool) *DescribeExplorerURLResponseBody {
	s.Success = &v
	return s
}

type DescribeExplorerURLResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeExplorerURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeExplorerURLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeExplorerURLResponse) GoString() string {
	return s.String()
}

func (s *DescribeExplorerURLResponse) SetHeaders(v map[string]*string) *DescribeExplorerURLResponse {
	s.Headers = v
	return s
}

func (s *DescribeExplorerURLResponse) SetStatusCode(v int32) *DescribeExplorerURLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeExplorerURLResponse) SetBody(v *DescribeExplorerURLResponseBody) *DescribeExplorerURLResponse {
	s.Body = v
	return s
}

type DescribeFabricChaincodeEndorsePolicyRequest struct {
	// This parameter is required.
	ChaincodeName  *string `json:"ChaincodeName,omitempty" xml:"ChaincodeName,omitempty"`
	ChannelId      *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricChaincodeEndorsePolicyRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChaincodeEndorsePolicyRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricChaincodeEndorsePolicyRequest) SetChaincodeName(v string) *DescribeFabricChaincodeEndorsePolicyRequest {
	s.ChaincodeName = &v
	return s
}

func (s *DescribeFabricChaincodeEndorsePolicyRequest) SetChannelId(v string) *DescribeFabricChaincodeEndorsePolicyRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeFabricChaincodeEndorsePolicyRequest) SetOrganizationId(v string) *DescribeFabricChaincodeEndorsePolicyRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricChaincodeEndorsePolicyResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricChaincodeEndorsePolicyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChaincodeEndorsePolicyResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricChaincodeEndorsePolicyResponseBody) SetErrorCode(v int32) *DescribeFabricChaincodeEndorsePolicyResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricChaincodeEndorsePolicyResponseBody) SetRequestId(v string) *DescribeFabricChaincodeEndorsePolicyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricChaincodeEndorsePolicyResponseBody) SetResult(v string) *DescribeFabricChaincodeEndorsePolicyResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeFabricChaincodeEndorsePolicyResponseBody) SetSuccess(v bool) *DescribeFabricChaincodeEndorsePolicyResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricChaincodeEndorsePolicyResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricChaincodeEndorsePolicyResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricChaincodeEndorsePolicyResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChaincodeEndorsePolicyResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricChaincodeEndorsePolicyResponse) SetHeaders(v map[string]*string) *DescribeFabricChaincodeEndorsePolicyResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricChaincodeEndorsePolicyResponse) SetStatusCode(v int32) *DescribeFabricChaincodeEndorsePolicyResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricChaincodeEndorsePolicyResponse) SetBody(v *DescribeFabricChaincodeEndorsePolicyResponseBody) *DescribeFabricChaincodeEndorsePolicyResponse {
	s.Body = v
	return s
}

type DescribeFabricChaincodeLogsRequest struct {
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	Lines       *string `json:"Lines,omitempty" xml:"Lines,omitempty"`
	Offset      *int32  `json:"Offset,omitempty" xml:"Offset,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	PeerName *string `json:"PeerName,omitempty" xml:"PeerName,omitempty"`
}

func (s DescribeFabricChaincodeLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChaincodeLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricChaincodeLogsRequest) SetChaincodeId(v string) *DescribeFabricChaincodeLogsRequest {
	s.ChaincodeId = &v
	return s
}

func (s *DescribeFabricChaincodeLogsRequest) SetLines(v string) *DescribeFabricChaincodeLogsRequest {
	s.Lines = &v
	return s
}

func (s *DescribeFabricChaincodeLogsRequest) SetOffset(v int32) *DescribeFabricChaincodeLogsRequest {
	s.Offset = &v
	return s
}

func (s *DescribeFabricChaincodeLogsRequest) SetOrganizationId(v string) *DescribeFabricChaincodeLogsRequest {
	s.OrganizationId = &v
	return s
}

func (s *DescribeFabricChaincodeLogsRequest) SetPeerName(v string) *DescribeFabricChaincodeLogsRequest {
	s.PeerName = &v
	return s
}

type DescribeFabricChaincodeLogsResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricChaincodeLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChaincodeLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricChaincodeLogsResponseBody) SetErrorCode(v int32) *DescribeFabricChaincodeLogsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricChaincodeLogsResponseBody) SetRequestId(v string) *DescribeFabricChaincodeLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricChaincodeLogsResponseBody) SetResult(v string) *DescribeFabricChaincodeLogsResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeFabricChaincodeLogsResponseBody) SetSuccess(v bool) *DescribeFabricChaincodeLogsResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricChaincodeLogsResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricChaincodeLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricChaincodeLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChaincodeLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricChaincodeLogsResponse) SetHeaders(v map[string]*string) *DescribeFabricChaincodeLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricChaincodeLogsResponse) SetStatusCode(v int32) *DescribeFabricChaincodeLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricChaincodeLogsResponse) SetBody(v *DescribeFabricChaincodeLogsResponseBody) *DescribeFabricChaincodeLogsResponse {
	s.Body = v
	return s
}

type DescribeFabricChannelConfigRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricChannelConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelConfigRequest) SetChannelId(v string) *DescribeFabricChannelConfigRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeFabricChannelConfigRequest) SetOrganizationId(v string) *DescribeFabricChannelConfigRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricChannelConfigResponseBody struct {
	ErrorCode *int32                                         `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeFabricChannelConfigResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                          `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricChannelConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelConfigResponseBody) SetErrorCode(v int32) *DescribeFabricChannelConfigResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricChannelConfigResponseBody) SetRequestId(v string) *DescribeFabricChannelConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricChannelConfigResponseBody) SetResult(v *DescribeFabricChannelConfigResponseBodyResult) *DescribeFabricChannelConfigResponseBody {
	s.Result = v
	return s
}

func (s *DescribeFabricChannelConfigResponseBody) SetSuccess(v bool) *DescribeFabricChannelConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricChannelConfigResponseBodyResult struct {
	AbsoluteMaxBytes  *int64  `json:"AbsoluteMaxBytes,omitempty" xml:"AbsoluteMaxBytes,omitempty"`
	BatchTimeout      *string `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	MaxMessageCount   *int64  `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	PreferredMaxBytes *int64  `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
}

func (s DescribeFabricChannelConfigResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelConfigResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelConfigResponseBodyResult) SetAbsoluteMaxBytes(v int64) *DescribeFabricChannelConfigResponseBodyResult {
	s.AbsoluteMaxBytes = &v
	return s
}

func (s *DescribeFabricChannelConfigResponseBodyResult) SetBatchTimeout(v string) *DescribeFabricChannelConfigResponseBodyResult {
	s.BatchTimeout = &v
	return s
}

func (s *DescribeFabricChannelConfigResponseBodyResult) SetMaxMessageCount(v int64) *DescribeFabricChannelConfigResponseBodyResult {
	s.MaxMessageCount = &v
	return s
}

func (s *DescribeFabricChannelConfigResponseBodyResult) SetPreferredMaxBytes(v int64) *DescribeFabricChannelConfigResponseBodyResult {
	s.PreferredMaxBytes = &v
	return s
}

type DescribeFabricChannelConfigResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricChannelConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricChannelConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelConfigResponse) SetHeaders(v map[string]*string) *DescribeFabricChannelConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricChannelConfigResponse) SetStatusCode(v int32) *DescribeFabricChannelConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricChannelConfigResponse) SetBody(v *DescribeFabricChannelConfigResponseBody) *DescribeFabricChannelConfigResponse {
	s.Body = v
	return s
}

type DescribeFabricChannelOrdererRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricChannelOrdererRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrdererRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrdererRequest) SetChannelId(v string) *DescribeFabricChannelOrdererRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeFabricChannelOrdererRequest) SetOrganizationId(v string) *DescribeFabricChannelOrdererRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricChannelOrdererResponseBody struct {
	ErrorCode *int32                                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeFabricChannelOrdererResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricChannelOrdererResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrdererResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrdererResponseBody) SetErrorCode(v int32) *DescribeFabricChannelOrdererResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricChannelOrdererResponseBody) SetRequestId(v string) *DescribeFabricChannelOrdererResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricChannelOrdererResponseBody) SetResult(v []*DescribeFabricChannelOrdererResponseBodyResult) *DescribeFabricChannelOrdererResponseBody {
	s.Result = v
	return s
}

func (s *DescribeFabricChannelOrdererResponseBody) SetSuccess(v bool) *DescribeFabricChannelOrdererResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricChannelOrdererResponseBodyResult struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s DescribeFabricChannelOrdererResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrdererResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrdererResponseBodyResult) SetAddress(v string) *DescribeFabricChannelOrdererResponseBodyResult {
	s.Address = &v
	return s
}

func (s *DescribeFabricChannelOrdererResponseBodyResult) SetCertificate(v string) *DescribeFabricChannelOrdererResponseBodyResult {
	s.Certificate = &v
	return s
}

func (s *DescribeFabricChannelOrdererResponseBodyResult) SetKey(v string) *DescribeFabricChannelOrdererResponseBodyResult {
	s.Key = &v
	return s
}

func (s *DescribeFabricChannelOrdererResponseBodyResult) SetTlsroot(v string) *DescribeFabricChannelOrdererResponseBodyResult {
	s.Tlsroot = &v
	return s
}

type DescribeFabricChannelOrdererResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricChannelOrdererResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricChannelOrdererResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrdererResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrdererResponse) SetHeaders(v map[string]*string) *DescribeFabricChannelOrdererResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricChannelOrdererResponse) SetStatusCode(v int32) *DescribeFabricChannelOrdererResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricChannelOrdererResponse) SetBody(v *DescribeFabricChannelOrdererResponseBody) *DescribeFabricChannelOrdererResponse {
	s.Body = v
	return s
}

type DescribeFabricChannelOrganizationsRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricChannelOrganizationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrganizationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrganizationsRequest) SetChannelId(v string) *DescribeFabricChannelOrganizationsRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsRequest) SetOrganizationId(v string) *DescribeFabricChannelOrganizationsRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricChannelOrganizationsResponseBody struct {
	ErrorCode *int32                                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeFabricChannelOrganizationsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricChannelOrganizationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrganizationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrganizationsResponseBody) SetErrorCode(v int32) *DescribeFabricChannelOrganizationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBody) SetRequestId(v string) *DescribeFabricChannelOrganizationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBody) SetResult(v *DescribeFabricChannelOrganizationsResponseBodyResult) *DescribeFabricChannelOrganizationsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBody) SetSuccess(v bool) *DescribeFabricChannelOrganizationsResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricChannelOrganizationsResponseBodyResult struct {
	AnchorPeers         []*DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                             `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                             `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                             `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                               `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                             `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                             `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s DescribeFabricChannelOrganizationsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrganizationsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResult) SetAnchorPeers(v []*DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers) *DescribeFabricChannelOrganizationsResponseBodyResult {
	s.AnchorPeers = v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResult) SetCrls(v string) *DescribeFabricChannelOrganizationsResponseBodyResult {
	s.Crls = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResult) SetMspId(v string) *DescribeFabricChannelOrganizationsResponseBodyResult {
	s.MspId = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResult) SetMspType(v string) *DescribeFabricChannelOrganizationsResponseBodyResult {
	s.MspType = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResult) SetOrderer(v bool) *DescribeFabricChannelOrganizationsResponseBodyResult {
	s.Orderer = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResult) SetOrdererNodes(v []*DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes) *DescribeFabricChannelOrganizationsResponseBodyResult {
	s.OrdererNodes = v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResult) SetRootCertificates(v string) *DescribeFabricChannelOrganizationsResponseBodyResult {
	s.RootCertificates = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResult) SetTlsRootCertificates(v string) *DescribeFabricChannelOrganizationsResponseBodyResult {
	s.TlsRootCertificates = &v
	return s
}

type DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers) SetHost(v string) *DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers {
	s.Host = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers) SetPort(v int32) *DescribeFabricChannelOrganizationsResponseBodyResultAnchorPeers {
	s.Port = &v
	return s
}

type DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes) SetAddress(v string) *DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes {
	s.Address = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes) SetCertificate(v string) *DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes) SetKey(v string) *DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes {
	s.Key = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes) SetTlsroot(v string) *DescribeFabricChannelOrganizationsResponseBodyResultOrdererNodes {
	s.Tlsroot = &v
	return s
}

type DescribeFabricChannelOrganizationsResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricChannelOrganizationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricChannelOrganizationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricChannelOrganizationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricChannelOrganizationsResponse) SetHeaders(v map[string]*string) *DescribeFabricChannelOrganizationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponse) SetStatusCode(v int32) *DescribeFabricChannelOrganizationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricChannelOrganizationsResponse) SetBody(v *DescribeFabricChannelOrganizationsResponseBody) *DescribeFabricChannelOrganizationsResponse {
	s.Body = v
	return s
}

type DescribeFabricJoinRequestRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricJoinRequestRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricJoinRequestRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricJoinRequestRequest) SetOrganizationId(v string) *DescribeFabricJoinRequestRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricJoinRequestResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricJoinRequestResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricJoinRequestResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricJoinRequestResponseBody) SetErrorCode(v int32) *DescribeFabricJoinRequestResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricJoinRequestResponseBody) SetRequestId(v string) *DescribeFabricJoinRequestResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricJoinRequestResponseBody) SetResult(v string) *DescribeFabricJoinRequestResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeFabricJoinRequestResponseBody) SetSuccess(v bool) *DescribeFabricJoinRequestResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricJoinRequestResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricJoinRequestResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricJoinRequestResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricJoinRequestResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricJoinRequestResponse) SetHeaders(v map[string]*string) *DescribeFabricJoinRequestResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricJoinRequestResponse) SetStatusCode(v int32) *DescribeFabricJoinRequestResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricJoinRequestResponse) SetBody(v *DescribeFabricJoinRequestResponseBody) *DescribeFabricJoinRequestResponse {
	s.Body = v
	return s
}

type DescribeFabricJoinResponseRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricJoinResponseRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricJoinResponseRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricJoinResponseRequest) SetChannelId(v string) *DescribeFabricJoinResponseRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeFabricJoinResponseRequest) SetOrganizationId(v string) *DescribeFabricJoinResponseRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricJoinResponseResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricJoinResponseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricJoinResponseResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricJoinResponseResponseBody) SetErrorCode(v int32) *DescribeFabricJoinResponseResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricJoinResponseResponseBody) SetRequestId(v string) *DescribeFabricJoinResponseResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricJoinResponseResponseBody) SetResult(v string) *DescribeFabricJoinResponseResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeFabricJoinResponseResponseBody) SetSuccess(v bool) *DescribeFabricJoinResponseResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricJoinResponseResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricJoinResponseResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricJoinResponseResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricJoinResponseResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricJoinResponseResponse) SetHeaders(v map[string]*string) *DescribeFabricJoinResponseResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricJoinResponseResponse) SetStatusCode(v int32) *DescribeFabricJoinResponseResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricJoinResponseResponse) SetBody(v *DescribeFabricJoinResponseResponseBody) *DescribeFabricJoinResponseResponse {
	s.Body = v
	return s
}

type DescribeFabricManagementChaincodesRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricManagementChaincodesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricManagementChaincodesRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricManagementChaincodesRequest) SetChannelId(v string) *DescribeFabricManagementChaincodesRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeFabricManagementChaincodesRequest) SetOrganizationId(v string) *DescribeFabricManagementChaincodesRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricManagementChaincodesResponseBody struct {
	ErrorCode *int32                                                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeFabricManagementChaincodesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricManagementChaincodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricManagementChaincodesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricManagementChaincodesResponseBody) SetErrorCode(v int32) *DescribeFabricManagementChaincodesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricManagementChaincodesResponseBody) SetRequestId(v string) *DescribeFabricManagementChaincodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricManagementChaincodesResponseBody) SetResult(v []*DescribeFabricManagementChaincodesResponseBodyResult) *DescribeFabricManagementChaincodesResponseBody {
	s.Result = v
	return s
}

func (s *DescribeFabricManagementChaincodesResponseBody) SetSuccess(v bool) *DescribeFabricManagementChaincodesResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricManagementChaincodesResponseBodyResult struct {
	Input   *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path    *int64  `json:"Path,omitempty" xml:"Path,omitempty"`
	Type    *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeFabricManagementChaincodesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricManagementChaincodesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeFabricManagementChaincodesResponseBodyResult) SetInput(v string) *DescribeFabricManagementChaincodesResponseBodyResult {
	s.Input = &v
	return s
}

func (s *DescribeFabricManagementChaincodesResponseBodyResult) SetName(v string) *DescribeFabricManagementChaincodesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeFabricManagementChaincodesResponseBodyResult) SetPath(v int64) *DescribeFabricManagementChaincodesResponseBodyResult {
	s.Path = &v
	return s
}

func (s *DescribeFabricManagementChaincodesResponseBodyResult) SetType(v int32) *DescribeFabricManagementChaincodesResponseBodyResult {
	s.Type = &v
	return s
}

func (s *DescribeFabricManagementChaincodesResponseBodyResult) SetVersion(v string) *DescribeFabricManagementChaincodesResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeFabricManagementChaincodesResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricManagementChaincodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricManagementChaincodesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricManagementChaincodesResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricManagementChaincodesResponse) SetHeaders(v map[string]*string) *DescribeFabricManagementChaincodesResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricManagementChaincodesResponse) SetStatusCode(v int32) *DescribeFabricManagementChaincodesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricManagementChaincodesResponse) SetBody(v *DescribeFabricManagementChaincodesResponseBody) *DescribeFabricManagementChaincodesResponse {
	s.Body = v
	return s
}

type DescribeFabricOrganizationChaincodePackageRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricOrganizationChaincodePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricOrganizationChaincodePackageRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricOrganizationChaincodePackageRequest) SetOrganizationId(v string) *DescribeFabricOrganizationChaincodePackageRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricOrganizationChaincodePackageResponseBody struct {
	ErrorCode *int32    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string   `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*string `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricOrganizationChaincodePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricOrganizationChaincodePackageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricOrganizationChaincodePackageResponseBody) SetErrorCode(v int32) *DescribeFabricOrganizationChaincodePackageResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricOrganizationChaincodePackageResponseBody) SetMessage(v string) *DescribeFabricOrganizationChaincodePackageResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeFabricOrganizationChaincodePackageResponseBody) SetRequestId(v string) *DescribeFabricOrganizationChaincodePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricOrganizationChaincodePackageResponseBody) SetResult(v []*string) *DescribeFabricOrganizationChaincodePackageResponseBody {
	s.Result = v
	return s
}

func (s *DescribeFabricOrganizationChaincodePackageResponseBody) SetSuccess(v bool) *DescribeFabricOrganizationChaincodePackageResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricOrganizationChaincodePackageResponse struct {
	Headers    map[string]*string                                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricOrganizationChaincodePackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricOrganizationChaincodePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricOrganizationChaincodePackageResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricOrganizationChaincodePackageResponse) SetHeaders(v map[string]*string) *DescribeFabricOrganizationChaincodePackageResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricOrganizationChaincodePackageResponse) SetStatusCode(v int32) *DescribeFabricOrganizationChaincodePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricOrganizationChaincodePackageResponse) SetBody(v *DescribeFabricOrganizationChaincodePackageResponseBody) *DescribeFabricOrganizationChaincodePackageResponse {
	s.Body = v
	return s
}

type DescribeFabricOrganizationEgressRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricOrganizationEgressRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricOrganizationEgressRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricOrganizationEgressRequest) SetOrganizationId(v string) *DescribeFabricOrganizationEgressRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricOrganizationEgressResponseBody struct {
	ErrorCode *int32    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*string `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricOrganizationEgressResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricOrganizationEgressResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricOrganizationEgressResponseBody) SetErrorCode(v int32) *DescribeFabricOrganizationEgressResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricOrganizationEgressResponseBody) SetRequestId(v string) *DescribeFabricOrganizationEgressResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricOrganizationEgressResponseBody) SetResult(v []*string) *DescribeFabricOrganizationEgressResponseBody {
	s.Result = v
	return s
}

func (s *DescribeFabricOrganizationEgressResponseBody) SetSuccess(v bool) *DescribeFabricOrganizationEgressResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricOrganizationEgressResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricOrganizationEgressResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricOrganizationEgressResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricOrganizationEgressResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricOrganizationEgressResponse) SetHeaders(v map[string]*string) *DescribeFabricOrganizationEgressResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricOrganizationEgressResponse) SetStatusCode(v int32) *DescribeFabricOrganizationEgressResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricOrganizationEgressResponse) SetBody(v *DescribeFabricOrganizationEgressResponseBody) *DescribeFabricOrganizationEgressResponse {
	s.Body = v
	return s
}

type DescribeFabricPeerChannelsRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeFabricPeerChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricPeerChannelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeFabricPeerChannelsRequest) SetOrganizationId(v string) *DescribeFabricPeerChannelsRequest {
	s.OrganizationId = &v
	return s
}

type DescribeFabricPeerChannelsResponseBody struct {
	ErrorCode *int32    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*string `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeFabricPeerChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricPeerChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeFabricPeerChannelsResponseBody) SetErrorCode(v int32) *DescribeFabricPeerChannelsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeFabricPeerChannelsResponseBody) SetRequestId(v string) *DescribeFabricPeerChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeFabricPeerChannelsResponseBody) SetResult(v []*string) *DescribeFabricPeerChannelsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeFabricPeerChannelsResponseBody) SetSuccess(v bool) *DescribeFabricPeerChannelsResponseBody {
	s.Success = &v
	return s
}

type DescribeFabricPeerChannelsResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeFabricPeerChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeFabricPeerChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeFabricPeerChannelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeFabricPeerChannelsResponse) SetHeaders(v map[string]*string) *DescribeFabricPeerChannelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeFabricPeerChannelsResponse) SetStatusCode(v int32) *DescribeFabricPeerChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeFabricPeerChannelsResponse) SetBody(v *DescribeFabricPeerChannelsResponseBody) *DescribeFabricPeerChannelsResponse {
	s.Body = v
	return s
}

type DescribeGovernanceTaskRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeGovernanceTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskRequest) SetChannelId(v string) *DescribeGovernanceTaskRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeGovernanceTaskRequest) SetOrganizationId(v string) *DescribeGovernanceTaskRequest {
	s.OrganizationId = &v
	return s
}

func (s *DescribeGovernanceTaskRequest) SetTaskId(v string) *DescribeGovernanceTaskRequest {
	s.TaskId = &v
	return s
}

type DescribeGovernanceTaskResponseBody struct {
	ErrorCode *int32                                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeGovernanceTaskResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeGovernanceTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBody) SetErrorCode(v int32) *DescribeGovernanceTaskResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBody) SetRequestId(v string) *DescribeGovernanceTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBody) SetResult(v *DescribeGovernanceTaskResponseBodyResult) *DescribeGovernanceTaskResponseBody {
	s.Result = v
	return s
}

func (s *DescribeGovernanceTaskResponseBody) SetSuccess(v bool) *DescribeGovernanceTaskResponseBody {
	s.Success = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResult struct {
	ChannelName *string                                          `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Content     *DescribeGovernanceTaskResponseBodyResultContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	CreateTime  *int64                                           `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator     *string                                          `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string                                          `json:"Description,omitempty" xml:"Description,omitempty"`
	Status      *string                                          `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId      *string                                          `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Type        *string                                          `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResult) SetChannelName(v string) *DescribeGovernanceTaskResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResult) SetContent(v *DescribeGovernanceTaskResponseBodyResultContent) *DescribeGovernanceTaskResponseBodyResult {
	s.Content = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResult) SetCreateTime(v int64) *DescribeGovernanceTaskResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResult) SetCreator(v string) *DescribeGovernanceTaskResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResult) SetDescription(v string) *DescribeGovernanceTaskResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResult) SetStatus(v string) *DescribeGovernanceTaskResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResult) SetTaskId(v string) *DescribeGovernanceTaskResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResult) SetType(v string) *DescribeGovernanceTaskResponseBodyResult {
	s.Type = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContent struct {
	AddedOrganizations   []*DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations   `json:"AddedOrganizations,omitempty" xml:"AddedOrganizations,omitempty" type:"Repeated"`
	ChaincodeSpecPkg     *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg       `json:"ChaincodeSpecPkg,omitempty" xml:"ChaincodeSpecPkg,omitempty" type:"Struct"`
	OrdererConfig        *DescribeGovernanceTaskResponseBodyResultContentOrdererConfig          `json:"OrdererConfig,omitempty" xml:"OrdererConfig,omitempty" type:"Struct"`
	Raw                  *string                                                                `json:"Raw,omitempty" xml:"Raw,omitempty"`
	RemovedOrganizations []*DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations `json:"RemovedOrganizations,omitempty" xml:"RemovedOrganizations,omitempty" type:"Repeated"`
	RwSets               *string                                                                `json:"RwSets,omitempty" xml:"RwSets,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContent) SetAddedOrganizations(v []*DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) *DescribeGovernanceTaskResponseBodyResultContent {
	s.AddedOrganizations = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContent) SetChaincodeSpecPkg(v *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) *DescribeGovernanceTaskResponseBodyResultContent {
	s.ChaincodeSpecPkg = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContent) SetOrdererConfig(v *DescribeGovernanceTaskResponseBodyResultContentOrdererConfig) *DescribeGovernanceTaskResponseBodyResultContent {
	s.OrdererConfig = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContent) SetRaw(v string) *DescribeGovernanceTaskResponseBodyResultContent {
	s.Raw = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContent) SetRemovedOrganizations(v []*DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) *DescribeGovernanceTaskResponseBodyResultContent {
	s.RemovedOrganizations = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContent) SetRwSets(v string) *DescribeGovernanceTaskResponseBodyResultContent {
	s.RwSets = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations struct {
	AnchorPeers         []*DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                          `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                          `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                          `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                            `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                          `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                          `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) SetAnchorPeers(v []*DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) SetCrls(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.Crls = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) SetMspId(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.MspId = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) SetMspType(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.MspType = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) SetOrderer(v bool) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.Orderer = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) SetOrdererNodes(v []*DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) SetRootCertificates(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations) SetTlsRootCertificates(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) SetHost(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) SetPort(v int32) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetAddress(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetCertificate(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetKey(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetTlsroot(v string) *DescribeGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg struct {
	Cs     *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs `json:"Cs,omitempty" xml:"Cs,omitempty" type:"Struct"`
	Policy *string                                                            `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Sha256 *string                                                            `json:"Sha256,omitempty" xml:"Sha256,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetCs(v *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Cs = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetPolicy(v string) *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Policy = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetSha256(v string) *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Sha256 = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs struct {
	Input   *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path    *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Type    *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetInput(v string) *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Input = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetName(v string) *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Name = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetPath(v string) *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Path = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetType(v int32) *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Type = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetVersion(v string) *DescribeGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Version = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentOrdererConfig struct {
	BatchTimeout      *string `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	MaxMessageCount   *int32  `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	PreferredMaxBytes *int32  `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentOrdererConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentOrdererConfig) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentOrdererConfig) SetBatchTimeout(v string) *DescribeGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.BatchTimeout = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentOrdererConfig) SetMaxMessageCount(v int32) *DescribeGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.MaxMessageCount = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentOrdererConfig) SetPreferredMaxBytes(v int32) *DescribeGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.PreferredMaxBytes = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations struct {
	AnchorPeers         []*DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                            `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                            `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                            `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                              `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                            `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                            `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetAnchorPeers(v []*DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetCrls(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.Crls = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetMspId(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.MspId = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetMspType(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.MspType = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetOrderer(v bool) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.Orderer = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetOrdererNodes(v []*DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetRootCertificates(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetTlsRootCertificates(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetHost(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetPort(v int32) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetAddress(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetCertificate(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetKey(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetTlsroot(v string) *DescribeGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type DescribeGovernanceTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGovernanceTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGovernanceTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTaskResponse) SetHeaders(v map[string]*string) *DescribeGovernanceTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeGovernanceTaskResponse) SetStatusCode(v int32) *DescribeGovernanceTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGovernanceTaskResponse) SetBody(v *DescribeGovernanceTaskResponseBody) *DescribeGovernanceTaskResponse {
	s.Body = v
	return s
}

type DescribeGovernanceTasksRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeGovernanceTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksRequest) SetChannelId(v string) *DescribeGovernanceTasksRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeGovernanceTasksRequest) SetOrganizationId(v string) *DescribeGovernanceTasksRequest {
	s.OrganizationId = &v
	return s
}

type DescribeGovernanceTasksResponseBody struct {
	ErrorCode *int32                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeGovernanceTasksResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeGovernanceTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBody) SetErrorCode(v int32) *DescribeGovernanceTasksResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBody) SetRequestId(v string) *DescribeGovernanceTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBody) SetResult(v []*DescribeGovernanceTasksResponseBodyResult) *DescribeGovernanceTasksResponseBody {
	s.Result = v
	return s
}

func (s *DescribeGovernanceTasksResponseBody) SetSuccess(v bool) *DescribeGovernanceTasksResponseBody {
	s.Success = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResult struct {
	ChannelName *string                                           `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Content     *DescribeGovernanceTasksResponseBodyResultContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	CreateTime  *int64                                            `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator     *string                                           `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string                                           `json:"Description,omitempty" xml:"Description,omitempty"`
	Status      *string                                           `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId      *string                                           `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Type        *string                                           `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResult) SetChannelName(v string) *DescribeGovernanceTasksResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResult) SetContent(v *DescribeGovernanceTasksResponseBodyResultContent) *DescribeGovernanceTasksResponseBodyResult {
	s.Content = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResult) SetCreateTime(v int64) *DescribeGovernanceTasksResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResult) SetCreator(v string) *DescribeGovernanceTasksResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResult) SetDescription(v string) *DescribeGovernanceTasksResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResult) SetStatus(v string) *DescribeGovernanceTasksResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResult) SetTaskId(v string) *DescribeGovernanceTasksResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResult) SetType(v string) *DescribeGovernanceTasksResponseBodyResult {
	s.Type = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContent struct {
	AddedOrganizations   []*DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations   `json:"AddedOrganizations,omitempty" xml:"AddedOrganizations,omitempty" type:"Repeated"`
	ChaincodeSpecPkg     *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg       `json:"ChaincodeSpecPkg,omitempty" xml:"ChaincodeSpecPkg,omitempty" type:"Struct"`
	OrdererConfig        *DescribeGovernanceTasksResponseBodyResultContentOrdererConfig          `json:"OrdererConfig,omitempty" xml:"OrdererConfig,omitempty" type:"Struct"`
	Raw                  *string                                                                 `json:"Raw,omitempty" xml:"Raw,omitempty"`
	RemovedOrganizations []*DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations `json:"RemovedOrganizations,omitempty" xml:"RemovedOrganizations,omitempty" type:"Repeated"`
	RwSets               *string                                                                 `json:"RwSets,omitempty" xml:"RwSets,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContent) SetAddedOrganizations(v []*DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) *DescribeGovernanceTasksResponseBodyResultContent {
	s.AddedOrganizations = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContent) SetChaincodeSpecPkg(v *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg) *DescribeGovernanceTasksResponseBodyResultContent {
	s.ChaincodeSpecPkg = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContent) SetOrdererConfig(v *DescribeGovernanceTasksResponseBodyResultContentOrdererConfig) *DescribeGovernanceTasksResponseBodyResultContent {
	s.OrdererConfig = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContent) SetRaw(v string) *DescribeGovernanceTasksResponseBodyResultContent {
	s.Raw = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContent) SetRemovedOrganizations(v []*DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) *DescribeGovernanceTasksResponseBodyResultContent {
	s.RemovedOrganizations = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContent) SetRwSets(v string) *DescribeGovernanceTasksResponseBodyResultContent {
	s.RwSets = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations struct {
	AnchorPeers         []*DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                           `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                           `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                           `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                             `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                           `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                           `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) SetAnchorPeers(v []*DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) SetCrls(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations {
	s.Crls = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) SetMspId(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations {
	s.MspId = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) SetMspType(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations {
	s.MspType = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) SetOrderer(v bool) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations {
	s.Orderer = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) SetOrdererNodes(v []*DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) SetRootCertificates(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations) SetTlsRootCertificates(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers) SetHost(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers) SetPort(v int32) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes) SetAddress(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes) SetCertificate(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes) SetKey(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes) SetTlsroot(v string) *DescribeGovernanceTasksResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg struct {
	Cs     *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs `json:"Cs,omitempty" xml:"Cs,omitempty" type:"Struct"`
	Policy *string                                                             `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Sha256 *string                                                             `json:"Sha256,omitempty" xml:"Sha256,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg) SetCs(v *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs) *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg {
	s.Cs = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg) SetPolicy(v string) *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg {
	s.Policy = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg) SetSha256(v string) *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkg {
	s.Sha256 = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs struct {
	Input   *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path    *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Type    *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs) SetInput(v string) *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs {
	s.Input = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs) SetName(v string) *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs {
	s.Name = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs) SetPath(v string) *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs {
	s.Path = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs) SetType(v int32) *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs {
	s.Type = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs) SetVersion(v string) *DescribeGovernanceTasksResponseBodyResultContentChaincodeSpecPkgCs {
	s.Version = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentOrdererConfig struct {
	BatchTimeout      *string `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	MaxMessageCount   *int32  `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	PreferredMaxBytes *int32  `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentOrdererConfig) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentOrdererConfig) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentOrdererConfig) SetBatchTimeout(v string) *DescribeGovernanceTasksResponseBodyResultContentOrdererConfig {
	s.BatchTimeout = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentOrdererConfig) SetMaxMessageCount(v int32) *DescribeGovernanceTasksResponseBodyResultContentOrdererConfig {
	s.MaxMessageCount = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentOrdererConfig) SetPreferredMaxBytes(v int32) *DescribeGovernanceTasksResponseBodyResultContentOrdererConfig {
	s.PreferredMaxBytes = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations struct {
	AnchorPeers         []*DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                             `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                             `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                             `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                               `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                             `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                             `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) SetAnchorPeers(v []*DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) SetCrls(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations {
	s.Crls = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) SetMspId(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations {
	s.MspId = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) SetMspType(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations {
	s.MspType = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) SetOrderer(v bool) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations {
	s.Orderer = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) SetOrdererNodes(v []*DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) SetRootCertificates(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations) SetTlsRootCertificates(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetHost(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetPort(v int32) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetAddress(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetCertificate(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetKey(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetTlsroot(v string) *DescribeGovernanceTasksResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type DescribeGovernanceTasksResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeGovernanceTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeGovernanceTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeGovernanceTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeGovernanceTasksResponse) SetHeaders(v map[string]*string) *DescribeGovernanceTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeGovernanceTasksResponse) SetStatusCode(v int32) *DescribeGovernanceTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeGovernanceTasksResponse) SetBody(v *DescribeGovernanceTasksResponseBody) *DescribeGovernanceTasksResponse {
	s.Body = v
	return s
}

type DescribeInvitationCodeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeInvitationCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvitationCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvitationCodeRequest) SetConsortiumId(v string) *DescribeInvitationCodeRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeInvitationCodeResponseBody struct {
	// example:
	//
	// 11
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// example:
	//
	// 11
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeInvitationCodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInvitationCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvitationCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInvitationCodeResponseBody) SetDynamicCode(v string) *DescribeInvitationCodeResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeInvitationCodeResponseBody) SetDynamicMessage(v string) *DescribeInvitationCodeResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeInvitationCodeResponseBody) SetErrorCode(v int32) *DescribeInvitationCodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInvitationCodeResponseBody) SetRequestId(v string) *DescribeInvitationCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInvitationCodeResponseBody) SetResult(v *DescribeInvitationCodeResponseBodyResult) *DescribeInvitationCodeResponseBody {
	s.Result = v
	return s
}

func (s *DescribeInvitationCodeResponseBody) SetSuccess(v bool) *DescribeInvitationCodeResponseBody {
	s.Success = &v
	return s
}

type DescribeInvitationCodeResponseBodyResult struct {
	// example:
	//
	// true
	Accepted *bool `json:"Accepted,omitempty" xml:"Accepted,omitempty"`
	// example:
	//
	// code
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// abc@126.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 1544411108000
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// Id
	//
	// example:
	//
	// 2
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1544411108000
	SendTime *string `json:"SendTime,omitempty" xml:"SendTime,omitempty"`
	// example:
	//
	// 27534
	SenderBid *string `json:"SenderBid,omitempty" xml:"SenderBid,omitempty"`
	// example:
	//
	// 26345345
	SenderId *int64 `json:"SenderId,omitempty" xml:"SenderId,omitempty"`
	// example:
	//
	// uid-35324
	SenderName *string `json:"SenderName,omitempty" xml:"SenderName,omitempty"`
	// URL
	//
	// example:
	//
	// http://baas.console.aliyun.test/invite?code=92e7ef1934892
	Url *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s DescribeInvitationCodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvitationCodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeInvitationCodeResponseBodyResult) SetAccepted(v bool) *DescribeInvitationCodeResponseBodyResult {
	s.Accepted = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetCode(v string) *DescribeInvitationCodeResponseBodyResult {
	s.Code = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetConsortiumId(v string) *DescribeInvitationCodeResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetEmail(v string) *DescribeInvitationCodeResponseBodyResult {
	s.Email = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetExpireTime(v string) *DescribeInvitationCodeResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetId(v int32) *DescribeInvitationCodeResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetSendTime(v string) *DescribeInvitationCodeResponseBodyResult {
	s.SendTime = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetSenderBid(v string) *DescribeInvitationCodeResponseBodyResult {
	s.SenderBid = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetSenderId(v int64) *DescribeInvitationCodeResponseBodyResult {
	s.SenderId = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetSenderName(v string) *DescribeInvitationCodeResponseBodyResult {
	s.SenderName = &v
	return s
}

func (s *DescribeInvitationCodeResponseBodyResult) SetUrl(v string) *DescribeInvitationCodeResponseBodyResult {
	s.Url = &v
	return s
}

type DescribeInvitationCodeResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInvitationCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInvitationCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvitationCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvitationCodeResponse) SetHeaders(v map[string]*string) *DescribeInvitationCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeInvitationCodeResponse) SetStatusCode(v int32) *DescribeInvitationCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInvitationCodeResponse) SetBody(v *DescribeInvitationCodeResponseBody) *DescribeInvitationCodeResponse {
	s.Body = v
	return s
}

type DescribeInvitationListRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DescribeInvitationListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvitationListRequest) GoString() string {
	return s.String()
}

func (s *DescribeInvitationListRequest) SetConsortiumId(v string) *DescribeInvitationListRequest {
	s.ConsortiumId = &v
	return s
}

type DescribeInvitationListResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeInvitationListResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInvitationListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvitationListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInvitationListResponseBody) SetErrorCode(v int32) *DescribeInvitationListResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInvitationListResponseBody) SetRequestId(v string) *DescribeInvitationListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInvitationListResponseBody) SetResult(v []*DescribeInvitationListResponseBodyResult) *DescribeInvitationListResponseBody {
	s.Result = v
	return s
}

func (s *DescribeInvitationListResponseBody) SetSuccess(v bool) *DescribeInvitationListResponseBody {
	s.Success = &v
	return s
}

type DescribeInvitationListResponseBodyResult struct {
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// abc@alibaba.com
	Email *string `json:"Email,omitempty" xml:"Email,omitempty"`
	// example:
	//
	// 1544411108000
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// 1544411108000
	SendTime *string `json:"SendTime,omitempty" xml:"SendTime,omitempty"`
}

func (s DescribeInvitationListResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvitationListResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeInvitationListResponseBodyResult) SetCode(v string) *DescribeInvitationListResponseBodyResult {
	s.Code = &v
	return s
}

func (s *DescribeInvitationListResponseBodyResult) SetConsortiumId(v string) *DescribeInvitationListResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeInvitationListResponseBodyResult) SetEmail(v string) *DescribeInvitationListResponseBodyResult {
	s.Email = &v
	return s
}

func (s *DescribeInvitationListResponseBodyResult) SetExpireTime(v string) *DescribeInvitationListResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *DescribeInvitationListResponseBodyResult) SetSendTime(v string) *DescribeInvitationListResponseBodyResult {
	s.SendTime = &v
	return s
}

type DescribeInvitationListResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInvitationListResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInvitationListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInvitationListResponse) GoString() string {
	return s.String()
}

func (s *DescribeInvitationListResponse) SetHeaders(v map[string]*string) *DescribeInvitationListResponse {
	s.Headers = v
	return s
}

func (s *DescribeInvitationListResponse) SetStatusCode(v int32) *DescribeInvitationListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInvitationListResponse) SetBody(v *DescribeInvitationListResponseBody) *DescribeInvitationListResponse {
	s.Body = v
	return s
}

type DescribeInviterRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// 200
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s DescribeInviterRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInviterRequest) GoString() string {
	return s.String()
}

func (s *DescribeInviterRequest) SetCode(v string) *DescribeInviterRequest {
	s.Code = &v
	return s
}

type DescribeInviterResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeInviterResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInviterResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInviterResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInviterResponseBody) SetErrorCode(v int32) *DescribeInviterResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeInviterResponseBody) SetRequestId(v string) *DescribeInviterResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInviterResponseBody) SetResult(v *DescribeInviterResponseBodyResult) *DescribeInviterResponseBody {
	s.Result = v
	return s
}

func (s *DescribeInviterResponseBody) SetSuccess(v bool) *DescribeInviterResponseBody {
	s.Success = &v
	return s
}

type DescribeInviterResponseBodyResult struct {
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// name
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	// example:
	//
	// 1544411108000
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// 3524234
	InviterId *int64 `json:"InviterId,omitempty" xml:"InviterId,omitempty"`
	// example:
	//
	// name
	InviterName *string `json:"InviterName,omitempty" xml:"InviterName,omitempty"`
}

func (s DescribeInviterResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeInviterResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeInviterResponseBodyResult) SetConsortiumId(v string) *DescribeInviterResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeInviterResponseBodyResult) SetConsortiumName(v string) *DescribeInviterResponseBodyResult {
	s.ConsortiumName = &v
	return s
}

func (s *DescribeInviterResponseBodyResult) SetExpireTime(v string) *DescribeInviterResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *DescribeInviterResponseBodyResult) SetInviterId(v int64) *DescribeInviterResponseBodyResult {
	s.InviterId = &v
	return s
}

func (s *DescribeInviterResponseBodyResult) SetInviterName(v string) *DescribeInviterResponseBodyResult {
	s.InviterName = &v
	return s
}

type DescribeInviterResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeInviterResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeInviterResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInviterResponse) GoString() string {
	return s.String()
}

func (s *DescribeInviterResponse) SetHeaders(v map[string]*string) *DescribeInviterResponse {
	s.Headers = v
	return s
}

func (s *DescribeInviterResponse) SetStatusCode(v int32) *DescribeInviterResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInviterResponse) SetBody(v *DescribeInviterResponseBody) *DescribeInviterResponse {
	s.Body = v
	return s
}

type DescribeLatest15BlocksRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeLatest15BlocksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatest15BlocksRequest) GoString() string {
	return s.String()
}

func (s *DescribeLatest15BlocksRequest) SetBizid(v string) *DescribeLatest15BlocksRequest {
	s.Bizid = &v
	return s
}

type DescribeLatest15BlocksResponseBody struct {
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeLatest15BlocksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatest15BlocksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLatest15BlocksResponseBody) SetRequestId(v string) *DescribeLatest15BlocksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLatest15BlocksResponseBody) SetResult(v []map[string]interface{}) *DescribeLatest15BlocksResponseBody {
	s.Result = v
	return s
}

type DescribeLatest15BlocksResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLatest15BlocksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLatest15BlocksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatest15BlocksResponse) GoString() string {
	return s.String()
}

func (s *DescribeLatest15BlocksResponse) SetHeaders(v map[string]*string) *DescribeLatest15BlocksResponse {
	s.Headers = v
	return s
}

func (s *DescribeLatest15BlocksResponse) SetStatusCode(v int32) *DescribeLatest15BlocksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLatest15BlocksResponse) SetBody(v *DescribeLatest15BlocksResponseBody) *DescribeLatest15BlocksResponse {
	s.Body = v
	return s
}

type DescribeLatest15TransDigestsRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeLatest15TransDigestsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatest15TransDigestsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLatest15TransDigestsRequest) SetBizid(v string) *DescribeLatest15TransDigestsRequest {
	s.Bizid = &v
	return s
}

type DescribeLatest15TransDigestsResponseBody struct {
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeLatest15TransDigestsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatest15TransDigestsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLatest15TransDigestsResponseBody) SetRequestId(v string) *DescribeLatest15TransDigestsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLatest15TransDigestsResponseBody) SetResult(v []map[string]interface{}) *DescribeLatest15TransDigestsResponseBody {
	s.Result = v
	return s
}

type DescribeLatest15TransDigestsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLatest15TransDigestsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLatest15TransDigestsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatest15TransDigestsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLatest15TransDigestsResponse) SetHeaders(v map[string]*string) *DescribeLatest15TransDigestsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLatest15TransDigestsResponse) SetStatusCode(v int32) *DescribeLatest15TransDigestsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLatest15TransDigestsResponse) SetBody(v *DescribeLatest15TransDigestsResponseBody) *DescribeLatest15TransDigestsResponse {
	s.Body = v
	return s
}

type DescribeLatestBlocksRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeLatestBlocksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatestBlocksRequest) GoString() string {
	return s.String()
}

func (s *DescribeLatestBlocksRequest) SetBizid(v string) *DescribeLatestBlocksRequest {
	s.Bizid = &v
	return s
}

type DescribeLatestBlocksResponseBody struct {
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeLatestBlocksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatestBlocksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLatestBlocksResponseBody) SetRequestId(v string) *DescribeLatestBlocksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLatestBlocksResponseBody) SetResult(v []map[string]interface{}) *DescribeLatestBlocksResponseBody {
	s.Result = v
	return s
}

type DescribeLatestBlocksResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLatestBlocksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLatestBlocksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatestBlocksResponse) GoString() string {
	return s.String()
}

func (s *DescribeLatestBlocksResponse) SetHeaders(v map[string]*string) *DescribeLatestBlocksResponse {
	s.Headers = v
	return s
}

func (s *DescribeLatestBlocksResponse) SetStatusCode(v int32) *DescribeLatestBlocksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLatestBlocksResponse) SetBody(v *DescribeLatestBlocksResponseBody) *DescribeLatestBlocksResponse {
	s.Body = v
	return s
}

type DescribeLatestTransactionDigestsRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeLatestTransactionDigestsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatestTransactionDigestsRequest) GoString() string {
	return s.String()
}

func (s *DescribeLatestTransactionDigestsRequest) SetBizid(v string) *DescribeLatestTransactionDigestsRequest {
	s.Bizid = &v
	return s
}

type DescribeLatestTransactionDigestsResponseBody struct {
	RequestId *string                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []map[string]interface{} `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeLatestTransactionDigestsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatestTransactionDigestsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeLatestTransactionDigestsResponseBody) SetRequestId(v string) *DescribeLatestTransactionDigestsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeLatestTransactionDigestsResponseBody) SetResult(v []map[string]interface{}) *DescribeLatestTransactionDigestsResponseBody {
	s.Result = v
	return s
}

type DescribeLatestTransactionDigestsResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeLatestTransactionDigestsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeLatestTransactionDigestsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeLatestTransactionDigestsResponse) GoString() string {
	return s.String()
}

func (s *DescribeLatestTransactionDigestsResponse) SetHeaders(v map[string]*string) *DescribeLatestTransactionDigestsResponse {
	s.Headers = v
	return s
}

func (s *DescribeLatestTransactionDigestsResponse) SetStatusCode(v int32) *DescribeLatestTransactionDigestsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeLatestTransactionDigestsResponse) SetBody(v *DescribeLatestTransactionDigestsResponseBody) *DescribeLatestTransactionDigestsResponse {
	s.Body = v
	return s
}

type DescribeMemberRoleRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeMemberRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMemberRoleRequest) GoString() string {
	return s.String()
}

func (s *DescribeMemberRoleRequest) SetBizid(v string) *DescribeMemberRoleRequest {
	s.Bizid = &v
	return s
}

type DescribeMemberRoleResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeMemberRoleResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeMemberRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMemberRoleResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMemberRoleResponseBody) SetRequestId(v string) *DescribeMemberRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMemberRoleResponseBody) SetResult(v *DescribeMemberRoleResponseBodyResult) *DescribeMemberRoleResponseBody {
	s.Result = v
	return s
}

type DescribeMemberRoleResponseBodyResult struct {
	Role *int32 `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s DescribeMemberRoleResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeMemberRoleResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeMemberRoleResponseBodyResult) SetRole(v int32) *DescribeMemberRoleResponseBodyResult {
	s.Role = &v
	return s
}

type DescribeMemberRoleResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMemberRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMemberRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMemberRoleResponse) GoString() string {
	return s.String()
}

func (s *DescribeMemberRoleResponse) SetHeaders(v map[string]*string) *DescribeMemberRoleResponse {
	s.Headers = v
	return s
}

func (s *DescribeMemberRoleResponse) SetStatusCode(v int32) *DescribeMemberRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMemberRoleResponse) SetBody(v *DescribeMemberRoleResponseBody) *DescribeMemberRoleResponse {
	s.Body = v
	return s
}

type DescribeMembersRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Current  *int32  `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s DescribeMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMembersRequest) GoString() string {
	return s.String()
}

func (s *DescribeMembersRequest) SetBizid(v string) *DescribeMembersRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeMembersRequest) SetCurrent(v int32) *DescribeMembersRequest {
	s.Current = &v
	return s
}

func (s *DescribeMembersRequest) SetPageSize(v int32) *DescribeMembersRequest {
	s.PageSize = &v
	return s
}

type DescribeMembersResponseBody struct {
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeMembersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMembersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMembersResponseBody) SetRequestId(v string) *DescribeMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMembersResponseBody) SetResult(v *DescribeMembersResponseBodyResult) *DescribeMembersResponseBody {
	s.Result = v
	return s
}

type DescribeMembersResponseBodyResult struct {
	MemberList []*string                                    `json:"MemberList,omitempty" xml:"MemberList,omitempty" type:"Repeated"`
	Pagination *DescribeMembersResponseBodyResultPagination `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s DescribeMembersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeMembersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeMembersResponseBodyResult) SetMemberList(v []*string) *DescribeMembersResponseBodyResult {
	s.MemberList = v
	return s
}

func (s *DescribeMembersResponseBodyResult) SetPagination(v *DescribeMembersResponseBodyResultPagination) *DescribeMembersResponseBodyResult {
	s.Pagination = v
	return s
}

type DescribeMembersResponseBodyResultPagination struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeMembersResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s DescribeMembersResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *DescribeMembersResponseBodyResultPagination) SetCurrent(v int32) *DescribeMembersResponseBodyResultPagination {
	s.Current = &v
	return s
}

func (s *DescribeMembersResponseBodyResultPagination) SetPageSize(v int32) *DescribeMembersResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *DescribeMembersResponseBodyResultPagination) SetTotal(v int32) *DescribeMembersResponseBodyResultPagination {
	s.Total = &v
	return s
}

type DescribeMembersResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMembersResponse) GoString() string {
	return s.String()
}

func (s *DescribeMembersResponse) SetHeaders(v map[string]*string) *DescribeMembersResponse {
	s.Headers = v
	return s
}

func (s *DescribeMembersResponse) SetStatusCode(v int32) *DescribeMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMembersResponse) SetBody(v *DescribeMembersResponseBody) *DescribeMembersResponse {
	s.Body = v
	return s
}

type DescribeMetricRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	InnerIp  *string `json:"InnerIp,omitempty" xml:"InnerIp,omitempty"`
	Metric   *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	Period   *string `json:"Period,omitempty" xml:"Period,omitempty"`
	Port     *string `json:"Port,omitempty" xml:"Port,omitempty"`
	TimeArea *string `json:"TimeArea,omitempty" xml:"TimeArea,omitempty"`
}

func (s DescribeMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricRequest) GoString() string {
	return s.String()
}

func (s *DescribeMetricRequest) SetBizid(v string) *DescribeMetricRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeMetricRequest) SetInnerIp(v string) *DescribeMetricRequest {
	s.InnerIp = &v
	return s
}

func (s *DescribeMetricRequest) SetMetric(v string) *DescribeMetricRequest {
	s.Metric = &v
	return s
}

func (s *DescribeMetricRequest) SetPeriod(v string) *DescribeMetricRequest {
	s.Period = &v
	return s
}

func (s *DescribeMetricRequest) SetPort(v string) *DescribeMetricRequest {
	s.Port = &v
	return s
}

func (s *DescribeMetricRequest) SetTimeArea(v string) *DescribeMetricRequest {
	s.TimeArea = &v
	return s
}

type DescribeMetricResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMetricResponseBody) SetRequestId(v string) *DescribeMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMetricResponseBody) SetResult(v string) *DescribeMetricResponseBody {
	s.Result = &v
	return s
}

type DescribeMetricResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMetricResponse) GoString() string {
	return s.String()
}

func (s *DescribeMetricResponse) SetHeaders(v map[string]*string) *DescribeMetricResponse {
	s.Headers = v
	return s
}

func (s *DescribeMetricResponse) SetStatusCode(v int32) *DescribeMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMetricResponse) SetBody(v *DescribeMetricResponseBody) *DescribeMetricResponse {
	s.Body = v
	return s
}

type DescribeMyBlockchainsResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeMyBlockchainsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeMyBlockchainsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMyBlockchainsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMyBlockchainsResponseBody) SetRequestId(v string) *DescribeMyBlockchainsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBody) SetResult(v []*DescribeMyBlockchainsResponseBodyResult) *DescribeMyBlockchainsResponseBody {
	s.Result = v
	return s
}

type DescribeMyBlockchainsResponseBodyResult struct {
	Bizid        *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Createtime   *int64  `json:"Createtime,omitempty" xml:"Createtime,omitempty"`
	Id           *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	RejectReason *string `json:"RejectReason,omitempty" xml:"RejectReason,omitempty"`
	ReqAddr      *string `json:"ReqAddr,omitempty" xml:"ReqAddr,omitempty"`
	SignedAddr   *string `json:"SignedAddr,omitempty" xml:"SignedAddr,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Updatetime   *int64  `json:"Updatetime,omitempty" xml:"Updatetime,omitempty"`
	Username     *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeMyBlockchainsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeMyBlockchainsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetBizid(v string) *DescribeMyBlockchainsResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetCreatetime(v int64) *DescribeMyBlockchainsResponseBodyResult {
	s.Createtime = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetId(v int32) *DescribeMyBlockchainsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetRejectReason(v string) *DescribeMyBlockchainsResponseBodyResult {
	s.RejectReason = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetReqAddr(v string) *DescribeMyBlockchainsResponseBodyResult {
	s.ReqAddr = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetSignedAddr(v string) *DescribeMyBlockchainsResponseBodyResult {
	s.SignedAddr = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetStatus(v int32) *DescribeMyBlockchainsResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetUpdatetime(v int64) *DescribeMyBlockchainsResponseBodyResult {
	s.Updatetime = &v
	return s
}

func (s *DescribeMyBlockchainsResponseBodyResult) SetUsername(v string) *DescribeMyBlockchainsResponseBodyResult {
	s.Username = &v
	return s
}

type DescribeMyBlockchainsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMyBlockchainsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMyBlockchainsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMyBlockchainsResponse) GoString() string {
	return s.String()
}

func (s *DescribeMyBlockchainsResponse) SetHeaders(v map[string]*string) *DescribeMyBlockchainsResponse {
	s.Headers = v
	return s
}

func (s *DescribeMyBlockchainsResponse) SetStatusCode(v int32) *DescribeMyBlockchainsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMyBlockchainsResponse) SetBody(v *DescribeMyBlockchainsResponseBody) *DescribeMyBlockchainsResponse {
	s.Body = v
	return s
}

type DescribeMyBlockchanInfosResponseBody struct {
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeMyBlockchanInfosResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeMyBlockchanInfosResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMyBlockchanInfosResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMyBlockchanInfosResponseBody) SetRequestId(v string) *DescribeMyBlockchanInfosResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBody) SetResult(v []*DescribeMyBlockchanInfosResponseBodyResult) *DescribeMyBlockchanInfosResponseBody {
	s.Result = v
	return s
}

type DescribeMyBlockchanInfosResponseBodyResult struct {
	AbnormalNodes  *int32                                                    `json:"AbnormalNodes,omitempty" xml:"AbnormalNodes,omitempty"`
	Bizid          *string                                                   `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	BlockHeight    *int32                                                    `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	CreateTime     *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsRole         *bool                                                     `json:"IsRole,omitempty" xml:"IsRole,omitempty"`
	Name           *string                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeInfoList   []*DescribeMyBlockchanInfosResponseBodyResultNodeInfoList `json:"NodeInfoList,omitempty" xml:"NodeInfoList,omitempty" type:"Repeated"`
	NodeNumber     *int32                                                    `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Normal         *bool                                                     `json:"Normal,omitempty" xml:"Normal,omitempty"`
	TransactionSum *int32                                                    `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
	Version        *string                                                   `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeMyBlockchanInfosResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeMyBlockchanInfosResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetAbnormalNodes(v int32) *DescribeMyBlockchanInfosResponseBodyResult {
	s.AbnormalNodes = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetBizid(v string) *DescribeMyBlockchanInfosResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetBlockHeight(v int32) *DescribeMyBlockchanInfosResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetCreateTime(v int64) *DescribeMyBlockchanInfosResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetIsRole(v bool) *DescribeMyBlockchanInfosResponseBodyResult {
	s.IsRole = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetName(v string) *DescribeMyBlockchanInfosResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetNodeInfoList(v []*DescribeMyBlockchanInfosResponseBodyResultNodeInfoList) *DescribeMyBlockchanInfosResponseBodyResult {
	s.NodeInfoList = v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetNodeNumber(v int32) *DescribeMyBlockchanInfosResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetNormal(v bool) *DescribeMyBlockchanInfosResponseBodyResult {
	s.Normal = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetTransactionSum(v int32) *DescribeMyBlockchanInfosResponseBodyResult {
	s.TransactionSum = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResult) SetVersion(v string) *DescribeMyBlockchanInfosResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeMyBlockchanInfosResponseBodyResultNodeInfoList struct {
	BlockHeight *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Status      *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeMyBlockchanInfosResponseBodyResultNodeInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMyBlockchanInfosResponseBodyResultNodeInfoList) GoString() string {
	return s.String()
}

func (s *DescribeMyBlockchanInfosResponseBodyResultNodeInfoList) SetBlockHeight(v int64) *DescribeMyBlockchanInfosResponseBodyResultNodeInfoList {
	s.BlockHeight = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResultNodeInfoList) SetNodeName(v string) *DescribeMyBlockchanInfosResponseBodyResultNodeInfoList {
	s.NodeName = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResultNodeInfoList) SetStatus(v bool) *DescribeMyBlockchanInfosResponseBodyResultNodeInfoList {
	s.Status = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponseBodyResultNodeInfoList) SetVersion(v string) *DescribeMyBlockchanInfosResponseBodyResultNodeInfoList {
	s.Version = &v
	return s
}

type DescribeMyBlockchanInfosResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMyBlockchanInfosResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMyBlockchanInfosResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMyBlockchanInfosResponse) GoString() string {
	return s.String()
}

func (s *DescribeMyBlockchanInfosResponse) SetHeaders(v map[string]*string) *DescribeMyBlockchanInfosResponse {
	s.Headers = v
	return s
}

func (s *DescribeMyBlockchanInfosResponse) SetStatusCode(v int32) *DescribeMyBlockchanInfosResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMyBlockchanInfosResponse) SetBody(v *DescribeMyBlockchanInfosResponseBody) *DescribeMyBlockchanInfosResponse {
	s.Body = v
	return s
}

type DescribeMySuccessAppliesResponseBody struct {
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeMySuccessAppliesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeMySuccessAppliesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMySuccessAppliesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMySuccessAppliesResponseBody) SetRequestId(v string) *DescribeMySuccessAppliesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBody) SetResult(v []*DescribeMySuccessAppliesResponseBodyResult) *DescribeMySuccessAppliesResponseBody {
	s.Result = v
	return s
}

type DescribeMySuccessAppliesResponseBodyResult struct {
	AbnormalNodes  *int32                                                    `json:"AbnormalNodes,omitempty" xml:"AbnormalNodes,omitempty"`
	Bizid          *string                                                   `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	BlockHeight    *int32                                                    `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	CreateTime     *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsRole         *bool                                                     `json:"IsRole,omitempty" xml:"IsRole,omitempty"`
	Name           *string                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeInfoList   []*DescribeMySuccessAppliesResponseBodyResultNodeInfoList `json:"NodeInfoList,omitempty" xml:"NodeInfoList,omitempty" type:"Repeated"`
	NodeNumber     *int32                                                    `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Normal         *bool                                                     `json:"Normal,omitempty" xml:"Normal,omitempty"`
	TransactionSum *int32                                                    `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
	Version        *string                                                   `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeMySuccessAppliesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeMySuccessAppliesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetAbnormalNodes(v int32) *DescribeMySuccessAppliesResponseBodyResult {
	s.AbnormalNodes = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetBizid(v string) *DescribeMySuccessAppliesResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetBlockHeight(v int32) *DescribeMySuccessAppliesResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetCreateTime(v int64) *DescribeMySuccessAppliesResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetIsRole(v bool) *DescribeMySuccessAppliesResponseBodyResult {
	s.IsRole = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetName(v string) *DescribeMySuccessAppliesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetNodeInfoList(v []*DescribeMySuccessAppliesResponseBodyResultNodeInfoList) *DescribeMySuccessAppliesResponseBodyResult {
	s.NodeInfoList = v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetNodeNumber(v int32) *DescribeMySuccessAppliesResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetNormal(v bool) *DescribeMySuccessAppliesResponseBodyResult {
	s.Normal = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetTransactionSum(v int32) *DescribeMySuccessAppliesResponseBodyResult {
	s.TransactionSum = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResult) SetVersion(v string) *DescribeMySuccessAppliesResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeMySuccessAppliesResponseBodyResultNodeInfoList struct {
	BlockHeight *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Status      *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeMySuccessAppliesResponseBodyResultNodeInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMySuccessAppliesResponseBodyResultNodeInfoList) GoString() string {
	return s.String()
}

func (s *DescribeMySuccessAppliesResponseBodyResultNodeInfoList) SetBlockHeight(v int64) *DescribeMySuccessAppliesResponseBodyResultNodeInfoList {
	s.BlockHeight = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResultNodeInfoList) SetNodeName(v string) *DescribeMySuccessAppliesResponseBodyResultNodeInfoList {
	s.NodeName = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResultNodeInfoList) SetStatus(v bool) *DescribeMySuccessAppliesResponseBodyResultNodeInfoList {
	s.Status = &v
	return s
}

func (s *DescribeMySuccessAppliesResponseBodyResultNodeInfoList) SetVersion(v string) *DescribeMySuccessAppliesResponseBodyResultNodeInfoList {
	s.Version = &v
	return s
}

type DescribeMySuccessAppliesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMySuccessAppliesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMySuccessAppliesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMySuccessAppliesResponse) GoString() string {
	return s.String()
}

func (s *DescribeMySuccessAppliesResponse) SetHeaders(v map[string]*string) *DescribeMySuccessAppliesResponse {
	s.Headers = v
	return s
}

func (s *DescribeMySuccessAppliesResponse) SetStatusCode(v int32) *DescribeMySuccessAppliesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMySuccessAppliesResponse) SetBody(v *DescribeMySuccessAppliesResponseBody) *DescribeMySuccessAppliesResponse {
	s.Body = v
	return s
}

type DescribeMySuccessfulApplicationResponseBody struct {
	RequestId *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeMySuccessfulApplicationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeMySuccessfulApplicationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMySuccessfulApplicationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMySuccessfulApplicationResponseBody) SetRequestId(v string) *DescribeMySuccessfulApplicationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBody) SetResult(v []*DescribeMySuccessfulApplicationResponseBodyResult) *DescribeMySuccessfulApplicationResponseBody {
	s.Result = v
	return s
}

type DescribeMySuccessfulApplicationResponseBodyResult struct {
	AbnormalNodes  *int32                                                           `json:"AbnormalNodes,omitempty" xml:"AbnormalNodes,omitempty"`
	Bizid          *string                                                          `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	BlockHeight    *int32                                                           `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	CreateTime     *int64                                                           `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsRole         *bool                                                            `json:"IsRole,omitempty" xml:"IsRole,omitempty"`
	Name           *string                                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeInfoList   []*DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList `json:"NodeInfoList,omitempty" xml:"NodeInfoList,omitempty" type:"Repeated"`
	NodeNumber     *int32                                                           `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Normal         *bool                                                            `json:"Normal,omitempty" xml:"Normal,omitempty"`
	TransactionSum *int32                                                           `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
	Version        *string                                                          `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeMySuccessfulApplicationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeMySuccessfulApplicationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetAbnormalNodes(v int32) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.AbnormalNodes = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetBizid(v string) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetBlockHeight(v int32) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetCreateTime(v int64) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetIsRole(v bool) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.IsRole = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetName(v string) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetNodeInfoList(v []*DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.NodeInfoList = v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetNodeNumber(v int32) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetNormal(v bool) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.Normal = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetTransactionSum(v int32) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.TransactionSum = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResult) SetVersion(v string) *DescribeMySuccessfulApplicationResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList struct {
	BlockHeight *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Status      *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList) String() string {
	return tea.Prettify(s)
}

func (s DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList) GoString() string {
	return s.String()
}

func (s *DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList) SetBlockHeight(v int64) *DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList {
	s.BlockHeight = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList) SetNodeName(v string) *DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList {
	s.NodeName = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList) SetStatus(v bool) *DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList {
	s.Status = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList) SetVersion(v string) *DescribeMySuccessfulApplicationResponseBodyResultNodeInfoList {
	s.Version = &v
	return s
}

type DescribeMySuccessfulApplicationResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeMySuccessfulApplicationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeMySuccessfulApplicationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMySuccessfulApplicationResponse) GoString() string {
	return s.String()
}

func (s *DescribeMySuccessfulApplicationResponse) SetHeaders(v map[string]*string) *DescribeMySuccessfulApplicationResponse {
	s.Headers = v
	return s
}

func (s *DescribeMySuccessfulApplicationResponse) SetStatusCode(v int32) *DescribeMySuccessfulApplicationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeMySuccessfulApplicationResponse) SetBody(v *DescribeMySuccessfulApplicationResponseBody) *DescribeMySuccessfulApplicationResponse {
	s.Body = v
	return s
}

type DescribeNetstatURLRequest struct {
	// This parameter is required.
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s DescribeNetstatURLRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetstatURLRequest) GoString() string {
	return s.String()
}

func (s *DescribeNetstatURLRequest) SetId(v string) *DescribeNetstatURLRequest {
	s.Id = &v
	return s
}

type DescribeNetstatURLResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeNetstatURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetstatURLResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeNetstatURLResponseBody) SetErrorCode(v int32) *DescribeNetstatURLResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeNetstatURLResponseBody) SetRequestId(v string) *DescribeNetstatURLResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeNetstatURLResponseBody) SetResult(v string) *DescribeNetstatURLResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeNetstatURLResponseBody) SetSuccess(v bool) *DescribeNetstatURLResponseBody {
	s.Success = &v
	return s
}

type DescribeNetstatURLResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeNetstatURLResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeNetstatURLResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeNetstatURLResponse) GoString() string {
	return s.String()
}

func (s *DescribeNetstatURLResponse) SetHeaders(v map[string]*string) *DescribeNetstatURLResponse {
	s.Headers = v
	return s
}

func (s *DescribeNetstatURLResponse) SetStatusCode(v int32) *DescribeNetstatURLResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeNetstatURLResponse) SetBody(v *DescribeNetstatURLResponseBody) *DescribeNetstatURLResponse {
	s.Body = v
	return s
}

type DescribeOrdererLogsRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	Lines        *string `json:"Lines,omitempty" xml:"Lines,omitempty"`
	// This parameter is required.
	OrdererName *string `json:"OrdererName,omitempty" xml:"OrdererName,omitempty"`
}

func (s DescribeOrdererLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrdererLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrdererLogsRequest) SetConsortiumId(v string) *DescribeOrdererLogsRequest {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeOrdererLogsRequest) SetLines(v string) *DescribeOrdererLogsRequest {
	s.Lines = &v
	return s
}

func (s *DescribeOrdererLogsRequest) SetOrdererName(v string) *DescribeOrdererLogsRequest {
	s.OrdererName = &v
	return s
}

type DescribeOrdererLogsResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrdererLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrdererLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrdererLogsResponseBody) SetErrorCode(v int32) *DescribeOrdererLogsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrdererLogsResponseBody) SetRequestId(v string) *DescribeOrdererLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrdererLogsResponseBody) SetResult(v string) *DescribeOrdererLogsResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeOrdererLogsResponseBody) SetSuccess(v bool) *DescribeOrdererLogsResponseBody {
	s.Success = &v
	return s
}

type DescribeOrdererLogsResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrdererLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrdererLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrdererLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrdererLogsResponse) SetHeaders(v map[string]*string) *DescribeOrdererLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrdererLogsResponse) SetStatusCode(v int32) *DescribeOrdererLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrdererLogsResponse) SetBody(v *DescribeOrdererLogsResponseBody) *DescribeOrdererLogsResponse {
	s.Body = v
	return s
}

type DescribeOrganizationRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string                           `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	Tag            []*DescribeOrganizationRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeOrganizationRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationRequest) SetLocation(v string) *DescribeOrganizationRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrganizationRequest) SetOrganizationId(v string) *DescribeOrganizationRequest {
	s.OrganizationId = &v
	return s
}

func (s *DescribeOrganizationRequest) SetTag(v []*DescribeOrganizationRequestTag) *DescribeOrganizationRequest {
	s.Tag = v
	return s
}

type DescribeOrganizationRequestTag struct {
	// This parameter is required.
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeOrganizationRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationRequestTag) SetKey(v string) *DescribeOrganizationRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeOrganizationRequestTag) SetValue(v string) *DescribeOrganizationRequestTag {
	s.Value = &v
	return s
}

type DescribeOrganizationResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeOrganizationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationResponseBody) SetErrorCode(v int32) *DescribeOrganizationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationResponseBody) SetRequestId(v string) *DescribeOrganizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationResponseBody) SetResult(v *DescribeOrganizationResponseBodyResult) *DescribeOrganizationResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationResponseBody) SetSuccess(v bool) *DescribeOrganizationResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationResponseBodyResult struct {
	// example:
	//
	// ca
	CAName *string `json:"CAName,omitempty" xml:"CAName,omitempty"`
	// example:
	//
	// asad
	CAUrl *string `json:"CAUrl,omitempty" xml:"CAUrl,omitempty"`
	// example:
	//
	// name
	CodeName *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	// example:
	//
	// 2
	ConsortiumCount *int32 `json:"ConsortiumCount,omitempty" xml:"ConsortiumCount,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// Description
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// Domain
	Domain      *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// example:
	//
	// name
	MSP *string `json:"MSP,omitempty" xml:"MSP,omitempty"`
	// example:
	//
	// Name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// 2544
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// uid-23434
	OwnerName *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	// example:
	//
	// 23434
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// 2
	PeerCount *int32 `json:"PeerCount,omitempty" xml:"PeerCount,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// basic
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// example:
	//
	// Running
	State *string                                       `json:"State,omitempty" xml:"State,omitempty"`
	Tags  []*DescribeOrganizationResponseBodyResultTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// 2
	UserCount *int32 `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
	// example:
	//
	// zone
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeOrganizationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationResponseBodyResult) SetCAName(v string) *DescribeOrganizationResponseBodyResult {
	s.CAName = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetCAUrl(v string) *DescribeOrganizationResponseBodyResult {
	s.CAUrl = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetCodeName(v string) *DescribeOrganizationResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetConsortiumCount(v int32) *DescribeOrganizationResponseBodyResult {
	s.ConsortiumCount = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetCreateTime(v string) *DescribeOrganizationResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetDescription(v string) *DescribeOrganizationResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetDomain(v string) *DescribeOrganizationResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetExpiredTime(v string) *DescribeOrganizationResponseBodyResult {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetMSP(v string) *DescribeOrganizationResponseBodyResult {
	s.MSP = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetName(v string) *DescribeOrganizationResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetOrganizationId(v string) *DescribeOrganizationResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetOwnerBid(v string) *DescribeOrganizationResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetOwnerName(v string) *DescribeOrganizationResponseBodyResult {
	s.OwnerName = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetOwnerUid(v int64) *DescribeOrganizationResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetPeerCount(v int32) *DescribeOrganizationResponseBodyResult {
	s.PeerCount = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetRegionId(v string) *DescribeOrganizationResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetRequestId(v string) *DescribeOrganizationResponseBodyResult {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetSpecName(v string) *DescribeOrganizationResponseBodyResult {
	s.SpecName = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetState(v string) *DescribeOrganizationResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetTags(v []*DescribeOrganizationResponseBodyResultTags) *DescribeOrganizationResponseBodyResult {
	s.Tags = v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetUserCount(v int32) *DescribeOrganizationResponseBodyResult {
	s.UserCount = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResult) SetZoneId(v string) *DescribeOrganizationResponseBodyResult {
	s.ZoneId = &v
	return s
}

type DescribeOrganizationResponseBodyResultTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeOrganizationResponseBodyResultTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationResponseBodyResultTags) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationResponseBodyResultTags) SetKey(v string) *DescribeOrganizationResponseBodyResultTags {
	s.Key = &v
	return s
}

func (s *DescribeOrganizationResponseBodyResultTags) SetValue(v string) *DescribeOrganizationResponseBodyResultTags {
	s.Value = &v
	return s
}

type DescribeOrganizationResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationResponse) SetHeaders(v map[string]*string) *DescribeOrganizationResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationResponse) SetStatusCode(v int32) *DescribeOrganizationResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationResponse) SetBody(v *DescribeOrganizationResponseBody) *DescribeOrganizationResponse {
	s.Body = v
	return s
}

type DescribeOrganizationChaincodesRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeOrganizationChaincodesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationChaincodesRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationChaincodesRequest) SetLocation(v string) *DescribeOrganizationChaincodesRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrganizationChaincodesRequest) SetOrganizationId(v string) *DescribeOrganizationChaincodesRequest {
	s.OrganizationId = &v
	return s
}

type DescribeOrganizationChaincodesResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrganizationChaincodesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationChaincodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationChaincodesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationChaincodesResponseBody) SetErrorCode(v int32) *DescribeOrganizationChaincodesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBody) SetRequestId(v string) *DescribeOrganizationChaincodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBody) SetResult(v []*DescribeOrganizationChaincodesResponseBodyResult) *DescribeOrganizationChaincodesResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBody) SetSuccess(v bool) *DescribeOrganizationChaincodesResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationChaincodesResponseBodyResult struct {
	Binding *bool `json:"Binding,omitempty" xml:"Binding,omitempty"`
	// example:
	//
	// code-sacc-1pr09q7jmo0np
	ChaincodeId        *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	ChaincodePackageId *string `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	// example:
	//
	// chan-first-channel-31hlgpen5k5lig
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// first-channel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// uid-23425
	Creator *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	// example:
	//
	// 1533025590
	DeployTime *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	// example:
	//
	// OR (&#39;perf9141MSP.member&#39;)
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// Installed
	Installed  *string `json:"Installed,omitempty" xml:"Installed,omitempty"`
	Management *bool   `json:"Management,omitempty" xml:"Management,omitempty"`
	// example:
	//
	// OK
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// mycc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 0.3
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeOrganizationChaincodesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationChaincodesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetBinding(v bool) *DescribeOrganizationChaincodesResponseBodyResult {
	s.Binding = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetChaincodeId(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetChaincodePackageId(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.ChaincodePackageId = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetChannelId(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetChannelName(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetConsortiumId(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetCreateTime(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetCreator(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetDeployTime(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetEndorsePolicy(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetInstalled(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.Installed = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetManagement(v bool) *DescribeOrganizationChaincodesResponseBodyResult {
	s.Management = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetMessage(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.Message = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetName(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetState(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponseBodyResult) SetVersion(v string) *DescribeOrganizationChaincodesResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeOrganizationChaincodesResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationChaincodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationChaincodesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationChaincodesResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationChaincodesResponse) SetHeaders(v map[string]*string) *DescribeOrganizationChaincodesResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationChaincodesResponse) SetStatusCode(v int32) *DescribeOrganizationChaincodesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationChaincodesResponse) SetBody(v *DescribeOrganizationChaincodesResponseBody) *DescribeOrganizationChaincodesResponse {
	s.Body = v
	return s
}

type DescribeOrganizationChannelsRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeOrganizationChannelsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationChannelsRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationChannelsRequest) SetLocation(v string) *DescribeOrganizationChannelsRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrganizationChannelsRequest) SetOrganizationId(v string) *DescribeOrganizationChannelsRequest {
	s.OrganizationId = &v
	return s
}

type DescribeOrganizationChannelsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrganizationChannelsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationChannelsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationChannelsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationChannelsResponseBody) SetErrorCode(v int32) *DescribeOrganizationChannelsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBody) SetRequestId(v string) *DescribeOrganizationChannelsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBody) SetResult(v []*DescribeOrganizationChannelsResponseBodyResult) *DescribeOrganizationChannelsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationChannelsResponseBody) SetSuccess(v bool) *DescribeOrganizationChannelsResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationChannelsResponseBodyResult struct {
	// example:
	//
	// 2
	BatchTimeout *int32 `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	// example:
	//
	// 3
	BlockCount *int32 `json:"BlockCount,omitempty" xml:"BlockCount,omitempty"`
	// example:
	//
	// 2
	ChaincodeCount *int32 `json:"ChaincodeCount,omitempty" xml:"ChaincodeCount,omitempty"`
	// example:
	//
	// chan-channelx-1l1hmckuuisxo
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// name
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1533025590
	DeleteTime *string `json:"DeleteTime,omitempty" xml:"DeleteTime,omitempty"`
	// example:
	//
	// true
	Deleted *bool `json:"Deleted,omitempty" xml:"Deleted,omitempty"`
	Hybird  *bool `json:"Hybird,omitempty" xml:"Hybird,omitempty"`
	// example:
	//
	// 3
	MaxMessageCount *int32 `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	// example:
	//
	// 3
	MemberCount *int32 `json:"MemberCount,omitempty" xml:"MemberCount,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 253
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// uid-5324
	OwnerName *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	// example:
	//
	// 5324
	OwnerUid *int32 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// 4
	PreferredMaxBytes *int32 `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// true
	SupportChannelConfig *bool `json:"SupportChannelConfig,omitempty" xml:"SupportChannelConfig,omitempty"`
	// example:
	//
	// 1533025590
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeOrganizationChannelsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationChannelsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetBatchTimeout(v int32) *DescribeOrganizationChannelsResponseBodyResult {
	s.BatchTimeout = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetBlockCount(v int32) *DescribeOrganizationChannelsResponseBodyResult {
	s.BlockCount = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetChaincodeCount(v int32) *DescribeOrganizationChannelsResponseBodyResult {
	s.ChaincodeCount = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetChannelId(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetConsortiumId(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetConsortiumName(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.ConsortiumName = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetCreateTime(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetDeleteTime(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.DeleteTime = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetDeleted(v bool) *DescribeOrganizationChannelsResponseBodyResult {
	s.Deleted = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetHybird(v bool) *DescribeOrganizationChannelsResponseBodyResult {
	s.Hybird = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetMaxMessageCount(v int32) *DescribeOrganizationChannelsResponseBodyResult {
	s.MaxMessageCount = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetMemberCount(v int32) *DescribeOrganizationChannelsResponseBodyResult {
	s.MemberCount = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetName(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetOwnerBid(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetOwnerName(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.OwnerName = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetOwnerUid(v int32) *DescribeOrganizationChannelsResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetPreferredMaxBytes(v int32) *DescribeOrganizationChannelsResponseBodyResult {
	s.PreferredMaxBytes = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetRequestId(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetState(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetSupportChannelConfig(v bool) *DescribeOrganizationChannelsResponseBodyResult {
	s.SupportChannelConfig = &v
	return s
}

func (s *DescribeOrganizationChannelsResponseBodyResult) SetUpdateTime(v string) *DescribeOrganizationChannelsResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type DescribeOrganizationChannelsResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationChannelsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationChannelsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationChannelsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationChannelsResponse) SetHeaders(v map[string]*string) *DescribeOrganizationChannelsResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationChannelsResponse) SetStatusCode(v int32) *DescribeOrganizationChannelsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationChannelsResponse) SetBody(v *DescribeOrganizationChannelsResponseBody) *DescribeOrganizationChannelsResponse {
	s.Body = v
	return s
}

type DescribeOrganizationDeletableRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeOrganizationDeletableRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationDeletableRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationDeletableRequest) SetLocation(v string) *DescribeOrganizationDeletableRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrganizationDeletableRequest) SetOrganizationId(v string) *DescribeOrganizationDeletableRequest {
	s.OrganizationId = &v
	return s
}

type DescribeOrganizationDeletableResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeOrganizationDeletableResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationDeletableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationDeletableResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationDeletableResponseBody) SetErrorCode(v int32) *DescribeOrganizationDeletableResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBody) SetRequestId(v string) *DescribeOrganizationDeletableResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBody) SetResult(v *DescribeOrganizationDeletableResponseBodyResult) *DescribeOrganizationDeletableResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationDeletableResponseBody) SetSuccess(v bool) *DescribeOrganizationDeletableResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationDeletableResponseBodyResult struct {
	// example:
	//
	// name
	CodeName *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	// example:
	//
	// false
	Deletable *bool `json:"Deletable,omitempty" xml:"Deletable,omitempty"`
	// example:
	//
	// desc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// orgname
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// zone
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeOrganizationDeletableResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationDeletableResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetCodeName(v string) *DescribeOrganizationDeletableResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetDeletable(v bool) *DescribeOrganizationDeletableResponseBodyResult {
	s.Deletable = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetDescription(v string) *DescribeOrganizationDeletableResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetDomain(v string) *DescribeOrganizationDeletableResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetName(v string) *DescribeOrganizationDeletableResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetOrganizationId(v string) *DescribeOrganizationDeletableResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetRegionId(v string) *DescribeOrganizationDeletableResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetState(v string) *DescribeOrganizationDeletableResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeOrganizationDeletableResponseBodyResult) SetZoneId(v string) *DescribeOrganizationDeletableResponseBodyResult {
	s.ZoneId = &v
	return s
}

type DescribeOrganizationDeletableResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationDeletableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationDeletableResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationDeletableResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationDeletableResponse) SetHeaders(v map[string]*string) *DescribeOrganizationDeletableResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationDeletableResponse) SetStatusCode(v int32) *DescribeOrganizationDeletableResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationDeletableResponse) SetBody(v *DescribeOrganizationDeletableResponseBody) *DescribeOrganizationDeletableResponse {
	s.Body = v
	return s
}

type DescribeOrganizationMembersRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeOrganizationMembersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationMembersRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationMembersRequest) SetLocation(v string) *DescribeOrganizationMembersRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrganizationMembersRequest) SetOrganizationId(v string) *DescribeOrganizationMembersRequest {
	s.OrganizationId = &v
	return s
}

type DescribeOrganizationMembersResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrganizationMembersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationMembersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationMembersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationMembersResponseBody) SetErrorCode(v int32) *DescribeOrganizationMembersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBody) SetRequestId(v string) *DescribeOrganizationMembersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBody) SetResult(v []*DescribeOrganizationMembersResponseBodyResult) *DescribeOrganizationMembersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationMembersResponseBody) SetSuccess(v bool) *DescribeOrganizationMembersResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationMembersResponseBodyResult struct {
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// name
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	// example:
	//
	// desc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// Id
	//
	// example:
	//
	// 3
	Id *string `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// 1533025590
	JoinedTime *string `json:"JoinedTime,omitempty" xml:"JoinedTime,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DescribeOrganizationMembersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationMembersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationMembersResponseBodyResult) SetConsortiumId(v string) *DescribeOrganizationMembersResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBodyResult) SetConsortiumName(v string) *DescribeOrganizationMembersResponseBodyResult {
	s.ConsortiumName = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBodyResult) SetDescription(v string) *DescribeOrganizationMembersResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBodyResult) SetDomain(v string) *DescribeOrganizationMembersResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBodyResult) SetId(v string) *DescribeOrganizationMembersResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBodyResult) SetJoinedTime(v string) *DescribeOrganizationMembersResponseBodyResult {
	s.JoinedTime = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBodyResult) SetName(v string) *DescribeOrganizationMembersResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationMembersResponseBodyResult) SetState(v string) *DescribeOrganizationMembersResponseBodyResult {
	s.State = &v
	return s
}

type DescribeOrganizationMembersResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationMembersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationMembersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationMembersResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationMembersResponse) SetHeaders(v map[string]*string) *DescribeOrganizationMembersResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationMembersResponse) SetStatusCode(v int32) *DescribeOrganizationMembersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationMembersResponse) SetBody(v *DescribeOrganizationMembersResponseBody) *DescribeOrganizationMembersResponse {
	s.Body = v
	return s
}

type DescribeOrganizationPeersRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeOrganizationPeersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationPeersRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationPeersRequest) SetLocation(v string) *DescribeOrganizationPeersRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrganizationPeersRequest) SetOrganizationId(v string) *DescribeOrganizationPeersRequest {
	s.OrganizationId = &v
	return s
}

type DescribeOrganizationPeersResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrganizationPeersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationPeersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationPeersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationPeersResponseBody) SetErrorCode(v int32) *DescribeOrganizationPeersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBody) SetRequestId(v string) *DescribeOrganizationPeersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBody) SetResult(v []*DescribeOrganizationPeersResponseBodyResult) *DescribeOrganizationPeersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationPeersResponseBody) SetSuccess(v bool) *DescribeOrganizationPeersResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationPeersResponseBodyResult struct {
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// domain
	Domain *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	// example:
	//
	// basic
	InstanceType *string `json:"InstanceType,omitempty" xml:"InstanceType,omitempty"`
	// example:
	//
	// 10.0.0.2
	InternetIp *string `json:"InternetIp,omitempty" xml:"InternetIp,omitempty"`
	// example:
	//
	// 10.0.0.2
	IntranetIp *string `json:"IntranetIp,omitempty" xml:"IntranetIp,omitempty"`
	// example:
	//
	// false
	IsAnchor *bool `json:"IsAnchor,omitempty" xml:"IsAnchor,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// 1234
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// example:
	//
	// 1533025590
	UpdateTime *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s DescribeOrganizationPeersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationPeersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetCreateTime(v string) *DescribeOrganizationPeersResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetDomain(v string) *DescribeOrganizationPeersResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetInstanceType(v string) *DescribeOrganizationPeersResponseBodyResult {
	s.InstanceType = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetInternetIp(v string) *DescribeOrganizationPeersResponseBodyResult {
	s.InternetIp = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetIntranetIp(v string) *DescribeOrganizationPeersResponseBodyResult {
	s.IntranetIp = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetIsAnchor(v bool) *DescribeOrganizationPeersResponseBodyResult {
	s.IsAnchor = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetName(v string) *DescribeOrganizationPeersResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetPort(v int32) *DescribeOrganizationPeersResponseBodyResult {
	s.Port = &v
	return s
}

func (s *DescribeOrganizationPeersResponseBodyResult) SetUpdateTime(v string) *DescribeOrganizationPeersResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type DescribeOrganizationPeersResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationPeersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationPeersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationPeersResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationPeersResponse) SetHeaders(v map[string]*string) *DescribeOrganizationPeersResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationPeersResponse) SetStatusCode(v int32) *DescribeOrganizationPeersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationPeersResponse) SetBody(v *DescribeOrganizationPeersResponseBody) *DescribeOrganizationPeersResponse {
	s.Body = v
	return s
}

type DescribeOrganizationSpecsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrganizationSpecsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationSpecsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationSpecsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationSpecsResponseBody) SetErrorCode(v int32) *DescribeOrganizationSpecsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationSpecsResponseBody) SetRequestId(v string) *DescribeOrganizationSpecsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationSpecsResponseBody) SetResult(v []*DescribeOrganizationSpecsResponseBodyResult) *DescribeOrganizationSpecsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationSpecsResponseBody) SetSuccess(v bool) *DescribeOrganizationSpecsResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationSpecsResponseBodyResult struct {
	// example:
	//
	// true
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// example:
	//
	// basic
	Name  *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Title *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeOrganizationSpecsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationSpecsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationSpecsResponseBodyResult) SetEnable(v bool) *DescribeOrganizationSpecsResponseBodyResult {
	s.Enable = &v
	return s
}

func (s *DescribeOrganizationSpecsResponseBodyResult) SetName(v string) *DescribeOrganizationSpecsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationSpecsResponseBodyResult) SetTitle(v string) *DescribeOrganizationSpecsResponseBodyResult {
	s.Title = &v
	return s
}

type DescribeOrganizationSpecsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationSpecsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationSpecsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationSpecsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationSpecsResponse) SetHeaders(v map[string]*string) *DescribeOrganizationSpecsResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationSpecsResponse) SetStatusCode(v int32) *DescribeOrganizationSpecsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationSpecsResponse) SetBody(v *DescribeOrganizationSpecsResponseBody) *DescribeOrganizationSpecsResponse {
	s.Body = v
	return s
}

type DescribeOrganizationTriggersRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeOrganizationTriggersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationTriggersRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationTriggersRequest) SetOrganizationId(v string) *DescribeOrganizationTriggersRequest {
	s.OrganizationId = &v
	return s
}

type DescribeOrganizationTriggersResponseBody struct {
	ErrorCode *int32                                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrganizationTriggersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationTriggersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationTriggersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationTriggersResponseBody) SetErrorCode(v int32) *DescribeOrganizationTriggersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBody) SetRequestId(v string) *DescribeOrganizationTriggersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBody) SetResult(v []*DescribeOrganizationTriggersResponseBodyResult) *DescribeOrganizationTriggersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationTriggersResponseBody) SetSuccess(v bool) *DescribeOrganizationTriggersResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationTriggersResponseBodyResult struct {
	ChannelId    *string                                                   `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName  *string                                                   `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Checkpoint   *DescribeOrganizationTriggersResponseBodyResultCheckpoint `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty" type:"Struct"`
	CreateTime   *int64                                                    `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorMessage *string                                                   `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Name         *string                                                   `json:"Name,omitempty" xml:"Name,omitempty"`
	Options      *string                                                   `json:"Options,omitempty" xml:"Options,omitempty"`
	Source       *string                                                   `json:"Source,omitempty" xml:"Source,omitempty"`
	Status       *int32                                                    `json:"Status,omitempty" xml:"Status,omitempty"`
	Type         *string                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeOrganizationTriggersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationTriggersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetChannelId(v string) *DescribeOrganizationTriggersResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetChannelName(v string) *DescribeOrganizationTriggersResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetCheckpoint(v *DescribeOrganizationTriggersResponseBodyResultCheckpoint) *DescribeOrganizationTriggersResponseBodyResult {
	s.Checkpoint = v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetCreateTime(v int64) *DescribeOrganizationTriggersResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetErrorMessage(v string) *DescribeOrganizationTriggersResponseBodyResult {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetName(v string) *DescribeOrganizationTriggersResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetOptions(v string) *DescribeOrganizationTriggersResponseBodyResult {
	s.Options = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetSource(v string) *DescribeOrganizationTriggersResponseBodyResult {
	s.Source = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetStatus(v int32) *DescribeOrganizationTriggersResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResult) SetType(v string) *DescribeOrganizationTriggersResponseBodyResult {
	s.Type = &v
	return s
}

type DescribeOrganizationTriggersResponseBodyResultCheckpoint struct {
	ErrorCount *int64  `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	Height     *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
	Index      *int64  `json:"Index,omitempty" xml:"Index,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeOrganizationTriggersResponseBodyResultCheckpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationTriggersResponseBodyResultCheckpoint) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationTriggersResponseBodyResultCheckpoint) SetErrorCount(v int64) *DescribeOrganizationTriggersResponseBodyResultCheckpoint {
	s.ErrorCount = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResultCheckpoint) SetHeight(v int64) *DescribeOrganizationTriggersResponseBodyResultCheckpoint {
	s.Height = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResultCheckpoint) SetIndex(v int64) *DescribeOrganizationTriggersResponseBodyResultCheckpoint {
	s.Index = &v
	return s
}

func (s *DescribeOrganizationTriggersResponseBodyResultCheckpoint) SetType(v string) *DescribeOrganizationTriggersResponseBodyResultCheckpoint {
	s.Type = &v
	return s
}

type DescribeOrganizationTriggersResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationTriggersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationTriggersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationTriggersResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationTriggersResponse) SetHeaders(v map[string]*string) *DescribeOrganizationTriggersResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationTriggersResponse) SetStatusCode(v int32) *DescribeOrganizationTriggersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationTriggersResponse) SetBody(v *DescribeOrganizationTriggersResponseBody) *DescribeOrganizationTriggersResponse {
	s.Body = v
	return s
}

type DescribeOrganizationUserCertsRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// username
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeOrganizationUserCertsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUserCertsRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUserCertsRequest) SetOrganizationId(v string) *DescribeOrganizationUserCertsRequest {
	s.OrganizationId = &v
	return s
}

func (s *DescribeOrganizationUserCertsRequest) SetUsername(v string) *DescribeOrganizationUserCertsRequest {
	s.Username = &v
	return s
}

type DescribeOrganizationUserCertsResponseBody struct {
	// example:
	//
	// 11
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// example:
	//
	// 11
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeOrganizationUserCertsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationUserCertsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUserCertsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUserCertsResponseBody) SetDynamicCode(v string) *DescribeOrganizationUserCertsResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBody) SetDynamicMessage(v string) *DescribeOrganizationUserCertsResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBody) SetErrorCode(v int32) *DescribeOrganizationUserCertsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBody) SetRequestId(v string) *DescribeOrganizationUserCertsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBody) SetResult(v *DescribeOrganizationUserCertsResponseBodyResult) *DescribeOrganizationUserCertsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBody) SetSuccess(v bool) *DescribeOrganizationUserCertsResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationUserCertsResponseBodyResult struct {
	Certificates []*DescribeOrganizationUserCertsResponseBodyResultCertificates `json:"Certificates,omitempty" xml:"Certificates,omitempty" type:"Repeated"`
	KeyPair      *DescribeOrganizationUserCertsResponseBodyResultKeyPair        `json:"KeyPair,omitempty" xml:"KeyPair,omitempty" type:"Struct"`
}

func (s DescribeOrganizationUserCertsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUserCertsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUserCertsResponseBodyResult) SetCertificates(v []*DescribeOrganizationUserCertsResponseBodyResultCertificates) *DescribeOrganizationUserCertsResponseBodyResult {
	s.Certificates = v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBodyResult) SetKeyPair(v *DescribeOrganizationUserCertsResponseBodyResultKeyPair) *DescribeOrganizationUserCertsResponseBodyResult {
	s.KeyPair = v
	return s
}

type DescribeOrganizationUserCertsResponseBodyResultCertificates struct {
	// example:
	//
	// aa
	CertData *string `json:"CertData,omitempty" xml:"CertData,omitempty"`
	// example:
	//
	// aa
	Issuer *string `json:"Issuer,omitempty" xml:"Issuer,omitempty"`
	// example:
	//
	// aa
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// aa
	Scope *string `json:"Scope,omitempty" xml:"Scope,omitempty"`
	// example:
	//
	// aa
	Subject *string `json:"Subject,omitempty" xml:"Subject,omitempty"`
	// example:
	//
	// aa
	ValidFrom *string `json:"ValidFrom,omitempty" xml:"ValidFrom,omitempty"`
	// example:
	//
	// aaa
	ValidTo *string `json:"ValidTo,omitempty" xml:"ValidTo,omitempty"`
}

func (s DescribeOrganizationUserCertsResponseBodyResultCertificates) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUserCertsResponseBodyResultCertificates) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUserCertsResponseBodyResultCertificates) SetCertData(v string) *DescribeOrganizationUserCertsResponseBodyResultCertificates {
	s.CertData = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBodyResultCertificates) SetIssuer(v string) *DescribeOrganizationUserCertsResponseBodyResultCertificates {
	s.Issuer = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBodyResultCertificates) SetName(v string) *DescribeOrganizationUserCertsResponseBodyResultCertificates {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBodyResultCertificates) SetScope(v string) *DescribeOrganizationUserCertsResponseBodyResultCertificates {
	s.Scope = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBodyResultCertificates) SetSubject(v string) *DescribeOrganizationUserCertsResponseBodyResultCertificates {
	s.Subject = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBodyResultCertificates) SetValidFrom(v string) *DescribeOrganizationUserCertsResponseBodyResultCertificates {
	s.ValidFrom = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBodyResultCertificates) SetValidTo(v string) *DescribeOrganizationUserCertsResponseBodyResultCertificates {
	s.ValidTo = &v
	return s
}

type DescribeOrganizationUserCertsResponseBodyResultKeyPair struct {
	// example:
	//
	// aa
	PrivateKey *string `json:"PrivateKey,omitempty" xml:"PrivateKey,omitempty"`
	// example:
	//
	// aa
	PublicKey *string `json:"PublicKey,omitempty" xml:"PublicKey,omitempty"`
}

func (s DescribeOrganizationUserCertsResponseBodyResultKeyPair) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUserCertsResponseBodyResultKeyPair) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUserCertsResponseBodyResultKeyPair) SetPrivateKey(v string) *DescribeOrganizationUserCertsResponseBodyResultKeyPair {
	s.PrivateKey = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponseBodyResultKeyPair) SetPublicKey(v string) *DescribeOrganizationUserCertsResponseBodyResultKeyPair {
	s.PublicKey = &v
	return s
}

type DescribeOrganizationUserCertsResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationUserCertsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationUserCertsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUserCertsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUserCertsResponse) SetHeaders(v map[string]*string) *DescribeOrganizationUserCertsResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationUserCertsResponse) SetStatusCode(v int32) *DescribeOrganizationUserCertsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationUserCertsResponse) SetBody(v *DescribeOrganizationUserCertsResponseBody) *DescribeOrganizationUserCertsResponse {
	s.Body = v
	return s
}

type DescribeOrganizationUsersRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeOrganizationUsersRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUsersRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUsersRequest) SetLocation(v string) *DescribeOrganizationUsersRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrganizationUsersRequest) SetOrganizationId(v string) *DescribeOrganizationUsersRequest {
	s.OrganizationId = &v
	return s
}

type DescribeOrganizationUsersResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrganizationUsersResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationUsersResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUsersResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUsersResponseBody) SetErrorCode(v int32) *DescribeOrganizationUsersResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBody) SetRequestId(v string) *DescribeOrganizationUsersResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBody) SetResult(v []*DescribeOrganizationUsersResponseBodyResult) *DescribeOrganizationUsersResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationUsersResponseBody) SetSuccess(v bool) *DescribeOrganizationUsersResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationUsersResponseBodyResult struct {
	// example:
	//
	// a
	Attrs *string `json:"Attrs,omitempty" xml:"Attrs,omitempty"`
	// example:
	//
	// 23425
	CallerBid *string `json:"CallerBid,omitempty" xml:"CallerBid,omitempty"`
	// example:
	//
	// 35645
	CallerUid *int64 `json:"CallerUid,omitempty" xml:"CallerUid,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1533025590
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// name
	FullName *string `json:"FullName,omitempty" xml:"FullName,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// username
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DescribeOrganizationUsersResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUsersResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetAttrs(v string) *DescribeOrganizationUsersResponseBodyResult {
	s.Attrs = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetCallerBid(v string) *DescribeOrganizationUsersResponseBodyResult {
	s.CallerBid = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetCallerUid(v int64) *DescribeOrganizationUsersResponseBodyResult {
	s.CallerUid = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetCreateTime(v string) *DescribeOrganizationUsersResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetExpireTime(v string) *DescribeOrganizationUsersResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetFullName(v string) *DescribeOrganizationUsersResponseBodyResult {
	s.FullName = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetOrganizationId(v string) *DescribeOrganizationUsersResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetRegionId(v string) *DescribeOrganizationUsersResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeOrganizationUsersResponseBodyResult) SetUsername(v string) *DescribeOrganizationUsersResponseBodyResult {
	s.Username = &v
	return s
}

type DescribeOrganizationUsersResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationUsersResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationUsersResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationUsersResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationUsersResponse) SetHeaders(v map[string]*string) *DescribeOrganizationUsersResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationUsersResponse) SetStatusCode(v int32) *DescribeOrganizationUsersResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationUsersResponse) SetBody(v *DescribeOrganizationUsersResponseBody) *DescribeOrganizationUsersResponse {
	s.Body = v
	return s
}

type DescribeOrganizationsRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string                            `json:"Location,omitempty" xml:"Location,omitempty"`
	Tag      []*DescribeOrganizationsRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s DescribeOrganizationsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationsRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationsRequest) SetLocation(v string) *DescribeOrganizationsRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrganizationsRequest) SetTag(v []*DescribeOrganizationsRequestTag) *DescribeOrganizationsRequest {
	s.Tag = v
	return s
}

type DescribeOrganizationsRequestTag struct {
	// This parameter is required.
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeOrganizationsRequestTag) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationsRequestTag) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationsRequestTag) SetKey(v string) *DescribeOrganizationsRequestTag {
	s.Key = &v
	return s
}

func (s *DescribeOrganizationsRequestTag) SetValue(v string) *DescribeOrganizationsRequestTag {
	s.Value = &v
	return s
}

type DescribeOrganizationsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrganizationsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrganizationsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationsResponseBody) SetErrorCode(v int32) *DescribeOrganizationsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrganizationsResponseBody) SetRequestId(v string) *DescribeOrganizationsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationsResponseBody) SetResult(v []*DescribeOrganizationsResponseBodyResult) *DescribeOrganizationsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrganizationsResponseBody) SetSuccess(v bool) *DescribeOrganizationsResponseBody {
	s.Success = &v
	return s
}

type DescribeOrganizationsResponseBodyResult struct {
	// example:
	//
	// name
	CodeName *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	// example:
	//
	// 2
	ConsortiumCount *int32 `json:"ConsortiumCount,omitempty" xml:"ConsortiumCount,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// desc
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// example:
	//
	// domain
	Domain      *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	ExpireState *string `json:"ExpireState,omitempty" xml:"ExpireState,omitempty"`
	// example:
	//
	// 1533025590
	ExpiredTime *string `json:"ExpiredTime,omitempty" xml:"ExpiredTime,omitempty"`
	// example:
	//
	// true
	Hybrid       *bool   `json:"Hybrid,omitempty" xml:"Hybrid,omitempty"`
	MajorVersion *string `json:"MajorVersion,omitempty" xml:"MajorVersion,omitempty"`
	// example:
	//
	// name
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// bid
	OwnerBid *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	// example:
	//
	// name
	OwnerName *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	// example:
	//
	// 1232
	OwnerUid *int64 `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	// example:
	//
	// 2
	PeerCount *int32 `json:"PeerCount,omitempty" xml:"PeerCount,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// basic
	SpecName *string `json:"SpecName,omitempty" xml:"SpecName,omitempty"`
	// example:
	//
	// Running
	State *string                                        `json:"State,omitempty" xml:"State,omitempty"`
	Tags  []*DescribeOrganizationsResponseBodyResultTags `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Repeated"`
	// example:
	//
	// 3
	UserCount *int32 `json:"UserCount,omitempty" xml:"UserCount,omitempty"`
	// example:
	//
	// zone
	ZoneId *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s DescribeOrganizationsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationsResponseBodyResult) SetCodeName(v string) *DescribeOrganizationsResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetConsortiumCount(v int32) *DescribeOrganizationsResponseBodyResult {
	s.ConsortiumCount = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetCreateTime(v string) *DescribeOrganizationsResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetDescription(v string) *DescribeOrganizationsResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetDomain(v string) *DescribeOrganizationsResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetExpireState(v string) *DescribeOrganizationsResponseBodyResult {
	s.ExpireState = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetExpiredTime(v string) *DescribeOrganizationsResponseBodyResult {
	s.ExpiredTime = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetHybrid(v bool) *DescribeOrganizationsResponseBodyResult {
	s.Hybrid = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetMajorVersion(v string) *DescribeOrganizationsResponseBodyResult {
	s.MajorVersion = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetName(v string) *DescribeOrganizationsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetOrganizationId(v string) *DescribeOrganizationsResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetOwnerBid(v string) *DescribeOrganizationsResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetOwnerName(v string) *DescribeOrganizationsResponseBodyResult {
	s.OwnerName = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetOwnerUid(v int64) *DescribeOrganizationsResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetPeerCount(v int32) *DescribeOrganizationsResponseBodyResult {
	s.PeerCount = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetRegionId(v string) *DescribeOrganizationsResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetRequestId(v string) *DescribeOrganizationsResponseBodyResult {
	s.RequestId = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetSpecName(v string) *DescribeOrganizationsResponseBodyResult {
	s.SpecName = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetState(v string) *DescribeOrganizationsResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetTags(v []*DescribeOrganizationsResponseBodyResultTags) *DescribeOrganizationsResponseBodyResult {
	s.Tags = v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetUserCount(v int32) *DescribeOrganizationsResponseBodyResult {
	s.UserCount = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResult) SetZoneId(v string) *DescribeOrganizationsResponseBodyResult {
	s.ZoneId = &v
	return s
}

type DescribeOrganizationsResponseBodyResultTags struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeOrganizationsResponseBodyResultTags) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationsResponseBodyResultTags) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationsResponseBodyResultTags) SetKey(v string) *DescribeOrganizationsResponseBodyResultTags {
	s.Key = &v
	return s
}

func (s *DescribeOrganizationsResponseBodyResultTags) SetValue(v string) *DescribeOrganizationsResponseBodyResultTags {
	s.Value = &v
	return s
}

type DescribeOrganizationsResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrganizationsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrganizationsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrganizationsResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrganizationsResponse) SetHeaders(v map[string]*string) *DescribeOrganizationsResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrganizationsResponse) SetStatusCode(v int32) *DescribeOrganizationsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrganizationsResponse) SetBody(v *DescribeOrganizationsResponseBody) *DescribeOrganizationsResponse {
	s.Body = v
	return s
}

type DescribeOrgnaizationChaincodesRequest struct {
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeOrgnaizationChaincodesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrgnaizationChaincodesRequest) GoString() string {
	return s.String()
}

func (s *DescribeOrgnaizationChaincodesRequest) SetLocation(v string) *DescribeOrgnaizationChaincodesRequest {
	s.Location = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesRequest) SetOrganizationId(v string) *DescribeOrgnaizationChaincodesRequest {
	s.OrganizationId = &v
	return s
}

type DescribeOrgnaizationChaincodesResponseBody struct {
	ErrorCode *int32                                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeOrgnaizationChaincodesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeOrgnaizationChaincodesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrgnaizationChaincodesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOrgnaizationChaincodesResponseBody) SetErrorCode(v int32) *DescribeOrgnaizationChaincodesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBody) SetRequestId(v string) *DescribeOrgnaizationChaincodesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBody) SetResult(v []*DescribeOrgnaizationChaincodesResponseBodyResult) *DescribeOrgnaizationChaincodesResponseBody {
	s.Result = v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBody) SetSuccess(v bool) *DescribeOrgnaizationChaincodesResponseBody {
	s.Success = &v
	return s
}

type DescribeOrgnaizationChaincodesResponseBodyResult struct {
	ChaincodeId   *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	ChannelId     *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName   *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator       *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	DeployTime    *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	Installed     *string `json:"Installed,omitempty" xml:"Installed,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeOrgnaizationChaincodesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrgnaizationChaincodesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetChaincodeId(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetChannelId(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetChannelName(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetCreateTime(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetCreator(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetDeployTime(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetEndorsePolicy(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetInstalled(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.Installed = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetMessage(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.Message = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetName(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetState(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.State = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponseBodyResult) SetVersion(v string) *DescribeOrgnaizationChaincodesResponseBodyResult {
	s.Version = &v
	return s
}

type DescribeOrgnaizationChaincodesResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOrgnaizationChaincodesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOrgnaizationChaincodesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOrgnaizationChaincodesResponse) GoString() string {
	return s.String()
}

func (s *DescribeOrgnaizationChaincodesResponse) SetHeaders(v map[string]*string) *DescribeOrgnaizationChaincodesResponse {
	s.Headers = v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponse) SetStatusCode(v int32) *DescribeOrgnaizationChaincodesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOrgnaizationChaincodesResponse) SetBody(v *DescribeOrgnaizationChaincodesResponseBody) *DescribeOrgnaizationChaincodesResponse {
	s.Body = v
	return s
}

type DescribeOssPropertiesRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeOssPropertiesRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssPropertiesRequest) GoString() string {
	return s.String()
}

func (s *DescribeOssPropertiesRequest) SetBizid(v string) *DescribeOssPropertiesRequest {
	s.Bizid = &v
	return s
}

type DescribeOssPropertiesResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeOssPropertiesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeOssPropertiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssPropertiesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeOssPropertiesResponseBody) SetRequestId(v string) *DescribeOssPropertiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeOssPropertiesResponseBody) SetResult(v *DescribeOssPropertiesResponseBodyResult) *DescribeOssPropertiesResponseBody {
	s.Result = v
	return s
}

type DescribeOssPropertiesResponseBodyResult struct {
	AccessKeyId     *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	AccessKeySecret *string `json:"AccessKeySecret,omitempty" xml:"AccessKeySecret,omitempty"`
	BucketName      *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	Endpoint        *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	FolderName      *string `json:"FolderName,omitempty" xml:"FolderName,omitempty"`
}

func (s DescribeOssPropertiesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssPropertiesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeOssPropertiesResponseBodyResult) SetAccessKeyId(v string) *DescribeOssPropertiesResponseBodyResult {
	s.AccessKeyId = &v
	return s
}

func (s *DescribeOssPropertiesResponseBodyResult) SetAccessKeySecret(v string) *DescribeOssPropertiesResponseBodyResult {
	s.AccessKeySecret = &v
	return s
}

func (s *DescribeOssPropertiesResponseBodyResult) SetBucketName(v string) *DescribeOssPropertiesResponseBodyResult {
	s.BucketName = &v
	return s
}

func (s *DescribeOssPropertiesResponseBodyResult) SetEndpoint(v string) *DescribeOssPropertiesResponseBodyResult {
	s.Endpoint = &v
	return s
}

func (s *DescribeOssPropertiesResponseBodyResult) SetFolderName(v string) *DescribeOssPropertiesResponseBodyResult {
	s.FolderName = &v
	return s
}

type DescribeOssPropertiesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeOssPropertiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeOssPropertiesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeOssPropertiesResponse) GoString() string {
	return s.String()
}

func (s *DescribeOssPropertiesResponse) SetHeaders(v map[string]*string) *DescribeOssPropertiesResponse {
	s.Headers = v
	return s
}

func (s *DescribeOssPropertiesResponse) SetStatusCode(v int32) *DescribeOssPropertiesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeOssPropertiesResponse) SetBody(v *DescribeOssPropertiesResponseBody) *DescribeOssPropertiesResponse {
	s.Body = v
	return s
}

type DescribePeerLogsRequest struct {
	Lines *string `json:"Lines,omitempty" xml:"Lines,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	PeerName *string `json:"PeerName,omitempty" xml:"PeerName,omitempty"`
}

func (s DescribePeerLogsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePeerLogsRequest) GoString() string {
	return s.String()
}

func (s *DescribePeerLogsRequest) SetLines(v string) *DescribePeerLogsRequest {
	s.Lines = &v
	return s
}

func (s *DescribePeerLogsRequest) SetOrganizationId(v string) *DescribePeerLogsRequest {
	s.OrganizationId = &v
	return s
}

func (s *DescribePeerLogsRequest) SetPeerName(v string) *DescribePeerLogsRequest {
	s.PeerName = &v
	return s
}

type DescribePeerLogsResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribePeerLogsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePeerLogsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePeerLogsResponseBody) SetErrorCode(v int32) *DescribePeerLogsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribePeerLogsResponseBody) SetRequestId(v string) *DescribePeerLogsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePeerLogsResponseBody) SetResult(v string) *DescribePeerLogsResponseBody {
	s.Result = &v
	return s
}

func (s *DescribePeerLogsResponseBody) SetSuccess(v bool) *DescribePeerLogsResponseBody {
	s.Success = &v
	return s
}

type DescribePeerLogsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePeerLogsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePeerLogsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePeerLogsResponse) GoString() string {
	return s.String()
}

func (s *DescribePeerLogsResponse) SetHeaders(v map[string]*string) *DescribePeerLogsResponse {
	s.Headers = v
	return s
}

func (s *DescribePeerLogsResponse) SetStatusCode(v int32) *DescribePeerLogsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePeerLogsResponse) SetBody(v *DescribePeerLogsResponseBody) *DescribePeerLogsResponse {
	s.Body = v
	return s
}

type DescribePublicAntChainContractProjectContentTreeResponseBody struct {
	RequestId *string                                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribePublicAntChainContractProjectContentTreeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribePublicAntChainContractProjectContentTreeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicAntChainContractProjectContentTreeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePublicAntChainContractProjectContentTreeResponseBody) SetRequestId(v string) *DescribePublicAntChainContractProjectContentTreeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePublicAntChainContractProjectContentTreeResponseBody) SetResult(v *DescribePublicAntChainContractProjectContentTreeResponseBodyResult) *DescribePublicAntChainContractProjectContentTreeResponseBody {
	s.Result = v
	return s
}

type DescribePublicAntChainContractProjectContentTreeResponseBodyResult struct {
	Children []map[string]interface{} `json:"Children,omitempty" xml:"Children,omitempty" type:"Repeated"`
}

func (s DescribePublicAntChainContractProjectContentTreeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicAntChainContractProjectContentTreeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribePublicAntChainContractProjectContentTreeResponseBodyResult) SetChildren(v []map[string]interface{}) *DescribePublicAntChainContractProjectContentTreeResponseBodyResult {
	s.Children = v
	return s
}

type DescribePublicAntChainContractProjectContentTreeResponse struct {
	Headers    map[string]*string                                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePublicAntChainContractProjectContentTreeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePublicAntChainContractProjectContentTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicAntChainContractProjectContentTreeResponse) GoString() string {
	return s.String()
}

func (s *DescribePublicAntChainContractProjectContentTreeResponse) SetHeaders(v map[string]*string) *DescribePublicAntChainContractProjectContentTreeResponse {
	s.Headers = v
	return s
}

func (s *DescribePublicAntChainContractProjectContentTreeResponse) SetStatusCode(v int32) *DescribePublicAntChainContractProjectContentTreeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePublicAntChainContractProjectContentTreeResponse) SetBody(v *DescribePublicAntChainContractProjectContentTreeResponseBody) *DescribePublicAntChainContractProjectContentTreeResponse {
	s.Body = v
	return s
}

type DescribePublicAntChainDownloadPathsRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribePublicAntChainDownloadPathsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicAntChainDownloadPathsRequest) GoString() string {
	return s.String()
}

func (s *DescribePublicAntChainDownloadPathsRequest) SetBizid(v string) *DescribePublicAntChainDownloadPathsRequest {
	s.Bizid = &v
	return s
}

type DescribePublicAntChainDownloadPathsResponseBody struct {
	RequestId *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribePublicAntChainDownloadPathsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribePublicAntChainDownloadPathsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicAntChainDownloadPathsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePublicAntChainDownloadPathsResponseBody) SetRequestId(v string) *DescribePublicAntChainDownloadPathsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePublicAntChainDownloadPathsResponseBody) SetResult(v *DescribePublicAntChainDownloadPathsResponseBodyResult) *DescribePublicAntChainDownloadPathsResponseBody {
	s.Result = v
	return s
}

type DescribePublicAntChainDownloadPathsResponseBodyResult struct {
	CaCrtUrl     *string `json:"CaCrtUrl,omitempty" xml:"CaCrtUrl,omitempty"`
	ClientCrtUrl *string `json:"ClientCrtUrl,omitempty" xml:"ClientCrtUrl,omitempty"`
	SdkUrl       *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
	TrustCaUrl   *string `json:"TrustCaUrl,omitempty" xml:"TrustCaUrl,omitempty"`
}

func (s DescribePublicAntChainDownloadPathsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicAntChainDownloadPathsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribePublicAntChainDownloadPathsResponseBodyResult) SetCaCrtUrl(v string) *DescribePublicAntChainDownloadPathsResponseBodyResult {
	s.CaCrtUrl = &v
	return s
}

func (s *DescribePublicAntChainDownloadPathsResponseBodyResult) SetClientCrtUrl(v string) *DescribePublicAntChainDownloadPathsResponseBodyResult {
	s.ClientCrtUrl = &v
	return s
}

func (s *DescribePublicAntChainDownloadPathsResponseBodyResult) SetSdkUrl(v string) *DescribePublicAntChainDownloadPathsResponseBodyResult {
	s.SdkUrl = &v
	return s
}

func (s *DescribePublicAntChainDownloadPathsResponseBodyResult) SetTrustCaUrl(v string) *DescribePublicAntChainDownloadPathsResponseBodyResult {
	s.TrustCaUrl = &v
	return s
}

type DescribePublicAntChainDownloadPathsResponse struct {
	Headers    map[string]*string                               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePublicAntChainDownloadPathsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePublicAntChainDownloadPathsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicAntChainDownloadPathsResponse) GoString() string {
	return s.String()
}

func (s *DescribePublicAntChainDownloadPathsResponse) SetHeaders(v map[string]*string) *DescribePublicAntChainDownloadPathsResponse {
	s.Headers = v
	return s
}

func (s *DescribePublicAntChainDownloadPathsResponse) SetStatusCode(v int32) *DescribePublicAntChainDownloadPathsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePublicAntChainDownloadPathsResponse) SetBody(v *DescribePublicAntChainDownloadPathsResponseBody) *DescribePublicAntChainDownloadPathsResponse {
	s.Body = v
	return s
}

type DescribePublicCloudIDEEnvConfigsRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribePublicCloudIDEEnvConfigsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicCloudIDEEnvConfigsRequest) GoString() string {
	return s.String()
}

func (s *DescribePublicCloudIDEEnvConfigsRequest) SetBizid(v string) *DescribePublicCloudIDEEnvConfigsRequest {
	s.Bizid = &v
	return s
}

type DescribePublicCloudIDEEnvConfigsResponseBody struct {
	RequestId *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribePublicCloudIDEEnvConfigsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribePublicCloudIDEEnvConfigsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicCloudIDEEnvConfigsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribePublicCloudIDEEnvConfigsResponseBody) SetRequestId(v string) *DescribePublicCloudIDEEnvConfigsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribePublicCloudIDEEnvConfigsResponseBody) SetResult(v []*DescribePublicCloudIDEEnvConfigsResponseBodyResult) *DescribePublicCloudIDEEnvConfigsResponseBody {
	s.Result = v
	return s
}

type DescribePublicCloudIDEEnvConfigsResponseBodyResult struct {
	Bizid                  *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Name                   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TrialAccount           *string `json:"TrialAccount,omitempty" xml:"TrialAccount,omitempty"`
	TrialAccountPrivateKey *string `json:"TrialAccountPrivateKey,omitempty" xml:"TrialAccountPrivateKey,omitempty"`
	Version                *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribePublicCloudIDEEnvConfigsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicCloudIDEEnvConfigsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribePublicCloudIDEEnvConfigsResponseBodyResult) SetBizid(v string) *DescribePublicCloudIDEEnvConfigsResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *DescribePublicCloudIDEEnvConfigsResponseBodyResult) SetName(v string) *DescribePublicCloudIDEEnvConfigsResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribePublicCloudIDEEnvConfigsResponseBodyResult) SetTrialAccount(v string) *DescribePublicCloudIDEEnvConfigsResponseBodyResult {
	s.TrialAccount = &v
	return s
}

func (s *DescribePublicCloudIDEEnvConfigsResponseBodyResult) SetTrialAccountPrivateKey(v string) *DescribePublicCloudIDEEnvConfigsResponseBodyResult {
	s.TrialAccountPrivateKey = &v
	return s
}

func (s *DescribePublicCloudIDEEnvConfigsResponseBodyResult) SetVersion(v string) *DescribePublicCloudIDEEnvConfigsResponseBodyResult {
	s.Version = &v
	return s
}

type DescribePublicCloudIDEEnvConfigsResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribePublicCloudIDEEnvConfigsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribePublicCloudIDEEnvConfigsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribePublicCloudIDEEnvConfigsResponse) GoString() string {
	return s.String()
}

func (s *DescribePublicCloudIDEEnvConfigsResponse) SetHeaders(v map[string]*string) *DescribePublicCloudIDEEnvConfigsResponse {
	s.Headers = v
	return s
}

func (s *DescribePublicCloudIDEEnvConfigsResponse) SetStatusCode(v int32) *DescribePublicCloudIDEEnvConfigsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribePublicCloudIDEEnvConfigsResponse) SetBody(v *DescribePublicCloudIDEEnvConfigsResponseBody) *DescribePublicCloudIDEEnvConfigsResponse {
	s.Body = v
	return s
}

type DescribeQRCodeAccessLogRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeQRCodeAccessLogRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQRCodeAccessLogRequest) GoString() string {
	return s.String()
}

func (s *DescribeQRCodeAccessLogRequest) SetBizid(v string) *DescribeQRCodeAccessLogRequest {
	s.Bizid = &v
	return s
}

type DescribeQRCodeAccessLogResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeQRCodeAccessLogResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeQRCodeAccessLogResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQRCodeAccessLogResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQRCodeAccessLogResponseBody) SetRequestId(v string) *DescribeQRCodeAccessLogResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeQRCodeAccessLogResponseBody) SetResult(v *DescribeQRCodeAccessLogResponseBodyResult) *DescribeQRCodeAccessLogResponseBody {
	s.Result = v
	return s
}

type DescribeQRCodeAccessLogResponseBodyResult struct {
	AccessAlipayAccountCount *int64 `json:"AccessAlipayAccountCount,omitempty" xml:"AccessAlipayAccountCount,omitempty"`
	AccessCount              *int64 `json:"AccessCount,omitempty" xml:"AccessCount,omitempty"`
}

func (s DescribeQRCodeAccessLogResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeQRCodeAccessLogResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeQRCodeAccessLogResponseBodyResult) SetAccessAlipayAccountCount(v int64) *DescribeQRCodeAccessLogResponseBodyResult {
	s.AccessAlipayAccountCount = &v
	return s
}

func (s *DescribeQRCodeAccessLogResponseBodyResult) SetAccessCount(v int64) *DescribeQRCodeAccessLogResponseBodyResult {
	s.AccessCount = &v
	return s
}

type DescribeQRCodeAccessLogResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeQRCodeAccessLogResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeQRCodeAccessLogResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQRCodeAccessLogResponse) GoString() string {
	return s.String()
}

func (s *DescribeQRCodeAccessLogResponse) SetHeaders(v map[string]*string) *DescribeQRCodeAccessLogResponse {
	s.Headers = v
	return s
}

func (s *DescribeQRCodeAccessLogResponse) SetStatusCode(v int32) *DescribeQRCodeAccessLogResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQRCodeAccessLogResponse) SetBody(v *DescribeQRCodeAccessLogResponseBody) *DescribeQRCodeAccessLogResponse {
	s.Body = v
	return s
}

type DescribeQRCodeAuthorityRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DescribeQRCodeAuthorityRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeQRCodeAuthorityRequest) GoString() string {
	return s.String()
}

func (s *DescribeQRCodeAuthorityRequest) SetBizid(v string) *DescribeQRCodeAuthorityRequest {
	s.Bizid = &v
	return s
}

type DescribeQRCodeAuthorityResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeQRCodeAuthorityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeQRCodeAuthorityResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeQRCodeAuthorityResponseBody) SetRequestId(v string) *DescribeQRCodeAuthorityResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeQRCodeAuthorityResponseBody) SetResult(v bool) *DescribeQRCodeAuthorityResponseBody {
	s.Result = &v
	return s
}

type DescribeQRCodeAuthorityResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeQRCodeAuthorityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeQRCodeAuthorityResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeQRCodeAuthorityResponse) GoString() string {
	return s.String()
}

func (s *DescribeQRCodeAuthorityResponse) SetHeaders(v map[string]*string) *DescribeQRCodeAuthorityResponse {
	s.Headers = v
	return s
}

func (s *DescribeQRCodeAuthorityResponse) SetStatusCode(v int32) *DescribeQRCodeAuthorityResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeQRCodeAuthorityResponse) SetBody(v *DescribeQRCodeAuthorityResponseBody) *DescribeQRCodeAuthorityResponse {
	s.Body = v
	return s
}

type DescribeRegionsResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 29857326-A574-49A7-897C-E428471D79D6
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeRegionsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeRegionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBody) SetErrorCode(v int32) *DescribeRegionsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeRegionsResponseBody) SetRequestId(v string) *DescribeRegionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRegionsResponseBody) SetResult(v []*DescribeRegionsResponseBodyResult) *DescribeRegionsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeRegionsResponseBody) SetSuccess(v bool) *DescribeRegionsResponseBody {
	s.Success = &v
	return s
}

type DescribeRegionsResponseBodyResult struct {
	// Id
	//
	// example:
	//
	// 1
	Id *int32 `json:"Id,omitempty" xml:"Id,omitempty"`
	// example:
	//
	// true
	Online *bool `json:"Online,omitempty" xml:"Online,omitempty"`
	// example:
	//
	// cn-hangzhou
	RegionId *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	Title    *string `json:"Title,omitempty" xml:"Title,omitempty"`
}

func (s DescribeRegionsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponseBodyResult) SetId(v int32) *DescribeRegionsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DescribeRegionsResponseBodyResult) SetOnline(v bool) *DescribeRegionsResponseBodyResult {
	s.Online = &v
	return s
}

func (s *DescribeRegionsResponseBodyResult) SetRegionId(v string) *DescribeRegionsResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DescribeRegionsResponseBodyResult) SetTitle(v string) *DescribeRegionsResponseBodyResult {
	s.Title = &v
	return s
}

type DescribeRegionsResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRegionsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRegionsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRegionsResponse) GoString() string {
	return s.String()
}

func (s *DescribeRegionsResponse) SetHeaders(v map[string]*string) *DescribeRegionsResponse {
	s.Headers = v
	return s
}

func (s *DescribeRegionsResponse) SetStatusCode(v int32) *DescribeRegionsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRegionsResponse) SetBody(v *DescribeRegionsResponseBody) *DescribeRegionsResponse {
	s.Body = v
	return s
}

type DescribeResourceTypeResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeResourceTypeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeResourceTypeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTypeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceTypeResponseBody) SetRequestId(v string) *DescribeResourceTypeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceTypeResponseBody) SetResult(v []*DescribeResourceTypeResponseBodyResult) *DescribeResourceTypeResponseBody {
	s.Result = v
	return s
}

type DescribeResourceTypeResponseBodyResult struct {
	Cpu      *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	Disk     *int32  `json:"Disk,omitempty" xml:"Disk,omitempty"`
	Memory   *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	TypeId   *int32  `json:"TypeId,omitempty" xml:"TypeId,omitempty"`
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s DescribeResourceTypeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTypeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeResourceTypeResponseBodyResult) SetCpu(v int32) *DescribeResourceTypeResponseBodyResult {
	s.Cpu = &v
	return s
}

func (s *DescribeResourceTypeResponseBodyResult) SetDisk(v int32) *DescribeResourceTypeResponseBodyResult {
	s.Disk = &v
	return s
}

func (s *DescribeResourceTypeResponseBodyResult) SetMemory(v int32) *DescribeResourceTypeResponseBodyResult {
	s.Memory = &v
	return s
}

func (s *DescribeResourceTypeResponseBodyResult) SetTypeId(v int32) *DescribeResourceTypeResponseBodyResult {
	s.TypeId = &v
	return s
}

func (s *DescribeResourceTypeResponseBodyResult) SetTypeName(v string) *DescribeResourceTypeResponseBodyResult {
	s.TypeName = &v
	return s
}

type DescribeResourceTypeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourceTypeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourceTypeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTypeResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceTypeResponse) SetHeaders(v map[string]*string) *DescribeResourceTypeResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceTypeResponse) SetStatusCode(v int32) *DescribeResourceTypeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceTypeResponse) SetBody(v *DescribeResourceTypeResponseBody) *DescribeResourceTypeResponse {
	s.Body = v
	return s
}

type DescribeResourceTypesResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeResourceTypesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s DescribeResourceTypesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTypesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeResourceTypesResponseBody) SetRequestId(v string) *DescribeResourceTypesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeResourceTypesResponseBody) SetResult(v []*DescribeResourceTypesResponseBodyResult) *DescribeResourceTypesResponseBody {
	s.Result = v
	return s
}

type DescribeResourceTypesResponseBodyResult struct {
	Cpu      *int32  `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	Disk     *int32  `json:"Disk,omitempty" xml:"Disk,omitempty"`
	Memory   *int32  `json:"Memory,omitempty" xml:"Memory,omitempty"`
	TypeId   *int32  `json:"TypeId,omitempty" xml:"TypeId,omitempty"`
	TypeName *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
}

func (s DescribeResourceTypesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTypesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeResourceTypesResponseBodyResult) SetCpu(v int32) *DescribeResourceTypesResponseBodyResult {
	s.Cpu = &v
	return s
}

func (s *DescribeResourceTypesResponseBodyResult) SetDisk(v int32) *DescribeResourceTypesResponseBodyResult {
	s.Disk = &v
	return s
}

func (s *DescribeResourceTypesResponseBodyResult) SetMemory(v int32) *DescribeResourceTypesResponseBodyResult {
	s.Memory = &v
	return s
}

func (s *DescribeResourceTypesResponseBodyResult) SetTypeId(v int32) *DescribeResourceTypesResponseBodyResult {
	s.TypeId = &v
	return s
}

func (s *DescribeResourceTypesResponseBodyResult) SetTypeName(v string) *DescribeResourceTypesResponseBodyResult {
	s.TypeName = &v
	return s
}

type DescribeResourceTypesResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeResourceTypesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeResourceTypesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeResourceTypesResponse) GoString() string {
	return s.String()
}

func (s *DescribeResourceTypesResponse) SetHeaders(v map[string]*string) *DescribeResourceTypesResponse {
	s.Headers = v
	return s
}

func (s *DescribeResourceTypesResponse) SetStatusCode(v int32) *DescribeResourceTypesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeResourceTypesResponse) SetBody(v *DescribeResourceTypesResponseBody) *DescribeResourceTypesResponse {
	s.Body = v
	return s
}

type DescribeRootDomainResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// example:
	//
	// onaliyunbaas.com
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeRootDomainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeRootDomainResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeRootDomainResponseBody) SetErrorCode(v int32) *DescribeRootDomainResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeRootDomainResponseBody) SetRequestId(v string) *DescribeRootDomainResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeRootDomainResponseBody) SetResult(v string) *DescribeRootDomainResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeRootDomainResponseBody) SetSuccess(v bool) *DescribeRootDomainResponseBody {
	s.Success = &v
	return s
}

type DescribeRootDomainResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeRootDomainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeRootDomainResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeRootDomainResponse) GoString() string {
	return s.String()
}

func (s *DescribeRootDomainResponse) SetHeaders(v map[string]*string) *DescribeRootDomainResponse {
	s.Headers = v
	return s
}

func (s *DescribeRootDomainResponse) SetStatusCode(v int32) *DescribeRootDomainResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeRootDomainResponse) SetBody(v *DescribeRootDomainResponseBody) *DescribeRootDomainResponse {
	s.Body = v
	return s
}

type DescribeSchemaDetailRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	SchemaId *int64  `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s DescribeSchemaDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSchemaDetailRequest) GoString() string {
	return s.String()
}

func (s *DescribeSchemaDetailRequest) SetBizid(v string) *DescribeSchemaDetailRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeSchemaDetailRequest) SetSchemaId(v int64) *DescribeSchemaDetailRequest {
	s.SchemaId = &v
	return s
}

type DescribeSchemaDetailResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeSchemaDetailResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeSchemaDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSchemaDetailResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSchemaDetailResponseBody) SetRequestId(v string) *DescribeSchemaDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSchemaDetailResponseBody) SetResult(v *DescribeSchemaDetailResponseBodyResult) *DescribeSchemaDetailResponseBody {
	s.Result = v
	return s
}

type DescribeSchemaDetailResponseBodyResult struct {
	Responses []*DescribeSchemaDetailResponseBodyResultResponses `json:"Responses,omitempty" xml:"Responses,omitempty" type:"Repeated"`
	Schema    *DescribeSchemaDetailResponseBodyResultSchema      `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
}

func (s DescribeSchemaDetailResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeSchemaDetailResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeSchemaDetailResponseBodyResult) SetResponses(v []*DescribeSchemaDetailResponseBodyResultResponses) *DescribeSchemaDetailResponseBodyResult {
	s.Responses = v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResult) SetSchema(v *DescribeSchemaDetailResponseBodyResultSchema) *DescribeSchemaDetailResponseBodyResult {
	s.Schema = v
	return s
}

type DescribeSchemaDetailResponseBodyResultResponses struct {
	Category     *string                                                    `json:"Category,omitempty" xml:"Category,omitempty"`
	CategoryName *string                                                    `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Description  *string                                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	Properties   *DescribeSchemaDetailResponseBodyResultResponsesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s DescribeSchemaDetailResponseBodyResultResponses) String() string {
	return tea.Prettify(s)
}

func (s DescribeSchemaDetailResponseBodyResultResponses) GoString() string {
	return s.String()
}

func (s *DescribeSchemaDetailResponseBodyResultResponses) SetCategory(v string) *DescribeSchemaDetailResponseBodyResultResponses {
	s.Category = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponses) SetCategoryName(v string) *DescribeSchemaDetailResponseBodyResultResponses {
	s.CategoryName = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponses) SetDescription(v string) *DescribeSchemaDetailResponseBodyResultResponses {
	s.Description = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponses) SetProperties(v *DescribeSchemaDetailResponseBodyResultResponsesProperties) *DescribeSchemaDetailResponseBodyResultResponses {
	s.Properties = v
	return s
}

type DescribeSchemaDetailResponseBodyResultResponsesProperties struct {
	Count      *int32                                                                 `json:"Count,omitempty" xml:"Count,omitempty"`
	DataSource []*DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s DescribeSchemaDetailResponseBodyResultResponsesProperties) String() string {
	return tea.Prettify(s)
}

func (s DescribeSchemaDetailResponseBodyResultResponsesProperties) GoString() string {
	return s.String()
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesProperties) SetCount(v int32) *DescribeSchemaDetailResponseBodyResultResponsesProperties {
	s.Count = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesProperties) SetDataSource(v []*DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) *DescribeSchemaDetailResponseBodyResultResponsesProperties {
	s.DataSource = v
	return s
}

type DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource struct {
	AllowNull  *int32  `json:"AllowNull,omitempty" xml:"AllowNull,omitempty"`
	Annotation *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Indexes    *int32  `json:"Indexes,omitempty" xml:"Indexes,omitempty"`
	Key        *int32  `json:"Key,omitempty" xml:"Key,omitempty"`
	Length     *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reg        *string `json:"Reg,omitempty" xml:"Reg,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) String() string {
	return tea.Prettify(s)
}

func (s DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) GoString() string {
	return s.String()
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetAllowNull(v int32) *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.AllowNull = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetAnnotation(v string) *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Annotation = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetField(v string) *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Field = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetIndexes(v int32) *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Indexes = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetKey(v int32) *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Key = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetLength(v int32) *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Length = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetReg(v string) *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Reg = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetType(v string) *DescribeSchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Type = &v
	return s
}

type DescribeSchemaDetailResponseBodyResultSchema struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *bool   `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeSchemaDetailResponseBodyResultSchema) String() string {
	return tea.Prettify(s)
}

func (s DescribeSchemaDetailResponseBodyResultSchema) GoString() string {
	return s.String()
}

func (s *DescribeSchemaDetailResponseBodyResultSchema) SetCreateTime(v int64) *DescribeSchemaDetailResponseBodyResultSchema {
	s.CreateTime = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultSchema) SetDescription(v string) *DescribeSchemaDetailResponseBodyResultSchema {
	s.Description = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultSchema) SetId(v int64) *DescribeSchemaDetailResponseBodyResultSchema {
	s.Id = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultSchema) SetIsTemplate(v bool) *DescribeSchemaDetailResponseBodyResultSchema {
	s.IsTemplate = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultSchema) SetName(v string) *DescribeSchemaDetailResponseBodyResultSchema {
	s.Name = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultSchema) SetUpdateTime(v int64) *DescribeSchemaDetailResponseBodyResultSchema {
	s.UpdateTime = &v
	return s
}

func (s *DescribeSchemaDetailResponseBodyResultSchema) SetVersion(v int64) *DescribeSchemaDetailResponseBodyResultSchema {
	s.Version = &v
	return s
}

type DescribeSchemaDetailResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSchemaDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSchemaDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSchemaDetailResponse) GoString() string {
	return s.String()
}

func (s *DescribeSchemaDetailResponse) SetHeaders(v map[string]*string) *DescribeSchemaDetailResponse {
	s.Headers = v
	return s
}

func (s *DescribeSchemaDetailResponse) SetStatusCode(v int32) *DescribeSchemaDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSchemaDetailResponse) SetBody(v *DescribeSchemaDetailResponseBody) *DescribeSchemaDetailResponse {
	s.Body = v
	return s
}

type DescribeSmartContractJobStatusRequest struct {
	// This parameter is required.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DescribeSmartContractJobStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobStatusRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobStatusRequest) SetJobId(v string) *DescribeSmartContractJobStatusRequest {
	s.JobId = &v
	return s
}

type DescribeSmartContractJobStatusResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSmartContractJobStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobStatusResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobStatusResponseBody) SetErrorCode(v int32) *DescribeSmartContractJobStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSmartContractJobStatusResponseBody) SetRequestId(v string) *DescribeSmartContractJobStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartContractJobStatusResponseBody) SetResult(v string) *DescribeSmartContractJobStatusResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeSmartContractJobStatusResponseBody) SetSuccess(v bool) *DescribeSmartContractJobStatusResponseBody {
	s.Success = &v
	return s
}

type DescribeSmartContractJobStatusResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSmartContractJobStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSmartContractJobStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobStatusResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobStatusResponse) SetHeaders(v map[string]*string) *DescribeSmartContractJobStatusResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartContractJobStatusResponse) SetStatusCode(v int32) *DescribeSmartContractJobStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartContractJobStatusResponse) SetBody(v *DescribeSmartContractJobStatusResponseBody) *DescribeSmartContractJobStatusResponse {
	s.Body = v
	return s
}

type DescribeSmartContractJobsRequest struct {
	// This parameter is required.
	Size *int32 `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	Start *int32 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s DescribeSmartContractJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsRequest) SetSize(v int32) *DescribeSmartContractJobsRequest {
	s.Size = &v
	return s
}

func (s *DescribeSmartContractJobsRequest) SetStart(v int32) *DescribeSmartContractJobsRequest {
	s.Start = &v
	return s
}

type DescribeSmartContractJobsResponseBody struct {
	ErrorCode *int32                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeSmartContractJobsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSmartContractJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsResponseBody) SetErrorCode(v int32) *DescribeSmartContractJobsResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBody) SetRequestId(v string) *DescribeSmartContractJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBody) SetResult(v *DescribeSmartContractJobsResponseBodyResult) *DescribeSmartContractJobsResponseBody {
	s.Result = v
	return s
}

func (s *DescribeSmartContractJobsResponseBody) SetSuccess(v bool) *DescribeSmartContractJobsResponseBody {
	s.Success = &v
	return s
}

type DescribeSmartContractJobsResponseBodyResult struct {
	Content          []*DescribeSmartContractJobsResponseBodyResultContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Repeated"`
	First            *bool                                                 `json:"First,omitempty" xml:"First,omitempty"`
	Last             *bool                                                 `json:"Last,omitempty" xml:"Last,omitempty"`
	NumberOfElements *int32                                                `json:"NumberOfElements,omitempty" xml:"NumberOfElements,omitempty"`
	Size             *int32                                                `json:"Size,omitempty" xml:"Size,omitempty"`
	TotalElements    *int32                                                `json:"TotalElements,omitempty" xml:"TotalElements,omitempty"`
	TotalPages       *int32                                                `json:"TotalPages,omitempty" xml:"TotalPages,omitempty"`
}

func (s DescribeSmartContractJobsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsResponseBodyResult) SetContent(v []*DescribeSmartContractJobsResponseBodyResultContent) *DescribeSmartContractJobsResponseBodyResult {
	s.Content = v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResult) SetFirst(v bool) *DescribeSmartContractJobsResponseBodyResult {
	s.First = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResult) SetLast(v bool) *DescribeSmartContractJobsResponseBodyResult {
	s.Last = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResult) SetNumberOfElements(v int32) *DescribeSmartContractJobsResponseBodyResult {
	s.NumberOfElements = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResult) SetSize(v int32) *DescribeSmartContractJobsResponseBodyResult {
	s.Size = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResult) SetTotalElements(v int32) *DescribeSmartContractJobsResponseBodyResult {
	s.TotalElements = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResult) SetTotalPages(v int32) *DescribeSmartContractJobsResponseBodyResult {
	s.TotalPages = &v
	return s
}

type DescribeSmartContractJobsResponseBodyResultContent struct {
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishedTime *int64  `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SourceType   *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UserBid      *string `json:"UserBid,omitempty" xml:"UserBid,omitempty"`
	UserId       *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DescribeSmartContractJobsResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsResponseBodyResultContent) SetCreateTime(v int64) *DescribeSmartContractJobsResponseBodyResultContent {
	s.CreateTime = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResultContent) SetFinishedTime(v int64) *DescribeSmartContractJobsResponseBodyResultContent {
	s.FinishedTime = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResultContent) SetJobId(v string) *DescribeSmartContractJobsResponseBodyResultContent {
	s.JobId = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResultContent) SetName(v string) *DescribeSmartContractJobsResponseBodyResultContent {
	s.Name = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResultContent) SetSourceType(v string) *DescribeSmartContractJobsResponseBodyResultContent {
	s.SourceType = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResultContent) SetStatus(v string) *DescribeSmartContractJobsResponseBodyResultContent {
	s.Status = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResultContent) SetUserBid(v string) *DescribeSmartContractJobsResponseBodyResultContent {
	s.UserBid = &v
	return s
}

func (s *DescribeSmartContractJobsResponseBodyResultContent) SetUserId(v int64) *DescribeSmartContractJobsResponseBodyResultContent {
	s.UserId = &v
	return s
}

type DescribeSmartContractJobsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSmartContractJobsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSmartContractJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsResponse) SetHeaders(v map[string]*string) *DescribeSmartContractJobsResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartContractJobsResponse) SetStatusCode(v int32) *DescribeSmartContractJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartContractJobsResponse) SetBody(v *DescribeSmartContractJobsResponseBody) *DescribeSmartContractJobsResponse {
	s.Body = v
	return s
}

type DescribeSmartContractJobsByNameRequest struct {
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Size *int32  `json:"Size,omitempty" xml:"Size,omitempty"`
	// This parameter is required.
	Start *int32 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s DescribeSmartContractJobsByNameRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsByNameRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsByNameRequest) SetName(v string) *DescribeSmartContractJobsByNameRequest {
	s.Name = &v
	return s
}

func (s *DescribeSmartContractJobsByNameRequest) SetSize(v int32) *DescribeSmartContractJobsByNameRequest {
	s.Size = &v
	return s
}

func (s *DescribeSmartContractJobsByNameRequest) SetStart(v int32) *DescribeSmartContractJobsByNameRequest {
	s.Start = &v
	return s
}

type DescribeSmartContractJobsByNameResponseBody struct {
	ErrorCode *int32                                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeSmartContractJobsByNameResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSmartContractJobsByNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsByNameResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsByNameResponseBody) SetErrorCode(v int32) *DescribeSmartContractJobsByNameResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBody) SetRequestId(v string) *DescribeSmartContractJobsByNameResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBody) SetResult(v *DescribeSmartContractJobsByNameResponseBodyResult) *DescribeSmartContractJobsByNameResponseBody {
	s.Result = v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBody) SetSuccess(v bool) *DescribeSmartContractJobsByNameResponseBody {
	s.Success = &v
	return s
}

type DescribeSmartContractJobsByNameResponseBodyResult struct {
	Content          []*DescribeSmartContractJobsByNameResponseBodyResultContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Repeated"`
	First            *bool                                                       `json:"First,omitempty" xml:"First,omitempty"`
	Last             *bool                                                       `json:"Last,omitempty" xml:"Last,omitempty"`
	NumberOfElements *int32                                                      `json:"NumberOfElements,omitempty" xml:"NumberOfElements,omitempty"`
	Size             *int32                                                      `json:"Size,omitempty" xml:"Size,omitempty"`
	TotalElements    *int32                                                      `json:"TotalElements,omitempty" xml:"TotalElements,omitempty"`
	TotalPages       *int32                                                      `json:"TotalPages,omitempty" xml:"TotalPages,omitempty"`
}

func (s DescribeSmartContractJobsByNameResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsByNameResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsByNameResponseBodyResult) SetContent(v []*DescribeSmartContractJobsByNameResponseBodyResultContent) *DescribeSmartContractJobsByNameResponseBodyResult {
	s.Content = v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResult) SetFirst(v bool) *DescribeSmartContractJobsByNameResponseBodyResult {
	s.First = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResult) SetLast(v bool) *DescribeSmartContractJobsByNameResponseBodyResult {
	s.Last = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResult) SetNumberOfElements(v int32) *DescribeSmartContractJobsByNameResponseBodyResult {
	s.NumberOfElements = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResult) SetSize(v int32) *DescribeSmartContractJobsByNameResponseBodyResult {
	s.Size = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResult) SetTotalElements(v int32) *DescribeSmartContractJobsByNameResponseBodyResult {
	s.TotalElements = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResult) SetTotalPages(v int32) *DescribeSmartContractJobsByNameResponseBodyResult {
	s.TotalPages = &v
	return s
}

type DescribeSmartContractJobsByNameResponseBodyResultContent struct {
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	FinishedTime *int64  `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	SourceType   *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	UserBid      *string `json:"UserBid,omitempty" xml:"UserBid,omitempty"`
	UserId       *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DescribeSmartContractJobsByNameResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsByNameResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsByNameResponseBodyResultContent) SetCreateTime(v int64) *DescribeSmartContractJobsByNameResponseBodyResultContent {
	s.CreateTime = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResultContent) SetFinishedTime(v int64) *DescribeSmartContractJobsByNameResponseBodyResultContent {
	s.FinishedTime = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResultContent) SetJobId(v string) *DescribeSmartContractJobsByNameResponseBodyResultContent {
	s.JobId = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResultContent) SetName(v string) *DescribeSmartContractJobsByNameResponseBodyResultContent {
	s.Name = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResultContent) SetSourceType(v string) *DescribeSmartContractJobsByNameResponseBodyResultContent {
	s.SourceType = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResultContent) SetStatus(v string) *DescribeSmartContractJobsByNameResponseBodyResultContent {
	s.Status = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResultContent) SetUserBid(v string) *DescribeSmartContractJobsByNameResponseBodyResultContent {
	s.UserBid = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponseBodyResultContent) SetUserId(v string) *DescribeSmartContractJobsByNameResponseBodyResultContent {
	s.UserId = &v
	return s
}

type DescribeSmartContractJobsByNameResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSmartContractJobsByNameResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSmartContractJobsByNameResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractJobsByNameResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractJobsByNameResponse) SetHeaders(v map[string]*string) *DescribeSmartContractJobsByNameResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartContractJobsByNameResponse) SetStatusCode(v int32) *DescribeSmartContractJobsByNameResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartContractJobsByNameResponse) SetBody(v *DescribeSmartContractJobsByNameResponseBody) *DescribeSmartContractJobsByNameResponse {
	s.Body = v
	return s
}

type DescribeSmartContractResultRequest struct {
	// This parameter is required.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DescribeSmartContractResultRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultRequest) SetJobId(v string) *DescribeSmartContractResultRequest {
	s.JobId = &v
	return s
}

type DescribeSmartContractResultResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSmartContractResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultResponseBody) SetErrorCode(v int32) *DescribeSmartContractResultResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSmartContractResultResponseBody) SetRequestId(v string) *DescribeSmartContractResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartContractResultResponseBody) SetResult(v string) *DescribeSmartContractResultResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeSmartContractResultResponseBody) SetSuccess(v bool) *DescribeSmartContractResultResponseBody {
	s.Success = &v
	return s
}

type DescribeSmartContractResultResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSmartContractResultResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSmartContractResultResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultResponse) SetHeaders(v map[string]*string) *DescribeSmartContractResultResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartContractResultResponse) SetStatusCode(v int32) *DescribeSmartContractResultResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartContractResultResponse) SetBody(v *DescribeSmartContractResultResponseBody) *DescribeSmartContractResultResponse {
	s.Body = v
	return s
}

type DescribeSmartContractResultContentRequest struct {
	// This parameter is required.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DescribeSmartContractResultContentRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentRequest) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentRequest) SetJobId(v string) *DescribeSmartContractResultContentRequest {
	s.JobId = &v
	return s
}

type DescribeSmartContractResultContentResponseBody struct {
	DynamicCode    *string                                                 `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	DynamicMessage *string                                                 `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrorCode      *int32                                                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId      *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         []*DescribeSmartContractResultContentResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success        *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSmartContractResultContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentResponseBody) SetDynamicCode(v string) *DescribeSmartContractResultContentResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBody) SetDynamicMessage(v string) *DescribeSmartContractResultContentResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBody) SetErrorCode(v int32) *DescribeSmartContractResultContentResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBody) SetRequestId(v string) *DescribeSmartContractResultContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBody) SetResult(v []*DescribeSmartContractResultContentResponseBodyResult) *DescribeSmartContractResultContentResponseBody {
	s.Result = v
	return s
}

func (s *DescribeSmartContractResultContentResponseBody) SetSuccess(v bool) *DescribeSmartContractResultContentResponseBody {
	s.Success = &v
	return s
}

type DescribeSmartContractResultContentResponseBodyResult struct {
	Diagnostics []*DescribeSmartContractResultContentResponseBodyResultDiagnostics `json:"Diagnostics,omitempty" xml:"Diagnostics,omitempty" type:"Repeated"`
	Uri         *string                                                            `json:"Uri,omitempty" xml:"Uri,omitempty"`
}

func (s DescribeSmartContractResultContentResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentResponseBodyResult) SetDiagnostics(v []*DescribeSmartContractResultContentResponseBodyResultDiagnostics) *DescribeSmartContractResultContentResponseBodyResult {
	s.Diagnostics = v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResult) SetUri(v string) *DescribeSmartContractResultContentResponseBodyResult {
	s.Uri = &v
	return s
}

type DescribeSmartContractResultContentResponseBodyResultDiagnostics struct {
	Advice   *string                                                                 `json:"Advice,omitempty" xml:"Advice,omitempty"`
	Code     *string                                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Detail   *string                                                                 `json:"Detail,omitempty" xml:"Detail,omitempty"`
	Message  *string                                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	Range    []*DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange `json:"Range,omitempty" xml:"Range,omitempty" type:"Repeated"`
	Severity *int32                                                                  `json:"Severity,omitempty" xml:"Severity,omitempty"`
	Source   *string                                                                 `json:"Source,omitempty" xml:"Source,omitempty"`
	Trace    []*DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace `json:"Trace,omitempty" xml:"Trace,omitempty" type:"Repeated"`
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnostics) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnostics) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnostics) SetAdvice(v string) *DescribeSmartContractResultContentResponseBodyResultDiagnostics {
	s.Advice = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnostics) SetCode(v string) *DescribeSmartContractResultContentResponseBodyResultDiagnostics {
	s.Code = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnostics) SetDetail(v string) *DescribeSmartContractResultContentResponseBodyResultDiagnostics {
	s.Detail = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnostics) SetMessage(v string) *DescribeSmartContractResultContentResponseBodyResultDiagnostics {
	s.Message = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnostics) SetRange(v []*DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange) *DescribeSmartContractResultContentResponseBodyResultDiagnostics {
	s.Range = v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnostics) SetSeverity(v int32) *DescribeSmartContractResultContentResponseBodyResultDiagnostics {
	s.Severity = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnostics) SetSource(v string) *DescribeSmartContractResultContentResponseBodyResultDiagnostics {
	s.Source = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnostics) SetTrace(v []*DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace) *DescribeSmartContractResultContentResponseBodyResultDiagnostics {
	s.Trace = v
	return s
}

type DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange struct {
	Character *int32 `json:"Character,omitempty" xml:"Character,omitempty"`
	Line      *int32 `json:"Line,omitempty" xml:"Line,omitempty"`
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange) SetCharacter(v int32) *DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange {
	s.Character = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange) SetLine(v int32) *DescribeSmartContractResultContentResponseBodyResultDiagnosticsRange {
	s.Line = &v
	return s
}

type DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace struct {
	Location *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation `json:"Location,omitempty" xml:"Location,omitempty" type:"Struct"`
	Message  *string                                                                       `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace) SetLocation(v *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation) *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace {
	s.Location = v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace) SetMessage(v string) *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTrace {
	s.Message = &v
	return s
}

type DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation struct {
	Range []*DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange `json:"Range,omitempty" xml:"Range,omitempty" type:"Repeated"`
	Uri   *string                                                                              `json:"Uri,omitempty" xml:"Uri,omitempty"`
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation) SetRange(v []*DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange) *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation {
	s.Range = v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation) SetUri(v string) *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocation {
	s.Uri = &v
	return s
}

type DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange struct {
	Character *int32 `json:"Character,omitempty" xml:"Character,omitempty"`
	Line      *int32 `json:"Line,omitempty" xml:"Line,omitempty"`
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange) SetCharacter(v int32) *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange {
	s.Character = &v
	return s
}

func (s *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange) SetLine(v int32) *DescribeSmartContractResultContentResponseBodyResultDiagnosticsTraceLocationRange {
	s.Line = &v
	return s
}

type DescribeSmartContractResultContentResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSmartContractResultContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSmartContractResultContentResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSmartContractResultContentResponse) GoString() string {
	return s.String()
}

func (s *DescribeSmartContractResultContentResponse) SetHeaders(v map[string]*string) *DescribeSmartContractResultContentResponse {
	s.Headers = v
	return s
}

func (s *DescribeSmartContractResultContentResponse) SetStatusCode(v int32) *DescribeSmartContractResultContentResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSmartContractResultContentResponse) SetBody(v *DescribeSmartContractResultContentResponseBody) *DescribeSmartContractResultContentResponse {
	s.Body = v
	return s
}

type DescribeSubscribeCloudServiceIntegrationStateRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeSubscribeCloudServiceIntegrationStateRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscribeCloudServiceIntegrationStateRequest) GoString() string {
	return s.String()
}

func (s *DescribeSubscribeCloudServiceIntegrationStateRequest) SetOrganizationId(v string) *DescribeSubscribeCloudServiceIntegrationStateRequest {
	s.OrganizationId = &v
	return s
}

type DescribeSubscribeCloudServiceIntegrationStateResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeSubscribeCloudServiceIntegrationStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscribeCloudServiceIntegrationStateResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeSubscribeCloudServiceIntegrationStateResponseBody) SetErrorCode(v int32) *DescribeSubscribeCloudServiceIntegrationStateResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeSubscribeCloudServiceIntegrationStateResponseBody) SetRequestId(v string) *DescribeSubscribeCloudServiceIntegrationStateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeSubscribeCloudServiceIntegrationStateResponseBody) SetResult(v string) *DescribeSubscribeCloudServiceIntegrationStateResponseBody {
	s.Result = &v
	return s
}

func (s *DescribeSubscribeCloudServiceIntegrationStateResponseBody) SetSuccess(v bool) *DescribeSubscribeCloudServiceIntegrationStateResponseBody {
	s.Success = &v
	return s
}

type DescribeSubscribeCloudServiceIntegrationStateResponse struct {
	Headers    map[string]*string                                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeSubscribeCloudServiceIntegrationStateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeSubscribeCloudServiceIntegrationStateResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeSubscribeCloudServiceIntegrationStateResponse) GoString() string {
	return s.String()
}

func (s *DescribeSubscribeCloudServiceIntegrationStateResponse) SetHeaders(v map[string]*string) *DescribeSubscribeCloudServiceIntegrationStateResponse {
	s.Headers = v
	return s
}

func (s *DescribeSubscribeCloudServiceIntegrationStateResponse) SetStatusCode(v int32) *DescribeSubscribeCloudServiceIntegrationStateResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeSubscribeCloudServiceIntegrationStateResponse) SetBody(v *DescribeSubscribeCloudServiceIntegrationStateResponseBody) *DescribeSubscribeCloudServiceIntegrationStateResponse {
	s.Body = v
	return s
}

type DescribeTasksResponseBody struct {
	// example:
	//
	// 111
	DynamicCode *string `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	// example:
	//
	// 111
	DynamicMessage *string `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DescribeTasksResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseBody) SetDynamicCode(v string) *DescribeTasksResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DescribeTasksResponseBody) SetDynamicMessage(v string) *DescribeTasksResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DescribeTasksResponseBody) SetErrorCode(v int32) *DescribeTasksResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeTasksResponseBody) SetRequestId(v string) *DescribeTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTasksResponseBody) SetResult(v []*DescribeTasksResponseBodyResult) *DescribeTasksResponseBody {
	s.Result = v
	return s
}

func (s *DescribeTasksResponseBody) SetSuccess(v bool) *DescribeTasksResponseBody {
	s.Success = &v
	return s
}

type DescribeTasksResponseBodyResult struct {
	// example:
	//
	// action
	Action   *string `json:"Action,omitempty" xml:"Action,omitempty"`
	Assignee *string `json:"Assignee,omitempty" xml:"Assignee,omitempty"`
	// example:
	//
	// false
	Handled *bool `json:"Handled,omitempty" xml:"Handled,omitempty"`
	// example:
	//
	// type
	OperationType *string `json:"OperationType,omitempty" xml:"OperationType,omitempty"`
	// example:
	//
	// 1533025590
	RequestTime *int64 `json:"RequestTime,omitempty" xml:"RequestTime,omitempty"`
	// example:
	//
	// 1533025590
	ResponseTime *string `json:"ResponseTime,omitempty" xml:"ResponseTime,omitempty"`
	// example:
	//
	// result
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// example:
	//
	// sender
	Sender *string `json:"Sender,omitempty" xml:"Sender,omitempty"`
	// example:
	//
	// target
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
	// example:
	//
	// 33
	TaskId    *int32  `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
}

func (s DescribeTasksResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponseBodyResult) SetAction(v string) *DescribeTasksResponseBodyResult {
	s.Action = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetAssignee(v string) *DescribeTasksResponseBodyResult {
	s.Assignee = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetHandled(v bool) *DescribeTasksResponseBodyResult {
	s.Handled = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetOperationType(v string) *DescribeTasksResponseBodyResult {
	s.OperationType = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetRequestTime(v int64) *DescribeTasksResponseBodyResult {
	s.RequestTime = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetResponseTime(v string) *DescribeTasksResponseBodyResult {
	s.ResponseTime = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetResult(v string) *DescribeTasksResponseBodyResult {
	s.Result = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetSender(v string) *DescribeTasksResponseBodyResult {
	s.Sender = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetTarget(v string) *DescribeTasksResponseBodyResult {
	s.Target = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetTaskId(v int32) *DescribeTasksResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *DescribeTasksResponseBodyResult) SetTaskState(v string) *DescribeTasksResponseBodyResult {
	s.TaskState = &v
	return s
}

type DescribeTasksResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTasksResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeTasksResponse) SetHeaders(v map[string]*string) *DescribeTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeTasksResponse) SetStatusCode(v int32) *DescribeTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTasksResponse) SetBody(v *DescribeTasksResponseBody) *DescribeTasksResponse {
	s.Body = v
	return s
}

type DescribeTemplatesResponseBody struct {
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeTemplatesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesResponseBody) SetRequestId(v string) *DescribeTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTemplatesResponseBody) SetResult(v *DescribeTemplatesResponseBodyResult) *DescribeTemplatesResponseBody {
	s.Result = v
	return s
}

type DescribeTemplatesResponseBodyResult struct {
	SchemaList []*DescribeTemplatesResponseBodyResultSchemaList `json:"SchemaList,omitempty" xml:"SchemaList,omitempty" type:"Repeated"`
}

func (s DescribeTemplatesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesResponseBodyResult) SetSchemaList(v []*DescribeTemplatesResponseBodyResultSchemaList) *DescribeTemplatesResponseBodyResult {
	s.SchemaList = v
	return s
}

type DescribeTemplatesResponseBodyResultSchemaList struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *int32  `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DescribeTemplatesResponseBodyResultSchemaList) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesResponseBodyResultSchemaList) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesResponseBodyResultSchemaList) SetCreateTime(v int64) *DescribeTemplatesResponseBodyResultSchemaList {
	s.CreateTime = &v
	return s
}

func (s *DescribeTemplatesResponseBodyResultSchemaList) SetDescription(v string) *DescribeTemplatesResponseBodyResultSchemaList {
	s.Description = &v
	return s
}

func (s *DescribeTemplatesResponseBodyResultSchemaList) SetId(v int64) *DescribeTemplatesResponseBodyResultSchemaList {
	s.Id = &v
	return s
}

func (s *DescribeTemplatesResponseBodyResultSchemaList) SetIsTemplate(v int32) *DescribeTemplatesResponseBodyResultSchemaList {
	s.IsTemplate = &v
	return s
}

func (s *DescribeTemplatesResponseBodyResultSchemaList) SetName(v string) *DescribeTemplatesResponseBodyResultSchemaList {
	s.Name = &v
	return s
}

func (s *DescribeTemplatesResponseBodyResultSchemaList) SetUpdateTime(v int64) *DescribeTemplatesResponseBodyResultSchemaList {
	s.UpdateTime = &v
	return s
}

func (s *DescribeTemplatesResponseBodyResultSchemaList) SetVersion(v int64) *DescribeTemplatesResponseBodyResultSchemaList {
	s.Version = &v
	return s
}

type DescribeTemplatesResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTemplatesResponse) GoString() string {
	return s.String()
}

func (s *DescribeTemplatesResponse) SetHeaders(v map[string]*string) *DescribeTemplatesResponse {
	s.Headers = v
	return s
}

func (s *DescribeTemplatesResponse) SetStatusCode(v int32) *DescribeTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTemplatesResponse) SetBody(v *DescribeTemplatesResponseBody) *DescribeTemplatesResponse {
	s.Body = v
	return s
}

type DescribeTransactionRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Hash  *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
}

func (s DescribeTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionRequest) GoString() string {
	return s.String()
}

func (s *DescribeTransactionRequest) SetBizid(v string) *DescribeTransactionRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeTransactionRequest) SetHash(v string) *DescribeTransactionRequest {
	s.Hash = &v
	return s
}

type DescribeTransactionResponseBody struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeTransactionResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeTransactionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTransactionResponseBody) SetRequestId(v string) *DescribeTransactionResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTransactionResponseBody) SetResult(v *DescribeTransactionResponseBodyResult) *DescribeTransactionResponseBody {
	s.Result = v
	return s
}

type DescribeTransactionResponseBodyResult struct {
	BlockHash      *string                                              `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	BlockHeight    *int64                                               `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	BlockVersion   *int32                                               `json:"BlockVersion,omitempty" xml:"BlockVersion,omitempty"`
	Category       *int32                                               `json:"Category,omitempty" xml:"Category,omitempty"`
	Content        *string                                              `json:"Content,omitempty" xml:"Content,omitempty"`
	ContentHash    *string                                              `json:"ContentHash,omitempty" xml:"ContentHash,omitempty"`
	CreateTime     *int64                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Hash           *string                                              `json:"Hash,omitempty" xml:"Hash,omitempty"`
	KeyName        *string                                              `json:"KeyName,omitempty" xml:"KeyName,omitempty"`
	KeyWrap        *string                                              `json:"KeyWrap,omitempty" xml:"KeyWrap,omitempty"`
	Nonce          *string                                              `json:"Nonce,omitempty" xml:"Nonce,omitempty"`
	ReferenceCount *int32                                               `json:"ReferenceCount,omitempty" xml:"ReferenceCount,omitempty"`
	ReferenceList  []*string                                            `json:"ReferenceList,omitempty" xml:"ReferenceList,omitempty" type:"Repeated"`
	TransTypeV6    *string                                              `json:"TransTypeV6,omitempty" xml:"TransTypeV6,omitempty"`
	TransactionV10 *DescribeTransactionResponseBodyResultTransactionV10 `json:"TransactionV10,omitempty" xml:"TransactionV10,omitempty" type:"Struct"`
}

func (s DescribeTransactionResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeTransactionResponseBodyResult) SetBlockHash(v string) *DescribeTransactionResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetBlockHeight(v int64) *DescribeTransactionResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetBlockVersion(v int32) *DescribeTransactionResponseBodyResult {
	s.BlockVersion = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetCategory(v int32) *DescribeTransactionResponseBodyResult {
	s.Category = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetContent(v string) *DescribeTransactionResponseBodyResult {
	s.Content = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetContentHash(v string) *DescribeTransactionResponseBodyResult {
	s.ContentHash = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetCreateTime(v int64) *DescribeTransactionResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetHash(v string) *DescribeTransactionResponseBodyResult {
	s.Hash = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetKeyName(v string) *DescribeTransactionResponseBodyResult {
	s.KeyName = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetKeyWrap(v string) *DescribeTransactionResponseBodyResult {
	s.KeyWrap = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetNonce(v string) *DescribeTransactionResponseBodyResult {
	s.Nonce = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetReferenceCount(v int32) *DescribeTransactionResponseBodyResult {
	s.ReferenceCount = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetReferenceList(v []*string) *DescribeTransactionResponseBodyResult {
	s.ReferenceList = v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetTransTypeV6(v string) *DescribeTransactionResponseBodyResult {
	s.TransTypeV6 = &v
	return s
}

func (s *DescribeTransactionResponseBodyResult) SetTransactionV10(v *DescribeTransactionResponseBodyResultTransactionV10) *DescribeTransactionResponseBodyResult {
	s.TransactionV10 = v
	return s
}

type DescribeTransactionResponseBodyResultTransactionV10 struct {
	Data          *string   `json:"Data,omitempty" xml:"Data,omitempty"`
	Extentions    []*string `json:"Extentions,omitempty" xml:"Extentions,omitempty" type:"Repeated"`
	From          *string   `json:"From,omitempty" xml:"From,omitempty"`
	Gas           *string   `json:"Gas,omitempty" xml:"Gas,omitempty"`
	Hash          *string   `json:"Hash,omitempty" xml:"Hash,omitempty"`
	Nonce         *string   `json:"Nonce,omitempty" xml:"Nonce,omitempty"`
	Period        *int64    `json:"Period,omitempty" xml:"Period,omitempty"`
	SignatureList []*string `json:"SignatureList,omitempty" xml:"SignatureList,omitempty" type:"Repeated"`
	Timestamp     *int64    `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	To            *string   `json:"To,omitempty" xml:"To,omitempty"`
	TxType        *string   `json:"TxType,omitempty" xml:"TxType,omitempty"`
	Value         *string   `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeTransactionResponseBodyResultTransactionV10) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionResponseBodyResultTransactionV10) GoString() string {
	return s.String()
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetData(v string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.Data = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetExtentions(v []*string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.Extentions = v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetFrom(v string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.From = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetGas(v string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.Gas = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetHash(v string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.Hash = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetNonce(v string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.Nonce = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetPeriod(v int64) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.Period = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetSignatureList(v []*string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.SignatureList = v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetTimestamp(v int64) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.Timestamp = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetTo(v string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.To = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetTxType(v string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.TxType = &v
	return s
}

func (s *DescribeTransactionResponseBodyResultTransactionV10) SetValue(v string) *DescribeTransactionResponseBodyResultTransactionV10 {
	s.Value = &v
	return s
}

type DescribeTransactionResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTransactionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionResponse) GoString() string {
	return s.String()
}

func (s *DescribeTransactionResponse) SetHeaders(v map[string]*string) *DescribeTransactionResponse {
	s.Headers = v
	return s
}

func (s *DescribeTransactionResponse) SetStatusCode(v int32) *DescribeTransactionResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTransactionResponse) SetBody(v *DescribeTransactionResponseBody) *DescribeTransactionResponse {
	s.Body = v
	return s
}

type DescribeTransactionFor2CBrowserRequest struct {
	// This parameter is required.
	AlipayAuthCode *string `json:"AlipayAuthCode,omitempty" xml:"AlipayAuthCode,omitempty"`
	// This parameter is required.
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	// This parameter is required.
	Hash *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
}

func (s DescribeTransactionFor2CBrowserRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionFor2CBrowserRequest) GoString() string {
	return s.String()
}

func (s *DescribeTransactionFor2CBrowserRequest) SetAlipayAuthCode(v string) *DescribeTransactionFor2CBrowserRequest {
	s.AlipayAuthCode = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserRequest) SetBizid(v string) *DescribeTransactionFor2CBrowserRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserRequest) SetHash(v string) *DescribeTransactionFor2CBrowserRequest {
	s.Hash = &v
	return s
}

type DescribeTransactionFor2CBrowserResponseBody struct {
	RequestId *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeTransactionFor2CBrowserResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeTransactionFor2CBrowserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionFor2CBrowserResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTransactionFor2CBrowserResponseBody) SetRequestId(v string) *DescribeTransactionFor2CBrowserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBody) SetResult(v *DescribeTransactionFor2CBrowserResponseBodyResult) *DescribeTransactionFor2CBrowserResponseBody {
	s.Result = v
	return s
}

type DescribeTransactionFor2CBrowserResponseBodyResult struct {
	BlockHash      *string                                                          `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	BlockHeight    *int64                                                           `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	BlockVersion   *int32                                                           `json:"BlockVersion,omitempty" xml:"BlockVersion,omitempty"`
	Category       *int32                                                           `json:"Category,omitempty" xml:"Category,omitempty"`
	Content        *string                                                          `json:"Content,omitempty" xml:"Content,omitempty"`
	ContentHash    *string                                                          `json:"ContentHash,omitempty" xml:"ContentHash,omitempty"`
	CreateTime     *int64                                                           `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Hash           *string                                                          `json:"Hash,omitempty" xml:"Hash,omitempty"`
	KeyName        *string                                                          `json:"KeyName,omitempty" xml:"KeyName,omitempty"`
	KeyWrap        *string                                                          `json:"KeyWrap,omitempty" xml:"KeyWrap,omitempty"`
	Nonce          *string                                                          `json:"Nonce,omitempty" xml:"Nonce,omitempty"`
	ReferenceCount *int32                                                           `json:"ReferenceCount,omitempty" xml:"ReferenceCount,omitempty"`
	ReferenceList  []*string                                                        `json:"ReferenceList,omitempty" xml:"ReferenceList,omitempty" type:"Repeated"`
	TransTypeV6    *string                                                          `json:"TransTypeV6,omitempty" xml:"TransTypeV6,omitempty"`
	TransactionV10 *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 `json:"TransactionV10,omitempty" xml:"TransactionV10,omitempty" type:"Struct"`
}

func (s DescribeTransactionFor2CBrowserResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionFor2CBrowserResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetBlockHash(v string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetBlockHeight(v int64) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetBlockVersion(v int32) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.BlockVersion = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetCategory(v int32) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.Category = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetContent(v string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.Content = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetContentHash(v string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.ContentHash = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetCreateTime(v int64) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetHash(v string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.Hash = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetKeyName(v string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.KeyName = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetKeyWrap(v string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.KeyWrap = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetNonce(v string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.Nonce = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetReferenceCount(v int32) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.ReferenceCount = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetReferenceList(v []*string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.ReferenceList = v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetTransTypeV6(v string) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.TransTypeV6 = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResult) SetTransactionV10(v *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) *DescribeTransactionFor2CBrowserResponseBodyResult {
	s.TransactionV10 = v
	return s
}

type DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 struct {
	Data          *string   `json:"Data,omitempty" xml:"Data,omitempty"`
	Extentions    []*string `json:"Extentions,omitempty" xml:"Extentions,omitempty" type:"Repeated"`
	From          *string   `json:"From,omitempty" xml:"From,omitempty"`
	Gas           *string   `json:"Gas,omitempty" xml:"Gas,omitempty"`
	Hash          *string   `json:"Hash,omitempty" xml:"Hash,omitempty"`
	Nonce         *string   `json:"Nonce,omitempty" xml:"Nonce,omitempty"`
	Period        *int64    `json:"Period,omitempty" xml:"Period,omitempty"`
	SignatureList []*string `json:"SignatureList,omitempty" xml:"SignatureList,omitempty" type:"Repeated"`
	Timestamp     *int64    `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	To            *string   `json:"To,omitempty" xml:"To,omitempty"`
	TxType        *string   `json:"TxType,omitempty" xml:"TxType,omitempty"`
	Value         *string   `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) GoString() string {
	return s.String()
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetData(v string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.Data = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetExtentions(v []*string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.Extentions = v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetFrom(v string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.From = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetGas(v string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.Gas = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetHash(v string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.Hash = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetNonce(v string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.Nonce = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetPeriod(v int64) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.Period = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetSignatureList(v []*string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.SignatureList = v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetTimestamp(v int64) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.Timestamp = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetTo(v string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.To = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetTxType(v string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.TxType = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10) SetValue(v string) *DescribeTransactionFor2CBrowserResponseBodyResultTransactionV10 {
	s.Value = &v
	return s
}

type DescribeTransactionFor2CBrowserResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTransactionFor2CBrowserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTransactionFor2CBrowserResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionFor2CBrowserResponse) GoString() string {
	return s.String()
}

func (s *DescribeTransactionFor2CBrowserResponse) SetHeaders(v map[string]*string) *DescribeTransactionFor2CBrowserResponse {
	s.Headers = v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponse) SetStatusCode(v int32) *DescribeTransactionFor2CBrowserResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTransactionFor2CBrowserResponse) SetBody(v *DescribeTransactionFor2CBrowserResponseBody) *DescribeTransactionFor2CBrowserResponse {
	s.Body = v
	return s
}

type DescribeTransactionQRCodeRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Hash  *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
}

func (s DescribeTransactionQRCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionQRCodeRequest) GoString() string {
	return s.String()
}

func (s *DescribeTransactionQRCodeRequest) SetBizid(v string) *DescribeTransactionQRCodeRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeTransactionQRCodeRequest) SetHash(v string) *DescribeTransactionQRCodeRequest {
	s.Hash = &v
	return s
}

type DescribeTransactionQRCodeResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeTransactionQRCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionQRCodeResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTransactionQRCodeResponseBody) SetRequestId(v string) *DescribeTransactionQRCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTransactionQRCodeResponseBody) SetResult(v string) *DescribeTransactionQRCodeResponseBody {
	s.Result = &v
	return s
}

type DescribeTransactionQRCodeResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTransactionQRCodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTransactionQRCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionQRCodeResponse) GoString() string {
	return s.String()
}

func (s *DescribeTransactionQRCodeResponse) SetHeaders(v map[string]*string) *DescribeTransactionQRCodeResponse {
	s.Headers = v
	return s
}

func (s *DescribeTransactionQRCodeResponse) SetStatusCode(v int32) *DescribeTransactionQRCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTransactionQRCodeResponse) SetBody(v *DescribeTransactionQRCodeResponseBody) *DescribeTransactionQRCodeResponse {
	s.Body = v
	return s
}

type DescribeTransactionReceiptFor2CBrowserRequest struct {
	AlipayAuthCode *string `json:"AlipayAuthCode,omitempty" xml:"AlipayAuthCode,omitempty"`
	Bizid          *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Hash           *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
}

func (s DescribeTransactionReceiptFor2CBrowserRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionReceiptFor2CBrowserRequest) GoString() string {
	return s.String()
}

func (s *DescribeTransactionReceiptFor2CBrowserRequest) SetAlipayAuthCode(v string) *DescribeTransactionReceiptFor2CBrowserRequest {
	s.AlipayAuthCode = &v
	return s
}

func (s *DescribeTransactionReceiptFor2CBrowserRequest) SetBizid(v string) *DescribeTransactionReceiptFor2CBrowserRequest {
	s.Bizid = &v
	return s
}

func (s *DescribeTransactionReceiptFor2CBrowserRequest) SetHash(v string) *DescribeTransactionReceiptFor2CBrowserRequest {
	s.Hash = &v
	return s
}

type DescribeTransactionReceiptFor2CBrowserResponseBody struct {
	RequestId *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeTransactionReceiptFor2CBrowserResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DescribeTransactionReceiptFor2CBrowserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionReceiptFor2CBrowserResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTransactionReceiptFor2CBrowserResponseBody) SetRequestId(v string) *DescribeTransactionReceiptFor2CBrowserResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTransactionReceiptFor2CBrowserResponseBody) SetResult(v *DescribeTransactionReceiptFor2CBrowserResponseBodyResult) *DescribeTransactionReceiptFor2CBrowserResponseBody {
	s.Result = v
	return s
}

type DescribeTransactionReceiptFor2CBrowserResponseBodyResult struct {
	Data    *string   `json:"Data,omitempty" xml:"Data,omitempty"`
	GasUsed *string   `json:"GasUsed,omitempty" xml:"GasUsed,omitempty"`
	Logs    []*string `json:"Logs,omitempty" xml:"Logs,omitempty" type:"Repeated"`
	Result  *int64    `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DescribeTransactionReceiptFor2CBrowserResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionReceiptFor2CBrowserResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeTransactionReceiptFor2CBrowserResponseBodyResult) SetData(v string) *DescribeTransactionReceiptFor2CBrowserResponseBodyResult {
	s.Data = &v
	return s
}

func (s *DescribeTransactionReceiptFor2CBrowserResponseBodyResult) SetGasUsed(v string) *DescribeTransactionReceiptFor2CBrowserResponseBodyResult {
	s.GasUsed = &v
	return s
}

func (s *DescribeTransactionReceiptFor2CBrowserResponseBodyResult) SetLogs(v []*string) *DescribeTransactionReceiptFor2CBrowserResponseBodyResult {
	s.Logs = v
	return s
}

func (s *DescribeTransactionReceiptFor2CBrowserResponseBodyResult) SetResult(v int64) *DescribeTransactionReceiptFor2CBrowserResponseBodyResult {
	s.Result = &v
	return s
}

type DescribeTransactionReceiptFor2CBrowserResponse struct {
	Headers    map[string]*string                                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTransactionReceiptFor2CBrowserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTransactionReceiptFor2CBrowserResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTransactionReceiptFor2CBrowserResponse) GoString() string {
	return s.String()
}

func (s *DescribeTransactionReceiptFor2CBrowserResponse) SetHeaders(v map[string]*string) *DescribeTransactionReceiptFor2CBrowserResponse {
	s.Headers = v
	return s
}

func (s *DescribeTransactionReceiptFor2CBrowserResponse) SetStatusCode(v int32) *DescribeTransactionReceiptFor2CBrowserResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTransactionReceiptFor2CBrowserResponse) SetBody(v *DescribeTransactionReceiptFor2CBrowserResponseBody) *DescribeTransactionReceiptFor2CBrowserResponse {
	s.Body = v
	return s
}

type DescribeTriggerRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DescribeTriggerRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTriggerRequest) GoString() string {
	return s.String()
}

func (s *DescribeTriggerRequest) SetChannelId(v string) *DescribeTriggerRequest {
	s.ChannelId = &v
	return s
}

func (s *DescribeTriggerRequest) SetName(v string) *DescribeTriggerRequest {
	s.Name = &v
	return s
}

func (s *DescribeTriggerRequest) SetOrganizationId(v string) *DescribeTriggerRequest {
	s.OrganizationId = &v
	return s
}

type DescribeTriggerResponseBody struct {
	ErrorCode *int32                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DescribeTriggerResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeTriggerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTriggerResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTriggerResponseBody) SetErrorCode(v int32) *DescribeTriggerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DescribeTriggerResponseBody) SetRequestId(v string) *DescribeTriggerResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTriggerResponseBody) SetResult(v *DescribeTriggerResponseBodyResult) *DescribeTriggerResponseBody {
	s.Result = v
	return s
}

func (s *DescribeTriggerResponseBody) SetSuccess(v bool) *DescribeTriggerResponseBody {
	s.Success = &v
	return s
}

type DescribeTriggerResponseBodyResult struct {
	ChannelId    *string                                      `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName  *string                                      `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Checkpoint   *DescribeTriggerResponseBodyResultCheckpoint `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty" type:"Struct"`
	CreateTime   *int64                                       `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorMessage *string                                      `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Name         *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Options      *string                                      `json:"Options,omitempty" xml:"Options,omitempty"`
	Source       *string                                      `json:"Source,omitempty" xml:"Source,omitempty"`
	Status       *int32                                       `json:"Status,omitempty" xml:"Status,omitempty"`
	Type         *string                                      `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTriggerResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DescribeTriggerResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DescribeTriggerResponseBodyResult) SetChannelId(v string) *DescribeTriggerResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetChannelName(v string) *DescribeTriggerResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetCheckpoint(v *DescribeTriggerResponseBodyResultCheckpoint) *DescribeTriggerResponseBodyResult {
	s.Checkpoint = v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetCreateTime(v int64) *DescribeTriggerResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetErrorMessage(v string) *DescribeTriggerResponseBodyResult {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetName(v string) *DescribeTriggerResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetOptions(v string) *DescribeTriggerResponseBodyResult {
	s.Options = &v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetSource(v string) *DescribeTriggerResponseBodyResult {
	s.Source = &v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetStatus(v int32) *DescribeTriggerResponseBodyResult {
	s.Status = &v
	return s
}

func (s *DescribeTriggerResponseBodyResult) SetType(v string) *DescribeTriggerResponseBodyResult {
	s.Type = &v
	return s
}

type DescribeTriggerResponseBodyResultCheckpoint struct {
	ErrorCount *int64  `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	Height     *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
	Index      *int64  `json:"Index,omitempty" xml:"Index,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeTriggerResponseBodyResultCheckpoint) String() string {
	return tea.Prettify(s)
}

func (s DescribeTriggerResponseBodyResultCheckpoint) GoString() string {
	return s.String()
}

func (s *DescribeTriggerResponseBodyResultCheckpoint) SetErrorCount(v int64) *DescribeTriggerResponseBodyResultCheckpoint {
	s.ErrorCount = &v
	return s
}

func (s *DescribeTriggerResponseBodyResultCheckpoint) SetHeight(v int64) *DescribeTriggerResponseBodyResultCheckpoint {
	s.Height = &v
	return s
}

func (s *DescribeTriggerResponseBodyResultCheckpoint) SetIndex(v int64) *DescribeTriggerResponseBodyResultCheckpoint {
	s.Index = &v
	return s
}

func (s *DescribeTriggerResponseBodyResultCheckpoint) SetType(v string) *DescribeTriggerResponseBodyResultCheckpoint {
	s.Type = &v
	return s
}

type DescribeTriggerResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DescribeTriggerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DescribeTriggerResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTriggerResponse) GoString() string {
	return s.String()
}

func (s *DescribeTriggerResponse) SetHeaders(v map[string]*string) *DescribeTriggerResponse {
	s.Headers = v
	return s
}

func (s *DescribeTriggerResponse) SetStatusCode(v int32) *DescribeTriggerResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTriggerResponse) SetBody(v *DescribeTriggerResponseBody) *DescribeTriggerResponse {
	s.Body = v
	return s
}

type DestroyConsortiumRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
}

func (s DestroyConsortiumRequest) String() string {
	return tea.Prettify(s)
}

func (s DestroyConsortiumRequest) GoString() string {
	return s.String()
}

func (s *DestroyConsortiumRequest) SetConsortiumId(v string) *DestroyConsortiumRequest {
	s.ConsortiumId = &v
	return s
}

type DestroyConsortiumResponseBody struct {
	DynamicCode    *string                              `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	DynamicMessage *string                              `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrorCode      *int32                               `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId      *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DestroyConsortiumResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success        *bool                                `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DestroyConsortiumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DestroyConsortiumResponseBody) GoString() string {
	return s.String()
}

func (s *DestroyConsortiumResponseBody) SetDynamicCode(v string) *DestroyConsortiumResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DestroyConsortiumResponseBody) SetDynamicMessage(v string) *DestroyConsortiumResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DestroyConsortiumResponseBody) SetErrorCode(v int32) *DestroyConsortiumResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DestroyConsortiumResponseBody) SetRequestId(v string) *DestroyConsortiumResponseBody {
	s.RequestId = &v
	return s
}

func (s *DestroyConsortiumResponseBody) SetResult(v *DestroyConsortiumResponseBodyResult) *DestroyConsortiumResponseBody {
	s.Result = v
	return s
}

func (s *DestroyConsortiumResponseBody) SetSuccess(v bool) *DestroyConsortiumResponseBody {
	s.Success = &v
	return s
}

type DestroyConsortiumResponseBodyResult struct {
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s DestroyConsortiumResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DestroyConsortiumResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DestroyConsortiumResponseBodyResult) SetConsortiumId(v string) *DestroyConsortiumResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DestroyConsortiumResponseBodyResult) SetName(v string) *DestroyConsortiumResponseBodyResult {
	s.Name = &v
	return s
}

type DestroyConsortiumResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DestroyConsortiumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DestroyConsortiumResponse) String() string {
	return tea.Prettify(s)
}

func (s DestroyConsortiumResponse) GoString() string {
	return s.String()
}

func (s *DestroyConsortiumResponse) SetHeaders(v map[string]*string) *DestroyConsortiumResponse {
	s.Headers = v
	return s
}

func (s *DestroyConsortiumResponse) SetStatusCode(v int32) *DestroyConsortiumResponse {
	s.StatusCode = &v
	return s
}

func (s *DestroyConsortiumResponse) SetBody(v *DestroyConsortiumResponseBody) *DestroyConsortiumResponse {
	s.Body = v
	return s
}

type DestroyEthereumRequest struct {
	// This parameter is required.
	EthereumId *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
}

func (s DestroyEthereumRequest) String() string {
	return tea.Prettify(s)
}

func (s DestroyEthereumRequest) GoString() string {
	return s.String()
}

func (s *DestroyEthereumRequest) SetEthereumId(v string) *DestroyEthereumRequest {
	s.EthereumId = &v
	return s
}

type DestroyEthereumResponseBody struct {
	ErrorCode *int32                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DestroyEthereumResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DestroyEthereumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DestroyEthereumResponseBody) GoString() string {
	return s.String()
}

func (s *DestroyEthereumResponseBody) SetErrorCode(v int32) *DestroyEthereumResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DestroyEthereumResponseBody) SetRequestId(v string) *DestroyEthereumResponseBody {
	s.RequestId = &v
	return s
}

func (s *DestroyEthereumResponseBody) SetResult(v *DestroyEthereumResponseBodyResult) *DestroyEthereumResponseBody {
	s.Result = v
	return s
}

func (s *DestroyEthereumResponseBody) SetSuccess(v bool) *DestroyEthereumResponseBody {
	s.Success = &v
	return s
}

type DestroyEthereumResponseBodyResult struct {
	Consensus   *string `json:"Consensus,omitempty" xml:"Consensus,omitempty"`
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s DestroyEthereumResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DestroyEthereumResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DestroyEthereumResponseBodyResult) SetConsensus(v string) *DestroyEthereumResponseBodyResult {
	s.Consensus = &v
	return s
}

func (s *DestroyEthereumResponseBodyResult) SetCreator(v string) *DestroyEthereumResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *DestroyEthereumResponseBodyResult) SetDescription(v string) *DestroyEthereumResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DestroyEthereumResponseBodyResult) SetId(v string) *DestroyEthereumResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DestroyEthereumResponseBodyResult) SetName(v string) *DestroyEthereumResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DestroyEthereumResponseBodyResult) SetNetworkId(v string) *DestroyEthereumResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *DestroyEthereumResponseBodyResult) SetRegionId(v string) *DestroyEthereumResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *DestroyEthereumResponseBodyResult) SetState(v string) *DestroyEthereumResponseBodyResult {
	s.State = &v
	return s
}

type DestroyEthereumResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DestroyEthereumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DestroyEthereumResponse) String() string {
	return tea.Prettify(s)
}

func (s DestroyEthereumResponse) GoString() string {
	return s.String()
}

func (s *DestroyEthereumResponse) SetHeaders(v map[string]*string) *DestroyEthereumResponse {
	s.Headers = v
	return s
}

func (s *DestroyEthereumResponse) SetStatusCode(v int32) *DestroyEthereumResponse {
	s.StatusCode = &v
	return s
}

func (s *DestroyEthereumResponse) SetBody(v *DestroyEthereumResponseBody) *DestroyEthereumResponse {
	s.Body = v
	return s
}

type DestroyOrganizationRequest struct {
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DestroyOrganizationRequest) String() string {
	return tea.Prettify(s)
}

func (s DestroyOrganizationRequest) GoString() string {
	return s.String()
}

func (s *DestroyOrganizationRequest) SetOrganizationId(v string) *DestroyOrganizationRequest {
	s.OrganizationId = &v
	return s
}

type DestroyOrganizationResponseBody struct {
	DynamicCode    *string                                `json:"DynamicCode,omitempty" xml:"DynamicCode,omitempty"`
	DynamicMessage *string                                `json:"DynamicMessage,omitempty" xml:"DynamicMessage,omitempty"`
	ErrorCode      *int32                                 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result         *DestroyOrganizationResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success        *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DestroyOrganizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DestroyOrganizationResponseBody) GoString() string {
	return s.String()
}

func (s *DestroyOrganizationResponseBody) SetDynamicCode(v string) *DestroyOrganizationResponseBody {
	s.DynamicCode = &v
	return s
}

func (s *DestroyOrganizationResponseBody) SetDynamicMessage(v string) *DestroyOrganizationResponseBody {
	s.DynamicMessage = &v
	return s
}

func (s *DestroyOrganizationResponseBody) SetErrorCode(v int32) *DestroyOrganizationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DestroyOrganizationResponseBody) SetRequestId(v string) *DestroyOrganizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *DestroyOrganizationResponseBody) SetResult(v *DestroyOrganizationResponseBodyResult) *DestroyOrganizationResponseBody {
	s.Result = v
	return s
}

func (s *DestroyOrganizationResponseBody) SetSuccess(v bool) *DestroyOrganizationResponseBody {
	s.Success = &v
	return s
}

type DestroyOrganizationResponseBodyResult struct {
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s DestroyOrganizationResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DestroyOrganizationResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DestroyOrganizationResponseBodyResult) SetName(v string) *DestroyOrganizationResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DestroyOrganizationResponseBodyResult) SetOrganizationId(v string) *DestroyOrganizationResponseBodyResult {
	s.OrganizationId = &v
	return s
}

type DestroyOrganizationResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DestroyOrganizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DestroyOrganizationResponse) String() string {
	return tea.Prettify(s)
}

func (s DestroyOrganizationResponse) GoString() string {
	return s.String()
}

func (s *DestroyOrganizationResponse) SetHeaders(v map[string]*string) *DestroyOrganizationResponse {
	s.Headers = v
	return s
}

func (s *DestroyOrganizationResponse) SetStatusCode(v int32) *DestroyOrganizationResponse {
	s.StatusCode = &v
	return s
}

func (s *DestroyOrganizationResponse) SetBody(v *DestroyOrganizationResponseBody) *DestroyOrganizationResponse {
	s.Body = v
	return s
}

type DownloadAllRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DownloadAllRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllRequest) GoString() string {
	return s.String()
}

func (s *DownloadAllRequest) SetBizid(v string) *DownloadAllRequest {
	s.Bizid = &v
	return s
}

type DownloadAllResponseBody struct {
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DownloadAllResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DownloadAllResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadAllResponseBody) SetRequestId(v string) *DownloadAllResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadAllResponseBody) SetResult(v *DownloadAllResponseBodyResult) *DownloadAllResponseBody {
	s.Result = v
	return s
}

type DownloadAllResponseBodyResult struct {
	BizviewUrl *string `json:"BizviewUrl,omitempty" xml:"BizviewUrl,omitempty"`
	CertUrl    *string `json:"CertUrl,omitempty" xml:"CertUrl,omitempty"`
	SdkUrl     *string `json:"SdkUrl,omitempty" xml:"SdkUrl,omitempty"`
}

func (s DownloadAllResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DownloadAllResponseBodyResult) SetBizviewUrl(v string) *DownloadAllResponseBodyResult {
	s.BizviewUrl = &v
	return s
}

func (s *DownloadAllResponseBodyResult) SetCertUrl(v string) *DownloadAllResponseBodyResult {
	s.CertUrl = &v
	return s
}

func (s *DownloadAllResponseBodyResult) SetSdkUrl(v string) *DownloadAllResponseBodyResult {
	s.SdkUrl = &v
	return s
}

type DownloadAllResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadAllResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadAllResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadAllResponse) GoString() string {
	return s.String()
}

func (s *DownloadAllResponse) SetHeaders(v map[string]*string) *DownloadAllResponse {
	s.Headers = v
	return s
}

func (s *DownloadAllResponse) SetStatusCode(v int32) *DownloadAllResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadAllResponse) SetBody(v *DownloadAllResponseBody) *DownloadAllResponse {
	s.Body = v
	return s
}

type DownloadBizviewRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DownloadBizviewRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadBizviewRequest) GoString() string {
	return s.String()
}

func (s *DownloadBizviewRequest) SetBizid(v string) *DownloadBizviewRequest {
	s.Bizid = &v
	return s
}

type DownloadBizviewResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DownloadBizviewResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadBizviewResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadBizviewResponseBody) SetRequestId(v string) *DownloadBizviewResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadBizviewResponseBody) SetResult(v string) *DownloadBizviewResponseBody {
	s.Result = &v
	return s
}

type DownloadBizviewResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadBizviewResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadBizviewResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadBizviewResponse) GoString() string {
	return s.String()
}

func (s *DownloadBizviewResponse) SetHeaders(v map[string]*string) *DownloadBizviewResponse {
	s.Headers = v
	return s
}

func (s *DownloadBizviewResponse) SetStatusCode(v int32) *DownloadBizviewResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadBizviewResponse) SetBody(v *DownloadBizviewResponseBody) *DownloadBizviewResponse {
	s.Body = v
	return s
}

type DownloadFabricChannelSDKRequest struct {
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Location  *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DownloadFabricChannelSDKRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadFabricChannelSDKRequest) GoString() string {
	return s.String()
}

func (s *DownloadFabricChannelSDKRequest) SetChannelId(v string) *DownloadFabricChannelSDKRequest {
	s.ChannelId = &v
	return s
}

func (s *DownloadFabricChannelSDKRequest) SetLocation(v string) *DownloadFabricChannelSDKRequest {
	s.Location = &v
	return s
}

func (s *DownloadFabricChannelSDKRequest) SetOrganizationId(v string) *DownloadFabricChannelSDKRequest {
	s.OrganizationId = &v
	return s
}

func (s *DownloadFabricChannelSDKRequest) SetUsername(v string) *DownloadFabricChannelSDKRequest {
	s.Username = &v
	return s
}

type DownloadFabricChannelSDKResponseBody struct {
	ErrorCode *int32                                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DownloadFabricChannelSDKResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	Success   *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DownloadFabricChannelSDKResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadFabricChannelSDKResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadFabricChannelSDKResponseBody) SetErrorCode(v int32) *DownloadFabricChannelSDKResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DownloadFabricChannelSDKResponseBody) SetRequestId(v string) *DownloadFabricChannelSDKResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadFabricChannelSDKResponseBody) SetResult(v []*DownloadFabricChannelSDKResponseBodyResult) *DownloadFabricChannelSDKResponseBody {
	s.Result = v
	return s
}

func (s *DownloadFabricChannelSDKResponseBody) SetSuccess(v bool) *DownloadFabricChannelSDKResponseBody {
	s.Success = &v
	return s
}

type DownloadFabricChannelSDKResponseBodyResult struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	Path    *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DownloadFabricChannelSDKResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DownloadFabricChannelSDKResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DownloadFabricChannelSDKResponseBodyResult) SetContent(v string) *DownloadFabricChannelSDKResponseBodyResult {
	s.Content = &v
	return s
}

func (s *DownloadFabricChannelSDKResponseBodyResult) SetPath(v string) *DownloadFabricChannelSDKResponseBodyResult {
	s.Path = &v
	return s
}

type DownloadFabricChannelSDKResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadFabricChannelSDKResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadFabricChannelSDKResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadFabricChannelSDKResponse) GoString() string {
	return s.String()
}

func (s *DownloadFabricChannelSDKResponse) SetHeaders(v map[string]*string) *DownloadFabricChannelSDKResponse {
	s.Headers = v
	return s
}

func (s *DownloadFabricChannelSDKResponse) SetStatusCode(v int32) *DownloadFabricChannelSDKResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadFabricChannelSDKResponse) SetBody(v *DownloadFabricChannelSDKResponseBody) *DownloadFabricChannelSDKResponse {
	s.Body = v
	return s
}

type DownloadOrganizationSDKRequest struct {
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// user
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s DownloadOrganizationSDKRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadOrganizationSDKRequest) GoString() string {
	return s.String()
}

func (s *DownloadOrganizationSDKRequest) SetLocation(v string) *DownloadOrganizationSDKRequest {
	s.Location = &v
	return s
}

func (s *DownloadOrganizationSDKRequest) SetOrganizationId(v string) *DownloadOrganizationSDKRequest {
	s.OrganizationId = &v
	return s
}

func (s *DownloadOrganizationSDKRequest) SetUsername(v string) *DownloadOrganizationSDKRequest {
	s.Username = &v
	return s
}

type DownloadOrganizationSDKResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*DownloadOrganizationSDKResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DownloadOrganizationSDKResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadOrganizationSDKResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadOrganizationSDKResponseBody) SetErrorCode(v int32) *DownloadOrganizationSDKResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *DownloadOrganizationSDKResponseBody) SetRequestId(v string) *DownloadOrganizationSDKResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadOrganizationSDKResponseBody) SetResult(v []*DownloadOrganizationSDKResponseBodyResult) *DownloadOrganizationSDKResponseBody {
	s.Result = v
	return s
}

func (s *DownloadOrganizationSDKResponseBody) SetSuccess(v bool) *DownloadOrganizationSDKResponseBody {
	s.Success = &v
	return s
}

type DownloadOrganizationSDKResponseBodyResult struct {
	// example:
	//
	// base64string
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// example:
	//
	// dir/file
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DownloadOrganizationSDKResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DownloadOrganizationSDKResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DownloadOrganizationSDKResponseBodyResult) SetContent(v string) *DownloadOrganizationSDKResponseBodyResult {
	s.Content = &v
	return s
}

func (s *DownloadOrganizationSDKResponseBodyResult) SetPath(v string) *DownloadOrganizationSDKResponseBodyResult {
	s.Path = &v
	return s
}

type DownloadOrganizationSDKResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadOrganizationSDKResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadOrganizationSDKResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadOrganizationSDKResponse) GoString() string {
	return s.String()
}

func (s *DownloadOrganizationSDKResponse) SetHeaders(v map[string]*string) *DownloadOrganizationSDKResponse {
	s.Headers = v
	return s
}

func (s *DownloadOrganizationSDKResponse) SetStatusCode(v int32) *DownloadOrganizationSDKResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadOrganizationSDKResponse) SetBody(v *DownloadOrganizationSDKResponseBody) *DownloadOrganizationSDKResponse {
	s.Body = v
	return s
}

type DownloadSDK2Request struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DownloadSDK2Request) String() string {
	return tea.Prettify(s)
}

func (s DownloadSDK2Request) GoString() string {
	return s.String()
}

func (s *DownloadSDK2Request) SetBizid(v string) *DownloadSDK2Request {
	s.Bizid = &v
	return s
}

type DownloadSDK2ResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DownloadSDK2ResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadSDK2ResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadSDK2ResponseBody) SetRequestId(v string) *DownloadSDK2ResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadSDK2ResponseBody) SetResult(v string) *DownloadSDK2ResponseBody {
	s.Result = &v
	return s
}

type DownloadSDK2Response struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadSDK2ResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadSDK2Response) String() string {
	return tea.Prettify(s)
}

func (s DownloadSDK2Response) GoString() string {
	return s.String()
}

func (s *DownloadSDK2Response) SetHeaders(v map[string]*string) *DownloadSDK2Response {
	s.Headers = v
	return s
}

func (s *DownloadSDK2Response) SetStatusCode(v int32) *DownloadSDK2Response {
	s.StatusCode = &v
	return s
}

func (s *DownloadSDK2Response) SetBody(v *DownloadSDK2ResponseBody) *DownloadSDK2Response {
	s.Body = v
	return s
}

type DownloadSdkRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s DownloadSdkRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadSdkRequest) GoString() string {
	return s.String()
}

func (s *DownloadSdkRequest) SetBizid(v string) *DownloadSdkRequest {
	s.Bizid = &v
	return s
}

type DownloadSdkResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DownloadSdkResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadSdkResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadSdkResponseBody) SetRequestId(v string) *DownloadSdkResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadSdkResponseBody) SetResult(v string) *DownloadSdkResponseBody {
	s.Result = &v
	return s
}

type DownloadSdkResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadSdkResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadSdkResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadSdkResponse) GoString() string {
	return s.String()
}

func (s *DownloadSdkResponse) SetHeaders(v map[string]*string) *DownloadSdkResponse {
	s.Headers = v
	return s
}

func (s *DownloadSdkResponse) SetStatusCode(v int32) *DownloadSdkResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadSdkResponse) SetBody(v *DownloadSdkResponseBody) *DownloadSdkResponse {
	s.Body = v
	return s
}

type DownloadSignedDataRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Path  *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s DownloadSignedDataRequest) String() string {
	return tea.Prettify(s)
}

func (s DownloadSignedDataRequest) GoString() string {
	return s.String()
}

func (s *DownloadSignedDataRequest) SetBizid(v string) *DownloadSignedDataRequest {
	s.Bizid = &v
	return s
}

func (s *DownloadSignedDataRequest) SetPath(v string) *DownloadSignedDataRequest {
	s.Path = &v
	return s
}

type DownloadSignedDataResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s DownloadSignedDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DownloadSignedDataResponseBody) GoString() string {
	return s.String()
}

func (s *DownloadSignedDataResponseBody) SetRequestId(v string) *DownloadSignedDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *DownloadSignedDataResponseBody) SetResult(v string) *DownloadSignedDataResponseBody {
	s.Result = &v
	return s
}

type DownloadSignedDataResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DownloadSignedDataResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DownloadSignedDataResponse) String() string {
	return tea.Prettify(s)
}

func (s DownloadSignedDataResponse) GoString() string {
	return s.String()
}

func (s *DownloadSignedDataResponse) SetHeaders(v map[string]*string) *DownloadSignedDataResponse {
	s.Headers = v
	return s
}

func (s *DownloadSignedDataResponse) SetStatusCode(v int32) *DownloadSignedDataResponse {
	s.StatusCode = &v
	return s
}

func (s *DownloadSignedDataResponse) SetBody(v *DownloadSignedDataResponseBody) *DownloadSignedDataResponse {
	s.Body = v
	return s
}

type DuplicateAntChainContractProjectRequest struct {
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectVersion *string `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
}

func (s DuplicateAntChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s DuplicateAntChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *DuplicateAntChainContractProjectRequest) SetDescription(v string) *DuplicateAntChainContractProjectRequest {
	s.Description = &v
	return s
}

func (s *DuplicateAntChainContractProjectRequest) SetName(v string) *DuplicateAntChainContractProjectRequest {
	s.Name = &v
	return s
}

func (s *DuplicateAntChainContractProjectRequest) SetProjectId(v string) *DuplicateAntChainContractProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *DuplicateAntChainContractProjectRequest) SetProjectVersion(v string) *DuplicateAntChainContractProjectRequest {
	s.ProjectVersion = &v
	return s
}

type DuplicateAntChainContractProjectResponseBody struct {
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *DuplicateAntChainContractProjectResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s DuplicateAntChainContractProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DuplicateAntChainContractProjectResponseBody) GoString() string {
	return s.String()
}

func (s *DuplicateAntChainContractProjectResponseBody) SetRequestId(v string) *DuplicateAntChainContractProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *DuplicateAntChainContractProjectResponseBody) SetResult(v *DuplicateAntChainContractProjectResponseBodyResult) *DuplicateAntChainContractProjectResponseBody {
	s.Result = v
	return s
}

type DuplicateAntChainContractProjectResponseBodyResult struct {
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	GmtCreate    *int64  `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	GmtModified  *int64  `json:"GmtModified,omitempty" xml:"GmtModified,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Version      *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s DuplicateAntChainContractProjectResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s DuplicateAntChainContractProjectResponseBodyResult) GoString() string {
	return s.String()
}

func (s *DuplicateAntChainContractProjectResponseBodyResult) SetConsortiumId(v string) *DuplicateAntChainContractProjectResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *DuplicateAntChainContractProjectResponseBodyResult) SetDescription(v string) *DuplicateAntChainContractProjectResponseBodyResult {
	s.Description = &v
	return s
}

func (s *DuplicateAntChainContractProjectResponseBodyResult) SetGmtCreate(v int64) *DuplicateAntChainContractProjectResponseBodyResult {
	s.GmtCreate = &v
	return s
}

func (s *DuplicateAntChainContractProjectResponseBodyResult) SetGmtModified(v int64) *DuplicateAntChainContractProjectResponseBodyResult {
	s.GmtModified = &v
	return s
}

func (s *DuplicateAntChainContractProjectResponseBodyResult) SetId(v string) *DuplicateAntChainContractProjectResponseBodyResult {
	s.Id = &v
	return s
}

func (s *DuplicateAntChainContractProjectResponseBodyResult) SetName(v string) *DuplicateAntChainContractProjectResponseBodyResult {
	s.Name = &v
	return s
}

func (s *DuplicateAntChainContractProjectResponseBodyResult) SetVersion(v string) *DuplicateAntChainContractProjectResponseBodyResult {
	s.Version = &v
	return s
}

type DuplicateAntChainContractProjectResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *DuplicateAntChainContractProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s DuplicateAntChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s DuplicateAntChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *DuplicateAntChainContractProjectResponse) SetHeaders(v map[string]*string) *DuplicateAntChainContractProjectResponse {
	s.Headers = v
	return s
}

func (s *DuplicateAntChainContractProjectResponse) SetStatusCode(v int32) *DuplicateAntChainContractProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *DuplicateAntChainContractProjectResponse) SetBody(v *DuplicateAntChainContractProjectResponseBody) *DuplicateAntChainContractProjectResponse {
	s.Body = v
	return s
}

type FreezeAccountRequest struct {
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	Bizid   *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s FreezeAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s FreezeAccountRequest) GoString() string {
	return s.String()
}

func (s *FreezeAccountRequest) SetAccount(v string) *FreezeAccountRequest {
	s.Account = &v
	return s
}

func (s *FreezeAccountRequest) SetBizid(v string) *FreezeAccountRequest {
	s.Bizid = &v
	return s
}

type FreezeAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s FreezeAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FreezeAccountResponseBody) GoString() string {
	return s.String()
}

func (s *FreezeAccountResponseBody) SetRequestId(v string) *FreezeAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *FreezeAccountResponseBody) SetResult(v string) *FreezeAccountResponseBody {
	s.Result = &v
	return s
}

type FreezeAccountResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *FreezeAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s FreezeAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s FreezeAccountResponse) GoString() string {
	return s.String()
}

func (s *FreezeAccountResponse) SetHeaders(v map[string]*string) *FreezeAccountResponse {
	s.Headers = v
	return s
}

func (s *FreezeAccountResponse) SetStatusCode(v int32) *FreezeAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *FreezeAccountResponse) SetBody(v *FreezeAccountResponseBody) *FreezeAccountResponse {
	s.Body = v
	return s
}

type FreezeAntChainAccountRequest struct {
	// This parameter is required.
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s FreezeAntChainAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s FreezeAntChainAccountRequest) GoString() string {
	return s.String()
}

func (s *FreezeAntChainAccountRequest) SetAccount(v string) *FreezeAntChainAccountRequest {
	s.Account = &v
	return s
}

func (s *FreezeAntChainAccountRequest) SetAntChainId(v string) *FreezeAntChainAccountRequest {
	s.AntChainId = &v
	return s
}

type FreezeAntChainAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s FreezeAntChainAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s FreezeAntChainAccountResponseBody) GoString() string {
	return s.String()
}

func (s *FreezeAntChainAccountResponseBody) SetRequestId(v string) *FreezeAntChainAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *FreezeAntChainAccountResponseBody) SetResult(v string) *FreezeAntChainAccountResponseBody {
	s.Result = &v
	return s
}

type FreezeAntChainAccountResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *FreezeAntChainAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s FreezeAntChainAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s FreezeAntChainAccountResponse) GoString() string {
	return s.String()
}

func (s *FreezeAntChainAccountResponse) SetHeaders(v map[string]*string) *FreezeAntChainAccountResponse {
	s.Headers = v
	return s
}

func (s *FreezeAntChainAccountResponse) SetStatusCode(v int32) *FreezeAntChainAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *FreezeAntChainAccountResponse) SetBody(v *FreezeAntChainAccountResponseBody) *FreezeAntChainAccountResponse {
	s.Body = v
	return s
}

type GetAppliesRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Current  *int32  `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Status   *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetAppliesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAppliesRequest) GoString() string {
	return s.String()
}

func (s *GetAppliesRequest) SetBizid(v string) *GetAppliesRequest {
	s.Bizid = &v
	return s
}

func (s *GetAppliesRequest) SetCurrent(v int32) *GetAppliesRequest {
	s.Current = &v
	return s
}

func (s *GetAppliesRequest) SetPageSize(v int32) *GetAppliesRequest {
	s.PageSize = &v
	return s
}

func (s *GetAppliesRequest) SetStatus(v string) *GetAppliesRequest {
	s.Status = &v
	return s
}

type GetAppliesResponseBody struct {
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetAppliesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetAppliesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAppliesResponseBody) GoString() string {
	return s.String()
}

func (s *GetAppliesResponseBody) SetRequestId(v string) *GetAppliesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAppliesResponseBody) SetResult(v *GetAppliesResponseBodyResult) *GetAppliesResponseBody {
	s.Result = v
	return s
}

type GetAppliesResponseBodyResult struct {
	ApplyHistoryList []*GetAppliesResponseBodyResultApplyHistoryList `json:"ApplyHistoryList,omitempty" xml:"ApplyHistoryList,omitempty" type:"Repeated"`
	Pagination       *GetAppliesResponseBodyResultPagination         `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s GetAppliesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetAppliesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetAppliesResponseBodyResult) SetApplyHistoryList(v []*GetAppliesResponseBodyResultApplyHistoryList) *GetAppliesResponseBodyResult {
	s.ApplyHistoryList = v
	return s
}

func (s *GetAppliesResponseBodyResult) SetPagination(v *GetAppliesResponseBodyResultPagination) *GetAppliesResponseBodyResult {
	s.Pagination = v
	return s
}

type GetAppliesResponseBodyResultApplyHistoryList struct {
	Bizid        *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Createtime   *int64  `json:"Createtime,omitempty" xml:"Createtime,omitempty"`
	Id           *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	RejectReason *string `json:"RejectReason,omitempty" xml:"RejectReason,omitempty"`
	ReqAddr      *string `json:"ReqAddr,omitempty" xml:"ReqAddr,omitempty"`
	SignedAddr   *string `json:"SignedAddr,omitempty" xml:"SignedAddr,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Updatetime   *int64  `json:"Updatetime,omitempty" xml:"Updatetime,omitempty"`
	Username     *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetAppliesResponseBodyResultApplyHistoryList) String() string {
	return tea.Prettify(s)
}

func (s GetAppliesResponseBodyResultApplyHistoryList) GoString() string {
	return s.String()
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetBizid(v string) *GetAppliesResponseBodyResultApplyHistoryList {
	s.Bizid = &v
	return s
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetCreatetime(v int64) *GetAppliesResponseBodyResultApplyHistoryList {
	s.Createtime = &v
	return s
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetId(v int32) *GetAppliesResponseBodyResultApplyHistoryList {
	s.Id = &v
	return s
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetRejectReason(v string) *GetAppliesResponseBodyResultApplyHistoryList {
	s.RejectReason = &v
	return s
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetReqAddr(v string) *GetAppliesResponseBodyResultApplyHistoryList {
	s.ReqAddr = &v
	return s
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetSignedAddr(v string) *GetAppliesResponseBodyResultApplyHistoryList {
	s.SignedAddr = &v
	return s
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetStatus(v int32) *GetAppliesResponseBodyResultApplyHistoryList {
	s.Status = &v
	return s
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetUpdatetime(v int64) *GetAppliesResponseBodyResultApplyHistoryList {
	s.Updatetime = &v
	return s
}

func (s *GetAppliesResponseBodyResultApplyHistoryList) SetUsername(v string) *GetAppliesResponseBodyResultApplyHistoryList {
	s.Username = &v
	return s
}

type GetAppliesResponseBodyResultPagination struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetAppliesResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s GetAppliesResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *GetAppliesResponseBodyResultPagination) SetCurrent(v int32) *GetAppliesResponseBodyResultPagination {
	s.Current = &v
	return s
}

func (s *GetAppliesResponseBodyResultPagination) SetPageSize(v int32) *GetAppliesResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *GetAppliesResponseBodyResultPagination) SetTotal(v int32) *GetAppliesResponseBodyResultPagination {
	s.Total = &v
	return s
}

type GetAppliesResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetAppliesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetAppliesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAppliesResponse) GoString() string {
	return s.String()
}

func (s *GetAppliesResponse) SetHeaders(v map[string]*string) *GetAppliesResponse {
	s.Headers = v
	return s
}

func (s *GetAppliesResponse) SetStatusCode(v int32) *GetAppliesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAppliesResponse) SetBody(v *GetAppliesResponseBody) *GetAppliesResponse {
	s.Body = v
	return s
}

type GetBcSchemaRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s GetBcSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBcSchemaRequest) GoString() string {
	return s.String()
}

func (s *GetBcSchemaRequest) SetBizid(v string) *GetBcSchemaRequest {
	s.Bizid = &v
	return s
}

type GetBcSchemaResponseBody struct {
	RequestId *string                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetBcSchemaResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetBcSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBcSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *GetBcSchemaResponseBody) SetRequestId(v string) *GetBcSchemaResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBcSchemaResponseBody) SetResult(v *GetBcSchemaResponseBodyResult) *GetBcSchemaResponseBody {
	s.Result = v
	return s
}

type GetBcSchemaResponseBodyResult struct {
	Responses []*GetBcSchemaResponseBodyResultResponses `json:"Responses,omitempty" xml:"Responses,omitempty" type:"Repeated"`
	Schema    *GetBcSchemaResponseBodyResultSchema      `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
}

func (s GetBcSchemaResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetBcSchemaResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetBcSchemaResponseBodyResult) SetResponses(v []*GetBcSchemaResponseBodyResultResponses) *GetBcSchemaResponseBodyResult {
	s.Responses = v
	return s
}

func (s *GetBcSchemaResponseBodyResult) SetSchema(v *GetBcSchemaResponseBodyResultSchema) *GetBcSchemaResponseBodyResult {
	s.Schema = v
	return s
}

type GetBcSchemaResponseBodyResultResponses struct {
	Category     *string                                           `json:"Category,omitempty" xml:"Category,omitempty"`
	CategoryName *string                                           `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Description  *string                                           `json:"Description,omitempty" xml:"Description,omitempty"`
	Properties   *GetBcSchemaResponseBodyResultResponsesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s GetBcSchemaResponseBodyResultResponses) String() string {
	return tea.Prettify(s)
}

func (s GetBcSchemaResponseBodyResultResponses) GoString() string {
	return s.String()
}

func (s *GetBcSchemaResponseBodyResultResponses) SetCategory(v string) *GetBcSchemaResponseBodyResultResponses {
	s.Category = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponses) SetCategoryName(v string) *GetBcSchemaResponseBodyResultResponses {
	s.CategoryName = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponses) SetDescription(v string) *GetBcSchemaResponseBodyResultResponses {
	s.Description = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponses) SetProperties(v *GetBcSchemaResponseBodyResultResponsesProperties) *GetBcSchemaResponseBodyResultResponses {
	s.Properties = v
	return s
}

type GetBcSchemaResponseBodyResultResponsesProperties struct {
	Count      *int32                                                        `json:"Count,omitempty" xml:"Count,omitempty"`
	DataSource []*GetBcSchemaResponseBodyResultResponsesPropertiesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s GetBcSchemaResponseBodyResultResponsesProperties) String() string {
	return tea.Prettify(s)
}

func (s GetBcSchemaResponseBodyResultResponsesProperties) GoString() string {
	return s.String()
}

func (s *GetBcSchemaResponseBodyResultResponsesProperties) SetCount(v int32) *GetBcSchemaResponseBodyResultResponsesProperties {
	s.Count = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponsesProperties) SetDataSource(v []*GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) *GetBcSchemaResponseBodyResultResponsesProperties {
	s.DataSource = v
	return s
}

type GetBcSchemaResponseBodyResultResponsesPropertiesDataSource struct {
	AllowNull  *int32  `json:"AllowNull,omitempty" xml:"AllowNull,omitempty"`
	Annotation *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Indexes    *int32  `json:"Indexes,omitempty" xml:"Indexes,omitempty"`
	Key        *int32  `json:"Key,omitempty" xml:"Key,omitempty"`
	Length     *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reg        *string `json:"Reg,omitempty" xml:"Reg,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) String() string {
	return tea.Prettify(s)
}

func (s GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) GoString() string {
	return s.String()
}

func (s *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetAllowNull(v int32) *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.AllowNull = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetAnnotation(v string) *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Annotation = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetField(v string) *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Field = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetIndexes(v int32) *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Indexes = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetKey(v int32) *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Key = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetLength(v int32) *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Length = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetReg(v string) *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Reg = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource) SetType(v string) *GetBcSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Type = &v
	return s
}

type GetBcSchemaResponseBodyResultSchema struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *bool   `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetBcSchemaResponseBodyResultSchema) String() string {
	return tea.Prettify(s)
}

func (s GetBcSchemaResponseBodyResultSchema) GoString() string {
	return s.String()
}

func (s *GetBcSchemaResponseBodyResultSchema) SetCreateTime(v int64) *GetBcSchemaResponseBodyResultSchema {
	s.CreateTime = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultSchema) SetDescription(v string) *GetBcSchemaResponseBodyResultSchema {
	s.Description = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultSchema) SetId(v int64) *GetBcSchemaResponseBodyResultSchema {
	s.Id = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultSchema) SetIsTemplate(v bool) *GetBcSchemaResponseBodyResultSchema {
	s.IsTemplate = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultSchema) SetName(v string) *GetBcSchemaResponseBodyResultSchema {
	s.Name = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultSchema) SetUpdateTime(v int64) *GetBcSchemaResponseBodyResultSchema {
	s.UpdateTime = &v
	return s
}

func (s *GetBcSchemaResponseBodyResultSchema) SetVersion(v int64) *GetBcSchemaResponseBodyResultSchema {
	s.Version = &v
	return s
}

type GetBcSchemaResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBcSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBcSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBcSchemaResponse) GoString() string {
	return s.String()
}

func (s *GetBcSchemaResponse) SetHeaders(v map[string]*string) *GetBcSchemaResponse {
	s.Headers = v
	return s
}

func (s *GetBcSchemaResponse) SetStatusCode(v int32) *GetBcSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBcSchemaResponse) SetBody(v *GetBcSchemaResponseBody) *GetBcSchemaResponse {
	s.Body = v
	return s
}

type GetBlockchainCreateTaskRequest struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetBlockchainCreateTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainCreateTaskRequest) GoString() string {
	return s.String()
}

func (s *GetBlockchainCreateTaskRequest) SetCurrent(v int32) *GetBlockchainCreateTaskRequest {
	s.Current = &v
	return s
}

func (s *GetBlockchainCreateTaskRequest) SetPageSize(v int32) *GetBlockchainCreateTaskRequest {
	s.PageSize = &v
	return s
}

type GetBlockchainCreateTaskResponseBody struct {
	RequestId *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetBlockchainCreateTaskResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetBlockchainCreateTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainCreateTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetBlockchainCreateTaskResponseBody) SetRequestId(v string) *GetBlockchainCreateTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBlockchainCreateTaskResponseBody) SetResult(v *GetBlockchainCreateTaskResponseBodyResult) *GetBlockchainCreateTaskResponseBody {
	s.Result = v
	return s
}

type GetBlockchainCreateTaskResponseBodyResult struct {
	BlockchainCreateTasks *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks `json:"BlockchainCreateTasks,omitempty" xml:"BlockchainCreateTasks,omitempty" type:"Struct"`
	Pagination            *GetBlockchainCreateTaskResponseBodyResultPagination            `json:"Pagination,omitempty" xml:"Pagination,omitempty" type:"Struct"`
}

func (s GetBlockchainCreateTaskResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainCreateTaskResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetBlockchainCreateTaskResponseBodyResult) SetBlockchainCreateTasks(v *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) *GetBlockchainCreateTaskResponseBodyResult {
	s.BlockchainCreateTasks = v
	return s
}

func (s *GetBlockchainCreateTaskResponseBodyResult) SetPagination(v *GetBlockchainCreateTaskResponseBodyResultPagination) *GetBlockchainCreateTaskResponseBodyResult {
	s.Pagination = v
	return s
}

type GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks struct {
	BlockchainCreateTasks []*GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks `json:"BlockchainCreateTasks,omitempty" xml:"BlockchainCreateTasks,omitempty" type:"Repeated"`
}

func (s GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) GoString() string {
	return s.String()
}

func (s *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks) SetBlockchainCreateTasks(v []*GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks) *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasks {
	s.BlockchainCreateTasks = v
	return s
}

type GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks struct {
	Bizid      *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	CreateTime *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Memo       *string `json:"Memo,omitempty" xml:"Memo,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Status     *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks) GoString() string {
	return s.String()
}

func (s *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks) SetBizid(v string) *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks {
	s.Bizid = &v
	return s
}

func (s *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks) SetCreateTime(v int64) *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks {
	s.CreateTime = &v
	return s
}

func (s *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks) SetMemo(v string) *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks {
	s.Memo = &v
	return s
}

func (s *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks) SetName(v string) *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks {
	s.Name = &v
	return s
}

func (s *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks) SetStatus(v string) *GetBlockchainCreateTaskResponseBodyResultBlockchainCreateTasksBlockchainCreateTasks {
	s.Status = &v
	return s
}

type GetBlockchainCreateTaskResponseBodyResultPagination struct {
	Current  *int32 `json:"Current,omitempty" xml:"Current,omitempty"`
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total    *int32 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetBlockchainCreateTaskResponseBodyResultPagination) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainCreateTaskResponseBodyResultPagination) GoString() string {
	return s.String()
}

func (s *GetBlockchainCreateTaskResponseBodyResultPagination) SetCurrent(v int32) *GetBlockchainCreateTaskResponseBodyResultPagination {
	s.Current = &v
	return s
}

func (s *GetBlockchainCreateTaskResponseBodyResultPagination) SetPageSize(v int32) *GetBlockchainCreateTaskResponseBodyResultPagination {
	s.PageSize = &v
	return s
}

func (s *GetBlockchainCreateTaskResponseBodyResultPagination) SetTotal(v int32) *GetBlockchainCreateTaskResponseBodyResultPagination {
	s.Total = &v
	return s
}

type GetBlockchainCreateTaskResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBlockchainCreateTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBlockchainCreateTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainCreateTaskResponse) GoString() string {
	return s.String()
}

func (s *GetBlockchainCreateTaskResponse) SetHeaders(v map[string]*string) *GetBlockchainCreateTaskResponse {
	s.Headers = v
	return s
}

func (s *GetBlockchainCreateTaskResponse) SetStatusCode(v int32) *GetBlockchainCreateTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBlockchainCreateTaskResponse) SetBody(v *GetBlockchainCreateTaskResponseBody) *GetBlockchainCreateTaskResponse {
	s.Body = v
	return s
}

type GetBlockchainInfoRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s GetBlockchainInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainInfoRequest) GoString() string {
	return s.String()
}

func (s *GetBlockchainInfoRequest) SetBizid(v string) *GetBlockchainInfoRequest {
	s.Bizid = &v
	return s
}

type GetBlockchainInfoResponseBody struct {
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetBlockchainInfoResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetBlockchainInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetBlockchainInfoResponseBody) SetRequestId(v string) *GetBlockchainInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetBlockchainInfoResponseBody) SetResult(v *GetBlockchainInfoResponseBodyResult) *GetBlockchainInfoResponseBody {
	s.Result = v
	return s
}

type GetBlockchainInfoResponseBodyResult struct {
	AbnormalNodes  *int32                                             `json:"AbnormalNodes,omitempty" xml:"AbnormalNodes,omitempty"`
	Bizid          *string                                            `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	BlockHeight    *int32                                             `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	CreateTime     *int64                                             `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsRole         *bool                                              `json:"IsRole,omitempty" xml:"IsRole,omitempty"`
	NodeInfoList   []*GetBlockchainInfoResponseBodyResultNodeInfoList `json:"NodeInfoList,omitempty" xml:"NodeInfoList,omitempty" type:"Repeated"`
	NodeNumber     *int32                                             `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Normal         *bool                                              `json:"Normal,omitempty" xml:"Normal,omitempty"`
	TransactionSum *int32                                             `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
	Version        *string                                            `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetBlockchainInfoResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainInfoResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetBlockchainInfoResponseBodyResult) SetAbnormalNodes(v int32) *GetBlockchainInfoResponseBodyResult {
	s.AbnormalNodes = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetBizid(v string) *GetBlockchainInfoResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetBlockHeight(v int32) *GetBlockchainInfoResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetCreateTime(v int64) *GetBlockchainInfoResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetIsRole(v bool) *GetBlockchainInfoResponseBodyResult {
	s.IsRole = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetNodeInfoList(v []*GetBlockchainInfoResponseBodyResultNodeInfoList) *GetBlockchainInfoResponseBodyResult {
	s.NodeInfoList = v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetNodeNumber(v int32) *GetBlockchainInfoResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetNormal(v bool) *GetBlockchainInfoResponseBodyResult {
	s.Normal = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetTransactionSum(v int32) *GetBlockchainInfoResponseBodyResult {
	s.TransactionSum = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResult) SetVersion(v string) *GetBlockchainInfoResponseBodyResult {
	s.Version = &v
	return s
}

type GetBlockchainInfoResponseBodyResultNodeInfoList struct {
	BlockHeight *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Status      *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetBlockchainInfoResponseBodyResultNodeInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainInfoResponseBodyResultNodeInfoList) GoString() string {
	return s.String()
}

func (s *GetBlockchainInfoResponseBodyResultNodeInfoList) SetBlockHeight(v int64) *GetBlockchainInfoResponseBodyResultNodeInfoList {
	s.BlockHeight = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResultNodeInfoList) SetNodeName(v string) *GetBlockchainInfoResponseBodyResultNodeInfoList {
	s.NodeName = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResultNodeInfoList) SetStatus(v bool) *GetBlockchainInfoResponseBodyResultNodeInfoList {
	s.Status = &v
	return s
}

func (s *GetBlockchainInfoResponseBodyResultNodeInfoList) SetVersion(v string) *GetBlockchainInfoResponseBodyResultNodeInfoList {
	s.Version = &v
	return s
}

type GetBlockchainInfoResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetBlockchainInfoResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetBlockchainInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetBlockchainInfoResponse) GoString() string {
	return s.String()
}

func (s *GetBlockchainInfoResponse) SetHeaders(v map[string]*string) *GetBlockchainInfoResponse {
	s.Headers = v
	return s
}

func (s *GetBlockchainInfoResponse) SetStatusCode(v int32) *GetBlockchainInfoResponse {
	s.StatusCode = &v
	return s
}

func (s *GetBlockchainInfoResponse) SetBody(v *GetBlockchainInfoResponseBody) *GetBlockchainInfoResponse {
	s.Body = v
	return s
}

type GetMyBlockchainsResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*GetMyBlockchainsResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s GetMyBlockchainsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMyBlockchainsResponseBody) GoString() string {
	return s.String()
}

func (s *GetMyBlockchainsResponseBody) SetRequestId(v string) *GetMyBlockchainsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMyBlockchainsResponseBody) SetResult(v []*GetMyBlockchainsResponseBodyResult) *GetMyBlockchainsResponseBody {
	s.Result = v
	return s
}

type GetMyBlockchainsResponseBodyResult struct {
	Bizid        *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Createtime   *int64  `json:"Createtime,omitempty" xml:"Createtime,omitempty"`
	Id           *int32  `json:"Id,omitempty" xml:"Id,omitempty"`
	RejectReason *string `json:"RejectReason,omitempty" xml:"RejectReason,omitempty"`
	ReqAddr      *string `json:"ReqAddr,omitempty" xml:"ReqAddr,omitempty"`
	SignedAddr   *string `json:"SignedAddr,omitempty" xml:"SignedAddr,omitempty"`
	Status       *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	Updatetime   *int64  `json:"Updatetime,omitempty" xml:"Updatetime,omitempty"`
	Username     *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s GetMyBlockchainsResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetMyBlockchainsResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetMyBlockchainsResponseBodyResult) SetBizid(v string) *GetMyBlockchainsResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *GetMyBlockchainsResponseBodyResult) SetCreatetime(v int64) *GetMyBlockchainsResponseBodyResult {
	s.Createtime = &v
	return s
}

func (s *GetMyBlockchainsResponseBodyResult) SetId(v int32) *GetMyBlockchainsResponseBodyResult {
	s.Id = &v
	return s
}

func (s *GetMyBlockchainsResponseBodyResult) SetRejectReason(v string) *GetMyBlockchainsResponseBodyResult {
	s.RejectReason = &v
	return s
}

func (s *GetMyBlockchainsResponseBodyResult) SetReqAddr(v string) *GetMyBlockchainsResponseBodyResult {
	s.ReqAddr = &v
	return s
}

func (s *GetMyBlockchainsResponseBodyResult) SetSignedAddr(v string) *GetMyBlockchainsResponseBodyResult {
	s.SignedAddr = &v
	return s
}

func (s *GetMyBlockchainsResponseBodyResult) SetStatus(v int32) *GetMyBlockchainsResponseBodyResult {
	s.Status = &v
	return s
}

func (s *GetMyBlockchainsResponseBodyResult) SetUpdatetime(v int64) *GetMyBlockchainsResponseBodyResult {
	s.Updatetime = &v
	return s
}

func (s *GetMyBlockchainsResponseBodyResult) SetUsername(v string) *GetMyBlockchainsResponseBodyResult {
	s.Username = &v
	return s
}

type GetMyBlockchainsResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMyBlockchainsResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMyBlockchainsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMyBlockchainsResponse) GoString() string {
	return s.String()
}

func (s *GetMyBlockchainsResponse) SetHeaders(v map[string]*string) *GetMyBlockchainsResponse {
	s.Headers = v
	return s
}

func (s *GetMyBlockchainsResponse) SetStatusCode(v int32) *GetMyBlockchainsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMyBlockchainsResponse) SetBody(v *GetMyBlockchainsResponseBody) *GetMyBlockchainsResponse {
	s.Body = v
	return s
}

type GetMySuccessAppliesResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*GetMySuccessAppliesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s GetMySuccessAppliesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMySuccessAppliesResponseBody) GoString() string {
	return s.String()
}

func (s *GetMySuccessAppliesResponseBody) SetRequestId(v string) *GetMySuccessAppliesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMySuccessAppliesResponseBody) SetResult(v []*GetMySuccessAppliesResponseBodyResult) *GetMySuccessAppliesResponseBody {
	s.Result = v
	return s
}

type GetMySuccessAppliesResponseBodyResult struct {
	AbnormalNodes  *int32                                               `json:"AbnormalNodes,omitempty" xml:"AbnormalNodes,omitempty"`
	Bizid          *string                                              `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	BlockHeight    *int32                                               `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	CreateTime     *int64                                               `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	IsRole         *bool                                                `json:"IsRole,omitempty" xml:"IsRole,omitempty"`
	Name           *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	NodeInfoList   []*GetMySuccessAppliesResponseBodyResultNodeInfoList `json:"NodeInfoList,omitempty" xml:"NodeInfoList,omitempty" type:"Repeated"`
	NodeNumber     *int32                                               `json:"NodeNumber,omitempty" xml:"NodeNumber,omitempty"`
	Normal         *bool                                                `json:"Normal,omitempty" xml:"Normal,omitempty"`
	TransactionSum *int32                                               `json:"TransactionSum,omitempty" xml:"TransactionSum,omitempty"`
	Version        *string                                              `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetMySuccessAppliesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetMySuccessAppliesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetMySuccessAppliesResponseBodyResult) SetAbnormalNodes(v int32) *GetMySuccessAppliesResponseBodyResult {
	s.AbnormalNodes = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetBizid(v string) *GetMySuccessAppliesResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetBlockHeight(v int32) *GetMySuccessAppliesResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetCreateTime(v int64) *GetMySuccessAppliesResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetIsRole(v bool) *GetMySuccessAppliesResponseBodyResult {
	s.IsRole = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetName(v string) *GetMySuccessAppliesResponseBodyResult {
	s.Name = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetNodeInfoList(v []*GetMySuccessAppliesResponseBodyResultNodeInfoList) *GetMySuccessAppliesResponseBodyResult {
	s.NodeInfoList = v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetNodeNumber(v int32) *GetMySuccessAppliesResponseBodyResult {
	s.NodeNumber = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetNormal(v bool) *GetMySuccessAppliesResponseBodyResult {
	s.Normal = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetTransactionSum(v int32) *GetMySuccessAppliesResponseBodyResult {
	s.TransactionSum = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResult) SetVersion(v string) *GetMySuccessAppliesResponseBodyResult {
	s.Version = &v
	return s
}

type GetMySuccessAppliesResponseBodyResultNodeInfoList struct {
	BlockHeight *int64  `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	NodeName    *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	Status      *bool   `json:"Status,omitempty" xml:"Status,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetMySuccessAppliesResponseBodyResultNodeInfoList) String() string {
	return tea.Prettify(s)
}

func (s GetMySuccessAppliesResponseBodyResultNodeInfoList) GoString() string {
	return s.String()
}

func (s *GetMySuccessAppliesResponseBodyResultNodeInfoList) SetBlockHeight(v int64) *GetMySuccessAppliesResponseBodyResultNodeInfoList {
	s.BlockHeight = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResultNodeInfoList) SetNodeName(v string) *GetMySuccessAppliesResponseBodyResultNodeInfoList {
	s.NodeName = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResultNodeInfoList) SetStatus(v bool) *GetMySuccessAppliesResponseBodyResultNodeInfoList {
	s.Status = &v
	return s
}

func (s *GetMySuccessAppliesResponseBodyResultNodeInfoList) SetVersion(v string) *GetMySuccessAppliesResponseBodyResultNodeInfoList {
	s.Version = &v
	return s
}

type GetMySuccessAppliesResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetMySuccessAppliesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetMySuccessAppliesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMySuccessAppliesResponse) GoString() string {
	return s.String()
}

func (s *GetMySuccessAppliesResponse) SetHeaders(v map[string]*string) *GetMySuccessAppliesResponse {
	s.Headers = v
	return s
}

func (s *GetMySuccessAppliesResponse) SetStatusCode(v int32) *GetMySuccessAppliesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMySuccessAppliesResponse) SetBody(v *GetMySuccessAppliesResponseBody) *GetMySuccessAppliesResponse {
	s.Body = v
	return s
}

type GetOssPropertiesRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s GetOssPropertiesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetOssPropertiesRequest) GoString() string {
	return s.String()
}

func (s *GetOssPropertiesRequest) SetBizid(v string) *GetOssPropertiesRequest {
	s.Bizid = &v
	return s
}

type GetOssPropertiesResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetOssPropertiesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetOssPropertiesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetOssPropertiesResponseBody) GoString() string {
	return s.String()
}

func (s *GetOssPropertiesResponseBody) SetRequestId(v string) *GetOssPropertiesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetOssPropertiesResponseBody) SetResult(v *GetOssPropertiesResponseBodyResult) *GetOssPropertiesResponseBody {
	s.Result = v
	return s
}

type GetOssPropertiesResponseBodyResult struct {
	AccessKeyId     *string `json:"AccessKeyId,omitempty" xml:"AccessKeyId,omitempty"`
	AccessKeySecret *string `json:"AccessKeySecret,omitempty" xml:"AccessKeySecret,omitempty"`
	BucketName      *string `json:"BucketName,omitempty" xml:"BucketName,omitempty"`
	Endpoint        *string `json:"Endpoint,omitempty" xml:"Endpoint,omitempty"`
	FolderName      *string `json:"FolderName,omitempty" xml:"FolderName,omitempty"`
}

func (s GetOssPropertiesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetOssPropertiesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetOssPropertiesResponseBodyResult) SetAccessKeyId(v string) *GetOssPropertiesResponseBodyResult {
	s.AccessKeyId = &v
	return s
}

func (s *GetOssPropertiesResponseBodyResult) SetAccessKeySecret(v string) *GetOssPropertiesResponseBodyResult {
	s.AccessKeySecret = &v
	return s
}

func (s *GetOssPropertiesResponseBodyResult) SetBucketName(v string) *GetOssPropertiesResponseBodyResult {
	s.BucketName = &v
	return s
}

func (s *GetOssPropertiesResponseBodyResult) SetEndpoint(v string) *GetOssPropertiesResponseBodyResult {
	s.Endpoint = &v
	return s
}

func (s *GetOssPropertiesResponseBodyResult) SetFolderName(v string) *GetOssPropertiesResponseBodyResult {
	s.FolderName = &v
	return s
}

type GetOssPropertiesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetOssPropertiesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetOssPropertiesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetOssPropertiesResponse) GoString() string {
	return s.String()
}

func (s *GetOssPropertiesResponse) SetHeaders(v map[string]*string) *GetOssPropertiesResponse {
	s.Headers = v
	return s
}

func (s *GetOssPropertiesResponse) SetStatusCode(v int32) *GetOssPropertiesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetOssPropertiesResponse) SetBody(v *GetOssPropertiesResponseBody) *GetOssPropertiesResponse {
	s.Body = v
	return s
}

type GetTemplatesResponseBody struct {
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *GetTemplatesResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s GetTemplatesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetTemplatesResponseBody) GoString() string {
	return s.String()
}

func (s *GetTemplatesResponseBody) SetRequestId(v string) *GetTemplatesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetTemplatesResponseBody) SetResult(v *GetTemplatesResponseBodyResult) *GetTemplatesResponseBody {
	s.Result = v
	return s
}

type GetTemplatesResponseBodyResult struct {
	SchemaList []*GetTemplatesResponseBodyResultSchemaList `json:"SchemaList,omitempty" xml:"SchemaList,omitempty" type:"Repeated"`
}

func (s GetTemplatesResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s GetTemplatesResponseBodyResult) GoString() string {
	return s.String()
}

func (s *GetTemplatesResponseBodyResult) SetSchemaList(v []*GetTemplatesResponseBodyResultSchemaList) *GetTemplatesResponseBodyResult {
	s.SchemaList = v
	return s
}

type GetTemplatesResponseBodyResultSchemaList struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *int32  `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s GetTemplatesResponseBodyResultSchemaList) String() string {
	return tea.Prettify(s)
}

func (s GetTemplatesResponseBodyResultSchemaList) GoString() string {
	return s.String()
}

func (s *GetTemplatesResponseBodyResultSchemaList) SetCreateTime(v int64) *GetTemplatesResponseBodyResultSchemaList {
	s.CreateTime = &v
	return s
}

func (s *GetTemplatesResponseBodyResultSchemaList) SetDescription(v string) *GetTemplatesResponseBodyResultSchemaList {
	s.Description = &v
	return s
}

func (s *GetTemplatesResponseBodyResultSchemaList) SetId(v int64) *GetTemplatesResponseBodyResultSchemaList {
	s.Id = &v
	return s
}

func (s *GetTemplatesResponseBodyResultSchemaList) SetIsTemplate(v int32) *GetTemplatesResponseBodyResultSchemaList {
	s.IsTemplate = &v
	return s
}

func (s *GetTemplatesResponseBodyResultSchemaList) SetName(v string) *GetTemplatesResponseBodyResultSchemaList {
	s.Name = &v
	return s
}

func (s *GetTemplatesResponseBodyResultSchemaList) SetUpdateTime(v int64) *GetTemplatesResponseBodyResultSchemaList {
	s.UpdateTime = &v
	return s
}

func (s *GetTemplatesResponseBodyResultSchemaList) SetVersion(v int64) *GetTemplatesResponseBodyResultSchemaList {
	s.Version = &v
	return s
}

type GetTemplatesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *GetTemplatesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s GetTemplatesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetTemplatesResponse) GoString() string {
	return s.String()
}

func (s *GetTemplatesResponse) SetHeaders(v map[string]*string) *GetTemplatesResponse {
	s.Headers = v
	return s
}

func (s *GetTemplatesResponse) SetStatusCode(v int32) *GetTemplatesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetTemplatesResponse) SetBody(v *GetTemplatesResponseBody) *GetTemplatesResponse {
	s.Body = v
	return s
}

type InstallChaincodeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// chan-channelx-1l1hmckuuisxo
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s InstallChaincodeRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallChaincodeRequest) GoString() string {
	return s.String()
}

func (s *InstallChaincodeRequest) SetChaincodeId(v string) *InstallChaincodeRequest {
	s.ChaincodeId = &v
	return s
}

func (s *InstallChaincodeRequest) SetLocation(v string) *InstallChaincodeRequest {
	s.Location = &v
	return s
}

func (s *InstallChaincodeRequest) SetOrganizationId(v string) *InstallChaincodeRequest {
	s.OrganizationId = &v
	return s
}

type InstallChaincodeResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *InstallChaincodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstallChaincodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallChaincodeResponseBody) GoString() string {
	return s.String()
}

func (s *InstallChaincodeResponseBody) SetErrorCode(v int32) *InstallChaincodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *InstallChaincodeResponseBody) SetRequestId(v string) *InstallChaincodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallChaincodeResponseBody) SetResult(v *InstallChaincodeResponseBodyResult) *InstallChaincodeResponseBody {
	s.Result = v
	return s
}

func (s *InstallChaincodeResponseBody) SetSuccess(v bool) *InstallChaincodeResponseBody {
	s.Success = &v
	return s
}

type InstallChaincodeResponseBodyResult struct {
	// example:
	//
	// cc-198jejf8f8chi8
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// mychannel
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1533025590
	DeployTime *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	// example:
	//
	// OR ("perf9141MSP.member")
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// input
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// false
	Install *bool `json:"Install,omitempty" xml:"Install,omitempty"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// sacc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// github.com/hyperledger/fabric-samples/chaincode/sacc
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// providerid
	ProviderId *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	// example:
	//
	// prividername
	ProviderName *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	// example:
	//
	// Pending
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s InstallChaincodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s InstallChaincodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *InstallChaincodeResponseBodyResult) SetChaincodeId(v string) *InstallChaincodeResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetChannelName(v string) *InstallChaincodeResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetConsortiumId(v string) *InstallChaincodeResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetCreateTime(v string) *InstallChaincodeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetDeployTime(v string) *InstallChaincodeResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetEndorsePolicy(v string) *InstallChaincodeResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetInput(v string) *InstallChaincodeResponseBodyResult {
	s.Input = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetInstall(v bool) *InstallChaincodeResponseBodyResult {
	s.Install = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetMessage(v string) *InstallChaincodeResponseBodyResult {
	s.Message = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetName(v string) *InstallChaincodeResponseBodyResult {
	s.Name = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetPath(v string) *InstallChaincodeResponseBodyResult {
	s.Path = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetProviderId(v string) *InstallChaincodeResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetProviderName(v string) *InstallChaincodeResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetState(v string) *InstallChaincodeResponseBodyResult {
	s.State = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetType(v int32) *InstallChaincodeResponseBodyResult {
	s.Type = &v
	return s
}

func (s *InstallChaincodeResponseBodyResult) SetVersion(v string) *InstallChaincodeResponseBodyResult {
	s.Version = &v
	return s
}

type InstallChaincodeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallChaincodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallChaincodeResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallChaincodeResponse) GoString() string {
	return s.String()
}

func (s *InstallChaincodeResponse) SetHeaders(v map[string]*string) *InstallChaincodeResponse {
	s.Headers = v
	return s
}

func (s *InstallChaincodeResponse) SetStatusCode(v int32) *InstallChaincodeResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallChaincodeResponse) SetBody(v *InstallChaincodeResponseBody) *InstallChaincodeResponse {
	s.Body = v
	return s
}

type InstallFabricChaincodePackageRequest struct {
	// This parameter is required.
	ChaincodePackageId *string `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	Location           *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s InstallFabricChaincodePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s InstallFabricChaincodePackageRequest) GoString() string {
	return s.String()
}

func (s *InstallFabricChaincodePackageRequest) SetChaincodePackageId(v string) *InstallFabricChaincodePackageRequest {
	s.ChaincodePackageId = &v
	return s
}

func (s *InstallFabricChaincodePackageRequest) SetLocation(v string) *InstallFabricChaincodePackageRequest {
	s.Location = &v
	return s
}

func (s *InstallFabricChaincodePackageRequest) SetOrganizationId(v string) *InstallFabricChaincodePackageRequest {
	s.OrganizationId = &v
	return s
}

type InstallFabricChaincodePackageResponseBody struct {
	ErrorCode *int32                                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	Message   *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *InstallFabricChaincodePackageResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstallFabricChaincodePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstallFabricChaincodePackageResponseBody) GoString() string {
	return s.String()
}

func (s *InstallFabricChaincodePackageResponseBody) SetErrorCode(v int32) *InstallFabricChaincodePackageResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBody) SetMessage(v string) *InstallFabricChaincodePackageResponseBody {
	s.Message = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBody) SetRequestId(v string) *InstallFabricChaincodePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBody) SetResult(v *InstallFabricChaincodePackageResponseBodyResult) *InstallFabricChaincodePackageResponseBody {
	s.Result = v
	return s
}

func (s *InstallFabricChaincodePackageResponseBody) SetSuccess(v bool) *InstallFabricChaincodePackageResponseBody {
	s.Success = &v
	return s
}

type InstallFabricChaincodePackageResponseBodyResult struct {
	ChaincodePackageId *string `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	Checksum           *string `json:"Checksum,omitempty" xml:"Checksum,omitempty"`
	DeleteTime         *int64  `json:"DeleteTime,omitempty" xml:"DeleteTime,omitempty"`
	Deleted            *bool   `json:"Deleted,omitempty" xml:"Deleted,omitempty"`
	InstallTime        *int64  `json:"InstallTime,omitempty" xml:"InstallTime,omitempty"`
	Label              *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Md5sum             *string `json:"Md5sum,omitempty" xml:"Md5sum,omitempty"`
	OrganizationId     *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	OssBucket          *string `json:"OssBucket,omitempty" xml:"OssBucket,omitempty"`
	OssURL             *string `json:"OssURL,omitempty" xml:"OssURL,omitempty"`
	ProviderBid        *string `json:"ProviderBid,omitempty" xml:"ProviderBid,omitempty"`
	ProviderUid        *int64  `json:"ProviderUid,omitempty" xml:"ProviderUid,omitempty"`
	State              *string `json:"State,omitempty" xml:"State,omitempty"`
	Type               *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	TypeName           *string `json:"TypeName,omitempty" xml:"TypeName,omitempty"`
	UploadTime         *int64  `json:"UploadTime,omitempty" xml:"UploadTime,omitempty"`
}

func (s InstallFabricChaincodePackageResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s InstallFabricChaincodePackageResponseBodyResult) GoString() string {
	return s.String()
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetChaincodePackageId(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.ChaincodePackageId = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetChecksum(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.Checksum = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetDeleteTime(v int64) *InstallFabricChaincodePackageResponseBodyResult {
	s.DeleteTime = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetDeleted(v bool) *InstallFabricChaincodePackageResponseBodyResult {
	s.Deleted = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetInstallTime(v int64) *InstallFabricChaincodePackageResponseBodyResult {
	s.InstallTime = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetLabel(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.Label = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetMd5sum(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.Md5sum = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetOrganizationId(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetOssBucket(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.OssBucket = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetOssURL(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.OssURL = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetProviderBid(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.ProviderBid = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetProviderUid(v int64) *InstallFabricChaincodePackageResponseBodyResult {
	s.ProviderUid = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetState(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.State = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetType(v int32) *InstallFabricChaincodePackageResponseBodyResult {
	s.Type = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetTypeName(v string) *InstallFabricChaincodePackageResponseBodyResult {
	s.TypeName = &v
	return s
}

func (s *InstallFabricChaincodePackageResponseBodyResult) SetUploadTime(v int64) *InstallFabricChaincodePackageResponseBodyResult {
	s.UploadTime = &v
	return s
}

type InstallFabricChaincodePackageResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstallFabricChaincodePackageResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstallFabricChaincodePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s InstallFabricChaincodePackageResponse) GoString() string {
	return s.String()
}

func (s *InstallFabricChaincodePackageResponse) SetHeaders(v map[string]*string) *InstallFabricChaincodePackageResponse {
	s.Headers = v
	return s
}

func (s *InstallFabricChaincodePackageResponse) SetStatusCode(v int32) *InstallFabricChaincodePackageResponse {
	s.StatusCode = &v
	return s
}

func (s *InstallFabricChaincodePackageResponse) SetBody(v *InstallFabricChaincodePackageResponseBody) *InstallFabricChaincodePackageResponse {
	s.Body = v
	return s
}

type InstantiateChaincodeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// cc-198jejf8f8****
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// string
	CollectionConfig *string `json:"CollectionConfig,omitempty" xml:"CollectionConfig,omitempty"`
	// example:
	//
	// OR (&#39;perf9141MSP.member&#39;)
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s InstantiateChaincodeRequest) String() string {
	return tea.Prettify(s)
}

func (s InstantiateChaincodeRequest) GoString() string {
	return s.String()
}

func (s *InstantiateChaincodeRequest) SetChaincodeId(v string) *InstantiateChaincodeRequest {
	s.ChaincodeId = &v
	return s
}

func (s *InstantiateChaincodeRequest) SetCollectionConfig(v string) *InstantiateChaincodeRequest {
	s.CollectionConfig = &v
	return s
}

func (s *InstantiateChaincodeRequest) SetEndorsePolicy(v string) *InstantiateChaincodeRequest {
	s.EndorsePolicy = &v
	return s
}

func (s *InstantiateChaincodeRequest) SetLocation(v string) *InstantiateChaincodeRequest {
	s.Location = &v
	return s
}

func (s *InstantiateChaincodeRequest) SetOrganizationId(v string) *InstantiateChaincodeRequest {
	s.OrganizationId = &v
	return s
}

type InstantiateChaincodeResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *InstantiateChaincodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s InstantiateChaincodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InstantiateChaincodeResponseBody) GoString() string {
	return s.String()
}

func (s *InstantiateChaincodeResponseBody) SetErrorCode(v int32) *InstantiateChaincodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *InstantiateChaincodeResponseBody) SetRequestId(v string) *InstantiateChaincodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *InstantiateChaincodeResponseBody) SetResult(v *InstantiateChaincodeResponseBodyResult) *InstantiateChaincodeResponseBody {
	s.Result = v
	return s
}

func (s *InstantiateChaincodeResponseBody) SetSuccess(v bool) *InstantiateChaincodeResponseBody {
	s.Success = &v
	return s
}

type InstantiateChaincodeResponseBodyResult struct {
	// example:
	//
	// cc-198jejf8f8chi8
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// channelname
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwlulg7
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1533025590
	DeployTime *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	// example:
	//
	// OR (\\"aaaaaa1MSP.peer\\")
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// input
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// false
	Install *bool `json:"Install,omitempty" xml:"Install,omitempty"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// sacc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// go-sdk-demo/chaincode/src
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// id
	ProviderId *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	// example:
	//
	// name
	ProviderName *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s InstantiateChaincodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s InstantiateChaincodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *InstantiateChaincodeResponseBodyResult) SetChaincodeId(v string) *InstantiateChaincodeResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetChannelName(v string) *InstantiateChaincodeResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetConsortiumId(v string) *InstantiateChaincodeResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetCreateTime(v string) *InstantiateChaincodeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetDeployTime(v string) *InstantiateChaincodeResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetEndorsePolicy(v string) *InstantiateChaincodeResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetInput(v string) *InstantiateChaincodeResponseBodyResult {
	s.Input = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetInstall(v bool) *InstantiateChaincodeResponseBodyResult {
	s.Install = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetMessage(v string) *InstantiateChaincodeResponseBodyResult {
	s.Message = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetName(v string) *InstantiateChaincodeResponseBodyResult {
	s.Name = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetPath(v string) *InstantiateChaincodeResponseBodyResult {
	s.Path = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetProviderId(v string) *InstantiateChaincodeResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetProviderName(v string) *InstantiateChaincodeResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetState(v string) *InstantiateChaincodeResponseBodyResult {
	s.State = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetType(v int32) *InstantiateChaincodeResponseBodyResult {
	s.Type = &v
	return s
}

func (s *InstantiateChaincodeResponseBodyResult) SetVersion(v string) *InstantiateChaincodeResponseBodyResult {
	s.Version = &v
	return s
}

type InstantiateChaincodeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InstantiateChaincodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InstantiateChaincodeResponse) String() string {
	return tea.Prettify(s)
}

func (s InstantiateChaincodeResponse) GoString() string {
	return s.String()
}

func (s *InstantiateChaincodeResponse) SetHeaders(v map[string]*string) *InstantiateChaincodeResponse {
	s.Headers = v
	return s
}

func (s *InstantiateChaincodeResponse) SetStatusCode(v int32) *InstantiateChaincodeResponse {
	s.StatusCode = &v
	return s
}

func (s *InstantiateChaincodeResponse) SetBody(v *InstantiateChaincodeResponseBody) *InstantiateChaincodeResponse {
	s.Body = v
	return s
}

type InviteUserRequest struct {
	Bid       *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Bizid     *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	UserEmail *string `json:"UserEmail,omitempty" xml:"UserEmail,omitempty"`
	UserId    *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InviteUserRequest) String() string {
	return tea.Prettify(s)
}

func (s InviteUserRequest) GoString() string {
	return s.String()
}

func (s *InviteUserRequest) SetBid(v string) *InviteUserRequest {
	s.Bid = &v
	return s
}

func (s *InviteUserRequest) SetBizid(v string) *InviteUserRequest {
	s.Bizid = &v
	return s
}

func (s *InviteUserRequest) SetUserEmail(v string) *InviteUserRequest {
	s.UserEmail = &v
	return s
}

func (s *InviteUserRequest) SetUserId(v int64) *InviteUserRequest {
	s.UserId = &v
	return s
}

type InviteUserResponseBody struct {
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *InviteUserResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s InviteUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s InviteUserResponseBody) GoString() string {
	return s.String()
}

func (s *InviteUserResponseBody) SetRequestId(v string) *InviteUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *InviteUserResponseBody) SetResult(v *InviteUserResponseBodyResult) *InviteUserResponseBody {
	s.Result = v
	return s
}

type InviteUserResponseBodyResult struct {
	Bid        *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Bizid      *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Code       *string `json:"Code,omitempty" xml:"Code,omitempty"`
	CreateTime *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Email      *string `json:"Email,omitempty" xml:"Email,omitempty"`
	FromBid    *string `json:"FromBid,omitempty" xml:"FromBid,omitempty"`
	FromUserId *int32  `json:"FromUserId,omitempty" xml:"FromUserId,omitempty"`
	Status     *int32  `json:"Status,omitempty" xml:"Status,omitempty"`
	UpdateTime *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	UserId     *int32  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s InviteUserResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s InviteUserResponseBodyResult) GoString() string {
	return s.String()
}

func (s *InviteUserResponseBodyResult) SetBid(v string) *InviteUserResponseBodyResult {
	s.Bid = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetBizid(v string) *InviteUserResponseBodyResult {
	s.Bizid = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetCode(v string) *InviteUserResponseBodyResult {
	s.Code = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetCreateTime(v int64) *InviteUserResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetEmail(v string) *InviteUserResponseBodyResult {
	s.Email = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetFromBid(v string) *InviteUserResponseBodyResult {
	s.FromBid = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetFromUserId(v int32) *InviteUserResponseBodyResult {
	s.FromUserId = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetStatus(v int32) *InviteUserResponseBodyResult {
	s.Status = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetUpdateTime(v int64) *InviteUserResponseBodyResult {
	s.UpdateTime = &v
	return s
}

func (s *InviteUserResponseBodyResult) SetUserId(v int32) *InviteUserResponseBodyResult {
	s.UserId = &v
	return s
}

type InviteUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *InviteUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s InviteUserResponse) String() string {
	return tea.Prettify(s)
}

func (s InviteUserResponse) GoString() string {
	return s.String()
}

func (s *InviteUserResponse) SetHeaders(v map[string]*string) *InviteUserResponse {
	s.Headers = v
	return s
}

func (s *InviteUserResponse) SetStatusCode(v int32) *InviteUserResponse {
	s.StatusCode = &v
	return s
}

func (s *InviteUserResponse) SetBody(v *InviteUserResponseBody) *InviteUserResponse {
	s.Body = v
	return s
}

type JoinChannelRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// chan-channelx-1l1hmckuu****
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// accept
	Do *string `json:"Do,omitempty" xml:"Do,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s JoinChannelRequest) String() string {
	return tea.Prettify(s)
}

func (s JoinChannelRequest) GoString() string {
	return s.String()
}

func (s *JoinChannelRequest) SetChannelId(v string) *JoinChannelRequest {
	s.ChannelId = &v
	return s
}

func (s *JoinChannelRequest) SetDo(v string) *JoinChannelRequest {
	s.Do = &v
	return s
}

func (s *JoinChannelRequest) SetLocation(v string) *JoinChannelRequest {
	s.Location = &v
	return s
}

type JoinChannelResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    []*JoinChannelResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s JoinChannelResponseBody) String() string {
	return tea.Prettify(s)
}

func (s JoinChannelResponseBody) GoString() string {
	return s.String()
}

func (s *JoinChannelResponseBody) SetErrorCode(v int32) *JoinChannelResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *JoinChannelResponseBody) SetRequestId(v string) *JoinChannelResponseBody {
	s.RequestId = &v
	return s
}

func (s *JoinChannelResponseBody) SetResult(v []*JoinChannelResponseBodyResult) *JoinChannelResponseBody {
	s.Result = v
	return s
}

func (s *JoinChannelResponseBody) SetSuccess(v bool) *JoinChannelResponseBody {
	s.Success = &v
	return s
}

type JoinChannelResponseBodyResult struct {
	// example:
	//
	// 1533025590
	AcceptTime *string `json:"AcceptTime,omitempty" xml:"AcceptTime,omitempty"`
	// example:
	//
	// 1533025590
	ApproveTime *string `json:"ApproveTime,omitempty" xml:"ApproveTime,omitempty"`
	// example:
	//
	// channelid
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// example:
	//
	// 1533025590
	ConfirmTime *string `json:"ConfirmTime,omitempty" xml:"ConfirmTime,omitempty"`
	// example:
	//
	// 1533025590
	DestroyTime *string `json:"DestroyTime,omitempty" xml:"DestroyTime,omitempty"`
	// example:
	//
	// 1533025590
	InviteTime *string `json:"InviteTime,omitempty" xml:"InviteTime,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w9dt3
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// true
	WithPeer *bool `json:"WithPeer,omitempty" xml:"WithPeer,omitempty"`
}

func (s JoinChannelResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s JoinChannelResponseBodyResult) GoString() string {
	return s.String()
}

func (s *JoinChannelResponseBodyResult) SetAcceptTime(v string) *JoinChannelResponseBodyResult {
	s.AcceptTime = &v
	return s
}

func (s *JoinChannelResponseBodyResult) SetApproveTime(v string) *JoinChannelResponseBodyResult {
	s.ApproveTime = &v
	return s
}

func (s *JoinChannelResponseBodyResult) SetChannelId(v string) *JoinChannelResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *JoinChannelResponseBodyResult) SetConfirmTime(v string) *JoinChannelResponseBodyResult {
	s.ConfirmTime = &v
	return s
}

func (s *JoinChannelResponseBodyResult) SetDestroyTime(v string) *JoinChannelResponseBodyResult {
	s.DestroyTime = &v
	return s
}

func (s *JoinChannelResponseBodyResult) SetInviteTime(v string) *JoinChannelResponseBodyResult {
	s.InviteTime = &v
	return s
}

func (s *JoinChannelResponseBodyResult) SetOrganizationId(v string) *JoinChannelResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *JoinChannelResponseBodyResult) SetState(v string) *JoinChannelResponseBodyResult {
	s.State = &v
	return s
}

func (s *JoinChannelResponseBodyResult) SetWithPeer(v bool) *JoinChannelResponseBodyResult {
	s.WithPeer = &v
	return s
}

type JoinChannelResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *JoinChannelResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s JoinChannelResponse) String() string {
	return tea.Prettify(s)
}

func (s JoinChannelResponse) GoString() string {
	return s.String()
}

func (s *JoinChannelResponse) SetHeaders(v map[string]*string) *JoinChannelResponse {
	s.Headers = v
	return s
}

func (s *JoinChannelResponse) SetStatusCode(v int32) *JoinChannelResponse {
	s.StatusCode = &v
	return s
}

func (s *JoinChannelResponse) SetBody(v *JoinChannelResponseBody) *JoinChannelResponse {
	s.Body = v
	return s
}

type ListTagResourcesRequest struct {
	NextToken  *string   `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// This parameter is required.
	ResourceType *string                       `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*ListTagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListTagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequest) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequest) SetNextToken(v string) *ListTagResourcesRequest {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesRequest) SetResourceId(v []*string) *ListTagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *ListTagResourcesRequest) SetResourceType(v string) *ListTagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesRequest) SetTag(v []*ListTagResourcesRequestTag) *ListTagResourcesRequest {
	s.Tag = v
	return s
}

type ListTagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s ListTagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *ListTagResourcesRequestTag) SetKey(v string) *ListTagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *ListTagResourcesRequestTag) SetValue(v string) *ListTagResourcesRequestTag {
	s.Value = &v
	return s
}

type ListTagResourcesResponseBody struct {
	NextToken    *string                                     `json:"NextToken,omitempty" xml:"NextToken,omitempty"`
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TagResources []*ListTagResourcesResponseBodyTagResources `json:"TagResources,omitempty" xml:"TagResources,omitempty" type:"Repeated"`
}

func (s ListTagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBody) SetNextToken(v string) *ListTagResourcesResponseBody {
	s.NextToken = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetRequestId(v string) *ListTagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTagResourcesResponseBody) SetTagResources(v []*ListTagResourcesResponseBodyTagResources) *ListTagResourcesResponseBody {
	s.TagResources = v
	return s
}

type ListTagResourcesResponseBodyTagResources struct {
	ResourceId   *string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       *string `json:"TagKey,omitempty" xml:"TagKey,omitempty"`
	TagValue     *string `json:"TagValue,omitempty" xml:"TagValue,omitempty"`
}

func (s ListTagResourcesResponseBodyTagResources) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponseBodyTagResources) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceId(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceId = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetResourceType(v string) *ListTagResourcesResponseBodyTagResources {
	s.ResourceType = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagKey(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagKey = &v
	return s
}

func (s *ListTagResourcesResponseBodyTagResources) SetTagValue(v string) *ListTagResourcesResponseBodyTagResources {
	s.TagValue = &v
	return s
}

type ListTagResourcesResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ListTagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ListTagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTagResourcesResponse) GoString() string {
	return s.String()
}

func (s *ListTagResourcesResponse) SetHeaders(v map[string]*string) *ListTagResourcesResponse {
	s.Headers = v
	return s
}

func (s *ListTagResourcesResponse) SetStatusCode(v int32) *ListTagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *ListTagResourcesResponse) SetBody(v *ListTagResourcesResponseBody) *ListTagResourcesResponse {
	s.Body = v
	return s
}

type ModifyTriggerRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Options *string `json:"Options,omitempty" xml:"Options,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	Source         *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// This parameter is required.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s ModifyTriggerRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyTriggerRequest) GoString() string {
	return s.String()
}

func (s *ModifyTriggerRequest) SetChannelId(v string) *ModifyTriggerRequest {
	s.ChannelId = &v
	return s
}

func (s *ModifyTriggerRequest) SetName(v string) *ModifyTriggerRequest {
	s.Name = &v
	return s
}

func (s *ModifyTriggerRequest) SetOptions(v string) *ModifyTriggerRequest {
	s.Options = &v
	return s
}

func (s *ModifyTriggerRequest) SetOrganizationId(v string) *ModifyTriggerRequest {
	s.OrganizationId = &v
	return s
}

func (s *ModifyTriggerRequest) SetSource(v string) *ModifyTriggerRequest {
	s.Source = &v
	return s
}

func (s *ModifyTriggerRequest) SetStatus(v string) *ModifyTriggerRequest {
	s.Status = &v
	return s
}

type ModifyTriggerResponseBody struct {
	ErrorCode *int32                           `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ModifyTriggerResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                            `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyTriggerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyTriggerResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyTriggerResponseBody) SetErrorCode(v int32) *ModifyTriggerResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ModifyTriggerResponseBody) SetRequestId(v string) *ModifyTriggerResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyTriggerResponseBody) SetResult(v *ModifyTriggerResponseBodyResult) *ModifyTriggerResponseBody {
	s.Result = v
	return s
}

func (s *ModifyTriggerResponseBody) SetSuccess(v bool) *ModifyTriggerResponseBody {
	s.Success = &v
	return s
}

type ModifyTriggerResponseBodyResult struct {
	ChannelId    *string                                    `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ChannelName  *string                                    `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Checkpoint   *ModifyTriggerResponseBodyResultCheckpoint `json:"Checkpoint,omitempty" xml:"Checkpoint,omitempty" type:"Struct"`
	CreateTime   *int64                                     `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ErrorMessage *string                                    `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	Name         *string                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Options      *string                                    `json:"Options,omitempty" xml:"Options,omitempty"`
	Source       *string                                    `json:"Source,omitempty" xml:"Source,omitempty"`
	Status       *int32                                     `json:"Status,omitempty" xml:"Status,omitempty"`
	Type         *string                                    `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyTriggerResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ModifyTriggerResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ModifyTriggerResponseBodyResult) SetChannelId(v string) *ModifyTriggerResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetChannelName(v string) *ModifyTriggerResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetCheckpoint(v *ModifyTriggerResponseBodyResultCheckpoint) *ModifyTriggerResponseBodyResult {
	s.Checkpoint = v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetCreateTime(v int64) *ModifyTriggerResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetErrorMessage(v string) *ModifyTriggerResponseBodyResult {
	s.ErrorMessage = &v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetName(v string) *ModifyTriggerResponseBodyResult {
	s.Name = &v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetOptions(v string) *ModifyTriggerResponseBodyResult {
	s.Options = &v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetSource(v string) *ModifyTriggerResponseBodyResult {
	s.Source = &v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetStatus(v int32) *ModifyTriggerResponseBodyResult {
	s.Status = &v
	return s
}

func (s *ModifyTriggerResponseBodyResult) SetType(v string) *ModifyTriggerResponseBodyResult {
	s.Type = &v
	return s
}

type ModifyTriggerResponseBodyResultCheckpoint struct {
	ErrorCount *int64  `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	Height     *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
	Index      *int64  `json:"Index,omitempty" xml:"Index,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s ModifyTriggerResponseBodyResultCheckpoint) String() string {
	return tea.Prettify(s)
}

func (s ModifyTriggerResponseBodyResultCheckpoint) GoString() string {
	return s.String()
}

func (s *ModifyTriggerResponseBodyResultCheckpoint) SetErrorCount(v int64) *ModifyTriggerResponseBodyResultCheckpoint {
	s.ErrorCount = &v
	return s
}

func (s *ModifyTriggerResponseBodyResultCheckpoint) SetHeight(v int64) *ModifyTriggerResponseBodyResultCheckpoint {
	s.Height = &v
	return s
}

func (s *ModifyTriggerResponseBodyResultCheckpoint) SetIndex(v int64) *ModifyTriggerResponseBodyResultCheckpoint {
	s.Index = &v
	return s
}

func (s *ModifyTriggerResponseBodyResultCheckpoint) SetType(v string) *ModifyTriggerResponseBodyResultCheckpoint {
	s.Type = &v
	return s
}

type ModifyTriggerResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ModifyTriggerResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ModifyTriggerResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyTriggerResponse) GoString() string {
	return s.String()
}

func (s *ModifyTriggerResponse) SetHeaders(v map[string]*string) *ModifyTriggerResponse {
	s.Headers = v
	return s
}

func (s *ModifyTriggerResponse) SetStatusCode(v int32) *ModifyTriggerResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyTriggerResponse) SetBody(v *ModifyTriggerResponseBody) *ModifyTriggerResponse {
	s.Body = v
	return s
}

type OperateUserRequest struct {
	Bid       *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Bizid     *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Operation *int32  `json:"Operation,omitempty" xml:"Operation,omitempty"`
	UserName  *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s OperateUserRequest) String() string {
	return tea.Prettify(s)
}

func (s OperateUserRequest) GoString() string {
	return s.String()
}

func (s *OperateUserRequest) SetBid(v string) *OperateUserRequest {
	s.Bid = &v
	return s
}

func (s *OperateUserRequest) SetBizid(v string) *OperateUserRequest {
	s.Bizid = &v
	return s
}

func (s *OperateUserRequest) SetOperation(v int32) *OperateUserRequest {
	s.Operation = &v
	return s
}

func (s *OperateUserRequest) SetUserName(v string) *OperateUserRequest {
	s.UserName = &v
	return s
}

type OperateUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s OperateUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s OperateUserResponseBody) GoString() string {
	return s.String()
}

func (s *OperateUserResponseBody) SetRequestId(v string) *OperateUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *OperateUserResponseBody) SetResult(v string) *OperateUserResponseBody {
	s.Result = &v
	return s
}

type OperateUserResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *OperateUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s OperateUserResponse) String() string {
	return tea.Prettify(s)
}

func (s OperateUserResponse) GoString() string {
	return s.String()
}

func (s *OperateUserResponse) SetHeaders(v map[string]*string) *OperateUserResponse {
	s.Headers = v
	return s
}

func (s *OperateUserResponse) SetStatusCode(v int32) *OperateUserResponse {
	s.StatusCode = &v
	return s
}

func (s *OperateUserResponse) SetBody(v *OperateUserResponseBody) *OperateUserResponse {
	s.Body = v
	return s
}

type ProcessCloudIDEContractTransactionRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	Transaction *string `json:"Transaction,omitempty" xml:"Transaction,omitempty"`
}

func (s ProcessCloudIDEContractTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s ProcessCloudIDEContractTransactionRequest) GoString() string {
	return s.String()
}

func (s *ProcessCloudIDEContractTransactionRequest) SetAntChainId(v string) *ProcessCloudIDEContractTransactionRequest {
	s.AntChainId = &v
	return s
}

func (s *ProcessCloudIDEContractTransactionRequest) SetTransaction(v string) *ProcessCloudIDEContractTransactionRequest {
	s.Transaction = &v
	return s
}

type ProcessCloudIDEContractTransactionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ProcessCloudIDEContractTransactionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ProcessCloudIDEContractTransactionResponseBody) GoString() string {
	return s.String()
}

func (s *ProcessCloudIDEContractTransactionResponseBody) SetRequestId(v string) *ProcessCloudIDEContractTransactionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ProcessCloudIDEContractTransactionResponseBody) SetResult(v string) *ProcessCloudIDEContractTransactionResponseBody {
	s.Result = &v
	return s
}

type ProcessCloudIDEContractTransactionResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ProcessCloudIDEContractTransactionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ProcessCloudIDEContractTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s ProcessCloudIDEContractTransactionResponse) GoString() string {
	return s.String()
}

func (s *ProcessCloudIDEContractTransactionResponse) SetHeaders(v map[string]*string) *ProcessCloudIDEContractTransactionResponse {
	s.Headers = v
	return s
}

func (s *ProcessCloudIDEContractTransactionResponse) SetStatusCode(v int32) *ProcessCloudIDEContractTransactionResponse {
	s.StatusCode = &v
	return s
}

func (s *ProcessCloudIDEContractTransactionResponse) SetBody(v *ProcessCloudIDEContractTransactionResponseBody) *ProcessCloudIDEContractTransactionResponse {
	s.Body = v
	return s
}

type ProcessPublicCloudIDEContractTransactionRequest struct {
	Bizid       *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Transaction *string `json:"Transaction,omitempty" xml:"Transaction,omitempty"`
}

func (s ProcessPublicCloudIDEContractTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s ProcessPublicCloudIDEContractTransactionRequest) GoString() string {
	return s.String()
}

func (s *ProcessPublicCloudIDEContractTransactionRequest) SetBizid(v string) *ProcessPublicCloudIDEContractTransactionRequest {
	s.Bizid = &v
	return s
}

func (s *ProcessPublicCloudIDEContractTransactionRequest) SetTransaction(v string) *ProcessPublicCloudIDEContractTransactionRequest {
	s.Transaction = &v
	return s
}

type ProcessPublicCloudIDEContractTransactionResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ProcessPublicCloudIDEContractTransactionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ProcessPublicCloudIDEContractTransactionResponseBody) GoString() string {
	return s.String()
}

func (s *ProcessPublicCloudIDEContractTransactionResponseBody) SetRequestId(v string) *ProcessPublicCloudIDEContractTransactionResponseBody {
	s.RequestId = &v
	return s
}

func (s *ProcessPublicCloudIDEContractTransactionResponseBody) SetResult(v string) *ProcessPublicCloudIDEContractTransactionResponseBody {
	s.Result = &v
	return s
}

type ProcessPublicCloudIDEContractTransactionResponse struct {
	Headers    map[string]*string                                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ProcessPublicCloudIDEContractTransactionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ProcessPublicCloudIDEContractTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s ProcessPublicCloudIDEContractTransactionResponse) GoString() string {
	return s.String()
}

func (s *ProcessPublicCloudIDEContractTransactionResponse) SetHeaders(v map[string]*string) *ProcessPublicCloudIDEContractTransactionResponse {
	s.Headers = v
	return s
}

func (s *ProcessPublicCloudIDEContractTransactionResponse) SetStatusCode(v int32) *ProcessPublicCloudIDEContractTransactionResponse {
	s.StatusCode = &v
	return s
}

func (s *ProcessPublicCloudIDEContractTransactionResponse) SetBody(v *ProcessPublicCloudIDEContractTransactionResponseBody) *ProcessPublicCloudIDEContractTransactionResponse {
	s.Body = v
	return s
}

type QueryBlockRequest struct {
	Bizid  *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Height *int64  `json:"Height,omitempty" xml:"Height,omitempty"`
}

func (s QueryBlockRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockRequest) GoString() string {
	return s.String()
}

func (s *QueryBlockRequest) SetBizid(v string) *QueryBlockRequest {
	s.Bizid = &v
	return s
}

func (s *QueryBlockRequest) SetHeight(v int64) *QueryBlockRequest {
	s.Height = &v
	return s
}

type QueryBlockResponseBody struct {
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *QueryBlockResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s QueryBlockResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockResponseBody) GoString() string {
	return s.String()
}

func (s *QueryBlockResponseBody) SetRequestId(v string) *QueryBlockResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryBlockResponseBody) SetResult(v *QueryBlockResponseBodyResult) *QueryBlockResponseBody {
	s.Result = v
	return s
}

type QueryBlockResponseBodyResult struct {
	Alias            *string `json:"Alias,omitempty" xml:"Alias,omitempty"`
	BlockHash        *string `json:"BlockHash,omitempty" xml:"BlockHash,omitempty"`
	CreateTime       *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Height           *int32  `json:"Height,omitempty" xml:"Height,omitempty"`
	PreviousHash     *string `json:"PreviousHash,omitempty" xml:"PreviousHash,omitempty"`
	RootTxHash       *string `json:"RootTxHash,omitempty" xml:"RootTxHash,omitempty"`
	TransSummaryList *string `json:"TransSummaryList,omitempty" xml:"TransSummaryList,omitempty"`
	TransactionSize  *int32  `json:"TransactionSize,omitempty" xml:"TransactionSize,omitempty"`
}

func (s QueryBlockResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryBlockResponseBodyResult) SetAlias(v string) *QueryBlockResponseBodyResult {
	s.Alias = &v
	return s
}

func (s *QueryBlockResponseBodyResult) SetBlockHash(v string) *QueryBlockResponseBodyResult {
	s.BlockHash = &v
	return s
}

func (s *QueryBlockResponseBodyResult) SetCreateTime(v int64) *QueryBlockResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *QueryBlockResponseBodyResult) SetHeight(v int32) *QueryBlockResponseBodyResult {
	s.Height = &v
	return s
}

func (s *QueryBlockResponseBodyResult) SetPreviousHash(v string) *QueryBlockResponseBodyResult {
	s.PreviousHash = &v
	return s
}

func (s *QueryBlockResponseBodyResult) SetRootTxHash(v string) *QueryBlockResponseBodyResult {
	s.RootTxHash = &v
	return s
}

func (s *QueryBlockResponseBodyResult) SetTransSummaryList(v string) *QueryBlockResponseBodyResult {
	s.TransSummaryList = &v
	return s
}

func (s *QueryBlockResponseBodyResult) SetTransactionSize(v int32) *QueryBlockResponseBodyResult {
	s.TransactionSize = &v
	return s
}

type QueryBlockResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryBlockResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryBlockResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryBlockResponse) GoString() string {
	return s.String()
}

func (s *QueryBlockResponse) SetHeaders(v map[string]*string) *QueryBlockResponse {
	s.Headers = v
	return s
}

func (s *QueryBlockResponse) SetStatusCode(v int32) *QueryBlockResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryBlockResponse) SetBody(v *QueryBlockResponseBody) *QueryBlockResponse {
	s.Body = v
	return s
}

type QueryConsortiumDeletableRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	Location     *string `json:"Location,omitempty" xml:"Location,omitempty"`
}

func (s QueryConsortiumDeletableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryConsortiumDeletableRequest) GoString() string {
	return s.String()
}

func (s *QueryConsortiumDeletableRequest) SetConsortiumId(v string) *QueryConsortiumDeletableRequest {
	s.ConsortiumId = &v
	return s
}

func (s *QueryConsortiumDeletableRequest) SetLocation(v string) *QueryConsortiumDeletableRequest {
	s.Location = &v
	return s
}

type QueryConsortiumDeletableResponseBody struct {
	ErrorCode *int32                                      `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *QueryConsortiumDeletableResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                       `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryConsortiumDeletableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryConsortiumDeletableResponseBody) GoString() string {
	return s.String()
}

func (s *QueryConsortiumDeletableResponseBody) SetErrorCode(v int32) *QueryConsortiumDeletableResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBody) SetRequestId(v string) *QueryConsortiumDeletableResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBody) SetResult(v *QueryConsortiumDeletableResponseBodyResult) *QueryConsortiumDeletableResponseBody {
	s.Result = v
	return s
}

func (s *QueryConsortiumDeletableResponseBody) SetSuccess(v bool) *QueryConsortiumDeletableResponseBody {
	s.Success = &v
	return s
}

type QueryConsortiumDeletableResponseBodyResult struct {
	CodeName     *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	Deletable    *bool   `json:"Deletable,omitempty" xml:"Deletable,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Domain       *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	ZoneId       *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s QueryConsortiumDeletableResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryConsortiumDeletableResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetCodeName(v string) *QueryConsortiumDeletableResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetConsortiumId(v string) *QueryConsortiumDeletableResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetDeletable(v bool) *QueryConsortiumDeletableResponseBodyResult {
	s.Deletable = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetDescription(v string) *QueryConsortiumDeletableResponseBodyResult {
	s.Description = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetDomain(v string) *QueryConsortiumDeletableResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetName(v string) *QueryConsortiumDeletableResponseBodyResult {
	s.Name = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetRegionId(v string) *QueryConsortiumDeletableResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetState(v string) *QueryConsortiumDeletableResponseBodyResult {
	s.State = &v
	return s
}

func (s *QueryConsortiumDeletableResponseBodyResult) SetZoneId(v string) *QueryConsortiumDeletableResponseBodyResult {
	s.ZoneId = &v
	return s
}

type QueryConsortiumDeletableResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryConsortiumDeletableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryConsortiumDeletableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryConsortiumDeletableResponse) GoString() string {
	return s.String()
}

func (s *QueryConsortiumDeletableResponse) SetHeaders(v map[string]*string) *QueryConsortiumDeletableResponse {
	s.Headers = v
	return s
}

func (s *QueryConsortiumDeletableResponse) SetStatusCode(v int32) *QueryConsortiumDeletableResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryConsortiumDeletableResponse) SetBody(v *QueryConsortiumDeletableResponseBody) *QueryConsortiumDeletableResponse {
	s.Body = v
	return s
}

type QueryEthereumDeletableRequest struct {
	// This parameter is required.
	EthereumId *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
}

func (s QueryEthereumDeletableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEthereumDeletableRequest) GoString() string {
	return s.String()
}

func (s *QueryEthereumDeletableRequest) SetEthereumId(v string) *QueryEthereumDeletableRequest {
	s.EthereumId = &v
	return s
}

type QueryEthereumDeletableResponseBody struct {
	ErrorCode *int32                                    `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *QueryEthereumDeletableResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                     `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryEthereumDeletableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEthereumDeletableResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEthereumDeletableResponseBody) SetErrorCode(v int32) *QueryEthereumDeletableResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *QueryEthereumDeletableResponseBody) SetRequestId(v string) *QueryEthereumDeletableResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEthereumDeletableResponseBody) SetResult(v *QueryEthereumDeletableResponseBodyResult) *QueryEthereumDeletableResponseBody {
	s.Result = v
	return s
}

func (s *QueryEthereumDeletableResponseBody) SetSuccess(v bool) *QueryEthereumDeletableResponseBody {
	s.Success = &v
	return s
}

type QueryEthereumDeletableResponseBodyResult struct {
	Deletable  *bool   `json:"Deletable,omitempty" xml:"Deletable,omitempty"`
	EthereumId *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
}

func (s QueryEthereumDeletableResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryEthereumDeletableResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryEthereumDeletableResponseBodyResult) SetDeletable(v bool) *QueryEthereumDeletableResponseBodyResult {
	s.Deletable = &v
	return s
}

func (s *QueryEthereumDeletableResponseBodyResult) SetEthereumId(v string) *QueryEthereumDeletableResponseBodyResult {
	s.EthereumId = &v
	return s
}

type QueryEthereumDeletableResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryEthereumDeletableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryEthereumDeletableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEthereumDeletableResponse) GoString() string {
	return s.String()
}

func (s *QueryEthereumDeletableResponse) SetHeaders(v map[string]*string) *QueryEthereumDeletableResponse {
	s.Headers = v
	return s
}

func (s *QueryEthereumDeletableResponse) SetStatusCode(v int32) *QueryEthereumDeletableResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryEthereumDeletableResponse) SetBody(v *QueryEthereumDeletableResponseBody) *QueryEthereumDeletableResponse {
	s.Body = v
	return s
}

type QueryMetricRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	InnerIp  *string `json:"InnerIp,omitempty" xml:"InnerIp,omitempty"`
	Metric   *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	Period   *string `json:"Period,omitempty" xml:"Period,omitempty"`
	Port     *string `json:"Port,omitempty" xml:"Port,omitempty"`
	TimeArea *string `json:"TimeArea,omitempty" xml:"TimeArea,omitempty"`
}

func (s QueryMetricRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricRequest) GoString() string {
	return s.String()
}

func (s *QueryMetricRequest) SetBizid(v string) *QueryMetricRequest {
	s.Bizid = &v
	return s
}

func (s *QueryMetricRequest) SetInnerIp(v string) *QueryMetricRequest {
	s.InnerIp = &v
	return s
}

func (s *QueryMetricRequest) SetMetric(v string) *QueryMetricRequest {
	s.Metric = &v
	return s
}

func (s *QueryMetricRequest) SetPeriod(v string) *QueryMetricRequest {
	s.Period = &v
	return s
}

func (s *QueryMetricRequest) SetPort(v string) *QueryMetricRequest {
	s.Port = &v
	return s
}

func (s *QueryMetricRequest) SetTimeArea(v string) *QueryMetricRequest {
	s.TimeArea = &v
	return s
}

type QueryMetricResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s QueryMetricResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMetricResponseBody) SetRequestId(v string) *QueryMetricResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMetricResponseBody) SetResult(v string) *QueryMetricResponseBody {
	s.Result = &v
	return s
}

type QueryMetricResponse struct {
	Headers    map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                   `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryMetricResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryMetricResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMetricResponse) GoString() string {
	return s.String()
}

func (s *QueryMetricResponse) SetHeaders(v map[string]*string) *QueryMetricResponse {
	s.Headers = v
	return s
}

func (s *QueryMetricResponse) SetStatusCode(v int32) *QueryMetricResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryMetricResponse) SetBody(v *QueryMetricResponseBody) *QueryMetricResponse {
	s.Body = v
	return s
}

type QueryOrganizationDeletableRequest struct {
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s QueryOrganizationDeletableRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryOrganizationDeletableRequest) GoString() string {
	return s.String()
}

func (s *QueryOrganizationDeletableRequest) SetLocation(v string) *QueryOrganizationDeletableRequest {
	s.Location = &v
	return s
}

func (s *QueryOrganizationDeletableRequest) SetOrganizationId(v string) *QueryOrganizationDeletableRequest {
	s.OrganizationId = &v
	return s
}

type QueryOrganizationDeletableResponseBody struct {
	ErrorCode *int32                                        `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *QueryOrganizationDeletableResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                         `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s QueryOrganizationDeletableResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryOrganizationDeletableResponseBody) GoString() string {
	return s.String()
}

func (s *QueryOrganizationDeletableResponseBody) SetErrorCode(v int32) *QueryOrganizationDeletableResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBody) SetRequestId(v string) *QueryOrganizationDeletableResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBody) SetResult(v *QueryOrganizationDeletableResponseBodyResult) *QueryOrganizationDeletableResponseBody {
	s.Result = v
	return s
}

func (s *QueryOrganizationDeletableResponseBody) SetSuccess(v bool) *QueryOrganizationDeletableResponseBody {
	s.Success = &v
	return s
}

type QueryOrganizationDeletableResponseBodyResult struct {
	CodeName       *string `json:"CodeName,omitempty" xml:"CodeName,omitempty"`
	Deletable      *bool   `json:"Deletable,omitempty" xml:"Deletable,omitempty"`
	Description    *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Domain         *string `json:"Domain,omitempty" xml:"Domain,omitempty"`
	Name           *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	RegionId       *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State          *string `json:"State,omitempty" xml:"State,omitempty"`
	ZoneId         *string `json:"ZoneId,omitempty" xml:"ZoneId,omitempty"`
}

func (s QueryOrganizationDeletableResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryOrganizationDeletableResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetCodeName(v string) *QueryOrganizationDeletableResponseBodyResult {
	s.CodeName = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetDeletable(v bool) *QueryOrganizationDeletableResponseBodyResult {
	s.Deletable = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetDescription(v string) *QueryOrganizationDeletableResponseBodyResult {
	s.Description = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetDomain(v string) *QueryOrganizationDeletableResponseBodyResult {
	s.Domain = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetName(v string) *QueryOrganizationDeletableResponseBodyResult {
	s.Name = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetOrganizationId(v string) *QueryOrganizationDeletableResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetRegionId(v string) *QueryOrganizationDeletableResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetState(v string) *QueryOrganizationDeletableResponseBodyResult {
	s.State = &v
	return s
}

func (s *QueryOrganizationDeletableResponseBodyResult) SetZoneId(v string) *QueryOrganizationDeletableResponseBodyResult {
	s.ZoneId = &v
	return s
}

type QueryOrganizationDeletableResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryOrganizationDeletableResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryOrganizationDeletableResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryOrganizationDeletableResponse) GoString() string {
	return s.String()
}

func (s *QueryOrganizationDeletableResponse) SetHeaders(v map[string]*string) *QueryOrganizationDeletableResponse {
	s.Headers = v
	return s
}

func (s *QueryOrganizationDeletableResponse) SetStatusCode(v int32) *QueryOrganizationDeletableResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryOrganizationDeletableResponse) SetBody(v *QueryOrganizationDeletableResponseBody) *QueryOrganizationDeletableResponse {
	s.Body = v
	return s
}

type QueryTransactionRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Hash  *string `json:"Hash,omitempty" xml:"Hash,omitempty"`
}

func (s QueryTransactionRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTransactionRequest) GoString() string {
	return s.String()
}

func (s *QueryTransactionRequest) SetBizid(v string) *QueryTransactionRequest {
	s.Bizid = &v
	return s
}

func (s *QueryTransactionRequest) SetHash(v string) *QueryTransactionRequest {
	s.Hash = &v
	return s
}

type QueryTransactionResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *QueryTransactionResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s QueryTransactionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTransactionResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTransactionResponseBody) SetRequestId(v string) *QueryTransactionResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTransactionResponseBody) SetResult(v *QueryTransactionResponseBodyResult) *QueryTransactionResponseBody {
	s.Result = v
	return s
}

type QueryTransactionResponseBodyResult struct {
	BlockHeight    *int64                                           `json:"BlockHeight,omitempty" xml:"BlockHeight,omitempty"`
	BlockVersion   *int32                                           `json:"BlockVersion,omitempty" xml:"BlockVersion,omitempty"`
	Category       *int32                                           `json:"Category,omitempty" xml:"Category,omitempty"`
	Content        *string                                          `json:"Content,omitempty" xml:"Content,omitempty"`
	ContentHash    *string                                          `json:"ContentHash,omitempty" xml:"ContentHash,omitempty"`
	CreateTime     *int64                                           `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Hash           *string                                          `json:"Hash,omitempty" xml:"Hash,omitempty"`
	KeyName        *string                                          `json:"KeyName,omitempty" xml:"KeyName,omitempty"`
	KeyWrap        *string                                          `json:"KeyWrap,omitempty" xml:"KeyWrap,omitempty"`
	Nonce          *string                                          `json:"Nonce,omitempty" xml:"Nonce,omitempty"`
	ReferenceCount *int32                                           `json:"ReferenceCount,omitempty" xml:"ReferenceCount,omitempty"`
	ReferenceList  *QueryTransactionResponseBodyResultReferenceList `json:"ReferenceList,omitempty" xml:"ReferenceList,omitempty" type:"Struct"`
	Type           *int32                                           `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTransactionResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s QueryTransactionResponseBodyResult) GoString() string {
	return s.String()
}

func (s *QueryTransactionResponseBodyResult) SetBlockHeight(v int64) *QueryTransactionResponseBodyResult {
	s.BlockHeight = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetBlockVersion(v int32) *QueryTransactionResponseBodyResult {
	s.BlockVersion = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetCategory(v int32) *QueryTransactionResponseBodyResult {
	s.Category = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetContent(v string) *QueryTransactionResponseBodyResult {
	s.Content = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetContentHash(v string) *QueryTransactionResponseBodyResult {
	s.ContentHash = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetCreateTime(v int64) *QueryTransactionResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetHash(v string) *QueryTransactionResponseBodyResult {
	s.Hash = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetKeyName(v string) *QueryTransactionResponseBodyResult {
	s.KeyName = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetKeyWrap(v string) *QueryTransactionResponseBodyResult {
	s.KeyWrap = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetNonce(v string) *QueryTransactionResponseBodyResult {
	s.Nonce = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetReferenceCount(v int32) *QueryTransactionResponseBodyResult {
	s.ReferenceCount = &v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetReferenceList(v *QueryTransactionResponseBodyResultReferenceList) *QueryTransactionResponseBodyResult {
	s.ReferenceList = v
	return s
}

func (s *QueryTransactionResponseBodyResult) SetType(v int32) *QueryTransactionResponseBodyResult {
	s.Type = &v
	return s
}

type QueryTransactionResponseBodyResultReferenceList struct {
	Data   *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Length *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Type   *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s QueryTransactionResponseBodyResultReferenceList) String() string {
	return tea.Prettify(s)
}

func (s QueryTransactionResponseBodyResultReferenceList) GoString() string {
	return s.String()
}

func (s *QueryTransactionResponseBodyResultReferenceList) SetData(v string) *QueryTransactionResponseBodyResultReferenceList {
	s.Data = &v
	return s
}

func (s *QueryTransactionResponseBodyResultReferenceList) SetLength(v int32) *QueryTransactionResponseBodyResultReferenceList {
	s.Length = &v
	return s
}

func (s *QueryTransactionResponseBodyResultReferenceList) SetType(v int32) *QueryTransactionResponseBodyResultReferenceList {
	s.Type = &v
	return s
}

type QueryTransactionResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *QueryTransactionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s QueryTransactionResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTransactionResponse) GoString() string {
	return s.String()
}

func (s *QueryTransactionResponse) SetHeaders(v map[string]*string) *QueryTransactionResponse {
	s.Headers = v
	return s
}

func (s *QueryTransactionResponse) SetStatusCode(v int32) *QueryTransactionResponse {
	s.StatusCode = &v
	return s
}

func (s *QueryTransactionResponse) SetBody(v *QueryTransactionResponseBody) *QueryTransactionResponse {
	s.Body = v
	return s
}

type RejectUserRequest struct {
	Bid      *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Reason   *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	UserName *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s RejectUserRequest) String() string {
	return tea.Prettify(s)
}

func (s RejectUserRequest) GoString() string {
	return s.String()
}

func (s *RejectUserRequest) SetBid(v string) *RejectUserRequest {
	s.Bid = &v
	return s
}

func (s *RejectUserRequest) SetBizid(v string) *RejectUserRequest {
	s.Bizid = &v
	return s
}

func (s *RejectUserRequest) SetReason(v string) *RejectUserRequest {
	s.Reason = &v
	return s
}

func (s *RejectUserRequest) SetUserName(v string) *RejectUserRequest {
	s.UserName = &v
	return s
}

type RejectUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s RejectUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RejectUserResponseBody) GoString() string {
	return s.String()
}

func (s *RejectUserResponseBody) SetRequestId(v string) *RejectUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *RejectUserResponseBody) SetResult(v string) *RejectUserResponseBody {
	s.Result = &v
	return s
}

type RejectUserResponse struct {
	Headers    map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                  `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RejectUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RejectUserResponse) String() string {
	return tea.Prettify(s)
}

func (s RejectUserResponse) GoString() string {
	return s.String()
}

func (s *RejectUserResponse) SetHeaders(v map[string]*string) *RejectUserResponse {
	s.Headers = v
	return s
}

func (s *RejectUserResponse) SetStatusCode(v int32) *RejectUserResponse {
	s.StatusCode = &v
	return s
}

func (s *RejectUserResponse) SetBody(v *RejectUserResponseBody) *RejectUserResponse {
	s.Body = v
	return s
}

type RenameBlockchainRequest struct {
	Bizid   *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	NewName *string `json:"NewName,omitempty" xml:"NewName,omitempty"`
}

func (s RenameBlockchainRequest) String() string {
	return tea.Prettify(s)
}

func (s RenameBlockchainRequest) GoString() string {
	return s.String()
}

func (s *RenameBlockchainRequest) SetBizid(v string) *RenameBlockchainRequest {
	s.Bizid = &v
	return s
}

func (s *RenameBlockchainRequest) SetNewName(v string) *RenameBlockchainRequest {
	s.NewName = &v
	return s
}

type RenameBlockchainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s RenameBlockchainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RenameBlockchainResponseBody) GoString() string {
	return s.String()
}

func (s *RenameBlockchainResponseBody) SetRequestId(v string) *RenameBlockchainResponseBody {
	s.RequestId = &v
	return s
}

func (s *RenameBlockchainResponseBody) SetResult(v string) *RenameBlockchainResponseBody {
	s.Result = &v
	return s
}

type RenameBlockchainResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *RenameBlockchainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s RenameBlockchainResponse) String() string {
	return tea.Prettify(s)
}

func (s RenameBlockchainResponse) GoString() string {
	return s.String()
}

func (s *RenameBlockchainResponse) SetHeaders(v map[string]*string) *RenameBlockchainResponse {
	s.Headers = v
	return s
}

func (s *RenameBlockchainResponse) SetStatusCode(v int32) *RenameBlockchainResponse {
	s.StatusCode = &v
	return s
}

func (s *RenameBlockchainResponse) SetBody(v *RenameBlockchainResponseBody) *RenameBlockchainResponse {
	s.Body = v
	return s
}

type ResetAntChainCertificateRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s ResetAntChainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAntChainCertificateRequest) GoString() string {
	return s.String()
}

func (s *ResetAntChainCertificateRequest) SetAntChainId(v string) *ResetAntChainCertificateRequest {
	s.AntChainId = &v
	return s
}

type ResetAntChainCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ResetAntChainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAntChainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAntChainCertificateResponseBody) SetRequestId(v string) *ResetAntChainCertificateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetAntChainCertificateResponseBody) SetResult(v string) *ResetAntChainCertificateResponseBody {
	s.Result = &v
	return s
}

type ResetAntChainCertificateResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetAntChainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetAntChainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAntChainCertificateResponse) GoString() string {
	return s.String()
}

func (s *ResetAntChainCertificateResponse) SetHeaders(v map[string]*string) *ResetAntChainCertificateResponse {
	s.Headers = v
	return s
}

func (s *ResetAntChainCertificateResponse) SetStatusCode(v int32) *ResetAntChainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAntChainCertificateResponse) SetBody(v *ResetAntChainCertificateResponseBody) *ResetAntChainCertificateResponse {
	s.Body = v
	return s
}

type ResetAntChainUserCertificateRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	Bid *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	// This parameter is required.
	Operation *int32 `json:"Operation,omitempty" xml:"Operation,omitempty"`
	// This parameter is required.
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s ResetAntChainUserCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetAntChainUserCertificateRequest) GoString() string {
	return s.String()
}

func (s *ResetAntChainUserCertificateRequest) SetAntChainId(v string) *ResetAntChainUserCertificateRequest {
	s.AntChainId = &v
	return s
}

func (s *ResetAntChainUserCertificateRequest) SetBid(v string) *ResetAntChainUserCertificateRequest {
	s.Bid = &v
	return s
}

func (s *ResetAntChainUserCertificateRequest) SetOperation(v int32) *ResetAntChainUserCertificateRequest {
	s.Operation = &v
	return s
}

func (s *ResetAntChainUserCertificateRequest) SetUsername(v string) *ResetAntChainUserCertificateRequest {
	s.Username = &v
	return s
}

type ResetAntChainUserCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ResetAntChainUserCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetAntChainUserCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *ResetAntChainUserCertificateResponseBody) SetRequestId(v string) *ResetAntChainUserCertificateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetAntChainUserCertificateResponseBody) SetResult(v string) *ResetAntChainUserCertificateResponseBody {
	s.Result = &v
	return s
}

type ResetAntChainUserCertificateResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetAntChainUserCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetAntChainUserCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetAntChainUserCertificateResponse) GoString() string {
	return s.String()
}

func (s *ResetAntChainUserCertificateResponse) SetHeaders(v map[string]*string) *ResetAntChainUserCertificateResponse {
	s.Headers = v
	return s
}

func (s *ResetAntChainUserCertificateResponse) SetStatusCode(v int32) *ResetAntChainUserCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetAntChainUserCertificateResponse) SetBody(v *ResetAntChainUserCertificateResponseBody) *ResetAntChainUserCertificateResponse {
	s.Body = v
	return s
}

type ResetCertificateRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s ResetCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetCertificateRequest) GoString() string {
	return s.String()
}

func (s *ResetCertificateRequest) SetBizid(v string) *ResetCertificateRequest {
	s.Bizid = &v
	return s
}

type ResetCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ResetCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *ResetCertificateResponseBody) SetRequestId(v string) *ResetCertificateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetCertificateResponseBody) SetResult(v string) *ResetCertificateResponseBody {
	s.Result = &v
	return s
}

type ResetCertificateResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetCertificateResponse) GoString() string {
	return s.String()
}

func (s *ResetCertificateResponse) SetHeaders(v map[string]*string) *ResetCertificateResponse {
	s.Headers = v
	return s
}

func (s *ResetCertificateResponse) SetStatusCode(v int32) *ResetCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetCertificateResponse) SetBody(v *ResetCertificateResponseBody) *ResetCertificateResponse {
	s.Body = v
	return s
}

type ResetOrganizationUserPasswordRequest struct {
	// example:
	//
	// username
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// password
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// username
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s ResetOrganizationUserPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetOrganizationUserPasswordRequest) GoString() string {
	return s.String()
}

func (s *ResetOrganizationUserPasswordRequest) SetLocation(v string) *ResetOrganizationUserPasswordRequest {
	s.Location = &v
	return s
}

func (s *ResetOrganizationUserPasswordRequest) SetOrganizationId(v string) *ResetOrganizationUserPasswordRequest {
	s.OrganizationId = &v
	return s
}

func (s *ResetOrganizationUserPasswordRequest) SetPassword(v string) *ResetOrganizationUserPasswordRequest {
	s.Password = &v
	return s
}

func (s *ResetOrganizationUserPasswordRequest) SetUsername(v string) *ResetOrganizationUserPasswordRequest {
	s.Username = &v
	return s
}

type ResetOrganizationUserPasswordResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *ResetOrganizationUserPasswordResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ResetOrganizationUserPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetOrganizationUserPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *ResetOrganizationUserPasswordResponseBody) SetErrorCode(v int32) *ResetOrganizationUserPasswordResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *ResetOrganizationUserPasswordResponseBody) SetRequestId(v string) *ResetOrganizationUserPasswordResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetOrganizationUserPasswordResponseBody) SetResult(v *ResetOrganizationUserPasswordResponseBodyResult) *ResetOrganizationUserPasswordResponseBody {
	s.Result = v
	return s
}

func (s *ResetOrganizationUserPasswordResponseBody) SetSuccess(v bool) *ResetOrganizationUserPasswordResponseBody {
	s.Success = &v
	return s
}

type ResetOrganizationUserPasswordResponseBodyResult struct {
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1533025590
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// example:
	//
	// username
	Fullname *string `json:"Fullname,omitempty" xml:"Fullname,omitempty"`
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// example:
	//
	// password
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// example:
	//
	// username
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s ResetOrganizationUserPasswordResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s ResetOrganizationUserPasswordResponseBodyResult) GoString() string {
	return s.String()
}

func (s *ResetOrganizationUserPasswordResponseBodyResult) SetCreateTime(v string) *ResetOrganizationUserPasswordResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *ResetOrganizationUserPasswordResponseBodyResult) SetExpireTime(v string) *ResetOrganizationUserPasswordResponseBodyResult {
	s.ExpireTime = &v
	return s
}

func (s *ResetOrganizationUserPasswordResponseBodyResult) SetFullname(v string) *ResetOrganizationUserPasswordResponseBodyResult {
	s.Fullname = &v
	return s
}

func (s *ResetOrganizationUserPasswordResponseBodyResult) SetOrganizationId(v string) *ResetOrganizationUserPasswordResponseBodyResult {
	s.OrganizationId = &v
	return s
}

func (s *ResetOrganizationUserPasswordResponseBodyResult) SetPassword(v string) *ResetOrganizationUserPasswordResponseBodyResult {
	s.Password = &v
	return s
}

func (s *ResetOrganizationUserPasswordResponseBodyResult) SetUsername(v string) *ResetOrganizationUserPasswordResponseBodyResult {
	s.Username = &v
	return s
}

type ResetOrganizationUserPasswordResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetOrganizationUserPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetOrganizationUserPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetOrganizationUserPasswordResponse) GoString() string {
	return s.String()
}

func (s *ResetOrganizationUserPasswordResponse) SetHeaders(v map[string]*string) *ResetOrganizationUserPasswordResponse {
	s.Headers = v
	return s
}

func (s *ResetOrganizationUserPasswordResponse) SetStatusCode(v int32) *ResetOrganizationUserPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetOrganizationUserPasswordResponse) SetBody(v *ResetOrganizationUserPasswordResponseBody) *ResetOrganizationUserPasswordResponse {
	s.Body = v
	return s
}

type ResetPublicAntChainCertificateRequest struct {
	Bizid *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s ResetPublicAntChainCertificateRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetPublicAntChainCertificateRequest) GoString() string {
	return s.String()
}

func (s *ResetPublicAntChainCertificateRequest) SetBizid(v string) *ResetPublicAntChainCertificateRequest {
	s.Bizid = &v
	return s
}

type ResetPublicAntChainCertificateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ResetPublicAntChainCertificateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetPublicAntChainCertificateResponseBody) GoString() string {
	return s.String()
}

func (s *ResetPublicAntChainCertificateResponseBody) SetRequestId(v string) *ResetPublicAntChainCertificateResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetPublicAntChainCertificateResponseBody) SetResult(v string) *ResetPublicAntChainCertificateResponseBody {
	s.Result = &v
	return s
}

type ResetPublicAntChainCertificateResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetPublicAntChainCertificateResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetPublicAntChainCertificateResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetPublicAntChainCertificateResponse) GoString() string {
	return s.String()
}

func (s *ResetPublicAntChainCertificateResponse) SetHeaders(v map[string]*string) *ResetPublicAntChainCertificateResponse {
	s.Headers = v
	return s
}

func (s *ResetPublicAntChainCertificateResponse) SetStatusCode(v int32) *ResetPublicAntChainCertificateResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetPublicAntChainCertificateResponse) SetBody(v *ResetPublicAntChainCertificateResponseBody) *ResetPublicAntChainCertificateResponse {
	s.Body = v
	return s
}

type ResetUserRequest struct {
	Bid       *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Bizid     *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Operation *int32  `json:"Operation,omitempty" xml:"Operation,omitempty"`
	UserName  *string `json:"UserName,omitempty" xml:"UserName,omitempty"`
}

func (s ResetUserRequest) String() string {
	return tea.Prettify(s)
}

func (s ResetUserRequest) GoString() string {
	return s.String()
}

func (s *ResetUserRequest) SetBid(v string) *ResetUserRequest {
	s.Bid = &v
	return s
}

func (s *ResetUserRequest) SetBizid(v string) *ResetUserRequest {
	s.Bizid = &v
	return s
}

func (s *ResetUserRequest) SetOperation(v int32) *ResetUserRequest {
	s.Operation = &v
	return s
}

func (s *ResetUserRequest) SetUserName(v string) *ResetUserRequest {
	s.UserName = &v
	return s
}

type ResetUserResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s ResetUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ResetUserResponseBody) GoString() string {
	return s.String()
}

func (s *ResetUserResponseBody) SetRequestId(v string) *ResetUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *ResetUserResponseBody) SetResult(v string) *ResetUserResponseBody {
	s.Result = &v
	return s
}

type ResetUserResponse struct {
	Headers    map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *ResetUserResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s ResetUserResponse) String() string {
	return tea.Prettify(s)
}

func (s ResetUserResponse) GoString() string {
	return s.String()
}

func (s *ResetUserResponse) SetHeaders(v map[string]*string) *ResetUserResponse {
	s.Headers = v
	return s
}

func (s *ResetUserResponse) SetStatusCode(v int32) *ResetUserResponse {
	s.StatusCode = &v
	return s
}

func (s *ResetUserResponse) SetBody(v *ResetUserResponseBody) *ResetUserResponse {
	s.Body = v
	return s
}

type SchemaDetailRequest struct {
	Bizid    *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	SchemaId *int64  `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
}

func (s SchemaDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailRequest) GoString() string {
	return s.String()
}

func (s *SchemaDetailRequest) SetBizid(v string) *SchemaDetailRequest {
	s.Bizid = &v
	return s
}

func (s *SchemaDetailRequest) SetSchemaId(v int64) *SchemaDetailRequest {
	s.SchemaId = &v
	return s
}

type SchemaDetailResponseBody struct {
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *SchemaDetailResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s SchemaDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailResponseBody) GoString() string {
	return s.String()
}

func (s *SchemaDetailResponseBody) SetRequestId(v string) *SchemaDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *SchemaDetailResponseBody) SetResult(v *SchemaDetailResponseBodyResult) *SchemaDetailResponseBody {
	s.Result = v
	return s
}

type SchemaDetailResponseBodyResult struct {
	Responses []*SchemaDetailResponseBodyResultResponses `json:"Responses,omitempty" xml:"Responses,omitempty" type:"Repeated"`
	Schema    *SchemaDetailResponseBodyResultSchema      `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
}

func (s SchemaDetailResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailResponseBodyResult) GoString() string {
	return s.String()
}

func (s *SchemaDetailResponseBodyResult) SetResponses(v []*SchemaDetailResponseBodyResultResponses) *SchemaDetailResponseBodyResult {
	s.Responses = v
	return s
}

func (s *SchemaDetailResponseBodyResult) SetSchema(v *SchemaDetailResponseBodyResultSchema) *SchemaDetailResponseBodyResult {
	s.Schema = v
	return s
}

type SchemaDetailResponseBodyResultResponses struct {
	Category     *string                                            `json:"Category,omitempty" xml:"Category,omitempty"`
	CategoryName *string                                            `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Description  *string                                            `json:"Description,omitempty" xml:"Description,omitempty"`
	Properties   *SchemaDetailResponseBodyResultResponsesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s SchemaDetailResponseBodyResultResponses) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailResponseBodyResultResponses) GoString() string {
	return s.String()
}

func (s *SchemaDetailResponseBodyResultResponses) SetCategory(v string) *SchemaDetailResponseBodyResultResponses {
	s.Category = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponses) SetCategoryName(v string) *SchemaDetailResponseBodyResultResponses {
	s.CategoryName = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponses) SetDescription(v string) *SchemaDetailResponseBodyResultResponses {
	s.Description = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponses) SetProperties(v *SchemaDetailResponseBodyResultResponsesProperties) *SchemaDetailResponseBodyResultResponses {
	s.Properties = v
	return s
}

type SchemaDetailResponseBodyResultResponsesProperties struct {
	Count      *int32                                                         `json:"Count,omitempty" xml:"Count,omitempty"`
	DataSource []*SchemaDetailResponseBodyResultResponsesPropertiesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s SchemaDetailResponseBodyResultResponsesProperties) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailResponseBodyResultResponsesProperties) GoString() string {
	return s.String()
}

func (s *SchemaDetailResponseBodyResultResponsesProperties) SetCount(v int32) *SchemaDetailResponseBodyResultResponsesProperties {
	s.Count = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponsesProperties) SetDataSource(v []*SchemaDetailResponseBodyResultResponsesPropertiesDataSource) *SchemaDetailResponseBodyResultResponsesProperties {
	s.DataSource = v
	return s
}

type SchemaDetailResponseBodyResultResponsesPropertiesDataSource struct {
	AllowNull  *int32  `json:"AllowNull,omitempty" xml:"AllowNull,omitempty"`
	Annotation *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Indexes    *int32  `json:"Indexes,omitempty" xml:"Indexes,omitempty"`
	Key        *int32  `json:"Key,omitempty" xml:"Key,omitempty"`
	Length     *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reg        *string `json:"Reg,omitempty" xml:"Reg,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s SchemaDetailResponseBodyResultResponsesPropertiesDataSource) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailResponseBodyResultResponsesPropertiesDataSource) GoString() string {
	return s.String()
}

func (s *SchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetAllowNull(v int32) *SchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.AllowNull = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetAnnotation(v string) *SchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Annotation = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetField(v string) *SchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Field = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetIndexes(v int32) *SchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Indexes = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetKey(v int32) *SchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Key = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetLength(v int32) *SchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Length = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetReg(v string) *SchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Reg = &v
	return s
}

func (s *SchemaDetailResponseBodyResultResponsesPropertiesDataSource) SetType(v string) *SchemaDetailResponseBodyResultResponsesPropertiesDataSource {
	s.Type = &v
	return s
}

type SchemaDetailResponseBodyResultSchema struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *bool   `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s SchemaDetailResponseBodyResultSchema) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailResponseBodyResultSchema) GoString() string {
	return s.String()
}

func (s *SchemaDetailResponseBodyResultSchema) SetCreateTime(v int64) *SchemaDetailResponseBodyResultSchema {
	s.CreateTime = &v
	return s
}

func (s *SchemaDetailResponseBodyResultSchema) SetDescription(v string) *SchemaDetailResponseBodyResultSchema {
	s.Description = &v
	return s
}

func (s *SchemaDetailResponseBodyResultSchema) SetId(v int64) *SchemaDetailResponseBodyResultSchema {
	s.Id = &v
	return s
}

func (s *SchemaDetailResponseBodyResultSchema) SetIsTemplate(v bool) *SchemaDetailResponseBodyResultSchema {
	s.IsTemplate = &v
	return s
}

func (s *SchemaDetailResponseBodyResultSchema) SetName(v string) *SchemaDetailResponseBodyResultSchema {
	s.Name = &v
	return s
}

func (s *SchemaDetailResponseBodyResultSchema) SetUpdateTime(v int64) *SchemaDetailResponseBodyResultSchema {
	s.UpdateTime = &v
	return s
}

func (s *SchemaDetailResponseBodyResultSchema) SetVersion(v int64) *SchemaDetailResponseBodyResultSchema {
	s.Version = &v
	return s
}

type SchemaDetailResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SchemaDetailResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SchemaDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s SchemaDetailResponse) GoString() string {
	return s.String()
}

func (s *SchemaDetailResponse) SetHeaders(v map[string]*string) *SchemaDetailResponse {
	s.Headers = v
	return s
}

func (s *SchemaDetailResponse) SetStatusCode(v int32) *SchemaDetailResponse {
	s.StatusCode = &v
	return s
}

func (s *SchemaDetailResponse) SetBody(v *SchemaDetailResponseBody) *SchemaDetailResponse {
	s.Body = v
	return s
}

type StartSmartContractJobRequest struct {
	// This parameter is required.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// This parameter is required.
	JobName   *string `json:"JobName,omitempty" xml:"JobName,omitempty"`
	SourceOpt *string `json:"SourceOpt,omitempty" xml:"SourceOpt,omitempty"`
	// This parameter is required.
	SourceType *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
}

func (s StartSmartContractJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StartSmartContractJobRequest) GoString() string {
	return s.String()
}

func (s *StartSmartContractJobRequest) SetJobId(v string) *StartSmartContractJobRequest {
	s.JobId = &v
	return s
}

func (s *StartSmartContractJobRequest) SetJobName(v string) *StartSmartContractJobRequest {
	s.JobName = &v
	return s
}

func (s *StartSmartContractJobRequest) SetSourceOpt(v string) *StartSmartContractJobRequest {
	s.SourceOpt = &v
	return s
}

func (s *StartSmartContractJobRequest) SetSourceType(v string) *StartSmartContractJobRequest {
	s.SourceType = &v
	return s
}

type StartSmartContractJobResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StartSmartContractJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StartSmartContractJobResponseBody) GoString() string {
	return s.String()
}

func (s *StartSmartContractJobResponseBody) SetErrorCode(v int32) *StartSmartContractJobResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *StartSmartContractJobResponseBody) SetRequestId(v string) *StartSmartContractJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StartSmartContractJobResponseBody) SetResult(v string) *StartSmartContractJobResponseBody {
	s.Result = &v
	return s
}

func (s *StartSmartContractJobResponseBody) SetSuccess(v bool) *StartSmartContractJobResponseBody {
	s.Success = &v
	return s
}

type StartSmartContractJobResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *StartSmartContractJobResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s StartSmartContractJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StartSmartContractJobResponse) GoString() string {
	return s.String()
}

func (s *StartSmartContractJobResponse) SetHeaders(v map[string]*string) *StartSmartContractJobResponse {
	s.Headers = v
	return s
}

func (s *StartSmartContractJobResponse) SetStatusCode(v int32) *StartSmartContractJobResponse {
	s.StatusCode = &v
	return s
}

func (s *StartSmartContractJobResponse) SetBody(v *StartSmartContractJobResponseBody) *StartSmartContractJobResponse {
	s.Body = v
	return s
}

type SubmitFabricChaincodeDefinitionRequest struct {
	// This parameter is required.
	ChaincodePackageId *string `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	// This parameter is required.
	ChaincodeVersion *string `json:"ChaincodeVersion,omitempty" xml:"ChaincodeVersion,omitempty"`
	// This parameter is required.
	ChannelId        *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	CollectionConfig *string `json:"CollectionConfig,omitempty" xml:"CollectionConfig,omitempty"`
	EndorsePolicy    *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	InitRequired     *bool   `json:"InitRequired,omitempty" xml:"InitRequired,omitempty"`
	Location         *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s SubmitFabricChaincodeDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFabricChaincodeDefinitionRequest) GoString() string {
	return s.String()
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetChaincodePackageId(v string) *SubmitFabricChaincodeDefinitionRequest {
	s.ChaincodePackageId = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetChaincodeVersion(v string) *SubmitFabricChaincodeDefinitionRequest {
	s.ChaincodeVersion = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetChannelId(v string) *SubmitFabricChaincodeDefinitionRequest {
	s.ChannelId = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetCollectionConfig(v string) *SubmitFabricChaincodeDefinitionRequest {
	s.CollectionConfig = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetEndorsePolicy(v string) *SubmitFabricChaincodeDefinitionRequest {
	s.EndorsePolicy = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetInitRequired(v bool) *SubmitFabricChaincodeDefinitionRequest {
	s.InitRequired = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetLocation(v string) *SubmitFabricChaincodeDefinitionRequest {
	s.Location = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetName(v string) *SubmitFabricChaincodeDefinitionRequest {
	s.Name = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionRequest) SetOrganizationId(v string) *SubmitFabricChaincodeDefinitionRequest {
	s.OrganizationId = &v
	return s
}

type SubmitFabricChaincodeDefinitionResponseBody struct {
	ChaincodeDefinitionId *string                                            `json:"ChaincodeDefinitionId,omitempty" xml:"ChaincodeDefinitionId,omitempty"`
	ChaincodePackageId    *string                                            `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	ErrorCode             *int32                                             `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	InitRequired          *bool                                              `json:"InitRequired,omitempty" xml:"InitRequired,omitempty"`
	RequestId             *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result                *SubmitFabricChaincodeDefinitionResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success               *bool                                              `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SubmitFabricChaincodeDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFabricChaincodeDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFabricChaincodeDefinitionResponseBody) SetChaincodeDefinitionId(v string) *SubmitFabricChaincodeDefinitionResponseBody {
	s.ChaincodeDefinitionId = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBody) SetChaincodePackageId(v string) *SubmitFabricChaincodeDefinitionResponseBody {
	s.ChaincodePackageId = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBody) SetErrorCode(v int32) *SubmitFabricChaincodeDefinitionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBody) SetInitRequired(v bool) *SubmitFabricChaincodeDefinitionResponseBody {
	s.InitRequired = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBody) SetRequestId(v string) *SubmitFabricChaincodeDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBody) SetResult(v *SubmitFabricChaincodeDefinitionResponseBodyResult) *SubmitFabricChaincodeDefinitionResponseBody {
	s.Result = v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBody) SetSuccess(v bool) *SubmitFabricChaincodeDefinitionResponseBody {
	s.Success = &v
	return s
}

type SubmitFabricChaincodeDefinitionResponseBodyResult struct {
	ChaincodeId   *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	ChannelName   *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ConsortiumId  *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	CreateTime    *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeployTime    *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	Input         *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Install       *bool   `json:"Install,omitempty" xml:"Install,omitempty"`
	Message       *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Name          *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path          *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ProviderId    *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	ProviderName  *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	State         *string `json:"State,omitempty" xml:"State,omitempty"`
	Type          *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version       *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s SubmitFabricChaincodeDefinitionResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitFabricChaincodeDefinitionResponseBodyResult) GoString() string {
	return s.String()
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetChaincodeId(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetChannelName(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetConsortiumId(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetCreateTime(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetDeployTime(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetEndorsePolicy(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetInput(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.Input = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetInstall(v bool) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.Install = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetMessage(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.Message = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetName(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.Name = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetPath(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.Path = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetProviderId(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetProviderName(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetState(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.State = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetType(v int32) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.Type = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponseBodyResult) SetVersion(v string) *SubmitFabricChaincodeDefinitionResponseBodyResult {
	s.Version = &v
	return s
}

type SubmitFabricChaincodeDefinitionResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SubmitFabricChaincodeDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SubmitFabricChaincodeDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFabricChaincodeDefinitionResponse) GoString() string {
	return s.String()
}

func (s *SubmitFabricChaincodeDefinitionResponse) SetHeaders(v map[string]*string) *SubmitFabricChaincodeDefinitionResponse {
	s.Headers = v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponse) SetStatusCode(v int32) *SubmitFabricChaincodeDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *SubmitFabricChaincodeDefinitionResponse) SetBody(v *SubmitFabricChaincodeDefinitionResponseBody) *SubmitFabricChaincodeDefinitionResponse {
	s.Body = v
	return s
}

type SyncFabricChaincodeStatusRequest struct {
	// This parameter is required.
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s SyncFabricChaincodeStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncFabricChaincodeStatusRequest) GoString() string {
	return s.String()
}

func (s *SyncFabricChaincodeStatusRequest) SetChaincodeId(v string) *SyncFabricChaincodeStatusRequest {
	s.ChaincodeId = &v
	return s
}

func (s *SyncFabricChaincodeStatusRequest) SetOrganizationId(v string) *SyncFabricChaincodeStatusRequest {
	s.OrganizationId = &v
	return s
}

type SyncFabricChaincodeStatusResponseBody struct {
	ErrorCode *int32                                       `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *SyncFabricChaincodeStatusResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                        `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SyncFabricChaincodeStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SyncFabricChaincodeStatusResponseBody) GoString() string {
	return s.String()
}

func (s *SyncFabricChaincodeStatusResponseBody) SetErrorCode(v int32) *SyncFabricChaincodeStatusResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBody) SetRequestId(v string) *SyncFabricChaincodeStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBody) SetResult(v *SyncFabricChaincodeStatusResponseBodyResult) *SyncFabricChaincodeStatusResponseBody {
	s.Result = v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBody) SetSuccess(v bool) *SyncFabricChaincodeStatusResponseBody {
	s.Success = &v
	return s
}

type SyncFabricChaincodeStatusResponseBodyResult struct {
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	Input       *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path        *int64  `json:"Path,omitempty" xml:"Path,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
	Type        *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version     *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s SyncFabricChaincodeStatusResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s SyncFabricChaincodeStatusResponseBodyResult) GoString() string {
	return s.String()
}

func (s *SyncFabricChaincodeStatusResponseBodyResult) SetChaincodeId(v string) *SyncFabricChaincodeStatusResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBodyResult) SetInput(v string) *SyncFabricChaincodeStatusResponseBodyResult {
	s.Input = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBodyResult) SetName(v string) *SyncFabricChaincodeStatusResponseBodyResult {
	s.Name = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBodyResult) SetPath(v int64) *SyncFabricChaincodeStatusResponseBodyResult {
	s.Path = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBodyResult) SetState(v string) *SyncFabricChaincodeStatusResponseBodyResult {
	s.State = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBodyResult) SetType(v int32) *SyncFabricChaincodeStatusResponseBodyResult {
	s.Type = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponseBodyResult) SetVersion(v string) *SyncFabricChaincodeStatusResponseBodyResult {
	s.Version = &v
	return s
}

type SyncFabricChaincodeStatusResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SyncFabricChaincodeStatusResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SyncFabricChaincodeStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncFabricChaincodeStatusResponse) GoString() string {
	return s.String()
}

func (s *SyncFabricChaincodeStatusResponse) SetHeaders(v map[string]*string) *SyncFabricChaincodeStatusResponse {
	s.Headers = v
	return s
}

func (s *SyncFabricChaincodeStatusResponse) SetStatusCode(v int32) *SyncFabricChaincodeStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *SyncFabricChaincodeStatusResponse) SetBody(v *SyncFabricChaincodeStatusResponseBody) *SyncFabricChaincodeStatusResponse {
	s.Body = v
	return s
}

type SynchronizeChaincodeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// code-sacc-1pr09q7jm****
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-aaaaaa2-1eqnj5o5w****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s SynchronizeChaincodeRequest) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeChaincodeRequest) GoString() string {
	return s.String()
}

func (s *SynchronizeChaincodeRequest) SetChaincodeId(v string) *SynchronizeChaincodeRequest {
	s.ChaincodeId = &v
	return s
}

func (s *SynchronizeChaincodeRequest) SetOrganizationId(v string) *SynchronizeChaincodeRequest {
	s.OrganizationId = &v
	return s
}

type SynchronizeChaincodeResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// 1890FA4F-067A-4CE9-AC9B-2BD2E58FB5D3
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *SynchronizeChaincodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SynchronizeChaincodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeChaincodeResponseBody) GoString() string {
	return s.String()
}

func (s *SynchronizeChaincodeResponseBody) SetErrorCode(v int32) *SynchronizeChaincodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *SynchronizeChaincodeResponseBody) SetRequestId(v string) *SynchronizeChaincodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *SynchronizeChaincodeResponseBody) SetResult(v *SynchronizeChaincodeResponseBodyResult) *SynchronizeChaincodeResponseBody {
	s.Result = v
	return s
}

func (s *SynchronizeChaincodeResponseBody) SetSuccess(v bool) *SynchronizeChaincodeResponseBody {
	s.Success = &v
	return s
}

type SynchronizeChaincodeResponseBodyResult struct {
	// example:
	//
	// code-sacc-1pr09q7jm****
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// chan-channelx-1l1hmckuuisxo
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// example:
	//
	// consortium-lianmenyumingyi-hc5d1bwl****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1533025590
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1533025590
	DeployTime *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	// example:
	//
	// OR (\\"aaaaaa1MSP.peer\\")
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// input
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// false
	Install *bool `json:"Install,omitempty" xml:"Install,omitempty"`
	// example:
	//
	// ok
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// sacc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// go-sdk-demo/chaincode/src
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// provider
	ProviderId *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	// example:
	//
	// name
	ProviderName *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s SynchronizeChaincodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeChaincodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *SynchronizeChaincodeResponseBodyResult) SetChaincodeId(v string) *SynchronizeChaincodeResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetChannelName(v string) *SynchronizeChaincodeResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetConsortiumId(v string) *SynchronizeChaincodeResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetCreateTime(v string) *SynchronizeChaincodeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetDeployTime(v string) *SynchronizeChaincodeResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetEndorsePolicy(v string) *SynchronizeChaincodeResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetInput(v string) *SynchronizeChaincodeResponseBodyResult {
	s.Input = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetInstall(v bool) *SynchronizeChaincodeResponseBodyResult {
	s.Install = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetMessage(v string) *SynchronizeChaincodeResponseBodyResult {
	s.Message = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetName(v string) *SynchronizeChaincodeResponseBodyResult {
	s.Name = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetPath(v string) *SynchronizeChaincodeResponseBodyResult {
	s.Path = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetProviderId(v string) *SynchronizeChaincodeResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetProviderName(v string) *SynchronizeChaincodeResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetState(v string) *SynchronizeChaincodeResponseBodyResult {
	s.State = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetType(v int32) *SynchronizeChaincodeResponseBodyResult {
	s.Type = &v
	return s
}

func (s *SynchronizeChaincodeResponseBodyResult) SetVersion(v string) *SynchronizeChaincodeResponseBodyResult {
	s.Version = &v
	return s
}

type SynchronizeChaincodeResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *SynchronizeChaincodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s SynchronizeChaincodeResponse) String() string {
	return tea.Prettify(s)
}

func (s SynchronizeChaincodeResponse) GoString() string {
	return s.String()
}

func (s *SynchronizeChaincodeResponse) SetHeaders(v map[string]*string) *SynchronizeChaincodeResponse {
	s.Headers = v
	return s
}

func (s *SynchronizeChaincodeResponse) SetStatusCode(v int32) *SynchronizeChaincodeResponse {
	s.StatusCode = &v
	return s
}

func (s *SynchronizeChaincodeResponse) SetBody(v *SynchronizeChaincodeResponseBody) *SynchronizeChaincodeResponse {
	s.Body = v
	return s
}

type TagResourcesRequest struct {
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// This parameter is required.
	ResourceType *string                   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Tag          []*TagResourcesRequestTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s TagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequest) GoString() string {
	return s.String()
}

func (s *TagResourcesRequest) SetResourceId(v []*string) *TagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *TagResourcesRequest) SetResourceType(v string) *TagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *TagResourcesRequest) SetTag(v []*TagResourcesRequestTag) *TagResourcesRequest {
	s.Tag = v
	return s
}

type TagResourcesRequestTag struct {
	Key   *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Value *string `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s TagResourcesRequestTag) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesRequestTag) GoString() string {
	return s.String()
}

func (s *TagResourcesRequestTag) SetKey(v string) *TagResourcesRequestTag {
	s.Key = &v
	return s
}

func (s *TagResourcesRequestTag) SetValue(v string) *TagResourcesRequestTag {
	s.Value = &v
	return s
}

type TagResourcesResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s TagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *TagResourcesResponseBody) SetErrorCode(v int32) *TagResourcesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *TagResourcesResponseBody) SetRequestId(v string) *TagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *TagResourcesResponseBody) SetResult(v bool) *TagResourcesResponseBody {
	s.Result = &v
	return s
}

func (s *TagResourcesResponseBody) SetSuccess(v bool) *TagResourcesResponseBody {
	s.Success = &v
	return s
}

type TagResourcesResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *TagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s TagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s TagResourcesResponse) GoString() string {
	return s.String()
}

func (s *TagResourcesResponse) SetHeaders(v map[string]*string) *TagResourcesResponse {
	s.Headers = v
	return s
}

func (s *TagResourcesResponse) SetStatusCode(v int32) *TagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *TagResourcesResponse) SetBody(v *TagResourcesResponseBody) *TagResourcesResponse {
	s.Body = v
	return s
}

type UnfreezeAccountRequest struct {
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	Bizid   *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s UnfreezeAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeAccountRequest) GoString() string {
	return s.String()
}

func (s *UnfreezeAccountRequest) SetAccount(v string) *UnfreezeAccountRequest {
	s.Account = &v
	return s
}

func (s *UnfreezeAccountRequest) SetBizid(v string) *UnfreezeAccountRequest {
	s.Bizid = &v
	return s
}

type UnfreezeAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UnfreezeAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeAccountResponseBody) GoString() string {
	return s.String()
}

func (s *UnfreezeAccountResponseBody) SetRequestId(v string) *UnfreezeAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnfreezeAccountResponseBody) SetResult(v string) *UnfreezeAccountResponseBody {
	s.Result = &v
	return s
}

type UnfreezeAccountResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnfreezeAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnfreezeAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeAccountResponse) GoString() string {
	return s.String()
}

func (s *UnfreezeAccountResponse) SetHeaders(v map[string]*string) *UnfreezeAccountResponse {
	s.Headers = v
	return s
}

func (s *UnfreezeAccountResponse) SetStatusCode(v int32) *UnfreezeAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *UnfreezeAccountResponse) SetBody(v *UnfreezeAccountResponseBody) *UnfreezeAccountResponse {
	s.Body = v
	return s
}

type UnfreezeAntChainAccountRequest struct {
	// This parameter is required.
	Account *string `json:"Account,omitempty" xml:"Account,omitempty"`
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
}

func (s UnfreezeAntChainAccountRequest) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeAntChainAccountRequest) GoString() string {
	return s.String()
}

func (s *UnfreezeAntChainAccountRequest) SetAccount(v string) *UnfreezeAntChainAccountRequest {
	s.Account = &v
	return s
}

func (s *UnfreezeAntChainAccountRequest) SetAntChainId(v string) *UnfreezeAntChainAccountRequest {
	s.AntChainId = &v
	return s
}

type UnfreezeAntChainAccountResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UnfreezeAntChainAccountResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeAntChainAccountResponseBody) GoString() string {
	return s.String()
}

func (s *UnfreezeAntChainAccountResponseBody) SetRequestId(v string) *UnfreezeAntChainAccountResponseBody {
	s.RequestId = &v
	return s
}

func (s *UnfreezeAntChainAccountResponseBody) SetResult(v string) *UnfreezeAntChainAccountResponseBody {
	s.Result = &v
	return s
}

type UnfreezeAntChainAccountResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UnfreezeAntChainAccountResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UnfreezeAntChainAccountResponse) String() string {
	return tea.Prettify(s)
}

func (s UnfreezeAntChainAccountResponse) GoString() string {
	return s.String()
}

func (s *UnfreezeAntChainAccountResponse) SetHeaders(v map[string]*string) *UnfreezeAntChainAccountResponse {
	s.Headers = v
	return s
}

func (s *UnfreezeAntChainAccountResponse) SetStatusCode(v int32) *UnfreezeAntChainAccountResponse {
	s.StatusCode = &v
	return s
}

func (s *UnfreezeAntChainAccountResponse) SetBody(v *UnfreezeAntChainAccountResponseBody) *UnfreezeAntChainAccountResponse {
	s.Body = v
	return s
}

type UntagResourcesRequest struct {
	All        *bool     `json:"All,omitempty" xml:"All,omitempty"`
	ResourceId []*string `json:"ResourceId,omitempty" xml:"ResourceId,omitempty" type:"Repeated"`
	// This parameter is required.
	ResourceType *string   `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	TagKey       []*string `json:"TagKey,omitempty" xml:"TagKey,omitempty" type:"Repeated"`
}

func (s UntagResourcesRequest) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesRequest) GoString() string {
	return s.String()
}

func (s *UntagResourcesRequest) SetAll(v bool) *UntagResourcesRequest {
	s.All = &v
	return s
}

func (s *UntagResourcesRequest) SetResourceId(v []*string) *UntagResourcesRequest {
	s.ResourceId = v
	return s
}

func (s *UntagResourcesRequest) SetResourceType(v string) *UntagResourcesRequest {
	s.ResourceType = &v
	return s
}

func (s *UntagResourcesRequest) SetTagKey(v []*string) *UntagResourcesRequest {
	s.TagKey = v
	return s
}

type UntagResourcesResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *bool   `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UntagResourcesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponseBody) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponseBody) SetErrorCode(v int32) *UntagResourcesResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UntagResourcesResponseBody) SetRequestId(v string) *UntagResourcesResponseBody {
	s.RequestId = &v
	return s
}

func (s *UntagResourcesResponseBody) SetResult(v bool) *UntagResourcesResponseBody {
	s.Result = &v
	return s
}

func (s *UntagResourcesResponseBody) SetSuccess(v bool) *UntagResourcesResponseBody {
	s.Success = &v
	return s
}

type UntagResourcesResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UntagResourcesResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UntagResourcesResponse) String() string {
	return tea.Prettify(s)
}

func (s UntagResourcesResponse) GoString() string {
	return s.String()
}

func (s *UntagResourcesResponse) SetHeaders(v map[string]*string) *UntagResourcesResponse {
	s.Headers = v
	return s
}

func (s *UntagResourcesResponse) SetStatusCode(v int32) *UntagResourcesResponse {
	s.StatusCode = &v
	return s
}

func (s *UntagResourcesResponse) SetBody(v *UntagResourcesResponseBody) *UntagResourcesResponse {
	s.Body = v
	return s
}

type UpdateAntChainRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	AntChainName *string `json:"AntChainName,omitempty" xml:"AntChainName,omitempty"`
}

func (s UpdateAntChainRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainRequest) GoString() string {
	return s.String()
}

func (s *UpdateAntChainRequest) SetAntChainId(v string) *UpdateAntChainRequest {
	s.AntChainId = &v
	return s
}

func (s *UpdateAntChainRequest) SetAntChainName(v string) *UpdateAntChainRequest {
	s.AntChainName = &v
	return s
}

type UpdateAntChainResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateAntChainResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAntChainResponseBody) SetRequestId(v string) *UpdateAntChainResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAntChainResponseBody) SetResult(v string) *UpdateAntChainResponseBody {
	s.Result = &v
	return s
}

type UpdateAntChainResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAntChainResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAntChainResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainResponse) GoString() string {
	return s.String()
}

func (s *UpdateAntChainResponse) SetHeaders(v map[string]*string) *UpdateAntChainResponse {
	s.Headers = v
	return s
}

func (s *UpdateAntChainResponse) SetStatusCode(v int32) *UpdateAntChainResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAntChainResponse) SetBody(v *UpdateAntChainResponseBody) *UpdateAntChainResponse {
	s.Body = v
	return s
}

type UpdateAntChainConsortiumRequest struct {
	ConsortiumDescription *string `json:"ConsortiumDescription,omitempty" xml:"ConsortiumDescription,omitempty"`
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	ConsortiumName *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
}

func (s UpdateAntChainConsortiumRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainConsortiumRequest) GoString() string {
	return s.String()
}

func (s *UpdateAntChainConsortiumRequest) SetConsortiumDescription(v string) *UpdateAntChainConsortiumRequest {
	s.ConsortiumDescription = &v
	return s
}

func (s *UpdateAntChainConsortiumRequest) SetConsortiumId(v string) *UpdateAntChainConsortiumRequest {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateAntChainConsortiumRequest) SetConsortiumName(v string) *UpdateAntChainConsortiumRequest {
	s.ConsortiumName = &v
	return s
}

type UpdateAntChainConsortiumResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateAntChainConsortiumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainConsortiumResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAntChainConsortiumResponseBody) SetRequestId(v string) *UpdateAntChainConsortiumResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAntChainConsortiumResponseBody) SetResult(v string) *UpdateAntChainConsortiumResponseBody {
	s.Result = &v
	return s
}

type UpdateAntChainConsortiumResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAntChainConsortiumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAntChainConsortiumResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainConsortiumResponse) GoString() string {
	return s.String()
}

func (s *UpdateAntChainConsortiumResponse) SetHeaders(v map[string]*string) *UpdateAntChainConsortiumResponse {
	s.Headers = v
	return s
}

func (s *UpdateAntChainConsortiumResponse) SetStatusCode(v int32) *UpdateAntChainConsortiumResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAntChainConsortiumResponse) SetBody(v *UpdateAntChainConsortiumResponseBody) *UpdateAntChainConsortiumResponse {
	s.Body = v
	return s
}

type UpdateAntChainContractContentRequest struct {
	Content *string `json:"Content,omitempty" xml:"Content,omitempty"`
	// This parameter is required.
	ContentId       *string `json:"ContentId,omitempty" xml:"ContentId,omitempty"`
	ContentName     *string `json:"ContentName,omitempty" xml:"ContentName,omitempty"`
	ParentContentId *string `json:"ParentContentId,omitempty" xml:"ParentContentId,omitempty"`
}

func (s UpdateAntChainContractContentRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainContractContentRequest) GoString() string {
	return s.String()
}

func (s *UpdateAntChainContractContentRequest) SetContent(v string) *UpdateAntChainContractContentRequest {
	s.Content = &v
	return s
}

func (s *UpdateAntChainContractContentRequest) SetContentId(v string) *UpdateAntChainContractContentRequest {
	s.ContentId = &v
	return s
}

func (s *UpdateAntChainContractContentRequest) SetContentName(v string) *UpdateAntChainContractContentRequest {
	s.ContentName = &v
	return s
}

func (s *UpdateAntChainContractContentRequest) SetParentContentId(v string) *UpdateAntChainContractContentRequest {
	s.ParentContentId = &v
	return s
}

type UpdateAntChainContractContentResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateAntChainContractContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainContractContentResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAntChainContractContentResponseBody) SetRequestId(v string) *UpdateAntChainContractContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAntChainContractContentResponseBody) SetResult(v string) *UpdateAntChainContractContentResponseBody {
	s.Result = &v
	return s
}

type UpdateAntChainContractContentResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAntChainContractContentResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAntChainContractContentResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainContractContentResponse) GoString() string {
	return s.String()
}

func (s *UpdateAntChainContractContentResponse) SetHeaders(v map[string]*string) *UpdateAntChainContractContentResponse {
	s.Headers = v
	return s
}

func (s *UpdateAntChainContractContentResponse) SetStatusCode(v int32) *UpdateAntChainContractContentResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAntChainContractContentResponse) SetBody(v *UpdateAntChainContractContentResponseBody) *UpdateAntChainContractContentResponse {
	s.Body = v
	return s
}

type UpdateAntChainContractProjectRequest struct {
	ProjectDescription *string `json:"ProjectDescription,omitempty" xml:"ProjectDescription,omitempty"`
	// This parameter is required.
	ProjectId      *string `json:"ProjectId,omitempty" xml:"ProjectId,omitempty"`
	ProjectName    *string `json:"ProjectName,omitempty" xml:"ProjectName,omitempty"`
	ProjectVersion *string `json:"ProjectVersion,omitempty" xml:"ProjectVersion,omitempty"`
}

func (s UpdateAntChainContractProjectRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainContractProjectRequest) GoString() string {
	return s.String()
}

func (s *UpdateAntChainContractProjectRequest) SetProjectDescription(v string) *UpdateAntChainContractProjectRequest {
	s.ProjectDescription = &v
	return s
}

func (s *UpdateAntChainContractProjectRequest) SetProjectId(v string) *UpdateAntChainContractProjectRequest {
	s.ProjectId = &v
	return s
}

func (s *UpdateAntChainContractProjectRequest) SetProjectName(v string) *UpdateAntChainContractProjectRequest {
	s.ProjectName = &v
	return s
}

func (s *UpdateAntChainContractProjectRequest) SetProjectVersion(v string) *UpdateAntChainContractProjectRequest {
	s.ProjectVersion = &v
	return s
}

type UpdateAntChainContractProjectResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateAntChainContractProjectResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainContractProjectResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAntChainContractProjectResponseBody) SetRequestId(v string) *UpdateAntChainContractProjectResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAntChainContractProjectResponseBody) SetResult(v string) *UpdateAntChainContractProjectResponseBody {
	s.Result = &v
	return s
}

type UpdateAntChainContractProjectResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAntChainContractProjectResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAntChainContractProjectResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainContractProjectResponse) GoString() string {
	return s.String()
}

func (s *UpdateAntChainContractProjectResponse) SetHeaders(v map[string]*string) *UpdateAntChainContractProjectResponse {
	s.Headers = v
	return s
}

func (s *UpdateAntChainContractProjectResponse) SetStatusCode(v int32) *UpdateAntChainContractProjectResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAntChainContractProjectResponse) SetBody(v *UpdateAntChainContractProjectResponseBody) *UpdateAntChainContractProjectResponse {
	s.Body = v
	return s
}

type UpdateAntChainMemberRequest struct {
	// This parameter is required.
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// This parameter is required.
	MemberId *string `json:"MemberId,omitempty" xml:"MemberId,omitempty"`
	// This parameter is required.
	MemberName *string `json:"MemberName,omitempty" xml:"MemberName,omitempty"`
}

func (s UpdateAntChainMemberRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainMemberRequest) GoString() string {
	return s.String()
}

func (s *UpdateAntChainMemberRequest) SetConsortiumId(v string) *UpdateAntChainMemberRequest {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateAntChainMemberRequest) SetMemberId(v string) *UpdateAntChainMemberRequest {
	s.MemberId = &v
	return s
}

func (s *UpdateAntChainMemberRequest) SetMemberName(v string) *UpdateAntChainMemberRequest {
	s.MemberName = &v
	return s
}

type UpdateAntChainMemberResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateAntChainMemberResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainMemberResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAntChainMemberResponseBody) SetRequestId(v string) *UpdateAntChainMemberResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAntChainMemberResponseBody) SetResult(v string) *UpdateAntChainMemberResponseBody {
	s.Result = &v
	return s
}

type UpdateAntChainMemberResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAntChainMemberResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAntChainMemberResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainMemberResponse) GoString() string {
	return s.String()
}

func (s *UpdateAntChainMemberResponse) SetHeaders(v map[string]*string) *UpdateAntChainMemberResponse {
	s.Headers = v
	return s
}

func (s *UpdateAntChainMemberResponse) SetStatusCode(v int32) *UpdateAntChainMemberResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAntChainMemberResponse) SetBody(v *UpdateAntChainMemberResponseBody) *UpdateAntChainMemberResponse {
	s.Body = v
	return s
}

type UpdateAntChainQRCodeAuthorizationRequest struct {
	// This parameter is required.
	AntChainId *string `json:"AntChainId,omitempty" xml:"AntChainId,omitempty"`
	// This parameter is required.
	AuthorizationType *string `json:"AuthorizationType,omitempty" xml:"AuthorizationType,omitempty"`
	// This parameter is required.
	QRCodeType *string `json:"QRCodeType,omitempty" xml:"QRCodeType,omitempty"`
}

func (s UpdateAntChainQRCodeAuthorizationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainQRCodeAuthorizationRequest) GoString() string {
	return s.String()
}

func (s *UpdateAntChainQRCodeAuthorizationRequest) SetAntChainId(v string) *UpdateAntChainQRCodeAuthorizationRequest {
	s.AntChainId = &v
	return s
}

func (s *UpdateAntChainQRCodeAuthorizationRequest) SetAuthorizationType(v string) *UpdateAntChainQRCodeAuthorizationRequest {
	s.AuthorizationType = &v
	return s
}

func (s *UpdateAntChainQRCodeAuthorizationRequest) SetQRCodeType(v string) *UpdateAntChainQRCodeAuthorizationRequest {
	s.QRCodeType = &v
	return s
}

type UpdateAntChainQRCodeAuthorizationResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateAntChainQRCodeAuthorizationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainQRCodeAuthorizationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAntChainQRCodeAuthorizationResponseBody) SetRequestId(v string) *UpdateAntChainQRCodeAuthorizationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAntChainQRCodeAuthorizationResponseBody) SetResult(v string) *UpdateAntChainQRCodeAuthorizationResponseBody {
	s.Result = &v
	return s
}

type UpdateAntChainQRCodeAuthorizationResponse struct {
	Headers    map[string]*string                             `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                         `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateAntChainQRCodeAuthorizationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateAntChainQRCodeAuthorizationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAntChainQRCodeAuthorizationResponse) GoString() string {
	return s.String()
}

func (s *UpdateAntChainQRCodeAuthorizationResponse) SetHeaders(v map[string]*string) *UpdateAntChainQRCodeAuthorizationResponse {
	s.Headers = v
	return s
}

func (s *UpdateAntChainQRCodeAuthorizationResponse) SetStatusCode(v int32) *UpdateAntChainQRCodeAuthorizationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAntChainQRCodeAuthorizationResponse) SetBody(v *UpdateAntChainQRCodeAuthorizationResponseBody) *UpdateAntChainQRCodeAuthorizationResponse {
	s.Body = v
	return s
}

type UpdateBlockchainSchemaRequest struct {
	Bizid           *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	CategoryConfigs *string `json:"CategoryConfigs,omitempty" xml:"CategoryConfigs,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SchemaId        *int64  `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
	SchemaName      *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
}

func (s UpdateBlockchainSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockchainSchemaRequest) GoString() string {
	return s.String()
}

func (s *UpdateBlockchainSchemaRequest) SetBizid(v string) *UpdateBlockchainSchemaRequest {
	s.Bizid = &v
	return s
}

func (s *UpdateBlockchainSchemaRequest) SetCategoryConfigs(v string) *UpdateBlockchainSchemaRequest {
	s.CategoryConfigs = &v
	return s
}

func (s *UpdateBlockchainSchemaRequest) SetDescription(v string) *UpdateBlockchainSchemaRequest {
	s.Description = &v
	return s
}

func (s *UpdateBlockchainSchemaRequest) SetSchemaId(v int64) *UpdateBlockchainSchemaRequest {
	s.SchemaId = &v
	return s
}

func (s *UpdateBlockchainSchemaRequest) SetSchemaName(v string) *UpdateBlockchainSchemaRequest {
	s.SchemaName = &v
	return s
}

type UpdateBlockchainSchemaResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpdateBlockchainSchemaResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s UpdateBlockchainSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockchainSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateBlockchainSchemaResponseBody) SetRequestId(v string) *UpdateBlockchainSchemaResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBody) SetResult(v *UpdateBlockchainSchemaResponseBodyResult) *UpdateBlockchainSchemaResponseBody {
	s.Result = v
	return s
}

type UpdateBlockchainSchemaResponseBodyResult struct {
	Responses []*UpdateBlockchainSchemaResponseBodyResultResponses `json:"Responses,omitempty" xml:"Responses,omitempty" type:"Repeated"`
	Schema    *UpdateBlockchainSchemaResponseBodyResultSchema      `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
}

func (s UpdateBlockchainSchemaResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockchainSchemaResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateBlockchainSchemaResponseBodyResult) SetResponses(v []*UpdateBlockchainSchemaResponseBodyResultResponses) *UpdateBlockchainSchemaResponseBodyResult {
	s.Responses = v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResult) SetSchema(v *UpdateBlockchainSchemaResponseBodyResultSchema) *UpdateBlockchainSchemaResponseBodyResult {
	s.Schema = v
	return s
}

type UpdateBlockchainSchemaResponseBodyResultResponses struct {
	Category     *string                                                      `json:"Category,omitempty" xml:"Category,omitempty"`
	CategoryName *string                                                      `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Description  *string                                                      `json:"Description,omitempty" xml:"Description,omitempty"`
	Properties   *UpdateBlockchainSchemaResponseBodyResultResponsesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s UpdateBlockchainSchemaResponseBodyResultResponses) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockchainSchemaResponseBodyResultResponses) GoString() string {
	return s.String()
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponses) SetCategory(v string) *UpdateBlockchainSchemaResponseBodyResultResponses {
	s.Category = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponses) SetCategoryName(v string) *UpdateBlockchainSchemaResponseBodyResultResponses {
	s.CategoryName = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponses) SetDescription(v string) *UpdateBlockchainSchemaResponseBodyResultResponses {
	s.Description = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponses) SetProperties(v *UpdateBlockchainSchemaResponseBodyResultResponsesProperties) *UpdateBlockchainSchemaResponseBodyResultResponses {
	s.Properties = v
	return s
}

type UpdateBlockchainSchemaResponseBodyResultResponsesProperties struct {
	Count      *int32                                                                   `json:"Count,omitempty" xml:"Count,omitempty"`
	DataSource []*UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s UpdateBlockchainSchemaResponseBodyResultResponsesProperties) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockchainSchemaResponseBodyResultResponsesProperties) GoString() string {
	return s.String()
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesProperties) SetCount(v int32) *UpdateBlockchainSchemaResponseBodyResultResponsesProperties {
	s.Count = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesProperties) SetDataSource(v []*UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) *UpdateBlockchainSchemaResponseBodyResultResponsesProperties {
	s.DataSource = v
	return s
}

type UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource struct {
	AllowNull  *int32  `json:"AllowNull,omitempty" xml:"AllowNull,omitempty"`
	Annotation *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Indexes    *int32  `json:"Indexes,omitempty" xml:"Indexes,omitempty"`
	Key        *int32  `json:"Key,omitempty" xml:"Key,omitempty"`
	Length     *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reg        *string `json:"Reg,omitempty" xml:"Reg,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) GoString() string {
	return s.String()
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetAllowNull(v int32) *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.AllowNull = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetAnnotation(v string) *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Annotation = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetField(v string) *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Field = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetIndexes(v int32) *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Indexes = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetKey(v int32) *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Key = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetLength(v int32) *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Length = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetReg(v string) *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Reg = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource) SetType(v string) *UpdateBlockchainSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Type = &v
	return s
}

type UpdateBlockchainSchemaResponseBodyResultSchema struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *bool   `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s UpdateBlockchainSchemaResponseBodyResultSchema) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockchainSchemaResponseBodyResultSchema) GoString() string {
	return s.String()
}

func (s *UpdateBlockchainSchemaResponseBodyResultSchema) SetCreateTime(v int64) *UpdateBlockchainSchemaResponseBodyResultSchema {
	s.CreateTime = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultSchema) SetDescription(v string) *UpdateBlockchainSchemaResponseBodyResultSchema {
	s.Description = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultSchema) SetId(v int64) *UpdateBlockchainSchemaResponseBodyResultSchema {
	s.Id = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultSchema) SetIsTemplate(v bool) *UpdateBlockchainSchemaResponseBodyResultSchema {
	s.IsTemplate = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultSchema) SetName(v string) *UpdateBlockchainSchemaResponseBodyResultSchema {
	s.Name = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultSchema) SetUpdateTime(v int64) *UpdateBlockchainSchemaResponseBodyResultSchema {
	s.UpdateTime = &v
	return s
}

func (s *UpdateBlockchainSchemaResponseBodyResultSchema) SetVersion(v int64) *UpdateBlockchainSchemaResponseBodyResultSchema {
	s.Version = &v
	return s
}

type UpdateBlockchainSchemaResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateBlockchainSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateBlockchainSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateBlockchainSchemaResponse) GoString() string {
	return s.String()
}

func (s *UpdateBlockchainSchemaResponse) SetHeaders(v map[string]*string) *UpdateBlockchainSchemaResponse {
	s.Headers = v
	return s
}

func (s *UpdateBlockchainSchemaResponse) SetStatusCode(v int32) *UpdateBlockchainSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateBlockchainSchemaResponse) SetBody(v *UpdateBlockchainSchemaResponseBody) *UpdateBlockchainSchemaResponse {
	s.Body = v
	return s
}

type UpdateChannelConfigRequest struct {
	// This parameter is required.
	BatchTimeout *int32 `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	MaxMessageCount *int32  `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	OrganizationId  *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	PreferredMaxBytes *int32 `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
}

func (s UpdateChannelConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateChannelConfigRequest) GoString() string {
	return s.String()
}

func (s *UpdateChannelConfigRequest) SetBatchTimeout(v int32) *UpdateChannelConfigRequest {
	s.BatchTimeout = &v
	return s
}

func (s *UpdateChannelConfigRequest) SetChannelId(v string) *UpdateChannelConfigRequest {
	s.ChannelId = &v
	return s
}

func (s *UpdateChannelConfigRequest) SetMaxMessageCount(v int32) *UpdateChannelConfigRequest {
	s.MaxMessageCount = &v
	return s
}

func (s *UpdateChannelConfigRequest) SetOrganizationId(v string) *UpdateChannelConfigRequest {
	s.OrganizationId = &v
	return s
}

func (s *UpdateChannelConfigRequest) SetPreferredMaxBytes(v int32) *UpdateChannelConfigRequest {
	s.PreferredMaxBytes = &v
	return s
}

type UpdateChannelConfigResponseBody struct {
	ErrorCode *int32                                 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpdateChannelConfigResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                  `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateChannelConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateChannelConfigResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateChannelConfigResponseBody) SetErrorCode(v int32) *UpdateChannelConfigResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateChannelConfigResponseBody) SetRequestId(v string) *UpdateChannelConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateChannelConfigResponseBody) SetResult(v *UpdateChannelConfigResponseBodyResult) *UpdateChannelConfigResponseBody {
	s.Result = v
	return s
}

func (s *UpdateChannelConfigResponseBody) SetSuccess(v bool) *UpdateChannelConfigResponseBody {
	s.Success = &v
	return s
}

type UpdateChannelConfigResponseBodyResult struct {
	BatchTimeout      *int32  `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	BlockCount        *int32  `json:"BlockCount,omitempty" xml:"BlockCount,omitempty"`
	ChaincodeCount    *int32  `json:"ChaincodeCount,omitempty" xml:"ChaincodeCount,omitempty"`
	ChannelId         *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	ConsortiumId      *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	ConsortiumName    *string `json:"ConsortiumName,omitempty" xml:"ConsortiumName,omitempty"`
	CreateTime        *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	MaxMessageCount   *int32  `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	MemberCount       *int32  `json:"MemberCount,omitempty" xml:"MemberCount,omitempty"`
	Name              *string `json:"Name,omitempty" xml:"Name,omitempty"`
	OwnerBid          *string `json:"OwnerBid,omitempty" xml:"OwnerBid,omitempty"`
	OwnerName         *string `json:"OwnerName,omitempty" xml:"OwnerName,omitempty"`
	OwnerUid          *int32  `json:"OwnerUid,omitempty" xml:"OwnerUid,omitempty"`
	PreferredMaxBytes *int32  `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
	RequestId         *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	State             *string `json:"State,omitempty" xml:"State,omitempty"`
	SupportConfig     *bool   `json:"SupportConfig,omitempty" xml:"SupportConfig,omitempty"`
	UpdateTime        *string `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
}

func (s UpdateChannelConfigResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateChannelConfigResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateChannelConfigResponseBodyResult) SetBatchTimeout(v int32) *UpdateChannelConfigResponseBodyResult {
	s.BatchTimeout = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetBlockCount(v int32) *UpdateChannelConfigResponseBodyResult {
	s.BlockCount = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetChaincodeCount(v int32) *UpdateChannelConfigResponseBodyResult {
	s.ChaincodeCount = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetChannelId(v string) *UpdateChannelConfigResponseBodyResult {
	s.ChannelId = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetConsortiumId(v string) *UpdateChannelConfigResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetConsortiumName(v string) *UpdateChannelConfigResponseBodyResult {
	s.ConsortiumName = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetCreateTime(v string) *UpdateChannelConfigResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetMaxMessageCount(v int32) *UpdateChannelConfigResponseBodyResult {
	s.MaxMessageCount = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetMemberCount(v int32) *UpdateChannelConfigResponseBodyResult {
	s.MemberCount = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetName(v string) *UpdateChannelConfigResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetOwnerBid(v string) *UpdateChannelConfigResponseBodyResult {
	s.OwnerBid = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetOwnerName(v string) *UpdateChannelConfigResponseBodyResult {
	s.OwnerName = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetOwnerUid(v int32) *UpdateChannelConfigResponseBodyResult {
	s.OwnerUid = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetPreferredMaxBytes(v int32) *UpdateChannelConfigResponseBodyResult {
	s.PreferredMaxBytes = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetRequestId(v string) *UpdateChannelConfigResponseBodyResult {
	s.RequestId = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetState(v string) *UpdateChannelConfigResponseBodyResult {
	s.State = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetSupportConfig(v bool) *UpdateChannelConfigResponseBodyResult {
	s.SupportConfig = &v
	return s
}

func (s *UpdateChannelConfigResponseBodyResult) SetUpdateTime(v string) *UpdateChannelConfigResponseBodyResult {
	s.UpdateTime = &v
	return s
}

type UpdateChannelConfigResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateChannelConfigResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateChannelConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateChannelConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateChannelConfigResponse) SetHeaders(v map[string]*string) *UpdateChannelConfigResponse {
	s.Headers = v
	return s
}

func (s *UpdateChannelConfigResponse) SetStatusCode(v int32) *UpdateChannelConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateChannelConfigResponse) SetBody(v *UpdateChannelConfigResponseBody) *UpdateChannelConfigResponse {
	s.Body = v
	return s
}

type UpdateEthereumRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	EthereumId *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
}

func (s UpdateEthereumRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumRequest) GoString() string {
	return s.String()
}

func (s *UpdateEthereumRequest) SetDescription(v string) *UpdateEthereumRequest {
	s.Description = &v
	return s
}

func (s *UpdateEthereumRequest) SetEthereumId(v string) *UpdateEthereumRequest {
	s.EthereumId = &v
	return s
}

func (s *UpdateEthereumRequest) SetName(v string) *UpdateEthereumRequest {
	s.Name = &v
	return s
}

type UpdateEthereumResponseBody struct {
	ErrorCode *int32                            `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpdateEthereumResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                             `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateEthereumResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEthereumResponseBody) SetErrorCode(v int32) *UpdateEthereumResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateEthereumResponseBody) SetRequestId(v string) *UpdateEthereumResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateEthereumResponseBody) SetResult(v *UpdateEthereumResponseBodyResult) *UpdateEthereumResponseBody {
	s.Result = v
	return s
}

func (s *UpdateEthereumResponseBody) SetSuccess(v bool) *UpdateEthereumResponseBody {
	s.Success = &v
	return s
}

type UpdateEthereumResponseBodyResult struct {
	Consensus   *string `json:"Consensus,omitempty" xml:"Consensus,omitempty"`
	Creator     *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *string `json:"Id,omitempty" xml:"Id,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	NetworkId   *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	RegionId    *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
}

func (s UpdateEthereumResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateEthereumResponseBodyResult) SetConsensus(v string) *UpdateEthereumResponseBodyResult {
	s.Consensus = &v
	return s
}

func (s *UpdateEthereumResponseBodyResult) SetCreator(v string) *UpdateEthereumResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *UpdateEthereumResponseBodyResult) SetDescription(v string) *UpdateEthereumResponseBodyResult {
	s.Description = &v
	return s
}

func (s *UpdateEthereumResponseBodyResult) SetId(v string) *UpdateEthereumResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateEthereumResponseBodyResult) SetName(v string) *UpdateEthereumResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpdateEthereumResponseBodyResult) SetNetworkId(v string) *UpdateEthereumResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *UpdateEthereumResponseBodyResult) SetRegionId(v string) *UpdateEthereumResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *UpdateEthereumResponseBodyResult) SetState(v string) *UpdateEthereumResponseBodyResult {
	s.State = &v
	return s
}

type UpdateEthereumResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEthereumResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEthereumResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumResponse) GoString() string {
	return s.String()
}

func (s *UpdateEthereumResponse) SetHeaders(v map[string]*string) *UpdateEthereumResponse {
	s.Headers = v
	return s
}

func (s *UpdateEthereumResponse) SetStatusCode(v int32) *UpdateEthereumResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEthereumResponse) SetBody(v *UpdateEthereumResponseBody) *UpdateEthereumResponse {
	s.Body = v
	return s
}

type UpdateEthereumClientUserPasswordRequest struct {
	// This parameter is required.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// This parameter is required.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// This parameter is required.
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
}

func (s UpdateEthereumClientUserPasswordRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumClientUserPasswordRequest) GoString() string {
	return s.String()
}

func (s *UpdateEthereumClientUserPasswordRequest) SetNodeId(v string) *UpdateEthereumClientUserPasswordRequest {
	s.NodeId = &v
	return s
}

func (s *UpdateEthereumClientUserPasswordRequest) SetPassword(v string) *UpdateEthereumClientUserPasswordRequest {
	s.Password = &v
	return s
}

func (s *UpdateEthereumClientUserPasswordRequest) SetUsername(v string) *UpdateEthereumClientUserPasswordRequest {
	s.Username = &v
	return s
}

type UpdateEthereumClientUserPasswordResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateEthereumClientUserPasswordResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumClientUserPasswordResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEthereumClientUserPasswordResponseBody) SetErrorCode(v int32) *UpdateEthereumClientUserPasswordResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateEthereumClientUserPasswordResponseBody) SetRequestId(v string) *UpdateEthereumClientUserPasswordResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateEthereumClientUserPasswordResponseBody) SetResult(v string) *UpdateEthereumClientUserPasswordResponseBody {
	s.Result = &v
	return s
}

func (s *UpdateEthereumClientUserPasswordResponseBody) SetSuccess(v bool) *UpdateEthereumClientUserPasswordResponseBody {
	s.Success = &v
	return s
}

type UpdateEthereumClientUserPasswordResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEthereumClientUserPasswordResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEthereumClientUserPasswordResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumClientUserPasswordResponse) GoString() string {
	return s.String()
}

func (s *UpdateEthereumClientUserPasswordResponse) SetHeaders(v map[string]*string) *UpdateEthereumClientUserPasswordResponse {
	s.Headers = v
	return s
}

func (s *UpdateEthereumClientUserPasswordResponse) SetStatusCode(v int32) *UpdateEthereumClientUserPasswordResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEthereumClientUserPasswordResponse) SetBody(v *UpdateEthereumClientUserPasswordResponseBody) *UpdateEthereumClientUserPasswordResponse {
	s.Body = v
	return s
}

type UpdateEthereumNodeRequest struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// This parameter is required.
	NodeId   *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	NodeName *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
}

func (s UpdateEthereumNodeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumNodeRequest) GoString() string {
	return s.String()
}

func (s *UpdateEthereumNodeRequest) SetDescription(v string) *UpdateEthereumNodeRequest {
	s.Description = &v
	return s
}

func (s *UpdateEthereumNodeRequest) SetNodeId(v string) *UpdateEthereumNodeRequest {
	s.NodeId = &v
	return s
}

func (s *UpdateEthereumNodeRequest) SetNodeName(v string) *UpdateEthereumNodeRequest {
	s.NodeName = &v
	return s
}

type UpdateEthereumNodeResponseBody struct {
	ErrorCode *int32                                `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpdateEthereumNodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                 `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateEthereumNodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumNodeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEthereumNodeResponseBody) SetErrorCode(v int32) *UpdateEthereumNodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateEthereumNodeResponseBody) SetRequestId(v string) *UpdateEthereumNodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateEthereumNodeResponseBody) SetResult(v *UpdateEthereumNodeResponseBodyResult) *UpdateEthereumNodeResponseBody {
	s.Result = v
	return s
}

func (s *UpdateEthereumNodeResponseBody) SetSuccess(v bool) *UpdateEthereumNodeResponseBody {
	s.Success = &v
	return s
}

type UpdateEthereumNodeResponseBodyResult struct {
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator      *string `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description  *string `json:"Description,omitempty" xml:"Description,omitempty"`
	EthereumId   *string `json:"EthereumId,omitempty" xml:"EthereumId,omitempty"`
	EthereumName *string `json:"EthereumName,omitempty" xml:"EthereumName,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	NetworkId    *string `json:"NetworkId,omitempty" xml:"NetworkId,omitempty"`
	NodeName     *string `json:"NodeName,omitempty" xml:"NodeName,omitempty"`
	PublicIp     *string `json:"PublicIp,omitempty" xml:"PublicIp,omitempty"`
	RegionId     *string `json:"RegionId,omitempty" xml:"RegionId,omitempty"`
	RpcPort      *int32  `json:"RpcPort,omitempty" xml:"RpcPort,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	WsPort       *int32  `json:"WsPort,omitempty" xml:"WsPort,omitempty"`
}

func (s UpdateEthereumNodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumNodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateEthereumNodeResponseBodyResult) SetCreateTime(v int64) *UpdateEthereumNodeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetCreator(v string) *UpdateEthereumNodeResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetDescription(v string) *UpdateEthereumNodeResponseBodyResult {
	s.Description = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetEthereumId(v string) *UpdateEthereumNodeResponseBodyResult {
	s.EthereumId = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetEthereumName(v string) *UpdateEthereumNodeResponseBodyResult {
	s.EthereumName = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetId(v string) *UpdateEthereumNodeResponseBodyResult {
	s.Id = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetNetworkId(v string) *UpdateEthereumNodeResponseBodyResult {
	s.NetworkId = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetNodeName(v string) *UpdateEthereumNodeResponseBodyResult {
	s.NodeName = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetPublicIp(v string) *UpdateEthereumNodeResponseBodyResult {
	s.PublicIp = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetRegionId(v string) *UpdateEthereumNodeResponseBodyResult {
	s.RegionId = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetRpcPort(v int32) *UpdateEthereumNodeResponseBodyResult {
	s.RpcPort = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetState(v string) *UpdateEthereumNodeResponseBodyResult {
	s.State = &v
	return s
}

func (s *UpdateEthereumNodeResponseBodyResult) SetWsPort(v int32) *UpdateEthereumNodeResponseBodyResult {
	s.WsPort = &v
	return s
}

type UpdateEthereumNodeResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEthereumNodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEthereumNodeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumNodeResponse) GoString() string {
	return s.String()
}

func (s *UpdateEthereumNodeResponse) SetHeaders(v map[string]*string) *UpdateEthereumNodeResponse {
	s.Headers = v
	return s
}

func (s *UpdateEthereumNodeResponse) SetStatusCode(v int32) *UpdateEthereumNodeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEthereumNodeResponse) SetBody(v *UpdateEthereumNodeResponseBody) *UpdateEthereumNodeResponse {
	s.Body = v
	return s
}

type UpdateEthereumNodeConfigurationRequest struct {
	// This parameter is required.
	IP *string `json:"IP,omitempty" xml:"IP,omitempty"`
	// This parameter is required.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// This parameter is required.
	NodePub *string `json:"NodePub,omitempty" xml:"NodePub,omitempty"`
	// This parameter is required.
	P2pPort  *int32 `json:"P2pPort,omitempty" xml:"P2pPort,omitempty"`
	RaftPort *int32 `json:"RaftPort,omitempty" xml:"RaftPort,omitempty"`
	RpcPort  *int32 `json:"RpcPort,omitempty" xml:"RpcPort,omitempty"`
	// This parameter is required.
	TMPort *int32 `json:"TMPort,omitempty" xml:"TMPort,omitempty"`
	// This parameter is required.
	TMPub  *string `json:"TMPub,omitempty" xml:"TMPub,omitempty"`
	WSPort *int32  `json:"WSPort,omitempty" xml:"WSPort,omitempty"`
}

func (s UpdateEthereumNodeConfigurationRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumNodeConfigurationRequest) GoString() string {
	return s.String()
}

func (s *UpdateEthereumNodeConfigurationRequest) SetIP(v string) *UpdateEthereumNodeConfigurationRequest {
	s.IP = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationRequest) SetNodeId(v string) *UpdateEthereumNodeConfigurationRequest {
	s.NodeId = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationRequest) SetNodePub(v string) *UpdateEthereumNodeConfigurationRequest {
	s.NodePub = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationRequest) SetP2pPort(v int32) *UpdateEthereumNodeConfigurationRequest {
	s.P2pPort = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationRequest) SetRaftPort(v int32) *UpdateEthereumNodeConfigurationRequest {
	s.RaftPort = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationRequest) SetRpcPort(v int32) *UpdateEthereumNodeConfigurationRequest {
	s.RpcPort = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationRequest) SetTMPort(v int32) *UpdateEthereumNodeConfigurationRequest {
	s.TMPort = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationRequest) SetTMPub(v string) *UpdateEthereumNodeConfigurationRequest {
	s.TMPub = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationRequest) SetWSPort(v int32) *UpdateEthereumNodeConfigurationRequest {
	s.WSPort = &v
	return s
}

type UpdateEthereumNodeConfigurationResponseBody struct {
	ErrorCode *int32  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateEthereumNodeConfigurationResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumNodeConfigurationResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateEthereumNodeConfigurationResponseBody) SetErrorCode(v int32) *UpdateEthereumNodeConfigurationResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationResponseBody) SetRequestId(v string) *UpdateEthereumNodeConfigurationResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationResponseBody) SetResult(v string) *UpdateEthereumNodeConfigurationResponseBody {
	s.Result = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationResponseBody) SetSuccess(v bool) *UpdateEthereumNodeConfigurationResponseBody {
	s.Success = &v
	return s
}

type UpdateEthereumNodeConfigurationResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateEthereumNodeConfigurationResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateEthereumNodeConfigurationResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateEthereumNodeConfigurationResponse) GoString() string {
	return s.String()
}

func (s *UpdateEthereumNodeConfigurationResponse) SetHeaders(v map[string]*string) *UpdateEthereumNodeConfigurationResponse {
	s.Headers = v
	return s
}

func (s *UpdateEthereumNodeConfigurationResponse) SetStatusCode(v int32) *UpdateEthereumNodeConfigurationResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateEthereumNodeConfigurationResponse) SetBody(v *UpdateEthereumNodeConfigurationResponseBody) *UpdateEthereumNodeConfigurationResponse {
	s.Body = v
	return s
}

type UpdateGovernanceTaskRequest struct {
	// This parameter is required.
	ChannelId *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
	// This parameter is required.
	TaskAction *string `json:"TaskAction,omitempty" xml:"TaskAction,omitempty"`
	// This parameter is required.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s UpdateGovernanceTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskRequest) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskRequest) SetChannelId(v string) *UpdateGovernanceTaskRequest {
	s.ChannelId = &v
	return s
}

func (s *UpdateGovernanceTaskRequest) SetOrganizationId(v string) *UpdateGovernanceTaskRequest {
	s.OrganizationId = &v
	return s
}

func (s *UpdateGovernanceTaskRequest) SetTaskAction(v string) *UpdateGovernanceTaskRequest {
	s.TaskAction = &v
	return s
}

func (s *UpdateGovernanceTaskRequest) SetTaskId(v string) *UpdateGovernanceTaskRequest {
	s.TaskId = &v
	return s
}

type UpdateGovernanceTaskResponseBody struct {
	ErrorCode *int32                                  `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpdateGovernanceTaskResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success   *bool                                   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateGovernanceTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBody) SetErrorCode(v int32) *UpdateGovernanceTaskResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBody) SetRequestId(v string) *UpdateGovernanceTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBody) SetResult(v *UpdateGovernanceTaskResponseBodyResult) *UpdateGovernanceTaskResponseBody {
	s.Result = v
	return s
}

func (s *UpdateGovernanceTaskResponseBody) SetSuccess(v bool) *UpdateGovernanceTaskResponseBody {
	s.Success = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResult struct {
	ChannelName *string                                        `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	Content     *UpdateGovernanceTaskResponseBodyResultContent `json:"Content,omitempty" xml:"Content,omitempty" type:"Struct"`
	CreateTime  *int64                                         `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Creator     *string                                        `json:"Creator,omitempty" xml:"Creator,omitempty"`
	Description *string                                        `json:"Description,omitempty" xml:"Description,omitempty"`
	Status      *string                                        `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId      *string                                        `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Type        *string                                        `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResult) SetChannelName(v string) *UpdateGovernanceTaskResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResult) SetContent(v *UpdateGovernanceTaskResponseBodyResultContent) *UpdateGovernanceTaskResponseBodyResult {
	s.Content = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResult) SetCreateTime(v int64) *UpdateGovernanceTaskResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResult) SetCreator(v string) *UpdateGovernanceTaskResponseBodyResult {
	s.Creator = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResult) SetDescription(v string) *UpdateGovernanceTaskResponseBodyResult {
	s.Description = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResult) SetStatus(v string) *UpdateGovernanceTaskResponseBodyResult {
	s.Status = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResult) SetTaskId(v string) *UpdateGovernanceTaskResponseBodyResult {
	s.TaskId = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResult) SetType(v string) *UpdateGovernanceTaskResponseBodyResult {
	s.Type = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContent struct {
	AddedOrganizations   []*UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations   `json:"AddedOrganizations,omitempty" xml:"AddedOrganizations,omitempty" type:"Repeated"`
	ChaincodeSpecPkg     *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg       `json:"ChaincodeSpecPkg,omitempty" xml:"ChaincodeSpecPkg,omitempty" type:"Struct"`
	OrdererConfig        *UpdateGovernanceTaskResponseBodyResultContentOrdererConfig          `json:"OrdererConfig,omitempty" xml:"OrdererConfig,omitempty" type:"Struct"`
	Raw                  *string                                                              `json:"Raw,omitempty" xml:"Raw,omitempty"`
	RemovedOrganizations []*UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations `json:"RemovedOrganizations,omitempty" xml:"RemovedOrganizations,omitempty" type:"Repeated"`
	RwSets               *string                                                              `json:"RwSets,omitempty" xml:"RwSets,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContent) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContent) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContent) SetAddedOrganizations(v []*UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) *UpdateGovernanceTaskResponseBodyResultContent {
	s.AddedOrganizations = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContent) SetChaincodeSpecPkg(v *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) *UpdateGovernanceTaskResponseBodyResultContent {
	s.ChaincodeSpecPkg = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContent) SetOrdererConfig(v *UpdateGovernanceTaskResponseBodyResultContentOrdererConfig) *UpdateGovernanceTaskResponseBodyResultContent {
	s.OrdererConfig = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContent) SetRaw(v string) *UpdateGovernanceTaskResponseBodyResultContent {
	s.Raw = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContent) SetRemovedOrganizations(v []*UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) *UpdateGovernanceTaskResponseBodyResultContent {
	s.RemovedOrganizations = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContent) SetRwSets(v string) *UpdateGovernanceTaskResponseBodyResultContent {
	s.RwSets = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations struct {
	AnchorPeers         []*UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                        `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                        `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                        `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                          `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                        `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                        `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) SetAnchorPeers(v []*UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) SetCrls(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.Crls = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) SetMspId(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.MspId = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) SetMspType(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.MspType = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) SetOrderer(v bool) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.Orderer = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) SetOrdererNodes(v []*UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) SetRootCertificates(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations) SetTlsRootCertificates(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) SetHost(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers) SetPort(v int32) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetAddress(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetCertificate(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetKey(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes) SetTlsroot(v string) *UpdateGovernanceTaskResponseBodyResultContentAddedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg struct {
	Cs     *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs `json:"Cs,omitempty" xml:"Cs,omitempty" type:"Struct"`
	Policy *string                                                          `json:"Policy,omitempty" xml:"Policy,omitempty"`
	Sha256 *string                                                          `json:"Sha256,omitempty" xml:"Sha256,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetCs(v *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Cs = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetPolicy(v string) *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Policy = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg) SetSha256(v string) *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkg {
	s.Sha256 = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs struct {
	Input   *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Name    *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path    *string `json:"Path,omitempty" xml:"Path,omitempty"`
	Type    *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetInput(v string) *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Input = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetName(v string) *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Name = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetPath(v string) *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Path = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetType(v int32) *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Type = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs) SetVersion(v string) *UpdateGovernanceTaskResponseBodyResultContentChaincodeSpecPkgCs {
	s.Version = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentOrdererConfig struct {
	BatchTimeout      *string `json:"BatchTimeout,omitempty" xml:"BatchTimeout,omitempty"`
	MaxMessageCount   *int32  `json:"MaxMessageCount,omitempty" xml:"MaxMessageCount,omitempty"`
	PreferredMaxBytes *int32  `json:"PreferredMaxBytes,omitempty" xml:"PreferredMaxBytes,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentOrdererConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentOrdererConfig) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentOrdererConfig) SetBatchTimeout(v string) *UpdateGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.BatchTimeout = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentOrdererConfig) SetMaxMessageCount(v int32) *UpdateGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.MaxMessageCount = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentOrdererConfig) SetPreferredMaxBytes(v int32) *UpdateGovernanceTaskResponseBodyResultContentOrdererConfig {
	s.PreferredMaxBytes = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations struct {
	AnchorPeers         []*UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers  `json:"AnchorPeers,omitempty" xml:"AnchorPeers,omitempty" type:"Repeated"`
	Crls                *string                                                                          `json:"Crls,omitempty" xml:"Crls,omitempty"`
	MspId               *string                                                                          `json:"MspId,omitempty" xml:"MspId,omitempty"`
	MspType             *string                                                                          `json:"MspType,omitempty" xml:"MspType,omitempty"`
	Orderer             *bool                                                                            `json:"Orderer,omitempty" xml:"Orderer,omitempty"`
	OrdererNodes        []*UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes `json:"OrdererNodes,omitempty" xml:"OrdererNodes,omitempty" type:"Repeated"`
	RootCertificates    *string                                                                          `json:"RootCertificates,omitempty" xml:"RootCertificates,omitempty"`
	TlsRootCertificates *string                                                                          `json:"TlsRootCertificates,omitempty" xml:"TlsRootCertificates,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetAnchorPeers(v []*UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.AnchorPeers = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetCrls(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.Crls = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetMspId(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.MspId = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetMspType(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.MspType = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetOrderer(v bool) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.Orderer = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetOrdererNodes(v []*UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.OrdererNodes = v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetRootCertificates(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.RootCertificates = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations) SetTlsRootCertificates(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizations {
	s.TlsRootCertificates = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers struct {
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	Port *int32  `json:"Port,omitempty" xml:"Port,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetHost(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Host = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers) SetPort(v int32) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsAnchorPeers {
	s.Port = &v
	return s
}

type UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes struct {
	Address     *string `json:"Address,omitempty" xml:"Address,omitempty"`
	Certificate *string `json:"Certificate,omitempty" xml:"Certificate,omitempty"`
	Key         *string `json:"Key,omitempty" xml:"Key,omitempty"`
	Tlsroot     *string `json:"Tlsroot,omitempty" xml:"Tlsroot,omitempty"`
}

func (s UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetAddress(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Address = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetCertificate(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Certificate = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetKey(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Key = &v
	return s
}

func (s *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes) SetTlsroot(v string) *UpdateGovernanceTaskResponseBodyResultContentRemovedOrganizationsOrdererNodes {
	s.Tlsroot = &v
	return s
}

type UpdateGovernanceTaskResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateGovernanceTaskResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateGovernanceTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateGovernanceTaskResponse) GoString() string {
	return s.String()
}

func (s *UpdateGovernanceTaskResponse) SetHeaders(v map[string]*string) *UpdateGovernanceTaskResponse {
	s.Headers = v
	return s
}

func (s *UpdateGovernanceTaskResponse) SetStatusCode(v int32) *UpdateGovernanceTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateGovernanceTaskResponse) SetBody(v *UpdateGovernanceTaskResponseBody) *UpdateGovernanceTaskResponse {
	s.Body = v
	return s
}

type UpdateMemberRoleRequest struct {
	Bid    *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Bizid  *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	Role   *int32  `json:"Role,omitempty" xml:"Role,omitempty"`
	UserId *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s UpdateMemberRoleRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMemberRoleRequest) GoString() string {
	return s.String()
}

func (s *UpdateMemberRoleRequest) SetBid(v string) *UpdateMemberRoleRequest {
	s.Bid = &v
	return s
}

func (s *UpdateMemberRoleRequest) SetBizid(v string) *UpdateMemberRoleRequest {
	s.Bizid = &v
	return s
}

func (s *UpdateMemberRoleRequest) SetRole(v int32) *UpdateMemberRoleRequest {
	s.Role = &v
	return s
}

func (s *UpdateMemberRoleRequest) SetUserId(v int64) *UpdateMemberRoleRequest {
	s.UserId = &v
	return s
}

type UpdateMemberRoleResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateMemberRoleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMemberRoleResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMemberRoleResponseBody) SetRequestId(v string) *UpdateMemberRoleResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMemberRoleResponseBody) SetResult(v string) *UpdateMemberRoleResponseBody {
	s.Result = &v
	return s
}

type UpdateMemberRoleResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateMemberRoleResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateMemberRoleResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMemberRoleResponse) GoString() string {
	return s.String()
}

func (s *UpdateMemberRoleResponse) SetHeaders(v map[string]*string) *UpdateMemberRoleResponse {
	s.Headers = v
	return s
}

func (s *UpdateMemberRoleResponse) SetStatusCode(v int32) *UpdateMemberRoleResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateMemberRoleResponse) SetBody(v *UpdateMemberRoleResponseBody) *UpdateMemberRoleResponse {
	s.Body = v
	return s
}

type UpdateQRCodeAuthorityRequest struct {
	Authorized *bool   `json:"Authorized,omitempty" xml:"Authorized,omitempty"`
	Bizid      *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
}

func (s UpdateQRCodeAuthorityRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateQRCodeAuthorityRequest) GoString() string {
	return s.String()
}

func (s *UpdateQRCodeAuthorityRequest) SetAuthorized(v bool) *UpdateQRCodeAuthorityRequest {
	s.Authorized = &v
	return s
}

func (s *UpdateQRCodeAuthorityRequest) SetBizid(v string) *UpdateQRCodeAuthorityRequest {
	s.Bizid = &v
	return s
}

type UpdateQRCodeAuthorityResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s UpdateQRCodeAuthorityResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateQRCodeAuthorityResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateQRCodeAuthorityResponseBody) SetRequestId(v string) *UpdateQRCodeAuthorityResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateQRCodeAuthorityResponseBody) SetResult(v string) *UpdateQRCodeAuthorityResponseBody {
	s.Result = &v
	return s
}

type UpdateQRCodeAuthorityResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateQRCodeAuthorityResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateQRCodeAuthorityResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateQRCodeAuthorityResponse) GoString() string {
	return s.String()
}

func (s *UpdateQRCodeAuthorityResponse) SetHeaders(v map[string]*string) *UpdateQRCodeAuthorityResponse {
	s.Headers = v
	return s
}

func (s *UpdateQRCodeAuthorityResponse) SetStatusCode(v int32) *UpdateQRCodeAuthorityResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateQRCodeAuthorityResponse) SetBody(v *UpdateQRCodeAuthorityResponseBody) *UpdateQRCodeAuthorityResponse {
	s.Body = v
	return s
}

type UpdateSchemaRequest struct {
	Bizid           *string `json:"Bizid,omitempty" xml:"Bizid,omitempty"`
	CategoryConfigs *string `json:"CategoryConfigs,omitempty" xml:"CategoryConfigs,omitempty"`
	Description     *string `json:"Description,omitempty" xml:"Description,omitempty"`
	SchemaId        *int64  `json:"SchemaId,omitempty" xml:"SchemaId,omitempty"`
	SchemaName      *string `json:"SchemaName,omitempty" xml:"SchemaName,omitempty"`
}

func (s UpdateSchemaRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaRequest) GoString() string {
	return s.String()
}

func (s *UpdateSchemaRequest) SetBizid(v string) *UpdateSchemaRequest {
	s.Bizid = &v
	return s
}

func (s *UpdateSchemaRequest) SetCategoryConfigs(v string) *UpdateSchemaRequest {
	s.CategoryConfigs = &v
	return s
}

func (s *UpdateSchemaRequest) SetDescription(v string) *UpdateSchemaRequest {
	s.Description = &v
	return s
}

func (s *UpdateSchemaRequest) SetSchemaId(v int64) *UpdateSchemaRequest {
	s.SchemaId = &v
	return s
}

func (s *UpdateSchemaRequest) SetSchemaName(v string) *UpdateSchemaRequest {
	s.SchemaName = &v
	return s
}

type UpdateSchemaResponseBody struct {
	RequestId *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpdateSchemaResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
}

func (s UpdateSchemaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSchemaResponseBody) SetRequestId(v string) *UpdateSchemaResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateSchemaResponseBody) SetResult(v *UpdateSchemaResponseBodyResult) *UpdateSchemaResponseBody {
	s.Result = v
	return s
}

type UpdateSchemaResponseBodyResult struct {
	Responses []*UpdateSchemaResponseBodyResultResponses `json:"Responses,omitempty" xml:"Responses,omitempty" type:"Repeated"`
	Schema    *UpdateSchemaResponseBodyResultSchema      `json:"Schema,omitempty" xml:"Schema,omitempty" type:"Struct"`
}

func (s UpdateSchemaResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpdateSchemaResponseBodyResult) SetResponses(v []*UpdateSchemaResponseBodyResultResponses) *UpdateSchemaResponseBodyResult {
	s.Responses = v
	return s
}

func (s *UpdateSchemaResponseBodyResult) SetSchema(v *UpdateSchemaResponseBodyResultSchema) *UpdateSchemaResponseBodyResult {
	s.Schema = v
	return s
}

type UpdateSchemaResponseBodyResultResponses struct {
	Category     *string                                            `json:"Category,omitempty" xml:"Category,omitempty"`
	CategoryName *string                                            `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	Description  *string                                            `json:"Description,omitempty" xml:"Description,omitempty"`
	Properties   *UpdateSchemaResponseBodyResultResponsesProperties `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s UpdateSchemaResponseBodyResultResponses) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaResponseBodyResultResponses) GoString() string {
	return s.String()
}

func (s *UpdateSchemaResponseBodyResultResponses) SetCategory(v string) *UpdateSchemaResponseBodyResultResponses {
	s.Category = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponses) SetCategoryName(v string) *UpdateSchemaResponseBodyResultResponses {
	s.CategoryName = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponses) SetDescription(v string) *UpdateSchemaResponseBodyResultResponses {
	s.Description = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponses) SetProperties(v *UpdateSchemaResponseBodyResultResponsesProperties) *UpdateSchemaResponseBodyResultResponses {
	s.Properties = v
	return s
}

type UpdateSchemaResponseBodyResultResponsesProperties struct {
	Count      *int32                                                         `json:"Count,omitempty" xml:"Count,omitempty"`
	DataSource []*UpdateSchemaResponseBodyResultResponsesPropertiesDataSource `json:"DataSource,omitempty" xml:"DataSource,omitempty" type:"Repeated"`
}

func (s UpdateSchemaResponseBodyResultResponsesProperties) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaResponseBodyResultResponsesProperties) GoString() string {
	return s.String()
}

func (s *UpdateSchemaResponseBodyResultResponsesProperties) SetCount(v int32) *UpdateSchemaResponseBodyResultResponsesProperties {
	s.Count = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponsesProperties) SetDataSource(v []*UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) *UpdateSchemaResponseBodyResultResponsesProperties {
	s.DataSource = v
	return s
}

type UpdateSchemaResponseBodyResultResponsesPropertiesDataSource struct {
	AllowNull  *int32  `json:"AllowNull,omitempty" xml:"AllowNull,omitempty"`
	Annotation *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Field      *string `json:"Field,omitempty" xml:"Field,omitempty"`
	Indexes    *int32  `json:"Indexes,omitempty" xml:"Indexes,omitempty"`
	Key        *int32  `json:"Key,omitempty" xml:"Key,omitempty"`
	Length     *int32  `json:"Length,omitempty" xml:"Length,omitempty"`
	Reg        *string `json:"Reg,omitempty" xml:"Reg,omitempty"`
	Type       *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) GoString() string {
	return s.String()
}

func (s *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) SetAllowNull(v int32) *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.AllowNull = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) SetAnnotation(v string) *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Annotation = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) SetField(v string) *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Field = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) SetIndexes(v int32) *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Indexes = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) SetKey(v int32) *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Key = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) SetLength(v int32) *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Length = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) SetReg(v string) *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Reg = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource) SetType(v string) *UpdateSchemaResponseBodyResultResponsesPropertiesDataSource {
	s.Type = &v
	return s
}

type UpdateSchemaResponseBodyResultSchema struct {
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Id          *int64  `json:"Id,omitempty" xml:"Id,omitempty"`
	IsTemplate  *bool   `json:"IsTemplate,omitempty" xml:"IsTemplate,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	UpdateTime  *int64  `json:"UpdateTime,omitempty" xml:"UpdateTime,omitempty"`
	Version     *int64  `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s UpdateSchemaResponseBodyResultSchema) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaResponseBodyResultSchema) GoString() string {
	return s.String()
}

func (s *UpdateSchemaResponseBodyResultSchema) SetCreateTime(v int64) *UpdateSchemaResponseBodyResultSchema {
	s.CreateTime = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultSchema) SetDescription(v string) *UpdateSchemaResponseBodyResultSchema {
	s.Description = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultSchema) SetId(v int64) *UpdateSchemaResponseBodyResultSchema {
	s.Id = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultSchema) SetIsTemplate(v bool) *UpdateSchemaResponseBodyResultSchema {
	s.IsTemplate = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultSchema) SetName(v string) *UpdateSchemaResponseBodyResultSchema {
	s.Name = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultSchema) SetUpdateTime(v int64) *UpdateSchemaResponseBodyResultSchema {
	s.UpdateTime = &v
	return s
}

func (s *UpdateSchemaResponseBodyResultSchema) SetVersion(v int64) *UpdateSchemaResponseBodyResultSchema {
	s.Version = &v
	return s
}

type UpdateSchemaResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpdateSchemaResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpdateSchemaResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSchemaResponse) GoString() string {
	return s.String()
}

func (s *UpdateSchemaResponse) SetHeaders(v map[string]*string) *UpdateSchemaResponse {
	s.Headers = v
	return s
}

func (s *UpdateSchemaResponse) SetStatusCode(v int32) *UpdateSchemaResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateSchemaResponse) SetBody(v *UpdateSchemaResponseBody) *UpdateSchemaResponse {
	s.Body = v
	return s
}

type UpgradeChaincodeRequest struct {
	// This parameter is required.
	//
	// example:
	//
	// code-sacc-fk9z4r97****
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// string
	CollectionConfig *string `json:"CollectionConfig,omitempty" xml:"CollectionConfig,omitempty"`
	// example:
	//
	// OR ("wholesalerMSP.peer")
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// cn-hangzhou
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	//
	// example:
	//
	// peers-wholesaler-15ix77tof****
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s UpgradeChaincodeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeChaincodeRequest) GoString() string {
	return s.String()
}

func (s *UpgradeChaincodeRequest) SetChaincodeId(v string) *UpgradeChaincodeRequest {
	s.ChaincodeId = &v
	return s
}

func (s *UpgradeChaincodeRequest) SetCollectionConfig(v string) *UpgradeChaincodeRequest {
	s.CollectionConfig = &v
	return s
}

func (s *UpgradeChaincodeRequest) SetEndorsePolicy(v string) *UpgradeChaincodeRequest {
	s.EndorsePolicy = &v
	return s
}

func (s *UpgradeChaincodeRequest) SetLocation(v string) *UpgradeChaincodeRequest {
	s.Location = &v
	return s
}

func (s *UpgradeChaincodeRequest) SetOrganizationId(v string) *UpgradeChaincodeRequest {
	s.OrganizationId = &v
	return s
}

type UpgradeChaincodeResponseBody struct {
	// example:
	//
	// 200
	ErrorCode *int32 `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// example:
	//
	// A6CC6C63-2D71-4D0C-AEBE-E95F0127C514
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result    *UpgradeChaincodeResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// example:
	//
	// true
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpgradeChaincodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeChaincodeResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeChaincodeResponseBody) SetErrorCode(v int32) *UpgradeChaincodeResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpgradeChaincodeResponseBody) SetRequestId(v string) *UpgradeChaincodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeChaincodeResponseBody) SetResult(v *UpgradeChaincodeResponseBodyResult) *UpgradeChaincodeResponseBody {
	s.Result = v
	return s
}

func (s *UpgradeChaincodeResponseBody) SetSuccess(v bool) *UpgradeChaincodeResponseBody {
	s.Success = &v
	return s
}

type UpgradeChaincodeResponseBodyResult struct {
	// example:
	//
	// code-sacc-fk9z4r97****
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// example:
	//
	// cc
	ChannelName *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	// example:
	//
	// consortium-supplychain-1pxzsp5tb****
	ConsortiumId *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	// example:
	//
	// 1545215617000
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// example:
	//
	// 1545215617000
	DeployTime *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	// example:
	//
	// OR ("wholesalerMSP.peer")
	EndorsePolicy *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	// example:
	//
	// {}
	Input *string `json:"Input,omitempty" xml:"Input,omitempty"`
	// example:
	//
	// true
	Install *bool `json:"Install,omitempty" xml:"Install,omitempty"`
	// example:
	//
	// OK
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// example:
	//
	// sacc
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// example:
	//
	// github.com/sacc
	Path *string `json:"Path,omitempty" xml:"Path,omitempty"`
	// example:
	//
	// 1928592
	ProviderId *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	// example:
	//
	// uid-1928592
	ProviderName *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	// example:
	//
	// Running
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// example:
	//
	// 1
	Type *int32 `json:"Type,omitempty" xml:"Type,omitempty"`
	// example:
	//
	// 1.0
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
}

func (s UpgradeChaincodeResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpgradeChaincodeResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpgradeChaincodeResponseBodyResult) SetChaincodeId(v string) *UpgradeChaincodeResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetChannelName(v string) *UpgradeChaincodeResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetConsortiumId(v string) *UpgradeChaincodeResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetCreateTime(v string) *UpgradeChaincodeResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetDeployTime(v string) *UpgradeChaincodeResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetEndorsePolicy(v string) *UpgradeChaincodeResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetInput(v string) *UpgradeChaincodeResponseBodyResult {
	s.Input = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetInstall(v bool) *UpgradeChaincodeResponseBodyResult {
	s.Install = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetMessage(v string) *UpgradeChaincodeResponseBodyResult {
	s.Message = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetName(v string) *UpgradeChaincodeResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetPath(v string) *UpgradeChaincodeResponseBodyResult {
	s.Path = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetProviderId(v string) *UpgradeChaincodeResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetProviderName(v string) *UpgradeChaincodeResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetState(v string) *UpgradeChaincodeResponseBodyResult {
	s.State = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetType(v int32) *UpgradeChaincodeResponseBodyResult {
	s.Type = &v
	return s
}

func (s *UpgradeChaincodeResponseBodyResult) SetVersion(v string) *UpgradeChaincodeResponseBodyResult {
	s.Version = &v
	return s
}

type UpgradeChaincodeResponse struct {
	Headers    map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeChaincodeResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeChaincodeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeChaincodeResponse) GoString() string {
	return s.String()
}

func (s *UpgradeChaincodeResponse) SetHeaders(v map[string]*string) *UpgradeChaincodeResponse {
	s.Headers = v
	return s
}

func (s *UpgradeChaincodeResponse) SetStatusCode(v int32) *UpgradeChaincodeResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeChaincodeResponse) SetBody(v *UpgradeChaincodeResponseBody) *UpgradeChaincodeResponse {
	s.Body = v
	return s
}

type UpgradeFabricChaincodeDefinitionRequest struct {
	// This parameter is required.
	ChaincodeId *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	// This parameter is required.
	ChaincodePackageId *string `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	// This parameter is required.
	ChaincodeVersion *string `json:"ChaincodeVersion,omitempty" xml:"ChaincodeVersion,omitempty"`
	ChannelId        *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	CollectionConfig *string `json:"CollectionConfig,omitempty" xml:"CollectionConfig,omitempty"`
	EndorsePolicy    *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	InitRequired     *bool   `json:"InitRequired,omitempty" xml:"InitRequired,omitempty"`
	Location         *string `json:"Location,omitempty" xml:"Location,omitempty"`
	// This parameter is required.
	OrganizationId *string `json:"OrganizationId,omitempty" xml:"OrganizationId,omitempty"`
}

func (s UpgradeFabricChaincodeDefinitionRequest) String() string {
	return tea.Prettify(s)
}

func (s UpgradeFabricChaincodeDefinitionRequest) GoString() string {
	return s.String()
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetChaincodeId(v string) *UpgradeFabricChaincodeDefinitionRequest {
	s.ChaincodeId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetChaincodePackageId(v string) *UpgradeFabricChaincodeDefinitionRequest {
	s.ChaincodePackageId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetChaincodeVersion(v string) *UpgradeFabricChaincodeDefinitionRequest {
	s.ChaincodeVersion = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetChannelId(v string) *UpgradeFabricChaincodeDefinitionRequest {
	s.ChannelId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetCollectionConfig(v string) *UpgradeFabricChaincodeDefinitionRequest {
	s.CollectionConfig = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetEndorsePolicy(v string) *UpgradeFabricChaincodeDefinitionRequest {
	s.EndorsePolicy = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetInitRequired(v bool) *UpgradeFabricChaincodeDefinitionRequest {
	s.InitRequired = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetLocation(v string) *UpgradeFabricChaincodeDefinitionRequest {
	s.Location = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionRequest) SetOrganizationId(v string) *UpgradeFabricChaincodeDefinitionRequest {
	s.OrganizationId = &v
	return s
}

type UpgradeFabricChaincodeDefinitionResponseBody struct {
	ChaincodeDefinitionId *string                                             `json:"ChaincodeDefinitionId,omitempty" xml:"ChaincodeDefinitionId,omitempty"`
	ChaincodePackageId    *string                                             `json:"ChaincodePackageId,omitempty" xml:"ChaincodePackageId,omitempty"`
	ErrorCode             *int32                                              `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	InitRequired          *bool                                               `json:"InitRequired,omitempty" xml:"InitRequired,omitempty"`
	RequestId             *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Result                *UpgradeFabricChaincodeDefinitionResponseBodyResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	Success               *bool                                               `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpgradeFabricChaincodeDefinitionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpgradeFabricChaincodeDefinitionResponseBody) GoString() string {
	return s.String()
}

func (s *UpgradeFabricChaincodeDefinitionResponseBody) SetChaincodeDefinitionId(v string) *UpgradeFabricChaincodeDefinitionResponseBody {
	s.ChaincodeDefinitionId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBody) SetChaincodePackageId(v string) *UpgradeFabricChaincodeDefinitionResponseBody {
	s.ChaincodePackageId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBody) SetErrorCode(v int32) *UpgradeFabricChaincodeDefinitionResponseBody {
	s.ErrorCode = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBody) SetInitRequired(v bool) *UpgradeFabricChaincodeDefinitionResponseBody {
	s.InitRequired = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBody) SetRequestId(v string) *UpgradeFabricChaincodeDefinitionResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBody) SetResult(v *UpgradeFabricChaincodeDefinitionResponseBodyResult) *UpgradeFabricChaincodeDefinitionResponseBody {
	s.Result = v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBody) SetSuccess(v bool) *UpgradeFabricChaincodeDefinitionResponseBody {
	s.Success = &v
	return s
}

type UpgradeFabricChaincodeDefinitionResponseBodyResult struct {
	ChaincodeId      *string `json:"ChaincodeId,omitempty" xml:"ChaincodeId,omitempty"`
	ChaincodeVersion *string `json:"ChaincodeVersion,omitempty" xml:"ChaincodeVersion,omitempty"`
	ChannelName      *string `json:"ChannelName,omitempty" xml:"ChannelName,omitempty"`
	ConsortiumId     *string `json:"ConsortiumId,omitempty" xml:"ConsortiumId,omitempty"`
	CreateTime       *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	DeployTime       *string `json:"DeployTime,omitempty" xml:"DeployTime,omitempty"`
	EndorsePolicy    *string `json:"EndorsePolicy,omitempty" xml:"EndorsePolicy,omitempty"`
	Input            *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Install          *bool   `json:"Install,omitempty" xml:"Install,omitempty"`
	Message          *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Name             *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Path             *string `json:"Path,omitempty" xml:"Path,omitempty"`
	ProviderId       *string `json:"ProviderId,omitempty" xml:"ProviderId,omitempty"`
	ProviderName     *string `json:"ProviderName,omitempty" xml:"ProviderName,omitempty"`
	State            *string `json:"State,omitempty" xml:"State,omitempty"`
	Type             *int32  `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s UpgradeFabricChaincodeDefinitionResponseBodyResult) String() string {
	return tea.Prettify(s)
}

func (s UpgradeFabricChaincodeDefinitionResponseBodyResult) GoString() string {
	return s.String()
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetChaincodeId(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.ChaincodeId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetChaincodeVersion(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.ChaincodeVersion = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetChannelName(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.ChannelName = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetConsortiumId(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.ConsortiumId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetCreateTime(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.CreateTime = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetDeployTime(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.DeployTime = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetEndorsePolicy(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.EndorsePolicy = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetInput(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.Input = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetInstall(v bool) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.Install = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetMessage(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.Message = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetName(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.Name = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetPath(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.Path = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetProviderId(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.ProviderId = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetProviderName(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.ProviderName = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetState(v string) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.State = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponseBodyResult) SetType(v int32) *UpgradeFabricChaincodeDefinitionResponseBodyResult {
	s.Type = &v
	return s
}

type UpgradeFabricChaincodeDefinitionResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty"`
	Body       *UpgradeFabricChaincodeDefinitionResponseBody `json:"body,omitempty" xml:"body,omitempty"`
}

func (s UpgradeFabricChaincodeDefinitionResponse) String() string {
	return tea.Prettify(s)
}

func (s UpgradeFabricChaincodeDefinitionResponse) GoString() string {
	return s.String()
}

func (s *UpgradeFabricChaincodeDefinitionResponse) SetHeaders(v map[string]*string) *UpgradeFabricChaincodeDefinitionResponse {
	s.Headers = v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponse) SetStatusCode(v int32) *UpgradeFabricChaincodeDefinitionResponse {
	s.StatusCode = &v
	return s
}

func (s *UpgradeFabricChaincodeDefinitionResponse) SetBody(v *UpgradeFabricChaincodeDefinitionResponseBody) *UpgradeFabricChaincodeDefinitionResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.SignatureAlgorithm = tea.String("v2")
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"cn-qingdao":     tea.String("baas.aliyuncs.com"),
		"cn-beijing":     tea.String("baas.aliyuncs.com"),
		"cn-zhangjiakou": tea.String("baas.aliyuncs.com"),
		"cn-huhehaote":   tea.String("baas.aliyuncs.com"),
		"cn-shanghai":    tea.String("baas.aliyuncs.com"),
		"cn-shenzhen":    tea.String("baas.aliyuncs.com"),
		"cn-hongkong":    tea.String("baas.ap-southeast-1.aliyuncs.com"),
		"ap-southeast-2": tea.String("baas.ap-southeast-1.aliyuncs.com"),
		"ap-northeast-1": tea.String("baas.ap-southeast-1.aliyuncs.com"),
		"eu-west-1":      tea.String("baas.ap-southeast-1.aliyuncs.com"),
		"us-west-1":      tea.String("baas.ap-southeast-1.aliyuncs.com"),
		"us-east-1":      tea.String("baas.ap-southeast-1.aliyuncs.com"),
		"eu-central-1":   tea.String("baas.ap-southeast-1.aliyuncs.com"),
		"ap-south-1":     tea.String("baas.ap-southeast-1.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("baas"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AcceptEthereumInvitationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AcceptEthereumInvitationResponse
func (client *Client) AcceptEthereumInvitationWithOptions(request *AcceptEthereumInvitationRequest, runtime *util.RuntimeOptions) (_result *AcceptEthereumInvitationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		body["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.Token)) {
		body["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AcceptEthereumInvitation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AcceptEthereumInvitationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AcceptEthereumInvitationRequest
//
// @return AcceptEthereumInvitationResponse
func (client *Client) AcceptEthereumInvitation(request *AcceptEthereumInvitationRequest) (_result *AcceptEthereumInvitationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AcceptEthereumInvitationResponse{}
	_body, _err := client.AcceptEthereumInvitationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AcceptInvitationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AcceptInvitationResponse
func (client *Client) AcceptInvitationWithOptions(request *AcceptInvitationRequest, runtime *util.RuntimeOptions) (_result *AcceptInvitationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		body["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.IsAccepted)) {
		body["IsAccepted"] = request.IsAccepted
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AcceptInvitation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AcceptInvitationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AcceptInvitationRequest
//
// @return AcceptInvitationResponse
func (client *Client) AcceptInvitation(request *AcceptInvitationRequest) (_result *AcceptInvitationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AcceptInvitationResponse{}
	_body, _err := client.AcceptInvitationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddAntChainSubnetMemberCheckRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddAntChainSubnetMemberCheckResponse
func (client *Client) AddAntChainSubnetMemberCheckWithOptions(request *AddAntChainSubnetMemberCheckRequest, runtime *util.RuntimeOptions) (_result *AddAntChainSubnetMemberCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAntChainSubnetMemberCheck"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAntChainSubnetMemberCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddAntChainSubnetMemberCheckRequest
//
// @return AddAntChainSubnetMemberCheckResponse
func (client *Client) AddAntChainSubnetMemberCheck(request *AddAntChainSubnetMemberCheckRequest) (_result *AddAntChainSubnetMemberCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAntChainSubnetMemberCheckResponse{}
	_body, _err := client.AddAntChainSubnetMemberCheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddAntChainSubnetNodeCheckRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddAntChainSubnetNodeCheckResponse
func (client *Client) AddAntChainSubnetNodeCheckWithOptions(request *AddAntChainSubnetNodeCheckRequest, runtime *util.RuntimeOptions) (_result *AddAntChainSubnetNodeCheckResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddAntChainSubnetNodeCheck"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddAntChainSubnetNodeCheckResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddAntChainSubnetNodeCheckRequest
//
// @return AddAntChainSubnetNodeCheckResponse
func (client *Client) AddAntChainSubnetNodeCheck(request *AddAntChainSubnetNodeCheckRequest) (_result *AddAntChainSubnetNodeCheckResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAntChainSubnetNodeCheckResponse{}
	_body, _err := client.AddAntChainSubnetNodeCheckWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddEthereumNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddEthereumNodeResponse
func (client *Client) AddEthereumNodeWithOptions(request *AddEthereumNodeRequest, runtime *util.RuntimeOptions) (_result *AddEthereumNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EthereumId)) {
		body["EthereumId"] = request.EthereumId
	}

	if !tea.BoolValue(util.IsUnset(request.ExternalNode)) {
		body["ExternalNode"] = request.ExternalNode
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		body["NodeName"] = request.NodeName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddEthereumNode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddEthereumNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddEthereumNodeRequest
//
// @return AddEthereumNodeResponse
func (client *Client) AddEthereumNode(request *AddEthereumNodeRequest) (_result *AddEthereumNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddEthereumNodeResponse{}
	_body, _err := client.AddEthereumNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddFabricExternalOrganizationToChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddFabricExternalOrganizationToChannelResponse
func (client *Client) AddFabricExternalOrganizationToChannelWithOptions(request *AddFabricExternalOrganizationToChannelRequest, runtime *util.RuntimeOptions) (_result *AddFabricExternalOrganizationToChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.JoinRequest)) {
		body["JoinRequest"] = request.JoinRequest
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddFabricExternalOrganizationToChannel"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddFabricExternalOrganizationToChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddFabricExternalOrganizationToChannelRequest
//
// @return AddFabricExternalOrganizationToChannelResponse
func (client *Client) AddFabricExternalOrganizationToChannel(request *AddFabricExternalOrganizationToChannelRequest) (_result *AddFabricExternalOrganizationToChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddFabricExternalOrganizationToChannelResponse{}
	_body, _err := client.AddFabricExternalOrganizationToChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - AddFabricOrganizationToExternalChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return AddFabricOrganizationToExternalChannelResponse
func (client *Client) AddFabricOrganizationToExternalChannelWithOptions(request *AddFabricOrganizationToExternalChannelRequest, runtime *util.RuntimeOptions) (_result *AddFabricOrganizationToExternalChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JoinResponse)) {
		body["JoinResponse"] = request.JoinResponse
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("AddFabricOrganizationToExternalChannel"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddFabricOrganizationToExternalChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - AddFabricOrganizationToExternalChannelRequest
//
// @return AddFabricOrganizationToExternalChannelResponse
func (client *Client) AddFabricOrganizationToExternalChannel(request *AddFabricOrganizationToExternalChannelRequest) (_result *AddFabricOrganizationToExternalChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddFabricOrganizationToExternalChannelResponse{}
	_body, _err := client.AddFabricOrganizationToExternalChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyAntChainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyAntChainResponse
func (client *Client) ApplyAntChainWithOptions(request *ApplyAntChainRequest, runtime *util.RuntimeOptions) (_result *ApplyAntChainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.UploadReq)) {
		body["UploadReq"] = request.UploadReq
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyAntChain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyAntChainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyAntChainRequest
//
// @return ApplyAntChainResponse
func (client *Client) ApplyAntChain(request *ApplyAntChainRequest) (_result *ApplyAntChainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyAntChainResponse{}
	_body, _err := client.ApplyAntChainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyAntChainCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyAntChainCertificateResponse
func (client *Client) ApplyAntChainCertificateWithOptions(request *ApplyAntChainCertificateRequest, runtime *util.RuntimeOptions) (_result *ApplyAntChainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.UploadReq)) {
		body["UploadReq"] = request.UploadReq
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyAntChainCertificate"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyAntChainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyAntChainCertificateRequest
//
// @return ApplyAntChainCertificateResponse
func (client *Client) ApplyAntChainCertificate(request *ApplyAntChainCertificateRequest) (_result *ApplyAntChainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyAntChainCertificateResponse{}
	_body, _err := client.ApplyAntChainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyAntChainCertificateWithKeyAutoCreationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyAntChainCertificateWithKeyAutoCreationResponse
func (client *Client) ApplyAntChainCertificateWithKeyAutoCreationWithOptions(request *ApplyAntChainCertificateWithKeyAutoCreationRequest, runtime *util.RuntimeOptions) (_result *ApplyAntChainCertificateWithKeyAutoCreationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.CommonName)) {
		body["CommonName"] = request.CommonName
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.CountryName)) {
		body["CountryName"] = request.CountryName
	}

	if !tea.BoolValue(util.IsUnset(request.LocalityName)) {
		body["LocalityName"] = request.LocalityName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationName)) {
		body["OrganizationName"] = request.OrganizationName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationUnitName)) {
		body["OrganizationUnitName"] = request.OrganizationUnitName
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.StateOrProvinceName)) {
		body["StateOrProvinceName"] = request.StateOrProvinceName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyAntChainCertificateWithKeyAutoCreation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyAntChainCertificateWithKeyAutoCreationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyAntChainCertificateWithKeyAutoCreationRequest
//
// @return ApplyAntChainCertificateWithKeyAutoCreationResponse
func (client *Client) ApplyAntChainCertificateWithKeyAutoCreation(request *ApplyAntChainCertificateWithKeyAutoCreationRequest) (_result *ApplyAntChainCertificateWithKeyAutoCreationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyAntChainCertificateWithKeyAutoCreationResponse{}
	_body, _err := client.ApplyAntChainCertificateWithKeyAutoCreationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyAntChainWithKeyAutoCreationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyAntChainWithKeyAutoCreationResponse
func (client *Client) ApplyAntChainWithKeyAutoCreationWithOptions(request *ApplyAntChainWithKeyAutoCreationRequest, runtime *util.RuntimeOptions) (_result *ApplyAntChainWithKeyAutoCreationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.CommonName)) {
		body["CommonName"] = request.CommonName
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.CountryName)) {
		body["CountryName"] = request.CountryName
	}

	if !tea.BoolValue(util.IsUnset(request.LocalityName)) {
		body["LocalityName"] = request.LocalityName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationName)) {
		body["OrganizationName"] = request.OrganizationName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationUnitName)) {
		body["OrganizationUnitName"] = request.OrganizationUnitName
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.StateOrProvinceName)) {
		body["StateOrProvinceName"] = request.StateOrProvinceName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyAntChainWithKeyAutoCreation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyAntChainWithKeyAutoCreationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyAntChainWithKeyAutoCreationRequest
//
// @return ApplyAntChainWithKeyAutoCreationResponse
func (client *Client) ApplyAntChainWithKeyAutoCreation(request *ApplyAntChainWithKeyAutoCreationRequest) (_result *ApplyAntChainWithKeyAutoCreationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyAntChainWithKeyAutoCreationResponse{}
	_body, _err := client.ApplyAntChainWithKeyAutoCreationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyBlockchainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyBlockchainResponse
func (client *Client) ApplyBlockchainWithOptions(request *ApplyBlockchainRequest, runtime *util.RuntimeOptions) (_result *ApplyBlockchainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPubKey)) {
		body["AccountPubKey"] = request.AccountPubKey
	}

	if !tea.BoolValue(util.IsUnset(request.AccountRecoverPubKey)) {
		body["AccountRecoverPubKey"] = request.AccountRecoverPubKey
	}

	if !tea.BoolValue(util.IsUnset(request.Blockchain)) {
		body["Blockchain"] = request.Blockchain
	}

	if !tea.BoolValue(util.IsUnset(request.UploadReq)) {
		body["UploadReq"] = request.UploadReq
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyBlockchain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyBlockchainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyBlockchainRequest
//
// @return ApplyBlockchainResponse
func (client *Client) ApplyBlockchain(request *ApplyBlockchainRequest) (_result *ApplyBlockchainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyBlockchainResponse{}
	_body, _err := client.ApplyBlockchainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyBlockchainWithKeyAutoCreationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyBlockchainWithKeyAutoCreationResponse
func (client *Client) ApplyBlockchainWithKeyAutoCreationWithOptions(request *ApplyBlockchainWithKeyAutoCreationRequest, runtime *util.RuntimeOptions) (_result *ApplyBlockchainWithKeyAutoCreationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.CommonName)) {
		body["CommonName"] = request.CommonName
	}

	if !tea.BoolValue(util.IsUnset(request.CountryName)) {
		body["CountryName"] = request.CountryName
	}

	if !tea.BoolValue(util.IsUnset(request.LocalityName)) {
		body["LocalityName"] = request.LocalityName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationName)) {
		body["OrganizationName"] = request.OrganizationName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationUnitName)) {
		body["OrganizationUnitName"] = request.OrganizationUnitName
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.StateOrProvinceName)) {
		body["StateOrProvinceName"] = request.StateOrProvinceName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyBlockchainWithKeyAutoCreation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyBlockchainWithKeyAutoCreationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyBlockchainWithKeyAutoCreationRequest
//
// @return ApplyBlockchainWithKeyAutoCreationResponse
func (client *Client) ApplyBlockchainWithKeyAutoCreation(request *ApplyBlockchainWithKeyAutoCreationRequest) (_result *ApplyBlockchainWithKeyAutoCreationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyBlockchainWithKeyAutoCreationResponse{}
	_body, _err := client.ApplyBlockchainWithKeyAutoCreationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyPublicAntChainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyPublicAntChainResponse
func (client *Client) ApplyPublicAntChainWithOptions(request *ApplyPublicAntChainRequest, runtime *util.RuntimeOptions) (_result *ApplyPublicAntChainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.UploadReq)) {
		body["UploadReq"] = request.UploadReq
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyPublicAntChain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyPublicAntChainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyPublicAntChainRequest
//
// @return ApplyPublicAntChainResponse
func (client *Client) ApplyPublicAntChain(request *ApplyPublicAntChainRequest) (_result *ApplyPublicAntChainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyPublicAntChainResponse{}
	_body, _err := client.ApplyPublicAntChainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApplyPublicAntChainWithKeyAutoCreationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApplyPublicAntChainWithKeyAutoCreationResponse
func (client *Client) ApplyPublicAntChainWithKeyAutoCreationWithOptions(request *ApplyPublicAntChainWithKeyAutoCreationRequest, runtime *util.RuntimeOptions) (_result *ApplyPublicAntChainWithKeyAutoCreationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.CommonName)) {
		body["CommonName"] = request.CommonName
	}

	if !tea.BoolValue(util.IsUnset(request.CountryName)) {
		body["CountryName"] = request.CountryName
	}

	if !tea.BoolValue(util.IsUnset(request.LocalityName)) {
		body["LocalityName"] = request.LocalityName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationName)) {
		body["OrganizationName"] = request.OrganizationName
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationUnitName)) {
		body["OrganizationUnitName"] = request.OrganizationUnitName
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.StateOrProvinceName)) {
		body["StateOrProvinceName"] = request.StateOrProvinceName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApplyPublicAntChainWithKeyAutoCreation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApplyPublicAntChainWithKeyAutoCreationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApplyPublicAntChainWithKeyAutoCreationRequest
//
// @return ApplyPublicAntChainWithKeyAutoCreationResponse
func (client *Client) ApplyPublicAntChainWithKeyAutoCreation(request *ApplyPublicAntChainWithKeyAutoCreationRequest) (_result *ApplyPublicAntChainWithKeyAutoCreationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApplyPublicAntChainWithKeyAutoCreationResponse{}
	_body, _err := client.ApplyPublicAntChainWithKeyAutoCreationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApproveEthereumInviteeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApproveEthereumInviteeResponse
func (client *Client) ApproveEthereumInviteeWithOptions(request *ApproveEthereumInviteeRequest, runtime *util.RuntimeOptions) (_result *ApproveEthereumInviteeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	if !tea.BoolValue(util.IsUnset(request.Invitee)) {
		body["Invitee"] = request.Invitee
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApproveEthereumInvitee"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApproveEthereumInviteeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApproveEthereumInviteeRequest
//
// @return ApproveEthereumInviteeResponse
func (client *Client) ApproveEthereumInvitee(request *ApproveEthereumInviteeRequest) (_result *ApproveEthereumInviteeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApproveEthereumInviteeResponse{}
	_body, _err := client.ApproveEthereumInviteeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ApproveFabricChaincodeDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ApproveFabricChaincodeDefinitionResponse
func (client *Client) ApproveFabricChaincodeDefinitionWithOptions(request *ApproveFabricChaincodeDefinitionRequest, runtime *util.RuntimeOptions) (_result *ApproveFabricChaincodeDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ChaincodePackageId)) {
		body["ChaincodePackageId"] = request.ChaincodePackageId
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ApproveFabricChaincodeDefinition"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ApproveFabricChaincodeDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ApproveFabricChaincodeDefinitionRequest
//
// @return ApproveFabricChaincodeDefinitionResponse
func (client *Client) ApproveFabricChaincodeDefinition(request *ApproveFabricChaincodeDefinitionRequest) (_result *ApproveFabricChaincodeDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ApproveFabricChaincodeDefinitionResponse{}
	_body, _err := client.ApproveFabricChaincodeDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param tmpReq - BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse
func (client *Client) BatchAddAntChainMiniAppQRCodeAuthorizedUsersWithOptions(tmpReq *BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest, runtime *util.RuntimeOptions) (_result *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &BatchAddAntChainMiniAppQRCodeAuthorizedUsersShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tmpReq.PhoneList)) {
		request.PhoneListShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tmpReq.PhoneList, tea.String("PhoneList"), tea.String("json"))
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.PhoneListShrink)) {
		body["PhoneList"] = request.PhoneListShrink
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BatchAddAntChainMiniAppQRCodeAuthorizedUsers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest
//
// @return BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse
func (client *Client) BatchAddAntChainMiniAppQRCodeAuthorizedUsers(request *BatchAddAntChainMiniAppQRCodeAuthorizedUsersRequest) (_result *BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BatchAddAntChainMiniAppQRCodeAuthorizedUsersResponse{}
	_body, _err := client.BatchAddAntChainMiniAppQRCodeAuthorizedUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - BindFabricManagementChaincodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return BindFabricManagementChaincodeResponse
func (client *Client) BindFabricManagementChaincodeWithOptions(request *BindFabricManagementChaincodeRequest, runtime *util.RuntimeOptions) (_result *BindFabricManagementChaincodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("BindFabricManagementChaincode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &BindFabricManagementChaincodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - BindFabricManagementChaincodeRequest
//
// @return BindFabricManagementChaincodeResponse
func (client *Client) BindFabricManagementChaincode(request *BindFabricManagementChaincodeRequest) (_result *BindFabricManagementChaincodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindFabricManagementChaincodeResponse{}
	_body, _err := client.BindFabricManagementChaincodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CheckConsortiumDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckConsortiumDomainResponse
func (client *Client) CheckConsortiumDomainWithOptions(request *CheckConsortiumDomainRequest, runtime *util.RuntimeOptions) (_result *CheckConsortiumDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DomainCode)) {
		body["DomainCode"] = request.DomainCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckConsortiumDomain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckConsortiumDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CheckConsortiumDomainRequest
//
// @return CheckConsortiumDomainResponse
func (client *Client) CheckConsortiumDomain(request *CheckConsortiumDomainRequest) (_result *CheckConsortiumDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckConsortiumDomainResponse{}
	_body, _err := client.CheckConsortiumDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CheckOrganizationDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CheckOrganizationDomainResponse
func (client *Client) CheckOrganizationDomainWithOptions(request *CheckOrganizationDomainRequest, runtime *util.RuntimeOptions) (_result *CheckOrganizationDomainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		body["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.DomainCode)) {
		body["DomainCode"] = request.DomainCode
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CheckOrganizationDomain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CheckOrganizationDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CheckOrganizationDomainRequest
//
// @return CheckOrganizationDomainResponse
func (client *Client) CheckOrganizationDomain(request *CheckOrganizationDomainRequest) (_result *CheckOrganizationDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckOrganizationDomainResponse{}
	_body, _err := client.CheckOrganizationDomainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ConfirmConsortiumMemberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ConfirmConsortiumMemberResponse
func (client *Client) ConfirmConsortiumMemberWithOptions(request *ConfirmConsortiumMemberRequest, runtime *util.RuntimeOptions) (_result *ConfirmConsortiumMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Organization)) {
		query["Organization"] = request.Organization
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ConfirmConsortiumMember"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ConfirmConsortiumMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ConfirmConsortiumMemberRequest
//
// @return ConfirmConsortiumMemberResponse
func (client *Client) ConfirmConsortiumMember(request *ConfirmConsortiumMemberRequest) (_result *ConfirmConsortiumMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ConfirmConsortiumMemberResponse{}
	_body, _err := client.ConfirmConsortiumMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CopyAntChainContractProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CopyAntChainContractProjectResponse
func (client *Client) CopyAntChainContractProjectWithOptions(request *CopyAntChainContractProjectRequest, runtime *util.RuntimeOptions) (_result *CopyAntChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectDescription)) {
		body["ProjectDescription"] = request.ProjectDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectVersion)) {
		body["ProjectVersion"] = request.ProjectVersion
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CopyAntChainContractProject"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CopyAntChainContractProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CopyAntChainContractProjectRequest
//
// @return CopyAntChainContractProjectResponse
func (client *Client) CopyAntChainContractProject(request *CopyAntChainContractProjectRequest) (_result *CopyAntChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CopyAntChainContractProjectResponse{}
	_body, _err := client.CopyAntChainContractProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAccessTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAccessTokenResponse
func (client *Client) CreateAccessTokenWithOptions(request *CreateAccessTokenRequest, runtime *util.RuntimeOptions) (_result *CreateAccessTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccessTokenLifetime)) {
		body["AccessTokenLifetime"] = request.AccessTokenLifetime
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.RefreshTokenLifetime)) {
		body["RefreshTokenLifetime"] = request.RefreshTokenLifetime
	}

	if !tea.BoolValue(util.IsUnset(request.Scope)) {
		body["Scope"] = request.Scope
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAccessToken"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAccessTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAccessTokenRequest
//
// @return CreateAccessTokenResponse
func (client *Client) CreateAccessToken(request *CreateAccessTokenRequest) (_result *CreateAccessTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAccessTokenResponse{}
	_body, _err := client.CreateAccessTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAccountResponse
func (client *Client) CreateAccountWithOptions(request *CreateAccountRequest, runtime *util.RuntimeOptions) (_result *CreateAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPubKey)) {
		body["AccountPubKey"] = request.AccountPubKey
	}

	if !tea.BoolValue(util.IsUnset(request.AccountRecoverPubKey)) {
		body["AccountRecoverPubKey"] = request.AccountRecoverPubKey
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAccount"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAccountRequest
//
// @return CreateAccountResponse
func (client *Client) CreateAccount(request *CreateAccountRequest) (_result *CreateAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAccountResponse{}
	_body, _err := client.CreateAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAccountWithKeyPairAutoCreationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAccountWithKeyPairAutoCreationResponse
func (client *Client) CreateAccountWithKeyPairAutoCreationWithOptions(request *CreateAccountWithKeyPairAutoCreationRequest, runtime *util.RuntimeOptions) (_result *CreateAccountWithKeyPairAutoCreationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAccountWithKeyPairAutoCreation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAccountWithKeyPairAutoCreationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAccountWithKeyPairAutoCreationRequest
//
// @return CreateAccountWithKeyPairAutoCreationResponse
func (client *Client) CreateAccountWithKeyPairAutoCreation(request *CreateAccountWithKeyPairAutoCreationRequest) (_result *CreateAccountWithKeyPairAutoCreationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAccountWithKeyPairAutoCreationResponse{}
	_body, _err := client.CreateAccountWithKeyPairAutoCreationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAntChainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAntChainResponse
func (client *Client) CreateAntChainWithOptions(request *CreateAntChainRequest, runtime *util.RuntimeOptions) (_result *CreateAntChainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainName)) {
		body["AntChainName"] = request.AntChainName
	}

	if !tea.BoolValue(util.IsUnset(request.BlockchainRegionId)) {
		body["BlockchainRegionId"] = request.BlockchainRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.CipherSuit)) {
		body["CipherSuit"] = request.CipherSuit
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.LiveTime)) {
		body["LiveTime"] = request.LiveTime
	}

	if !tea.BoolValue(util.IsUnset(request.MerkleTreeSuit)) {
		body["MerkleTreeSuit"] = request.MerkleTreeSuit
	}

	if !tea.BoolValue(util.IsUnset(request.NodeNum)) {
		body["NodeNum"] = request.NodeNum
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceSize)) {
		body["ResourceSize"] = request.ResourceSize
	}

	if !tea.BoolValue(util.IsUnset(request.TlsAlgo)) {
		body["TlsAlgo"] = request.TlsAlgo
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAntChain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAntChainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAntChainRequest
//
// @return CreateAntChainResponse
func (client *Client) CreateAntChain(request *CreateAntChainRequest) (_result *CreateAntChainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAntChainResponse{}
	_body, _err := client.CreateAntChainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAntChainAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAntChainAccountResponse
func (client *Client) CreateAntChainAccountWithOptions(request *CreateAntChainAccountRequest, runtime *util.RuntimeOptions) (_result *CreateAntChainAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPubKey)) {
		body["AccountPubKey"] = request.AccountPubKey
	}

	if !tea.BoolValue(util.IsUnset(request.AccountRecoverPubKey)) {
		body["AccountRecoverPubKey"] = request.AccountRecoverPubKey
	}

	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAntChainAccount"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAntChainAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAntChainAccountRequest
//
// @return CreateAntChainAccountResponse
func (client *Client) CreateAntChainAccount(request *CreateAntChainAccountRequest) (_result *CreateAntChainAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAntChainAccountResponse{}
	_body, _err := client.CreateAntChainAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAntChainAccountWithKeyPairAutoCreationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAntChainAccountWithKeyPairAutoCreationResponse
func (client *Client) CreateAntChainAccountWithKeyPairAutoCreationWithOptions(request *CreateAntChainAccountWithKeyPairAutoCreationRequest, runtime *util.RuntimeOptions) (_result *CreateAntChainAccountWithKeyPairAutoCreationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RecoverPassword)) {
		body["RecoverPassword"] = request.RecoverPassword
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAntChainAccountWithKeyPairAutoCreation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAntChainAccountWithKeyPairAutoCreationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAntChainAccountWithKeyPairAutoCreationRequest
//
// @return CreateAntChainAccountWithKeyPairAutoCreationResponse
func (client *Client) CreateAntChainAccountWithKeyPairAutoCreation(request *CreateAntChainAccountWithKeyPairAutoCreationRequest) (_result *CreateAntChainAccountWithKeyPairAutoCreationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAntChainAccountWithKeyPairAutoCreationResponse{}
	_body, _err := client.CreateAntChainAccountWithKeyPairAutoCreationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAntChainConsortiumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAntChainConsortiumResponse
func (client *Client) CreateAntChainConsortiumWithOptions(request *CreateAntChainConsortiumRequest, runtime *util.RuntimeOptions) (_result *CreateAntChainConsortiumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumDescription)) {
		body["ConsortiumDescription"] = request.ConsortiumDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumName)) {
		body["ConsortiumName"] = request.ConsortiumName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAntChainConsortium"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAntChainConsortiumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAntChainConsortiumRequest
//
// @return CreateAntChainConsortiumResponse
func (client *Client) CreateAntChainConsortium(request *CreateAntChainConsortiumRequest) (_result *CreateAntChainConsortiumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAntChainConsortiumResponse{}
	_body, _err := client.CreateAntChainConsortiumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAntChainContractContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAntChainContractContentResponse
func (client *Client) CreateAntChainContractContentWithOptions(request *CreateAntChainContractContentRequest, runtime *util.RuntimeOptions) (_result *CreateAntChainContractContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.ContentName)) {
		body["ContentName"] = request.ContentName
	}

	if !tea.BoolValue(util.IsUnset(request.IsDirectory)) {
		body["IsDirectory"] = request.IsDirectory
	}

	if !tea.BoolValue(util.IsUnset(request.ParentContentId)) {
		body["ParentContentId"] = request.ParentContentId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAntChainContractContent"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAntChainContractContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAntChainContractContentRequest
//
// @return CreateAntChainContractContentResponse
func (client *Client) CreateAntChainContractContent(request *CreateAntChainContractContentRequest) (_result *CreateAntChainContractContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAntChainContractContentResponse{}
	_body, _err := client.CreateAntChainContractContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateAntChainContractProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateAntChainContractProjectResponse
func (client *Client) CreateAntChainContractProjectWithOptions(request *CreateAntChainContractProjectRequest, runtime *util.RuntimeOptions) (_result *CreateAntChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectDescription)) {
		body["ProjectDescription"] = request.ProjectDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectVersion)) {
		body["ProjectVersion"] = request.ProjectVersion
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAntChainContractProject"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAntChainContractProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateAntChainContractProjectRequest
//
// @return CreateAntChainContractProjectResponse
func (client *Client) CreateAntChainContractProject(request *CreateAntChainContractProjectRequest) (_result *CreateAntChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAntChainContractProjectResponse{}
	_body, _err := client.CreateAntChainContractProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateBlockchainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBlockchainResponse
func (client *Client) CreateBlockchainWithOptions(request *CreateBlockchainRequest, runtime *util.RuntimeOptions) (_result *CreateBlockchainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.BlockchainRegionId)) {
		body["BlockchainRegionId"] = request.BlockchainRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.BlockchainType)) {
		body["BlockchainType"] = request.BlockchainType
	}

	if !tea.BoolValue(util.IsUnset(request.CipherSuit)) {
		body["CipherSuit"] = request.CipherSuit
	}

	if !tea.BoolValue(util.IsUnset(request.LiveTime)) {
		body["LiveTime"] = request.LiveTime
	}

	if !tea.BoolValue(util.IsUnset(request.MachineNum)) {
		body["MachineNum"] = request.MachineNum
	}

	if !tea.BoolValue(util.IsUnset(request.MerkleTreeSuit)) {
		body["MerkleTreeSuit"] = request.MerkleTreeSuit
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.TlsAlgo)) {
		body["TlsAlgo"] = request.TlsAlgo
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBlockchain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBlockchainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateBlockchainRequest
//
// @return CreateBlockchainResponse
func (client *Client) CreateBlockchain(request *CreateBlockchainRequest) (_result *CreateBlockchainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBlockchainResponse{}
	_body, _err := client.CreateBlockchainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateBlockchainApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBlockchainApplicationResponse
func (client *Client) CreateBlockchainApplicationWithOptions(request *CreateBlockchainApplicationRequest, runtime *util.RuntimeOptions) (_result *CreateBlockchainApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.BlockchainRegionId)) {
		body["BlockchainRegionId"] = request.BlockchainRegionId
	}

	if !tea.BoolValue(util.IsUnset(request.BlockchainType)) {
		body["BlockchainType"] = request.BlockchainType
	}

	if !tea.BoolValue(util.IsUnset(request.CipherSuit)) {
		body["CipherSuit"] = request.CipherSuit
	}

	if !tea.BoolValue(util.IsUnset(request.LiveTime)) {
		body["LiveTime"] = request.LiveTime
	}

	if !tea.BoolValue(util.IsUnset(request.MachineNum)) {
		body["MachineNum"] = request.MachineNum
	}

	if !tea.BoolValue(util.IsUnset(request.MerkleTreeSuit)) {
		body["MerkleTreeSuit"] = request.MerkleTreeSuit
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.TlsAlgo)) {
		body["TlsAlgo"] = request.TlsAlgo
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBlockchainApplication"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBlockchainApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateBlockchainApplicationRequest
//
// @return CreateBlockchainApplicationResponse
func (client *Client) CreateBlockchainApplication(request *CreateBlockchainApplicationRequest) (_result *CreateBlockchainApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBlockchainApplicationResponse{}
	_body, _err := client.CreateBlockchainApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateBlockchainApplyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateBlockchainApplyResponse
func (client *Client) CreateBlockchainApplyWithOptions(request *CreateBlockchainApplyRequest, runtime *util.RuntimeOptions) (_result *CreateBlockchainApplyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.LiveTime)) {
		body["LiveTime"] = request.LiveTime
	}

	if !tea.BoolValue(util.IsUnset(request.MachineNum)) {
		body["MachineNum"] = request.MachineNum
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateBlockchainApply"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateBlockchainApplyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateBlockchainApplyRequest
//
// @return CreateBlockchainApplyResponse
func (client *Client) CreateBlockchainApply(request *CreateBlockchainApplyRequest) (_result *CreateBlockchainApplyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateBlockchainApplyResponse{}
	_body, _err := client.CreateBlockchainApplyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateChaincodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateChaincodeResponse
func (client *Client) CreateChaincodeWithOptions(request *CreateChaincodeRequest, runtime *util.RuntimeOptions) (_result *CreateChaincodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.EndorsePolicy)) {
		body["EndorsePolicy"] = request.EndorsePolicy
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		body["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssUrl)) {
		body["OssUrl"] = request.OssUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateChaincode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateChaincodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateChaincodeRequest
//
// @return CreateChaincodeResponse
func (client *Client) CreateChaincode(request *CreateChaincodeRequest) (_result *CreateChaincodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateChaincodeResponse{}
	_body, _err := client.CreateChaincodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateChannelResponse
func (client *Client) CreateChannelWithOptions(request *CreateChannelRequest, runtime *util.RuntimeOptions) (_result *CreateChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelName)) {
		query["ChannelName"] = request.ChannelName
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Organization)) {
		query["Organization"] = request.Organization
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BatchTimeout)) {
		body["BatchTimeout"] = request.BatchTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.MaxMessageCount)) {
		body["MaxMessageCount"] = request.MaxMessageCount
	}

	if !tea.BoolValue(util.IsUnset(request.PreferredMaxBytes)) {
		body["PreferredMaxBytes"] = request.PreferredMaxBytes
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateChannel"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateChannelRequest
//
// @return CreateChannelResponse
func (client *Client) CreateChannel(request *CreateChannelRequest) (_result *CreateChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateChannelResponse{}
	_body, _err := client.CreateChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateChannelMemberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateChannelMemberResponse
func (client *Client) CreateChannelMemberWithOptions(request *CreateChannelMemberRequest, runtime *util.RuntimeOptions) (_result *CreateChannelMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Organization)) {
		query["Organization"] = request.Organization
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateChannelMember"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateChannelMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateChannelMemberRequest
//
// @return CreateChannelMemberResponse
func (client *Client) CreateChannelMember(request *CreateChannelMemberRequest) (_result *CreateChannelMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateChannelMemberResponse{}
	_body, _err := client.CreateChannelMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateCloudIntegrationServiceTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCloudIntegrationServiceTokenResponse
func (client *Client) CreateCloudIntegrationServiceTokenWithOptions(request *CreateCloudIntegrationServiceTokenRequest, runtime *util.RuntimeOptions) (_result *CreateCloudIntegrationServiceTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Service)) {
		query["Service"] = request.Service
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCloudIntegrationServiceToken"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCloudIntegrationServiceTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateCloudIntegrationServiceTokenRequest
//
// @return CreateCloudIntegrationServiceTokenResponse
func (client *Client) CreateCloudIntegrationServiceToken(request *CreateCloudIntegrationServiceTokenRequest) (_result *CreateCloudIntegrationServiceTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCloudIntegrationServiceTokenResponse{}
	_body, _err := client.CreateCloudIntegrationServiceTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateCloudServiceIntegrationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCloudServiceIntegrationResponse
func (client *Client) CreateCloudServiceIntegrationWithOptions(request *CreateCloudServiceIntegrationRequest, runtime *util.RuntimeOptions) (_result *CreateCloudServiceIntegrationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCloudServiceIntegration"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCloudServiceIntegrationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateCloudServiceIntegrationRequest
//
// @return CreateCloudServiceIntegrationResponse
func (client *Client) CreateCloudServiceIntegration(request *CreateCloudServiceIntegrationRequest) (_result *CreateCloudServiceIntegrationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCloudServiceIntegrationResponse{}
	_body, _err := client.CreateCloudServiceIntegrationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateCloudServiceSessionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateCloudServiceSessionResponse
func (client *Client) CreateCloudServiceSessionWithOptions(request *CreateCloudServiceSessionRequest, runtime *util.RuntimeOptions) (_result *CreateCloudServiceSessionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCloudServiceSession"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCloudServiceSessionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateCloudServiceSessionRequest
//
// @return CreateCloudServiceSessionResponse
func (client *Client) CreateCloudServiceSession(request *CreateCloudServiceSessionRequest) (_result *CreateCloudServiceSessionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCloudServiceSessionResponse{}
	_body, _err := client.CreateCloudServiceSessionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateConsortiumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateConsortiumResponse
func (client *Client) CreateConsortiumWithOptions(request *CreateConsortiumRequest, runtime *util.RuntimeOptions) (_result *CreateConsortiumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelPolicy)) {
		body["ChannelPolicy"] = request.ChannelPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		body["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		body["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.MajorVersion)) {
		body["MajorVersion"] = request.MajorVersion
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OrdererType)) {
		body["OrdererType"] = request.OrdererType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderersCount)) {
		body["OrderersCount"] = request.OrderersCount
	}

	if !tea.BoolValue(util.IsUnset(request.Organization)) {
		body["Organization"] = request.Organization
	}

	if !tea.BoolValue(util.IsUnset(request.PeersCount)) {
		body["PeersCount"] = request.PeersCount
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		body["PricingCycle"] = request.PricingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.SpecName)) {
		body["SpecName"] = request.SpecName
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		body["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateConsortium"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateConsortiumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateConsortiumRequest
//
// @return CreateConsortiumResponse
func (client *Client) CreateConsortium(request *CreateConsortiumRequest) (_result *CreateConsortiumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConsortiumResponse{}
	_body, _err := client.CreateConsortiumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateConsortiumMemberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateConsortiumMemberResponse
func (client *Client) CreateConsortiumMemberWithOptions(request *CreateConsortiumMemberRequest, runtime *util.RuntimeOptions) (_result *CreateConsortiumMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		query["Code"] = request.Code
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Organization)) {
		query["Organization"] = request.Organization
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateConsortiumMember"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateConsortiumMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateConsortiumMemberRequest
//
// @return CreateConsortiumMemberResponse
func (client *Client) CreateConsortiumMember(request *CreateConsortiumMemberRequest) (_result *CreateConsortiumMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateConsortiumMemberResponse{}
	_body, _err := client.CreateConsortiumMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateEcosphereRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEcosphereResponse
func (client *Client) CreateEcosphereWithOptions(request *CreateEcosphereRequest, runtime *util.RuntimeOptions) (_result *CreateEcosphereResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelPolicy)) {
		body["ChannelPolicy"] = request.ChannelPolicy
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumName)) {
		body["ConsortiumName"] = request.ConsortiumName
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		body["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.MajorVersion)) {
		body["MajorVersion"] = request.MajorVersion
	}

	if !tea.BoolValue(util.IsUnset(request.OrdererDomain)) {
		body["OrdererDomain"] = request.OrdererDomain
	}

	if !tea.BoolValue(util.IsUnset(request.OrdererType)) {
		body["OrdererType"] = request.OrdererType
	}

	if !tea.BoolValue(util.IsUnset(request.OrderersCount)) {
		body["OrderersCount"] = request.OrderersCount
	}

	if !tea.BoolValue(util.IsUnset(request.Organization)) {
		body["Organization"] = request.Organization
	}

	if !tea.BoolValue(util.IsUnset(request.PeersCount)) {
		body["PeersCount"] = request.PeersCount
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		body["PricingCycle"] = request.PricingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.SpecName)) {
		body["SpecName"] = request.SpecName
	}

	if !tea.BoolValue(util.IsUnset(request.ZoneId)) {
		body["ZoneId"] = request.ZoneId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEcosphere"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEcosphereResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateEcosphereRequest
//
// @return CreateEcosphereResponse
func (client *Client) CreateEcosphere(request *CreateEcosphereRequest) (_result *CreateEcosphereResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEcosphereResponse{}
	_body, _err := client.CreateEcosphereWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateEthereumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEthereumResponse
func (client *Client) CreateEthereumWithOptions(request *CreateEthereumRequest, runtime *util.RuntimeOptions) (_result *CreateEthereumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Consensus)) {
		body["Consensus"] = request.Consensus
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Difficulty)) {
		body["Difficulty"] = request.Difficulty
	}

	if !tea.BoolValue(util.IsUnset(request.Gas)) {
		body["Gas"] = request.Gas
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkId)) {
		body["NetworkId"] = request.NetworkId
	}

	if !tea.BoolValue(util.IsUnset(request.Node)) {
		body["Node"] = request.Node
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		body["Region"] = request.Region
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEthereum"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEthereumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateEthereumRequest
//
// @return CreateEthereumResponse
func (client *Client) CreateEthereum(request *CreateEthereumRequest) (_result *CreateEthereumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEthereumResponse{}
	_body, _err := client.CreateEthereumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateEthereumInvitationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateEthereumInvitationResponse
func (client *Client) CreateEthereumInvitationWithOptions(request *CreateEthereumInvitationRequest, runtime *util.RuntimeOptions) (_result *CreateEthereumInvitationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EthereumId)) {
		body["EthereumId"] = request.EthereumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateEthereumInvitation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateEthereumInvitationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateEthereumInvitationRequest
//
// @return CreateEthereumInvitationResponse
func (client *Client) CreateEthereumInvitation(request *CreateEthereumInvitationRequest) (_result *CreateEthereumInvitationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateEthereumInvitationResponse{}
	_body, _err := client.CreateEthereumInvitationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateFabricChaincodePackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateFabricChaincodePackageResponse
func (client *Client) CreateFabricChaincodePackageWithOptions(request *CreateFabricChaincodePackageRequest, runtime *util.RuntimeOptions) (_result *CreateFabricChaincodePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.OssBucket)) {
		body["OssBucket"] = request.OssBucket
	}

	if !tea.BoolValue(util.IsUnset(request.OssUrl)) {
		body["OssUrl"] = request.OssUrl
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateFabricChaincodePackage"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateFabricChaincodePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateFabricChaincodePackageRequest
//
// @return CreateFabricChaincodePackageResponse
func (client *Client) CreateFabricChaincodePackage(request *CreateFabricChaincodePackageRequest) (_result *CreateFabricChaincodePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFabricChaincodePackageResponse{}
	_body, _err := client.CreateFabricChaincodePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateOrganizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrganizationResponse
func (client *Client) CreateOrganizationWithOptions(request *CreateOrganizationRequest, runtime *util.RuntimeOptions) (_result *CreateOrganizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Domain)) {
		query["Domain"] = request.Domain
	}

	if !tea.BoolValue(util.IsUnset(request.Duration)) {
		query["Duration"] = request.Duration
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		query["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.PeersCount)) {
		query["PeersCount"] = request.PeersCount
	}

	if !tea.BoolValue(util.IsUnset(request.PricingCycle)) {
		query["PricingCycle"] = request.PricingCycle
	}

	if !tea.BoolValue(util.IsUnset(request.SpecName)) {
		query["SpecName"] = request.SpecName
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.MajorVersion)) {
		body["MajorVersion"] = request.MajorVersion
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrganization"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrganizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateOrganizationRequest
//
// @return CreateOrganizationResponse
func (client *Client) CreateOrganization(request *CreateOrganizationRequest) (_result *CreateOrganizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrganizationResponse{}
	_body, _err := client.CreateOrganizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateOrganizationUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOrganizationUserResponse
func (client *Client) CreateOrganizationUserWithOptions(request *CreateOrganizationUserRequest, runtime *util.RuntimeOptions) (_result *CreateOrganizationUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Attrs)) {
		body["Attrs"] = request.Attrs
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		body["Username"] = request.Username
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOrganizationUser"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOrganizationUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateOrganizationUserRequest
//
// @return CreateOrganizationUserResponse
func (client *Client) CreateOrganizationUser(request *CreateOrganizationUserRequest) (_result *CreateOrganizationUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOrganizationUserResponse{}
	_body, _err := client.CreateOrganizationUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateOwnAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateOwnAccountResponse
func (client *Client) CreateOwnAccountWithOptions(request *CreateOwnAccountRequest, runtime *util.RuntimeOptions) (_result *CreateOwnAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Identity)) {
		body["Identity"] = request.Identity
	}

	if !tea.BoolValue(util.IsUnset(request.PublicKey)) {
		body["PublicKey"] = request.PublicKey
	}

	if !tea.BoolValue(util.IsUnset(request.RecoveryKey)) {
		body["RecoveryKey"] = request.RecoveryKey
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateOwnAccount"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateOwnAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateOwnAccountRequest
//
// @return CreateOwnAccountResponse
func (client *Client) CreateOwnAccount(request *CreateOwnAccountRequest) (_result *CreateOwnAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateOwnAccountResponse{}
	_body, _err := client.CreateOwnAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreatePublicAccountWithKeyPairAutoCreationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePublicAccountWithKeyPairAutoCreationResponse
func (client *Client) CreatePublicAccountWithKeyPairAutoCreationWithOptions(request *CreatePublicAccountWithKeyPairAutoCreationRequest, runtime *util.RuntimeOptions) (_result *CreatePublicAccountWithKeyPairAutoCreationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.RecoverPassword)) {
		body["RecoverPassword"] = request.RecoverPassword
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePublicAccountWithKeyPairAutoCreation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePublicAccountWithKeyPairAutoCreationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreatePublicAccountWithKeyPairAutoCreationRequest
//
// @return CreatePublicAccountWithKeyPairAutoCreationResponse
func (client *Client) CreatePublicAccountWithKeyPairAutoCreation(request *CreatePublicAccountWithKeyPairAutoCreationRequest) (_result *CreatePublicAccountWithKeyPairAutoCreationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePublicAccountWithKeyPairAutoCreationResponse{}
	_body, _err := client.CreatePublicAccountWithKeyPairAutoCreationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreatePublicAntChainAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreatePublicAntChainAccountResponse
func (client *Client) CreatePublicAntChainAccountWithOptions(request *CreatePublicAntChainAccountRequest, runtime *util.RuntimeOptions) (_result *CreatePublicAntChainAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.AccountPubKey)) {
		body["AccountPubKey"] = request.AccountPubKey
	}

	if !tea.BoolValue(util.IsUnset(request.AccountRecoverPubKey)) {
		body["AccountRecoverPubKey"] = request.AccountRecoverPubKey
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreatePublicAntChainAccount"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreatePublicAntChainAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreatePublicAntChainAccountRequest
//
// @return CreatePublicAntChainAccountResponse
func (client *Client) CreatePublicAntChainAccount(request *CreatePublicAntChainAccountRequest) (_result *CreatePublicAntChainAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreatePublicAntChainAccountResponse{}
	_body, _err := client.CreatePublicAntChainAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateSmartContractJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateSmartContractJobResponse
func (client *Client) CreateSmartContractJobWithOptions(runtime *util.RuntimeOptions) (_result *CreateSmartContractJobResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("CreateSmartContractJob"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateSmartContractJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return CreateSmartContractJobResponse
func (client *Client) CreateSmartContractJob() (_result *CreateSmartContractJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSmartContractJobResponse{}
	_body, _err := client.CreateSmartContractJobWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - CreateTriggerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return CreateTriggerResponse
func (client *Client) CreateTriggerWithOptions(request *CreateTriggerRequest, runtime *util.RuntimeOptions) (_result *CreateTriggerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Options)) {
		body["Options"] = request.Options
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		body["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		body["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateTrigger"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateTriggerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - CreateTriggerRequest
//
// @return CreateTriggerResponse
func (client *Client) CreateTrigger(request *CreateTriggerRequest) (_result *CreateTriggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateTriggerResponse{}
	_body, _err := client.CreateTriggerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteAntChainConsortiumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAntChainConsortiumResponse
func (client *Client) DeleteAntChainConsortiumWithOptions(request *DeleteAntChainConsortiumRequest, runtime *util.RuntimeOptions) (_result *DeleteAntChainConsortiumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAntChainConsortium"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAntChainConsortiumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteAntChainConsortiumRequest
//
// @return DeleteAntChainConsortiumResponse
func (client *Client) DeleteAntChainConsortium(request *DeleteAntChainConsortiumRequest) (_result *DeleteAntChainConsortiumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAntChainConsortiumResponse{}
	_body, _err := client.DeleteAntChainConsortiumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteAntChainContractContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAntChainContractContentResponse
func (client *Client) DeleteAntChainContractContentWithOptions(request *DeleteAntChainContractContentRequest, runtime *util.RuntimeOptions) (_result *DeleteAntChainContractContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ContentId)) {
		body["ContentId"] = request.ContentId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAntChainContractContent"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAntChainContractContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteAntChainContractContentRequest
//
// @return DeleteAntChainContractContentResponse
func (client *Client) DeleteAntChainContractContent(request *DeleteAntChainContractContentRequest) (_result *DeleteAntChainContractContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAntChainContractContentResponse{}
	_body, _err := client.DeleteAntChainContractContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteAntChainContractProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAntChainContractProjectResponse
func (client *Client) DeleteAntChainContractProjectWithOptions(request *DeleteAntChainContractProjectRequest, runtime *util.RuntimeOptions) (_result *DeleteAntChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAntChainContractProject"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAntChainContractProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteAntChainContractProjectRequest
//
// @return DeleteAntChainContractProjectResponse
func (client *Client) DeleteAntChainContractProject(request *DeleteAntChainContractProjectRequest) (_result *DeleteAntChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAntChainContractProjectResponse{}
	_body, _err := client.DeleteAntChainContractProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteAntChainMiniAppQRCodeAuthorizedUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteAntChainMiniAppQRCodeAuthorizedUserResponse
func (client *Client) DeleteAntChainMiniAppQRCodeAuthorizedUserWithOptions(request *DeleteAntChainMiniAppQRCodeAuthorizedUserRequest, runtime *util.RuntimeOptions) (_result *DeleteAntChainMiniAppQRCodeAuthorizedUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.Phone)) {
		body["Phone"] = request.Phone
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteAntChainMiniAppQRCodeAuthorizedUser"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteAntChainMiniAppQRCodeAuthorizedUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteAntChainMiniAppQRCodeAuthorizedUserRequest
//
// @return DeleteAntChainMiniAppQRCodeAuthorizedUserResponse
func (client *Client) DeleteAntChainMiniAppQRCodeAuthorizedUser(request *DeleteAntChainMiniAppQRCodeAuthorizedUserRequest) (_result *DeleteAntChainMiniAppQRCodeAuthorizedUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteAntChainMiniAppQRCodeAuthorizedUserResponse{}
	_body, _err := client.DeleteAntChainMiniAppQRCodeAuthorizedUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteChaincodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteChaincodeResponse
func (client *Client) DeleteChaincodeWithOptions(request *DeleteChaincodeRequest, runtime *util.RuntimeOptions) (_result *DeleteChaincodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteChaincode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteChaincodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteChaincodeRequest
//
// @return DeleteChaincodeResponse
func (client *Client) DeleteChaincode(request *DeleteChaincodeRequest) (_result *DeleteChaincodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteChaincodeResponse{}
	_body, _err := client.DeleteChaincodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteGovernanceTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteGovernanceTaskResponse
func (client *Client) DeleteGovernanceTaskWithOptions(request *DeleteGovernanceTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteGovernanceTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteGovernanceTask"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteGovernanceTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteGovernanceTaskRequest
//
// @return DeleteGovernanceTaskResponse
func (client *Client) DeleteGovernanceTask(request *DeleteGovernanceTaskRequest) (_result *DeleteGovernanceTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteGovernanceTaskResponse{}
	_body, _err := client.DeleteGovernanceTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DeleteTriggerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DeleteTriggerResponse
func (client *Client) DeleteTriggerWithOptions(request *DeleteTriggerRequest, runtime *util.RuntimeOptions) (_result *DeleteTriggerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteTrigger"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteTriggerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DeleteTriggerRequest
//
// @return DeleteTriggerResponse
func (client *Client) DeleteTrigger(request *DeleteTriggerRequest) (_result *DeleteTriggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTriggerResponse{}
	_body, _err := client.DeleteTriggerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainAccountsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainAccountsResponse
func (client *Client) DescribeAntChainAccountsWithOptions(request *DescribeAntChainAccountsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainAccountsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainAccounts"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainAccountsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainAccountsRequest
//
// @return DescribeAntChainAccountsResponse
func (client *Client) DescribeAntChainAccounts(request *DescribeAntChainAccountsRequest) (_result *DescribeAntChainAccountsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainAccountsResponse{}
	_body, _err := client.DescribeAntChainAccountsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainAccountsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainAccountsNewResponse
func (client *Client) DescribeAntChainAccountsNewWithOptions(request *DescribeAntChainAccountsNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainAccountsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainAccountsNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainAccountsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainAccountsNewRequest
//
// @return DescribeAntChainAccountsNewResponse
func (client *Client) DescribeAntChainAccountsNew(request *DescribeAntChainAccountsNewRequest) (_result *DescribeAntChainAccountsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainAccountsNewResponse{}
	_body, _err := client.DescribeAntChainAccountsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainApplicationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainApplicationsResponse
func (client *Client) DescribeAntChainApplicationsWithOptions(request *DescribeAntChainApplicationsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainApplications"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainApplicationsRequest
//
// @return DescribeAntChainApplicationsResponse
func (client *Client) DescribeAntChainApplications(request *DescribeAntChainApplicationsRequest) (_result *DescribeAntChainApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainApplicationsResponse{}
	_body, _err := client.DescribeAntChainApplicationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainBlockRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainBlockResponse
func (client *Client) DescribeAntChainBlockWithOptions(request *DescribeAntChainBlockRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.Height)) {
		body["Height"] = request.Height
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainBlock"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainBlockResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainBlockRequest
//
// @return DescribeAntChainBlockResponse
func (client *Client) DescribeAntChainBlock(request *DescribeAntChainBlockRequest) (_result *DescribeAntChainBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainBlockResponse{}
	_body, _err := client.DescribeAntChainBlockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainBlockNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainBlockNewResponse
func (client *Client) DescribeAntChainBlockNewWithOptions(request *DescribeAntChainBlockNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainBlockNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Height)) {
		body["Height"] = request.Height
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainBlockNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainBlockNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainBlockNewRequest
//
// @return DescribeAntChainBlockNewResponse
func (client *Client) DescribeAntChainBlockNew(request *DescribeAntChainBlockNewRequest) (_result *DescribeAntChainBlockNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainBlockNewResponse{}
	_body, _err := client.DescribeAntChainBlockNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainCertificateApplicationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainCertificateApplicationsResponse
func (client *Client) DescribeAntChainCertificateApplicationsWithOptions(request *DescribeAntChainCertificateApplicationsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainCertificateApplicationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainCertificateApplications"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainCertificateApplicationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainCertificateApplicationsRequest
//
// @return DescribeAntChainCertificateApplicationsResponse
func (client *Client) DescribeAntChainCertificateApplications(request *DescribeAntChainCertificateApplicationsRequest) (_result *DescribeAntChainCertificateApplicationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainCertificateApplicationsResponse{}
	_body, _err := client.DescribeAntChainCertificateApplicationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainCertificateApplicationsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainCertificateApplicationsNewResponse
func (client *Client) DescribeAntChainCertificateApplicationsNewWithOptions(request *DescribeAntChainCertificateApplicationsNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainCertificateApplicationsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainCertificateApplicationsNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainCertificateApplicationsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainCertificateApplicationsNewRequest
//
// @return DescribeAntChainCertificateApplicationsNewResponse
func (client *Client) DescribeAntChainCertificateApplicationsNew(request *DescribeAntChainCertificateApplicationsNewRequest) (_result *DescribeAntChainCertificateApplicationsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainCertificateApplicationsNewResponse{}
	_body, _err := client.DescribeAntChainCertificateApplicationsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainConfigOptionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainConfigOptionsResponse
func (client *Client) DescribeAntChainConfigOptionsWithOptions(request *DescribeAntChainConfigOptionsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainConfigOptionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Purpose)) {
		query["Purpose"] = request.Purpose
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainConfigOptions"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainConfigOptionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainConfigOptionsRequest
//
// @return DescribeAntChainConfigOptionsResponse
func (client *Client) DescribeAntChainConfigOptions(request *DescribeAntChainConfigOptionsRequest) (_result *DescribeAntChainConfigOptionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainConfigOptionsResponse{}
	_body, _err := client.DescribeAntChainConfigOptionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainConsortiumsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainConsortiumsResponse
func (client *Client) DescribeAntChainConsortiumsWithOptions(request *DescribeAntChainConsortiumsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainConsortiumsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainConsortiums"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainConsortiumsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainConsortiumsRequest
//
// @return DescribeAntChainConsortiumsResponse
func (client *Client) DescribeAntChainConsortiums(request *DescribeAntChainConsortiumsRequest) (_result *DescribeAntChainConsortiumsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainConsortiumsResponse{}
	_body, _err := client.DescribeAntChainConsortiumsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainConsortiumsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainConsortiumsNewResponse
func (client *Client) DescribeAntChainConsortiumsNewWithOptions(request *DescribeAntChainConsortiumsNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainConsortiumsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainConsortiumsNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainConsortiumsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainConsortiumsNewRequest
//
// @return DescribeAntChainConsortiumsNewResponse
func (client *Client) DescribeAntChainConsortiumsNew(request *DescribeAntChainConsortiumsNewRequest) (_result *DescribeAntChainConsortiumsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainConsortiumsNewResponse{}
	_body, _err := client.DescribeAntChainConsortiumsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainContractProjectContentTreeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainContractProjectContentTreeResponse
func (client *Client) DescribeAntChainContractProjectContentTreeWithOptions(request *DescribeAntChainContractProjectContentTreeRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainContractProjectContentTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainContractProjectContentTree"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainContractProjectContentTreeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainContractProjectContentTreeRequest
//
// @return DescribeAntChainContractProjectContentTreeResponse
func (client *Client) DescribeAntChainContractProjectContentTree(request *DescribeAntChainContractProjectContentTreeRequest) (_result *DescribeAntChainContractProjectContentTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainContractProjectContentTreeResponse{}
	_body, _err := client.DescribeAntChainContractProjectContentTreeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainContractProjectContentTreeNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainContractProjectContentTreeNewResponse
func (client *Client) DescribeAntChainContractProjectContentTreeNewWithOptions(request *DescribeAntChainContractProjectContentTreeNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainContractProjectContentTreeNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainContractProjectContentTreeNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainContractProjectContentTreeNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainContractProjectContentTreeNewRequest
//
// @return DescribeAntChainContractProjectContentTreeNewResponse
func (client *Client) DescribeAntChainContractProjectContentTreeNew(request *DescribeAntChainContractProjectContentTreeNewRequest) (_result *DescribeAntChainContractProjectContentTreeNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainContractProjectContentTreeNewResponse{}
	_body, _err := client.DescribeAntChainContractProjectContentTreeNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainContractProjectsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainContractProjectsResponse
func (client *Client) DescribeAntChainContractProjectsWithOptions(request *DescribeAntChainContractProjectsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainContractProjectsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainContractProjects"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainContractProjectsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainContractProjectsRequest
//
// @return DescribeAntChainContractProjectsResponse
func (client *Client) DescribeAntChainContractProjects(request *DescribeAntChainContractProjectsRequest) (_result *DescribeAntChainContractProjectsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainContractProjectsResponse{}
	_body, _err := client.DescribeAntChainContractProjectsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainContractProjectsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainContractProjectsNewResponse
func (client *Client) DescribeAntChainContractProjectsNewWithOptions(request *DescribeAntChainContractProjectsNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainContractProjectsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainContractProjectsNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainContractProjectsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainContractProjectsNewRequest
//
// @return DescribeAntChainContractProjectsNewResponse
func (client *Client) DescribeAntChainContractProjectsNew(request *DescribeAntChainContractProjectsNewRequest) (_result *DescribeAntChainContractProjectsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainContractProjectsNewResponse{}
	_body, _err := client.DescribeAntChainContractProjectsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainDownloadPathsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainDownloadPathsResponse
func (client *Client) DescribeAntChainDownloadPathsWithOptions(request *DescribeAntChainDownloadPathsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainDownloadPathsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainDownloadPaths"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainDownloadPathsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainDownloadPathsRequest
//
// @return DescribeAntChainDownloadPathsResponse
func (client *Client) DescribeAntChainDownloadPaths(request *DescribeAntChainDownloadPathsRequest) (_result *DescribeAntChainDownloadPathsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainDownloadPathsResponse{}
	_body, _err := client.DescribeAntChainDownloadPathsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainDownloadPathsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainDownloadPathsNewResponse
func (client *Client) DescribeAntChainDownloadPathsNewWithOptions(request *DescribeAntChainDownloadPathsNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainDownloadPathsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainDownloadPathsNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainDownloadPathsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainDownloadPathsNewRequest
//
// @return DescribeAntChainDownloadPathsNewResponse
func (client *Client) DescribeAntChainDownloadPathsNew(request *DescribeAntChainDownloadPathsNewRequest) (_result *DescribeAntChainDownloadPathsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainDownloadPathsNewResponse{}
	_body, _err := client.DescribeAntChainDownloadPathsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainInformationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainInformationResponse
func (client *Client) DescribeAntChainInformationWithOptions(request *DescribeAntChainInformationRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainInformationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainInformation"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainInformationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainInformationRequest
//
// @return DescribeAntChainInformationResponse
func (client *Client) DescribeAntChainInformation(request *DescribeAntChainInformationRequest) (_result *DescribeAntChainInformationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainInformationResponse{}
	_body, _err := client.DescribeAntChainInformationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainInformationNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainInformationNewResponse
func (client *Client) DescribeAntChainInformationNewWithOptions(request *DescribeAntChainInformationNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainInformationNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainInformationNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainInformationNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainInformationNewRequest
//
// @return DescribeAntChainInformationNewResponse
func (client *Client) DescribeAntChainInformationNew(request *DescribeAntChainInformationNewRequest) (_result *DescribeAntChainInformationNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainInformationNewResponse{}
	_body, _err := client.DescribeAntChainInformationNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainLatestBlocksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainLatestBlocksResponse
func (client *Client) DescribeAntChainLatestBlocksWithOptions(request *DescribeAntChainLatestBlocksRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainLatestBlocksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainLatestBlocks"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainLatestBlocksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainLatestBlocksRequest
//
// @return DescribeAntChainLatestBlocksResponse
func (client *Client) DescribeAntChainLatestBlocks(request *DescribeAntChainLatestBlocksRequest) (_result *DescribeAntChainLatestBlocksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainLatestBlocksResponse{}
	_body, _err := client.DescribeAntChainLatestBlocksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainLatestBlocksNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainLatestBlocksNewResponse
func (client *Client) DescribeAntChainLatestBlocksNewWithOptions(request *DescribeAntChainLatestBlocksNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainLatestBlocksNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainLatestBlocksNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainLatestBlocksNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainLatestBlocksNewRequest
//
// @return DescribeAntChainLatestBlocksNewResponse
func (client *Client) DescribeAntChainLatestBlocksNew(request *DescribeAntChainLatestBlocksNewRequest) (_result *DescribeAntChainLatestBlocksNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainLatestBlocksNewResponse{}
	_body, _err := client.DescribeAntChainLatestBlocksNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainLatestTransactionDigestsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainLatestTransactionDigestsResponse
func (client *Client) DescribeAntChainLatestTransactionDigestsWithOptions(request *DescribeAntChainLatestTransactionDigestsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainLatestTransactionDigestsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainLatestTransactionDigests"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainLatestTransactionDigestsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainLatestTransactionDigestsRequest
//
// @return DescribeAntChainLatestTransactionDigestsResponse
func (client *Client) DescribeAntChainLatestTransactionDigests(request *DescribeAntChainLatestTransactionDigestsRequest) (_result *DescribeAntChainLatestTransactionDigestsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainLatestTransactionDigestsResponse{}
	_body, _err := client.DescribeAntChainLatestTransactionDigestsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainLatestTransactionDigestsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainLatestTransactionDigestsNewResponse
func (client *Client) DescribeAntChainLatestTransactionDigestsNewWithOptions(request *DescribeAntChainLatestTransactionDigestsNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainLatestTransactionDigestsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainLatestTransactionDigestsNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainLatestTransactionDigestsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainLatestTransactionDigestsNewRequest
//
// @return DescribeAntChainLatestTransactionDigestsNewResponse
func (client *Client) DescribeAntChainLatestTransactionDigestsNew(request *DescribeAntChainLatestTransactionDigestsNewRequest) (_result *DescribeAntChainLatestTransactionDigestsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainLatestTransactionDigestsNewResponse{}
	_body, _err := client.DescribeAntChainLatestTransactionDigestsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainMembersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainMembersResponse
func (client *Client) DescribeAntChainMembersWithOptions(request *DescribeAntChainMembersRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainMembers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainMembersRequest
//
// @return DescribeAntChainMembersResponse
func (client *Client) DescribeAntChainMembers(request *DescribeAntChainMembersRequest) (_result *DescribeAntChainMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainMembersResponse{}
	_body, _err := client.DescribeAntChainMembersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainMembersNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainMembersNewResponse
func (client *Client) DescribeAntChainMembersNewWithOptions(request *DescribeAntChainMembersNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainMembersNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainMembersNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainMembersNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainMembersNewRequest
//
// @return DescribeAntChainMembersNewResponse
func (client *Client) DescribeAntChainMembersNew(request *DescribeAntChainMembersNewRequest) (_result *DescribeAntChainMembersNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainMembersNewResponse{}
	_body, _err := client.DescribeAntChainMembersNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse
func (client *Client) DescribeAntChainMiniAppBrowserQRCodeAccessLogWithOptions(request *DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.QRCodeType)) {
		body["QRCodeType"] = request.QRCodeType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainMiniAppBrowserQRCodeAccessLog"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest
//
// @return DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse
func (client *Client) DescribeAntChainMiniAppBrowserQRCodeAccessLog(request *DescribeAntChainMiniAppBrowserQRCodeAccessLogRequest) (_result *DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainMiniAppBrowserQRCodeAccessLogResponse{}
	_body, _err := client.DescribeAntChainMiniAppBrowserQRCodeAccessLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse
func (client *Client) DescribeAntChainMiniAppBrowserQRCodeAccessLogNewWithOptions(request *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.QRCodeType)) {
		body["QRCodeType"] = request.QRCodeType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainMiniAppBrowserQRCodeAccessLogNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest
//
// @return DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse
func (client *Client) DescribeAntChainMiniAppBrowserQRCodeAccessLogNew(request *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewRequest) (_result *DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainMiniAppBrowserQRCodeAccessLogNewResponse{}
	_body, _err := client.DescribeAntChainMiniAppBrowserQRCodeAccessLogNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse
func (client *Client) DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersWithOptions(request *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QRCodeType)) {
		body["QRCodeType"] = request.QRCodeType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest
//
// @return DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse
func (client *Client) DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsers(request *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersRequest) (_result *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersResponse{}
	_body, _err := client.DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse
func (client *Client) DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewWithOptions(request *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.QRCodeType)) {
		body["QRCodeType"] = request.QRCodeType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest
//
// @return DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse
func (client *Client) DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNew(request *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewRequest) (_result *DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewResponse{}
	_body, _err := client.DescribeAntChainMiniAppBrowserQRCodeAuthorizedUsersNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserTransactionQRCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainMiniAppBrowserTransactionQRCodeResponse
func (client *Client) DescribeAntChainMiniAppBrowserTransactionQRCodeWithOptions(request *DescribeAntChainMiniAppBrowserTransactionQRCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainMiniAppBrowserTransactionQRCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionHash)) {
		body["TransactionHash"] = request.TransactionHash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainMiniAppBrowserTransactionQRCode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainMiniAppBrowserTransactionQRCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserTransactionQRCodeRequest
//
// @return DescribeAntChainMiniAppBrowserTransactionQRCodeResponse
func (client *Client) DescribeAntChainMiniAppBrowserTransactionQRCode(request *DescribeAntChainMiniAppBrowserTransactionQRCodeRequest) (_result *DescribeAntChainMiniAppBrowserTransactionQRCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainMiniAppBrowserTransactionQRCodeResponse{}
	_body, _err := client.DescribeAntChainMiniAppBrowserTransactionQRCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse
func (client *Client) DescribeAntChainMiniAppBrowserTransactionQRCodeNewWithOptions(request *DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ContractId)) {
		body["ContractId"] = request.ContractId
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionHash)) {
		body["TransactionHash"] = request.TransactionHash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainMiniAppBrowserTransactionQRCodeNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest
//
// @return DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse
func (client *Client) DescribeAntChainMiniAppBrowserTransactionQRCodeNew(request *DescribeAntChainMiniAppBrowserTransactionQRCodeNewRequest) (_result *DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainMiniAppBrowserTransactionQRCodeNewResponse{}
	_body, _err := client.DescribeAntChainMiniAppBrowserTransactionQRCodeNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainNodesNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainNodesNewResponse
func (client *Client) DescribeAntChainNodesNewWithOptions(request *DescribeAntChainNodesNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainNodesNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainNodesNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainNodesNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainNodesNewRequest
//
// @return DescribeAntChainNodesNewResponse
func (client *Client) DescribeAntChainNodesNew(request *DescribeAntChainNodesNewRequest) (_result *DescribeAntChainNodesNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainNodesNewResponse{}
	_body, _err := client.DescribeAntChainNodesNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainQRCodeAuthorizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainQRCodeAuthorizationResponse
func (client *Client) DescribeAntChainQRCodeAuthorizationWithOptions(request *DescribeAntChainQRCodeAuthorizationRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainQRCodeAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.QRCodeType)) {
		body["QRCodeType"] = request.QRCodeType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainQRCodeAuthorization"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainQRCodeAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainQRCodeAuthorizationRequest
//
// @return DescribeAntChainQRCodeAuthorizationResponse
func (client *Client) DescribeAntChainQRCodeAuthorization(request *DescribeAntChainQRCodeAuthorizationRequest) (_result *DescribeAntChainQRCodeAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainQRCodeAuthorizationResponse{}
	_body, _err := client.DescribeAntChainQRCodeAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainQRCodeAuthorizationNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainQRCodeAuthorizationNewResponse
func (client *Client) DescribeAntChainQRCodeAuthorizationNewWithOptions(request *DescribeAntChainQRCodeAuthorizationNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainQRCodeAuthorizationNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.QRCodeType)) {
		body["QRCodeType"] = request.QRCodeType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainQRCodeAuthorizationNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainQRCodeAuthorizationNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainQRCodeAuthorizationNewRequest
//
// @return DescribeAntChainQRCodeAuthorizationNewResponse
func (client *Client) DescribeAntChainQRCodeAuthorizationNew(request *DescribeAntChainQRCodeAuthorizationNewRequest) (_result *DescribeAntChainQRCodeAuthorizationNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainQRCodeAuthorizationNewResponse{}
	_body, _err := client.DescribeAntChainQRCodeAuthorizationNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainRegionNamesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainRegionNamesResponse
func (client *Client) DescribeAntChainRegionNamesWithOptions(request *DescribeAntChainRegionNamesRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainRegionNamesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Locale)) {
		body["Locale"] = request.Locale
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainRegionNames"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainRegionNamesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainRegionNamesRequest
//
// @return DescribeAntChainRegionNamesResponse
func (client *Client) DescribeAntChainRegionNames(request *DescribeAntChainRegionNamesRequest) (_result *DescribeAntChainRegionNamesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainRegionNamesResponse{}
	_body, _err := client.DescribeAntChainRegionNamesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainRegionsForSaleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainRegionsForSaleResponse
func (client *Client) DescribeAntChainRegionsForSaleWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAntChainRegionsForSaleResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainRegionsForSale"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainRegionsForSaleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeAntChainRegionsForSaleResponse
func (client *Client) DescribeAntChainRegionsForSale() (_result *DescribeAntChainRegionsForSaleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainRegionsForSaleResponse{}
	_body, _err := client.DescribeAntChainRegionsForSaleWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainResourceTypesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainResourceTypesResponse
func (client *Client) DescribeAntChainResourceTypesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeAntChainResourceTypesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainResourceTypes"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainResourceTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeAntChainResourceTypesResponse
func (client *Client) DescribeAntChainResourceTypes() (_result *DescribeAntChainResourceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainResourceTypesResponse{}
	_body, _err := client.DescribeAntChainResourceTypesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainRestRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainRestResponse
func (client *Client) DescribeAntChainRestWithOptions(request *DescribeAntChainRestRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainRestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainRest"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainRestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainRestRequest
//
// @return DescribeAntChainRestResponse
func (client *Client) DescribeAntChainRest(request *DescribeAntChainRestRequest) (_result *DescribeAntChainRestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainRestResponse{}
	_body, _err := client.DescribeAntChainRestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainSubnetListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainSubnetListResponse
func (client *Client) DescribeAntChainSubnetListWithOptions(request *DescribeAntChainSubnetListRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainSubnetListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainSubnetList"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainSubnetListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainSubnetListRequest
//
// @return DescribeAntChainSubnetListResponse
func (client *Client) DescribeAntChainSubnetList(request *DescribeAntChainSubnetListRequest) (_result *DescribeAntChainSubnetListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainSubnetListResponse{}
	_body, _err := client.DescribeAntChainSubnetListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainSubnetMemberListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainSubnetMemberListResponse
func (client *Client) DescribeAntChainSubnetMemberListWithOptions(request *DescribeAntChainSubnetMemberListRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainSubnetMemberListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainSubnetMemberList"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainSubnetMemberListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainSubnetMemberListRequest
//
// @return DescribeAntChainSubnetMemberListResponse
func (client *Client) DescribeAntChainSubnetMemberList(request *DescribeAntChainSubnetMemberListRequest) (_result *DescribeAntChainSubnetMemberListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainSubnetMemberListResponse{}
	_body, _err := client.DescribeAntChainSubnetMemberListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainSubnetNodeListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainSubnetNodeListResponse
func (client *Client) DescribeAntChainSubnetNodeListWithOptions(request *DescribeAntChainSubnetNodeListRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainSubnetNodeListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainSubnetNodeList"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainSubnetNodeListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainSubnetNodeListRequest
//
// @return DescribeAntChainSubnetNodeListResponse
func (client *Client) DescribeAntChainSubnetNodeList(request *DescribeAntChainSubnetNodeListRequest) (_result *DescribeAntChainSubnetNodeListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainSubnetNodeListResponse{}
	_body, _err := client.DescribeAntChainSubnetNodeListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainTransactionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainTransactionResponse
func (client *Client) DescribeAntChainTransactionWithOptions(request *DescribeAntChainTransactionRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.Hash)) {
		body["Hash"] = request.Hash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainTransaction"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainTransactionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainTransactionRequest
//
// @return DescribeAntChainTransactionResponse
func (client *Client) DescribeAntChainTransaction(request *DescribeAntChainTransactionRequest) (_result *DescribeAntChainTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainTransactionResponse{}
	_body, _err := client.DescribeAntChainTransactionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainTransactionNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainTransactionNewResponse
func (client *Client) DescribeAntChainTransactionNewWithOptions(request *DescribeAntChainTransactionNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainTransactionNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Hash)) {
		body["Hash"] = request.Hash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainTransactionNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainTransactionNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainTransactionNewRequest
//
// @return DescribeAntChainTransactionNewResponse
func (client *Client) DescribeAntChainTransactionNew(request *DescribeAntChainTransactionNewRequest) (_result *DescribeAntChainTransactionNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainTransactionNewResponse{}
	_body, _err := client.DescribeAntChainTransactionNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainTransactionReceiptNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainTransactionReceiptNewResponse
func (client *Client) DescribeAntChainTransactionReceiptNewWithOptions(request *DescribeAntChainTransactionReceiptNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainTransactionReceiptNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Hash)) {
		body["Hash"] = request.Hash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainTransactionReceiptNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainTransactionReceiptNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainTransactionReceiptNewRequest
//
// @return DescribeAntChainTransactionReceiptNewResponse
func (client *Client) DescribeAntChainTransactionReceiptNew(request *DescribeAntChainTransactionReceiptNewRequest) (_result *DescribeAntChainTransactionReceiptNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainTransactionReceiptNewResponse{}
	_body, _err := client.DescribeAntChainTransactionReceiptNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainTransactionStatisticsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainTransactionStatisticsResponse
func (client *Client) DescribeAntChainTransactionStatisticsWithOptions(request *DescribeAntChainTransactionStatisticsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainTransactionStatisticsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		body["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		body["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainTransactionStatistics"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainTransactionStatisticsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainTransactionStatisticsRequest
//
// @return DescribeAntChainTransactionStatisticsResponse
func (client *Client) DescribeAntChainTransactionStatistics(request *DescribeAntChainTransactionStatisticsRequest) (_result *DescribeAntChainTransactionStatisticsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainTransactionStatisticsResponse{}
	_body, _err := client.DescribeAntChainTransactionStatisticsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainTransactionStatisticsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainTransactionStatisticsNewResponse
func (client *Client) DescribeAntChainTransactionStatisticsNewWithOptions(request *DescribeAntChainTransactionStatisticsNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainTransactionStatisticsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		body["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		body["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainTransactionStatisticsNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainTransactionStatisticsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainTransactionStatisticsNewRequest
//
// @return DescribeAntChainTransactionStatisticsNewResponse
func (client *Client) DescribeAntChainTransactionStatisticsNew(request *DescribeAntChainTransactionStatisticsNewRequest) (_result *DescribeAntChainTransactionStatisticsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainTransactionStatisticsNewResponse{}
	_body, _err := client.DescribeAntChainTransactionStatisticsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainsResponse
func (client *Client) DescribeAntChainsWithOptions(request *DescribeAntChainsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChains"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainsRequest
//
// @return DescribeAntChainsResponse
func (client *Client) DescribeAntChains(request *DescribeAntChainsRequest) (_result *DescribeAntChainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainsResponse{}
	_body, _err := client.DescribeAntChainsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntChainsNewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntChainsNewResponse
func (client *Client) DescribeAntChainsNewWithOptions(request *DescribeAntChainsNewRequest, runtime *util.RuntimeOptions) (_result *DescribeAntChainsNewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumber)) {
		body["PageNumber"] = request.PageNumber
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntChainsNew"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntChainsNewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntChainsNewRequest
//
// @return DescribeAntChainsNewResponse
func (client *Client) DescribeAntChainsNew(request *DescribeAntChainsNewRequest) (_result *DescribeAntChainsNewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntChainsNewResponse{}
	_body, _err := client.DescribeAntChainsNewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAntRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAntRegionsResponse
func (client *Client) DescribeAntRegionsWithOptions(request *DescribeAntRegionsRequest, runtime *util.RuntimeOptions) (_result *DescribeAntRegionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Locale)) {
		body["Locale"] = request.Locale
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAntRegions"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAntRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAntRegionsRequest
//
// @return DescribeAntRegionsResponse
func (client *Client) DescribeAntRegions(request *DescribeAntRegionsRequest) (_result *DescribeAntRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAntRegionsResponse{}
	_body, _err := client.DescribeAntRegionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeAppliesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeAppliesResponse
func (client *Client) DescribeAppliesWithOptions(request *DescribeAppliesRequest, runtime *util.RuntimeOptions) (_result *DescribeAppliesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeApplies"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAppliesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeAppliesRequest
//
// @return DescribeAppliesResponse
func (client *Client) DescribeApplies(request *DescribeAppliesRequest) (_result *DescribeAppliesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAppliesResponse{}
	_body, _err := client.DescribeAppliesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBcSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBcSchemaResponse
func (client *Client) DescribeBcSchemaWithOptions(request *DescribeBcSchemaRequest, runtime *util.RuntimeOptions) (_result *DescribeBcSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBcSchema"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBcSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBcSchemaRequest
//
// @return DescribeBcSchemaResponse
func (client *Client) DescribeBcSchema(request *DescribeBcSchemaRequest) (_result *DescribeBcSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBcSchemaResponse{}
	_body, _err := client.DescribeBcSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockResponse
func (client *Client) DescribeBlockWithOptions(request *DescribeBlockRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Height)) {
		body["Height"] = request.Height
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlock"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockRequest
//
// @return DescribeBlockResponse
func (client *Client) DescribeBlock(request *DescribeBlockRequest) (_result *DescribeBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockResponse{}
	_body, _err := client.DescribeBlockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainApplicationResponse
func (client *Client) DescribeBlockchainApplicationWithOptions(request *DescribeBlockchainApplicationRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockchainApplicationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainApplication"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockchainApplicationRequest
//
// @return DescribeBlockchainApplicationResponse
func (client *Client) DescribeBlockchainApplication(request *DescribeBlockchainApplicationRequest) (_result *DescribeBlockchainApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainApplicationResponse{}
	_body, _err := client.DescribeBlockchainApplicationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainConfigOptionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainConfigOptionResponse
func (client *Client) DescribeBlockchainConfigOptionWithOptions(request *DescribeBlockchainConfigOptionRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockchainConfigOptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Purpose)) {
		query["Purpose"] = request.Purpose
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainConfigOption"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainConfigOptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockchainConfigOptionRequest
//
// @return DescribeBlockchainConfigOptionResponse
func (client *Client) DescribeBlockchainConfigOption(request *DescribeBlockchainConfigOptionRequest) (_result *DescribeBlockchainConfigOptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainConfigOptionResponse{}
	_body, _err := client.DescribeBlockchainConfigOptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainCreateTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainCreateTaskResponse
func (client *Client) DescribeBlockchainCreateTaskWithOptions(request *DescribeBlockchainCreateTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockchainCreateTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainCreateTask"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainCreateTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockchainCreateTaskRequest
//
// @return DescribeBlockchainCreateTaskResponse
func (client *Client) DescribeBlockchainCreateTask(request *DescribeBlockchainCreateTaskRequest) (_result *DescribeBlockchainCreateTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainCreateTaskResponse{}
	_body, _err := client.DescribeBlockchainCreateTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainCreationConfigOptionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainCreationConfigOptionsResponse
func (client *Client) DescribeBlockchainCreationConfigOptionsWithOptions(request *DescribeBlockchainCreationConfigOptionsRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockchainCreationConfigOptionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Purpose)) {
		query["Purpose"] = request.Purpose
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainCreationConfigOptions"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainCreationConfigOptionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockchainCreationConfigOptionsRequest
//
// @return DescribeBlockchainCreationConfigOptionsResponse
func (client *Client) DescribeBlockchainCreationConfigOptions(request *DescribeBlockchainCreationConfigOptionsRequest) (_result *DescribeBlockchainCreationConfigOptionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainCreationConfigOptionsResponse{}
	_body, _err := client.DescribeBlockchainCreationConfigOptionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainInfoResponse
func (client *Client) DescribeBlockchainInfoWithOptions(request *DescribeBlockchainInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockchainInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainInfo"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockchainInfoRequest
//
// @return DescribeBlockchainInfoResponse
func (client *Client) DescribeBlockchainInfo(request *DescribeBlockchainInfoRequest) (_result *DescribeBlockchainInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainInfoResponse{}
	_body, _err := client.DescribeBlockchainInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainSchemaResponse
func (client *Client) DescribeBlockchainSchemaWithOptions(request *DescribeBlockchainSchemaRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockchainSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainSchema"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockchainSchemaRequest
//
// @return DescribeBlockchainSchemaResponse
func (client *Client) DescribeBlockchainSchema(request *DescribeBlockchainSchemaRequest) (_result *DescribeBlockchainSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainSchemaResponse{}
	_body, _err := client.DescribeBlockchainSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainSchemaDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainSchemaDetailResponse
func (client *Client) DescribeBlockchainSchemaDetailWithOptions(request *DescribeBlockchainSchemaDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockchainSchemaDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainSchemaDetail"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainSchemaDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockchainSchemaDetailRequest
//
// @return DescribeBlockchainSchemaDetailResponse
func (client *Client) DescribeBlockchainSchemaDetail(request *DescribeBlockchainSchemaDetailRequest) (_result *DescribeBlockchainSchemaDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainSchemaDetailResponse{}
	_body, _err := client.DescribeBlockchainSchemaDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainSchemaFileOSSPropertiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainSchemaFileOSSPropertiesResponse
func (client *Client) DescribeBlockchainSchemaFileOSSPropertiesWithOptions(request *DescribeBlockchainSchemaFileOSSPropertiesRequest, runtime *util.RuntimeOptions) (_result *DescribeBlockchainSchemaFileOSSPropertiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainSchemaFileOSSProperties"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainSchemaFileOSSPropertiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeBlockchainSchemaFileOSSPropertiesRequest
//
// @return DescribeBlockchainSchemaFileOSSPropertiesResponse
func (client *Client) DescribeBlockchainSchemaFileOSSProperties(request *DescribeBlockchainSchemaFileOSSPropertiesRequest) (_result *DescribeBlockchainSchemaFileOSSPropertiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainSchemaFileOSSPropertiesResponse{}
	_body, _err := client.DescribeBlockchainSchemaFileOSSPropertiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeBlockchainSchemaTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeBlockchainSchemaTemplatesResponse
func (client *Client) DescribeBlockchainSchemaTemplatesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeBlockchainSchemaTemplatesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeBlockchainSchemaTemplates"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeBlockchainSchemaTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeBlockchainSchemaTemplatesResponse
func (client *Client) DescribeBlockchainSchemaTemplates() (_result *DescribeBlockchainSchemaTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeBlockchainSchemaTemplatesResponse{}
	_body, _err := client.DescribeBlockchainSchemaTemplatesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeCSIGatewayEndpointRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCSIGatewayEndpointResponse
func (client *Client) DescribeCSIGatewayEndpointWithOptions(request *DescribeCSIGatewayEndpointRequest, runtime *util.RuntimeOptions) (_result *DescribeCSIGatewayEndpointResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCSIGatewayEndpoint"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCSIGatewayEndpointResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeCSIGatewayEndpointRequest
//
// @return DescribeCSIGatewayEndpointResponse
func (client *Client) DescribeCSIGatewayEndpoint(request *DescribeCSIGatewayEndpointRequest) (_result *DescribeCSIGatewayEndpointResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCSIGatewayEndpointResponse{}
	_body, _err := client.DescribeCSIGatewayEndpointWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeCandidateOrganizationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCandidateOrganizationsResponse
func (client *Client) DescribeCandidateOrganizationsWithOptions(request *DescribeCandidateOrganizationsRequest, runtime *util.RuntimeOptions) (_result *DescribeCandidateOrganizationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCandidateOrganizations"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCandidateOrganizationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeCandidateOrganizationsRequest
//
// @return DescribeCandidateOrganizationsResponse
func (client *Client) DescribeCandidateOrganizations(request *DescribeCandidateOrganizationsRequest) (_result *DescribeCandidateOrganizationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCandidateOrganizationsResponse{}
	_body, _err := client.DescribeCandidateOrganizationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeChaincodeCollectionConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChaincodeCollectionConfigResponse
func (client *Client) DescribeChaincodeCollectionConfigWithOptions(request *DescribeChaincodeCollectionConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeChaincodeCollectionConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChaincodeCollectionConfig"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChaincodeCollectionConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeChaincodeCollectionConfigRequest
//
// @return DescribeChaincodeCollectionConfigResponse
func (client *Client) DescribeChaincodeCollectionConfig(request *DescribeChaincodeCollectionConfigRequest) (_result *DescribeChaincodeCollectionConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeChaincodeCollectionConfigResponse{}
	_body, _err := client.DescribeChaincodeCollectionConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeChaincodeDefinitionTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChaincodeDefinitionTaskResponse
func (client *Client) DescribeChaincodeDefinitionTaskWithOptions(request *DescribeChaincodeDefinitionTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeChaincodeDefinitionTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChaincodeDefinitionTask"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChaincodeDefinitionTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeChaincodeDefinitionTaskRequest
//
// @return DescribeChaincodeDefinitionTaskResponse
func (client *Client) DescribeChaincodeDefinitionTask(request *DescribeChaincodeDefinitionTaskRequest) (_result *DescribeChaincodeDefinitionTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeChaincodeDefinitionTaskResponse{}
	_body, _err := client.DescribeChaincodeDefinitionTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeChaincodeUploadPolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChaincodeUploadPolicyResponse
func (client *Client) DescribeChaincodeUploadPolicyWithOptions(request *DescribeChaincodeUploadPolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeChaincodeUploadPolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChaincodeUploadPolicy"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChaincodeUploadPolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeChaincodeUploadPolicyRequest
//
// @return DescribeChaincodeUploadPolicyResponse
func (client *Client) DescribeChaincodeUploadPolicy(request *DescribeChaincodeUploadPolicyRequest) (_result *DescribeChaincodeUploadPolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeChaincodeUploadPolicyResponse{}
	_body, _err := client.DescribeChaincodeUploadPolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeChannelChaincodesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChannelChaincodesResponse
func (client *Client) DescribeChannelChaincodesWithOptions(request *DescribeChannelChaincodesRequest, runtime *util.RuntimeOptions) (_result *DescribeChannelChaincodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChannelChaincodes"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChannelChaincodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeChannelChaincodesRequest
//
// @return DescribeChannelChaincodesResponse
func (client *Client) DescribeChannelChaincodes(request *DescribeChannelChaincodesRequest) (_result *DescribeChannelChaincodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeChannelChaincodesResponse{}
	_body, _err := client.DescribeChannelChaincodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeChannelMembersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChannelMembersResponse
func (client *Client) DescribeChannelMembersWithOptions(request *DescribeChannelMembersRequest, runtime *util.RuntimeOptions) (_result *DescribeChannelMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChannelMembers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChannelMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeChannelMembersRequest
//
// @return DescribeChannelMembersResponse
func (client *Client) DescribeChannelMembers(request *DescribeChannelMembersRequest) (_result *DescribeChannelMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeChannelMembersResponse{}
	_body, _err := client.DescribeChannelMembersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeChannelTriggersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeChannelTriggersResponse
func (client *Client) DescribeChannelTriggersWithOptions(request *DescribeChannelTriggersRequest, runtime *util.RuntimeOptions) (_result *DescribeChannelTriggersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeChannelTriggers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeChannelTriggersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeChannelTriggersRequest
//
// @return DescribeChannelTriggersResponse
func (client *Client) DescribeChannelTriggers(request *DescribeChannelTriggersRequest) (_result *DescribeChannelTriggersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeChannelTriggersResponse{}
	_body, _err := client.DescribeChannelTriggersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeCloudIntegrationServiceTokenRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudIntegrationServiceTokenResponse
func (client *Client) DescribeCloudIntegrationServiceTokenWithOptions(request *DescribeCloudIntegrationServiceTokenRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudIntegrationServiceTokenResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Service)) {
		body["Service"] = request.Service
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudIntegrationServiceToken"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudIntegrationServiceTokenResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeCloudIntegrationServiceTokenRequest
//
// @return DescribeCloudIntegrationServiceTokenResponse
func (client *Client) DescribeCloudIntegrationServiceToken(request *DescribeCloudIntegrationServiceTokenRequest) (_result *DescribeCloudIntegrationServiceTokenResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudIntegrationServiceTokenResponse{}
	_body, _err := client.DescribeCloudIntegrationServiceTokenWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeCloudServiceOrganizationStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudServiceOrganizationStatusResponse
func (client *Client) DescribeCloudServiceOrganizationStatusWithOptions(request *DescribeCloudServiceOrganizationStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudServiceOrganizationStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudServiceOrganizationStatus"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudServiceOrganizationStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeCloudServiceOrganizationStatusRequest
//
// @return DescribeCloudServiceOrganizationStatusResponse
func (client *Client) DescribeCloudServiceOrganizationStatus(request *DescribeCloudServiceOrganizationStatusRequest) (_result *DescribeCloudServiceOrganizationStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudServiceOrganizationStatusResponse{}
	_body, _err := client.DescribeCloudServiceOrganizationStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeCloudServiceTypeStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeCloudServiceTypeStatusResponse
func (client *Client) DescribeCloudServiceTypeStatusWithOptions(request *DescribeCloudServiceTypeStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudServiceTypeStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.ServiceType)) {
		body["ServiceType"] = request.ServiceType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudServiceTypeStatus"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudServiceTypeStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeCloudServiceTypeStatusRequest
//
// @return DescribeCloudServiceTypeStatusResponse
func (client *Client) DescribeCloudServiceTypeStatus(request *DescribeCloudServiceTypeStatusRequest) (_result *DescribeCloudServiceTypeStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudServiceTypeStatusResponse{}
	_body, _err := client.DescribeCloudServiceTypeStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumAdminStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumAdminStatusResponse
func (client *Client) DescribeConsortiumAdminStatusWithOptions(request *DescribeConsortiumAdminStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeConsortiumAdminStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumAdminStatus"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumAdminStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConsortiumAdminStatusRequest
//
// @return DescribeConsortiumAdminStatusResponse
func (client *Client) DescribeConsortiumAdminStatus(request *DescribeConsortiumAdminStatusRequest) (_result *DescribeConsortiumAdminStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumAdminStatusResponse{}
	_body, _err := client.DescribeConsortiumAdminStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumChaincodesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumChaincodesResponse
func (client *Client) DescribeConsortiumChaincodesWithOptions(request *DescribeConsortiumChaincodesRequest, runtime *util.RuntimeOptions) (_result *DescribeConsortiumChaincodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumChaincodes"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumChaincodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConsortiumChaincodesRequest
//
// @return DescribeConsortiumChaincodesResponse
func (client *Client) DescribeConsortiumChaincodes(request *DescribeConsortiumChaincodesRequest) (_result *DescribeConsortiumChaincodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumChaincodesResponse{}
	_body, _err := client.DescribeConsortiumChaincodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumChannelsResponse
func (client *Client) DescribeConsortiumChannelsWithOptions(request *DescribeConsortiumChannelsRequest, runtime *util.RuntimeOptions) (_result *DescribeConsortiumChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumChannels"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConsortiumChannelsRequest
//
// @return DescribeConsortiumChannelsResponse
func (client *Client) DescribeConsortiumChannels(request *DescribeConsortiumChannelsRequest) (_result *DescribeConsortiumChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumChannelsResponse{}
	_body, _err := client.DescribeConsortiumChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumConfigResponse
func (client *Client) DescribeConsortiumConfigWithOptions(runtime *util.RuntimeOptions) (_result *DescribeConsortiumConfigResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumConfig"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeConsortiumConfigResponse
func (client *Client) DescribeConsortiumConfig() (_result *DescribeConsortiumConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumConfigResponse{}
	_body, _err := client.DescribeConsortiumConfigWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumDeletableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumDeletableResponse
func (client *Client) DescribeConsortiumDeletableWithOptions(request *DescribeConsortiumDeletableRequest, runtime *util.RuntimeOptions) (_result *DescribeConsortiumDeletableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumDeletable"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumDeletableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConsortiumDeletableRequest
//
// @return DescribeConsortiumDeletableResponse
func (client *Client) DescribeConsortiumDeletable(request *DescribeConsortiumDeletableRequest) (_result *DescribeConsortiumDeletableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumDeletableResponse{}
	_body, _err := client.DescribeConsortiumDeletableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumMemberApprovalRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumMemberApprovalResponse
func (client *Client) DescribeConsortiumMemberApprovalWithOptions(request *DescribeConsortiumMemberApprovalRequest, runtime *util.RuntimeOptions) (_result *DescribeConsortiumMemberApprovalResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumMemberApproval"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumMemberApprovalResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConsortiumMemberApprovalRequest
//
// @return DescribeConsortiumMemberApprovalResponse
func (client *Client) DescribeConsortiumMemberApproval(request *DescribeConsortiumMemberApprovalRequest) (_result *DescribeConsortiumMemberApprovalResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumMemberApprovalResponse{}
	_body, _err := client.DescribeConsortiumMemberApprovalWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumMembersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumMembersResponse
func (client *Client) DescribeConsortiumMembersWithOptions(request *DescribeConsortiumMembersRequest, runtime *util.RuntimeOptions) (_result *DescribeConsortiumMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumMembers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConsortiumMembersRequest
//
// @return DescribeConsortiumMembersResponse
func (client *Client) DescribeConsortiumMembers(request *DescribeConsortiumMembersRequest) (_result *DescribeConsortiumMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumMembersResponse{}
	_body, _err := client.DescribeConsortiumMembersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumOrderersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumOrderersResponse
func (client *Client) DescribeConsortiumOrderersWithOptions(request *DescribeConsortiumOrderersRequest, runtime *util.RuntimeOptions) (_result *DescribeConsortiumOrderersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumOrderers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumOrderersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConsortiumOrderersRequest
//
// @return DescribeConsortiumOrderersResponse
func (client *Client) DescribeConsortiumOrderers(request *DescribeConsortiumOrderersRequest) (_result *DescribeConsortiumOrderersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumOrderersResponse{}
	_body, _err := client.DescribeConsortiumOrderersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumSpecsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumSpecsResponse
func (client *Client) DescribeConsortiumSpecsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeConsortiumSpecsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiumSpecs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumSpecsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeConsortiumSpecsResponse
func (client *Client) DescribeConsortiumSpecs() (_result *DescribeConsortiumSpecsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumSpecsResponse{}
	_body, _err := client.DescribeConsortiumSpecsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeConsortiumsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeConsortiumsResponse
func (client *Client) DescribeConsortiumsWithOptions(request *DescribeConsortiumsRequest, runtime *util.RuntimeOptions) (_result *DescribeConsortiumsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeConsortiums"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeConsortiumsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeConsortiumsRequest
//
// @return DescribeConsortiumsResponse
func (client *Client) DescribeConsortiums(request *DescribeConsortiumsRequest) (_result *DescribeConsortiumsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeConsortiumsResponse{}
	_body, _err := client.DescribeConsortiumsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDownloadPathsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDownloadPathsResponse
func (client *Client) DescribeDownloadPathsWithOptions(request *DescribeDownloadPathsRequest, runtime *util.RuntimeOptions) (_result *DescribeDownloadPathsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDownloadPaths"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDownloadPathsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDownloadPathsRequest
//
// @return DescribeDownloadPathsResponse
func (client *Client) DescribeDownloadPaths(request *DescribeDownloadPathsRequest) (_result *DescribeDownloadPathsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDownloadPathsResponse{}
	_body, _err := client.DescribeDownloadPathsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDownloadPathsOfContractChainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDownloadPathsOfContractChainResponse
func (client *Client) DescribeDownloadPathsOfContractChainWithOptions(request *DescribeDownloadPathsOfContractChainRequest, runtime *util.RuntimeOptions) (_result *DescribeDownloadPathsOfContractChainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDownloadPathsOfContractChain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDownloadPathsOfContractChainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDownloadPathsOfContractChainRequest
//
// @return DescribeDownloadPathsOfContractChainResponse
func (client *Client) DescribeDownloadPathsOfContractChain(request *DescribeDownloadPathsOfContractChainRequest) (_result *DescribeDownloadPathsOfContractChainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDownloadPathsOfContractChainResponse{}
	_body, _err := client.DescribeDownloadPathsOfContractChainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeDownloadPathsOfNotaryChainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeDownloadPathsOfNotaryChainResponse
func (client *Client) DescribeDownloadPathsOfNotaryChainWithOptions(request *DescribeDownloadPathsOfNotaryChainRequest, runtime *util.RuntimeOptions) (_result *DescribeDownloadPathsOfNotaryChainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDownloadPathsOfNotaryChain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDownloadPathsOfNotaryChainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeDownloadPathsOfNotaryChainRequest
//
// @return DescribeDownloadPathsOfNotaryChainResponse
func (client *Client) DescribeDownloadPathsOfNotaryChain(request *DescribeDownloadPathsOfNotaryChainRequest) (_result *DescribeDownloadPathsOfNotaryChainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDownloadPathsOfNotaryChainResponse{}
	_body, _err := client.DescribeDownloadPathsOfNotaryChainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEcosphereSpecsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEcosphereSpecsResponse
func (client *Client) DescribeEcosphereSpecsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeEcosphereSpecsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeEcosphereSpecs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEcosphereSpecsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeEcosphereSpecsResponse
func (client *Client) DescribeEcosphereSpecs() (_result *DescribeEcosphereSpecsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEcosphereSpecsResponse{}
	_body, _err := client.DescribeEcosphereSpecsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumResponse
func (client *Client) DescribeEthereumWithOptions(request *DescribeEthereumRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereum"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumRequest
//
// @return DescribeEthereumResponse
func (client *Client) DescribeEthereum(request *DescribeEthereumRequest) (_result *DescribeEthereumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumResponse{}
	_body, _err := client.DescribeEthereumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumClientUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumClientUsersResponse
func (client *Client) DescribeEthereumClientUsersWithOptions(request *DescribeEthereumClientUsersRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumClientUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumClientUsers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumClientUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumClientUsersRequest
//
// @return DescribeEthereumClientUsersResponse
func (client *Client) DescribeEthereumClientUsers(request *DescribeEthereumClientUsersRequest) (_result *DescribeEthereumClientUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumClientUsersResponse{}
	_body, _err := client.DescribeEthereumClientUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumDeletableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumDeletableResponse
func (client *Client) DescribeEthereumDeletableWithOptions(request *DescribeEthereumDeletableRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumDeletableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EthereumId)) {
		body["EthereumId"] = request.EthereumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumDeletable"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumDeletableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumDeletableRequest
//
// @return DescribeEthereumDeletableResponse
func (client *Client) DescribeEthereumDeletable(request *DescribeEthereumDeletableRequest) (_result *DescribeEthereumDeletableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumDeletableResponse{}
	_body, _err := client.DescribeEthereumDeletableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumInvitaionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumInvitaionResponse
func (client *Client) DescribeEthereumInvitaionWithOptions(request *DescribeEthereumInvitaionRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumInvitaionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Token)) {
		body["Token"] = request.Token
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumInvitaion"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumInvitaionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumInvitaionRequest
//
// @return DescribeEthereumInvitaionResponse
func (client *Client) DescribeEthereumInvitaion(request *DescribeEthereumInvitaionRequest) (_result *DescribeEthereumInvitaionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumInvitaionResponse{}
	_body, _err := client.DescribeEthereumInvitaionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumInviteeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumInviteeResponse
func (client *Client) DescribeEthereumInviteeWithOptions(request *DescribeEthereumInviteeRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumInviteeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumInvitee"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumInviteeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumInviteeRequest
//
// @return DescribeEthereumInviteeResponse
func (client *Client) DescribeEthereumInvitee(request *DescribeEthereumInviteeRequest) (_result *DescribeEthereumInviteeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumInviteeResponse{}
	_body, _err := client.DescribeEthereumInviteeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumNodeResponse
func (client *Client) DescribeEthereumNodeWithOptions(request *DescribeEthereumNodeRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumNode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumNodeRequest
//
// @return DescribeEthereumNodeResponse
func (client *Client) DescribeEthereumNode(request *DescribeEthereumNodeRequest) (_result *DescribeEthereumNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumNodeResponse{}
	_body, _err := client.DescribeEthereumNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumNodeConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumNodeConfigurationResponse
func (client *Client) DescribeEthereumNodeConfigurationWithOptions(request *DescribeEthereumNodeConfigurationRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumNodeConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumNodeConfiguration"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumNodeConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumNodeConfigurationRequest
//
// @return DescribeEthereumNodeConfigurationResponse
func (client *Client) DescribeEthereumNodeConfiguration(request *DescribeEthereumNodeConfigurationRequest) (_result *DescribeEthereumNodeConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumNodeConfigurationResponse{}
	_body, _err := client.DescribeEthereumNodeConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumNodeInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumNodeInfoResponse
func (client *Client) DescribeEthereumNodeInfoWithOptions(request *DescribeEthereumNodeInfoRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumNodeInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumNodeInfo"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumNodeInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumNodeInfoRequest
//
// @return DescribeEthereumNodeInfoResponse
func (client *Client) DescribeEthereumNodeInfo(request *DescribeEthereumNodeInfoRequest) (_result *DescribeEthereumNodeInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumNodeInfoResponse{}
	_body, _err := client.DescribeEthereumNodeInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumNodeLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumNodeLogsResponse
func (client *Client) DescribeEthereumNodeLogsWithOptions(request *DescribeEthereumNodeLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeEthereumNodeLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lines)) {
		body["Lines"] = request.Lines
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Target)) {
		body["Target"] = request.Target
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumNodeLogs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumNodeLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeEthereumNodeLogsRequest
//
// @return DescribeEthereumNodeLogsResponse
func (client *Client) DescribeEthereumNodeLogs(request *DescribeEthereumNodeLogsRequest) (_result *DescribeEthereumNodeLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumNodeLogsResponse{}
	_body, _err := client.DescribeEthereumNodeLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumNodesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumNodesResponse
func (client *Client) DescribeEthereumNodesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeEthereumNodesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereumNodes"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumNodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeEthereumNodesResponse
func (client *Client) DescribeEthereumNodes() (_result *DescribeEthereumNodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumNodesResponse{}
	_body, _err := client.DescribeEthereumNodesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeEthereumsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeEthereumsResponse
func (client *Client) DescribeEthereumsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeEthereumsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeEthereums"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeEthereumsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeEthereumsResponse
func (client *Client) DescribeEthereums() (_result *DescribeEthereumsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeEthereumsResponse{}
	_body, _err := client.DescribeEthereumsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeExplorerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExplorerResponse
func (client *Client) DescribeExplorerWithOptions(request *DescribeExplorerRequest, runtime *util.RuntimeOptions) (_result *DescribeExplorerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ExBody)) {
		query["ExBody"] = request.ExBody
	}

	if !tea.BoolValue(util.IsUnset(request.ExMethod)) {
		query["ExMethod"] = request.ExMethod
	}

	if !tea.BoolValue(util.IsUnset(request.ExUrl)) {
		query["ExUrl"] = request.ExUrl
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExplorer"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExplorerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeExplorerRequest
//
// @return DescribeExplorerResponse
func (client *Client) DescribeExplorer(request *DescribeExplorerRequest) (_result *DescribeExplorerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExplorerResponse{}
	_body, _err := client.DescribeExplorerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeExplorerURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeExplorerURLResponse
func (client *Client) DescribeExplorerURLWithOptions(request *DescribeExplorerURLRequest, runtime *util.RuntimeOptions) (_result *DescribeExplorerURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeExplorerURL"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeExplorerURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeExplorerURLRequest
//
// @return DescribeExplorerURLResponse
func (client *Client) DescribeExplorerURL(request *DescribeExplorerURLRequest) (_result *DescribeExplorerURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeExplorerURLResponse{}
	_body, _err := client.DescribeExplorerURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricChaincodeEndorsePolicyRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricChaincodeEndorsePolicyResponse
func (client *Client) DescribeFabricChaincodeEndorsePolicyWithOptions(request *DescribeFabricChaincodeEndorsePolicyRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricChaincodeEndorsePolicyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeName)) {
		body["ChaincodeName"] = request.ChaincodeName
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricChaincodeEndorsePolicy"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricChaincodeEndorsePolicyResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricChaincodeEndorsePolicyRequest
//
// @return DescribeFabricChaincodeEndorsePolicyResponse
func (client *Client) DescribeFabricChaincodeEndorsePolicy(request *DescribeFabricChaincodeEndorsePolicyRequest) (_result *DescribeFabricChaincodeEndorsePolicyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricChaincodeEndorsePolicyResponse{}
	_body, _err := client.DescribeFabricChaincodeEndorsePolicyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricChaincodeLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricChaincodeLogsResponse
func (client *Client) DescribeFabricChaincodeLogsWithOptions(request *DescribeFabricChaincodeLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricChaincodeLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		query["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Lines)) {
		query["Lines"] = request.Lines
	}

	if !tea.BoolValue(util.IsUnset(request.Offset)) {
		query["Offset"] = request.Offset
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.PeerName)) {
		query["PeerName"] = request.PeerName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricChaincodeLogs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricChaincodeLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricChaincodeLogsRequest
//
// @return DescribeFabricChaincodeLogsResponse
func (client *Client) DescribeFabricChaincodeLogs(request *DescribeFabricChaincodeLogsRequest) (_result *DescribeFabricChaincodeLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricChaincodeLogsResponse{}
	_body, _err := client.DescribeFabricChaincodeLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricChannelConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricChannelConfigResponse
func (client *Client) DescribeFabricChannelConfigWithOptions(request *DescribeFabricChannelConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricChannelConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricChannelConfig"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricChannelConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricChannelConfigRequest
//
// @return DescribeFabricChannelConfigResponse
func (client *Client) DescribeFabricChannelConfig(request *DescribeFabricChannelConfigRequest) (_result *DescribeFabricChannelConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricChannelConfigResponse{}
	_body, _err := client.DescribeFabricChannelConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricChannelOrdererRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricChannelOrdererResponse
func (client *Client) DescribeFabricChannelOrdererWithOptions(request *DescribeFabricChannelOrdererRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricChannelOrdererResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricChannelOrderer"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricChannelOrdererResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricChannelOrdererRequest
//
// @return DescribeFabricChannelOrdererResponse
func (client *Client) DescribeFabricChannelOrderer(request *DescribeFabricChannelOrdererRequest) (_result *DescribeFabricChannelOrdererResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricChannelOrdererResponse{}
	_body, _err := client.DescribeFabricChannelOrdererWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricChannelOrganizationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricChannelOrganizationsResponse
func (client *Client) DescribeFabricChannelOrganizationsWithOptions(request *DescribeFabricChannelOrganizationsRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricChannelOrganizationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricChannelOrganizations"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricChannelOrganizationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricChannelOrganizationsRequest
//
// @return DescribeFabricChannelOrganizationsResponse
func (client *Client) DescribeFabricChannelOrganizations(request *DescribeFabricChannelOrganizationsRequest) (_result *DescribeFabricChannelOrganizationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricChannelOrganizationsResponse{}
	_body, _err := client.DescribeFabricChannelOrganizationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricJoinRequestRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricJoinRequestResponse
func (client *Client) DescribeFabricJoinRequestWithOptions(request *DescribeFabricJoinRequestRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricJoinRequestResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricJoinRequest"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricJoinRequestResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricJoinRequestRequest
//
// @return DescribeFabricJoinRequestResponse
func (client *Client) DescribeFabricJoinRequest(request *DescribeFabricJoinRequestRequest) (_result *DescribeFabricJoinRequestResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricJoinRequestResponse{}
	_body, _err := client.DescribeFabricJoinRequestWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricJoinResponseRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricJoinResponseResponse
func (client *Client) DescribeFabricJoinResponseWithOptions(request *DescribeFabricJoinResponseRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricJoinResponseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricJoinResponse"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricJoinResponseResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricJoinResponseRequest
//
// @return DescribeFabricJoinResponseResponse
func (client *Client) DescribeFabricJoinResponse(request *DescribeFabricJoinResponseRequest) (_result *DescribeFabricJoinResponseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricJoinResponseResponse{}
	_body, _err := client.DescribeFabricJoinResponseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricManagementChaincodesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricManagementChaincodesResponse
func (client *Client) DescribeFabricManagementChaincodesWithOptions(request *DescribeFabricManagementChaincodesRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricManagementChaincodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricManagementChaincodes"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricManagementChaincodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricManagementChaincodesRequest
//
// @return DescribeFabricManagementChaincodesResponse
func (client *Client) DescribeFabricManagementChaincodes(request *DescribeFabricManagementChaincodesRequest) (_result *DescribeFabricManagementChaincodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricManagementChaincodesResponse{}
	_body, _err := client.DescribeFabricManagementChaincodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricOrganizationChaincodePackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricOrganizationChaincodePackageResponse
func (client *Client) DescribeFabricOrganizationChaincodePackageWithOptions(request *DescribeFabricOrganizationChaincodePackageRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricOrganizationChaincodePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricOrganizationChaincodePackage"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricOrganizationChaincodePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricOrganizationChaincodePackageRequest
//
// @return DescribeFabricOrganizationChaincodePackageResponse
func (client *Client) DescribeFabricOrganizationChaincodePackage(request *DescribeFabricOrganizationChaincodePackageRequest) (_result *DescribeFabricOrganizationChaincodePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricOrganizationChaincodePackageResponse{}
	_body, _err := client.DescribeFabricOrganizationChaincodePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricOrganizationEgressRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricOrganizationEgressResponse
func (client *Client) DescribeFabricOrganizationEgressWithOptions(request *DescribeFabricOrganizationEgressRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricOrganizationEgressResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricOrganizationEgress"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricOrganizationEgressResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricOrganizationEgressRequest
//
// @return DescribeFabricOrganizationEgressResponse
func (client *Client) DescribeFabricOrganizationEgress(request *DescribeFabricOrganizationEgressRequest) (_result *DescribeFabricOrganizationEgressResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricOrganizationEgressResponse{}
	_body, _err := client.DescribeFabricOrganizationEgressWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeFabricPeerChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeFabricPeerChannelsResponse
func (client *Client) DescribeFabricPeerChannelsWithOptions(request *DescribeFabricPeerChannelsRequest, runtime *util.RuntimeOptions) (_result *DescribeFabricPeerChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeFabricPeerChannels"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeFabricPeerChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeFabricPeerChannelsRequest
//
// @return DescribeFabricPeerChannelsResponse
func (client *Client) DescribeFabricPeerChannels(request *DescribeFabricPeerChannelsRequest) (_result *DescribeFabricPeerChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeFabricPeerChannelsResponse{}
	_body, _err := client.DescribeFabricPeerChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeGovernanceTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGovernanceTaskResponse
func (client *Client) DescribeGovernanceTaskWithOptions(request *DescribeGovernanceTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeGovernanceTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGovernanceTask"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGovernanceTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeGovernanceTaskRequest
//
// @return DescribeGovernanceTaskResponse
func (client *Client) DescribeGovernanceTask(request *DescribeGovernanceTaskRequest) (_result *DescribeGovernanceTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGovernanceTaskResponse{}
	_body, _err := client.DescribeGovernanceTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeGovernanceTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeGovernanceTasksResponse
func (client *Client) DescribeGovernanceTasksWithOptions(request *DescribeGovernanceTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeGovernanceTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeGovernanceTasks"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeGovernanceTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeGovernanceTasksRequest
//
// @return DescribeGovernanceTasksResponse
func (client *Client) DescribeGovernanceTasks(request *DescribeGovernanceTasksRequest) (_result *DescribeGovernanceTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeGovernanceTasksResponse{}
	_body, _err := client.DescribeGovernanceTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeInvitationCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInvitationCodeResponse
func (client *Client) DescribeInvitationCodeWithOptions(request *DescribeInvitationCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeInvitationCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInvitationCode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInvitationCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeInvitationCodeRequest
//
// @return DescribeInvitationCodeResponse
func (client *Client) DescribeInvitationCode(request *DescribeInvitationCodeRequest) (_result *DescribeInvitationCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInvitationCodeResponse{}
	_body, _err := client.DescribeInvitationCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeInvitationListRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInvitationListResponse
func (client *Client) DescribeInvitationListWithOptions(request *DescribeInvitationListRequest, runtime *util.RuntimeOptions) (_result *DescribeInvitationListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInvitationList"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInvitationListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeInvitationListRequest
//
// @return DescribeInvitationListResponse
func (client *Client) DescribeInvitationList(request *DescribeInvitationListRequest) (_result *DescribeInvitationListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInvitationListResponse{}
	_body, _err := client.DescribeInvitationListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// ***
//
// @param request - DescribeInviterRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeInviterResponse
func (client *Client) DescribeInviterWithOptions(request *DescribeInviterRequest, runtime *util.RuntimeOptions) (_result *DescribeInviterResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Code)) {
		body["Code"] = request.Code
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInviter"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInviterResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// ***
//
// @param request - DescribeInviterRequest
//
// @return DescribeInviterResponse
func (client *Client) DescribeInviter(request *DescribeInviterRequest) (_result *DescribeInviterResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInviterResponse{}
	_body, _err := client.DescribeInviterWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeLatest15BlocksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLatest15BlocksResponse
func (client *Client) DescribeLatest15BlocksWithOptions(request *DescribeLatest15BlocksRequest, runtime *util.RuntimeOptions) (_result *DescribeLatest15BlocksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLatest15Blocks"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLatest15BlocksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeLatest15BlocksRequest
//
// @return DescribeLatest15BlocksResponse
func (client *Client) DescribeLatest15Blocks(request *DescribeLatest15BlocksRequest) (_result *DescribeLatest15BlocksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLatest15BlocksResponse{}
	_body, _err := client.DescribeLatest15BlocksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeLatest15TransDigestsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLatest15TransDigestsResponse
func (client *Client) DescribeLatest15TransDigestsWithOptions(request *DescribeLatest15TransDigestsRequest, runtime *util.RuntimeOptions) (_result *DescribeLatest15TransDigestsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLatest15TransDigests"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLatest15TransDigestsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeLatest15TransDigestsRequest
//
// @return DescribeLatest15TransDigestsResponse
func (client *Client) DescribeLatest15TransDigests(request *DescribeLatest15TransDigestsRequest) (_result *DescribeLatest15TransDigestsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLatest15TransDigestsResponse{}
	_body, _err := client.DescribeLatest15TransDigestsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeLatestBlocksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLatestBlocksResponse
func (client *Client) DescribeLatestBlocksWithOptions(request *DescribeLatestBlocksRequest, runtime *util.RuntimeOptions) (_result *DescribeLatestBlocksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLatestBlocks"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLatestBlocksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeLatestBlocksRequest
//
// @return DescribeLatestBlocksResponse
func (client *Client) DescribeLatestBlocks(request *DescribeLatestBlocksRequest) (_result *DescribeLatestBlocksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLatestBlocksResponse{}
	_body, _err := client.DescribeLatestBlocksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeLatestTransactionDigestsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeLatestTransactionDigestsResponse
func (client *Client) DescribeLatestTransactionDigestsWithOptions(request *DescribeLatestTransactionDigestsRequest, runtime *util.RuntimeOptions) (_result *DescribeLatestTransactionDigestsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeLatestTransactionDigests"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeLatestTransactionDigestsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeLatestTransactionDigestsRequest
//
// @return DescribeLatestTransactionDigestsResponse
func (client *Client) DescribeLatestTransactionDigests(request *DescribeLatestTransactionDigestsRequest) (_result *DescribeLatestTransactionDigestsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeLatestTransactionDigestsResponse{}
	_body, _err := client.DescribeLatestTransactionDigestsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMemberRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMemberRoleResponse
func (client *Client) DescribeMemberRoleWithOptions(request *DescribeMemberRoleRequest, runtime *util.RuntimeOptions) (_result *DescribeMemberRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMemberRole"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMemberRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMemberRoleRequest
//
// @return DescribeMemberRoleResponse
func (client *Client) DescribeMemberRole(request *DescribeMemberRoleRequest) (_result *DescribeMemberRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMemberRoleResponse{}
	_body, _err := client.DescribeMemberRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMembersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMembersResponse
func (client *Client) DescribeMembersWithOptions(request *DescribeMembersRequest, runtime *util.RuntimeOptions) (_result *DescribeMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMembers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMembersRequest
//
// @return DescribeMembersResponse
func (client *Client) DescribeMembers(request *DescribeMembersRequest) (_result *DescribeMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMembersResponse{}
	_body, _err := client.DescribeMembersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMetricRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMetricResponse
func (client *Client) DescribeMetricWithOptions(request *DescribeMetricRequest, runtime *util.RuntimeOptions) (_result *DescribeMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		query["Bizid"] = request.Bizid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InnerIp)) {
		body["InnerIp"] = request.InnerIp
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		body["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		body["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		body["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.TimeArea)) {
		body["TimeArea"] = request.TimeArea
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeMetric"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeMetricRequest
//
// @return DescribeMetricResponse
func (client *Client) DescribeMetric(request *DescribeMetricRequest) (_result *DescribeMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMetricResponse{}
	_body, _err := client.DescribeMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMyBlockchainsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMyBlockchainsResponse
func (client *Client) DescribeMyBlockchainsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeMyBlockchainsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeMyBlockchains"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMyBlockchainsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeMyBlockchainsResponse
func (client *Client) DescribeMyBlockchains() (_result *DescribeMyBlockchainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMyBlockchainsResponse{}
	_body, _err := client.DescribeMyBlockchainsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMyBlockchanInfosRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMyBlockchanInfosResponse
func (client *Client) DescribeMyBlockchanInfosWithOptions(runtime *util.RuntimeOptions) (_result *DescribeMyBlockchanInfosResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeMyBlockchanInfos"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMyBlockchanInfosResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeMyBlockchanInfosResponse
func (client *Client) DescribeMyBlockchanInfos() (_result *DescribeMyBlockchanInfosResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMyBlockchanInfosResponse{}
	_body, _err := client.DescribeMyBlockchanInfosWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMySuccessAppliesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMySuccessAppliesResponse
func (client *Client) DescribeMySuccessAppliesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeMySuccessAppliesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeMySuccessApplies"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMySuccessAppliesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeMySuccessAppliesResponse
func (client *Client) DescribeMySuccessApplies() (_result *DescribeMySuccessAppliesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMySuccessAppliesResponse{}
	_body, _err := client.DescribeMySuccessAppliesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeMySuccessfulApplicationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeMySuccessfulApplicationResponse
func (client *Client) DescribeMySuccessfulApplicationWithOptions(runtime *util.RuntimeOptions) (_result *DescribeMySuccessfulApplicationResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeMySuccessfulApplication"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeMySuccessfulApplicationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeMySuccessfulApplicationResponse
func (client *Client) DescribeMySuccessfulApplication() (_result *DescribeMySuccessfulApplicationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMySuccessfulApplicationResponse{}
	_body, _err := client.DescribeMySuccessfulApplicationWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeNetstatURLRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeNetstatURLResponse
func (client *Client) DescribeNetstatURLWithOptions(request *DescribeNetstatURLRequest, runtime *util.RuntimeOptions) (_result *DescribeNetstatURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Id)) {
		body["Id"] = request.Id
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeNetstatURL"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeNetstatURLResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeNetstatURLRequest
//
// @return DescribeNetstatURLResponse
func (client *Client) DescribeNetstatURL(request *DescribeNetstatURLRequest) (_result *DescribeNetstatURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeNetstatURLResponse{}
	_body, _err := client.DescribeNetstatURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrdererLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrdererLogsResponse
func (client *Client) DescribeOrdererLogsWithOptions(request *DescribeOrdererLogsRequest, runtime *util.RuntimeOptions) (_result *DescribeOrdererLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.Lines)) {
		query["Lines"] = request.Lines
	}

	if !tea.BoolValue(util.IsUnset(request.OrdererName)) {
		query["OrdererName"] = request.OrdererName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrdererLogs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrdererLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrdererLogsRequest
//
// @return DescribeOrdererLogsResponse
func (client *Client) DescribeOrdererLogs(request *DescribeOrdererLogsRequest) (_result *DescribeOrdererLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrdererLogsResponse{}
	_body, _err := client.DescribeOrdererLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationResponse
func (client *Client) DescribeOrganizationWithOptions(request *DescribeOrganizationRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganization"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationRequest
//
// @return DescribeOrganizationResponse
func (client *Client) DescribeOrganization(request *DescribeOrganizationRequest) (_result *DescribeOrganizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationResponse{}
	_body, _err := client.DescribeOrganizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationChaincodesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationChaincodesResponse
func (client *Client) DescribeOrganizationChaincodesWithOptions(request *DescribeOrganizationChaincodesRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationChaincodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationChaincodes"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationChaincodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationChaincodesRequest
//
// @return DescribeOrganizationChaincodesResponse
func (client *Client) DescribeOrganizationChaincodes(request *DescribeOrganizationChaincodesRequest) (_result *DescribeOrganizationChaincodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationChaincodesResponse{}
	_body, _err := client.DescribeOrganizationChaincodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// ***
//
// @param request - DescribeOrganizationChannelsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationChannelsResponse
func (client *Client) DescribeOrganizationChannelsWithOptions(request *DescribeOrganizationChannelsRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationChannelsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationChannels"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationChannelsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// ***
//
// @param request - DescribeOrganizationChannelsRequest
//
// @return DescribeOrganizationChannelsResponse
func (client *Client) DescribeOrganizationChannels(request *DescribeOrganizationChannelsRequest) (_result *DescribeOrganizationChannelsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationChannelsResponse{}
	_body, _err := client.DescribeOrganizationChannelsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationDeletableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationDeletableResponse
func (client *Client) DescribeOrganizationDeletableWithOptions(request *DescribeOrganizationDeletableRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationDeletableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationDeletable"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationDeletableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationDeletableRequest
//
// @return DescribeOrganizationDeletableResponse
func (client *Client) DescribeOrganizationDeletable(request *DescribeOrganizationDeletableRequest) (_result *DescribeOrganizationDeletableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationDeletableResponse{}
	_body, _err := client.DescribeOrganizationDeletableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationMembersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationMembersResponse
func (client *Client) DescribeOrganizationMembersWithOptions(request *DescribeOrganizationMembersRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationMembersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationMembers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationMembersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationMembersRequest
//
// @return DescribeOrganizationMembersResponse
func (client *Client) DescribeOrganizationMembers(request *DescribeOrganizationMembersRequest) (_result *DescribeOrganizationMembersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationMembersResponse{}
	_body, _err := client.DescribeOrganizationMembersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationPeersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationPeersResponse
func (client *Client) DescribeOrganizationPeersWithOptions(request *DescribeOrganizationPeersRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationPeersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationPeers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationPeersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationPeersRequest
//
// @return DescribeOrganizationPeersResponse
func (client *Client) DescribeOrganizationPeers(request *DescribeOrganizationPeersRequest) (_result *DescribeOrganizationPeersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationPeersResponse{}
	_body, _err := client.DescribeOrganizationPeersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationSpecsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationSpecsResponse
func (client *Client) DescribeOrganizationSpecsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeOrganizationSpecsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationSpecs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationSpecsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeOrganizationSpecsResponse
func (client *Client) DescribeOrganizationSpecs() (_result *DescribeOrganizationSpecsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationSpecsResponse{}
	_body, _err := client.DescribeOrganizationSpecsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationTriggersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationTriggersResponse
func (client *Client) DescribeOrganizationTriggersWithOptions(request *DescribeOrganizationTriggersRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationTriggersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationTriggers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationTriggersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationTriggersRequest
//
// @return DescribeOrganizationTriggersResponse
func (client *Client) DescribeOrganizationTriggers(request *DescribeOrganizationTriggersRequest) (_result *DescribeOrganizationTriggersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationTriggersResponse{}
	_body, _err := client.DescribeOrganizationTriggersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationUserCertsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationUserCertsResponse
func (client *Client) DescribeOrganizationUserCertsWithOptions(request *DescribeOrganizationUserCertsRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationUserCertsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		body["Username"] = request.Username
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationUserCerts"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationUserCertsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationUserCertsRequest
//
// @return DescribeOrganizationUserCertsResponse
func (client *Client) DescribeOrganizationUserCerts(request *DescribeOrganizationUserCertsRequest) (_result *DescribeOrganizationUserCertsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationUserCertsResponse{}
	_body, _err := client.DescribeOrganizationUserCertsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationUsersRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationUsersResponse
func (client *Client) DescribeOrganizationUsersWithOptions(request *DescribeOrganizationUsersRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationUsersResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizationUsers"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationUsersResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationUsersRequest
//
// @return DescribeOrganizationUsersResponse
func (client *Client) DescribeOrganizationUsers(request *DescribeOrganizationUsersRequest) (_result *DescribeOrganizationUsersResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationUsersResponse{}
	_body, _err := client.DescribeOrganizationUsersWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrganizationsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrganizationsResponse
func (client *Client) DescribeOrganizationsWithOptions(request *DescribeOrganizationsRequest, runtime *util.RuntimeOptions) (_result *DescribeOrganizationsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrganizations"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrganizationsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrganizationsRequest
//
// @return DescribeOrganizationsResponse
func (client *Client) DescribeOrganizations(request *DescribeOrganizationsRequest) (_result *DescribeOrganizationsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrganizationsResponse{}
	_body, _err := client.DescribeOrganizationsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOrgnaizationChaincodesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOrgnaizationChaincodesResponse
func (client *Client) DescribeOrgnaizationChaincodesWithOptions(request *DescribeOrgnaizationChaincodesRequest, runtime *util.RuntimeOptions) (_result *DescribeOrgnaizationChaincodesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOrgnaizationChaincodes"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOrgnaizationChaincodesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOrgnaizationChaincodesRequest
//
// @return DescribeOrgnaizationChaincodesResponse
func (client *Client) DescribeOrgnaizationChaincodes(request *DescribeOrgnaizationChaincodesRequest) (_result *DescribeOrgnaizationChaincodesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOrgnaizationChaincodesResponse{}
	_body, _err := client.DescribeOrgnaizationChaincodesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeOssPropertiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeOssPropertiesResponse
func (client *Client) DescribeOssPropertiesWithOptions(request *DescribeOssPropertiesRequest, runtime *util.RuntimeOptions) (_result *DescribeOssPropertiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeOssProperties"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeOssPropertiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeOssPropertiesRequest
//
// @return DescribeOssPropertiesResponse
func (client *Client) DescribeOssProperties(request *DescribeOssPropertiesRequest) (_result *DescribeOssPropertiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeOssPropertiesResponse{}
	_body, _err := client.DescribeOssPropertiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePeerLogsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePeerLogsResponse
func (client *Client) DescribePeerLogsWithOptions(request *DescribePeerLogsRequest, runtime *util.RuntimeOptions) (_result *DescribePeerLogsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Lines)) {
		query["Lines"] = request.Lines
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.PeerName)) {
		query["PeerName"] = request.PeerName
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePeerLogs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePeerLogsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePeerLogsRequest
//
// @return DescribePeerLogsResponse
func (client *Client) DescribePeerLogs(request *DescribePeerLogsRequest) (_result *DescribePeerLogsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePeerLogsResponse{}
	_body, _err := client.DescribePeerLogsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePublicAntChainContractProjectContentTreeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePublicAntChainContractProjectContentTreeResponse
func (client *Client) DescribePublicAntChainContractProjectContentTreeWithOptions(runtime *util.RuntimeOptions) (_result *DescribePublicAntChainContractProjectContentTreeResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribePublicAntChainContractProjectContentTree"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePublicAntChainContractProjectContentTreeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribePublicAntChainContractProjectContentTreeResponse
func (client *Client) DescribePublicAntChainContractProjectContentTree() (_result *DescribePublicAntChainContractProjectContentTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePublicAntChainContractProjectContentTreeResponse{}
	_body, _err := client.DescribePublicAntChainContractProjectContentTreeWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePublicAntChainDownloadPathsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePublicAntChainDownloadPathsResponse
func (client *Client) DescribePublicAntChainDownloadPathsWithOptions(request *DescribePublicAntChainDownloadPathsRequest, runtime *util.RuntimeOptions) (_result *DescribePublicAntChainDownloadPathsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePublicAntChainDownloadPaths"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePublicAntChainDownloadPathsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePublicAntChainDownloadPathsRequest
//
// @return DescribePublicAntChainDownloadPathsResponse
func (client *Client) DescribePublicAntChainDownloadPaths(request *DescribePublicAntChainDownloadPathsRequest) (_result *DescribePublicAntChainDownloadPathsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePublicAntChainDownloadPathsResponse{}
	_body, _err := client.DescribePublicAntChainDownloadPathsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribePublicCloudIDEEnvConfigsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribePublicCloudIDEEnvConfigsResponse
func (client *Client) DescribePublicCloudIDEEnvConfigsWithOptions(request *DescribePublicCloudIDEEnvConfigsRequest, runtime *util.RuntimeOptions) (_result *DescribePublicCloudIDEEnvConfigsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribePublicCloudIDEEnvConfigs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribePublicCloudIDEEnvConfigsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribePublicCloudIDEEnvConfigsRequest
//
// @return DescribePublicCloudIDEEnvConfigsResponse
func (client *Client) DescribePublicCloudIDEEnvConfigs(request *DescribePublicCloudIDEEnvConfigsRequest) (_result *DescribePublicCloudIDEEnvConfigsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribePublicCloudIDEEnvConfigsResponse{}
	_body, _err := client.DescribePublicCloudIDEEnvConfigsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeQRCodeAccessLogRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeQRCodeAccessLogResponse
func (client *Client) DescribeQRCodeAccessLogWithOptions(request *DescribeQRCodeAccessLogRequest, runtime *util.RuntimeOptions) (_result *DescribeQRCodeAccessLogResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQRCodeAccessLog"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQRCodeAccessLogResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeQRCodeAccessLogRequest
//
// @return DescribeQRCodeAccessLogResponse
func (client *Client) DescribeQRCodeAccessLog(request *DescribeQRCodeAccessLogRequest) (_result *DescribeQRCodeAccessLogResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQRCodeAccessLogResponse{}
	_body, _err := client.DescribeQRCodeAccessLogWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeQRCodeAuthorityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeQRCodeAuthorityResponse
func (client *Client) DescribeQRCodeAuthorityWithOptions(request *DescribeQRCodeAuthorityRequest, runtime *util.RuntimeOptions) (_result *DescribeQRCodeAuthorityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeQRCodeAuthority"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeQRCodeAuthorityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeQRCodeAuthorityRequest
//
// @return DescribeQRCodeAuthorityResponse
func (client *Client) DescribeQRCodeAuthority(request *DescribeQRCodeAuthorityRequest) (_result *DescribeQRCodeAuthorityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeQRCodeAuthorityResponse{}
	_body, _err := client.DescribeQRCodeAuthorityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeRegionsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRegionsResponse
func (client *Client) DescribeRegionsWithOptions(runtime *util.RuntimeOptions) (_result *DescribeRegionsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeRegions"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeRegionsResponse
func (client *Client) DescribeRegions() (_result *DescribeRegionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRegionsResponse{}
	_body, _err := client.DescribeRegionsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeResourceTypeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeResourceTypeResponse
func (client *Client) DescribeResourceTypeWithOptions(runtime *util.RuntimeOptions) (_result *DescribeResourceTypeResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceType"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceTypeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeResourceTypeResponse
func (client *Client) DescribeResourceType() (_result *DescribeResourceTypeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceTypeResponse{}
	_body, _err := client.DescribeResourceTypeWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeResourceTypesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeResourceTypesResponse
func (client *Client) DescribeResourceTypesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeResourceTypesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeResourceTypes"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeResourceTypesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeResourceTypesResponse
func (client *Client) DescribeResourceTypes() (_result *DescribeResourceTypesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeResourceTypesResponse{}
	_body, _err := client.DescribeResourceTypesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeRootDomainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeRootDomainResponse
func (client *Client) DescribeRootDomainWithOptions(runtime *util.RuntimeOptions) (_result *DescribeRootDomainResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeRootDomain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeRootDomainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeRootDomainResponse
func (client *Client) DescribeRootDomain() (_result *DescribeRootDomainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeRootDomainResponse{}
	_body, _err := client.DescribeRootDomainWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSchemaDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSchemaDetailResponse
func (client *Client) DescribeSchemaDetailWithOptions(request *DescribeSchemaDetailRequest, runtime *util.RuntimeOptions) (_result *DescribeSchemaDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSchemaDetail"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSchemaDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSchemaDetailRequest
//
// @return DescribeSchemaDetailResponse
func (client *Client) DescribeSchemaDetail(request *DescribeSchemaDetailRequest) (_result *DescribeSchemaDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSchemaDetailResponse{}
	_body, _err := client.DescribeSchemaDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSmartContractJobStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSmartContractJobStatusResponse
func (client *Client) DescribeSmartContractJobStatusWithOptions(request *DescribeSmartContractJobStatusRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartContractJobStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartContractJobStatus"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartContractJobStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSmartContractJobStatusRequest
//
// @return DescribeSmartContractJobStatusResponse
func (client *Client) DescribeSmartContractJobStatus(request *DescribeSmartContractJobStatusRequest) (_result *DescribeSmartContractJobStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartContractJobStatusResponse{}
	_body, _err := client.DescribeSmartContractJobStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSmartContractJobsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSmartContractJobsResponse
func (client *Client) DescribeSmartContractJobsWithOptions(request *DescribeSmartContractJobsRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartContractJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		body["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartContractJobs"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartContractJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSmartContractJobsRequest
//
// @return DescribeSmartContractJobsResponse
func (client *Client) DescribeSmartContractJobs(request *DescribeSmartContractJobsRequest) (_result *DescribeSmartContractJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartContractJobsResponse{}
	_body, _err := client.DescribeSmartContractJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSmartContractJobsByNameRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSmartContractJobsByNameResponse
func (client *Client) DescribeSmartContractJobsByNameWithOptions(request *DescribeSmartContractJobsByNameRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartContractJobsByNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Size)) {
		body["Size"] = request.Size
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		body["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartContractJobsByName"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartContractJobsByNameResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSmartContractJobsByNameRequest
//
// @return DescribeSmartContractJobsByNameResponse
func (client *Client) DescribeSmartContractJobsByName(request *DescribeSmartContractJobsByNameRequest) (_result *DescribeSmartContractJobsByNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartContractJobsByNameResponse{}
	_body, _err := client.DescribeSmartContractJobsByNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSmartContractResultRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSmartContractResultResponse
func (client *Client) DescribeSmartContractResultWithOptions(request *DescribeSmartContractResultRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartContractResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartContractResult"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartContractResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSmartContractResultRequest
//
// @return DescribeSmartContractResultResponse
func (client *Client) DescribeSmartContractResult(request *DescribeSmartContractResultRequest) (_result *DescribeSmartContractResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartContractResultResponse{}
	_body, _err := client.DescribeSmartContractResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSmartContractResultContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSmartContractResultContentResponse
func (client *Client) DescribeSmartContractResultContentWithOptions(request *DescribeSmartContractResultContentRequest, runtime *util.RuntimeOptions) (_result *DescribeSmartContractResultContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSmartContractResultContent"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSmartContractResultContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSmartContractResultContentRequest
//
// @return DescribeSmartContractResultContentResponse
func (client *Client) DescribeSmartContractResultContent(request *DescribeSmartContractResultContentRequest) (_result *DescribeSmartContractResultContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSmartContractResultContentResponse{}
	_body, _err := client.DescribeSmartContractResultContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeSubscribeCloudServiceIntegrationStateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeSubscribeCloudServiceIntegrationStateResponse
func (client *Client) DescribeSubscribeCloudServiceIntegrationStateWithOptions(request *DescribeSubscribeCloudServiceIntegrationStateRequest, runtime *util.RuntimeOptions) (_result *DescribeSubscribeCloudServiceIntegrationStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeSubscribeCloudServiceIntegrationState"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeSubscribeCloudServiceIntegrationStateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeSubscribeCloudServiceIntegrationStateRequest
//
// @return DescribeSubscribeCloudServiceIntegrationStateResponse
func (client *Client) DescribeSubscribeCloudServiceIntegrationState(request *DescribeSubscribeCloudServiceIntegrationStateRequest) (_result *DescribeSubscribeCloudServiceIntegrationStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeSubscribeCloudServiceIntegrationStateResponse{}
	_body, _err := client.DescribeSubscribeCloudServiceIntegrationStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTasksRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTasksResponse
func (client *Client) DescribeTasksWithOptions(runtime *util.RuntimeOptions) (_result *DescribeTasksResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeTasks"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeTasksResponse
func (client *Client) DescribeTasks() (_result *DescribeTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTasksResponse{}
	_body, _err := client.DescribeTasksWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTemplatesResponse
func (client *Client) DescribeTemplatesWithOptions(runtime *util.RuntimeOptions) (_result *DescribeTemplatesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("DescribeTemplates"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return DescribeTemplatesResponse
func (client *Client) DescribeTemplates() (_result *DescribeTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTemplatesResponse{}
	_body, _err := client.DescribeTemplatesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTransactionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTransactionResponse
func (client *Client) DescribeTransactionWithOptions(request *DescribeTransactionRequest, runtime *util.RuntimeOptions) (_result *DescribeTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Hash)) {
		body["Hash"] = request.Hash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTransaction"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTransactionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTransactionRequest
//
// @return DescribeTransactionResponse
func (client *Client) DescribeTransaction(request *DescribeTransactionRequest) (_result *DescribeTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTransactionResponse{}
	_body, _err := client.DescribeTransactionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTransactionFor2CBrowserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTransactionFor2CBrowserResponse
func (client *Client) DescribeTransactionFor2CBrowserWithOptions(request *DescribeTransactionFor2CBrowserRequest, runtime *util.RuntimeOptions) (_result *DescribeTransactionFor2CBrowserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlipayAuthCode)) {
		body["AlipayAuthCode"] = request.AlipayAuthCode
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Hash)) {
		body["Hash"] = request.Hash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTransactionFor2CBrowser"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTransactionFor2CBrowserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTransactionFor2CBrowserRequest
//
// @return DescribeTransactionFor2CBrowserResponse
func (client *Client) DescribeTransactionFor2CBrowser(request *DescribeTransactionFor2CBrowserRequest) (_result *DescribeTransactionFor2CBrowserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTransactionFor2CBrowserResponse{}
	_body, _err := client.DescribeTransactionFor2CBrowserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTransactionQRCodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTransactionQRCodeResponse
func (client *Client) DescribeTransactionQRCodeWithOptions(request *DescribeTransactionQRCodeRequest, runtime *util.RuntimeOptions) (_result *DescribeTransactionQRCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Hash)) {
		body["Hash"] = request.Hash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTransactionQRCode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTransactionQRCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTransactionQRCodeRequest
//
// @return DescribeTransactionQRCodeResponse
func (client *Client) DescribeTransactionQRCode(request *DescribeTransactionQRCodeRequest) (_result *DescribeTransactionQRCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTransactionQRCodeResponse{}
	_body, _err := client.DescribeTransactionQRCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTransactionReceiptFor2CBrowserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTransactionReceiptFor2CBrowserResponse
func (client *Client) DescribeTransactionReceiptFor2CBrowserWithOptions(request *DescribeTransactionReceiptFor2CBrowserRequest, runtime *util.RuntimeOptions) (_result *DescribeTransactionReceiptFor2CBrowserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AlipayAuthCode)) {
		body["AlipayAuthCode"] = request.AlipayAuthCode
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Hash)) {
		body["Hash"] = request.Hash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTransactionReceiptFor2CBrowser"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("Anonymous"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTransactionReceiptFor2CBrowserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTransactionReceiptFor2CBrowserRequest
//
// @return DescribeTransactionReceiptFor2CBrowserResponse
func (client *Client) DescribeTransactionReceiptFor2CBrowser(request *DescribeTransactionReceiptFor2CBrowserRequest) (_result *DescribeTransactionReceiptFor2CBrowserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTransactionReceiptFor2CBrowserResponse{}
	_body, _err := client.DescribeTransactionReceiptFor2CBrowserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DescribeTriggerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DescribeTriggerResponse
func (client *Client) DescribeTriggerWithOptions(request *DescribeTriggerRequest, runtime *util.RuntimeOptions) (_result *DescribeTriggerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		query["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTrigger"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTriggerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DescribeTriggerRequest
//
// @return DescribeTriggerResponse
func (client *Client) DescribeTrigger(request *DescribeTriggerRequest) (_result *DescribeTriggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTriggerResponse{}
	_body, _err := client.DescribeTriggerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DestroyConsortiumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DestroyConsortiumResponse
func (client *Client) DestroyConsortiumWithOptions(request *DestroyConsortiumRequest, runtime *util.RuntimeOptions) (_result *DestroyConsortiumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DestroyConsortium"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DestroyConsortiumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DestroyConsortiumRequest
//
// @return DestroyConsortiumResponse
func (client *Client) DestroyConsortium(request *DestroyConsortiumRequest) (_result *DestroyConsortiumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DestroyConsortiumResponse{}
	_body, _err := client.DestroyConsortiumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DestroyEthereumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DestroyEthereumResponse
func (client *Client) DestroyEthereumWithOptions(request *DestroyEthereumRequest, runtime *util.RuntimeOptions) (_result *DestroyEthereumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EthereumId)) {
		body["EthereumId"] = request.EthereumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DestroyEthereum"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DestroyEthereumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DestroyEthereumRequest
//
// @return DestroyEthereumResponse
func (client *Client) DestroyEthereum(request *DestroyEthereumRequest) (_result *DestroyEthereumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DestroyEthereumResponse{}
	_body, _err := client.DestroyEthereumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DestroyOrganizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DestroyOrganizationResponse
func (client *Client) DestroyOrganizationWithOptions(request *DestroyOrganizationRequest, runtime *util.RuntimeOptions) (_result *DestroyOrganizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DestroyOrganization"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DestroyOrganizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DestroyOrganizationRequest
//
// @return DestroyOrganizationResponse
func (client *Client) DestroyOrganization(request *DestroyOrganizationRequest) (_result *DestroyOrganizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DestroyOrganizationResponse{}
	_body, _err := client.DestroyOrganizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DownloadAllRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadAllResponse
func (client *Client) DownloadAllWithOptions(request *DownloadAllRequest, runtime *util.RuntimeOptions) (_result *DownloadAllResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadAll"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadAllResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DownloadAllRequest
//
// @return DownloadAllResponse
func (client *Client) DownloadAll(request *DownloadAllRequest) (_result *DownloadAllResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadAllResponse{}
	_body, _err := client.DownloadAllWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DownloadBizviewRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadBizviewResponse
func (client *Client) DownloadBizviewWithOptions(request *DownloadBizviewRequest, runtime *util.RuntimeOptions) (_result *DownloadBizviewResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadBizview"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadBizviewResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DownloadBizviewRequest
//
// @return DownloadBizviewResponse
func (client *Client) DownloadBizview(request *DownloadBizviewRequest) (_result *DownloadBizviewResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadBizviewResponse{}
	_body, _err := client.DownloadBizviewWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DownloadFabricChannelSDKRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadFabricChannelSDKResponse
func (client *Client) DownloadFabricChannelSDKWithOptions(request *DownloadFabricChannelSDKRequest, runtime *util.RuntimeOptions) (_result *DownloadFabricChannelSDKResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadFabricChannelSDK"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadFabricChannelSDKResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DownloadFabricChannelSDKRequest
//
// @return DownloadFabricChannelSDKResponse
func (client *Client) DownloadFabricChannelSDK(request *DownloadFabricChannelSDKRequest) (_result *DownloadFabricChannelSDKResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadFabricChannelSDKResponse{}
	_body, _err := client.DownloadFabricChannelSDKWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DownloadOrganizationSDKRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadOrganizationSDKResponse
func (client *Client) DownloadOrganizationSDKWithOptions(request *DownloadOrganizationSDKRequest, runtime *util.RuntimeOptions) (_result *DownloadOrganizationSDKResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadOrganizationSDK"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadOrganizationSDKResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DownloadOrganizationSDKRequest
//
// @return DownloadOrganizationSDKResponse
func (client *Client) DownloadOrganizationSDK(request *DownloadOrganizationSDKRequest) (_result *DownloadOrganizationSDKResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadOrganizationSDKResponse{}
	_body, _err := client.DownloadOrganizationSDKWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DownloadSDK2Request
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadSDK2Response
func (client *Client) DownloadSDK2WithOptions(request *DownloadSDK2Request, runtime *util.RuntimeOptions) (_result *DownloadSDK2Response, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadSDK2"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadSDK2Response{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DownloadSDK2Request
//
// @return DownloadSDK2Response
func (client *Client) DownloadSDK2(request *DownloadSDK2Request) (_result *DownloadSDK2Response, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadSDK2Response{}
	_body, _err := client.DownloadSDK2WithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DownloadSdkRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadSdkResponse
func (client *Client) DownloadSdkWithOptions(request *DownloadSdkRequest, runtime *util.RuntimeOptions) (_result *DownloadSdkResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadSdk"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadSdkResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DownloadSdkRequest
//
// @return DownloadSdkResponse
func (client *Client) DownloadSdk(request *DownloadSdkRequest) (_result *DownloadSdkResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadSdkResponse{}
	_body, _err := client.DownloadSdkWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DownloadSignedDataRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DownloadSignedDataResponse
func (client *Client) DownloadSignedDataWithOptions(request *DownloadSignedDataRequest, runtime *util.RuntimeOptions) (_result *DownloadSignedDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Path)) {
		body["Path"] = request.Path
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DownloadSignedData"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DownloadSignedDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DownloadSignedDataRequest
//
// @return DownloadSignedDataResponse
func (client *Client) DownloadSignedData(request *DownloadSignedDataRequest) (_result *DownloadSignedDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DownloadSignedDataResponse{}
	_body, _err := client.DownloadSignedDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - DuplicateAntChainContractProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return DuplicateAntChainContractProjectResponse
func (client *Client) DuplicateAntChainContractProjectWithOptions(request *DuplicateAntChainContractProjectRequest, runtime *util.RuntimeOptions) (_result *DuplicateAntChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectVersion)) {
		body["ProjectVersion"] = request.ProjectVersion
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("DuplicateAntChainContractProject"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DuplicateAntChainContractProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - DuplicateAntChainContractProjectRequest
//
// @return DuplicateAntChainContractProjectResponse
func (client *Client) DuplicateAntChainContractProject(request *DuplicateAntChainContractProjectRequest) (_result *DuplicateAntChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DuplicateAntChainContractProjectResponse{}
	_body, _err := client.DuplicateAntChainContractProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - FreezeAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FreezeAccountResponse
func (client *Client) FreezeAccountWithOptions(request *FreezeAccountRequest, runtime *util.RuntimeOptions) (_result *FreezeAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("FreezeAccount"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FreezeAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - FreezeAccountRequest
//
// @return FreezeAccountResponse
func (client *Client) FreezeAccount(request *FreezeAccountRequest) (_result *FreezeAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FreezeAccountResponse{}
	_body, _err := client.FreezeAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - FreezeAntChainAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return FreezeAntChainAccountResponse
func (client *Client) FreezeAntChainAccountWithOptions(request *FreezeAntChainAccountRequest, runtime *util.RuntimeOptions) (_result *FreezeAntChainAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("FreezeAntChainAccount"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &FreezeAntChainAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - FreezeAntChainAccountRequest
//
// @return FreezeAntChainAccountResponse
func (client *Client) FreezeAntChainAccount(request *FreezeAntChainAccountRequest) (_result *FreezeAntChainAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &FreezeAntChainAccountResponse{}
	_body, _err := client.FreezeAntChainAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetAppliesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetAppliesResponse
func (client *Client) GetAppliesWithOptions(request *GetAppliesRequest, runtime *util.RuntimeOptions) (_result *GetAppliesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetApplies"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAppliesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetAppliesRequest
//
// @return GetAppliesResponse
func (client *Client) GetApplies(request *GetAppliesRequest) (_result *GetAppliesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAppliesResponse{}
	_body, _err := client.GetAppliesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetBcSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBcSchemaResponse
func (client *Client) GetBcSchemaWithOptions(request *GetBcSchemaRequest, runtime *util.RuntimeOptions) (_result *GetBcSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBcSchema"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBcSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetBcSchemaRequest
//
// @return GetBcSchemaResponse
func (client *Client) GetBcSchema(request *GetBcSchemaRequest) (_result *GetBcSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBcSchemaResponse{}
	_body, _err := client.GetBcSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetBlockchainCreateTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBlockchainCreateTaskResponse
func (client *Client) GetBlockchainCreateTaskWithOptions(request *GetBlockchainCreateTaskRequest, runtime *util.RuntimeOptions) (_result *GetBlockchainCreateTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Current)) {
		body["Current"] = request.Current
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBlockchainCreateTask"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBlockchainCreateTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetBlockchainCreateTaskRequest
//
// @return GetBlockchainCreateTaskResponse
func (client *Client) GetBlockchainCreateTask(request *GetBlockchainCreateTaskRequest) (_result *GetBlockchainCreateTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBlockchainCreateTaskResponse{}
	_body, _err := client.GetBlockchainCreateTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetBlockchainInfoRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetBlockchainInfoResponse
func (client *Client) GetBlockchainInfoWithOptions(request *GetBlockchainInfoRequest, runtime *util.RuntimeOptions) (_result *GetBlockchainInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetBlockchainInfo"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetBlockchainInfoResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetBlockchainInfoRequest
//
// @return GetBlockchainInfoResponse
func (client *Client) GetBlockchainInfo(request *GetBlockchainInfoRequest) (_result *GetBlockchainInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetBlockchainInfoResponse{}
	_body, _err := client.GetBlockchainInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetMyBlockchainsRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMyBlockchainsResponse
func (client *Client) GetMyBlockchainsWithOptions(runtime *util.RuntimeOptions) (_result *GetMyBlockchainsResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetMyBlockchains"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMyBlockchainsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return GetMyBlockchainsResponse
func (client *Client) GetMyBlockchains() (_result *GetMyBlockchainsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMyBlockchainsResponse{}
	_body, _err := client.GetMyBlockchainsWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetMySuccessAppliesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetMySuccessAppliesResponse
func (client *Client) GetMySuccessAppliesWithOptions(runtime *util.RuntimeOptions) (_result *GetMySuccessAppliesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetMySuccessApplies"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMySuccessAppliesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return GetMySuccessAppliesResponse
func (client *Client) GetMySuccessApplies() (_result *GetMySuccessAppliesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMySuccessAppliesResponse{}
	_body, _err := client.GetMySuccessAppliesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetOssPropertiesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetOssPropertiesResponse
func (client *Client) GetOssPropertiesWithOptions(request *GetOssPropertiesRequest, runtime *util.RuntimeOptions) (_result *GetOssPropertiesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetOssProperties"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetOssPropertiesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - GetOssPropertiesRequest
//
// @return GetOssPropertiesResponse
func (client *Client) GetOssProperties(request *GetOssPropertiesRequest) (_result *GetOssPropertiesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetOssPropertiesResponse{}
	_body, _err := client.GetOssPropertiesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - GetTemplatesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return GetTemplatesResponse
func (client *Client) GetTemplatesWithOptions(runtime *util.RuntimeOptions) (_result *GetTemplatesResponse, _err error) {
	req := &openapi.OpenApiRequest{}
	params := &openapi.Params{
		Action:      tea.String("GetTemplates"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetTemplatesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @return GetTemplatesResponse
func (client *Client) GetTemplates() (_result *GetTemplatesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetTemplatesResponse{}
	_body, _err := client.GetTemplatesWithOptions(runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - InstallChaincodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallChaincodeResponse
func (client *Client) InstallChaincodeWithOptions(request *InstallChaincodeRequest, runtime *util.RuntimeOptions) (_result *InstallChaincodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallChaincode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallChaincodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - InstallChaincodeRequest
//
// @return InstallChaincodeResponse
func (client *Client) InstallChaincode(request *InstallChaincodeRequest) (_result *InstallChaincodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallChaincodeResponse{}
	_body, _err := client.InstallChaincodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - InstallFabricChaincodePackageRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstallFabricChaincodePackageResponse
func (client *Client) InstallFabricChaincodePackageWithOptions(request *InstallFabricChaincodePackageRequest, runtime *util.RuntimeOptions) (_result *InstallFabricChaincodePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodePackageId)) {
		body["ChaincodePackageId"] = request.ChaincodePackageId
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InstallFabricChaincodePackage"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstallFabricChaincodePackageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - InstallFabricChaincodePackageRequest
//
// @return InstallFabricChaincodePackageResponse
func (client *Client) InstallFabricChaincodePackage(request *InstallFabricChaincodePackageRequest) (_result *InstallFabricChaincodePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstallFabricChaincodePackageResponse{}
	_body, _err := client.InstallFabricChaincodePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - InstantiateChaincodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InstantiateChaincodeResponse
func (client *Client) InstantiateChaincodeWithOptions(request *InstantiateChaincodeRequest, runtime *util.RuntimeOptions) (_result *InstantiateChaincodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.CollectionConfig)) {
		body["CollectionConfig"] = request.CollectionConfig
	}

	if !tea.BoolValue(util.IsUnset(request.EndorsePolicy)) {
		body["EndorsePolicy"] = request.EndorsePolicy
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InstantiateChaincode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InstantiateChaincodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - InstantiateChaincodeRequest
//
// @return InstantiateChaincodeResponse
func (client *Client) InstantiateChaincode(request *InstantiateChaincodeRequest) (_result *InstantiateChaincodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InstantiateChaincodeResponse{}
	_body, _err := client.InstantiateChaincodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - InviteUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return InviteUserResponse
func (client *Client) InviteUserWithOptions(request *InviteUserRequest, runtime *util.RuntimeOptions) (_result *InviteUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bid)) {
		body["Bid"] = request.Bid
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.UserEmail)) {
		body["UserEmail"] = request.UserEmail
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("InviteUser"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &InviteUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - InviteUserRequest
//
// @return InviteUserResponse
func (client *Client) InviteUser(request *InviteUserRequest) (_result *InviteUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &InviteUserResponse{}
	_body, _err := client.InviteUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// Description:
//
// ***
//
// @param request - JoinChannelRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return JoinChannelResponse
func (client *Client) JoinChannelWithOptions(request *JoinChannelRequest, runtime *util.RuntimeOptions) (_result *JoinChannelResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		query["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Do)) {
		query["Do"] = request.Do
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("JoinChannel"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &JoinChannelResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// Description:
//
// ***
//
// @param request - JoinChannelRequest
//
// @return JoinChannelResponse
func (client *Client) JoinChannel(request *JoinChannelRequest) (_result *JoinChannelResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &JoinChannelResponse{}
	_body, _err := client.JoinChannelWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ListTagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResourcesWithOptions(request *ListTagResourcesRequest, runtime *util.RuntimeOptions) (_result *ListTagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NextToken)) {
		query["NextToken"] = request.NextToken
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ListTagResources"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ListTagResourcesRequest
//
// @return ListTagResourcesResponse
func (client *Client) ListTagResources(request *ListTagResourcesRequest) (_result *ListTagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTagResourcesResponse{}
	_body, _err := client.ListTagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ModifyTriggerRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ModifyTriggerResponse
func (client *Client) ModifyTriggerWithOptions(request *ModifyTriggerRequest, runtime *util.RuntimeOptions) (_result *ModifyTriggerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.Options)) {
		body["Options"] = request.Options
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		body["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		body["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyTrigger"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyTriggerResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ModifyTriggerRequest
//
// @return ModifyTriggerResponse
func (client *Client) ModifyTrigger(request *ModifyTriggerRequest) (_result *ModifyTriggerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyTriggerResponse{}
	_body, _err := client.ModifyTriggerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - OperateUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return OperateUserResponse
func (client *Client) OperateUserWithOptions(request *OperateUserRequest, runtime *util.RuntimeOptions) (_result *OperateUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bid)) {
		body["Bid"] = request.Bid
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Operation)) {
		body["Operation"] = request.Operation
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("OperateUser"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &OperateUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - OperateUserRequest
//
// @return OperateUserResponse
func (client *Client) OperateUser(request *OperateUserRequest) (_result *OperateUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &OperateUserResponse{}
	_body, _err := client.OperateUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ProcessCloudIDEContractTransactionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ProcessCloudIDEContractTransactionResponse
func (client *Client) ProcessCloudIDEContractTransactionWithOptions(request *ProcessCloudIDEContractTransactionRequest, runtime *util.RuntimeOptions) (_result *ProcessCloudIDEContractTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.Transaction)) {
		body["Transaction"] = request.Transaction
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ProcessCloudIDEContractTransaction"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ProcessCloudIDEContractTransactionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ProcessCloudIDEContractTransactionRequest
//
// @return ProcessCloudIDEContractTransactionResponse
func (client *Client) ProcessCloudIDEContractTransaction(request *ProcessCloudIDEContractTransactionRequest) (_result *ProcessCloudIDEContractTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ProcessCloudIDEContractTransactionResponse{}
	_body, _err := client.ProcessCloudIDEContractTransactionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ProcessPublicCloudIDEContractTransactionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ProcessPublicCloudIDEContractTransactionResponse
func (client *Client) ProcessPublicCloudIDEContractTransactionWithOptions(request *ProcessPublicCloudIDEContractTransactionRequest, runtime *util.RuntimeOptions) (_result *ProcessPublicCloudIDEContractTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Transaction)) {
		body["Transaction"] = request.Transaction
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ProcessPublicCloudIDEContractTransaction"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ProcessPublicCloudIDEContractTransactionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ProcessPublicCloudIDEContractTransactionRequest
//
// @return ProcessPublicCloudIDEContractTransactionResponse
func (client *Client) ProcessPublicCloudIDEContractTransaction(request *ProcessPublicCloudIDEContractTransactionRequest) (_result *ProcessPublicCloudIDEContractTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ProcessPublicCloudIDEContractTransactionResponse{}
	_body, _err := client.ProcessPublicCloudIDEContractTransactionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryBlockRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryBlockResponse
func (client *Client) QueryBlockWithOptions(request *QueryBlockRequest, runtime *util.RuntimeOptions) (_result *QueryBlockResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Height)) {
		body["Height"] = request.Height
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryBlock"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryBlockResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryBlockRequest
//
// @return QueryBlockResponse
func (client *Client) QueryBlock(request *QueryBlockRequest) (_result *QueryBlockResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryBlockResponse{}
	_body, _err := client.QueryBlockWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryConsortiumDeletableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryConsortiumDeletableResponse
func (client *Client) QueryConsortiumDeletableWithOptions(request *QueryConsortiumDeletableRequest, runtime *util.RuntimeOptions) (_result *QueryConsortiumDeletableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		query["ConsortiumId"] = request.ConsortiumId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryConsortiumDeletable"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryConsortiumDeletableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryConsortiumDeletableRequest
//
// @return QueryConsortiumDeletableResponse
func (client *Client) QueryConsortiumDeletable(request *QueryConsortiumDeletableRequest) (_result *QueryConsortiumDeletableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryConsortiumDeletableResponse{}
	_body, _err := client.QueryConsortiumDeletableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryEthereumDeletableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryEthereumDeletableResponse
func (client *Client) QueryEthereumDeletableWithOptions(request *QueryEthereumDeletableRequest, runtime *util.RuntimeOptions) (_result *QueryEthereumDeletableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EthereumId)) {
		body["EthereumId"] = request.EthereumId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryEthereumDeletable"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryEthereumDeletableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryEthereumDeletableRequest
//
// @return QueryEthereumDeletableResponse
func (client *Client) QueryEthereumDeletable(request *QueryEthereumDeletableRequest) (_result *QueryEthereumDeletableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEthereumDeletableResponse{}
	_body, _err := client.QueryEthereumDeletableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryMetricRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryMetricResponse
func (client *Client) QueryMetricWithOptions(request *QueryMetricRequest, runtime *util.RuntimeOptions) (_result *QueryMetricResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		query["Bizid"] = request.Bizid
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InnerIp)) {
		body["InnerIp"] = request.InnerIp
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		body["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.Period)) {
		body["Period"] = request.Period
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		body["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.TimeArea)) {
		body["TimeArea"] = request.TimeArea
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryMetric"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryMetricResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryMetricRequest
//
// @return QueryMetricResponse
func (client *Client) QueryMetric(request *QueryMetricRequest) (_result *QueryMetricResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMetricResponse{}
	_body, _err := client.QueryMetricWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryOrganizationDeletableRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryOrganizationDeletableResponse
func (client *Client) QueryOrganizationDeletableWithOptions(request *QueryOrganizationDeletableRequest, runtime *util.RuntimeOptions) (_result *QueryOrganizationDeletableResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		query["OrganizationId"] = request.OrganizationId
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryOrganizationDeletable"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryOrganizationDeletableResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryOrganizationDeletableRequest
//
// @return QueryOrganizationDeletableResponse
func (client *Client) QueryOrganizationDeletable(request *QueryOrganizationDeletableRequest) (_result *QueryOrganizationDeletableResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryOrganizationDeletableResponse{}
	_body, _err := client.QueryOrganizationDeletableWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - QueryTransactionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return QueryTransactionResponse
func (client *Client) QueryTransactionWithOptions(request *QueryTransactionRequest, runtime *util.RuntimeOptions) (_result *QueryTransactionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Hash)) {
		body["Hash"] = request.Hash
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("QueryTransaction"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &QueryTransactionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - QueryTransactionRequest
//
// @return QueryTransactionResponse
func (client *Client) QueryTransaction(request *QueryTransactionRequest) (_result *QueryTransactionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTransactionResponse{}
	_body, _err := client.QueryTransactionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RejectUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RejectUserResponse
func (client *Client) RejectUserWithOptions(request *RejectUserRequest, runtime *util.RuntimeOptions) (_result *RejectUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bid)) {
		body["Bid"] = request.Bid
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Reason)) {
		body["Reason"] = request.Reason
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RejectUser"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RejectUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RejectUserRequest
//
// @return RejectUserResponse
func (client *Client) RejectUser(request *RejectUserRequest) (_result *RejectUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RejectUserResponse{}
	_body, _err := client.RejectUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - RenameBlockchainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return RenameBlockchainResponse
func (client *Client) RenameBlockchainWithOptions(request *RenameBlockchainRequest, runtime *util.RuntimeOptions) (_result *RenameBlockchainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.NewName)) {
		body["NewName"] = request.NewName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("RenameBlockchain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RenameBlockchainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - RenameBlockchainRequest
//
// @return RenameBlockchainResponse
func (client *Client) RenameBlockchain(request *RenameBlockchainRequest) (_result *RenameBlockchainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RenameBlockchainResponse{}
	_body, _err := client.RenameBlockchainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResetAntChainCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetAntChainCertificateResponse
func (client *Client) ResetAntChainCertificateWithOptions(request *ResetAntChainCertificateRequest, runtime *util.RuntimeOptions) (_result *ResetAntChainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAntChainCertificate"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetAntChainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResetAntChainCertificateRequest
//
// @return ResetAntChainCertificateResponse
func (client *Client) ResetAntChainCertificate(request *ResetAntChainCertificateRequest) (_result *ResetAntChainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAntChainCertificateResponse{}
	_body, _err := client.ResetAntChainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResetAntChainUserCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetAntChainUserCertificateResponse
func (client *Client) ResetAntChainUserCertificateWithOptions(request *ResetAntChainUserCertificateRequest, runtime *util.RuntimeOptions) (_result *ResetAntChainUserCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.Bid)) {
		body["Bid"] = request.Bid
	}

	if !tea.BoolValue(util.IsUnset(request.Operation)) {
		body["Operation"] = request.Operation
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		body["Username"] = request.Username
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetAntChainUserCertificate"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetAntChainUserCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResetAntChainUserCertificateRequest
//
// @return ResetAntChainUserCertificateResponse
func (client *Client) ResetAntChainUserCertificate(request *ResetAntChainUserCertificateRequest) (_result *ResetAntChainUserCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetAntChainUserCertificateResponse{}
	_body, _err := client.ResetAntChainUserCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResetCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetCertificateResponse
func (client *Client) ResetCertificateWithOptions(request *ResetCertificateRequest, runtime *util.RuntimeOptions) (_result *ResetCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetCertificate"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResetCertificateRequest
//
// @return ResetCertificateResponse
func (client *Client) ResetCertificate(request *ResetCertificateRequest) (_result *ResetCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetCertificateResponse{}
	_body, _err := client.ResetCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResetOrganizationUserPasswordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetOrganizationUserPasswordResponse
func (client *Client) ResetOrganizationUserPasswordWithOptions(request *ResetOrganizationUserPasswordRequest, runtime *util.RuntimeOptions) (_result *ResetOrganizationUserPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		body["Username"] = request.Username
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetOrganizationUserPassword"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetOrganizationUserPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResetOrganizationUserPasswordRequest
//
// @return ResetOrganizationUserPasswordResponse
func (client *Client) ResetOrganizationUserPassword(request *ResetOrganizationUserPasswordRequest) (_result *ResetOrganizationUserPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetOrganizationUserPasswordResponse{}
	_body, _err := client.ResetOrganizationUserPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResetPublicAntChainCertificateRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetPublicAntChainCertificateResponse
func (client *Client) ResetPublicAntChainCertificateWithOptions(request *ResetPublicAntChainCertificateRequest, runtime *util.RuntimeOptions) (_result *ResetPublicAntChainCertificateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetPublicAntChainCertificate"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetPublicAntChainCertificateResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResetPublicAntChainCertificateRequest
//
// @return ResetPublicAntChainCertificateResponse
func (client *Client) ResetPublicAntChainCertificate(request *ResetPublicAntChainCertificateRequest) (_result *ResetPublicAntChainCertificateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetPublicAntChainCertificateResponse{}
	_body, _err := client.ResetPublicAntChainCertificateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - ResetUserRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return ResetUserResponse
func (client *Client) ResetUserWithOptions(request *ResetUserRequest, runtime *util.RuntimeOptions) (_result *ResetUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bid)) {
		body["Bid"] = request.Bid
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Operation)) {
		body["Operation"] = request.Operation
	}

	if !tea.BoolValue(util.IsUnset(request.UserName)) {
		body["UserName"] = request.UserName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("ResetUser"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ResetUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - ResetUserRequest
//
// @return ResetUserResponse
func (client *Client) ResetUser(request *ResetUserRequest) (_result *ResetUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ResetUserResponse{}
	_body, _err := client.ResetUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SchemaDetailRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SchemaDetailResponse
func (client *Client) SchemaDetailWithOptions(request *SchemaDetailRequest, runtime *util.RuntimeOptions) (_result *SchemaDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SchemaDetail"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SchemaDetailResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SchemaDetailRequest
//
// @return SchemaDetailResponse
func (client *Client) SchemaDetail(request *SchemaDetailRequest) (_result *SchemaDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SchemaDetailResponse{}
	_body, _err := client.SchemaDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - StartSmartContractJobRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return StartSmartContractJobResponse
func (client *Client) StartSmartContractJobWithOptions(request *StartSmartContractJobRequest, runtime *util.RuntimeOptions) (_result *StartSmartContractJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		body["JobId"] = request.JobId
	}

	if !tea.BoolValue(util.IsUnset(request.JobName)) {
		body["JobName"] = request.JobName
	}

	if !tea.BoolValue(util.IsUnset(request.SourceOpt)) {
		body["SourceOpt"] = request.SourceOpt
	}

	if !tea.BoolValue(util.IsUnset(request.SourceType)) {
		body["SourceType"] = request.SourceType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("StartSmartContractJob"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StartSmartContractJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - StartSmartContractJobRequest
//
// @return StartSmartContractJobResponse
func (client *Client) StartSmartContractJob(request *StartSmartContractJobRequest) (_result *StartSmartContractJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StartSmartContractJobResponse{}
	_body, _err := client.StartSmartContractJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SubmitFabricChaincodeDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SubmitFabricChaincodeDefinitionResponse
func (client *Client) SubmitFabricChaincodeDefinitionWithOptions(request *SubmitFabricChaincodeDefinitionRequest, runtime *util.RuntimeOptions) (_result *SubmitFabricChaincodeDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodePackageId)) {
		body["ChaincodePackageId"] = request.ChaincodePackageId
	}

	if !tea.BoolValue(util.IsUnset(request.ChaincodeVersion)) {
		body["ChaincodeVersion"] = request.ChaincodeVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.CollectionConfig)) {
		body["CollectionConfig"] = request.CollectionConfig
	}

	if !tea.BoolValue(util.IsUnset(request.EndorsePolicy)) {
		body["EndorsePolicy"] = request.EndorsePolicy
	}

	if !tea.BoolValue(util.IsUnset(request.InitRequired)) {
		body["InitRequired"] = request.InitRequired
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SubmitFabricChaincodeDefinition"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SubmitFabricChaincodeDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SubmitFabricChaincodeDefinitionRequest
//
// @return SubmitFabricChaincodeDefinitionResponse
func (client *Client) SubmitFabricChaincodeDefinition(request *SubmitFabricChaincodeDefinitionRequest) (_result *SubmitFabricChaincodeDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFabricChaincodeDefinitionResponse{}
	_body, _err := client.SubmitFabricChaincodeDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SyncFabricChaincodeStatusRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SyncFabricChaincodeStatusResponse
func (client *Client) SyncFabricChaincodeStatusWithOptions(request *SyncFabricChaincodeStatusRequest, runtime *util.RuntimeOptions) (_result *SyncFabricChaincodeStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SyncFabricChaincodeStatus"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SyncFabricChaincodeStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SyncFabricChaincodeStatusRequest
//
// @return SyncFabricChaincodeStatusResponse
func (client *Client) SyncFabricChaincodeStatus(request *SyncFabricChaincodeStatusRequest) (_result *SyncFabricChaincodeStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SyncFabricChaincodeStatusResponse{}
	_body, _err := client.SyncFabricChaincodeStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - SynchronizeChaincodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return SynchronizeChaincodeResponse
func (client *Client) SynchronizeChaincodeWithOptions(request *SynchronizeChaincodeRequest, runtime *util.RuntimeOptions) (_result *SynchronizeChaincodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("SynchronizeChaincode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SynchronizeChaincodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - SynchronizeChaincodeRequest
//
// @return SynchronizeChaincodeResponse
func (client *Client) SynchronizeChaincode(request *SynchronizeChaincodeRequest) (_result *SynchronizeChaincodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SynchronizeChaincodeResponse{}
	_body, _err := client.SynchronizeChaincodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - TagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return TagResourcesResponse
func (client *Client) TagResourcesWithOptions(request *TagResourcesRequest, runtime *util.RuntimeOptions) (_result *TagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.Tag)) {
		query["Tag"] = request.Tag
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("TagResources"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &TagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - TagResourcesRequest
//
// @return TagResourcesResponse
func (client *Client) TagResources(request *TagResourcesRequest) (_result *TagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagResourcesResponse{}
	_body, _err := client.TagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnfreezeAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnfreezeAccountResponse
func (client *Client) UnfreezeAccountWithOptions(request *UnfreezeAccountRequest, runtime *util.RuntimeOptions) (_result *UnfreezeAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UnfreezeAccount"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnfreezeAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnfreezeAccountRequest
//
// @return UnfreezeAccountResponse
func (client *Client) UnfreezeAccount(request *UnfreezeAccountRequest) (_result *UnfreezeAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnfreezeAccountResponse{}
	_body, _err := client.UnfreezeAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UnfreezeAntChainAccountRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UnfreezeAntChainAccountResponse
func (client *Client) UnfreezeAntChainAccountWithOptions(request *UnfreezeAntChainAccountRequest, runtime *util.RuntimeOptions) (_result *UnfreezeAntChainAccountResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Account)) {
		body["Account"] = request.Account
	}

	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UnfreezeAntChainAccount"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UnfreezeAntChainAccountResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UnfreezeAntChainAccountRequest
//
// @return UnfreezeAntChainAccountResponse
func (client *Client) UnfreezeAntChainAccount(request *UnfreezeAntChainAccountRequest) (_result *UnfreezeAntChainAccountResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnfreezeAntChainAccountResponse{}
	_body, _err := client.UnfreezeAntChainAccountWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UntagResourcesRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UntagResourcesResponse
func (client *Client) UntagResourcesWithOptions(request *UntagResourcesRequest, runtime *util.RuntimeOptions) (_result *UntagResourcesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.All)) {
		query["All"] = request.All
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceId)) {
		query["ResourceId"] = request.ResourceId
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceType)) {
		query["ResourceType"] = request.ResourceType
	}

	if !tea.BoolValue(util.IsUnset(request.TagKey)) {
		query["TagKey"] = request.TagKey
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UntagResources"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UntagResourcesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UntagResourcesRequest
//
// @return UntagResourcesResponse
func (client *Client) UntagResources(request *UntagResourcesRequest) (_result *UntagResourcesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UntagResourcesResponse{}
	_body, _err := client.UntagResourcesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateAntChainRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAntChainResponse
func (client *Client) UpdateAntChainWithOptions(request *UpdateAntChainRequest, runtime *util.RuntimeOptions) (_result *UpdateAntChainResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.AntChainName)) {
		body["AntChainName"] = request.AntChainName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAntChain"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAntChainResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateAntChainRequest
//
// @return UpdateAntChainResponse
func (client *Client) UpdateAntChain(request *UpdateAntChainRequest) (_result *UpdateAntChainResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAntChainResponse{}
	_body, _err := client.UpdateAntChainWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateAntChainConsortiumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAntChainConsortiumResponse
func (client *Client) UpdateAntChainConsortiumWithOptions(request *UpdateAntChainConsortiumRequest, runtime *util.RuntimeOptions) (_result *UpdateAntChainConsortiumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumDescription)) {
		body["ConsortiumDescription"] = request.ConsortiumDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.ConsortiumName)) {
		body["ConsortiumName"] = request.ConsortiumName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAntChainConsortium"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAntChainConsortiumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateAntChainConsortiumRequest
//
// @return UpdateAntChainConsortiumResponse
func (client *Client) UpdateAntChainConsortium(request *UpdateAntChainConsortiumRequest) (_result *UpdateAntChainConsortiumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAntChainConsortiumResponse{}
	_body, _err := client.UpdateAntChainConsortiumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateAntChainContractContentRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAntChainContractContentResponse
func (client *Client) UpdateAntChainContractContentWithOptions(request *UpdateAntChainContractContentRequest, runtime *util.RuntimeOptions) (_result *UpdateAntChainContractContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Content)) {
		body["Content"] = request.Content
	}

	if !tea.BoolValue(util.IsUnset(request.ContentId)) {
		body["ContentId"] = request.ContentId
	}

	if !tea.BoolValue(util.IsUnset(request.ContentName)) {
		body["ContentName"] = request.ContentName
	}

	if !tea.BoolValue(util.IsUnset(request.ParentContentId)) {
		body["ParentContentId"] = request.ParentContentId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAntChainContractContent"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAntChainContractContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateAntChainContractContentRequest
//
// @return UpdateAntChainContractContentResponse
func (client *Client) UpdateAntChainContractContent(request *UpdateAntChainContractContentRequest) (_result *UpdateAntChainContractContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAntChainContractContentResponse{}
	_body, _err := client.UpdateAntChainContractContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateAntChainContractProjectRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAntChainContractProjectResponse
func (client *Client) UpdateAntChainContractProjectWithOptions(request *UpdateAntChainContractProjectRequest, runtime *util.RuntimeOptions) (_result *UpdateAntChainContractProjectResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ProjectDescription)) {
		body["ProjectDescription"] = request.ProjectDescription
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectId)) {
		body["ProjectId"] = request.ProjectId
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectName)) {
		body["ProjectName"] = request.ProjectName
	}

	if !tea.BoolValue(util.IsUnset(request.ProjectVersion)) {
		body["ProjectVersion"] = request.ProjectVersion
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAntChainContractProject"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAntChainContractProjectResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateAntChainContractProjectRequest
//
// @return UpdateAntChainContractProjectResponse
func (client *Client) UpdateAntChainContractProject(request *UpdateAntChainContractProjectRequest) (_result *UpdateAntChainContractProjectResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAntChainContractProjectResponse{}
	_body, _err := client.UpdateAntChainContractProjectWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateAntChainMemberRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAntChainMemberResponse
func (client *Client) UpdateAntChainMemberWithOptions(request *UpdateAntChainMemberRequest, runtime *util.RuntimeOptions) (_result *UpdateAntChainMemberResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsortiumId)) {
		body["ConsortiumId"] = request.ConsortiumId
	}

	if !tea.BoolValue(util.IsUnset(request.MemberId)) {
		body["MemberId"] = request.MemberId
	}

	if !tea.BoolValue(util.IsUnset(request.MemberName)) {
		body["MemberName"] = request.MemberName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAntChainMember"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAntChainMemberResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateAntChainMemberRequest
//
// @return UpdateAntChainMemberResponse
func (client *Client) UpdateAntChainMember(request *UpdateAntChainMemberRequest) (_result *UpdateAntChainMemberResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAntChainMemberResponse{}
	_body, _err := client.UpdateAntChainMemberWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateAntChainQRCodeAuthorizationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateAntChainQRCodeAuthorizationResponse
func (client *Client) UpdateAntChainQRCodeAuthorizationWithOptions(request *UpdateAntChainQRCodeAuthorizationRequest, runtime *util.RuntimeOptions) (_result *UpdateAntChainQRCodeAuthorizationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AntChainId)) {
		body["AntChainId"] = request.AntChainId
	}

	if !tea.BoolValue(util.IsUnset(request.AuthorizationType)) {
		body["AuthorizationType"] = request.AuthorizationType
	}

	if !tea.BoolValue(util.IsUnset(request.QRCodeType)) {
		body["QRCodeType"] = request.QRCodeType
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAntChainQRCodeAuthorization"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAntChainQRCodeAuthorizationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateAntChainQRCodeAuthorizationRequest
//
// @return UpdateAntChainQRCodeAuthorizationResponse
func (client *Client) UpdateAntChainQRCodeAuthorization(request *UpdateAntChainQRCodeAuthorizationRequest) (_result *UpdateAntChainQRCodeAuthorizationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAntChainQRCodeAuthorizationResponse{}
	_body, _err := client.UpdateAntChainQRCodeAuthorizationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateBlockchainSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateBlockchainSchemaResponse
func (client *Client) UpdateBlockchainSchemaWithOptions(request *UpdateBlockchainSchemaRequest, runtime *util.RuntimeOptions) (_result *UpdateBlockchainSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.CategoryConfigs)) {
		body["CategoryConfigs"] = request.CategoryConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaName)) {
		body["SchemaName"] = request.SchemaName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateBlockchainSchema"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateBlockchainSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateBlockchainSchemaRequest
//
// @return UpdateBlockchainSchemaResponse
func (client *Client) UpdateBlockchainSchema(request *UpdateBlockchainSchemaRequest) (_result *UpdateBlockchainSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateBlockchainSchemaResponse{}
	_body, _err := client.UpdateBlockchainSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateChannelConfigRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateChannelConfigResponse
func (client *Client) UpdateChannelConfigWithOptions(request *UpdateChannelConfigRequest, runtime *util.RuntimeOptions) (_result *UpdateChannelConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BatchTimeout)) {
		body["BatchTimeout"] = request.BatchTimeout
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxMessageCount)) {
		body["MaxMessageCount"] = request.MaxMessageCount
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.PreferredMaxBytes)) {
		body["PreferredMaxBytes"] = request.PreferredMaxBytes
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateChannelConfig"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateChannelConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateChannelConfigRequest
//
// @return UpdateChannelConfigResponse
func (client *Client) UpdateChannelConfig(request *UpdateChannelConfigRequest) (_result *UpdateChannelConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateChannelConfigResponse{}
	_body, _err := client.UpdateChannelConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateEthereumRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEthereumResponse
func (client *Client) UpdateEthereumWithOptions(request *UpdateEthereumRequest, runtime *util.RuntimeOptions) (_result *UpdateEthereumResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.EthereumId)) {
		body["EthereumId"] = request.EthereumId
	}

	if !tea.BoolValue(util.IsUnset(request.Name)) {
		body["Name"] = request.Name
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEthereum"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEthereumResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateEthereumRequest
//
// @return UpdateEthereumResponse
func (client *Client) UpdateEthereum(request *UpdateEthereumRequest) (_result *UpdateEthereumResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEthereumResponse{}
	_body, _err := client.UpdateEthereumWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateEthereumClientUserPasswordRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEthereumClientUserPasswordResponse
func (client *Client) UpdateEthereumClientUserPasswordWithOptions(request *UpdateEthereumClientUserPasswordRequest, runtime *util.RuntimeOptions) (_result *UpdateEthereumClientUserPasswordResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		body["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		body["Username"] = request.Username
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEthereumClientUserPassword"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEthereumClientUserPasswordResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateEthereumClientUserPasswordRequest
//
// @return UpdateEthereumClientUserPasswordResponse
func (client *Client) UpdateEthereumClientUserPassword(request *UpdateEthereumClientUserPasswordRequest) (_result *UpdateEthereumClientUserPasswordResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEthereumClientUserPasswordResponse{}
	_body, _err := client.UpdateEthereumClientUserPasswordWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateEthereumNodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEthereumNodeResponse
func (client *Client) UpdateEthereumNodeWithOptions(request *UpdateEthereumNodeRequest, runtime *util.RuntimeOptions) (_result *UpdateEthereumNodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeName)) {
		body["NodeName"] = request.NodeName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEthereumNode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEthereumNodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateEthereumNodeRequest
//
// @return UpdateEthereumNodeResponse
func (client *Client) UpdateEthereumNode(request *UpdateEthereumNodeRequest) (_result *UpdateEthereumNodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEthereumNodeResponse{}
	_body, _err := client.UpdateEthereumNodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateEthereumNodeConfigurationRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateEthereumNodeConfigurationResponse
func (client *Client) UpdateEthereumNodeConfigurationWithOptions(request *UpdateEthereumNodeConfigurationRequest, runtime *util.RuntimeOptions) (_result *UpdateEthereumNodeConfigurationResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IP)) {
		body["IP"] = request.IP
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.NodePub)) {
		body["NodePub"] = request.NodePub
	}

	if !tea.BoolValue(util.IsUnset(request.P2pPort)) {
		body["P2pPort"] = request.P2pPort
	}

	if !tea.BoolValue(util.IsUnset(request.RaftPort)) {
		body["RaftPort"] = request.RaftPort
	}

	if !tea.BoolValue(util.IsUnset(request.RpcPort)) {
		body["RpcPort"] = request.RpcPort
	}

	if !tea.BoolValue(util.IsUnset(request.TMPort)) {
		body["TMPort"] = request.TMPort
	}

	if !tea.BoolValue(util.IsUnset(request.TMPub)) {
		body["TMPub"] = request.TMPub
	}

	if !tea.BoolValue(util.IsUnset(request.WSPort)) {
		body["WSPort"] = request.WSPort
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateEthereumNodeConfiguration"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateEthereumNodeConfigurationResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateEthereumNodeConfigurationRequest
//
// @return UpdateEthereumNodeConfigurationResponse
func (client *Client) UpdateEthereumNodeConfiguration(request *UpdateEthereumNodeConfigurationRequest) (_result *UpdateEthereumNodeConfigurationResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateEthereumNodeConfigurationResponse{}
	_body, _err := client.UpdateEthereumNodeConfigurationWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateGovernanceTaskRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateGovernanceTaskResponse
func (client *Client) UpdateGovernanceTaskWithOptions(request *UpdateGovernanceTaskRequest, runtime *util.RuntimeOptions) (_result *UpdateGovernanceTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskAction)) {
		body["TaskAction"] = request.TaskAction
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		body["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateGovernanceTask"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateGovernanceTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateGovernanceTaskRequest
//
// @return UpdateGovernanceTaskResponse
func (client *Client) UpdateGovernanceTask(request *UpdateGovernanceTaskRequest) (_result *UpdateGovernanceTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateGovernanceTaskResponse{}
	_body, _err := client.UpdateGovernanceTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateMemberRoleRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateMemberRoleResponse
func (client *Client) UpdateMemberRoleWithOptions(request *UpdateMemberRoleRequest, runtime *util.RuntimeOptions) (_result *UpdateMemberRoleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bid)) {
		body["Bid"] = request.Bid
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		body["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateMemberRole"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateMemberRoleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateMemberRoleRequest
//
// @return UpdateMemberRoleResponse
func (client *Client) UpdateMemberRole(request *UpdateMemberRoleRequest) (_result *UpdateMemberRoleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMemberRoleResponse{}
	_body, _err := client.UpdateMemberRoleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateQRCodeAuthorityRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateQRCodeAuthorityResponse
func (client *Client) UpdateQRCodeAuthorityWithOptions(request *UpdateQRCodeAuthorityRequest, runtime *util.RuntimeOptions) (_result *UpdateQRCodeAuthorityResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Authorized)) {
		body["Authorized"] = request.Authorized
	}

	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateQRCodeAuthority"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateQRCodeAuthorityResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateQRCodeAuthorityRequest
//
// @return UpdateQRCodeAuthorityResponse
func (client *Client) UpdateQRCodeAuthority(request *UpdateQRCodeAuthorityRequest) (_result *UpdateQRCodeAuthorityResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateQRCodeAuthorityResponse{}
	_body, _err := client.UpdateQRCodeAuthorityWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpdateSchemaRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpdateSchemaResponse
func (client *Client) UpdateSchemaWithOptions(request *UpdateSchemaRequest, runtime *util.RuntimeOptions) (_result *UpdateSchemaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bizid)) {
		body["Bizid"] = request.Bizid
	}

	if !tea.BoolValue(util.IsUnset(request.CategoryConfigs)) {
		body["CategoryConfigs"] = request.CategoryConfigs
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		body["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaId)) {
		body["SchemaId"] = request.SchemaId
	}

	if !tea.BoolValue(util.IsUnset(request.SchemaName)) {
		body["SchemaName"] = request.SchemaName
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateSchema"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateSchemaResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpdateSchemaRequest
//
// @return UpdateSchemaResponse
func (client *Client) UpdateSchema(request *UpdateSchemaRequest) (_result *UpdateSchemaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSchemaResponse{}
	_body, _err := client.UpdateSchemaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpgradeChaincodeRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeChaincodeResponse
func (client *Client) UpgradeChaincodeWithOptions(request *UpgradeChaincodeRequest, runtime *util.RuntimeOptions) (_result *UpgradeChaincodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.CollectionConfig)) {
		body["CollectionConfig"] = request.CollectionConfig
	}

	if !tea.BoolValue(util.IsUnset(request.EndorsePolicy)) {
		body["EndorsePolicy"] = request.EndorsePolicy
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeChaincode"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeChaincodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpgradeChaincodeRequest
//
// @return UpgradeChaincodeResponse
func (client *Client) UpgradeChaincode(request *UpgradeChaincodeRequest) (_result *UpgradeChaincodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeChaincodeResponse{}
	_body, _err := client.UpgradeChaincodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

// @param request - UpgradeFabricChaincodeDefinitionRequest
//
// @param runtime - runtime options for this request RuntimeOptions
//
// @return UpgradeFabricChaincodeDefinitionResponse
func (client *Client) UpgradeFabricChaincodeDefinitionWithOptions(request *UpgradeFabricChaincodeDefinitionRequest, runtime *util.RuntimeOptions) (_result *UpgradeFabricChaincodeDefinitionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ChaincodeId)) {
		body["ChaincodeId"] = request.ChaincodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ChaincodePackageId)) {
		body["ChaincodePackageId"] = request.ChaincodePackageId
	}

	if !tea.BoolValue(util.IsUnset(request.ChaincodeVersion)) {
		body["ChaincodeVersion"] = request.ChaincodeVersion
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelId)) {
		body["ChannelId"] = request.ChannelId
	}

	if !tea.BoolValue(util.IsUnset(request.CollectionConfig)) {
		body["CollectionConfig"] = request.CollectionConfig
	}

	if !tea.BoolValue(util.IsUnset(request.EndorsePolicy)) {
		body["EndorsePolicy"] = request.EndorsePolicy
	}

	if !tea.BoolValue(util.IsUnset(request.InitRequired)) {
		body["InitRequired"] = request.InitRequired
	}

	if !tea.BoolValue(util.IsUnset(request.Location)) {
		body["Location"] = request.Location
	}

	if !tea.BoolValue(util.IsUnset(request.OrganizationId)) {
		body["OrganizationId"] = request.OrganizationId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("UpgradeFabricChaincodeDefinition"),
		Version:     tea.String("2018-07-31"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpgradeFabricChaincodeDefinitionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

// @param request - UpgradeFabricChaincodeDefinitionRequest
//
// @return UpgradeFabricChaincodeDefinitionResponse
func (client *Client) UpgradeFabricChaincodeDefinition(request *UpgradeFabricChaincodeDefinitionRequest) (_result *UpgradeFabricChaincodeDefinitionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpgradeFabricChaincodeDefinitionResponse{}
	_body, _err := client.UpgradeFabricChaincodeDefinitionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
