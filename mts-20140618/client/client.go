// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
)

type QueryAuthConfigRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryAuthConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthConfigRequest) GoString() string {
	return s.String()
}

func (s *QueryAuthConfigRequest) SetOwnerId(v string) *QueryAuthConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAuthConfigRequest) SetResourceOwnerId(v string) *QueryAuthConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryAuthConfigRequest) SetResourceOwnerAccount(v string) *QueryAuthConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryAuthConfigRequest) SetOwnerAccount(v string) *QueryAuthConfigRequest {
	s.OwnerAccount = &v
	return s
}

type QueryAuthConfigResponseBody struct {
	Key2      *string `json:"Key2,omitempty" xml:"Key2,omitempty"`
	Key1      *string `json:"Key1,omitempty" xml:"Key1,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryAuthConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthConfigResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAuthConfigResponseBody) SetKey2(v string) *QueryAuthConfigResponseBody {
	s.Key2 = &v
	return s
}

func (s *QueryAuthConfigResponseBody) SetKey1(v string) *QueryAuthConfigResponseBody {
	s.Key1 = &v
	return s
}

func (s *QueryAuthConfigResponseBody) SetRequestId(v string) *QueryAuthConfigResponseBody {
	s.RequestId = &v
	return s
}

type QueryAuthConfigResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryAuthConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryAuthConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAuthConfigResponse) GoString() string {
	return s.String()
}

func (s *QueryAuthConfigResponse) SetHeaders(v map[string]*string) *QueryAuthConfigResponse {
	s.Headers = v
	return s
}

func (s *QueryAuthConfigResponse) SetBody(v *QueryAuthConfigResponseBody) *QueryAuthConfigResponse {
	s.Body = v
	return s
}

type QueryAsrPipelineListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineIds          *string `json:"PipelineIds,omitempty" xml:"PipelineIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryAsrPipelineListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrPipelineListRequest) GoString() string {
	return s.String()
}

func (s *QueryAsrPipelineListRequest) SetOwnerId(v int64) *QueryAsrPipelineListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAsrPipelineListRequest) SetResourceOwnerAccount(v string) *QueryAsrPipelineListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryAsrPipelineListRequest) SetResourceOwnerId(v int64) *QueryAsrPipelineListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryAsrPipelineListRequest) SetPipelineIds(v string) *QueryAsrPipelineListRequest {
	s.PipelineIds = &v
	return s
}

func (s *QueryAsrPipelineListRequest) SetOwnerAccount(v string) *QueryAsrPipelineListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryAsrPipelineListResponseBody struct {
	RequestId    *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PipelineList *QueryAsrPipelineListResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
	NonExistIds  *QueryAsrPipelineListResponseBodyNonExistIds  `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryAsrPipelineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrPipelineListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAsrPipelineListResponseBody) SetRequestId(v string) *QueryAsrPipelineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAsrPipelineListResponseBody) SetPipelineList(v *QueryAsrPipelineListResponseBodyPipelineList) *QueryAsrPipelineListResponseBody {
	s.PipelineList = v
	return s
}

func (s *QueryAsrPipelineListResponseBody) SetNonExistIds(v *QueryAsrPipelineListResponseBodyNonExistIds) *QueryAsrPipelineListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryAsrPipelineListResponseBodyPipelineList struct {
	Pipeline []*QueryAsrPipelineListResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s QueryAsrPipelineListResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrPipelineListResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *QueryAsrPipelineListResponseBodyPipelineList) SetPipeline(v []*QueryAsrPipelineListResponseBodyPipelineListPipeline) *QueryAsrPipelineListResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type QueryAsrPipelineListResponseBodyPipelineListPipeline struct {
	State        *string                                                           `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                           `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryAsrPipelineListResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrPipelineListResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *QueryAsrPipelineListResponseBodyPipelineListPipeline) SetState(v string) *QueryAsrPipelineListResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *QueryAsrPipelineListResponseBodyPipelineListPipeline) SetNotifyConfig(v *QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig) *QueryAsrPipelineListResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *QueryAsrPipelineListResponseBodyPipelineListPipeline) SetPriority(v string) *QueryAsrPipelineListResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *QueryAsrPipelineListResponseBodyPipelineListPipeline) SetName(v string) *QueryAsrPipelineListResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *QueryAsrPipelineListResponseBodyPipelineListPipeline) SetId(v string) *QueryAsrPipelineListResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig struct {
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetQueueName(v string) *QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *QueryAsrPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type QueryAsrPipelineListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryAsrPipelineListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrPipelineListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryAsrPipelineListResponseBodyNonExistIds) SetString_(v []*string) *QueryAsrPipelineListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryAsrPipelineListResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryAsrPipelineListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryAsrPipelineListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrPipelineListResponse) GoString() string {
	return s.String()
}

func (s *QueryAsrPipelineListResponse) SetHeaders(v map[string]*string) *QueryAsrPipelineListResponse {
	s.Headers = v
	return s
}

func (s *QueryAsrPipelineListResponse) SetBody(v *QueryAsrPipelineListResponseBody) *QueryAsrPipelineListResponse {
	s.Body = v
	return s
}

type SubmitMediaCensorJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	CoverImages          *string `json:"CoverImages,omitempty" xml:"CoverImages,omitempty"`
	Title                *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Barrages             *string `json:"Barrages,omitempty" xml:"Barrages,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	VideoCensorConfig    *string `json:"VideoCensorConfig,omitempty" xml:"VideoCensorConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitMediaCensorJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobRequest) SetOwnerId(v int64) *SubmitMediaCensorJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetResourceOwnerAccount(v string) *SubmitMediaCensorJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetResourceOwnerId(v int64) *SubmitMediaCensorJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetInput(v string) *SubmitMediaCensorJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetCoverImages(v string) *SubmitMediaCensorJobRequest {
	s.CoverImages = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetTitle(v string) *SubmitMediaCensorJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetDescription(v string) *SubmitMediaCensorJobRequest {
	s.Description = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetBarrages(v string) *SubmitMediaCensorJobRequest {
	s.Barrages = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetPipelineId(v string) *SubmitMediaCensorJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetVideoCensorConfig(v string) *SubmitMediaCensorJobRequest {
	s.VideoCensorConfig = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetUserData(v string) *SubmitMediaCensorJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitMediaCensorJobRequest) SetOwnerAccount(v string) *SubmitMediaCensorJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitMediaCensorJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitMediaCensorJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobResponseBody) SetRequestId(v string) *SubmitMediaCensorJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaCensorJobResponseBody) SetJobId(v string) *SubmitMediaCensorJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitMediaCensorJobResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitMediaCensorJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMediaCensorJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaCensorJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaCensorJobResponse) SetHeaders(v map[string]*string) *SubmitMediaCensorJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaCensorJobResponse) SetBody(v *SubmitMediaCensorJobResponseBody) *SubmitMediaCensorJobResponse {
	s.Body = v
	return s
}

type CreateSessionRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	EndUserId            *string `json:"EndUserId,omitempty" xml:"EndUserId,omitempty"`
	SessionTime          *int32  `json:"SessionTime,omitempty" xml:"SessionTime,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
}

func (s CreateSessionRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateSessionRequest) GoString() string {
	return s.String()
}

func (s *CreateSessionRequest) SetOwnerId(v string) *CreateSessionRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateSessionRequest) SetResourceOwnerId(v string) *CreateSessionRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateSessionRequest) SetResourceOwnerAccount(v string) *CreateSessionRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateSessionRequest) SetOwnerAccount(v string) *CreateSessionRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateSessionRequest) SetEndUserId(v string) *CreateSessionRequest {
	s.EndUserId = &v
	return s
}

func (s *CreateSessionRequest) SetSessionTime(v int32) *CreateSessionRequest {
	s.SessionTime = &v
	return s
}

func (s *CreateSessionRequest) SetMediaId(v string) *CreateSessionRequest {
	s.MediaId = &v
	return s
}

type CreateSessionResponseBody struct {
	Ticket    *string `json:"Ticket,omitempty" xml:"Ticket,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SessionId *string `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
}

func (s CreateSessionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateSessionResponseBody) GoString() string {
	return s.String()
}

func (s *CreateSessionResponseBody) SetTicket(v string) *CreateSessionResponseBody {
	s.Ticket = &v
	return s
}

func (s *CreateSessionResponseBody) SetRequestId(v string) *CreateSessionResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateSessionResponseBody) SetSessionId(v string) *CreateSessionResponseBody {
	s.SessionId = &v
	return s
}

type CreateSessionResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateSessionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateSessionResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateSessionResponse) GoString() string {
	return s.String()
}

func (s *CreateSessionResponse) SetHeaders(v map[string]*string) *CreateSessionResponse {
	s.Headers = v
	return s
}

func (s *CreateSessionResponse) SetBody(v *CreateSessionResponseBody) *CreateSessionResponse {
	s.Body = v
	return s
}

type ListAsrPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListAsrPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAsrPipelineRequest) GoString() string {
	return s.String()
}

func (s *ListAsrPipelineRequest) SetOwnerId(v int64) *ListAsrPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *ListAsrPipelineRequest) SetResourceOwnerAccount(v string) *ListAsrPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListAsrPipelineRequest) SetResourceOwnerId(v int64) *ListAsrPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListAsrPipelineRequest) SetPageSize(v int64) *ListAsrPipelineRequest {
	s.PageSize = &v
	return s
}

func (s *ListAsrPipelineRequest) SetPageNumber(v int64) *ListAsrPipelineRequest {
	s.PageNumber = &v
	return s
}

func (s *ListAsrPipelineRequest) SetState(v string) *ListAsrPipelineRequest {
	s.State = &v
	return s
}

func (s *ListAsrPipelineRequest) SetOwnerAccount(v string) *ListAsrPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type ListAsrPipelineResponseBody struct {
	TotalCount   *int64                                   `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize     *int64                                   `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int64                                   `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PipelineList *ListAsrPipelineResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
}

func (s ListAsrPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAsrPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *ListAsrPipelineResponseBody) SetTotalCount(v int64) *ListAsrPipelineResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListAsrPipelineResponseBody) SetPageSize(v int64) *ListAsrPipelineResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListAsrPipelineResponseBody) SetRequestId(v string) *ListAsrPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAsrPipelineResponseBody) SetPageNumber(v int64) *ListAsrPipelineResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListAsrPipelineResponseBody) SetPipelineList(v *ListAsrPipelineResponseBodyPipelineList) *ListAsrPipelineResponseBody {
	s.PipelineList = v
	return s
}

type ListAsrPipelineResponseBodyPipelineList struct {
	Pipeline []*ListAsrPipelineResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s ListAsrPipelineResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s ListAsrPipelineResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *ListAsrPipelineResponseBodyPipelineList) SetPipeline(v []*ListAsrPipelineResponseBodyPipelineListPipeline) *ListAsrPipelineResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type ListAsrPipelineResponseBodyPipelineListPipeline struct {
	State        *string                                                      `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                      `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListAsrPipelineResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s ListAsrPipelineResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *ListAsrPipelineResponseBodyPipelineListPipeline) SetState(v string) *ListAsrPipelineResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *ListAsrPipelineResponseBodyPipelineListPipeline) SetNotifyConfig(v *ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig) *ListAsrPipelineResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *ListAsrPipelineResponseBodyPipelineListPipeline) SetPriority(v string) *ListAsrPipelineResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *ListAsrPipelineResponseBodyPipelineListPipeline) SetName(v string) *ListAsrPipelineResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *ListAsrPipelineResponseBodyPipelineListPipeline) SetId(v string) *ListAsrPipelineResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig struct {
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig) SetQueueName(v string) *ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *ListAsrPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type ListAsrPipelineResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAsrPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAsrPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAsrPipelineResponse) GoString() string {
	return s.String()
}

func (s *ListAsrPipelineResponse) SetHeaders(v map[string]*string) *ListAsrPipelineResponse {
	s.Headers = v
	return s
}

func (s *ListAsrPipelineResponse) SetBody(v *ListAsrPipelineResponseBody) *ListAsrPipelineResponse {
	s.Body = v
	return s
}

type ListJobRequest struct {
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount       *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	NextPageToken              *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize            *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	State                      *string `json:"State,omitempty" xml:"State,omitempty"`
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	EndOfJobCreatedTimeRange   *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	PipelineId                 *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount               *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListJobRequest) GoString() string {
	return s.String()
}

func (s *ListJobRequest) SetOwnerId(v int64) *ListJobRequest {
	s.OwnerId = &v
	return s
}

func (s *ListJobRequest) SetResourceOwnerAccount(v string) *ListJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListJobRequest) SetResourceOwnerId(v int64) *ListJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListJobRequest) SetNextPageToken(v string) *ListJobRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListJobRequest) SetMaximumPageSize(v int64) *ListJobRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *ListJobRequest) SetState(v string) *ListJobRequest {
	s.State = &v
	return s
}

func (s *ListJobRequest) SetStartOfJobCreatedTimeRange(v string) *ListJobRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *ListJobRequest) SetEndOfJobCreatedTimeRange(v string) *ListJobRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *ListJobRequest) SetPipelineId(v string) *ListJobRequest {
	s.PipelineId = &v
	return s
}

func (s *ListJobRequest) SetOwnerAccount(v string) *ListJobRequest {
	s.OwnerAccount = &v
	return s
}

type ListJobResponseBody struct {
	RequestId     *string                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken *string                     `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	JobList       *ListJobResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
}

func (s ListJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBody) GoString() string {
	return s.String()
}

func (s *ListJobResponseBody) SetRequestId(v string) *ListJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListJobResponseBody) SetNextPageToken(v string) *ListJobResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListJobResponseBody) SetJobList(v *ListJobResponseBodyJobList) *ListJobResponseBody {
	s.JobList = v
	return s
}

type ListJobResponseBodyJobList struct {
	Job []*ListJobResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobList) SetJob(v []*ListJobResponseBodyJobListJob) *ListJobResponseBodyJobList {
	s.Job = v
	return s
}

type ListJobResponseBodyJobListJob struct {
	CreationTime     *string                                        `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent          *int64                                         `json:"Percent,omitempty" xml:"Percent,omitempty"`
	FinishTime       *string                                        `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State            *string                                        `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                        `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code             *string                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	Output           *ListJobResponseBodyJobListJobOutput           `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	PipelineId       *string                                        `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input            *ListJobResponseBodyJobListJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MNSMessageResult *ListJobResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJob) SetCreationTime(v string) *ListJobResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetPercent(v int64) *ListJobResponseBodyJobListJob {
	s.Percent = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetFinishTime(v string) *ListJobResponseBodyJobListJob {
	s.FinishTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetState(v string) *ListJobResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetJobId(v string) *ListJobResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetCode(v string) *ListJobResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetMessage(v string) *ListJobResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetOutput(v *ListJobResponseBodyJobListJobOutput) *ListJobResponseBodyJobListJob {
	s.Output = v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetPipelineId(v string) *ListJobResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetInput(v *ListJobResponseBodyJobListJobInput) *ListJobResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *ListJobResponseBodyJobListJob) SetMNSMessageResult(v *ListJobResponseBodyJobListJobMNSMessageResult) *ListJobResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

type ListJobResponseBodyJobListJobOutput struct {
	Video                  *ListJobResponseBodyJobListJobOutputVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig            *ListJobResponseBodyJobListJobOutputTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Encryption             *ListJobResponseBodyJobListJobOutputEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	WaterMarkList          *ListJobResponseBodyJobListJobOutputWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
	WaterMarkConfigUrl     *string                                                    `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	DeWatermark            *string                                                    `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	M3U8NonStandardSupport *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	Priority               *string                                                    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Audio                  *ListJobResponseBodyJobListJobOutputAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                    `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	MergeList              *ListJobResponseBodyJobListJobOutputMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	SuperReso              *ListJobResponseBodyJobListJobOutputSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	UserData               *string                                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OutSubtitleList        *ListJobResponseBodyJobListJobOutputOutSubtitleList        `json:"OutSubtitleList,omitempty" xml:"OutSubtitleList,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                    `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	OutputFile             *ListJobResponseBodyJobListJobOutputOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Rotate                 *string                                                    `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Container              *ListJobResponseBodyJobListJobOutputContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Clip                   *ListJobResponseBodyJobListJobOutputClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                    `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	OpeningList            *ListJobResponseBodyJobListJobOutputOpeningList            `json:"OpeningList,omitempty" xml:"OpeningList,omitempty" type:"Struct"`
	MuxConfig              *ListJobResponseBodyJobListJobOutputMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TailSlateList          *ListJobResponseBodyJobListJobOutputTailSlateList          `json:"TailSlateList,omitempty" xml:"TailSlateList,omitempty" type:"Struct"`
	TemplateId             *string                                                    `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	SubtitleConfig         *ListJobResponseBodyJobListJobOutputSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	Properties             *ListJobResponseBodyJobListJobOutputProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutput) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutput) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutput) SetVideo(v *ListJobResponseBodyJobListJobOutputVideo) *ListJobResponseBodyJobListJobOutput {
	s.Video = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetTransConfig(v *ListJobResponseBodyJobListJobOutputTransConfig) *ListJobResponseBodyJobListJobOutput {
	s.TransConfig = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetEncryption(v *ListJobResponseBodyJobListJobOutputEncryption) *ListJobResponseBodyJobListJobOutput {
	s.Encryption = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetWaterMarkList(v *ListJobResponseBodyJobListJobOutputWaterMarkList) *ListJobResponseBodyJobListJobOutput {
	s.WaterMarkList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetWaterMarkConfigUrl(v string) *ListJobResponseBodyJobListJobOutput {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetDeWatermark(v string) *ListJobResponseBodyJobListJobOutput {
	s.DeWatermark = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetM3U8NonStandardSupport(v *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport) *ListJobResponseBodyJobListJobOutput {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetPriority(v string) *ListJobResponseBodyJobListJobOutput {
	s.Priority = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetAudio(v *ListJobResponseBodyJobListJobOutputAudio) *ListJobResponseBodyJobListJobOutput {
	s.Audio = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetAudioStreamMap(v string) *ListJobResponseBodyJobListJobOutput {
	s.AudioStreamMap = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetMergeList(v *ListJobResponseBodyJobListJobOutputMergeList) *ListJobResponseBodyJobListJobOutput {
	s.MergeList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetSuperReso(v *ListJobResponseBodyJobListJobOutputSuperReso) *ListJobResponseBodyJobListJobOutput {
	s.SuperReso = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetUserData(v string) *ListJobResponseBodyJobListJobOutput {
	s.UserData = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetOutSubtitleList(v *ListJobResponseBodyJobListJobOutputOutSubtitleList) *ListJobResponseBodyJobListJobOutput {
	s.OutSubtitleList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetVideoStreamMap(v string) *ListJobResponseBodyJobListJobOutput {
	s.VideoStreamMap = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetOutputFile(v *ListJobResponseBodyJobListJobOutputOutputFile) *ListJobResponseBodyJobListJobOutput {
	s.OutputFile = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetRotate(v string) *ListJobResponseBodyJobListJobOutput {
	s.Rotate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetContainer(v *ListJobResponseBodyJobListJobOutputContainer) *ListJobResponseBodyJobListJobOutput {
	s.Container = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetClip(v *ListJobResponseBodyJobListJobOutputClip) *ListJobResponseBodyJobListJobOutput {
	s.Clip = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetMergeConfigUrl(v string) *ListJobResponseBodyJobListJobOutput {
	s.MergeConfigUrl = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetOpeningList(v *ListJobResponseBodyJobListJobOutputOpeningList) *ListJobResponseBodyJobListJobOutput {
	s.OpeningList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetMuxConfig(v *ListJobResponseBodyJobListJobOutputMuxConfig) *ListJobResponseBodyJobListJobOutput {
	s.MuxConfig = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetTailSlateList(v *ListJobResponseBodyJobListJobOutputTailSlateList) *ListJobResponseBodyJobListJobOutput {
	s.TailSlateList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetTemplateId(v string) *ListJobResponseBodyJobListJobOutput {
	s.TemplateId = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetSubtitleConfig(v *ListJobResponseBodyJobListJobOutputSubtitleConfig) *ListJobResponseBodyJobListJobOutput {
	s.SubtitleConfig = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutput) SetProperties(v *ListJobResponseBodyJobListJobOutputProperties) *ListJobResponseBodyJobListJobOutput {
	s.Properties = v
	return s
}

type ListJobResponseBodyJobListJobOutputVideo struct {
	Bufsize      *string                                             `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain      *string                                             `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd   *ListJobResponseBodyJobListJobOutputVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt       *string                                             `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad          *string                                             `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec        *string                                             `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height       *string                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale       *string                                             `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop         *string                                             `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate      *string                                             `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate      *string                                             `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps       *string                                             `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile      *string                                             `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf          *string                                             `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop          *string                                             `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width        *string                                             `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps          *string                                             `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset       *string                                             `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode     *string                                             `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	ResoPriority *string                                             `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputVideo) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputVideo) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetBufsize(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Bufsize = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetDegrain(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Degrain = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetBitrateBnd(v *ListJobResponseBodyJobListJobOutputVideoBitrateBnd) *ListJobResponseBodyJobListJobOutputVideo {
	s.BitrateBnd = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetPixFmt(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.PixFmt = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetPad(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Pad = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetCodec(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Codec = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetHeight(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetQscale(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Qscale = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetCrop(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Crop = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetMaxrate(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Maxrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetMaxFps(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.MaxFps = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetProfile(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Profile = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetCrf(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Crf = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetGop(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Gop = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetWidth(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Width = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetFps(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Fps = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetPreset(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.Preset = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetScanMode(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.ScanMode = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideo) SetResoPriority(v string) *ListJobResponseBodyJobListJobOutputVideo {
	s.ResoPriority = &v
	return s
}

type ListJobResponseBodyJobListJobOutputVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputVideoBitrateBnd) SetMax(v string) *ListJobResponseBodyJobListJobOutputVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputVideoBitrateBnd) SetMin(v string) *ListJobResponseBodyJobListJobOutputVideoBitrateBnd {
	s.Min = &v
	return s
}

type ListJobResponseBodyJobListJobOutputTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputTransConfig) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputTransConfig) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckAudioBitrate(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetTransMode(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.TransMode = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckReso(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckVideoBitrateFail(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetAdjDarMethod(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckVideoBitrate(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckResoFail(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTransConfig) SetIsCheckAudioBitrateFail(v string) *ListJobResponseBodyJobListJobOutputTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type ListJobResponseBodyJobListJobOutputEncryption struct {
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputEncryption) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputEncryption) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetType(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.Type = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetKey(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.Key = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetKeyType(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.KeyType = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetId(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.Id = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetKeyUri(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.KeyUri = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputEncryption) SetSkipCnt(v string) *ListJobResponseBodyJobListJobOutputEncryption {
	s.SkipCnt = &v
	return s
}

type ListJobResponseBodyJobListJobOutputWaterMarkList struct {
	WaterMark []*ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkList) SetWaterMark(v []*ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) *ListJobResponseBodyJobListJobOutputWaterMarkList {
	s.WaterMark = v
	return s
}

type ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark struct {
	Type                *string                                                             `json:"Type,omitempty" xml:"Type,omitempty"`
	ReferPos            *string                                                             `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Dx                  *string                                                             `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width               *string                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
	Height              *string                                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	WaterMarkTemplateId *string                                                             `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Dy                  *string                                                             `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetType(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetReferPos(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetDx(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetWidth(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Width = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetHeight(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetInputFile(v *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark) SetDy(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

type ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetObject(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetLocation(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetBucket(v string) *ListJobResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport struct {
	TS *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport) SetTS(v *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupport {
	s.TS = v
	return s
}

type ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS struct {
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) SetSizeSupport(v bool) *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS) SetMd5Support(v bool) *ListJobResponseBodyJobListJobOutputM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

type ListJobResponseBodyJobListJobOutputAudio struct {
	Profile    *string                                         `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string                                         `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string                                         `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string                                         `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string                                         `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Volume     *ListJobResponseBodyJobListJobOutputAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
	Bitrate    *string                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputAudio) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputAudio) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetProfile(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Profile = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetCodec(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Codec = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetSamplerate(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Samplerate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetQscale(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Qscale = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetChannels(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Channels = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetVolume(v *ListJobResponseBodyJobListJobOutputAudioVolume) *ListJobResponseBodyJobListJobOutputAudio {
	s.Volume = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudio) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputAudio {
	s.Bitrate = &v
	return s
}

type ListJobResponseBodyJobListJobOutputAudioVolume struct {
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputAudioVolume) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputAudioVolume) SetMethod(v string) *ListJobResponseBodyJobListJobOutputAudioVolume {
	s.Method = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputAudioVolume) SetLevel(v string) *ListJobResponseBodyJobListJobOutputAudioVolume {
	s.Level = &v
	return s
}

type ListJobResponseBodyJobListJobOutputMergeList struct {
	Merge []*ListJobResponseBodyJobListJobOutputMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputMergeList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMergeList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMergeList) SetMerge(v []*ListJobResponseBodyJobListJobOutputMergeListMerge) *ListJobResponseBodyJobListJobOutputMergeList {
	s.Merge = v
	return s
}

type ListJobResponseBodyJobListJobOutputMergeListMerge struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMergeListMerge) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMergeListMerge) SetStart(v string) *ListJobResponseBodyJobListJobOutputMergeListMerge {
	s.Start = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMergeListMerge) SetRoleArn(v string) *ListJobResponseBodyJobListJobOutputMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMergeListMerge) SetMergeURL(v string) *ListJobResponseBodyJobListJobOutputMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMergeListMerge) SetDuration(v string) *ListJobResponseBodyJobListJobOutputMergeListMerge {
	s.Duration = &v
	return s
}

type ListJobResponseBodyJobListJobOutputSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputSuperReso) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSuperReso) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSuperReso) SetIsHalfSample(v string) *ListJobResponseBodyJobListJobOutputSuperReso {
	s.IsHalfSample = &v
	return s
}

type ListJobResponseBodyJobListJobOutputOutSubtitleList struct {
	OutSubtitle []*ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle `json:"OutSubtitle,omitempty" xml:"OutSubtitle,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleList) SetOutSubtitle(v []*ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) *ListJobResponseBodyJobListJobOutputOutSubtitleList {
	s.OutSubtitle = v
	return s
}

type ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle struct {
	Map             *string                                                                       `json:"Map,omitempty" xml:"Map,omitempty"`
	OutSubtitleFile *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile `json:"OutSubtitleFile,omitempty" xml:"OutSubtitleFile,omitempty" type:"Struct"`
	Success         *bool                                                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	Message         *string                                                                       `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetMap(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Map = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetOutSubtitleFile(v *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.OutSubtitleFile = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetSuccess(v bool) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Success = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetMessage(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Message = &v
	return s
}

type ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetRoleArn(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.RoleArn = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetObject(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Object = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetLocation(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetBucket(v string) *ListJobResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Bucket = &v
	return s
}

type ListJobResponseBodyJobListJobOutputOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputOutputFile) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOutputFile) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOutputFile) SetRoleArn(v string) *ListJobResponseBodyJobListJobOutputOutputFile {
	s.RoleArn = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutputFile) SetObject(v string) *ListJobResponseBodyJobListJobOutputOutputFile {
	s.Object = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutputFile) SetLocation(v string) *ListJobResponseBodyJobListJobOutputOutputFile {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOutputFile) SetBucket(v string) *ListJobResponseBodyJobListJobOutputOutputFile {
	s.Bucket = &v
	return s
}

type ListJobResponseBodyJobListJobOutputContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputContainer) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputContainer) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputContainer) SetFormat(v string) *ListJobResponseBodyJobListJobOutputContainer {
	s.Format = &v
	return s
}

type ListJobResponseBodyJobListJobOutputClip struct {
	TimeSpan *ListJobResponseBodyJobListJobOutputClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputClip) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputClip) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputClip) SetTimeSpan(v *ListJobResponseBodyJobListJobOutputClipTimeSpan) *ListJobResponseBodyJobListJobOutputClip {
	s.TimeSpan = v
	return s
}

type ListJobResponseBodyJobListJobOutputClipTimeSpan struct {
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputClipTimeSpan) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputClipTimeSpan) SetSeek(v string) *ListJobResponseBodyJobListJobOutputClipTimeSpan {
	s.Seek = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputClipTimeSpan) SetDuration(v string) *ListJobResponseBodyJobListJobOutputClipTimeSpan {
	s.Duration = &v
	return s
}

type ListJobResponseBodyJobListJobOutputOpeningList struct {
	Opening []*ListJobResponseBodyJobListJobOutputOpeningListOpening `json:"Opening,omitempty" xml:"Opening,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputOpeningList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOpeningList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOpeningList) SetOpening(v []*ListJobResponseBodyJobListJobOutputOpeningListOpening) *ListJobResponseBodyJobListJobOutputOpeningList {
	s.Opening = v
	return s
}

type ListJobResponseBodyJobListJobOutputOpeningListOpening struct {
	OpenUrl *string `json:"openUrl,omitempty" xml:"openUrl,omitempty"`
	Start   *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputOpeningListOpening) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputOpeningListOpening) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputOpeningListOpening) SetOpenUrl(v string) *ListJobResponseBodyJobListJobOutputOpeningListOpening {
	s.OpenUrl = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOpeningListOpening) SetStart(v string) *ListJobResponseBodyJobListJobOutputOpeningListOpening {
	s.Start = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOpeningListOpening) SetWidth(v string) *ListJobResponseBodyJobListJobOutputOpeningListOpening {
	s.Width = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputOpeningListOpening) SetHeight(v string) *ListJobResponseBodyJobListJobOutputOpeningListOpening {
	s.Height = &v
	return s
}

type ListJobResponseBodyJobListJobOutputMuxConfig struct {
	Webp    *ListJobResponseBodyJobListJobOutputMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
	Gif     *ListJobResponseBodyJobListJobOutputMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *ListJobResponseBodyJobListJobOutputMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMuxConfig) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfig) SetWebp(v *ListJobResponseBodyJobListJobOutputMuxConfigWebp) *ListJobResponseBodyJobListJobOutputMuxConfig {
	s.Webp = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfig) SetGif(v *ListJobResponseBodyJobListJobOutputMuxConfigGif) *ListJobResponseBodyJobListJobOutputMuxConfig {
	s.Gif = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfig) SetSegment(v *ListJobResponseBodyJobListJobOutputMuxConfigSegment) *ListJobResponseBodyJobListJobOutputMuxConfig {
	s.Segment = v
	return s
}

type ListJobResponseBodyJobListJobOutputMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigWebp) SetLoop(v string) *ListJobResponseBodyJobListJobOutputMuxConfigWebp {
	s.Loop = &v
	return s
}

type ListJobResponseBodyJobListJobOutputMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigGif) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigGif) SetFinalDelay(v string) *ListJobResponseBodyJobListJobOutputMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigGif) SetDitherMode(v string) *ListJobResponseBodyJobListJobOutputMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigGif) SetLoop(v string) *ListJobResponseBodyJobListJobOutputMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigGif) SetIsCustomPalette(v string) *ListJobResponseBodyJobListJobOutputMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type ListJobResponseBodyJobListJobOutputMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputMuxConfigSegment) SetDuration(v string) *ListJobResponseBodyJobListJobOutputMuxConfigSegment {
	s.Duration = &v
	return s
}

type ListJobResponseBodyJobListJobOutputTailSlateList struct {
	TailSlate []*ListJobResponseBodyJobListJobOutputTailSlateListTailSlate `json:"TailSlate,omitempty" xml:"TailSlate,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputTailSlateList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputTailSlateList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateList) SetTailSlate(v []*ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) *ListJobResponseBodyJobListJobOutputTailSlateList {
	s.TailSlate = v
	return s
}

type ListJobResponseBodyJobListJobOutputTailSlateListTailSlate struct {
	Start         *string `json:"Start,omitempty" xml:"Start,omitempty"`
	BgColor       *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	IsMergeAudio  *bool   `json:"IsMergeAudio,omitempty" xml:"IsMergeAudio,omitempty"`
	Width         *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height        *string `json:"Height,omitempty" xml:"Height,omitempty"`
	BlendDuration *string `json:"BlendDuration,omitempty" xml:"BlendDuration,omitempty"`
	TailUrl       *string `json:"TailUrl,omitempty" xml:"TailUrl,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetStart(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Start = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetBgColor(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.BgColor = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetIsMergeAudio(v bool) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.IsMergeAudio = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetWidth(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Width = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetHeight(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetBlendDuration(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.BlendDuration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate) SetTailUrl(v string) *ListJobResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.TailUrl = &v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfig struct {
	ExtSubtitleList *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfig) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfig) SetExtSubtitleList(v *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) *ListJobResponseBodyJobListJobOutputSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfig) SetSubtitleList(v *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList) *ListJobResponseBodyJobListJobOutputSubtitleConfig {
	s.SubtitleList = v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                           `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                           `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList struct {
	Subtitle []*ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList) SetSubtitle(v []*ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) SetMap(v string) *ListJobResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type ListJobResponseBodyJobListJobOutputProperties struct {
	Width      *string                                               `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                               `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                               `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *ListJobResponseBodyJobListJobOutputPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *ListJobResponseBodyJobListJobOutputPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                               `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputProperties) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputProperties) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetWidth(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Width = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetHeight(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetDuration(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetFps(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Fps = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetFileFormat(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.FileFormat = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetStreams(v *ListJobResponseBodyJobListJobOutputPropertiesStreams) *ListJobResponseBodyJobListJobOutputProperties {
	s.Streams = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetFormat(v *ListJobResponseBodyJobListJobOutputPropertiesFormat) *ListJobResponseBodyJobListJobOutputProperties {
	s.Format = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputProperties) SetFileSize(v string) *ListJobResponseBodyJobListJobOutputProperties {
	s.FileSize = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreams struct {
	VideoStreamList    *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreams) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreams) SetVideoStreamList(v *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) *ListJobResponseBodyJobListJobOutputPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreams) SetAudioStreamList(v *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) *ListJobResponseBodyJobListJobOutputPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreams) SetSubtitleStreamList(v *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) *ListJobResponseBodyJobListJobOutputPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList struct {
	VideoStream []*ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) SetVideoStream(v []*ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream struct {
	Index          *string                                                                                    `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                    `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                    `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                    `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Sar            *string                                                                                    `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Lang           *string                                                                                    `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                    `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Height         *string                                                                                    `json:"Height,omitempty" xml:"Height,omitempty"`
	NumFrames      *string                                                                                    `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string                                                                                    `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string                                                                                    `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	HasBFrames     *string                                                                                    `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                    `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NetworkCost    *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Dar            *string                                                                                    `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                    `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Width          *string                                                                                    `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration       *string                                                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                    `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                    `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                    `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                    `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList struct {
	AudioStream []*ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) SetAudioStream(v []*ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *ListJobResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type ListJobResponseBodyJobListJobOutputPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s ListJobResponseBodyJobListJobOutputPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobOutputPropertiesFormat) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetStartTime(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetNumPrograms(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetSize(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.Size = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetNumStreams(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetFormatLongName(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetDuration(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetBitrate(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *ListJobResponseBodyJobListJobOutputPropertiesFormat) SetFormatName(v string) *ListJobResponseBodyJobListJobOutputPropertiesFormat {
	s.FormatName = &v
	return s
}

type ListJobResponseBodyJobListJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s ListJobResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobInput) SetObject(v string) *ListJobResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *ListJobResponseBodyJobListJobInput) SetLocation(v string) *ListJobResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *ListJobResponseBodyJobListJobInput) SetBucket(v string) *ListJobResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type ListJobResponseBodyJobListJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s ListJobResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *ListJobResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *ListJobResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *ListJobResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *ListJobResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *ListJobResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *ListJobResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type ListJobResponse struct {
	Headers map[string]*string   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListJobResponse) GoString() string {
	return s.String()
}

func (s *ListJobResponse) SetHeaders(v map[string]*string) *ListJobResponse {
	s.Headers = v
	return s
}

func (s *ListJobResponse) SetBody(v *ListJobResponseBody) *ListJobResponse {
	s.Body = v
	return s
}

type QueryIProductionJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	IProductionJobIds    *string `json:"IProductionJobIds,omitempty" xml:"IProductionJobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryIProductionJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobListRequest) SetOwnerId(v int64) *QueryIProductionJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryIProductionJobListRequest) SetResourceOwnerAccount(v string) *QueryIProductionJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryIProductionJobListRequest) SetResourceOwnerId(v int64) *QueryIProductionJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryIProductionJobListRequest) SetIProductionJobIds(v string) *QueryIProductionJobListRequest {
	s.IProductionJobIds = &v
	return s
}

func (s *QueryIProductionJobListRequest) SetOwnerAccount(v string) *QueryIProductionJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryIProductionJobListResponseBody struct {
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Jobs          *QueryIProductionJobListResponseBodyJobs        `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Struct"`
	NextPageToken *string                                         `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	NonExistIds   *QueryIProductionJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryIProductionJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobListResponseBody) SetRequestId(v string) *QueryIProductionJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIProductionJobListResponseBody) SetJobs(v *QueryIProductionJobListResponseBodyJobs) *QueryIProductionJobListResponseBody {
	s.Jobs = v
	return s
}

func (s *QueryIProductionJobListResponseBody) SetNextPageToken(v string) *QueryIProductionJobListResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *QueryIProductionJobListResponseBody) SetNonExistIds(v *QueryIProductionJobListResponseBodyNonExistIds) *QueryIProductionJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryIProductionJobListResponseBodyJobs struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryIProductionJobListResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobListResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobListResponseBodyJobs) SetString_(v []*string) *QueryIProductionJobListResponseBodyJobs {
	s.String_ = v
	return s
}

type QueryIProductionJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryIProductionJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryIProductionJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryIProductionJobListResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryIProductionJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryIProductionJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobListResponse) SetHeaders(v map[string]*string) *QueryIProductionJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryIProductionJobListResponse) SetBody(v *QueryIProductionJobListResponseBody) *QueryIProductionJobListResponse {
	s.Body = v
	return s
}

type UpdateMediaPublishStateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	Publish              *bool   `json:"Publish,omitempty" xml:"Publish,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateMediaPublishStateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaPublishStateRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaPublishStateRequest) SetOwnerId(v int64) *UpdateMediaPublishStateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetResourceOwnerAccount(v string) *UpdateMediaPublishStateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetResourceOwnerId(v int64) *UpdateMediaPublishStateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetMediaId(v string) *UpdateMediaPublishStateRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetPublish(v bool) *UpdateMediaPublishStateRequest {
	s.Publish = &v
	return s
}

func (s *UpdateMediaPublishStateRequest) SetOwnerAccount(v string) *UpdateMediaPublishStateRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateMediaPublishStateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaPublishStateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaPublishStateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaPublishStateResponseBody) SetRequestId(v string) *UpdateMediaPublishStateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaPublishStateResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMediaPublishStateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMediaPublishStateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaPublishStateResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaPublishStateResponse) SetHeaders(v map[string]*string) *UpdateMediaPublishStateResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaPublishStateResponse) SetBody(v *UpdateMediaPublishStateResponseBody) *UpdateMediaPublishStateResponse {
	s.Body = v
	return s
}

type SubmitFpFileDeleteJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	FpDBId               *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	FileIds              *string `json:"FileIds,omitempty" xml:"FileIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitFpFileDeleteJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpFileDeleteJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitFpFileDeleteJobRequest) SetOwnerId(v int64) *SubmitFpFileDeleteJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitFpFileDeleteJobRequest) SetResourceOwnerAccount(v string) *SubmitFpFileDeleteJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitFpFileDeleteJobRequest) SetResourceOwnerId(v int64) *SubmitFpFileDeleteJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitFpFileDeleteJobRequest) SetPipelineId(v string) *SubmitFpFileDeleteJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitFpFileDeleteJobRequest) SetFpDBId(v string) *SubmitFpFileDeleteJobRequest {
	s.FpDBId = &v
	return s
}

func (s *SubmitFpFileDeleteJobRequest) SetUserData(v string) *SubmitFpFileDeleteJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitFpFileDeleteJobRequest) SetFileIds(v string) *SubmitFpFileDeleteJobRequest {
	s.FileIds = &v
	return s
}

func (s *SubmitFpFileDeleteJobRequest) SetOwnerAccount(v string) *SubmitFpFileDeleteJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitFpFileDeleteJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitFpFileDeleteJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpFileDeleteJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFpFileDeleteJobResponseBody) SetRequestId(v string) *SubmitFpFileDeleteJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFpFileDeleteJobResponseBody) SetJobId(v string) *SubmitFpFileDeleteJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitFpFileDeleteJobResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitFpFileDeleteJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitFpFileDeleteJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpFileDeleteJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitFpFileDeleteJobResponse) SetHeaders(v map[string]*string) *SubmitFpFileDeleteJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitFpFileDeleteJobResponse) SetBody(v *SubmitFpFileDeleteJobResponseBody) *SubmitFpFileDeleteJobResponse {
	s.Body = v
	return s
}

type QueryAnalysisJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	AnalysisJobIds       *string `json:"AnalysisJobIds,omitempty" xml:"AnalysisJobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryAnalysisJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListRequest) SetOwnerId(v int64) *QueryAnalysisJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAnalysisJobListRequest) SetResourceOwnerAccount(v string) *QueryAnalysisJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryAnalysisJobListRequest) SetResourceOwnerId(v int64) *QueryAnalysisJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryAnalysisJobListRequest) SetAnalysisJobIds(v string) *QueryAnalysisJobListRequest {
	s.AnalysisJobIds = &v
	return s
}

func (s *QueryAnalysisJobListRequest) SetOwnerAccount(v string) *QueryAnalysisJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryAnalysisJobListResponseBody struct {
	RequestId              *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AnalysisJobList        *QueryAnalysisJobListResponseBodyAnalysisJobList        `json:"AnalysisJobList,omitempty" xml:"AnalysisJobList,omitempty" type:"Struct"`
	NonExistAnalysisJobIds *QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds `json:"NonExistAnalysisJobIds,omitempty" xml:"NonExistAnalysisJobIds,omitempty" type:"Struct"`
}

func (s QueryAnalysisJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBody) SetRequestId(v string) *QueryAnalysisJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAnalysisJobListResponseBody) SetAnalysisJobList(v *QueryAnalysisJobListResponseBodyAnalysisJobList) *QueryAnalysisJobListResponseBody {
	s.AnalysisJobList = v
	return s
}

func (s *QueryAnalysisJobListResponseBody) SetNonExistAnalysisJobIds(v *QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds) *QueryAnalysisJobListResponseBody {
	s.NonExistAnalysisJobIds = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobList struct {
	AnalysisJob []*QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob `json:"AnalysisJob,omitempty" xml:"AnalysisJob,omitempty" type:"Repeated"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobList) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobList) SetAnalysisJob(v []*QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) *QueryAnalysisJobListResponseBodyAnalysisJobList {
	s.AnalysisJob = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob struct {
	CreationTime     *string                                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent          *int64                                                                      `json:"Percent,omitempty" xml:"Percent,omitempty"`
	State            *string                                                                     `json:"State,omitempty" xml:"State,omitempty"`
	AnalysisConfig   *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig   `json:"AnalysisConfig,omitempty" xml:"AnalysisConfig,omitempty" type:"Struct"`
	Message          *string                                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	Priority         *string                                                                     `json:"Priority,omitempty" xml:"Priority,omitempty"`
	MNSMessageResult *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	TemplateList     *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList     `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
	UserData         *string                                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	InputFile        *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile        `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	PipelineId       *string                                                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Id               *string                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetCreationTime(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.CreationTime = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetPercent(v int64) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Percent = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetState(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.State = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetAnalysisConfig(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.AnalysisConfig = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetMessage(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Message = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetPriority(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Priority = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetMNSMessageResult(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.MNSMessageResult = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetTemplateList(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.TemplateList = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetUserData(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.UserData = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetCode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Code = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetInputFile(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.InputFile = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetPipelineId(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.PipelineId = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob) SetId(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJob {
	s.Id = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig struct {
	QualityControl    *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl    `json:"QualityControl,omitempty" xml:"QualityControl,omitempty" type:"Struct"`
	PropertiesControl *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl `json:"PropertiesControl,omitempty" xml:"PropertiesControl,omitempty" type:"Struct"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) SetQualityControl(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig {
	s.QualityControl = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig) SetPropertiesControl(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfig {
	s.PropertiesControl = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl struct {
	MethodStreaming *string `json:"MethodStreaming,omitempty" xml:"MethodStreaming,omitempty"`
	RateQuality     *string `json:"RateQuality,omitempty" xml:"RateQuality,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) SetMethodStreaming(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl {
	s.MethodStreaming = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl) SetRateQuality(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigQualityControl {
	s.RateQuality = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl struct {
	Deinterlace *string                                                                                        `json:"Deinterlace,omitempty" xml:"Deinterlace,omitempty"`
	Crop        *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop `json:"Crop,omitempty" xml:"Crop,omitempty" type:"Struct"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) SetDeinterlace(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl {
	s.Deinterlace = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl) SetCrop(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControl {
	s.Crop = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop struct {
	Top    *string `json:"Top,omitempty" xml:"Top,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Left   *string `json:"Left,omitempty" xml:"Left,omitempty"`
	Mode   *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetTop(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Top = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetWidth(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Width = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetHeight(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Height = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetLeft(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Left = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop) SetMode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Mode = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) SetMessageId(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) SetErrorMessage(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult) SetErrorCode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList struct {
	Template []*QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList) SetTemplate(v []*QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateList {
	s.Template = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate struct {
	Video       *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	State       *string                                                                                    `json:"State,omitempty" xml:"State,omitempty"`
	MuxConfig   *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Audio       *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Id          *string                                                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
	Container   *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetVideo(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Video = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetTransConfig(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.TransConfig = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetState(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.State = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetMuxConfig(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.MuxConfig = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetName(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetAudio(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Audio = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetId(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Id = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate) SetContainer(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplate {
	s.Container = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo struct {
	Bufsize    *string                                                                                        `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain    *string                                                                                        `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt     *string                                                                                        `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Codec      *string                                                                                        `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height     *string                                                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale     *string                                                                                        `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Bitrate    *string                                                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate    *string                                                                                        `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Profile    *string                                                                                        `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf        *string                                                                                        `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop        *string                                                                                        `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width      *string                                                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps        *string                                                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset     *string                                                                                        `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode   *string                                                                                        `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetBufsize(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetDegrain(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetBitrateBnd(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetPixFmt(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetCodec(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Codec = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetHeight(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Height = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetQscale(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetBitrate(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetMaxrate(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetProfile(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Profile = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetCrf(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Crf = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetGop(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Gop = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetWidth(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Width = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetFps(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Fps = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetPreset(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.Preset = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo) SetScanMode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideo {
	s.ScanMode = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) SetMax(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd) SetMin(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig struct {
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig) SetTransMode(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateTransConfig {
	s.TransMode = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig struct {
	Gif     *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) SetGif(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig) SetSegment(v *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfig {
	s.Segment = v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif struct {
	FinalDelay *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	Loop       *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) SetFinalDelay(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif) SetLoop(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment) SetDuration(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio struct {
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetProfile(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Profile = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetCodec(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Codec = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetSamplerate(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetQscale(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetChannels(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Channels = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio) SetBitrate(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateAudio {
	s.Bitrate = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer) SetFormat(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobTemplateListTemplateContainer {
	s.Format = &v
	return s
}

type QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) SetObject(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile {
	s.Object = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) SetLocation(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile {
	s.Location = &v
	return s
}

func (s *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile) SetBucket(v string) *QueryAnalysisJobListResponseBodyAnalysisJobListAnalysisJobInputFile {
	s.Bucket = &v
	return s
}

type QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds) SetString_(v []*string) *QueryAnalysisJobListResponseBodyNonExistAnalysisJobIds {
	s.String_ = v
	return s
}

type QueryAnalysisJobListResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryAnalysisJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryAnalysisJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAnalysisJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryAnalysisJobListResponse) SetHeaders(v map[string]*string) *QueryAnalysisJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryAnalysisJobListResponse) SetBody(v *QueryAnalysisJobListResponseBody) *QueryAnalysisJobListResponse {
	s.Body = v
	return s
}

type SubmitInferenceJobRequest struct {
	ServerName *string `json:"ServerName,omitempty" xml:"ServerName,omitempty"`
	ModelType  *string `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	Input      *string `json:"Input,omitempty" xml:"Input,omitempty"`
}

func (s SubmitInferenceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitInferenceJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitInferenceJobRequest) SetServerName(v string) *SubmitInferenceJobRequest {
	s.ServerName = &v
	return s
}

func (s *SubmitInferenceJobRequest) SetModelType(v string) *SubmitInferenceJobRequest {
	s.ModelType = &v
	return s
}

func (s *SubmitInferenceJobRequest) SetInput(v string) *SubmitInferenceJobRequest {
	s.Input = &v
	return s
}

type SubmitInferenceJobResponseBody struct {
	TestId    *string `json:"TestId,omitempty" xml:"TestId,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitInferenceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitInferenceJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitInferenceJobResponseBody) SetTestId(v string) *SubmitInferenceJobResponseBody {
	s.TestId = &v
	return s
}

func (s *SubmitInferenceJobResponseBody) SetMessage(v string) *SubmitInferenceJobResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitInferenceJobResponseBody) SetRequestId(v string) *SubmitInferenceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitInferenceJobResponseBody) SetCode(v string) *SubmitInferenceJobResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitInferenceJobResponseBody) SetJobId(v string) *SubmitInferenceJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitInferenceJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitInferenceJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitInferenceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitInferenceJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitInferenceJobResponse) SetHeaders(v map[string]*string) *SubmitInferenceJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitInferenceJobResponse) SetBody(v *SubmitInferenceJobResponseBody) *SubmitInferenceJobResponse {
	s.Body = v
	return s
}

type ReportCensorJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Label                *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Detail               *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportCensorJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportCensorJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportCensorJobResultRequest) SetOwnerId(v int64) *ReportCensorJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportCensorJobResultRequest) SetResourceOwnerAccount(v string) *ReportCensorJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportCensorJobResultRequest) SetResourceOwnerId(v int64) *ReportCensorJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportCensorJobResultRequest) SetJobId(v string) *ReportCensorJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportCensorJobResultRequest) SetLabel(v string) *ReportCensorJobResultRequest {
	s.Label = &v
	return s
}

func (s *ReportCensorJobResultRequest) SetDetail(v string) *ReportCensorJobResultRequest {
	s.Detail = &v
	return s
}

func (s *ReportCensorJobResultRequest) SetOwnerAccount(v string) *ReportCensorJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportCensorJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportCensorJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportCensorJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportCensorJobResultResponseBody) SetRequestId(v string) *ReportCensorJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportCensorJobResultResponseBody) SetJobId(v string) *ReportCensorJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportCensorJobResultResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportCensorJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportCensorJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportCensorJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportCensorJobResultResponse) SetHeaders(v map[string]*string) *ReportCensorJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportCensorJobResultResponse) SetBody(v *ReportCensorJobResultResponseBody) *ReportCensorJobResultResponse {
	s.Body = v
	return s
}

type DeleteMcuJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
}

func (s DeleteMcuJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcuJobRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcuJobRequest) SetOwnerId(v int64) *DeleteMcuJobRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMcuJobRequest) SetResourceOwnerAccount(v string) *DeleteMcuJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMcuJobRequest) SetResourceOwnerId(v int64) *DeleteMcuJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteMcuJobRequest) SetOwnerAccount(v string) *DeleteMcuJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteMcuJobRequest) SetJobIds(v string) *DeleteMcuJobRequest {
	s.JobIds = &v
	return s
}

type DeleteMcuJobResponseBody struct {
	NonExistJobIds *DeleteMcuJobResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	DeletedJobIds  *DeleteMcuJobResponseBodyDeletedJobIds  `json:"DeletedJobIds,omitempty" xml:"DeletedJobIds,omitempty" type:"Struct"`
}

func (s DeleteMcuJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcuJobResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcuJobResponseBody) SetNonExistJobIds(v *DeleteMcuJobResponseBodyNonExistJobIds) *DeleteMcuJobResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *DeleteMcuJobResponseBody) SetRequestId(v string) *DeleteMcuJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcuJobResponseBody) SetDeletedJobIds(v *DeleteMcuJobResponseBodyDeletedJobIds) *DeleteMcuJobResponseBody {
	s.DeletedJobIds = v
	return s
}

type DeleteMcuJobResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s DeleteMcuJobResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcuJobResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *DeleteMcuJobResponseBodyNonExistJobIds) SetString_(v []*string) *DeleteMcuJobResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type DeleteMcuJobResponseBodyDeletedJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s DeleteMcuJobResponseBodyDeletedJobIds) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcuJobResponseBodyDeletedJobIds) GoString() string {
	return s.String()
}

func (s *DeleteMcuJobResponseBodyDeletedJobIds) SetString_(v []*string) *DeleteMcuJobResponseBodyDeletedJobIds {
	s.String_ = v
	return s
}

type DeleteMcuJobResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMcuJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcuJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcuJobResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcuJobResponse) SetHeaders(v map[string]*string) *DeleteMcuJobResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcuJobResponse) SetBody(v *DeleteMcuJobResponseBody) *DeleteMcuJobResponse {
	s.Body = v
	return s
}

type QueryInferenceServerRequest struct {
	ModelType   *string `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	CreateTime  *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	PageNumber  *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	MaxPageSize *int64  `json:"MaxPageSize,omitempty" xml:"MaxPageSize,omitempty"`
}

func (s QueryInferenceServerRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryInferenceServerRequest) GoString() string {
	return s.String()
}

func (s *QueryInferenceServerRequest) SetModelType(v string) *QueryInferenceServerRequest {
	s.ModelType = &v
	return s
}

func (s *QueryInferenceServerRequest) SetCreateTime(v int64) *QueryInferenceServerRequest {
	s.CreateTime = &v
	return s
}

func (s *QueryInferenceServerRequest) SetPageNumber(v int64) *QueryInferenceServerRequest {
	s.PageNumber = &v
	return s
}

func (s *QueryInferenceServerRequest) SetMaxPageSize(v int64) *QueryInferenceServerRequest {
	s.MaxPageSize = &v
	return s
}

type QueryInferenceServerResponseBody struct {
	Message   *string                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Functions []*QueryInferenceServerResponseBodyFunctions `json:"Functions,omitempty" xml:"Functions,omitempty" type:"Repeated"`
	Code      *string                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	TotalSize *int64                                       `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s QueryInferenceServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryInferenceServerResponseBody) GoString() string {
	return s.String()
}

func (s *QueryInferenceServerResponseBody) SetMessage(v string) *QueryInferenceServerResponseBody {
	s.Message = &v
	return s
}

func (s *QueryInferenceServerResponseBody) SetRequestId(v string) *QueryInferenceServerResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryInferenceServerResponseBody) SetFunctions(v []*QueryInferenceServerResponseBodyFunctions) *QueryInferenceServerResponseBody {
	s.Functions = v
	return s
}

func (s *QueryInferenceServerResponseBody) SetCode(v string) *QueryInferenceServerResponseBody {
	s.Code = &v
	return s
}

func (s *QueryInferenceServerResponseBody) SetTotalSize(v int64) *QueryInferenceServerResponseBody {
	s.TotalSize = &v
	return s
}

type QueryInferenceServerResponseBodyFunctions struct {
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	UserId       *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	ModelType    *string `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	ModelPath    *string `json:"ModelPath,omitempty" xml:"ModelPath,omitempty"`
	PipelineId   *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	TestId       *string `json:"TestId,omitempty" xml:"TestId,omitempty"`
}

func (s QueryInferenceServerResponseBodyFunctions) String() string {
	return tea.Prettify(s)
}

func (s QueryInferenceServerResponseBodyFunctions) GoString() string {
	return s.String()
}

func (s *QueryInferenceServerResponseBodyFunctions) SetFunctionName(v string) *QueryInferenceServerResponseBodyFunctions {
	s.FunctionName = &v
	return s
}

func (s *QueryInferenceServerResponseBodyFunctions) SetCreateTime(v int64) *QueryInferenceServerResponseBodyFunctions {
	s.CreateTime = &v
	return s
}

func (s *QueryInferenceServerResponseBodyFunctions) SetUserId(v int64) *QueryInferenceServerResponseBodyFunctions {
	s.UserId = &v
	return s
}

func (s *QueryInferenceServerResponseBodyFunctions) SetModelType(v string) *QueryInferenceServerResponseBodyFunctions {
	s.ModelType = &v
	return s
}

func (s *QueryInferenceServerResponseBodyFunctions) SetModelPath(v string) *QueryInferenceServerResponseBodyFunctions {
	s.ModelPath = &v
	return s
}

func (s *QueryInferenceServerResponseBodyFunctions) SetPipelineId(v string) *QueryInferenceServerResponseBodyFunctions {
	s.PipelineId = &v
	return s
}

func (s *QueryInferenceServerResponseBodyFunctions) SetTestId(v string) *QueryInferenceServerResponseBodyFunctions {
	s.TestId = &v
	return s
}

type QueryInferenceServerResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryInferenceServerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryInferenceServerResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryInferenceServerResponse) GoString() string {
	return s.String()
}

func (s *QueryInferenceServerResponse) SetHeaders(v map[string]*string) *QueryInferenceServerResponse {
	s.Headers = v
	return s
}

func (s *QueryInferenceServerResponse) SetBody(v *QueryInferenceServerResponseBody) *QueryInferenceServerResponse {
	s.Body = v
	return s
}

type CheckResourceRequest struct {
	Interrupt      *bool   `json:"Interrupt,omitempty" xml:"Interrupt,omitempty"`
	Invoker        *string `json:"Invoker,omitempty" xml:"Invoker,omitempty"`
	Pk             *string `json:"Pk,omitempty" xml:"Pk,omitempty"`
	Bid            *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Hid            *int64  `json:"Hid,omitempty" xml:"Hid,omitempty"`
	Country        *string `json:"Country,omitempty" xml:"Country,omitempty"`
	TaskIdentifier *string `json:"TaskIdentifier,omitempty" xml:"TaskIdentifier,omitempty"`
	TaskExtraData  *string `json:"TaskExtraData,omitempty" xml:"TaskExtraData,omitempty"`
	GmtWakeup      *string `json:"GmtWakeup,omitempty" xml:"GmtWakeup,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Level          *int64  `json:"Level,omitempty" xml:"Level,omitempty"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Prompt         *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
}

func (s CheckResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s CheckResourceRequest) GoString() string {
	return s.String()
}

func (s *CheckResourceRequest) SetInterrupt(v bool) *CheckResourceRequest {
	s.Interrupt = &v
	return s
}

func (s *CheckResourceRequest) SetInvoker(v string) *CheckResourceRequest {
	s.Invoker = &v
	return s
}

func (s *CheckResourceRequest) SetPk(v string) *CheckResourceRequest {
	s.Pk = &v
	return s
}

func (s *CheckResourceRequest) SetBid(v string) *CheckResourceRequest {
	s.Bid = &v
	return s
}

func (s *CheckResourceRequest) SetHid(v int64) *CheckResourceRequest {
	s.Hid = &v
	return s
}

func (s *CheckResourceRequest) SetCountry(v string) *CheckResourceRequest {
	s.Country = &v
	return s
}

func (s *CheckResourceRequest) SetTaskIdentifier(v string) *CheckResourceRequest {
	s.TaskIdentifier = &v
	return s
}

func (s *CheckResourceRequest) SetTaskExtraData(v string) *CheckResourceRequest {
	s.TaskExtraData = &v
	return s
}

func (s *CheckResourceRequest) SetGmtWakeup(v string) *CheckResourceRequest {
	s.GmtWakeup = &v
	return s
}

func (s *CheckResourceRequest) SetSuccess(v bool) *CheckResourceRequest {
	s.Success = &v
	return s
}

func (s *CheckResourceRequest) SetMessage(v string) *CheckResourceRequest {
	s.Message = &v
	return s
}

func (s *CheckResourceRequest) SetLevel(v int64) *CheckResourceRequest {
	s.Level = &v
	return s
}

func (s *CheckResourceRequest) SetUrl(v string) *CheckResourceRequest {
	s.Url = &v
	return s
}

func (s *CheckResourceRequest) SetPrompt(v string) *CheckResourceRequest {
	s.Prompt = &v
	return s
}

type CheckResourceResponseBody struct {
	GmtWakeup      *string `json:"GmtWakeup,omitempty" xml:"GmtWakeup,omitempty"`
	Hid            *int64  `json:"Hid,omitempty" xml:"Hid,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	TaskIdentifier *string `json:"TaskIdentifier,omitempty" xml:"TaskIdentifier,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Interrupt      *bool   `json:"Interrupt,omitempty" xml:"Interrupt,omitempty"`
	Invoker        *string `json:"Invoker,omitempty" xml:"Invoker,omitempty"`
	TaskExtraData  *string `json:"TaskExtraData,omitempty" xml:"TaskExtraData,omitempty"`
	Country        *string `json:"Country,omitempty" xml:"Country,omitempty"`
	Prompt         *string `json:"Prompt,omitempty" xml:"Prompt,omitempty"`
	Level          *int64  `json:"Level,omitempty" xml:"Level,omitempty"`
	Pk             *string `json:"Pk,omitempty" xml:"Pk,omitempty"`
	Bid            *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
}

func (s CheckResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CheckResourceResponseBody) GoString() string {
	return s.String()
}

func (s *CheckResourceResponseBody) SetGmtWakeup(v string) *CheckResourceResponseBody {
	s.GmtWakeup = &v
	return s
}

func (s *CheckResourceResponseBody) SetHid(v int64) *CheckResourceResponseBody {
	s.Hid = &v
	return s
}

func (s *CheckResourceResponseBody) SetMessage(v string) *CheckResourceResponseBody {
	s.Message = &v
	return s
}

func (s *CheckResourceResponseBody) SetTaskIdentifier(v string) *CheckResourceResponseBody {
	s.TaskIdentifier = &v
	return s
}

func (s *CheckResourceResponseBody) SetSuccess(v bool) *CheckResourceResponseBody {
	s.Success = &v
	return s
}

func (s *CheckResourceResponseBody) SetUrl(v string) *CheckResourceResponseBody {
	s.Url = &v
	return s
}

func (s *CheckResourceResponseBody) SetInterrupt(v bool) *CheckResourceResponseBody {
	s.Interrupt = &v
	return s
}

func (s *CheckResourceResponseBody) SetInvoker(v string) *CheckResourceResponseBody {
	s.Invoker = &v
	return s
}

func (s *CheckResourceResponseBody) SetTaskExtraData(v string) *CheckResourceResponseBody {
	s.TaskExtraData = &v
	return s
}

func (s *CheckResourceResponseBody) SetCountry(v string) *CheckResourceResponseBody {
	s.Country = &v
	return s
}

func (s *CheckResourceResponseBody) SetPrompt(v string) *CheckResourceResponseBody {
	s.Prompt = &v
	return s
}

func (s *CheckResourceResponseBody) SetLevel(v int64) *CheckResourceResponseBody {
	s.Level = &v
	return s
}

func (s *CheckResourceResponseBody) SetPk(v string) *CheckResourceResponseBody {
	s.Pk = &v
	return s
}

func (s *CheckResourceResponseBody) SetBid(v string) *CheckResourceResponseBody {
	s.Bid = &v
	return s
}

type CheckResourceResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CheckResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CheckResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s CheckResourceResponse) GoString() string {
	return s.String()
}

func (s *CheckResourceResponse) SetHeaders(v map[string]*string) *CheckResourceResponse {
	s.Headers = v
	return s
}

func (s *CheckResourceResponse) SetBody(v *CheckResourceResponseBody) *CheckResourceResponse {
	s.Body = v
	return s
}

type ListTerrorismPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListTerrorismPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s ListTerrorismPipelineRequest) GoString() string {
	return s.String()
}

func (s *ListTerrorismPipelineRequest) SetOwnerId(v int64) *ListTerrorismPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *ListTerrorismPipelineRequest) SetResourceOwnerAccount(v string) *ListTerrorismPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListTerrorismPipelineRequest) SetResourceOwnerId(v int64) *ListTerrorismPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListTerrorismPipelineRequest) SetPageSize(v int64) *ListTerrorismPipelineRequest {
	s.PageSize = &v
	return s
}

func (s *ListTerrorismPipelineRequest) SetPageNumber(v int64) *ListTerrorismPipelineRequest {
	s.PageNumber = &v
	return s
}

func (s *ListTerrorismPipelineRequest) SetState(v string) *ListTerrorismPipelineRequest {
	s.State = &v
	return s
}

func (s *ListTerrorismPipelineRequest) SetOwnerAccount(v string) *ListTerrorismPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type ListTerrorismPipelineResponseBody struct {
	TotalCount   *int64                                         `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize     *int64                                         `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int64                                         `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PipelineList *ListTerrorismPipelineResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
}

func (s ListTerrorismPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListTerrorismPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *ListTerrorismPipelineResponseBody) SetTotalCount(v int64) *ListTerrorismPipelineResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListTerrorismPipelineResponseBody) SetPageSize(v int64) *ListTerrorismPipelineResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListTerrorismPipelineResponseBody) SetRequestId(v string) *ListTerrorismPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListTerrorismPipelineResponseBody) SetPageNumber(v int64) *ListTerrorismPipelineResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListTerrorismPipelineResponseBody) SetPipelineList(v *ListTerrorismPipelineResponseBodyPipelineList) *ListTerrorismPipelineResponseBody {
	s.PipelineList = v
	return s
}

type ListTerrorismPipelineResponseBodyPipelineList struct {
	Pipeline []*ListTerrorismPipelineResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s ListTerrorismPipelineResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s ListTerrorismPipelineResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *ListTerrorismPipelineResponseBodyPipelineList) SetPipeline(v []*ListTerrorismPipelineResponseBodyPipelineListPipeline) *ListTerrorismPipelineResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type ListTerrorismPipelineResponseBodyPipelineListPipeline struct {
	State        *string                                                            `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                            `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListTerrorismPipelineResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s ListTerrorismPipelineResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *ListTerrorismPipelineResponseBodyPipelineListPipeline) SetState(v string) *ListTerrorismPipelineResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *ListTerrorismPipelineResponseBodyPipelineListPipeline) SetNotifyConfig(v *ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig) *ListTerrorismPipelineResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *ListTerrorismPipelineResponseBodyPipelineListPipeline) SetPriority(v string) *ListTerrorismPipelineResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *ListTerrorismPipelineResponseBodyPipelineListPipeline) SetName(v string) *ListTerrorismPipelineResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *ListTerrorismPipelineResponseBodyPipelineListPipeline) SetId(v string) *ListTerrorismPipelineResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig) SetQueue(v string) *ListTerrorismPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type ListTerrorismPipelineResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListTerrorismPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListTerrorismPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s ListTerrorismPipelineResponse) GoString() string {
	return s.String()
}

func (s *ListTerrorismPipelineResponse) SetHeaders(v map[string]*string) *ListTerrorismPipelineResponse {
	s.Headers = v
	return s
}

func (s *ListTerrorismPipelineResponse) SetBody(v *ListTerrorismPipelineResponseBody) *ListTerrorismPipelineResponse {
	s.Body = v
	return s
}

type ReportTerrorismJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Label                *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Detail               *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportTerrorismJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportTerrorismJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportTerrorismJobResultRequest) SetOwnerId(v int64) *ReportTerrorismJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportTerrorismJobResultRequest) SetResourceOwnerAccount(v string) *ReportTerrorismJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportTerrorismJobResultRequest) SetResourceOwnerId(v int64) *ReportTerrorismJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportTerrorismJobResultRequest) SetJobId(v string) *ReportTerrorismJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportTerrorismJobResultRequest) SetLabel(v string) *ReportTerrorismJobResultRequest {
	s.Label = &v
	return s
}

func (s *ReportTerrorismJobResultRequest) SetDetail(v string) *ReportTerrorismJobResultRequest {
	s.Detail = &v
	return s
}

func (s *ReportTerrorismJobResultRequest) SetOwnerAccount(v string) *ReportTerrorismJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportTerrorismJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportTerrorismJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportTerrorismJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportTerrorismJobResultResponseBody) SetRequestId(v string) *ReportTerrorismJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportTerrorismJobResultResponseBody) SetJobId(v string) *ReportTerrorismJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportTerrorismJobResultResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportTerrorismJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportTerrorismJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportTerrorismJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportTerrorismJobResultResponse) SetHeaders(v map[string]*string) *ReportTerrorismJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportTerrorismJobResultResponse) SetBody(v *ReportTerrorismJobResultResponseBody) *ReportTerrorismJobResultResponse {
	s.Body = v
	return s
}

type ListAllMediaBucketRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize      *int32  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
}

func (s ListAllMediaBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketRequest) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketRequest) SetOwnerId(v int64) *ListAllMediaBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *ListAllMediaBucketRequest) SetResourceOwnerAccount(v string) *ListAllMediaBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListAllMediaBucketRequest) SetResourceOwnerId(v int64) *ListAllMediaBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListAllMediaBucketRequest) SetOwnerAccount(v string) *ListAllMediaBucketRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListAllMediaBucketRequest) SetNextPageToken(v string) *ListAllMediaBucketRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListAllMediaBucketRequest) SetMaximumPageSize(v int32) *ListAllMediaBucketRequest {
	s.MaximumPageSize = &v
	return s
}

type ListAllMediaBucketResponseBody struct {
	RequestId       *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken   *string                                        `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MediaBucketList *ListAllMediaBucketResponseBodyMediaBucketList `json:"MediaBucketList,omitempty" xml:"MediaBucketList,omitempty" type:"Struct"`
}

func (s ListAllMediaBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketResponseBody) SetRequestId(v string) *ListAllMediaBucketResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListAllMediaBucketResponseBody) SetNextPageToken(v string) *ListAllMediaBucketResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListAllMediaBucketResponseBody) SetMediaBucketList(v *ListAllMediaBucketResponseBodyMediaBucketList) *ListAllMediaBucketResponseBody {
	s.MediaBucketList = v
	return s
}

type ListAllMediaBucketResponseBodyMediaBucketList struct {
	MediaBucket []*ListAllMediaBucketResponseBodyMediaBucketListMediaBucket `json:"MediaBucket,omitempty" xml:"MediaBucket,omitempty" type:"Repeated"`
}

func (s ListAllMediaBucketResponseBodyMediaBucketList) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketResponseBodyMediaBucketList) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketResponseBodyMediaBucketList) SetMediaBucket(v []*ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) *ListAllMediaBucketResponseBodyMediaBucketList {
	s.MediaBucket = v
	return s
}

type ListAllMediaBucketResponseBodyMediaBucketListMediaBucket struct {
	Type   *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Bucket *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) SetType(v string) *ListAllMediaBucketResponseBodyMediaBucketListMediaBucket {
	s.Type = &v
	return s
}

func (s *ListAllMediaBucketResponseBodyMediaBucketListMediaBucket) SetBucket(v string) *ListAllMediaBucketResponseBodyMediaBucketListMediaBucket {
	s.Bucket = &v
	return s
}

type ListAllMediaBucketResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAllMediaBucketResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAllMediaBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllMediaBucketResponse) GoString() string {
	return s.String()
}

func (s *ListAllMediaBucketResponse) SetHeaders(v map[string]*string) *ListAllMediaBucketResponse {
	s.Headers = v
	return s
}

func (s *ListAllMediaBucketResponse) SetBody(v *ListAllMediaBucketResponseBody) *ListAllMediaBucketResponse {
	s.Body = v
	return s
}

type SearchPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SearchPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineRequest) GoString() string {
	return s.String()
}

func (s *SearchPipelineRequest) SetOwnerId(v int64) *SearchPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchPipelineRequest) SetResourceOwnerAccount(v string) *SearchPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchPipelineRequest) SetResourceOwnerId(v int64) *SearchPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchPipelineRequest) SetPageSize(v int64) *SearchPipelineRequest {
	s.PageSize = &v
	return s
}

func (s *SearchPipelineRequest) SetPageNumber(v int64) *SearchPipelineRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchPipelineRequest) SetState(v string) *SearchPipelineRequest {
	s.State = &v
	return s
}

func (s *SearchPipelineRequest) SetOwnerAccount(v string) *SearchPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type SearchPipelineResponseBody struct {
	TotalCount   *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize     *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int64                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PipelineList *SearchPipelineResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
}

func (s SearchPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponseBody) SetTotalCount(v int64) *SearchPipelineResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchPipelineResponseBody) SetPageSize(v int64) *SearchPipelineResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchPipelineResponseBody) SetRequestId(v string) *SearchPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchPipelineResponseBody) SetPageNumber(v int64) *SearchPipelineResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchPipelineResponseBody) SetPipelineList(v *SearchPipelineResponseBodyPipelineList) *SearchPipelineResponseBody {
	s.PipelineList = v
	return s
}

type SearchPipelineResponseBodyPipelineList struct {
	Pipeline []*SearchPipelineResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s SearchPipelineResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponseBodyPipelineList) SetPipeline(v []*SearchPipelineResponseBodyPipelineListPipeline) *SearchPipelineResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type SearchPipelineResponseBodyPipelineListPipeline struct {
	Speed         *string                                                     `json:"Speed,omitempty" xml:"Speed,omitempty"`
	State         *string                                                     `json:"State,omitempty" xml:"State,omitempty"`
	SpeedLevel    *int64                                                      `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
	NotifyConfig  *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Role          *string                                                     `json:"Role,omitempty" xml:"Role,omitempty"`
	Name          *string                                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Id            *string                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	QuotaAllocate *int64                                                      `json:"QuotaAllocate,omitempty" xml:"QuotaAllocate,omitempty"`
}

func (s SearchPipelineResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetSpeed(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.Speed = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetState(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetSpeedLevel(v int64) *SearchPipelineResponseBodyPipelineListPipeline {
	s.SpeedLevel = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetNotifyConfig(v *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) *SearchPipelineResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetRole(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.Role = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetName(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetId(v string) *SearchPipelineResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipeline) SetQuotaAllocate(v int64) *SearchPipelineResponseBodyPipelineListPipeline {
	s.QuotaAllocate = &v
	return s
}

type SearchPipelineResponseBodyPipelineListPipelineNotifyConfig struct {
	MqTopic   *string `json:"MqTopic,omitempty" xml:"MqTopic,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	MqTag     *string `json:"MqTag,omitempty" xml:"MqTag,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) SetMqTopic(v string) *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.MqTopic = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) SetQueueName(v string) *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) SetMqTag(v string) *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.MqTag = &v
	return s
}

func (s *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *SearchPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type SearchPipelineResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchPipelineResponse) GoString() string {
	return s.String()
}

func (s *SearchPipelineResponse) SetHeaders(v map[string]*string) *SearchPipelineResponse {
	s.Headers = v
	return s
}

func (s *SearchPipelineResponse) SetBody(v *SearchPipelineResponseBody) *SearchPipelineResponse {
	s.Body = v
	return s
}

type UnbindOutputBucketRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Bucket               *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UnbindOutputBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindOutputBucketRequest) GoString() string {
	return s.String()
}

func (s *UnbindOutputBucketRequest) SetOwnerId(v int64) *UnbindOutputBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindOutputBucketRequest) SetResourceOwnerAccount(v string) *UnbindOutputBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnbindOutputBucketRequest) SetResourceOwnerId(v int64) *UnbindOutputBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnbindOutputBucketRequest) SetBucket(v string) *UnbindOutputBucketRequest {
	s.Bucket = &v
	return s
}

func (s *UnbindOutputBucketRequest) SetOwnerAccount(v string) *UnbindOutputBucketRequest {
	s.OwnerAccount = &v
	return s
}

type UnbindOutputBucketResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindOutputBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindOutputBucketResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindOutputBucketResponseBody) SetRequestId(v string) *UnbindOutputBucketResponseBody {
	s.RequestId = &v
	return s
}

type UnbindOutputBucketResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindOutputBucketResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindOutputBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindOutputBucketResponse) GoString() string {
	return s.String()
}

func (s *UnbindOutputBucketResponse) SetHeaders(v map[string]*string) *UnbindOutputBucketResponse {
	s.Headers = v
	return s
}

func (s *UnbindOutputBucketResponse) SetBody(v *UnbindOutputBucketResponseBody) *UnbindOutputBucketResponse {
	s.Body = v
	return s
}

type UpdateMediaCategoryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	CateId               *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateMediaCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCategoryRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaCategoryRequest) SetOwnerId(v int64) *UpdateMediaCategoryRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetResourceOwnerAccount(v string) *UpdateMediaCategoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetResourceOwnerId(v int64) *UpdateMediaCategoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetMediaId(v string) *UpdateMediaCategoryRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetCateId(v int64) *UpdateMediaCategoryRequest {
	s.CateId = &v
	return s
}

func (s *UpdateMediaCategoryRequest) SetOwnerAccount(v string) *UpdateMediaCategoryRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateMediaCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaCategoryResponseBody) SetRequestId(v string) *UpdateMediaCategoryResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaCategoryResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMediaCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMediaCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCategoryResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaCategoryResponse) SetHeaders(v map[string]*string) *UpdateMediaCategoryResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaCategoryResponse) SetBody(v *UpdateMediaCategoryResponseBody) *UpdateMediaCategoryResponse {
	s.Body = v
	return s
}

type QueryComplexJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryComplexJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListRequest) SetOwnerId(v int64) *QueryComplexJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryComplexJobListRequest) SetResourceOwnerAccount(v string) *QueryComplexJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryComplexJobListRequest) SetResourceOwnerId(v int64) *QueryComplexJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryComplexJobListRequest) SetJobIds(v string) *QueryComplexJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryComplexJobListRequest) SetOwnerAccount(v string) *QueryComplexJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryComplexJobListResponseBody struct {
	NonExistJobIds *QueryComplexJobListResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList        *QueryComplexJobListResponseBodyJobList        `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBody) SetNonExistJobIds(v *QueryComplexJobListResponseBodyNonExistJobIds) *QueryComplexJobListResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *QueryComplexJobListResponseBody) SetRequestId(v string) *QueryComplexJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryComplexJobListResponseBody) SetJobList(v *QueryComplexJobListResponseBodyJobList) *QueryComplexJobListResponseBody {
	s.JobList = v
	return s
}

type QueryComplexJobListResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyNonExistJobIds) SetString_(v []*string) *QueryComplexJobListResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type QueryComplexJobListResponseBodyJobList struct {
	Job []*QueryComplexJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobList) SetJob(v []*QueryComplexJobListResponseBodyJobListJob) *QueryComplexJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryComplexJobListResponseBodyJobListJob struct {
	CreationTime          *string                                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent               *int64                                                          `json:"Percent,omitempty" xml:"Percent,omitempty"`
	FinishTime            *string                                                         `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State                 *string                                                         `json:"State,omitempty" xml:"State,omitempty"`
	TranscodeOutput       *QueryComplexJobListResponseBodyJobListJobTranscodeOutput       `json:"transcodeOutput,omitempty" xml:"transcodeOutput,omitempty" type:"Struct"`
	Message               *string                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	MNSMessageResult      *QueryComplexJobListResponseBodyJobListJobMNSMessageResult      `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	ComplexEditingConfigs *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigs `json:"ComplexEditingConfigs,omitempty" xml:"ComplexEditingConfigs,omitempty" type:"Struct"`
	Inputs                *QueryComplexJobListResponseBodyJobListJobInputs                `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	JobId                 *string                                                         `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code                  *string                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	PipelineId            *string                                                         `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryComplexJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetPercent(v int64) *QueryComplexJobListResponseBodyJobListJob {
	s.Percent = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetFinishTime(v string) *QueryComplexJobListResponseBodyJobListJob {
	s.FinishTime = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetState(v string) *QueryComplexJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetTranscodeOutput(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) *QueryComplexJobListResponseBodyJobListJob {
	s.TranscodeOutput = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetMessage(v string) *QueryComplexJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetMNSMessageResult(v *QueryComplexJobListResponseBodyJobListJobMNSMessageResult) *QueryComplexJobListResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetComplexEditingConfigs(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigs) *QueryComplexJobListResponseBodyJobListJob {
	s.ComplexEditingConfigs = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetInputs(v *QueryComplexJobListResponseBodyJobListJobInputs) *QueryComplexJobListResponseBodyJobListJob {
	s.Inputs = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetJobId(v string) *QueryComplexJobListResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetCode(v string) *QueryComplexJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryComplexJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutput struct {
	Video                  *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig            *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Encryption             *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	WaterMarkList          *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
	DeWatermark            *string                                                                         `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	WaterMarkConfigUrl     *string                                                                         `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	M3U8NonStandardSupport *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	Priority               *string                                                                         `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Audio                  *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                                         `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	MergeList              *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	SuperReso              *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	UserData               *string                                                                         `json:"UserData,omitempty" xml:"UserData,omitempty"`
	DigiWaterMark          *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark          `json:"DigiWaterMark,omitempty" xml:"DigiWaterMark,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                                         `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	OutputFile             *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Rotate                 *string                                                                         `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Container              *QueryComplexJobListResponseBodyJobListJobTranscodeOutputContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Clip                   *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                                         `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MuxConfig              *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TemplateId             *string                                                                         `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	SubtitleConfig         *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	Properties             *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutput) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetVideo(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.Video = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetTransConfig(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.TransConfig = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetEncryption(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.Encryption = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetWaterMarkList(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkList) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.WaterMarkList = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetDeWatermark(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.DeWatermark = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetWaterMarkConfigUrl(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetM3U8NonStandardSupport(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupport) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetPriority(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.Priority = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetAudio(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.Audio = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetAudioStreamMap(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.AudioStreamMap = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetMergeList(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeList) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.MergeList = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetSuperReso(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSuperReso) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.SuperReso = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetUserData(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.UserData = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetDigiWaterMark(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.DigiWaterMark = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetVideoStreamMap(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.VideoStreamMap = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetOutputFile(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.OutputFile = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetRotate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.Rotate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetContainer(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputContainer) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.Container = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetClip(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClip) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.Clip = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetMergeConfigUrl(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.MergeConfigUrl = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetMuxConfig(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.MuxConfig = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetTemplateId(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.TemplateId = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetSubtitleConfig(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.SubtitleConfig = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutput) SetProperties(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) *QueryComplexJobListResponseBodyJobListJobTranscodeOutput {
	s.Properties = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo struct {
	Bufsize    *string                                                                  `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain    *string                                                                  `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt     *string                                                                  `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad        *string                                                                  `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec      *string                                                                  `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height     *string                                                                  `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale     *string                                                                  `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop       *string                                                                  `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate    *string                                                                  `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate    *string                                                                  `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps     *string                                                                  `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile    *string                                                                  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf        *string                                                                  `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop        *string                                                                  `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width      *string                                                                  `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps        *string                                                                  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset     *string                                                                  `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode   *string                                                                  `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetBufsize(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetDegrain(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Degrain = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetBitrateBnd(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetPixFmt(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetPad(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Pad = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetCodec(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Codec = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetHeight(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Height = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetQscale(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Qscale = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetCrop(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Crop = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetMaxrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetMaxFps(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.MaxFps = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetProfile(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Profile = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetCrf(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Crf = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetGop(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Gop = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetWidth(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Width = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetFps(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Fps = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetPreset(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.Preset = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo) SetScanMode(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideo {
	s.ScanMode = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd) SetMax(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd) SetMin(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	Duration                *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetIsCheckAudioBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetIsCheckReso(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetTransMode(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.TransMode = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetIsCheckVideoBitrateFail(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetAdjDarMethod(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetDuration(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.Duration = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetIsCheckVideoBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetIsCheckResoFail(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig) SetIsCheckAudioBitrateFail(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption struct {
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) SetType(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption {
	s.Type = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) SetKey(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption {
	s.Key = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) SetKeyType(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption {
	s.KeyType = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) SetId(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption {
	s.Id = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) SetKeyUri(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption {
	s.KeyUri = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption) SetSkipCnt(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputEncryption {
	s.SkipCnt = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkList struct {
	WaterMark []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkList) SetWaterMark(v []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkList {
	s.WaterMark = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark struct {
	Type                *string                                                                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	ReferPos            *string                                                                                  `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Dx                  *string                                                                                  `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width               *string                                                                                  `json:"Width,omitempty" xml:"Width,omitempty"`
	Height              *string                                                                                  `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	WaterMarkTemplateId *string                                                                                  `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Dy                  *string                                                                                  `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) SetType(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) SetReferPos(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) SetDx(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) SetWidth(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark {
	s.Width = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) SetHeight(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) SetInputFile(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark) SetDy(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile) SetObject(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile) SetLocation(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile) SetBucket(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupport struct {
	TS *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupport) SetTS(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupport {
	s.TS = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS struct {
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS) SetSizeSupport(v bool) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS) SetMd5Support(v bool) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio struct {
	Profile    *string                                                              `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string                                                              `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string                                                              `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string                                                              `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string                                                              `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Volume     *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
	Bitrate    *string                                                              `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) SetProfile(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio {
	s.Profile = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) SetCodec(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio {
	s.Codec = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) SetSamplerate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) SetQscale(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio {
	s.Qscale = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) SetChannels(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio {
	s.Channels = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) SetVolume(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio {
	s.Volume = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio) SetBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudio {
	s.Bitrate = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume struct {
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume) SetMethod(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume {
	s.Method = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume) SetLevel(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputAudioVolume {
	s.Level = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeList struct {
	Merge []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeList) SetMerge(v []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeList {
	s.Merge = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge) SetStart(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge {
	s.Start = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge) SetRoleArn(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge) SetMergeURL(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge) SetDuration(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMergeListMerge {
	s.Duration = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSuperReso) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSuperReso) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSuperReso) SetIsHalfSample(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSuperReso {
	s.IsHalfSample = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark struct {
	Type      *string                                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	Alpha     *string                                                                         `json:"Alpha,omitempty" xml:"Alpha,omitempty"`
	InputFile *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark) SetType(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark {
	s.Type = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark) SetAlpha(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark {
	s.Alpha = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark) SetInputFile(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMark {
	s.InputFile = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile) SetObject(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile) SetLocation(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile) SetBucket(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputDigiWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile) SetRoleArn(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile {
	s.RoleArn = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile) SetObject(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile {
	s.Object = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile) SetLocation(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile {
	s.Location = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile) SetBucket(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputOutputFile {
	s.Bucket = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputContainer) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputContainer) SetFormat(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputContainer {
	s.Format = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputClip struct {
	TimeSpan *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputClip) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputClip) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClip) SetTimeSpan(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClip {
	s.TimeSpan = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan struct {
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan) SetSeek(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan {
	s.Seek = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan) SetDuration(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputClipTimeSpan {
	s.Duration = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig struct {
	Gif     *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig) SetGif(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig) SetSegment(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigSegment) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfig {
	s.Segment = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif) SetFinalDelay(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif) SetDitherMode(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif) SetLoop(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif) SetIsCustomPalette(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigSegment) SetDuration(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig struct {
	ExtSubtitleList *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig) SetExtSubtitleList(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleList) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig) SetSubtitleList(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleList) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfig {
	s.SubtitleList = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                                `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                                `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleList struct {
	Subtitle []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleList) SetSubtitle(v []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleListSubtitle) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleListSubtitle) SetMap(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties struct {
	Width      *string                                                                    `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                                    `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                                    `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                                    `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                                    `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                                    `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetWidth(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.Width = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetHeight(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.Height = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetDuration(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.Duration = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetFps(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.Fps = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.Bitrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetFileFormat(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.FileFormat = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetStreams(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.Streams = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetFormat(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.Format = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties) SetFileSize(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputProperties {
	s.FileSize = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams struct {
	VideoStreamList    *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams) SetVideoStreamList(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamList) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams) SetAudioStreamList(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamList) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams) SetSubtitleStreamList(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamList) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamList struct {
	VideoStream []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamList) SetVideoStream(v []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream struct {
	Index          *string                                                                                                         `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                                         `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                                         `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                                         `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Sar            *string                                                                                                         `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Lang           *string                                                                                                         `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                                         `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Height         *string                                                                                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	NumFrames      *string                                                                                                         `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string                                                                                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string                                                                                                         `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	HasBFrames     *string                                                                                                         `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                                         `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NetworkCost    *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Dar            *string                                                                                                         `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                                         `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Width          *string                                                                                                         `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration       *string                                                                                                         `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                         `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                                         `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                                         `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                                         `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamList struct {
	AudioStream []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamList) SetAudioStream(v []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) SetStartTime(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) SetNumPrograms(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) SetSize(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat {
	s.Size = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) SetNumStreams(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) SetFormatLongName(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) SetDuration(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) SetBitrate(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat) SetFormatName(v string) *QueryComplexJobListResponseBodyJobListJobTranscodeOutputPropertiesFormat {
	s.FormatName = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *QueryComplexJobListResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *QueryComplexJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *QueryComplexJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigs struct {
	ComplexEditingConfigs []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigs `json:"ComplexEditingConfigs,omitempty" xml:"ComplexEditingConfigs,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigs) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigs) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigs) SetComplexEditingConfigs(v []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigs) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigs {
	s.ComplexEditingConfigs = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigs struct {
	Editing *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing `json:"Editing,omitempty" xml:"Editing,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigs) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigs) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigs) SetEditing(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigs {
	s.Editing = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing struct {
	Timeline *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	ClipList *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipList `json:"ClipList,omitempty" xml:"ClipList,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing) SetTimeline(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing {
	s.Timeline = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing) SetClipList(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipList) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditing {
	s.ClipList = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline struct {
	TrackList      *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList      `json:"TrackList,omitempty" xml:"TrackList,omitempty" type:"Struct"`
	TimelineConfig *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig `json:"TimelineConfig,omitempty" xml:"TimelineConfig,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) SetTrackList(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline {
	s.TrackList = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) SetTimelineConfig(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimeline {
	s.TimelineConfig = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList struct {
	Track []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack `json:"Track,omitempty" xml:"Track,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList) SetTrack(v []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList {
	s.Track = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack struct {
	Type  *string                                                                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
	Order *string                                                                                                                `json:"Order,omitempty" xml:"Order,omitempty"`
	Id    *string                                                                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	Clips *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips `json:"Clips,omitempty" xml:"Clips,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) SetType(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack {
	s.Type = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) SetOrder(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack {
	s.Order = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) SetId(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack {
	s.Id = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) SetClips(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack {
	s.Clips = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips struct {
	Clip []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips) SetClip(v []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips {
	s.Clip = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip struct {
	ClipsConfig *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig `json:"ClipsConfig,omitempty" xml:"ClipsConfig,omitempty" type:"Struct"`
	Out         *string                                                                                                                               `json:"Out,omitempty" xml:"Out,omitempty"`
	In          *string                                                                                                                               `json:"In,omitempty" xml:"In,omitempty"`
	ClipID      *string                                                                                                                               `json:"clipID,omitempty" xml:"clipID,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) SetClipsConfig(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip {
	s.ClipsConfig = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) SetOut(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip {
	s.Out = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) SetIn(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip {
	s.In = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) SetClipID(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip {
	s.ClipID = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig struct {
	ClipsConfigVideo *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo `json:"ClipsConfigVideo,omitempty" xml:"ClipsConfigVideo,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig) SetClipsConfigVideo(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig {
	s.ClipsConfigVideo = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo struct {
	T *string `json:"T,omitempty" xml:"T,omitempty"`
	L *string `json:"L,omitempty" xml:"L,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetT(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.T = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetL(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.L = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig struct {
	TimelineConfigAudio *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio `json:"TimelineConfigAudio,omitempty" xml:"TimelineConfigAudio,omitempty" type:"Struct"`
	TimelineConfigVideo *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo `json:"TimelineConfigVideo,omitempty" xml:"TimelineConfigVideo,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) SetTimelineConfigAudio(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig {
	s.TimelineConfigAudio = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) SetTimelineConfigVideo(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig {
	s.TimelineConfigVideo = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio struct {
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Samplerate    *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Channels      *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) SetChannelLayout(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio {
	s.ChannelLayout = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) SetSamplerate(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) SetChannels(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Channels = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo struct {
	BgColor        *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	Width          *string `json:"Width,omitempty" xml:"Width,omitempty"`
	RenderRatio    *string `json:"RenderRatio,omitempty" xml:"RenderRatio,omitempty"`
	IsGpuData      *string `json:"IsGpuData,omitempty" xml:"IsGpuData,omitempty"`
	Height         *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsOneTrackData *string `json:"IsOneTrackData,omitempty" xml:"IsOneTrackData,omitempty"`
	Fps            *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	ReclosePrec    *string `json:"ReclosePrec,omitempty" xml:"ReclosePrec,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetBgColor(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.BgColor = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetWidth(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Width = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetRenderRatio(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.RenderRatio = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetIsGpuData(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsGpuData = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetHeight(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Height = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetIsOneTrackData(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsOneTrackData = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetFps(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Fps = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetReclosePrec(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.ReclosePrec = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipList struct {
	Clip []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipList) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipList) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipList) SetClip(v []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipList {
	s.Clip = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip struct {
	Type          *string                                                                                                        `json:"Type,omitempty" xml:"Type,omitempty"`
	SourceID      *string                                                                                                        `json:"SourceID,omitempty" xml:"SourceID,omitempty"`
	Effects       *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects `json:"Effects,omitempty" xml:"Effects,omitempty" type:"Struct"`
	SourceType    *string                                                                                                        `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	SourceStrmMap *string                                                                                                        `json:"SourceStrmMap,omitempty" xml:"SourceStrmMap,omitempty"`
	Out           *string                                                                                                        `json:"Out,omitempty" xml:"Out,omitempty"`
	In            *string                                                                                                        `json:"In,omitempty" xml:"In,omitempty"`
	Id            *string                                                                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetType(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.Type = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetSourceID(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.SourceID = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetEffects(v *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.Effects = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetSourceType(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.SourceType = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetSourceStrmMap(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.SourceStrmMap = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetOut(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.Out = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetIn(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.In = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetId(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.Id = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects struct {
	Effect []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect `json:"Effect,omitempty" xml:"Effect,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects) SetEffect(v []*QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects {
	s.Effect = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect struct {
	Effect       *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	EffectConfig *string `json:"EffectConfig,omitempty" xml:"EffectConfig,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) SetEffect(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect {
	s.Effect = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) SetEffectConfig(v string) *QueryComplexJobListResponseBodyJobListJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect {
	s.EffectConfig = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobInputs struct {
	Inputs []*QueryComplexJobListResponseBodyJobListJobInputsInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobInputs) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobInputs) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobInputs) SetInputs(v []*QueryComplexJobListResponseBodyJobListJobInputsInputs) *QueryComplexJobListResponseBodyJobListJobInputs {
	s.Inputs = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobInputsInputs struct {
	EditingInputs *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputs `json:"EditingInputs,omitempty" xml:"EditingInputs,omitempty" type:"Struct"`
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputs) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputs) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputs) SetEditingInputs(v *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputs) *QueryComplexJobListResponseBodyJobListJobInputsInputs {
	s.EditingInputs = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputs struct {
	EditingInput []*QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput `json:"EditingInput,omitempty" xml:"EditingInput,omitempty" type:"Repeated"`
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputs) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputs) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputs) SetEditingInput(v []*QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputs {
	s.EditingInput = v
	return s
}

type QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput struct {
	InputFile   *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile   `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	InputConfig *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	Id          *string                                                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput) SetInputFile(v *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput {
	s.InputFile = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput) SetInputConfig(v *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput {
	s.InputConfig = v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput) SetId(v string) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInput {
	s.Id = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile) SetObject(v string) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile {
	s.Object = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile) SetLocation(v string) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile {
	s.Location = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile) SetBucket(v string) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputFile {
	s.Bucket = &v
	return s
}

type QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig struct {
	IsNormalSar       *string `json:"IsNormalSar,omitempty" xml:"IsNormalSar,omitempty"`
	DeinterlaceMethod *string `json:"DeinterlaceMethod,omitempty" xml:"DeinterlaceMethod,omitempty"`
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig) SetIsNormalSar(v string) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig {
	s.IsNormalSar = &v
	return s
}

func (s *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig) SetDeinterlaceMethod(v string) *QueryComplexJobListResponseBodyJobListJobInputsInputsEditingInputsEditingInputInputConfig {
	s.DeinterlaceMethod = &v
	return s
}

type QueryComplexJobListResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryComplexJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryComplexJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryComplexJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryComplexJobListResponse) SetHeaders(v map[string]*string) *QueryComplexJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryComplexJobListResponse) SetBody(v *QueryComplexJobListResponseBody) *QueryComplexJobListResponse {
	s.Body = v
	return s
}

type ListInferenceJobRequest struct {
	ServerName  *string `json:"ServerName,omitempty" xml:"ServerName,omitempty"`
	PageNumber  *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	MaxPageSize *int64  `json:"MaxPageSize,omitempty" xml:"MaxPageSize,omitempty"`
}

func (s ListInferenceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s ListInferenceJobRequest) GoString() string {
	return s.String()
}

func (s *ListInferenceJobRequest) SetServerName(v string) *ListInferenceJobRequest {
	s.ServerName = &v
	return s
}

func (s *ListInferenceJobRequest) SetPageNumber(v int64) *ListInferenceJobRequest {
	s.PageNumber = &v
	return s
}

func (s *ListInferenceJobRequest) SetMaxPageSize(v int64) *ListInferenceJobRequest {
	s.MaxPageSize = &v
	return s
}

type ListInferenceJobResponseBody struct {
	Message   *string                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Jobs      []*ListInferenceJobResponseBodyJobs `json:"Jobs,omitempty" xml:"Jobs,omitempty" type:"Repeated"`
	Code      *string                             `json:"Code,omitempty" xml:"Code,omitempty"`
	TotalSize *int64                              `json:"TotalSize,omitempty" xml:"TotalSize,omitempty"`
}

func (s ListInferenceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListInferenceJobResponseBody) GoString() string {
	return s.String()
}

func (s *ListInferenceJobResponseBody) SetMessage(v string) *ListInferenceJobResponseBody {
	s.Message = &v
	return s
}

func (s *ListInferenceJobResponseBody) SetRequestId(v string) *ListInferenceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListInferenceJobResponseBody) SetJobs(v []*ListInferenceJobResponseBodyJobs) *ListInferenceJobResponseBody {
	s.Jobs = v
	return s
}

func (s *ListInferenceJobResponseBody) SetCode(v string) *ListInferenceJobResponseBody {
	s.Code = &v
	return s
}

func (s *ListInferenceJobResponseBody) SetTotalSize(v int64) *ListInferenceJobResponseBody {
	s.TotalSize = &v
	return s
}

type ListInferenceJobResponseBodyJobs struct {
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserId    *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	JobTime   *int64  `json:"JobTime,omitempty" xml:"JobTime,omitempty"`
	JobParams *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
}

func (s ListInferenceJobResponseBodyJobs) String() string {
	return tea.Prettify(s)
}

func (s ListInferenceJobResponseBodyJobs) GoString() string {
	return s.String()
}

func (s *ListInferenceJobResponseBodyJobs) SetStatus(v string) *ListInferenceJobResponseBodyJobs {
	s.Status = &v
	return s
}

func (s *ListInferenceJobResponseBodyJobs) SetResult(v string) *ListInferenceJobResponseBodyJobs {
	s.Result = &v
	return s
}

func (s *ListInferenceJobResponseBodyJobs) SetJobId(v string) *ListInferenceJobResponseBodyJobs {
	s.JobId = &v
	return s
}

func (s *ListInferenceJobResponseBodyJobs) SetUserId(v int64) *ListInferenceJobResponseBodyJobs {
	s.UserId = &v
	return s
}

func (s *ListInferenceJobResponseBodyJobs) SetMessage(v string) *ListInferenceJobResponseBodyJobs {
	s.Message = &v
	return s
}

func (s *ListInferenceJobResponseBodyJobs) SetJobTime(v int64) *ListInferenceJobResponseBodyJobs {
	s.JobTime = &v
	return s
}

func (s *ListInferenceJobResponseBodyJobs) SetJobParams(v string) *ListInferenceJobResponseBodyJobs {
	s.JobParams = &v
	return s
}

type ListInferenceJobResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListInferenceJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListInferenceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s ListInferenceJobResponse) GoString() string {
	return s.String()
}

func (s *ListInferenceJobResponse) SetHeaders(v map[string]*string) *ListInferenceJobResponse {
	s.Headers = v
	return s
}

func (s *ListInferenceJobResponse) SetBody(v *ListInferenceJobResponseBody) *ListInferenceJobResponse {
	s.Body = v
	return s
}

type QueryJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryJobListRequest) SetOwnerId(v int64) *QueryJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryJobListRequest) SetResourceOwnerAccount(v string) *QueryJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryJobListRequest) SetResourceOwnerId(v int64) *QueryJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryJobListRequest) SetJobIds(v string) *QueryJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryJobListRequest) SetOwnerAccount(v string) *QueryJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryJobListResponseBody struct {
	NonExistJobIds *QueryJobListResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList        *QueryJobListResponseBodyJobList        `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBody) SetNonExistJobIds(v *QueryJobListResponseBodyNonExistJobIds) *QueryJobListResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *QueryJobListResponseBody) SetRequestId(v string) *QueryJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryJobListResponseBody) SetJobList(v *QueryJobListResponseBodyJobList) *QueryJobListResponseBody {
	s.JobList = v
	return s
}

type QueryJobListResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyNonExistJobIds) SetString_(v []*string) *QueryJobListResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type QueryJobListResponseBodyJobList struct {
	Job []*QueryJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobList) SetJob(v []*QueryJobListResponseBodyJobListJob) *QueryJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryJobListResponseBodyJobListJob struct {
	CreationTime     *string                                             `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent          *int64                                              `json:"Percent,omitempty" xml:"Percent,omitempty"`
	FinishTime       *string                                             `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State            *string                                             `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                             `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code             *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	Output           *QueryJobListResponseBodyJobListJobOutput           `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	PipelineId       *string                                             `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input            *QueryJobListResponseBodyJobListJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MNSMessageResult *QueryJobListResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetPercent(v int64) *QueryJobListResponseBodyJobListJob {
	s.Percent = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetFinishTime(v string) *QueryJobListResponseBodyJobListJob {
	s.FinishTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetState(v string) *QueryJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetJobId(v string) *QueryJobListResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetCode(v string) *QueryJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetMessage(v string) *QueryJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetOutput(v *QueryJobListResponseBodyJobListJobOutput) *QueryJobListResponseBodyJobListJob {
	s.Output = v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetInput(v *QueryJobListResponseBodyJobListJobInput) *QueryJobListResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *QueryJobListResponseBodyJobListJob) SetMNSMessageResult(v *QueryJobListResponseBodyJobListJobMNSMessageResult) *QueryJobListResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

type QueryJobListResponseBodyJobListJobOutput struct {
	Video                  *QueryJobListResponseBodyJobListJobOutputVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig            *QueryJobListResponseBodyJobListJobOutputTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Encryption             *QueryJobListResponseBodyJobListJobOutputEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	WaterMarkList          *QueryJobListResponseBodyJobListJobOutputWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
	WaterMarkConfigUrl     *string                                                         `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	DeWatermark            *string                                                         `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	M3U8NonStandardSupport *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	Priority               *string                                                         `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Audio                  *QueryJobListResponseBodyJobListJobOutputAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                         `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	MergeList              *QueryJobListResponseBodyJobListJobOutputMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	SuperReso              *QueryJobListResponseBodyJobListJobOutputSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	UserData               *string                                                         `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OutSubtitleList        *QueryJobListResponseBodyJobListJobOutputOutSubtitleList        `json:"OutSubtitleList,omitempty" xml:"OutSubtitleList,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                         `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	OutputFile             *QueryJobListResponseBodyJobListJobOutputOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Rotate                 *string                                                         `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Container              *QueryJobListResponseBodyJobListJobOutputContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Clip                   *QueryJobListResponseBodyJobListJobOutputClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                         `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	OpeningList            *QueryJobListResponseBodyJobListJobOutputOpeningList            `json:"OpeningList,omitempty" xml:"OpeningList,omitempty" type:"Struct"`
	MuxConfig              *QueryJobListResponseBodyJobListJobOutputMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TailSlateList          *QueryJobListResponseBodyJobListJobOutputTailSlateList          `json:"TailSlateList,omitempty" xml:"TailSlateList,omitempty" type:"Struct"`
	TemplateId             *string                                                         `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	SubtitleConfig         *QueryJobListResponseBodyJobListJobOutputSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	Properties             *QueryJobListResponseBodyJobListJobOutputProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutput) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutput) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetVideo(v *QueryJobListResponseBodyJobListJobOutputVideo) *QueryJobListResponseBodyJobListJobOutput {
	s.Video = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetTransConfig(v *QueryJobListResponseBodyJobListJobOutputTransConfig) *QueryJobListResponseBodyJobListJobOutput {
	s.TransConfig = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetEncryption(v *QueryJobListResponseBodyJobListJobOutputEncryption) *QueryJobListResponseBodyJobListJobOutput {
	s.Encryption = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetWaterMarkList(v *QueryJobListResponseBodyJobListJobOutputWaterMarkList) *QueryJobListResponseBodyJobListJobOutput {
	s.WaterMarkList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetWaterMarkConfigUrl(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetDeWatermark(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.DeWatermark = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetM3U8NonStandardSupport(v *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport) *QueryJobListResponseBodyJobListJobOutput {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetPriority(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.Priority = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetAudio(v *QueryJobListResponseBodyJobListJobOutputAudio) *QueryJobListResponseBodyJobListJobOutput {
	s.Audio = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetAudioStreamMap(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.AudioStreamMap = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetMergeList(v *QueryJobListResponseBodyJobListJobOutputMergeList) *QueryJobListResponseBodyJobListJobOutput {
	s.MergeList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetSuperReso(v *QueryJobListResponseBodyJobListJobOutputSuperReso) *QueryJobListResponseBodyJobListJobOutput {
	s.SuperReso = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetUserData(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.UserData = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetOutSubtitleList(v *QueryJobListResponseBodyJobListJobOutputOutSubtitleList) *QueryJobListResponseBodyJobListJobOutput {
	s.OutSubtitleList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetVideoStreamMap(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.VideoStreamMap = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetOutputFile(v *QueryJobListResponseBodyJobListJobOutputOutputFile) *QueryJobListResponseBodyJobListJobOutput {
	s.OutputFile = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetRotate(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.Rotate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetContainer(v *QueryJobListResponseBodyJobListJobOutputContainer) *QueryJobListResponseBodyJobListJobOutput {
	s.Container = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetClip(v *QueryJobListResponseBodyJobListJobOutputClip) *QueryJobListResponseBodyJobListJobOutput {
	s.Clip = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetMergeConfigUrl(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.MergeConfigUrl = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetOpeningList(v *QueryJobListResponseBodyJobListJobOutputOpeningList) *QueryJobListResponseBodyJobListJobOutput {
	s.OpeningList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetMuxConfig(v *QueryJobListResponseBodyJobListJobOutputMuxConfig) *QueryJobListResponseBodyJobListJobOutput {
	s.MuxConfig = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetTailSlateList(v *QueryJobListResponseBodyJobListJobOutputTailSlateList) *QueryJobListResponseBodyJobListJobOutput {
	s.TailSlateList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetTemplateId(v string) *QueryJobListResponseBodyJobListJobOutput {
	s.TemplateId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetSubtitleConfig(v *QueryJobListResponseBodyJobListJobOutputSubtitleConfig) *QueryJobListResponseBodyJobListJobOutput {
	s.SubtitleConfig = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutput) SetProperties(v *QueryJobListResponseBodyJobListJobOutputProperties) *QueryJobListResponseBodyJobListJobOutput {
	s.Properties = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputVideo struct {
	Bufsize      *string                                                  `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain      *string                                                  `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd   *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt       *string                                                  `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad          *string                                                  `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec        *string                                                  `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height       *string                                                  `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale       *string                                                  `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop         *string                                                  `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate      *string                                                  `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate      *string                                                  `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps       *string                                                  `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile      *string                                                  `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf          *string                                                  `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop          *string                                                  `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width        *string                                                  `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps          *string                                                  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset       *string                                                  `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode     *string                                                  `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	ResoPriority *string                                                  `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputVideo) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetBufsize(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetDegrain(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Degrain = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetBitrateBnd(v *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetPixFmt(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetPad(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Pad = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetCodec(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Codec = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetQscale(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Qscale = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetCrop(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Crop = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetMaxrate(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetMaxFps(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.MaxFps = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetProfile(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Profile = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetCrf(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Crf = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetGop(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Gop = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Width = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetFps(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Fps = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetPreset(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.Preset = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetScanMode(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.ScanMode = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideo) SetResoPriority(v string) *QueryJobListResponseBodyJobListJobOutputVideo {
	s.ResoPriority = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) SetMax(v string) *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd) SetMin(v string) *QueryJobListResponseBodyJobListJobOutputVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputTransConfig) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckAudioBitrate(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetTransMode(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.TransMode = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckReso(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckVideoBitrateFail(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetAdjDarMethod(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckVideoBitrate(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckResoFail(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTransConfig) SetIsCheckAudioBitrateFail(v string) *QueryJobListResponseBodyJobListJobOutputTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputEncryption struct {
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputEncryption) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputEncryption) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetType(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.Type = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetKey(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.Key = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetKeyType(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.KeyType = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetId(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.Id = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetKeyUri(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.KeyUri = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputEncryption) SetSkipCnt(v string) *QueryJobListResponseBodyJobListJobOutputEncryption {
	s.SkipCnt = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputWaterMarkList struct {
	WaterMark []*QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkList) SetWaterMark(v []*QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) *QueryJobListResponseBodyJobListJobOutputWaterMarkList {
	s.WaterMark = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark struct {
	Type                *string                                                                  `json:"Type,omitempty" xml:"Type,omitempty"`
	ReferPos            *string                                                                  `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Dx                  *string                                                                  `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width               *string                                                                  `json:"Width,omitempty" xml:"Width,omitempty"`
	Height              *string                                                                  `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	WaterMarkTemplateId *string                                                                  `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Dy                  *string                                                                  `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetType(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetReferPos(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetDx(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Width = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetInputFile(v *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark) SetDy(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetObject(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetLocation(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile) SetBucket(v string) *QueryJobListResponseBodyJobListJobOutputWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport struct {
	TS *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport) SetTS(v *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupport {
	s.TS = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS struct {
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) SetSizeSupport(v bool) *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS) SetMd5Support(v bool) *QueryJobListResponseBodyJobListJobOutputM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputAudio struct {
	Profile    *string                                              `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string                                              `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string                                              `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string                                              `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string                                              `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Volume     *QueryJobListResponseBodyJobListJobOutputAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
	Bitrate    *string                                              `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputAudio) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetProfile(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Profile = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetCodec(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Codec = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetSamplerate(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetQscale(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Qscale = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetChannels(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Channels = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetVolume(v *QueryJobListResponseBodyJobListJobOutputAudioVolume) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Volume = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudio) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputAudio {
	s.Bitrate = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputAudioVolume struct {
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputAudioVolume) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputAudioVolume) SetMethod(v string) *QueryJobListResponseBodyJobListJobOutputAudioVolume {
	s.Method = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputAudioVolume) SetLevel(v string) *QueryJobListResponseBodyJobListJobOutputAudioVolume {
	s.Level = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMergeList struct {
	Merge []*QueryJobListResponseBodyJobListJobOutputMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputMergeList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMergeList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeList) SetMerge(v []*QueryJobListResponseBodyJobListJobOutputMergeListMerge) *QueryJobListResponseBodyJobListJobOutputMergeList {
	s.Merge = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMergeListMerge struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMergeListMerge) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeListMerge) SetStart(v string) *QueryJobListResponseBodyJobListJobOutputMergeListMerge {
	s.Start = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeListMerge) SetRoleArn(v string) *QueryJobListResponseBodyJobListJobOutputMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeListMerge) SetMergeURL(v string) *QueryJobListResponseBodyJobListJobOutputMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMergeListMerge) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputMergeListMerge {
	s.Duration = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputSuperReso) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSuperReso) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSuperReso) SetIsHalfSample(v string) *QueryJobListResponseBodyJobListJobOutputSuperReso {
	s.IsHalfSample = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOutSubtitleList struct {
	OutSubtitle []*QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle `json:"OutSubtitle,omitempty" xml:"OutSubtitle,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleList) SetOutSubtitle(v []*QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) *QueryJobListResponseBodyJobListJobOutputOutSubtitleList {
	s.OutSubtitle = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle struct {
	Map             *string                                                                            `json:"Map,omitempty" xml:"Map,omitempty"`
	OutSubtitleFile *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile `json:"OutSubtitleFile,omitempty" xml:"OutSubtitleFile,omitempty" type:"Struct"`
	Success         *bool                                                                              `json:"Success,omitempty" xml:"Success,omitempty"`
	Message         *string                                                                            `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetMap(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Map = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetOutSubtitleFile(v *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.OutSubtitleFile = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetSuccess(v bool) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Success = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle) SetMessage(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitle {
	s.Message = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetRoleArn(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.RoleArn = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetObject(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Object = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetLocation(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetBucket(v string) *QueryJobListResponseBodyJobListJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Bucket = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOutputFile) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOutputFile) SetRoleArn(v string) *QueryJobListResponseBodyJobListJobOutputOutputFile {
	s.RoleArn = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutputFile) SetObject(v string) *QueryJobListResponseBodyJobListJobOutputOutputFile {
	s.Object = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutputFile) SetLocation(v string) *QueryJobListResponseBodyJobListJobOutputOutputFile {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOutputFile) SetBucket(v string) *QueryJobListResponseBodyJobListJobOutputOutputFile {
	s.Bucket = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputContainer) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputContainer) SetFormat(v string) *QueryJobListResponseBodyJobListJobOutputContainer {
	s.Format = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputClip struct {
	TimeSpan *QueryJobListResponseBodyJobListJobOutputClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputClip) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputClip) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputClip) SetTimeSpan(v *QueryJobListResponseBodyJobListJobOutputClipTimeSpan) *QueryJobListResponseBodyJobListJobOutputClip {
	s.TimeSpan = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputClipTimeSpan struct {
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputClipTimeSpan) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputClipTimeSpan) SetSeek(v string) *QueryJobListResponseBodyJobListJobOutputClipTimeSpan {
	s.Seek = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputClipTimeSpan) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputClipTimeSpan {
	s.Duration = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOpeningList struct {
	Opening []*QueryJobListResponseBodyJobListJobOutputOpeningListOpening `json:"Opening,omitempty" xml:"Opening,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputOpeningList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOpeningList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningList) SetOpening(v []*QueryJobListResponseBodyJobListJobOutputOpeningListOpening) *QueryJobListResponseBodyJobListJobOutputOpeningList {
	s.Opening = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputOpeningListOpening struct {
	OpenUrl *string `json:"openUrl,omitempty" xml:"openUrl,omitempty"`
	Start   *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputOpeningListOpening) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputOpeningListOpening) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningListOpening) SetOpenUrl(v string) *QueryJobListResponseBodyJobListJobOutputOpeningListOpening {
	s.OpenUrl = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningListOpening) SetStart(v string) *QueryJobListResponseBodyJobListJobOutputOpeningListOpening {
	s.Start = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningListOpening) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputOpeningListOpening {
	s.Width = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputOpeningListOpening) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputOpeningListOpening {
	s.Height = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMuxConfig struct {
	Webp    *QueryJobListResponseBodyJobListJobOutputMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
	Gif     *QueryJobListResponseBodyJobListJobOutputMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryJobListResponseBodyJobListJobOutputMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfig) SetWebp(v *QueryJobListResponseBodyJobListJobOutputMuxConfigWebp) *QueryJobListResponseBodyJobListJobOutputMuxConfig {
	s.Webp = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfig) SetGif(v *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) *QueryJobListResponseBodyJobListJobOutputMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfig) SetSegment(v *QueryJobListResponseBodyJobListJobOutputMuxConfigSegment) *QueryJobListResponseBodyJobListJobOutputMuxConfig {
	s.Segment = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigWebp) SetLoop(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigWebp {
	s.Loop = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) SetFinalDelay(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) SetDitherMode(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) SetLoop(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigGif) SetIsCustomPalette(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputMuxConfigSegment) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputTailSlateList struct {
	TailSlate []*QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate `json:"TailSlate,omitempty" xml:"TailSlate,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputTailSlateList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputTailSlateList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateList) SetTailSlate(v []*QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) *QueryJobListResponseBodyJobListJobOutputTailSlateList {
	s.TailSlate = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate struct {
	Start         *string `json:"Start,omitempty" xml:"Start,omitempty"`
	BgColor       *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	IsMergeAudio  *bool   `json:"IsMergeAudio,omitempty" xml:"IsMergeAudio,omitempty"`
	Width         *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height        *string `json:"Height,omitempty" xml:"Height,omitempty"`
	BlendDuration *string `json:"BlendDuration,omitempty" xml:"BlendDuration,omitempty"`
	TailUrl       *string `json:"TailUrl,omitempty" xml:"TailUrl,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetStart(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Start = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetBgColor(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.BgColor = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetIsMergeAudio(v bool) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.IsMergeAudio = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Width = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetBlendDuration(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.BlendDuration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate) SetTailUrl(v string) *QueryJobListResponseBodyJobListJobOutputTailSlateListTailSlate {
	s.TailUrl = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfig struct {
	ExtSubtitleList *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfig) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfig) SetExtSubtitleList(v *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) *QueryJobListResponseBodyJobListJobOutputSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfig) SetSubtitleList(v *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList) *QueryJobListResponseBodyJobListJobOutputSubtitleConfig {
	s.SubtitleList = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList struct {
	Subtitle []*QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList) SetSubtitle(v []*QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle) SetMap(v string) *QueryJobListResponseBodyJobListJobOutputSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputProperties struct {
	Width       *string                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
	Height      *string                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	SourceLogos *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos `json:"SourceLogos,omitempty" xml:"SourceLogos,omitempty" type:"Struct"`
	Duration    *string                                                        `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps         *string                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate     *string                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat  *string                                                        `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams     *QueryJobListResponseBodyJobListJobOutputPropertiesStreams     `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format      *QueryJobListResponseBodyJobListJobOutputPropertiesFormat      `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize    *string                                                        `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputProperties) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputProperties) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Width = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetSourceLogos(v *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.SourceLogos = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetFps(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Fps = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetFileFormat(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.FileFormat = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetStreams(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreams) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Streams = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetFormat(v *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.Format = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputProperties) SetFileSize(v string) *QueryJobListResponseBodyJobListJobOutputProperties {
	s.FileSize = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos struct {
	SourceLogo []*QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo `json:"SourceLogo,omitempty" xml:"SourceLogo,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos) SetSourceLogo(v []*QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo) *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogos {
	s.SourceLogo = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo struct {
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo) SetSource(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesSourceLogosSourceLogo {
	s.Source = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreams struct {
	VideoStreamList    *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreams) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreams) SetVideoStreamList(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) *QueryJobListResponseBodyJobListJobOutputPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreams) SetAudioStreamList(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) *QueryJobListResponseBodyJobListJobOutputPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreams) SetSubtitleStreamList(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) *QueryJobListResponseBodyJobListJobOutputPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList struct {
	VideoStream []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList) SetVideoStream(v []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream struct {
	Index          *string                                                                                         `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                         `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                         `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                         `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Sar            *string                                                                                         `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Lang           *string                                                                                         `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                         `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Height         *string                                                                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	NumFrames      *string                                                                                         `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string                                                                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string                                                                                         `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	HasBFrames     *string                                                                                         `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                         `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                         `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NetworkCost    *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Dar            *string                                                                                         `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                         `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Width          *string                                                                                         `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration       *string                                                                                         `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                         `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                         `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                         `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                         `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList struct {
	AudioStream []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList) SetAudioStream(v []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryJobListResponseBodyJobListJobOutputPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobOutputPropertiesFormat) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetStartTime(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetNumPrograms(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetSize(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.Size = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetNumStreams(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetFormatLongName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetDuration(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetBitrate(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobOutputPropertiesFormat) SetFormatName(v string) *QueryJobListResponseBodyJobListJobOutputPropertiesFormat {
	s.FormatName = &v
	return s
}

type QueryJobListResponseBodyJobListJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobInput) SetObject(v string) *QueryJobListResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobInput) SetLocation(v string) *QueryJobListResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobInput) SetBucket(v string) *QueryJobListResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type QueryJobListResponseBodyJobListJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QueryJobListResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryJobListResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *QueryJobListResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *QueryJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryJobListResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *QueryJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QueryJobListResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryJobListResponse) SetHeaders(v map[string]*string) *QueryJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryJobListResponse) SetBody(v *QueryJobListResponseBody) *QueryJobListResponse {
	s.Body = v
	return s
}

type SearchMediaWorkflowRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	StateList            *string `json:"StateList,omitempty" xml:"StateList,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SearchMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowRequest) SetOwnerId(v int64) *SearchMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetResourceOwnerAccount(v string) *SearchMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetResourceOwnerId(v int64) *SearchMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetPageSize(v int64) *SearchMediaWorkflowRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetPageNumber(v int64) *SearchMediaWorkflowRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetStateList(v string) *SearchMediaWorkflowRequest {
	s.StateList = &v
	return s
}

func (s *SearchMediaWorkflowRequest) SetOwnerAccount(v string) *SearchMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

type SearchMediaWorkflowResponseBody struct {
	TotalCount        *int64                                            `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	MediaWorkflowList *SearchMediaWorkflowResponseBodyMediaWorkflowList `json:"MediaWorkflowList,omitempty" xml:"MediaWorkflowList,omitempty" type:"Struct"`
	PageSize          *int64                                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId         *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber        *int64                                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s SearchMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowResponseBody) SetTotalCount(v int64) *SearchMediaWorkflowResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchMediaWorkflowResponseBody) SetMediaWorkflowList(v *SearchMediaWorkflowResponseBodyMediaWorkflowList) *SearchMediaWorkflowResponseBody {
	s.MediaWorkflowList = v
	return s
}

func (s *SearchMediaWorkflowResponseBody) SetPageSize(v int64) *SearchMediaWorkflowResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchMediaWorkflowResponseBody) SetRequestId(v string) *SearchMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaWorkflowResponseBody) SetPageNumber(v int64) *SearchMediaWorkflowResponseBody {
	s.PageNumber = &v
	return s
}

type SearchMediaWorkflowResponseBodyMediaWorkflowList struct {
	MediaWorkflow []*SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Repeated"`
}

func (s SearchMediaWorkflowResponseBodyMediaWorkflowList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowResponseBodyMediaWorkflowList) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowList) SetMediaWorkflow(v []*SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) *SearchMediaWorkflowResponseBodyMediaWorkflowList {
	s.MediaWorkflow = v
	return s
}

type SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetCreationTime(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetMediaWorkflowId(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetState(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.State = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetTriggerMode(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.TriggerMode = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetName(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.Name = &v
	return s
}

func (s *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow) SetTopology(v string) *SearchMediaWorkflowResponseBodyMediaWorkflowListMediaWorkflow {
	s.Topology = &v
	return s
}

type SearchMediaWorkflowResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaWorkflowResponse) SetHeaders(v map[string]*string) *SearchMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaWorkflowResponse) SetBody(v *SearchMediaWorkflowResponseBody) *SearchMediaWorkflowResponse {
	s.Body = v
	return s
}

type QueryCoverPipelineListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineIds          *string `json:"PipelineIds,omitempty" xml:"PipelineIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryCoverPipelineListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverPipelineListRequest) GoString() string {
	return s.String()
}

func (s *QueryCoverPipelineListRequest) SetOwnerId(v int64) *QueryCoverPipelineListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCoverPipelineListRequest) SetResourceOwnerAccount(v string) *QueryCoverPipelineListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryCoverPipelineListRequest) SetResourceOwnerId(v int64) *QueryCoverPipelineListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryCoverPipelineListRequest) SetPipelineIds(v string) *QueryCoverPipelineListRequest {
	s.PipelineIds = &v
	return s
}

func (s *QueryCoverPipelineListRequest) SetOwnerAccount(v string) *QueryCoverPipelineListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryCoverPipelineListResponseBody struct {
	RequestId    *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PipelineList *QueryCoverPipelineListResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
	NonExistIds  *QueryCoverPipelineListResponseBodyNonExistIds  `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryCoverPipelineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverPipelineListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCoverPipelineListResponseBody) SetRequestId(v string) *QueryCoverPipelineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCoverPipelineListResponseBody) SetPipelineList(v *QueryCoverPipelineListResponseBodyPipelineList) *QueryCoverPipelineListResponseBody {
	s.PipelineList = v
	return s
}

func (s *QueryCoverPipelineListResponseBody) SetNonExistIds(v *QueryCoverPipelineListResponseBodyNonExistIds) *QueryCoverPipelineListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryCoverPipelineListResponseBodyPipelineList struct {
	Pipeline []*QueryCoverPipelineListResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s QueryCoverPipelineListResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverPipelineListResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *QueryCoverPipelineListResponseBodyPipelineList) SetPipeline(v []*QueryCoverPipelineListResponseBodyPipelineListPipeline) *QueryCoverPipelineListResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type QueryCoverPipelineListResponseBodyPipelineListPipeline struct {
	State        *string                                                             `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                             `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Role         *string                                                             `json:"Role,omitempty" xml:"Role,omitempty"`
	Name         *string                                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryCoverPipelineListResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverPipelineListResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *QueryCoverPipelineListResponseBodyPipelineListPipeline) SetState(v string) *QueryCoverPipelineListResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *QueryCoverPipelineListResponseBodyPipelineListPipeline) SetNotifyConfig(v *QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig) *QueryCoverPipelineListResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *QueryCoverPipelineListResponseBodyPipelineListPipeline) SetPriority(v string) *QueryCoverPipelineListResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *QueryCoverPipelineListResponseBodyPipelineListPipeline) SetRole(v string) *QueryCoverPipelineListResponseBodyPipelineListPipeline {
	s.Role = &v
	return s
}

func (s *QueryCoverPipelineListResponseBodyPipelineListPipeline) SetName(v string) *QueryCoverPipelineListResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *QueryCoverPipelineListResponseBodyPipelineListPipeline) SetId(v string) *QueryCoverPipelineListResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetQueue(v string) *QueryCoverPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type QueryCoverPipelineListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryCoverPipelineListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverPipelineListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryCoverPipelineListResponseBodyNonExistIds) SetString_(v []*string) *QueryCoverPipelineListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryCoverPipelineListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryCoverPipelineListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryCoverPipelineListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverPipelineListResponse) GoString() string {
	return s.String()
}

func (s *QueryCoverPipelineListResponse) SetHeaders(v map[string]*string) *QueryCoverPipelineListResponse {
	s.Headers = v
	return s
}

func (s *QueryCoverPipelineListResponse) SetBody(v *QueryCoverPipelineListResponseBody) *QueryCoverPipelineListResponse {
	s.Body = v
	return s
}

type QueryFpShotJobListRequest struct {
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount       *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds                     *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	NextPageToken              *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize            *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	State                      *string `json:"State,omitempty" xml:"State,omitempty"`
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	EndOfJobCreatedTimeRange   *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	PrimaryKeyList             *string `json:"PrimaryKeyList,omitempty" xml:"PrimaryKeyList,omitempty"`
	PipelineId                 *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount               *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryFpShotJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListRequest) SetOwnerId(v int64) *QueryFpShotJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetResourceOwnerAccount(v string) *QueryFpShotJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetResourceOwnerId(v int64) *QueryFpShotJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetJobIds(v string) *QueryFpShotJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetNextPageToken(v string) *QueryFpShotJobListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetMaximumPageSize(v int64) *QueryFpShotJobListRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetState(v string) *QueryFpShotJobListRequest {
	s.State = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetStartOfJobCreatedTimeRange(v string) *QueryFpShotJobListRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetEndOfJobCreatedTimeRange(v string) *QueryFpShotJobListRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetPrimaryKeyList(v string) *QueryFpShotJobListRequest {
	s.PrimaryKeyList = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetPipelineId(v string) *QueryFpShotJobListRequest {
	s.PipelineId = &v
	return s
}

func (s *QueryFpShotJobListRequest) SetOwnerAccount(v string) *QueryFpShotJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryFpShotJobListResponseBody struct {
	RequestId           *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken       *string                                            `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	NonExistPrimaryKeys *QueryFpShotJobListResponseBodyNonExistPrimaryKeys `json:"NonExistPrimaryKeys,omitempty" xml:"NonExistPrimaryKeys,omitempty" type:"Struct"`
	FpShotJobList       *QueryFpShotJobListResponseBodyFpShotJobList       `json:"FpShotJobList,omitempty" xml:"FpShotJobList,omitempty" type:"Struct"`
	NonExistIds         *QueryFpShotJobListResponseBodyNonExistIds         `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryFpShotJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBody) SetRequestId(v string) *QueryFpShotJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFpShotJobListResponseBody) SetNextPageToken(v string) *QueryFpShotJobListResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *QueryFpShotJobListResponseBody) SetNonExistPrimaryKeys(v *QueryFpShotJobListResponseBodyNonExistPrimaryKeys) *QueryFpShotJobListResponseBody {
	s.NonExistPrimaryKeys = v
	return s
}

func (s *QueryFpShotJobListResponseBody) SetFpShotJobList(v *QueryFpShotJobListResponseBodyFpShotJobList) *QueryFpShotJobListResponseBody {
	s.FpShotJobList = v
	return s
}

func (s *QueryFpShotJobListResponseBody) SetNonExistIds(v *QueryFpShotJobListResponseBodyNonExistIds) *QueryFpShotJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryFpShotJobListResponseBodyNonExistPrimaryKeys struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryFpShotJobListResponseBodyNonExistPrimaryKeys) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyNonExistPrimaryKeys) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyNonExistPrimaryKeys) SetString_(v []*string) *QueryFpShotJobListResponseBodyNonExistPrimaryKeys {
	s.String_ = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobList struct {
	FpShotJob []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJob `json:"FpShotJob,omitempty" xml:"FpShotJob,omitempty" type:"Repeated"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobList) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobList) SetFpShotJob(v []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) *QueryFpShotJobListResponseBodyFpShotJobList {
	s.FpShotJob = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJob struct {
	FpShotResult  *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult `json:"FpShotResult,omitempty" xml:"FpShotResult,omitempty" type:"Struct"`
	CreationTime  *string                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime    *string                                                           `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State         *string                                                           `json:"State,omitempty" xml:"State,omitempty"`
	Message       *string                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	TxHash        *string                                                           `json:"TxHash,omitempty" xml:"TxHash,omitempty"`
	TransactionId *string                                                           `json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
	FpShotConfig  *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig `json:"FpShotConfig,omitempty" xml:"FpShotConfig,omitempty" type:"Struct"`
	FileId        *string                                                           `json:"FileId,omitempty" xml:"FileId,omitempty"`
	UserData      *string                                                           `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code          *string                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	InputFile     *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile    `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	PipelineId    *string                                                           `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Id            *string                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetFpShotResult(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.FpShotResult = v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetCreationTime(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.CreationTime = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetFinishTime(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.FinishTime = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetState(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.State = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetMessage(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.Message = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetTxHash(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.TxHash = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetTransactionId(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.TransactionId = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetFpShotConfig(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.FpShotConfig = v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetFileId(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.FileId = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetUserData(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.UserData = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetCode(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.Code = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetInputFile(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.InputFile = v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetPipelineId(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.PipelineId = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob) SetId(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJob {
	s.Id = &v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult struct {
	AudioFpShots *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShots `json:"AudioFpShots,omitempty" xml:"AudioFpShots,omitempty" type:"Struct"`
	FpShots      *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShots      `json:"FpShots,omitempty" xml:"FpShots,omitempty" type:"Struct"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult) SetAudioFpShots(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShots) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult {
	s.AudioFpShots = v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult) SetFpShots(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShots) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResult {
	s.FpShots = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShots struct {
	FpShot []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot `json:"FpShot,omitempty" xml:"FpShot,omitempty" type:"Repeated"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShots) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShots) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShots) SetFpShot(v []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShots {
	s.FpShot = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot struct {
	PrimaryKey   *string                                                                                         `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	FpShotSlices *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlices `json:"FpShotSlices,omitempty" xml:"FpShotSlices,omitempty" type:"Struct"`
	Similarity   *string                                                                                         `json:"Similarity,omitempty" xml:"Similarity,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot) SetPrimaryKey(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot {
	s.PrimaryKey = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot) SetFpShotSlices(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlices) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot {
	s.FpShotSlices = v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot) SetSimilarity(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShot {
	s.Similarity = &v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlices struct {
	FpShotSlice []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice `json:"FpShotSlice,omitempty" xml:"FpShotSlice,omitempty" type:"Repeated"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlices) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlices) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlices) SetFpShotSlice(v []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlices {
	s.FpShotSlice = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice struct {
	Duplication *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication `json:"Duplication,omitempty" xml:"Duplication,omitempty" type:"Struct"`
	Similarity  *string                                                                                                               `json:"Similarity,omitempty" xml:"Similarity,omitempty"`
	Input       *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput       `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice) SetDuplication(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice {
	s.Duplication = v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice) SetSimilarity(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice {
	s.Similarity = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice) SetInput(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSlice {
	s.Input = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication) SetStart(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication {
	s.Start = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication) SetDuration(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceDuplication {
	s.Duration = &v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput) SetStart(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput {
	s.Start = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput) SetDuration(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultAudioFpShotsFpShotFpShotSlicesFpShotSliceInput {
	s.Duration = &v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShots struct {
	FpShot []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot `json:"FpShot,omitempty" xml:"FpShot,omitempty" type:"Repeated"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShots) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShots) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShots) SetFpShot(v []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShots {
	s.FpShot = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot struct {
	PrimaryKey   *string                                                                                    `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	FpShotSlices *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlices `json:"FpShotSlices,omitempty" xml:"FpShotSlices,omitempty" type:"Struct"`
	Similarity   *string                                                                                    `json:"Similarity,omitempty" xml:"Similarity,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot) SetPrimaryKey(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot {
	s.PrimaryKey = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot) SetFpShotSlices(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlices) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot {
	s.FpShotSlices = v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot) SetSimilarity(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShot {
	s.Similarity = &v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlices struct {
	FpShotSlice []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice `json:"FpShotSlice,omitempty" xml:"FpShotSlice,omitempty" type:"Repeated"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlices) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlices) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlices) SetFpShotSlice(v []*QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlices {
	s.FpShotSlice = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice struct {
	Duplication *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication `json:"Duplication,omitempty" xml:"Duplication,omitempty" type:"Struct"`
	Similarity  *string                                                                                                          `json:"Similarity,omitempty" xml:"Similarity,omitempty"`
	Input       *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput       `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice) SetDuplication(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice {
	s.Duplication = v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice) SetSimilarity(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice {
	s.Similarity = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice) SetInput(v *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSlice {
	s.Input = v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication) SetStart(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication {
	s.Start = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication) SetDuration(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceDuplication {
	s.Duration = &v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput) SetStart(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput {
	s.Start = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput) SetDuration(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotResultFpShotsFpShotFpShotSlicesFpShotSliceInput {
	s.Duration = &v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig struct {
	PrimaryKey *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	SaveType   *string `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	Notary     *string `json:"Notary,omitempty" xml:"Notary,omitempty"`
	FpDBId     *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig) SetPrimaryKey(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig {
	s.PrimaryKey = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig) SetSaveType(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig {
	s.SaveType = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig) SetNotary(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig {
	s.Notary = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig) SetFpDBId(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobFpShotConfig {
	s.FpDBId = &v
	return s
}

type QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile) SetObject(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile {
	s.Object = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile) SetLocation(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile {
	s.Location = &v
	return s
}

func (s *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile) SetBucket(v string) *QueryFpShotJobListResponseBodyFpShotJobListFpShotJobInputFile {
	s.Bucket = &v
	return s
}

type QueryFpShotJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryFpShotJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryFpShotJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryFpShotJobListResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryFpShotJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryFpShotJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFpShotJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryFpShotJobListResponse) SetHeaders(v map[string]*string) *QueryFpShotJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryFpShotJobListResponse) SetBody(v *QueryFpShotJobListResponseBody) *QueryFpShotJobListResponse {
	s.Body = v
	return s
}

type DeleteMediaTagRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	Tag                  *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteMediaTagRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaTagRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaTagRequest) SetOwnerId(v int64) *DeleteMediaTagRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMediaTagRequest) SetResourceOwnerAccount(v string) *DeleteMediaTagRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMediaTagRequest) SetResourceOwnerId(v int64) *DeleteMediaTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteMediaTagRequest) SetMediaId(v string) *DeleteMediaTagRequest {
	s.MediaId = &v
	return s
}

func (s *DeleteMediaTagRequest) SetTag(v string) *DeleteMediaTagRequest {
	s.Tag = &v
	return s
}

func (s *DeleteMediaTagRequest) SetOwnerAccount(v string) *DeleteMediaTagRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteMediaTagResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaTagResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaTagResponseBody) SetRequestId(v string) *DeleteMediaTagResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaTagResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMediaTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMediaTagResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaTagResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaTagResponse) SetHeaders(v map[string]*string) *DeleteMediaTagResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaTagResponse) SetBody(v *DeleteMediaTagResponseBody) *DeleteMediaTagResponse {
	s.Body = v
	return s
}

type DeletePipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeletePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineRequest) GoString() string {
	return s.String()
}

func (s *DeletePipelineRequest) SetOwnerId(v int64) *DeletePipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *DeletePipelineRequest) SetResourceOwnerAccount(v string) *DeletePipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeletePipelineRequest) SetResourceOwnerId(v int64) *DeletePipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeletePipelineRequest) SetPipelineId(v string) *DeletePipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *DeletePipelineRequest) SetOwnerAccount(v string) *DeletePipelineRequest {
	s.OwnerAccount = &v
	return s
}

type DeletePipelineResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PipelineId *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s DeletePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponseBody) SetRequestId(v string) *DeletePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeletePipelineResponseBody) SetPipelineId(v string) *DeletePipelineResponseBody {
	s.PipelineId = &v
	return s
}

type DeletePipelineResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeletePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeletePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s DeletePipelineResponse) GoString() string {
	return s.String()
}

func (s *DeletePipelineResponse) SetHeaders(v map[string]*string) *DeletePipelineResponse {
	s.Headers = v
	return s
}

func (s *DeletePipelineResponse) SetBody(v *DeletePipelineResponseBody) *DeletePipelineResponse {
	s.Body = v
	return s
}

type UpdateSmarttagTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	Industry             *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	Scene                *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	AnalyseTypes         *string `json:"AnalyseTypes,omitempty" xml:"AnalyseTypes,omitempty"`
	FaceCategoryIds      *string `json:"FaceCategoryIds,omitempty" xml:"FaceCategoryIds,omitempty"`
	IsDefault            *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
}

func (s UpdateSmarttagTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmarttagTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateSmarttagTemplateRequest) SetOwnerId(v int64) *UpdateSmarttagTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetResourceOwnerAccount(v string) *UpdateSmarttagTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetResourceOwnerId(v int64) *UpdateSmarttagTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetOwnerAccount(v string) *UpdateSmarttagTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetTemplateId(v string) *UpdateSmarttagTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetTemplateName(v string) *UpdateSmarttagTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetIndustry(v string) *UpdateSmarttagTemplateRequest {
	s.Industry = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetScene(v string) *UpdateSmarttagTemplateRequest {
	s.Scene = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetAnalyseTypes(v string) *UpdateSmarttagTemplateRequest {
	s.AnalyseTypes = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetFaceCategoryIds(v string) *UpdateSmarttagTemplateRequest {
	s.FaceCategoryIds = &v
	return s
}

func (s *UpdateSmarttagTemplateRequest) SetIsDefault(v bool) *UpdateSmarttagTemplateRequest {
	s.IsDefault = &v
	return s
}

type UpdateSmarttagTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateSmarttagTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmarttagTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateSmarttagTemplateResponseBody) SetRequestId(v string) *UpdateSmarttagTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateSmarttagTemplateResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateSmarttagTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateSmarttagTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateSmarttagTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateSmarttagTemplateResponse) SetHeaders(v map[string]*string) *UpdateSmarttagTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateSmarttagTemplateResponse) SetBody(v *UpdateSmarttagTemplateResponseBody) *UpdateSmarttagTemplateResponse {
	s.Body = v
	return s
}

type UpdateAsrPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateAsrPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAsrPipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdateAsrPipelineRequest) SetOwnerId(v int64) *UpdateAsrPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateAsrPipelineRequest) SetResourceOwnerAccount(v string) *UpdateAsrPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateAsrPipelineRequest) SetResourceOwnerId(v int64) *UpdateAsrPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateAsrPipelineRequest) SetPipelineId(v string) *UpdateAsrPipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdateAsrPipelineRequest) SetName(v string) *UpdateAsrPipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdateAsrPipelineRequest) SetState(v string) *UpdateAsrPipelineRequest {
	s.State = &v
	return s
}

func (s *UpdateAsrPipelineRequest) SetPriority(v int32) *UpdateAsrPipelineRequest {
	s.Priority = &v
	return s
}

func (s *UpdateAsrPipelineRequest) SetNotifyConfig(v string) *UpdateAsrPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *UpdateAsrPipelineRequest) SetOwnerAccount(v string) *UpdateAsrPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateAsrPipelineResponseBody struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *UpdateAsrPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s UpdateAsrPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAsrPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAsrPipelineResponseBody) SetRequestId(v string) *UpdateAsrPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAsrPipelineResponseBody) SetPipeline(v *UpdateAsrPipelineResponseBodyPipeline) *UpdateAsrPipelineResponseBody {
	s.Pipeline = v
	return s
}

type UpdateAsrPipelineResponseBodyPipeline struct {
	State        *string                                            `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *UpdateAsrPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                             `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                            `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateAsrPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s UpdateAsrPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *UpdateAsrPipelineResponseBodyPipeline) SetState(v string) *UpdateAsrPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *UpdateAsrPipelineResponseBodyPipeline) SetNotifyConfig(v *UpdateAsrPipelineResponseBodyPipelineNotifyConfig) *UpdateAsrPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *UpdateAsrPipelineResponseBodyPipeline) SetPriority(v int32) *UpdateAsrPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *UpdateAsrPipelineResponseBodyPipeline) SetName(v string) *UpdateAsrPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *UpdateAsrPipelineResponseBodyPipeline) SetId(v string) *UpdateAsrPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type UpdateAsrPipelineResponseBodyPipelineNotifyConfig struct {
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s UpdateAsrPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateAsrPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *UpdateAsrPipelineResponseBodyPipelineNotifyConfig) SetQueueName(v string) *UpdateAsrPipelineResponseBodyPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *UpdateAsrPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *UpdateAsrPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type UpdateAsrPipelineResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateAsrPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAsrPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAsrPipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdateAsrPipelineResponse) SetHeaders(v map[string]*string) *UpdateAsrPipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdateAsrPipelineResponse) SetBody(v *UpdateAsrPipelineResponseBody) *UpdateAsrPipelineResponse {
	s.Body = v
	return s
}

type QueryVideoQualityJobRequest struct {
	UserId *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	JobId  *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryVideoQualityJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoQualityJobRequest) GoString() string {
	return s.String()
}

func (s *QueryVideoQualityJobRequest) SetUserId(v int64) *QueryVideoQualityJobRequest {
	s.UserId = &v
	return s
}

func (s *QueryVideoQualityJobRequest) SetJobId(v string) *QueryVideoQualityJobRequest {
	s.JobId = &v
	return s
}

type QueryVideoQualityJobResponseBody struct {
	Message   *string                              `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Job       *QueryVideoQualityJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	Code      *string                              `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s QueryVideoQualityJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoQualityJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryVideoQualityJobResponseBody) SetMessage(v string) *QueryVideoQualityJobResponseBody {
	s.Message = &v
	return s
}

func (s *QueryVideoQualityJobResponseBody) SetRequestId(v string) *QueryVideoQualityJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryVideoQualityJobResponseBody) SetJob(v *QueryVideoQualityJobResponseBodyJob) *QueryVideoQualityJobResponseBody {
	s.Job = v
	return s
}

func (s *QueryVideoQualityJobResponseBody) SetCode(v string) *QueryVideoQualityJobResponseBody {
	s.Code = &v
	return s
}

type QueryVideoQualityJobResponseBodyJob struct {
	Status              *string `json:"Status,omitempty" xml:"Status,omitempty"`
	JobId               *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserId              *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	VideoQualityResults *string `json:"VideoQualityResults,omitempty" xml:"VideoQualityResults,omitempty"`
	Message             *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Output              *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s QueryVideoQualityJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoQualityJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *QueryVideoQualityJobResponseBodyJob) SetStatus(v string) *QueryVideoQualityJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *QueryVideoQualityJobResponseBodyJob) SetJobId(v string) *QueryVideoQualityJobResponseBodyJob {
	s.JobId = &v
	return s
}

func (s *QueryVideoQualityJobResponseBodyJob) SetUserId(v int64) *QueryVideoQualityJobResponseBodyJob {
	s.UserId = &v
	return s
}

func (s *QueryVideoQualityJobResponseBodyJob) SetVideoQualityResults(v string) *QueryVideoQualityJobResponseBodyJob {
	s.VideoQualityResults = &v
	return s
}

func (s *QueryVideoQualityJobResponseBodyJob) SetMessage(v string) *QueryVideoQualityJobResponseBodyJob {
	s.Message = &v
	return s
}

func (s *QueryVideoQualityJobResponseBodyJob) SetOutput(v string) *QueryVideoQualityJobResponseBodyJob {
	s.Output = &v
	return s
}

type QueryVideoQualityJobResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryVideoQualityJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryVideoQualityJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoQualityJobResponse) GoString() string {
	return s.String()
}

func (s *QueryVideoQualityJobResponse) SetHeaders(v map[string]*string) *QueryVideoQualityJobResponse {
	s.Headers = v
	return s
}

func (s *QueryVideoQualityJobResponse) SetBody(v *QueryVideoQualityJobResponseBody) *QueryVideoQualityJobResponse {
	s.Body = v
	return s
}

type DecryptKeyRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	CiphertextBlob       *string `json:"CiphertextBlob,omitempty" xml:"CiphertextBlob,omitempty"`
	Rand                 *string `json:"Rand,omitempty" xml:"Rand,omitempty"`
}

func (s DecryptKeyRequest) String() string {
	return tea.Prettify(s)
}

func (s DecryptKeyRequest) GoString() string {
	return s.String()
}

func (s *DecryptKeyRequest) SetOwnerId(v string) *DecryptKeyRequest {
	s.OwnerId = &v
	return s
}

func (s *DecryptKeyRequest) SetResourceOwnerId(v string) *DecryptKeyRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DecryptKeyRequest) SetResourceOwnerAccount(v string) *DecryptKeyRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DecryptKeyRequest) SetOwnerAccount(v string) *DecryptKeyRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DecryptKeyRequest) SetCiphertextBlob(v string) *DecryptKeyRequest {
	s.CiphertextBlob = &v
	return s
}

func (s *DecryptKeyRequest) SetRand(v string) *DecryptKeyRequest {
	s.Rand = &v
	return s
}

type DecryptKeyResponseBody struct {
	Rand      *string `json:"Rand,omitempty" xml:"Rand,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Plaintext *string `json:"Plaintext,omitempty" xml:"Plaintext,omitempty"`
}

func (s DecryptKeyResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DecryptKeyResponseBody) GoString() string {
	return s.String()
}

func (s *DecryptKeyResponseBody) SetRand(v string) *DecryptKeyResponseBody {
	s.Rand = &v
	return s
}

func (s *DecryptKeyResponseBody) SetRequestId(v string) *DecryptKeyResponseBody {
	s.RequestId = &v
	return s
}

func (s *DecryptKeyResponseBody) SetPlaintext(v string) *DecryptKeyResponseBody {
	s.Plaintext = &v
	return s
}

type DecryptKeyResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DecryptKeyResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DecryptKeyResponse) String() string {
	return tea.Prettify(s)
}

func (s DecryptKeyResponse) GoString() string {
	return s.String()
}

func (s *DecryptKeyResponse) SetHeaders(v map[string]*string) *DecryptKeyResponse {
	s.Headers = v
	return s
}

func (s *DecryptKeyResponse) SetBody(v *DecryptKeyResponseBody) *DecryptKeyResponse {
	s.Body = v
	return s
}

type DeleteTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteTemplateRequest) SetOwnerId(v int64) *DeleteTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteTemplateRequest) SetResourceOwnerAccount(v string) *DeleteTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteTemplateRequest) SetResourceOwnerId(v int64) *DeleteTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteTemplateRequest) SetTemplateId(v string) *DeleteTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *DeleteTemplateRequest) SetOwnerAccount(v string) *DeleteTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteTemplateResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponseBody) SetRequestId(v string) *DeleteTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteTemplateResponseBody) SetTemplateId(v string) *DeleteTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type DeleteTemplateResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteTemplateResponse) SetHeaders(v map[string]*string) *DeleteTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteTemplateResponse) SetBody(v *DeleteTemplateResponseBody) *DeleteTemplateResponse {
	s.Body = v
	return s
}

type QueryTemplateListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateIds          *string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListRequest) GoString() string {
	return s.String()
}

func (s *QueryTemplateListRequest) SetOwnerId(v int64) *QueryTemplateListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryTemplateListRequest) SetResourceOwnerAccount(v string) *QueryTemplateListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryTemplateListRequest) SetResourceOwnerId(v int64) *QueryTemplateListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTemplateListRequest) SetTemplateIds(v string) *QueryTemplateListRequest {
	s.TemplateIds = &v
	return s
}

func (s *QueryTemplateListRequest) SetOwnerAccount(v string) *QueryTemplateListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryTemplateListResponseBody struct {
	NonExistTids *QueryTemplateListResponseBodyNonExistTids `json:"NonExistTids,omitempty" xml:"NonExistTids,omitempty" type:"Struct"`
	TemplateList *QueryTemplateListResponseBodyTemplateList `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBody) SetNonExistTids(v *QueryTemplateListResponseBodyNonExistTids) *QueryTemplateListResponseBody {
	s.NonExistTids = v
	return s
}

func (s *QueryTemplateListResponseBody) SetTemplateList(v *QueryTemplateListResponseBodyTemplateList) *QueryTemplateListResponseBody {
	s.TemplateList = v
	return s
}

func (s *QueryTemplateListResponseBody) SetRequestId(v string) *QueryTemplateListResponseBody {
	s.RequestId = &v
	return s
}

type QueryTemplateListResponseBodyNonExistTids struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryTemplateListResponseBodyNonExistTids) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyNonExistTids) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyNonExistTids) SetString_(v []*string) *QueryTemplateListResponseBodyNonExistTids {
	s.String_ = v
	return s
}

type QueryTemplateListResponseBodyTemplateList struct {
	Template []*QueryTemplateListResponseBodyTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s QueryTemplateListResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateList) SetTemplate(v []*QueryTemplateListResponseBodyTemplateListTemplate) *QueryTemplateListResponseBodyTemplateList {
	s.Template = v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplate struct {
	Video       *QueryTemplateListResponseBodyTemplateListTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig *QueryTemplateListResponseBodyTemplateListTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	State       *string                                                       `json:"State,omitempty" xml:"State,omitempty"`
	MuxConfig   *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	Audio       *QueryTemplateListResponseBodyTemplateListTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Id          *string                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
	Container   *QueryTemplateListResponseBodyTemplateListTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetVideo(v *QueryTemplateListResponseBodyTemplateListTemplateVideo) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Video = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetTransConfig(v *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.TransConfig = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetState(v string) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.State = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetMuxConfig(v *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.MuxConfig = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetName(v string) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetAudio(v *QueryTemplateListResponseBodyTemplateListTemplateAudio) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Audio = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetId(v string) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Id = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplate) SetContainer(v *QueryTemplateListResponseBodyTemplateListTemplateContainer) *QueryTemplateListResponseBodyTemplateListTemplate {
	s.Container = v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateVideo struct {
	Bufsize       *string                                                           `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	LongShortMode *string                                                           `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	Degrain       *string                                                           `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd    *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt        *string                                                           `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad           *string                                                           `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec         *string                                                           `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height        *string                                                           `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale        *string                                                           `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop          *string                                                           `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate       *string                                                           `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate       *string                                                           `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps        *string                                                           `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile       *string                                                           `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf           *string                                                           `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Remove        *string                                                           `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Gop           *string                                                           `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width         *string                                                           `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps           *string                                                           `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset        *string                                                           `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode      *string                                                           `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	ResoPriority  *string                                                           `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateVideo) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetBufsize(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetLongShortMode(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.LongShortMode = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetDegrain(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetBitrateBnd(v *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetPixFmt(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetPad(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Pad = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetCodec(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Codec = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetHeight(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Height = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetQscale(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetCrop(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Crop = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetBitrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetMaxrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetMaxFps(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.MaxFps = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetProfile(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Profile = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetCrf(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Crf = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetRemove(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Remove = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetGop(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Gop = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetWidth(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Width = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetFps(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Fps = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetPreset(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.Preset = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetScanMode(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideo) SetResoPriority(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideo {
	s.ResoPriority = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) SetMax(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd) SetMin(v string) *QueryTemplateListResponseBodyTemplateListTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckAudioBitrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetTransMode(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.TransMode = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckReso(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetAdjDarMethod(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckVideoBitrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckResoFail(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *QueryTemplateListResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateMuxConfig struct {
	Webp    *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
	Gif     *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) SetWebp(v *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig {
	s.Webp = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) SetGif(v *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig) SetSegment(v *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfig {
	s.Segment = v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp) SetLoop(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigWebp {
	s.Loop = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) SetFinalDelay(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) SetDitherMode(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) SetLoop(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif) SetIsCustomPalette(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment) SetDuration(v string) *QueryTemplateListResponseBodyTemplateListTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateAudio struct {
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Remove     *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateAudio) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetProfile(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Profile = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetRemove(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Remove = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetCodec(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Codec = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetSamplerate(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetQscale(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetChannels(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Channels = &v
	return s
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateAudio) SetBitrate(v string) *QueryTemplateListResponseBodyTemplateListTemplateAudio {
	s.Bitrate = &v
	return s
}

type QueryTemplateListResponseBodyTemplateListTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryTemplateListResponseBodyTemplateListTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponseBodyTemplateListTemplateContainer) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponseBodyTemplateListTemplateContainer) SetFormat(v string) *QueryTemplateListResponseBodyTemplateListTemplateContainer {
	s.Format = &v
	return s
}

type QueryTemplateListResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTemplateListResponse) GoString() string {
	return s.String()
}

func (s *QueryTemplateListResponse) SetHeaders(v map[string]*string) *QueryTemplateListResponse {
	s.Headers = v
	return s
}

func (s *QueryTemplateListResponse) SetBody(v *QueryTemplateListResponseBody) *QueryTemplateListResponse {
	s.Body = v
	return s
}

type ReportFacerecogJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Facerecog            *string `json:"Facerecog,omitempty" xml:"Facerecog,omitempty"`
	Details              *string `json:"Details,omitempty" xml:"Details,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportFacerecogJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportFacerecogJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportFacerecogJobResultRequest) SetOwnerId(v int64) *ReportFacerecogJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportFacerecogJobResultRequest) SetResourceOwnerAccount(v string) *ReportFacerecogJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportFacerecogJobResultRequest) SetResourceOwnerId(v int64) *ReportFacerecogJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportFacerecogJobResultRequest) SetJobId(v string) *ReportFacerecogJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportFacerecogJobResultRequest) SetFacerecog(v string) *ReportFacerecogJobResultRequest {
	s.Facerecog = &v
	return s
}

func (s *ReportFacerecogJobResultRequest) SetDetails(v string) *ReportFacerecogJobResultRequest {
	s.Details = &v
	return s
}

func (s *ReportFacerecogJobResultRequest) SetOwnerAccount(v string) *ReportFacerecogJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportFacerecogJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportFacerecogJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportFacerecogJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportFacerecogJobResultResponseBody) SetRequestId(v string) *ReportFacerecogJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportFacerecogJobResultResponseBody) SetJobId(v string) *ReportFacerecogJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportFacerecogJobResultResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportFacerecogJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportFacerecogJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportFacerecogJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportFacerecogJobResultResponse) SetHeaders(v map[string]*string) *ReportFacerecogJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportFacerecogJobResultResponse) SetBody(v *ReportFacerecogJobResultResponseBody) *ReportFacerecogJobResultResponse {
	s.Body = v
	return s
}

type QueryMCTemplateListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateIds          *string `json:"TemplateIds,omitempty" xml:"TemplateIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMCTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMCTemplateListRequest) GoString() string {
	return s.String()
}

func (s *QueryMCTemplateListRequest) SetOwnerId(v int64) *QueryMCTemplateListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMCTemplateListRequest) SetResourceOwnerAccount(v string) *QueryMCTemplateListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMCTemplateListRequest) SetResourceOwnerId(v int64) *QueryMCTemplateListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMCTemplateListRequest) SetTemplateIds(v string) *QueryMCTemplateListRequest {
	s.TemplateIds = &v
	return s
}

func (s *QueryMCTemplateListRequest) SetOwnerAccount(v string) *QueryMCTemplateListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMCTemplateListResponseBody struct {
	NonExistTids *QueryMCTemplateListResponseBodyNonExistTids `json:"NonExistTids,omitempty" xml:"NonExistTids,omitempty" type:"Struct"`
	TemplateList *QueryMCTemplateListResponseBodyTemplateList `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
	RequestId    *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMCTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMCTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMCTemplateListResponseBody) SetNonExistTids(v *QueryMCTemplateListResponseBodyNonExistTids) *QueryMCTemplateListResponseBody {
	s.NonExistTids = v
	return s
}

func (s *QueryMCTemplateListResponseBody) SetTemplateList(v *QueryMCTemplateListResponseBodyTemplateList) *QueryMCTemplateListResponseBody {
	s.TemplateList = v
	return s
}

func (s *QueryMCTemplateListResponseBody) SetRequestId(v string) *QueryMCTemplateListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMCTemplateListResponseBodyNonExistTids struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMCTemplateListResponseBodyNonExistTids) String() string {
	return tea.Prettify(s)
}

func (s QueryMCTemplateListResponseBodyNonExistTids) GoString() string {
	return s.String()
}

func (s *QueryMCTemplateListResponseBodyNonExistTids) SetString_(v []*string) *QueryMCTemplateListResponseBodyNonExistTids {
	s.String_ = v
	return s
}

type QueryMCTemplateListResponseBodyTemplateList struct {
	Template []*QueryMCTemplateListResponseBodyTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s QueryMCTemplateListResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s QueryMCTemplateListResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *QueryMCTemplateListResponseBodyTemplateList) SetTemplate(v []*QueryMCTemplateListResponseBodyTemplateListTemplate) *QueryMCTemplateListResponseBodyTemplateList {
	s.Template = v
	return s
}

type QueryMCTemplateListResponseBodyTemplateListTemplate struct {
	Logo       *string `json:"Logo,omitempty" xml:"Logo,omitempty"`
	Abuse      *string `json:"Abuse,omitempty" xml:"Abuse,omitempty"`
	State      *string `json:"State,omitempty" xml:"State,omitempty"`
	Terrorism  *string `json:"Terrorism,omitempty" xml:"Terrorism,omitempty"`
	Politics   *string `json:"Politics,omitempty" xml:"Politics,omitempty"`
	Qrcode     *string `json:"Qrcode,omitempty" xml:"Qrcode,omitempty"`
	Live       *string `json:"Live,omitempty" xml:"Live,omitempty"`
	Spam       *string `json:"Spam,omitempty" xml:"Spam,omitempty"`
	Contraband *string `json:"Contraband,omitempty" xml:"Contraband,omitempty"`
	Ad         *string `json:"Ad,omitempty" xml:"Ad,omitempty"`
	Porn       *string `json:"Porn,omitempty" xml:"Porn,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s QueryMCTemplateListResponseBodyTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryMCTemplateListResponseBodyTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetLogo(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Logo = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetAbuse(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Abuse = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetState(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.State = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetTerrorism(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Terrorism = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetPolitics(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Politics = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetQrcode(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Qrcode = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetLive(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Live = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetSpam(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Spam = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetContraband(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Contraband = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetAd(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Ad = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetPorn(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Porn = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetName(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *QueryMCTemplateListResponseBodyTemplateListTemplate) SetTemplateId(v string) *QueryMCTemplateListResponseBodyTemplateListTemplate {
	s.TemplateId = &v
	return s
}

type QueryMCTemplateListResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMCTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMCTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMCTemplateListResponse) GoString() string {
	return s.String()
}

func (s *QueryMCTemplateListResponse) SetHeaders(v map[string]*string) *QueryMCTemplateListResponse {
	s.Headers = v
	return s
}

func (s *QueryMCTemplateListResponse) SetBody(v *QueryMCTemplateListResponseBody) *QueryMCTemplateListResponse {
	s.Body = v
	return s
}

type UpdateMediaRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	Title                *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	CoverURL             *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	CateId               *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Tags                 *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaRequest) SetOwnerId(v int64) *UpdateMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaRequest) SetResourceOwnerAccount(v string) *UpdateMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaRequest) SetResourceOwnerId(v int64) *UpdateMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaRequest) SetMediaId(v string) *UpdateMediaRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaRequest) SetTitle(v string) *UpdateMediaRequest {
	s.Title = &v
	return s
}

func (s *UpdateMediaRequest) SetDescription(v string) *UpdateMediaRequest {
	s.Description = &v
	return s
}

func (s *UpdateMediaRequest) SetCoverURL(v string) *UpdateMediaRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaRequest) SetCateId(v int64) *UpdateMediaRequest {
	s.CateId = &v
	return s
}

func (s *UpdateMediaRequest) SetTags(v string) *UpdateMediaRequest {
	s.Tags = &v
	return s
}

func (s *UpdateMediaRequest) SetOwnerAccount(v string) *UpdateMediaRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateMediaResponseBody struct {
	RequestId *string                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Media     *UpdateMediaResponseBodyMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Struct"`
}

func (s UpdateMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBody) SetRequestId(v string) *UpdateMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMediaResponseBody) SetMedia(v *UpdateMediaResponseBodyMedia) *UpdateMediaResponseBody {
	s.Media = v
	return s
}

type UpdateMediaResponseBodyMedia struct {
	CreationTime *string                                `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CateId       *int64                                 `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Height       *string                                `json:"Height,omitempty" xml:"Height,omitempty"`
	CensorState  *string                                `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	Tags         *UpdateMediaResponseBodyMediaTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Bitrate      *string                                `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	MediaId      *string                                `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	File         *UpdateMediaResponseBodyMediaFile      `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	PublishState *string                                `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	Description  *string                                `json:"Description,omitempty" xml:"Description,omitempty"`
	Width        *string                                `json:"Width,omitempty" xml:"Width,omitempty"`
	Size         *string                                `json:"Size,omitempty" xml:"Size,omitempty"`
	CoverURL     *string                                `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	RunIdList    *UpdateMediaResponseBodyMediaRunIdList `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Duration     *string                                `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps          *string                                `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Title        *string                                `json:"Title,omitempty" xml:"Title,omitempty"`
	Format       *string                                `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s UpdateMediaResponseBodyMedia) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBodyMedia) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBodyMedia) SetCreationTime(v string) *UpdateMediaResponseBodyMedia {
	s.CreationTime = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetCateId(v int64) *UpdateMediaResponseBodyMedia {
	s.CateId = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetHeight(v string) *UpdateMediaResponseBodyMedia {
	s.Height = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetCensorState(v string) *UpdateMediaResponseBodyMedia {
	s.CensorState = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetTags(v *UpdateMediaResponseBodyMediaTags) *UpdateMediaResponseBodyMedia {
	s.Tags = v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetBitrate(v string) *UpdateMediaResponseBodyMedia {
	s.Bitrate = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetMediaId(v string) *UpdateMediaResponseBodyMedia {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetFile(v *UpdateMediaResponseBodyMediaFile) *UpdateMediaResponseBodyMedia {
	s.File = v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetPublishState(v string) *UpdateMediaResponseBodyMedia {
	s.PublishState = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetDescription(v string) *UpdateMediaResponseBodyMedia {
	s.Description = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetWidth(v string) *UpdateMediaResponseBodyMedia {
	s.Width = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetSize(v string) *UpdateMediaResponseBodyMedia {
	s.Size = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetCoverURL(v string) *UpdateMediaResponseBodyMedia {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetRunIdList(v *UpdateMediaResponseBodyMediaRunIdList) *UpdateMediaResponseBodyMedia {
	s.RunIdList = v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetDuration(v string) *UpdateMediaResponseBodyMedia {
	s.Duration = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetFps(v string) *UpdateMediaResponseBodyMedia {
	s.Fps = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetTitle(v string) *UpdateMediaResponseBodyMedia {
	s.Title = &v
	return s
}

func (s *UpdateMediaResponseBodyMedia) SetFormat(v string) *UpdateMediaResponseBodyMedia {
	s.Format = &v
	return s
}

type UpdateMediaResponseBodyMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s UpdateMediaResponseBodyMediaTags) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBodyMediaTags) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBodyMediaTags) SetTag(v []*string) *UpdateMediaResponseBodyMediaTags {
	s.Tag = v
	return s
}

type UpdateMediaResponseBodyMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s UpdateMediaResponseBodyMediaFile) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBodyMediaFile) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBodyMediaFile) SetState(v string) *UpdateMediaResponseBodyMediaFile {
	s.State = &v
	return s
}

func (s *UpdateMediaResponseBodyMediaFile) SetURL(v string) *UpdateMediaResponseBodyMediaFile {
	s.URL = &v
	return s
}

type UpdateMediaResponseBodyMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s UpdateMediaResponseBodyMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponseBodyMediaRunIdList) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponseBodyMediaRunIdList) SetRunId(v []*string) *UpdateMediaResponseBodyMediaRunIdList {
	s.RunId = v
	return s
}

type UpdateMediaResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaResponse) SetHeaders(v map[string]*string) *UpdateMediaResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaResponse) SetBody(v *UpdateMediaResponseBody) *UpdateMediaResponse {
	s.Body = v
	return s
}

type ListCensorPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListCensorPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCensorPipelineRequest) GoString() string {
	return s.String()
}

func (s *ListCensorPipelineRequest) SetOwnerId(v int64) *ListCensorPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *ListCensorPipelineRequest) SetResourceOwnerAccount(v string) *ListCensorPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListCensorPipelineRequest) SetResourceOwnerId(v int64) *ListCensorPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListCensorPipelineRequest) SetPageSize(v int64) *ListCensorPipelineRequest {
	s.PageSize = &v
	return s
}

func (s *ListCensorPipelineRequest) SetPageNumber(v int64) *ListCensorPipelineRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCensorPipelineRequest) SetState(v string) *ListCensorPipelineRequest {
	s.State = &v
	return s
}

func (s *ListCensorPipelineRequest) SetOwnerAccount(v string) *ListCensorPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type ListCensorPipelineResponseBody struct {
	TotalCount   *int64                                      `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize     *int64                                      `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int64                                      `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PipelineList *ListCensorPipelineResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
}

func (s ListCensorPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCensorPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *ListCensorPipelineResponseBody) SetTotalCount(v int64) *ListCensorPipelineResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListCensorPipelineResponseBody) SetPageSize(v int64) *ListCensorPipelineResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListCensorPipelineResponseBody) SetRequestId(v string) *ListCensorPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCensorPipelineResponseBody) SetPageNumber(v int64) *ListCensorPipelineResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListCensorPipelineResponseBody) SetPipelineList(v *ListCensorPipelineResponseBodyPipelineList) *ListCensorPipelineResponseBody {
	s.PipelineList = v
	return s
}

type ListCensorPipelineResponseBodyPipelineList struct {
	Pipeline []*ListCensorPipelineResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s ListCensorPipelineResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s ListCensorPipelineResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *ListCensorPipelineResponseBodyPipelineList) SetPipeline(v []*ListCensorPipelineResponseBodyPipelineListPipeline) *ListCensorPipelineResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type ListCensorPipelineResponseBodyPipelineListPipeline struct {
	State        *string                                                         `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                         `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListCensorPipelineResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s ListCensorPipelineResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *ListCensorPipelineResponseBodyPipelineListPipeline) SetState(v string) *ListCensorPipelineResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *ListCensorPipelineResponseBodyPipelineListPipeline) SetNotifyConfig(v *ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig) *ListCensorPipelineResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *ListCensorPipelineResponseBodyPipelineListPipeline) SetPriority(v string) *ListCensorPipelineResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *ListCensorPipelineResponseBodyPipelineListPipeline) SetName(v string) *ListCensorPipelineResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *ListCensorPipelineResponseBodyPipelineListPipeline) SetId(v string) *ListCensorPipelineResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig) SetQueue(v string) *ListCensorPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type ListCensorPipelineResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCensorPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCensorPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCensorPipelineResponse) GoString() string {
	return s.String()
}

func (s *ListCensorPipelineResponse) SetHeaders(v map[string]*string) *ListCensorPipelineResponse {
	s.Headers = v
	return s
}

func (s *ListCensorPipelineResponse) SetBody(v *ListCensorPipelineResponseBody) *ListCensorPipelineResponse {
	s.Body = v
	return s
}

type QuerySubtitleJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QuerySubtitleJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySubtitleJobListRequest) GoString() string {
	return s.String()
}

func (s *QuerySubtitleJobListRequest) SetOwnerId(v int64) *QuerySubtitleJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySubtitleJobListRequest) SetResourceOwnerAccount(v string) *QuerySubtitleJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySubtitleJobListRequest) SetResourceOwnerId(v int64) *QuerySubtitleJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySubtitleJobListRequest) SetJobIds(v string) *QuerySubtitleJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QuerySubtitleJobListRequest) SetOwnerAccount(v string) *QuerySubtitleJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QuerySubtitleJobListResponseBody struct {
	NonExistJobIds *QuerySubtitleJobListResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList        *QuerySubtitleJobListResponseBodyJobList        `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
}

func (s QuerySubtitleJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySubtitleJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySubtitleJobListResponseBody) SetNonExistJobIds(v *QuerySubtitleJobListResponseBodyNonExistJobIds) *QuerySubtitleJobListResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *QuerySubtitleJobListResponseBody) SetRequestId(v string) *QuerySubtitleJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySubtitleJobListResponseBody) SetJobList(v *QuerySubtitleJobListResponseBodyJobList) *QuerySubtitleJobListResponseBody {
	s.JobList = v
	return s
}

type QuerySubtitleJobListResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QuerySubtitleJobListResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s QuerySubtitleJobListResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *QuerySubtitleJobListResponseBodyNonExistJobIds) SetString_(v []*string) *QuerySubtitleJobListResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type QuerySubtitleJobListResponseBodyJobList struct {
	Job []*QuerySubtitleJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QuerySubtitleJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QuerySubtitleJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QuerySubtitleJobListResponseBodyJobList) SetJob(v []*QuerySubtitleJobListResponseBodyJobListJob) *QuerySubtitleJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QuerySubtitleJobListResponseBodyJobListJob struct {
	OutputConfig     *string                                                     `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	State            *string                                                     `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                     `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData         *string                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
	InputConfig      *string                                                     `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	MNSMessageResult *QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
}

func (s QuerySubtitleJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QuerySubtitleJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QuerySubtitleJobListResponseBodyJobListJob) SetOutputConfig(v string) *QuerySubtitleJobListResponseBodyJobListJob {
	s.OutputConfig = &v
	return s
}

func (s *QuerySubtitleJobListResponseBodyJobListJob) SetState(v string) *QuerySubtitleJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QuerySubtitleJobListResponseBodyJobListJob) SetJobId(v string) *QuerySubtitleJobListResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *QuerySubtitleJobListResponseBodyJobListJob) SetUserData(v string) *QuerySubtitleJobListResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *QuerySubtitleJobListResponseBodyJobListJob) SetInputConfig(v string) *QuerySubtitleJobListResponseBodyJobListJob {
	s.InputConfig = &v
	return s
}

func (s *QuerySubtitleJobListResponseBodyJobListJob) SetMNSMessageResult(v *QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult) *QuerySubtitleJobListResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

type QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *QuerySubtitleJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QuerySubtitleJobListResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySubtitleJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySubtitleJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySubtitleJobListResponse) GoString() string {
	return s.String()
}

func (s *QuerySubtitleJobListResponse) SetHeaders(v map[string]*string) *QuerySubtitleJobListResponse {
	s.Headers = v
	return s
}

func (s *QuerySubtitleJobListResponse) SetBody(v *QuerySubtitleJobListResponseBody) *QuerySubtitleJobListResponse {
	s.Body = v
	return s
}

type QueryVideoGifJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryVideoGifJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListRequest) SetOwnerId(v int64) *QueryVideoGifJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryVideoGifJobListRequest) SetResourceOwnerAccount(v string) *QueryVideoGifJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryVideoGifJobListRequest) SetResourceOwnerId(v int64) *QueryVideoGifJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryVideoGifJobListRequest) SetJobIds(v string) *QueryVideoGifJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryVideoGifJobListRequest) SetOwnerAccount(v string) *QueryVideoGifJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryVideoGifJobListResponseBody struct {
	RequestId   *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList     *QueryVideoGifJobListResponseBodyJobList     `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NonExistIds *QueryVideoGifJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryVideoGifJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListResponseBody) SetRequestId(v string) *QueryVideoGifJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryVideoGifJobListResponseBody) SetJobList(v *QueryVideoGifJobListResponseBodyJobList) *QueryVideoGifJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryVideoGifJobListResponseBody) SetNonExistIds(v *QueryVideoGifJobListResponseBodyNonExistIds) *QueryVideoGifJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryVideoGifJobListResponseBodyJobList struct {
	Job []*QueryVideoGifJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryVideoGifJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListResponseBodyJobList) SetJob(v []*QueryVideoGifJobListResponseBodyJobListJob) *QueryVideoGifJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryVideoGifJobListResponseBodyJobListJob struct {
	CreationTime   *string                                                   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State          *string                                                   `json:"State,omitempty" xml:"State,omitempty"`
	UserData       *string                                                   `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code           *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	VideoGifResult *QueryVideoGifJobListResponseBodyJobListJobVideoGifResult `json:"VideoGifResult,omitempty" xml:"VideoGifResult,omitempty" type:"Struct"`
	Message        *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId     *string                                                   `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input          *QueryVideoGifJobListResponseBodyJobListJobInput          `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id             *string                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryVideoGifJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryVideoGifJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetState(v string) *QueryVideoGifJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetUserData(v string) *QueryVideoGifJobListResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetCode(v string) *QueryVideoGifJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetVideoGifResult(v *QueryVideoGifJobListResponseBodyJobListJobVideoGifResult) *QueryVideoGifJobListResponseBodyJobListJob {
	s.VideoGifResult = v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetMessage(v string) *QueryVideoGifJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryVideoGifJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetInput(v *QueryVideoGifJobListResponseBodyJobListJobInput) *QueryVideoGifJobListResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJob) SetId(v string) *QueryVideoGifJobListResponseBodyJobListJob {
	s.Id = &v
	return s
}

type QueryVideoGifJobListResponseBodyJobListJobVideoGifResult struct {
	OutputFile *QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
}

func (s QueryVideoGifJobListResponseBodyJobListJobVideoGifResult) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListResponseBodyJobListJobVideoGifResult) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListResponseBodyJobListJobVideoGifResult) SetOutputFile(v *QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile) *QueryVideoGifJobListResponseBodyJobListJobVideoGifResult {
	s.OutputFile = v
	return s
}

type QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile) SetObject(v string) *QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile {
	s.Object = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile) SetLocation(v string) *QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile {
	s.Location = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile) SetBucket(v string) *QueryVideoGifJobListResponseBodyJobListJobVideoGifResultOutputFile {
	s.Bucket = &v
	return s
}

type QueryVideoGifJobListResponseBodyJobListJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryVideoGifJobListResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListResponseBodyJobListJobInput) SetObject(v string) *QueryVideoGifJobListResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJobInput) SetLocation(v string) *QueryVideoGifJobListResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *QueryVideoGifJobListResponseBodyJobListJobInput) SetBucket(v string) *QueryVideoGifJobListResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type QueryVideoGifJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryVideoGifJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryVideoGifJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryVideoGifJobListResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryVideoGifJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryVideoGifJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoGifJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryVideoGifJobListResponse) SetHeaders(v map[string]*string) *QueryVideoGifJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryVideoGifJobListResponse) SetBody(v *QueryVideoGifJobListResponseBody) *QueryVideoGifJobListResponse {
	s.Body = v
	return s
}

type QueryEditingJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryEditingJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListRequest) SetOwnerId(v int64) *QueryEditingJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryEditingJobListRequest) SetResourceOwnerAccount(v string) *QueryEditingJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryEditingJobListRequest) SetResourceOwnerId(v int64) *QueryEditingJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryEditingJobListRequest) SetJobIds(v string) *QueryEditingJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryEditingJobListRequest) SetOwnerAccount(v string) *QueryEditingJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryEditingJobListResponseBody struct {
	NonExistJobIds *QueryEditingJobListResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList        *QueryEditingJobListResponseBodyJobList        `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBody) SetNonExistJobIds(v *QueryEditingJobListResponseBodyNonExistJobIds) *QueryEditingJobListResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *QueryEditingJobListResponseBody) SetRequestId(v string) *QueryEditingJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryEditingJobListResponseBody) SetJobList(v *QueryEditingJobListResponseBodyJobList) *QueryEditingJobListResponseBody {
	s.JobList = v
	return s
}

type QueryEditingJobListResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyNonExistJobIds) SetString_(v []*string) *QueryEditingJobListResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type QueryEditingJobListResponseBodyJobList struct {
	Job []*QueryEditingJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobList) SetJob(v []*QueryEditingJobListResponseBodyJobListJob) *QueryEditingJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryEditingJobListResponseBodyJobListJob struct {
	CreationTime     *string                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent          *int64                                                     `json:"Percent,omitempty" xml:"Percent,omitempty"`
	FinishTime       *string                                                    `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State            *string                                                    `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                    `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code             *string                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	EditingInputs    *QueryEditingJobListResponseBodyJobListJobEditingInputs    `json:"EditingInputs,omitempty" xml:"EditingInputs,omitempty" type:"Struct"`
	PipelineId       *string                                                    `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	EditingConfig    *QueryEditingJobListResponseBodyJobListJobEditingConfig    `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty" type:"Struct"`
	MNSMessageResult *QueryEditingJobListResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetPercent(v int64) *QueryEditingJobListResponseBodyJobListJob {
	s.Percent = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetFinishTime(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.FinishTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetState(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetJobId(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetCode(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetMessage(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetEditingInputs(v *QueryEditingJobListResponseBodyJobListJobEditingInputs) *QueryEditingJobListResponseBodyJobListJob {
	s.EditingInputs = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryEditingJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetEditingConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfig) *QueryEditingJobListResponseBodyJobListJob {
	s.EditingConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJob) SetMNSMessageResult(v *QueryEditingJobListResponseBodyJobListJobMNSMessageResult) *QueryEditingJobListResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingInputs struct {
	EditingInput []*QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput `json:"EditingInput,omitempty" xml:"EditingInput,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputs) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputs) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputs) SetEditingInput(v []*QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) *QueryEditingJobListResponseBodyJobListJobEditingInputs {
	s.EditingInput = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput struct {
	InputFile   *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile   `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	InputConfig *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	Id          *string                                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) SetInputFile(v *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput {
	s.InputFile = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) SetInputConfig(v *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput {
	s.InputConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput) SetId(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInput {
	s.Id = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile {
	s.Object = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputFile {
	s.Bucket = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig struct {
	IsNormalSar       *string `json:"IsNormalSar,omitempty" xml:"IsNormalSar,omitempty"`
	DeinterlaceMethod *string `json:"DeinterlaceMethod,omitempty" xml:"DeinterlaceMethod,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) SetIsNormalSar(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig {
	s.IsNormalSar = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig) SetDeinterlaceMethod(v string) *QueryEditingJobListResponseBodyJobListJobEditingInputsEditingInputInputConfig {
	s.DeinterlaceMethod = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfig struct {
	Video                  *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig            *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Encryption             *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	WaterMarkList          *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
	DeWatermark            *string                                                                       `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	WaterMarkConfigUrl     *string                                                                       `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	M3U8NonStandardSupport *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	Priority               *string                                                                       `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Audio                  *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                                       `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	MergeList              *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	SuperReso              *QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	UserData               *string                                                                       `json:"UserData,omitempty" xml:"UserData,omitempty"`
	DigiWaterMark          *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark          `json:"DigiWaterMark,omitempty" xml:"DigiWaterMark,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                                       `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	OutputFile             *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Rotate                 *string                                                                       `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Editing                *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing                `json:"Editing,omitempty" xml:"Editing,omitempty" type:"Struct"`
	Container              *QueryEditingJobListResponseBodyJobListJobEditingConfigContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Clip                   *QueryEditingJobListResponseBodyJobListJobEditingConfigClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                                       `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MuxConfig              *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TemplateId             *string                                                                       `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	SubtitleConfig         *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	Properties             *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetVideo(v *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Video = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetTransConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.TransConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetEncryption(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Encryption = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetWaterMarkList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.WaterMarkList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetDeWatermark(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.DeWatermark = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetWaterMarkConfigUrl(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetM3U8NonStandardSupport(v *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetPriority(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Priority = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetAudio(v *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Audio = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetAudioStreamMap(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.AudioStreamMap = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetMergeList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.MergeList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetSuperReso(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.SuperReso = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetUserData(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.UserData = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetDigiWaterMark(v *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.DigiWaterMark = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetVideoStreamMap(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.VideoStreamMap = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetOutputFile(v *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.OutputFile = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetRotate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Rotate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetEditing(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Editing = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetContainer(v *QueryEditingJobListResponseBodyJobListJobEditingConfigContainer) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Container = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetClip(v *QueryEditingJobListResponseBodyJobListJobEditingConfigClip) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Clip = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetMergeConfigUrl(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.MergeConfigUrl = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetMuxConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.MuxConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetTemplateId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.TemplateId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetSubtitleConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.SubtitleConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfig) SetProperties(v *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) *QueryEditingJobListResponseBodyJobListJobEditingConfig {
	s.Properties = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigVideo struct {
	Bufsize    *string                                                                `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain    *string                                                                `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt     *string                                                                `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad        *string                                                                `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec      *string                                                                `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height     *string                                                                `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale     *string                                                                `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop       *string                                                                `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate    *string                                                                `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate    *string                                                                `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps     *string                                                                `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile    *string                                                                `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf        *string                                                                `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop        *string                                                                `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width      *string                                                                `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps        *string                                                                `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset     *string                                                                `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode   *string                                                                `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetBufsize(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Bufsize = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetDegrain(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Degrain = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetBitrateBnd(v *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.BitrateBnd = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetPixFmt(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.PixFmt = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetPad(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Pad = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetCodec(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Codec = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetQscale(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Qscale = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetCrop(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Crop = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetMaxrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Maxrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetMaxFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.MaxFps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetProfile(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Profile = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetCrf(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Crf = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetGop(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Gop = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Width = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Fps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetPreset(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.Preset = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo) SetScanMode(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideo {
	s.ScanMode = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) SetMax(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd) SetMin(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigVideoBitrateBnd {
	s.Min = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	Duration                *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckAudioBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckReso(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetTransMode(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.TransMode = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckVideoBitrateFail(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetAdjDarMethod(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckVideoBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckResoFail(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig) SetIsCheckAudioBitrateFail(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption struct {
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.Type = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetKey(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.Key = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetKeyType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.KeyType = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.Id = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetKeyUri(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.KeyUri = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption) SetSkipCnt(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEncryption {
	s.SkipCnt = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList struct {
	WaterMark []*QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList) SetWaterMark(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkList {
	s.WaterMark = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark struct {
	Type                *string                                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
	ReferPos            *string                                                                                `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Dx                  *string                                                                                `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width               *string                                                                                `json:"Width,omitempty" xml:"Width,omitempty"`
	Height              *string                                                                                `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	WaterMarkTemplateId *string                                                                                `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Dy                  *string                                                                                `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetReferPos(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetDx(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Width = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetInputFile(v *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark) SetDy(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport struct {
	TS *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport) SetTS(v *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupport {
	s.TS = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS struct {
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) SetSizeSupport(v bool) *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS) SetMd5Support(v bool) *QueryEditingJobListResponseBodyJobListJobEditingConfigM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigAudio struct {
	Profile    *string                                                            `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string                                                            `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string                                                            `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string                                                            `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string                                                            `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Volume     *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
	Bitrate    *string                                                            `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetProfile(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Profile = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetCodec(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Codec = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetSamplerate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetQscale(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Qscale = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetChannels(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Channels = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetVolume(v *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Volume = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudio {
	s.Bitrate = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume struct {
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) SetMethod(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume {
	s.Method = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume) SetLevel(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigAudioVolume {
	s.Level = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList struct {
	Merge []*QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList) SetMerge(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeList {
	s.Merge = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) SetStart(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge {
	s.Start = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) SetRoleArn(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) SetMergeURL(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMergeListMerge {
	s.Duration = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso) SetIsHalfSample(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSuperReso {
	s.IsHalfSample = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark struct {
	Type      *string                                                                       `json:"Type,omitempty" xml:"Type,omitempty"`
	Alpha     *string                                                                       `json:"Alpha,omitempty" xml:"Alpha,omitempty"`
	InputFile *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark {
	s.Type = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) SetAlpha(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark {
	s.Alpha = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark) SetInputFile(v *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMark {
	s.InputFile = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigDigiWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) SetRoleArn(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile {
	s.RoleArn = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigOutputFile {
	s.Bucket = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditing struct {
	Timeline *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	ClipList *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList `json:"ClipList,omitempty" xml:"ClipList,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) SetTimeline(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing {
	s.Timeline = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing) SetClipList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditing {
	s.ClipList = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline struct {
	TrackList      *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList      `json:"TrackList,omitempty" xml:"TrackList,omitempty" type:"Struct"`
	TimelineConfig *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig `json:"TimelineConfig,omitempty" xml:"TimelineConfig,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) SetTrackList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline {
	s.TrackList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline) SetTimelineConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimeline {
	s.TimelineConfig = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList struct {
	Track []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack `json:"Track,omitempty" xml:"Track,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList) SetTrack(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackList {
	s.Track = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack struct {
	Type  *string                                                                                   `json:"Type,omitempty" xml:"Type,omitempty"`
	Order *string                                                                                   `json:"Order,omitempty" xml:"Order,omitempty"`
	Id    *string                                                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
	Clips *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips `json:"Clips,omitempty" xml:"Clips,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack {
	s.Type = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) SetOrder(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack {
	s.Order = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) SetId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack {
	s.Id = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack) SetClips(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrack {
	s.Clips = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips struct {
	Clip []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips) SetClip(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClips {
	s.Clip = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip struct {
	ClipsConfig *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig `json:"ClipsConfig,omitempty" xml:"ClipsConfig,omitempty" type:"Struct"`
	Out         *string                                                                                                  `json:"Out,omitempty" xml:"Out,omitempty"`
	In          *string                                                                                                  `json:"In,omitempty" xml:"In,omitempty"`
	ClipID      *string                                                                                                  `json:"clipID,omitempty" xml:"clipID,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetClipsConfig(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.ClipsConfig = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetOut(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.Out = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetIn(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.In = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetClipID(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.ClipID = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig struct {
	ClipsConfigVideo *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo `json:"ClipsConfigVideo,omitempty" xml:"ClipsConfigVideo,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) SetClipsConfigVideo(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig {
	s.ClipsConfigVideo = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo struct {
	T *string `json:"T,omitempty" xml:"T,omitempty"`
	L *string `json:"L,omitempty" xml:"L,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetT(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.T = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetL(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.L = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig struct {
	TimelineConfigAudio *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio `json:"TimelineConfigAudio,omitempty" xml:"TimelineConfigAudio,omitempty" type:"Struct"`
	TimelineConfigVideo *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo `json:"TimelineConfigVideo,omitempty" xml:"TimelineConfigVideo,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) SetTimelineConfigAudio(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig {
	s.TimelineConfigAudio = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig) SetTimelineConfigVideo(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfig {
	s.TimelineConfigVideo = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio struct {
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Samplerate    *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Channels      *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetChannelLayout(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.ChannelLayout = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetSamplerate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Samplerate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetChannels(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Channels = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo struct {
	BgColor        *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	Width          *string `json:"Width,omitempty" xml:"Width,omitempty"`
	RenderRatio    *string `json:"RenderRatio,omitempty" xml:"RenderRatio,omitempty"`
	IsGpuData      *string `json:"IsGpuData,omitempty" xml:"IsGpuData,omitempty"`
	Height         *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsOneTrackData *string `json:"IsOneTrackData,omitempty" xml:"IsOneTrackData,omitempty"`
	Fps            *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	ReclosePrec    *string `json:"ReclosePrec,omitempty" xml:"ReclosePrec,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetBgColor(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.BgColor = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Width = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetRenderRatio(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.RenderRatio = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetIsGpuData(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsGpuData = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetIsOneTrackData(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsOneTrackData = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Fps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetReclosePrec(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.ReclosePrec = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList struct {
	Clip []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList) SetClip(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipList {
	s.Clip = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip struct {
	Type          *string                                                                           `json:"Type,omitempty" xml:"Type,omitempty"`
	SourceID      *string                                                                           `json:"SourceID,omitempty" xml:"SourceID,omitempty"`
	Effects       *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects `json:"Effects,omitempty" xml:"Effects,omitempty" type:"Struct"`
	SourceType    *string                                                                           `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	SourceStrmMap *string                                                                           `json:"SourceStrmMap,omitempty" xml:"SourceStrmMap,omitempty"`
	Out           *string                                                                           `json:"Out,omitempty" xml:"Out,omitempty"`
	In            *string                                                                           `json:"In,omitempty" xml:"In,omitempty"`
	Id            *string                                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.Type = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetSourceID(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.SourceID = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetEffects(v *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.Effects = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetSourceType(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.SourceType = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetSourceStrmMap(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.SourceStrmMap = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetOut(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.Out = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetIn(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.In = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip) SetId(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClip {
	s.Id = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects struct {
	Effect []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect `json:"Effect,omitempty" xml:"Effect,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects) SetEffect(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffects {
	s.Effect = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect struct {
	Effect       *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	EffectConfig *string `json:"EffectConfig,omitempty" xml:"EffectConfig,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) SetEffect(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect {
	s.Effect = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect) SetEffectConfig(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigEditingClipListClipEffectsEffect {
	s.EffectConfig = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigContainer) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigContainer) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigContainer) SetFormat(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigContainer {
	s.Format = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigClip struct {
	TimeSpan *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigClip) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigClip) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigClip) SetTimeSpan(v *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) *QueryEditingJobListResponseBodyJobListJobEditingConfigClip {
	s.TimeSpan = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan struct {
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) SetSeek(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan {
	s.Seek = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigClipTimeSpan {
	s.Duration = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig struct {
	Gif     *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) SetGif(v *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig {
	s.Gif = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig) SetSegment(v *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfig {
	s.Segment = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) SetFinalDelay(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) SetDitherMode(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) SetLoop(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif) SetIsCustomPalette(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigMuxConfigSegment {
	s.Duration = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig struct {
	ExtSubtitleList *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) SetExtSubtitleList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig) SetSubtitleList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfig {
	s.SubtitleList = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                              `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                              `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList struct {
	Subtitle []*QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList) SetSubtitle(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle) SetMap(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigProperties struct {
	Width      *string                                                                  `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                                  `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                                  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                                  `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                                  `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                                  `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                                  `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Width = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Fps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetFileFormat(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.FileFormat = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetStreams(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Streams = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetFormat(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.Format = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties) SetFileSize(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigProperties {
	s.FileSize = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams struct {
	VideoStreamList    *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) SetVideoStreamList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) SetAudioStreamList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams) SetSubtitleStreamList(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList struct {
	VideoStream []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList) SetVideoStream(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream struct {
	Index          *string                                                                                                       `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                                       `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                                       `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                                       `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Sar            *string                                                                                                       `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Lang           *string                                                                                                       `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                                       `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Height         *string                                                                                                       `json:"Height,omitempty" xml:"Height,omitempty"`
	NumFrames      *string                                                                                                       `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string                                                                                                       `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string                                                                                                       `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	HasBFrames     *string                                                                                                       `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                                       `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                                       `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NetworkCost    *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Dar            *string                                                                                                       `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                                       `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Width          *string                                                                                                       `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration       *string                                                                                                       `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                       `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                                       `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                                       `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                                       `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList struct {
	AudioStream []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList) SetAudioStream(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetStartTime(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetNumPrograms(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetSize(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.Size = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetNumStreams(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetFormatLongName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetDuration(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetBitrate(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat) SetFormatName(v string) *QueryEditingJobListResponseBodyJobListJobEditingConfigPropertiesFormat {
	s.FormatName = &v
	return s
}

type QueryEditingJobListResponseBodyJobListJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QueryEditingJobListResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *QueryEditingJobListResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *QueryEditingJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryEditingJobListResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *QueryEditingJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QueryEditingJobListResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryEditingJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryEditingJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryEditingJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryEditingJobListResponse) SetHeaders(v map[string]*string) *QueryEditingJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryEditingJobListResponse) SetBody(v *QueryEditingJobListResponseBody) *QueryEditingJobListResponse {
	s.Body = v
	return s
}

type UpdateMCTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Porn                 *string `json:"Porn,omitempty" xml:"Porn,omitempty"`
	Terrorism            *string `json:"Terrorism,omitempty" xml:"Terrorism,omitempty"`
	Politics             *string `json:"Politics,omitempty" xml:"Politics,omitempty"`
	Ad                   *string `json:"Ad,omitempty" xml:"Ad,omitempty"`
	Qrcode               *string `json:"Qrcode,omitempty" xml:"Qrcode,omitempty"`
	Live                 *string `json:"Live,omitempty" xml:"Live,omitempty"`
	Logo                 *string `json:"Logo,omitempty" xml:"Logo,omitempty"`
	Abuse                *string `json:"Abuse,omitempty" xml:"Abuse,omitempty"`
	Contraband           *string `json:"Contraband,omitempty" xml:"Contraband,omitempty"`
	Spam                 *string `json:"spam,omitempty" xml:"spam,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateMCTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMCTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateMCTemplateRequest) SetOwnerId(v int64) *UpdateMCTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetResourceOwnerAccount(v string) *UpdateMCTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetResourceOwnerId(v int64) *UpdateMCTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetTemplateId(v string) *UpdateMCTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetName(v string) *UpdateMCTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetPorn(v string) *UpdateMCTemplateRequest {
	s.Porn = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetTerrorism(v string) *UpdateMCTemplateRequest {
	s.Terrorism = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetPolitics(v string) *UpdateMCTemplateRequest {
	s.Politics = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetAd(v string) *UpdateMCTemplateRequest {
	s.Ad = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetQrcode(v string) *UpdateMCTemplateRequest {
	s.Qrcode = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetLive(v string) *UpdateMCTemplateRequest {
	s.Live = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetLogo(v string) *UpdateMCTemplateRequest {
	s.Logo = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetAbuse(v string) *UpdateMCTemplateRequest {
	s.Abuse = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetContraband(v string) *UpdateMCTemplateRequest {
	s.Contraband = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetSpam(v string) *UpdateMCTemplateRequest {
	s.Spam = &v
	return s
}

func (s *UpdateMCTemplateRequest) SetOwnerAccount(v string) *UpdateMCTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateMCTemplateResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *UpdateMCTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s UpdateMCTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMCTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMCTemplateResponseBody) SetRequestId(v string) *UpdateMCTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMCTemplateResponseBody) SetTemplate(v *UpdateMCTemplateResponseBodyTemplate) *UpdateMCTemplateResponseBody {
	s.Template = v
	return s
}

type UpdateMCTemplateResponseBodyTemplate struct {
	Logo       *string `json:"Logo,omitempty" xml:"Logo,omitempty"`
	Abuse      *string `json:"Abuse,omitempty" xml:"Abuse,omitempty"`
	State      *string `json:"State,omitempty" xml:"State,omitempty"`
	Terrorism  *string `json:"Terrorism,omitempty" xml:"Terrorism,omitempty"`
	Politics   *string `json:"Politics,omitempty" xml:"Politics,omitempty"`
	Qrcode     *string `json:"Qrcode,omitempty" xml:"Qrcode,omitempty"`
	Live       *string `json:"Live,omitempty" xml:"Live,omitempty"`
	Spam       *string `json:"Spam,omitempty" xml:"Spam,omitempty"`
	Contraband *string `json:"Contraband,omitempty" xml:"Contraband,omitempty"`
	Ad         *string `json:"Ad,omitempty" xml:"Ad,omitempty"`
	Porn       *string `json:"Porn,omitempty" xml:"Porn,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateMCTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s UpdateMCTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetLogo(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Logo = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetAbuse(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Abuse = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetState(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.State = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetTerrorism(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Terrorism = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetPolitics(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Politics = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetQrcode(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Qrcode = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetLive(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Live = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetSpam(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Spam = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetContraband(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Contraband = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetAd(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Ad = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetPorn(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Porn = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetName(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *UpdateMCTemplateResponseBodyTemplate) SetTemplateId(v string) *UpdateMCTemplateResponseBodyTemplate {
	s.TemplateId = &v
	return s
}

type UpdateMCTemplateResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMCTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMCTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMCTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateMCTemplateResponse) SetHeaders(v map[string]*string) *UpdateMCTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateMCTemplateResponse) SetBody(v *UpdateMCTemplateResponseBody) *UpdateMCTemplateResponse {
	s.Body = v
	return s
}

type ReportCoverJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Result               *string `json:"Result,omitempty" xml:"Result,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportCoverJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportCoverJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportCoverJobResultRequest) SetOwnerId(v int64) *ReportCoverJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportCoverJobResultRequest) SetResourceOwnerAccount(v string) *ReportCoverJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportCoverJobResultRequest) SetResourceOwnerId(v int64) *ReportCoverJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportCoverJobResultRequest) SetJobId(v string) *ReportCoverJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportCoverJobResultRequest) SetResult(v string) *ReportCoverJobResultRequest {
	s.Result = &v
	return s
}

func (s *ReportCoverJobResultRequest) SetOwnerAccount(v string) *ReportCoverJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportCoverJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportCoverJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportCoverJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportCoverJobResultResponseBody) SetRequestId(v string) *ReportCoverJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportCoverJobResultResponseBody) SetJobId(v string) *ReportCoverJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportCoverJobResultResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportCoverJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportCoverJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportCoverJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportCoverJobResultResponse) SetHeaders(v map[string]*string) *ReportCoverJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportCoverJobResultResponse) SetBody(v *ReportCoverJobResultResponseBody) *ReportCoverJobResultResponse {
	s.Body = v
	return s
}

type SubmitImageQualityJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitImageQualityJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageQualityJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitImageQualityJobRequest) SetOwnerId(v int64) *SubmitImageQualityJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitImageQualityJobRequest) SetResourceOwnerAccount(v string) *SubmitImageQualityJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitImageQualityJobRequest) SetResourceOwnerId(v int64) *SubmitImageQualityJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitImageQualityJobRequest) SetInput(v string) *SubmitImageQualityJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitImageQualityJobRequest) SetPipelineId(v string) *SubmitImageQualityJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitImageQualityJobRequest) SetUserData(v string) *SubmitImageQualityJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitImageQualityJobRequest) SetOwnerAccount(v string) *SubmitImageQualityJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitImageQualityJobResponseBody struct {
	RequestId       *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ImageQualityJob *SubmitImageQualityJobResponseBodyImageQualityJob `json:"ImageQualityJob,omitempty" xml:"ImageQualityJob,omitempty" type:"Struct"`
}

func (s SubmitImageQualityJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageQualityJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitImageQualityJobResponseBody) SetRequestId(v string) *SubmitImageQualityJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitImageQualityJobResponseBody) SetImageQualityJob(v *SubmitImageQualityJobResponseBodyImageQualityJob) *SubmitImageQualityJobResponseBody {
	s.ImageQualityJob = v
	return s
}

type SubmitImageQualityJobResponseBodyImageQualityJob struct {
	CreationTime *string                                                 `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Result       *SubmitImageQualityJobResponseBodyImageQualityJobResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	State        *string                                                 `json:"State,omitempty" xml:"State,omitempty"`
	JobId        *string                                                 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData     *string                                                 `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId   *string                                                 `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input        *SubmitImageQualityJobResponseBodyImageQualityJobInput  `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s SubmitImageQualityJobResponseBodyImageQualityJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageQualityJobResponseBodyImageQualityJob) GoString() string {
	return s.String()
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJob) SetCreationTime(v string) *SubmitImageQualityJobResponseBodyImageQualityJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJob) SetResult(v *SubmitImageQualityJobResponseBodyImageQualityJobResult) *SubmitImageQualityJobResponseBodyImageQualityJob {
	s.Result = v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJob) SetState(v string) *SubmitImageQualityJobResponseBodyImageQualityJob {
	s.State = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJob) SetJobId(v string) *SubmitImageQualityJobResponseBodyImageQualityJob {
	s.JobId = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJob) SetUserData(v string) *SubmitImageQualityJobResponseBodyImageQualityJob {
	s.UserData = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJob) SetPipelineId(v string) *SubmitImageQualityJobResponseBodyImageQualityJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJob) SetInput(v *SubmitImageQualityJobResponseBodyImageQualityJobInput) *SubmitImageQualityJobResponseBodyImageQualityJob {
	s.Input = v
	return s
}

type SubmitImageQualityJobResponseBodyImageQualityJobResult struct {
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	Score   *string `json:"Score,omitempty" xml:"Score,omitempty"`
}

func (s SubmitImageQualityJobResponseBodyImageQualityJobResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageQualityJobResponseBodyImageQualityJobResult) GoString() string {
	return s.String()
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJobResult) SetCode(v string) *SubmitImageQualityJobResponseBodyImageQualityJobResult {
	s.Code = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJobResult) SetMessage(v string) *SubmitImageQualityJobResponseBodyImageQualityJobResult {
	s.Message = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJobResult) SetScore(v string) *SubmitImageQualityJobResponseBodyImageQualityJobResult {
	s.Score = &v
	return s
}

type SubmitImageQualityJobResponseBodyImageQualityJobInput struct {
	Url      *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitImageQualityJobResponseBodyImageQualityJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageQualityJobResponseBodyImageQualityJobInput) GoString() string {
	return s.String()
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJobInput) SetUrl(v string) *SubmitImageQualityJobResponseBodyImageQualityJobInput {
	s.Url = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJobInput) SetObject(v string) *SubmitImageQualityJobResponseBodyImageQualityJobInput {
	s.Object = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJobInput) SetLocation(v string) *SubmitImageQualityJobResponseBodyImageQualityJobInput {
	s.Location = &v
	return s
}

func (s *SubmitImageQualityJobResponseBodyImageQualityJobInput) SetBucket(v string) *SubmitImageQualityJobResponseBodyImageQualityJobInput {
	s.Bucket = &v
	return s
}

type SubmitImageQualityJobResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitImageQualityJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitImageQualityJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageQualityJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitImageQualityJobResponse) SetHeaders(v map[string]*string) *SubmitImageQualityJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitImageQualityJobResponse) SetBody(v *SubmitImageQualityJobResponseBody) *SubmitImageQualityJobResponse {
	s.Body = v
	return s
}

type AddMCTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Porn                 *string `json:"Porn,omitempty" xml:"Porn,omitempty"`
	Terrorism            *string `json:"Terrorism,omitempty" xml:"Terrorism,omitempty"`
	Politics             *string `json:"Politics,omitempty" xml:"Politics,omitempty"`
	Ad                   *string `json:"Ad,omitempty" xml:"Ad,omitempty"`
	Qrcode               *string `json:"Qrcode,omitempty" xml:"Qrcode,omitempty"`
	Live                 *string `json:"Live,omitempty" xml:"Live,omitempty"`
	Logo                 *string `json:"Logo,omitempty" xml:"Logo,omitempty"`
	Abuse                *string `json:"Abuse,omitempty" xml:"Abuse,omitempty"`
	Contraband           *string `json:"Contraband,omitempty" xml:"Contraband,omitempty"`
	Spam                 *string `json:"spam,omitempty" xml:"spam,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddMCTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMCTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddMCTemplateRequest) SetOwnerId(v int64) *AddMCTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMCTemplateRequest) SetResourceOwnerAccount(v string) *AddMCTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddMCTemplateRequest) SetResourceOwnerId(v int64) *AddMCTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddMCTemplateRequest) SetName(v string) *AddMCTemplateRequest {
	s.Name = &v
	return s
}

func (s *AddMCTemplateRequest) SetPorn(v string) *AddMCTemplateRequest {
	s.Porn = &v
	return s
}

func (s *AddMCTemplateRequest) SetTerrorism(v string) *AddMCTemplateRequest {
	s.Terrorism = &v
	return s
}

func (s *AddMCTemplateRequest) SetPolitics(v string) *AddMCTemplateRequest {
	s.Politics = &v
	return s
}

func (s *AddMCTemplateRequest) SetAd(v string) *AddMCTemplateRequest {
	s.Ad = &v
	return s
}

func (s *AddMCTemplateRequest) SetQrcode(v string) *AddMCTemplateRequest {
	s.Qrcode = &v
	return s
}

func (s *AddMCTemplateRequest) SetLive(v string) *AddMCTemplateRequest {
	s.Live = &v
	return s
}

func (s *AddMCTemplateRequest) SetLogo(v string) *AddMCTemplateRequest {
	s.Logo = &v
	return s
}

func (s *AddMCTemplateRequest) SetAbuse(v string) *AddMCTemplateRequest {
	s.Abuse = &v
	return s
}

func (s *AddMCTemplateRequest) SetContraband(v string) *AddMCTemplateRequest {
	s.Contraband = &v
	return s
}

func (s *AddMCTemplateRequest) SetSpam(v string) *AddMCTemplateRequest {
	s.Spam = &v
	return s
}

func (s *AddMCTemplateRequest) SetOwnerAccount(v string) *AddMCTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type AddMCTemplateResponseBody struct {
	RequestId *string                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *AddMCTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s AddMCTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMCTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddMCTemplateResponseBody) SetRequestId(v string) *AddMCTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMCTemplateResponseBody) SetTemplate(v *AddMCTemplateResponseBodyTemplate) *AddMCTemplateResponseBody {
	s.Template = v
	return s
}

type AddMCTemplateResponseBodyTemplate struct {
	Logo       *string `json:"Logo,omitempty" xml:"Logo,omitempty"`
	Abuse      *string `json:"Abuse,omitempty" xml:"Abuse,omitempty"`
	Terrorism  *string `json:"Terrorism,omitempty" xml:"Terrorism,omitempty"`
	Politics   *string `json:"Politics,omitempty" xml:"Politics,omitempty"`
	Qrcode     *string `json:"Qrcode,omitempty" xml:"Qrcode,omitempty"`
	Spam       *string `json:"Spam,omitempty" xml:"Spam,omitempty"`
	Live       *string `json:"Live,omitempty" xml:"Live,omitempty"`
	Contraband *string `json:"Contraband,omitempty" xml:"Contraband,omitempty"`
	Ad         *string `json:"Ad,omitempty" xml:"Ad,omitempty"`
	Porn       *string `json:"Porn,omitempty" xml:"Porn,omitempty"`
	Name       *string `json:"Name,omitempty" xml:"Name,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s AddMCTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s AddMCTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *AddMCTemplateResponseBodyTemplate) SetLogo(v string) *AddMCTemplateResponseBodyTemplate {
	s.Logo = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetAbuse(v string) *AddMCTemplateResponseBodyTemplate {
	s.Abuse = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetTerrorism(v string) *AddMCTemplateResponseBodyTemplate {
	s.Terrorism = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetPolitics(v string) *AddMCTemplateResponseBodyTemplate {
	s.Politics = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetQrcode(v string) *AddMCTemplateResponseBodyTemplate {
	s.Qrcode = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetSpam(v string) *AddMCTemplateResponseBodyTemplate {
	s.Spam = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetLive(v string) *AddMCTemplateResponseBodyTemplate {
	s.Live = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetContraband(v string) *AddMCTemplateResponseBodyTemplate {
	s.Contraband = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetAd(v string) *AddMCTemplateResponseBodyTemplate {
	s.Ad = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetPorn(v string) *AddMCTemplateResponseBodyTemplate {
	s.Porn = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetName(v string) *AddMCTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *AddMCTemplateResponseBodyTemplate) SetTemplateId(v string) *AddMCTemplateResponseBodyTemplate {
	s.TemplateId = &v
	return s
}

type AddMCTemplateResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddMCTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMCTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMCTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddMCTemplateResponse) SetHeaders(v map[string]*string) *AddMCTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddMCTemplateResponse) SetBody(v *AddMCTemplateResponseBody) *AddMCTemplateResponse {
	s.Body = v
	return s
}

type SearchTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SearchTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateRequest) GoString() string {
	return s.String()
}

func (s *SearchTemplateRequest) SetOwnerId(v int64) *SearchTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchTemplateRequest) SetResourceOwnerAccount(v string) *SearchTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchTemplateRequest) SetResourceOwnerId(v int64) *SearchTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchTemplateRequest) SetPageSize(v int64) *SearchTemplateRequest {
	s.PageSize = &v
	return s
}

func (s *SearchTemplateRequest) SetPageNumber(v int64) *SearchTemplateRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchTemplateRequest) SetState(v string) *SearchTemplateRequest {
	s.State = &v
	return s
}

func (s *SearchTemplateRequest) SetOwnerAccount(v string) *SearchTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type SearchTemplateResponseBody struct {
	TotalCount   *int64                                  `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	TemplateList *SearchTemplateResponseBodyTemplateList `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
	PageSize     *int64                                  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int64                                  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s SearchTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBody) SetTotalCount(v int64) *SearchTemplateResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchTemplateResponseBody) SetTemplateList(v *SearchTemplateResponseBodyTemplateList) *SearchTemplateResponseBody {
	s.TemplateList = v
	return s
}

func (s *SearchTemplateResponseBody) SetPageSize(v int64) *SearchTemplateResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchTemplateResponseBody) SetRequestId(v string) *SearchTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchTemplateResponseBody) SetPageNumber(v int64) *SearchTemplateResponseBody {
	s.PageNumber = &v
	return s
}

type SearchTemplateResponseBodyTemplateList struct {
	Template []*SearchTemplateResponseBodyTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s SearchTemplateResponseBodyTemplateList) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateList) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateList) SetTemplate(v []*SearchTemplateResponseBodyTemplateListTemplate) *SearchTemplateResponseBodyTemplateList {
	s.Template = v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplate struct {
	Video       *SearchTemplateResponseBodyTemplateListTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig *SearchTemplateResponseBodyTemplateListTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	State       *string                                                    `json:"State,omitempty" xml:"State,omitempty"`
	MuxConfig   *SearchTemplateResponseBodyTemplateListTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                                    `json:"Name,omitempty" xml:"Name,omitempty"`
	Audio       *SearchTemplateResponseBodyTemplateListTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Id          *string                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
	Container   *SearchTemplateResponseBodyTemplateListTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
}

func (s SearchTemplateResponseBodyTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetVideo(v *SearchTemplateResponseBodyTemplateListTemplateVideo) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Video = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetTransConfig(v *SearchTemplateResponseBodyTemplateListTemplateTransConfig) *SearchTemplateResponseBodyTemplateListTemplate {
	s.TransConfig = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetState(v string) *SearchTemplateResponseBodyTemplateListTemplate {
	s.State = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetMuxConfig(v *SearchTemplateResponseBodyTemplateListTemplateMuxConfig) *SearchTemplateResponseBodyTemplateListTemplate {
	s.MuxConfig = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetName(v string) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetAudio(v *SearchTemplateResponseBodyTemplateListTemplateAudio) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Audio = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetId(v string) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Id = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplate) SetContainer(v *SearchTemplateResponseBodyTemplateListTemplateContainer) *SearchTemplateResponseBodyTemplateListTemplate {
	s.Container = v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateVideo struct {
	Bufsize       *string                                                        `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	LongShortMode *string                                                        `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	Degrain       *string                                                        `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd    *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt        *string                                                        `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad           *string                                                        `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec         *string                                                        `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height        *string                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale        *string                                                        `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop          *string                                                        `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate       *string                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate       *string                                                        `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps        *string                                                        `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile       *string                                                        `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf           *string                                                        `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Remove        *string                                                        `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Gop           *string                                                        `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width         *string                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps           *string                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset        *string                                                        `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode      *string                                                        `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateVideo) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetBufsize(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetLongShortMode(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.LongShortMode = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetDegrain(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetBitrateBnd(v *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetPixFmt(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetPad(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Pad = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetCodec(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Codec = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetHeight(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Height = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetQscale(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetCrop(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Crop = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetBitrate(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetMaxrate(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetMaxFps(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.MaxFps = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetProfile(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Profile = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetCrf(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Crf = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetRemove(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Remove = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetGop(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Gop = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetWidth(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Width = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetFps(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Fps = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetPreset(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.Preset = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideo) SetScanMode(v string) *SearchTemplateResponseBodyTemplateListTemplateVideo {
	s.ScanMode = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) SetMax(v string) *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd) SetMin(v string) *SearchTemplateResponseBodyTemplateListTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckAudioBitrate(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetTransMode(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.TransMode = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckReso(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetAdjDarMethod(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckVideoBitrate(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckResoFail(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *SearchTemplateResponseBodyTemplateListTemplateTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateMuxConfig struct {
	Gif     *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfig) SetGif(v *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) *SearchTemplateResponseBodyTemplateListTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfig) SetSegment(v *SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment) *SearchTemplateResponseBodyTemplateListTemplateMuxConfig {
	s.Segment = v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) SetFinalDelay(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) SetDitherMode(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) SetLoop(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif) SetIsCustomPalette(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment) SetDuration(v string) *SearchTemplateResponseBodyTemplateListTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateAudio struct {
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Remove     *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateAudio) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetProfile(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Profile = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetRemove(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Remove = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetCodec(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Codec = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetSamplerate(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Samplerate = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetQscale(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetChannels(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Channels = &v
	return s
}

func (s *SearchTemplateResponseBodyTemplateListTemplateAudio) SetBitrate(v string) *SearchTemplateResponseBodyTemplateListTemplateAudio {
	s.Bitrate = &v
	return s
}

type SearchTemplateResponseBodyTemplateListTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SearchTemplateResponseBodyTemplateListTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponseBodyTemplateListTemplateContainer) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponseBodyTemplateListTemplateContainer) SetFormat(v string) *SearchTemplateResponseBodyTemplateListTemplateContainer {
	s.Format = &v
	return s
}

type SearchTemplateResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchTemplateResponse) GoString() string {
	return s.String()
}

func (s *SearchTemplateResponse) SetHeaders(v map[string]*string) *SearchTemplateResponse {
	s.Headers = v
	return s
}

func (s *SearchTemplateResponse) SetBody(v *SearchTemplateResponseBody) *SearchTemplateResponse {
	s.Body = v
	return s
}

type UpdateMcuTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Template             *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s UpdateMcuTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMcuTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateMcuTemplateRequest) SetOwnerId(v int64) *UpdateMcuTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMcuTemplateRequest) SetResourceOwnerAccount(v string) *UpdateMcuTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMcuTemplateRequest) SetResourceOwnerId(v int64) *UpdateMcuTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMcuTemplateRequest) SetOwnerAccount(v string) *UpdateMcuTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UpdateMcuTemplateRequest) SetTemplateId(v string) *UpdateMcuTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateMcuTemplateRequest) SetTemplate(v string) *UpdateMcuTemplateRequest {
	s.Template = &v
	return s
}

type UpdateMcuTemplateResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s UpdateMcuTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMcuTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMcuTemplateResponseBody) SetRequestId(v string) *UpdateMcuTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMcuTemplateResponseBody) SetTemplateId(v string) *UpdateMcuTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type UpdateMcuTemplateResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMcuTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMcuTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMcuTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateMcuTemplateResponse) SetHeaders(v map[string]*string) *UpdateMcuTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateMcuTemplateResponse) SetBody(v *UpdateMcuTemplateResponseBody) *UpdateMcuTemplateResponse {
	s.Body = v
	return s
}

type SubmitFacerecogJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	FacerecogConfig      *string `json:"FacerecogConfig,omitempty" xml:"FacerecogConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitFacerecogJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFacerecogJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitFacerecogJobRequest) SetOwnerId(v int64) *SubmitFacerecogJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitFacerecogJobRequest) SetResourceOwnerAccount(v string) *SubmitFacerecogJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitFacerecogJobRequest) SetResourceOwnerId(v int64) *SubmitFacerecogJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitFacerecogJobRequest) SetInput(v string) *SubmitFacerecogJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitFacerecogJobRequest) SetFacerecogConfig(v string) *SubmitFacerecogJobRequest {
	s.FacerecogConfig = &v
	return s
}

func (s *SubmitFacerecogJobRequest) SetUserData(v string) *SubmitFacerecogJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitFacerecogJobRequest) SetPipelineId(v string) *SubmitFacerecogJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitFacerecogJobRequest) SetOwnerAccount(v string) *SubmitFacerecogJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitFacerecogJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitFacerecogJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFacerecogJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFacerecogJobResponseBody) SetRequestId(v string) *SubmitFacerecogJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFacerecogJobResponseBody) SetJobId(v string) *SubmitFacerecogJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitFacerecogJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitFacerecogJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitFacerecogJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFacerecogJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitFacerecogJobResponse) SetHeaders(v map[string]*string) *SubmitFacerecogJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitFacerecogJobResponse) SetBody(v *SubmitFacerecogJobResponseBody) *SubmitFacerecogJobResponse {
	s.Body = v
	return s
}

type SubmitEditingJobsRequest struct {
	OwnerId                  *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount     *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId          *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	EditingInputs            *string `json:"EditingInputs,omitempty" xml:"EditingInputs,omitempty"`
	EditingJobOutputs        *string `json:"EditingJobOutputs,omitempty" xml:"EditingJobOutputs,omitempty"`
	OutputBucket             *string `json:"OutputBucket,omitempty" xml:"OutputBucket,omitempty"`
	OutputLocation           *string `json:"OutputLocation,omitempty" xml:"OutputLocation,omitempty"`
	PipelineId               *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	EditingJobURL            *string `json:"EditingJobURL,omitempty" xml:"EditingJobURL,omitempty"`
	EditingJobOssFileRoleArn *string `json:"EditingJobOssFileRoleArn,omitempty" xml:"EditingJobOssFileRoleArn,omitempty"`
	EditingJobOssFileUid     *int64  `json:"EditingJobOssFileUid,omitempty" xml:"EditingJobOssFileUid,omitempty"`
	OwnerAccount             *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitEditingJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsRequest) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsRequest) SetOwnerId(v int64) *SubmitEditingJobsRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetResourceOwnerAccount(v string) *SubmitEditingJobsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetResourceOwnerId(v int64) *SubmitEditingJobsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetEditingInputs(v string) *SubmitEditingJobsRequest {
	s.EditingInputs = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetEditingJobOutputs(v string) *SubmitEditingJobsRequest {
	s.EditingJobOutputs = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetOutputBucket(v string) *SubmitEditingJobsRequest {
	s.OutputBucket = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetOutputLocation(v string) *SubmitEditingJobsRequest {
	s.OutputLocation = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetPipelineId(v string) *SubmitEditingJobsRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetEditingJobURL(v string) *SubmitEditingJobsRequest {
	s.EditingJobURL = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetEditingJobOssFileRoleArn(v string) *SubmitEditingJobsRequest {
	s.EditingJobOssFileRoleArn = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetEditingJobOssFileUid(v int64) *SubmitEditingJobsRequest {
	s.EditingJobOssFileUid = &v
	return s
}

func (s *SubmitEditingJobsRequest) SetOwnerAccount(v string) *SubmitEditingJobsRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitEditingJobsResponseBody struct {
	JobResultList *SubmitEditingJobsResponseBodyJobResultList `json:"JobResultList,omitempty" xml:"JobResultList,omitempty" type:"Struct"`
	RequestId     *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitEditingJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBody) SetJobResultList(v *SubmitEditingJobsResponseBodyJobResultList) *SubmitEditingJobsResponseBody {
	s.JobResultList = v
	return s
}

func (s *SubmitEditingJobsResponseBody) SetRequestId(v string) *SubmitEditingJobsResponseBody {
	s.RequestId = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultList struct {
	JobResult []*SubmitEditingJobsResponseBodyJobResultListJobResult `json:"JobResult,omitempty" xml:"JobResult,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultList) SetJobResult(v []*SubmitEditingJobsResponseBodyJobResultListJobResult) *SubmitEditingJobsResponseBodyJobResultList {
	s.JobResult = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResult struct {
	Job     *SubmitEditingJobsResponseBodyJobResultListJobResultJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	Success *bool                                                   `json:"Success,omitempty" xml:"Success,omitempty"`
	Code    *string                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResult) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResult) SetJob(v *SubmitEditingJobsResponseBodyJobResultListJobResultJob) *SubmitEditingJobsResponseBodyJobResultListJobResult {
	s.Job = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResult) SetSuccess(v bool) *SubmitEditingJobsResponseBodyJobResultListJobResult {
	s.Success = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResult) SetCode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResult {
	s.Code = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResult) SetMessage(v string) *SubmitEditingJobsResponseBodyJobResultListJobResult {
	s.Message = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJob struct {
	CreationTime     *string                                                                 `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent          *int64                                                                  `json:"Percent,omitempty" xml:"Percent,omitempty"`
	FinishTime       *string                                                                 `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State            *string                                                                 `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                                 `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code             *string                                                                 `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                                 `json:"Message,omitempty" xml:"Message,omitempty"`
	EditingInputs    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs    `json:"EditingInputs,omitempty" xml:"EditingInputs,omitempty" type:"Struct"`
	PipelineId       *string                                                                 `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	EditingConfig    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig    `json:"EditingConfig,omitempty" xml:"EditingConfig,omitempty" type:"Struct"`
	MNSMessageResult *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJob) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetCreationTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetPercent(v int64) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.Percent = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetFinishTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetState(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.State = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetJobId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.JobId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetCode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.Code = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetMessage(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.Message = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetEditingInputs(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.EditingInputs = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetPipelineId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetEditingConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.EditingConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJob) SetMNSMessageResult(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) *SubmitEditingJobsResponseBodyJobResultListJobResultJob {
	s.MNSMessageResult = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs struct {
	EditingInput []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput `json:"EditingInput,omitempty" xml:"EditingInput,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs) SetEditingInput(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputs {
	s.EditingInput = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput struct {
	InputFile   *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile   `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	InputConfig *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	Id          *string                                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) SetInputFile(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput {
	s.InputFile = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) SetInputConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput {
	s.InputConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput) SetId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInput {
	s.Id = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile {
	s.Object = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputFile {
	s.Bucket = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig struct {
	IsNormalSar       *string `json:"IsNormalSar,omitempty" xml:"IsNormalSar,omitempty"`
	DeinterlaceMethod *string `json:"DeinterlaceMethod,omitempty" xml:"DeinterlaceMethod,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) SetIsNormalSar(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig {
	s.IsNormalSar = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig) SetDeinterlaceMethod(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingInputsEditingInputInputConfig {
	s.DeinterlaceMethod = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig struct {
	Video                  *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig            *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Encryption             *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	WaterMarkList          *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
	DeWatermark            *string                                                                                    `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	WaterMarkConfigUrl     *string                                                                                    `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	M3U8NonStandardSupport *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	Priority               *string                                                                                    `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Audio                  *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                                                    `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	MergeList              *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	SuperReso              *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	UserData               *string                                                                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
	DigiWaterMark          *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark          `json:"DigiWaterMark,omitempty" xml:"DigiWaterMark,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                                                    `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	OutputFile             *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Rotate                 *string                                                                                    `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Editing                *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing                `json:"Editing,omitempty" xml:"Editing,omitempty" type:"Struct"`
	Container              *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Clip                   *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                                                    `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MuxConfig              *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TemplateId             *string                                                                                    `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	SubtitleConfig         *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	Properties             *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetVideo(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Video = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetTransConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.TransConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetEncryption(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Encryption = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetWaterMarkList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.WaterMarkList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetDeWatermark(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.DeWatermark = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetWaterMarkConfigUrl(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetM3U8NonStandardSupport(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetPriority(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Priority = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetAudio(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Audio = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetAudioStreamMap(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.AudioStreamMap = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetMergeList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.MergeList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetSuperReso(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.SuperReso = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetUserData(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.UserData = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetDigiWaterMark(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.DigiWaterMark = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetVideoStreamMap(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.VideoStreamMap = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetOutputFile(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.OutputFile = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetRotate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Rotate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetEditing(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Editing = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetContainer(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Container = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetClip(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Clip = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetMergeConfigUrl(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.MergeConfigUrl = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetMuxConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.MuxConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetTemplateId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.TemplateId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetSubtitleConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.SubtitleConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig) SetProperties(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfig {
	s.Properties = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo struct {
	Bufsize    *string                                                                             `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain    *string                                                                             `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt     *string                                                                             `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad        *string                                                                             `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec      *string                                                                             `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height     *string                                                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale     *string                                                                             `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop       *string                                                                             `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate    *string                                                                             `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate    *string                                                                             `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps     *string                                                                             `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile    *string                                                                             `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf        *string                                                                             `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop        *string                                                                             `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width      *string                                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps        *string                                                                             `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset     *string                                                                             `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode   *string                                                                             `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetBufsize(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetDegrain(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Degrain = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetBitrateBnd(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.BitrateBnd = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetPixFmt(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetPad(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Pad = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetCodec(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Codec = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetQscale(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Qscale = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetCrop(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Crop = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetMaxrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetMaxFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.MaxFps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetProfile(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Profile = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetCrf(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Crf = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetGop(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Gop = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Width = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Fps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetPreset(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.Preset = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo) SetScanMode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideo {
	s.ScanMode = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) SetMax(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd) SetMin(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigVideoBitrateBnd {
	s.Min = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	Duration                *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckAudioBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckReso(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetTransMode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.TransMode = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetAdjDarMethod(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckVideoBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckResoFail(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption struct {
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.Type = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetKey(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.Key = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetKeyType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.KeyType = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.Id = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetKeyUri(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.KeyUri = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption) SetSkipCnt(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEncryption {
	s.SkipCnt = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList struct {
	WaterMark []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList) SetWaterMark(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkList {
	s.WaterMark = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark struct {
	Type                *string                                                                                             `json:"Type,omitempty" xml:"Type,omitempty"`
	ReferPos            *string                                                                                             `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Dx                  *string                                                                                             `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width               *string                                                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
	Height              *string                                                                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	WaterMarkTemplateId *string                                                                                             `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Dy                  *string                                                                                             `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetReferPos(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetDx(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Width = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetInputFile(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark) SetDy(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport struct {
	TS *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport) SetTS(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupport {
	s.TS = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS struct {
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) SetSizeSupport(v bool) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS) SetMd5Support(v bool) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio struct {
	Profile    *string                                                                         `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string                                                                         `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string                                                                         `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string                                                                         `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string                                                                         `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Volume     *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
	Bitrate    *string                                                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetProfile(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Profile = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetCodec(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Codec = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetSamplerate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetQscale(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Qscale = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetChannels(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Channels = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetVolume(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Volume = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudio {
	s.Bitrate = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume struct {
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) SetMethod(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume) SetLevel(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigAudioVolume {
	s.Level = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList struct {
	Merge []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList) SetMerge(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeList {
	s.Merge = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) SetStart(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge {
	s.Start = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) SetRoleArn(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) SetMergeURL(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMergeListMerge {
	s.Duration = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso) SetIsHalfSample(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSuperReso {
	s.IsHalfSample = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark struct {
	Type      *string                                                                                    `json:"Type,omitempty" xml:"Type,omitempty"`
	Alpha     *string                                                                                    `json:"Alpha,omitempty" xml:"Alpha,omitempty"`
	InputFile *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark {
	s.Type = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) SetAlpha(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark {
	s.Alpha = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark) SetInputFile(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMark {
	s.InputFile = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigDigiWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) SetRoleArn(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigOutputFile {
	s.Bucket = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing struct {
	Timeline *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	ClipList *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList `json:"ClipList,omitempty" xml:"ClipList,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) SetTimeline(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing {
	s.Timeline = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing) SetClipList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditing {
	s.ClipList = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline struct {
	TrackList      *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList      `json:"TrackList,omitempty" xml:"TrackList,omitempty" type:"Struct"`
	TimelineConfig *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig `json:"TimelineConfig,omitempty" xml:"TimelineConfig,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) SetTrackList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline {
	s.TrackList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline) SetTimelineConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimeline {
	s.TimelineConfig = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList struct {
	Track []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack `json:"Track,omitempty" xml:"Track,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList) SetTrack(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackList {
	s.Track = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack struct {
	Type  *string                                                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
	Order *string                                                                                                `json:"Order,omitempty" xml:"Order,omitempty"`
	Id    *string                                                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	Clips *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips `json:"Clips,omitempty" xml:"Clips,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack {
	s.Type = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) SetOrder(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack {
	s.Order = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) SetId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack {
	s.Id = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack) SetClips(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrack {
	s.Clips = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips struct {
	Clip []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips) SetClip(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClips {
	s.Clip = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip struct {
	ClipsConfig *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig `json:"ClipsConfig,omitempty" xml:"ClipsConfig,omitempty" type:"Struct"`
	Out         *string                                                                                                               `json:"Out,omitempty" xml:"Out,omitempty"`
	In          *string                                                                                                               `json:"In,omitempty" xml:"In,omitempty"`
	ClipID      *string                                                                                                               `json:"clipID,omitempty" xml:"clipID,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetClipsConfig(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.ClipsConfig = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetOut(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.Out = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetIn(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.In = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip) SetClipID(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClip {
	s.ClipID = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig struct {
	ClipsConfigVideo *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo `json:"ClipsConfigVideo,omitempty" xml:"ClipsConfigVideo,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig) SetClipsConfigVideo(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfig {
	s.ClipsConfigVideo = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo struct {
	T *string `json:"T,omitempty" xml:"T,omitempty"`
	L *string `json:"L,omitempty" xml:"L,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetT(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.T = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetL(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.L = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig struct {
	TimelineConfigAudio *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio `json:"TimelineConfigAudio,omitempty" xml:"TimelineConfigAudio,omitempty" type:"Struct"`
	TimelineConfigVideo *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo `json:"TimelineConfigVideo,omitempty" xml:"TimelineConfigVideo,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) SetTimelineConfigAudio(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig {
	s.TimelineConfigAudio = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig) SetTimelineConfigVideo(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfig {
	s.TimelineConfigVideo = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio struct {
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Samplerate    *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Channels      *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetChannelLayout(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetSamplerate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio) SetChannels(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Channels = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo struct {
	BgColor        *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	Width          *string `json:"Width,omitempty" xml:"Width,omitempty"`
	RenderRatio    *string `json:"RenderRatio,omitempty" xml:"RenderRatio,omitempty"`
	IsGpuData      *string `json:"IsGpuData,omitempty" xml:"IsGpuData,omitempty"`
	Height         *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsOneTrackData *string `json:"IsOneTrackData,omitempty" xml:"IsOneTrackData,omitempty"`
	Fps            *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	ReclosePrec    *string `json:"ReclosePrec,omitempty" xml:"ReclosePrec,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetBgColor(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.BgColor = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Width = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetRenderRatio(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.RenderRatio = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetIsGpuData(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsGpuData = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetIsOneTrackData(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsOneTrackData = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Fps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo) SetReclosePrec(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingTimelineTimelineConfigTimelineConfigVideo {
	s.ReclosePrec = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList struct {
	Clip []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList) SetClip(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipList {
	s.Clip = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip struct {
	Type          *string                                                                                        `json:"Type,omitempty" xml:"Type,omitempty"`
	SourceID      *string                                                                                        `json:"SourceID,omitempty" xml:"SourceID,omitempty"`
	Effects       *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects `json:"Effects,omitempty" xml:"Effects,omitempty" type:"Struct"`
	SourceType    *string                                                                                        `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	SourceStrmMap *string                                                                                        `json:"SourceStrmMap,omitempty" xml:"SourceStrmMap,omitempty"`
	Out           *string                                                                                        `json:"Out,omitempty" xml:"Out,omitempty"`
	In            *string                                                                                        `json:"In,omitempty" xml:"In,omitempty"`
	Id            *string                                                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.Type = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetSourceID(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.SourceID = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetEffects(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.Effects = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetSourceType(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.SourceType = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetSourceStrmMap(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.SourceStrmMap = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetOut(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.Out = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetIn(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.In = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip) SetId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClip {
	s.Id = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects struct {
	Effect []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect `json:"Effect,omitempty" xml:"Effect,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects) SetEffect(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffects {
	s.Effect = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect struct {
	Effect       *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	EffectConfig *string `json:"EffectConfig,omitempty" xml:"EffectConfig,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) SetEffect(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect {
	s.Effect = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect) SetEffectConfig(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigEditingClipListClipEffectsEffect {
	s.EffectConfig = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer) SetFormat(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigContainer {
	s.Format = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip struct {
	TimeSpan *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip) SetTimeSpan(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClip {
	s.TimeSpan = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan struct {
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) SetSeek(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan {
	s.Seek = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigClipTimeSpan {
	s.Duration = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig struct {
	Gif     *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) SetGif(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig {
	s.Gif = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig) SetSegment(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfig {
	s.Segment = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) SetFinalDelay(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) SetDitherMode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) SetLoop(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif) SetIsCustomPalette(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigMuxConfigSegment {
	s.Duration = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig struct {
	ExtSubtitleList *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) SetExtSubtitleList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig) SetSubtitleList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfig {
	s.SubtitleList = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                                           `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                                           `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList struct {
	Subtitle []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList) SetSubtitle(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle) SetMap(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties struct {
	Width      *string                                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                                               `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                                               `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                                               `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Width = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Fps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetFileFormat(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.FileFormat = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetStreams(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Streams = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetFormat(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.Format = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties) SetFileSize(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigProperties {
	s.FileSize = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams struct {
	VideoStreamList    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) SetVideoStreamList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) SetAudioStreamList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams) SetSubtitleStreamList(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList struct {
	VideoStream []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList) SetVideoStream(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream struct {
	Index          *string                                                                                                                    `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                                                    `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                                                    `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                                                    `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Sar            *string                                                                                                                    `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Lang           *string                                                                                                                    `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                                                    `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Height         *string                                                                                                                    `json:"Height,omitempty" xml:"Height,omitempty"`
	NumFrames      *string                                                                                                                    `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string                                                                                                                    `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string                                                                                                                    `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	HasBFrames     *string                                                                                                                    `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                                                    `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                                                    `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NetworkCost    *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Dar            *string                                                                                                                    `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                                                    `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Width          *string                                                                                                                    `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration       *string                                                                                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                                    `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                                                    `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                                                    `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                                                    `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList struct {
	AudioStream []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList) SetAudioStream(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetStartTime(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetNumPrograms(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetSize(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.Size = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetNumStreams(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetFormatLongName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetDuration(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetBitrate(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat) SetFormatName(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobEditingConfigPropertiesFormat {
	s.FormatName = &v
	return s
}

type SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetMessageId(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetErrorMessage(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetErrorCode(v string) *SubmitEditingJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type SubmitEditingJobsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitEditingJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitEditingJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitEditingJobsResponse) GoString() string {
	return s.String()
}

func (s *SubmitEditingJobsResponse) SetHeaders(v map[string]*string) *SubmitEditingJobsResponse {
	s.Headers = v
	return s
}

func (s *SubmitEditingJobsResponse) SetBody(v *SubmitEditingJobsResponseBody) *SubmitEditingJobsResponse {
	s.Body = v
	return s
}

type ReportVideoSplitJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Result               *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Details              *string `json:"Details,omitempty" xml:"Details,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportVideoSplitJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportVideoSplitJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportVideoSplitJobResultRequest) SetOwnerId(v int64) *ReportVideoSplitJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportVideoSplitJobResultRequest) SetResourceOwnerAccount(v string) *ReportVideoSplitJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportVideoSplitJobResultRequest) SetResourceOwnerId(v int64) *ReportVideoSplitJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportVideoSplitJobResultRequest) SetJobId(v string) *ReportVideoSplitJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportVideoSplitJobResultRequest) SetResult(v string) *ReportVideoSplitJobResultRequest {
	s.Result = &v
	return s
}

func (s *ReportVideoSplitJobResultRequest) SetDetails(v string) *ReportVideoSplitJobResultRequest {
	s.Details = &v
	return s
}

func (s *ReportVideoSplitJobResultRequest) SetOwnerAccount(v string) *ReportVideoSplitJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportVideoSplitJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportVideoSplitJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportVideoSplitJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportVideoSplitJobResultResponseBody) SetRequestId(v string) *ReportVideoSplitJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportVideoSplitJobResultResponseBody) SetJobId(v string) *ReportVideoSplitJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportVideoSplitJobResultResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportVideoSplitJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportVideoSplitJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportVideoSplitJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportVideoSplitJobResultResponse) SetHeaders(v map[string]*string) *ReportVideoSplitJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportVideoSplitJobResultResponse) SetBody(v *ReportVideoSplitJobResultResponseBody) *ReportVideoSplitJobResultResponse {
	s.Body = v
	return s
}

type QueryMediaCensorJobDetailRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize      *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
}

func (s QueryMediaCensorJobDetailRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailRequest) SetOwnerId(v int64) *QueryMediaCensorJobDetailRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetResourceOwnerAccount(v string) *QueryMediaCensorJobDetailRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetResourceOwnerId(v int64) *QueryMediaCensorJobDetailRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetJobId(v string) *QueryMediaCensorJobDetailRequest {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetOwnerAccount(v string) *QueryMediaCensorJobDetailRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetNextPageToken(v string) *QueryMediaCensorJobDetailRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobDetailRequest) SetMaximumPageSize(v int64) *QueryMediaCensorJobDetailRequest {
	s.MaximumPageSize = &v
	return s
}

type QueryMediaCensorJobDetailResponseBody struct {
	RequestId            *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MediaCensorJobDetail *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail `json:"MediaCensorJobDetail,omitempty" xml:"MediaCensorJobDetail,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBody) SetRequestId(v string) *QueryMediaCensorJobDetailResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBody) SetMediaCensorJobDetail(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) *QueryMediaCensorJobDetailResponseBody {
	s.MediaCensorJobDetail = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail struct {
	CreationTime            *string                                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime              *string                                                                           `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Suggestion              *string                                                                           `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	CoverImageCensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults `json:"CoverImageCensorResults,omitempty" xml:"CoverImageCensorResults,omitempty" type:"Struct"`
	State                   *string                                                                           `json:"State,omitempty" xml:"State,omitempty"`
	TitleCensorResult       *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult       `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty" type:"Struct"`
	Message                 *string                                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	Input                   *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput                   `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	BarrageCensorResult     *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult     `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty" type:"Struct"`
	DescCensorResult        *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult        `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty" type:"Struct"`
	VideoCensorConfig       *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig       `json:"VideoCensorConfig,omitempty" xml:"VideoCensorConfig,omitempty" type:"Struct"`
	JobId                   *string                                                                           `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData                *string                                                                           `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code                    *string                                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	VensorCensorResult      *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult      `json:"VensorCensorResult,omitempty" xml:"VensorCensorResult,omitempty" type:"Struct"`
	PipelineId              *string                                                                           `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCreationTime(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetFinishTime(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.FinishTime = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCoverImageCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.CoverImageCensorResults = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetState(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.State = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetTitleCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.TitleCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetMessage(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Message = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetInput(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Input = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetBarrageCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.BarrageCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetDescCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.DescCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetVideoCensorConfig(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.VideoCensorConfig = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetJobId(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetUserData(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.UserData = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetCode(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.Code = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetVensorCensorResult(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.VensorCensorResult = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail) SetPipelineId(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetail {
	s.PipelineId = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults struct {
	CoverImageCensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult `json:"CoverImageCensorResult,omitempty" xml:"CoverImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults) SetCoverImageCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResults {
	s.CoverImageCensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult struct {
	Object   *string                                                                                                        `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string                                                                                                        `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string                                                                                                        `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Results  *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult) SetResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResult {
	s.Results = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults struct {
	Result []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults) SetResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResults {
	s.Result = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailTitleCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailInput {
	s.Bucket = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailBarrageCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailDescCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig struct {
	OutputFile  *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	VideoCensor *string                                                                               `json:"VideoCensor,omitempty" xml:"VideoCensor,omitempty"`
	BizType     *string                                                                               `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetOutputFile(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetVideoCensor(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.VideoCensor = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig) SetBizType(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfig {
	s.BizType = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetLocation(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile) SetBucket(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVideoCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult struct {
	VideoTimelines *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines `json:"VideoTimelines,omitempty" xml:"VideoTimelines,omitempty" type:"Struct"`
	NextPageToken  *string                                                                                    `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	CensorResults  *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults  `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetVideoTimelines(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.VideoTimelines = v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetNextPageToken(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult) SetCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResult {
	s.CensorResults = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines struct {
	VideoTimeline []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline `json:"VideoTimeline,omitempty" xml:"VideoTimeline,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines) SetVideoTimeline(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelines {
	s.VideoTimeline = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline struct {
	Timestamp     *string                                                                                                              `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Object        *string                                                                                                              `json:"Object,omitempty" xml:"Object,omitempty"`
	CensorResults *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetTimestamp(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.Timestamp = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetObject(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline) SetCensorResults(v *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimeline {
	s.CensorResults = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults struct {
	CensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults) SetCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults struct {
	CensorResult []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults) SetCensorResult(v []*QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobDetailResponseBodyMediaCensorJobDetailVensorCensorResultCensorResultsCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobDetailResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaCensorJobDetailResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaCensorJobDetailResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobDetailResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobDetailResponse) SetHeaders(v map[string]*string) *QueryMediaCensorJobDetailResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaCensorJobDetailResponse) SetBody(v *QueryMediaCensorJobDetailResponseBody) *QueryMediaCensorJobDetailResponse {
	s.Body = v
	return s
}

type TagCustomPersonRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	CategoryId           *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	CategoryName         *string `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	CategoryDescription  *string `json:"CategoryDescription,omitempty" xml:"CategoryDescription,omitempty"`
	PersonId             *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	PersonName           *string `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	PersonDescription    *string `json:"PersonDescription,omitempty" xml:"PersonDescription,omitempty"`
}

func (s TagCustomPersonRequest) String() string {
	return tea.Prettify(s)
}

func (s TagCustomPersonRequest) GoString() string {
	return s.String()
}

func (s *TagCustomPersonRequest) SetOwnerId(v int64) *TagCustomPersonRequest {
	s.OwnerId = &v
	return s
}

func (s *TagCustomPersonRequest) SetResourceOwnerAccount(v string) *TagCustomPersonRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *TagCustomPersonRequest) SetResourceOwnerId(v int64) *TagCustomPersonRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *TagCustomPersonRequest) SetOwnerAccount(v string) *TagCustomPersonRequest {
	s.OwnerAccount = &v
	return s
}

func (s *TagCustomPersonRequest) SetCategoryId(v string) *TagCustomPersonRequest {
	s.CategoryId = &v
	return s
}

func (s *TagCustomPersonRequest) SetCategoryName(v string) *TagCustomPersonRequest {
	s.CategoryName = &v
	return s
}

func (s *TagCustomPersonRequest) SetCategoryDescription(v string) *TagCustomPersonRequest {
	s.CategoryDescription = &v
	return s
}

func (s *TagCustomPersonRequest) SetPersonId(v string) *TagCustomPersonRequest {
	s.PersonId = &v
	return s
}

func (s *TagCustomPersonRequest) SetPersonName(v string) *TagCustomPersonRequest {
	s.PersonName = &v
	return s
}

func (s *TagCustomPersonRequest) SetPersonDescription(v string) *TagCustomPersonRequest {
	s.PersonDescription = &v
	return s
}

type TagCustomPersonResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s TagCustomPersonResponseBody) String() string {
	return tea.Prettify(s)
}

func (s TagCustomPersonResponseBody) GoString() string {
	return s.String()
}

func (s *TagCustomPersonResponseBody) SetRequestId(v string) *TagCustomPersonResponseBody {
	s.RequestId = &v
	return s
}

type TagCustomPersonResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *TagCustomPersonResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s TagCustomPersonResponse) String() string {
	return tea.Prettify(s)
}

func (s TagCustomPersonResponse) GoString() string {
	return s.String()
}

func (s *TagCustomPersonResponse) SetHeaders(v map[string]*string) *TagCustomPersonResponse {
	s.Headers = v
	return s
}

func (s *TagCustomPersonResponse) SetBody(v *TagCustomPersonResponseBody) *TagCustomPersonResponse {
	s.Body = v
	return s
}

type CreateMcuTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Template             *string `json:"Template,omitempty" xml:"Template,omitempty"`
}

func (s CreateMcuTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateMcuTemplateRequest) GoString() string {
	return s.String()
}

func (s *CreateMcuTemplateRequest) SetOwnerId(v int64) *CreateMcuTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateMcuTemplateRequest) SetResourceOwnerAccount(v string) *CreateMcuTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateMcuTemplateRequest) SetResourceOwnerId(v int64) *CreateMcuTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateMcuTemplateRequest) SetOwnerAccount(v string) *CreateMcuTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *CreateMcuTemplateRequest) SetTemplate(v string) *CreateMcuTemplateRequest {
	s.Template = &v
	return s
}

type CreateMcuTemplateResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s CreateMcuTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateMcuTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *CreateMcuTemplateResponseBody) SetRequestId(v string) *CreateMcuTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateMcuTemplateResponseBody) SetTemplateId(v string) *CreateMcuTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type CreateMcuTemplateResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateMcuTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateMcuTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateMcuTemplateResponse) GoString() string {
	return s.String()
}

func (s *CreateMcuTemplateResponse) SetHeaders(v map[string]*string) *CreateMcuTemplateResponse {
	s.Headers = v
	return s
}

func (s *CreateMcuTemplateResponse) SetBody(v *CreateMcuTemplateResponseBody) *CreateMcuTemplateResponse {
	s.Body = v
	return s
}

type ListFpShotNotaryRequest struct {
	OwnerId                 *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount    *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId         *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	NextPageToken           *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize         *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	StartOfCreatedTimeRange *string `json:"StartOfCreatedTimeRange,omitempty" xml:"StartOfCreatedTimeRange,omitempty"`
	EndOfCreatedTimeRange   *string `json:"EndOfCreatedTimeRange,omitempty" xml:"EndOfCreatedTimeRange,omitempty"`
	FpDBId                  *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	OwnerAccount            *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListFpShotNotaryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotNotaryRequest) GoString() string {
	return s.String()
}

func (s *ListFpShotNotaryRequest) SetOwnerId(v int64) *ListFpShotNotaryRequest {
	s.OwnerId = &v
	return s
}

func (s *ListFpShotNotaryRequest) SetResourceOwnerAccount(v string) *ListFpShotNotaryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListFpShotNotaryRequest) SetResourceOwnerId(v int64) *ListFpShotNotaryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListFpShotNotaryRequest) SetNextPageToken(v string) *ListFpShotNotaryRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListFpShotNotaryRequest) SetMaximumPageSize(v int64) *ListFpShotNotaryRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *ListFpShotNotaryRequest) SetStartOfCreatedTimeRange(v string) *ListFpShotNotaryRequest {
	s.StartOfCreatedTimeRange = &v
	return s
}

func (s *ListFpShotNotaryRequest) SetEndOfCreatedTimeRange(v string) *ListFpShotNotaryRequest {
	s.EndOfCreatedTimeRange = &v
	return s
}

func (s *ListFpShotNotaryRequest) SetFpDBId(v string) *ListFpShotNotaryRequest {
	s.FpDBId = &v
	return s
}

func (s *ListFpShotNotaryRequest) SetOwnerAccount(v string) *ListFpShotNotaryRequest {
	s.OwnerAccount = &v
	return s
}

type ListFpShotNotaryResponseBody struct {
	RequestId        *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	FpShotNotaryList *ListFpShotNotaryResponseBodyFpShotNotaryList `json:"FpShotNotaryList,omitempty" xml:"FpShotNotaryList,omitempty" type:"Struct"`
	NextPageToken    *string                                       `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
}

func (s ListFpShotNotaryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotNotaryResponseBody) GoString() string {
	return s.String()
}

func (s *ListFpShotNotaryResponseBody) SetRequestId(v string) *ListFpShotNotaryResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFpShotNotaryResponseBody) SetFpShotNotaryList(v *ListFpShotNotaryResponseBodyFpShotNotaryList) *ListFpShotNotaryResponseBody {
	s.FpShotNotaryList = v
	return s
}

func (s *ListFpShotNotaryResponseBody) SetNextPageToken(v string) *ListFpShotNotaryResponseBody {
	s.NextPageToken = &v
	return s
}

type ListFpShotNotaryResponseBodyFpShotNotaryList struct {
	FpShotNotary []*ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary `json:"FpShotNotary,omitempty" xml:"FpShotNotary,omitempty" type:"Repeated"`
}

func (s ListFpShotNotaryResponseBodyFpShotNotaryList) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotNotaryResponseBodyFpShotNotaryList) GoString() string {
	return s.String()
}

func (s *ListFpShotNotaryResponseBodyFpShotNotaryList) SetFpShotNotary(v []*ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) *ListFpShotNotaryResponseBodyFpShotNotaryList {
	s.FpShotNotary = v
	return s
}

type ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary struct {
	CreationTime  *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime    *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	JobId         *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	TxHash        *string `json:"TxHash,omitempty" xml:"TxHash,omitempty"`
	TransactionId *string `json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
	FpDBId        *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	Detail        *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
}

func (s ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) GoString() string {
	return s.String()
}

func (s *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) SetCreationTime(v string) *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary {
	s.CreationTime = &v
	return s
}

func (s *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) SetFinishTime(v string) *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary {
	s.FinishTime = &v
	return s
}

func (s *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) SetJobId(v string) *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary {
	s.JobId = &v
	return s
}

func (s *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) SetTxHash(v string) *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary {
	s.TxHash = &v
	return s
}

func (s *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) SetTransactionId(v string) *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary {
	s.TransactionId = &v
	return s
}

func (s *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) SetFpDBId(v string) *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary {
	s.FpDBId = &v
	return s
}

func (s *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary) SetDetail(v string) *ListFpShotNotaryResponseBodyFpShotNotaryListFpShotNotary {
	s.Detail = &v
	return s
}

type ListFpShotNotaryResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFpShotNotaryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFpShotNotaryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotNotaryResponse) GoString() string {
	return s.String()
}

func (s *ListFpShotNotaryResponse) SetHeaders(v map[string]*string) *ListFpShotNotaryResponse {
	s.Headers = v
	return s
}

func (s *ListFpShotNotaryResponse) SetBody(v *ListFpShotNotaryResponseBody) *ListFpShotNotaryResponse {
	s.Body = v
	return s
}

type ReportFpShotJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Result               *string `json:"Result,omitempty" xml:"Result,omitempty"`
	Details              *string `json:"Details,omitempty" xml:"Details,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportFpShotJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportFpShotJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportFpShotJobResultRequest) SetOwnerId(v int64) *ReportFpShotJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportFpShotJobResultRequest) SetResourceOwnerAccount(v string) *ReportFpShotJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportFpShotJobResultRequest) SetResourceOwnerId(v int64) *ReportFpShotJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportFpShotJobResultRequest) SetJobId(v string) *ReportFpShotJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportFpShotJobResultRequest) SetResult(v string) *ReportFpShotJobResultRequest {
	s.Result = &v
	return s
}

func (s *ReportFpShotJobResultRequest) SetDetails(v string) *ReportFpShotJobResultRequest {
	s.Details = &v
	return s
}

func (s *ReportFpShotJobResultRequest) SetOwnerAccount(v string) *ReportFpShotJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportFpShotJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportFpShotJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportFpShotJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportFpShotJobResultResponseBody) SetRequestId(v string) *ReportFpShotJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportFpShotJobResultResponseBody) SetJobId(v string) *ReportFpShotJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportFpShotJobResultResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportFpShotJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportFpShotJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportFpShotJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportFpShotJobResultResponse) SetHeaders(v map[string]*string) *ReportFpShotJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportFpShotJobResultResponse) SetBody(v *ReportFpShotJobResultResponseBody) *ReportFpShotJobResultResponse {
	s.Body = v
	return s
}

type SubmitVideoGifJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	VideoGifConfig       *string `json:"VideoGifConfig,omitempty" xml:"VideoGifConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitVideoGifJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoGifJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitVideoGifJobRequest) SetOwnerId(v int64) *SubmitVideoGifJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitVideoGifJobRequest) SetResourceOwnerAccount(v string) *SubmitVideoGifJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitVideoGifJobRequest) SetResourceOwnerId(v int64) *SubmitVideoGifJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitVideoGifJobRequest) SetInput(v string) *SubmitVideoGifJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitVideoGifJobRequest) SetPipelineId(v string) *SubmitVideoGifJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitVideoGifJobRequest) SetVideoGifConfig(v string) *SubmitVideoGifJobRequest {
	s.VideoGifConfig = &v
	return s
}

func (s *SubmitVideoGifJobRequest) SetUserData(v string) *SubmitVideoGifJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitVideoGifJobRequest) SetOwnerAccount(v string) *SubmitVideoGifJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitVideoGifJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitVideoGifJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoGifJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitVideoGifJobResponseBody) SetRequestId(v string) *SubmitVideoGifJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitVideoGifJobResponseBody) SetJobId(v string) *SubmitVideoGifJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitVideoGifJobResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitVideoGifJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitVideoGifJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoGifJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitVideoGifJobResponse) SetHeaders(v map[string]*string) *SubmitVideoGifJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitVideoGifJobResponse) SetBody(v *SubmitVideoGifJobResponseBody) *SubmitVideoGifJobResponse {
	s.Body = v
	return s
}

type QueryAnnotationJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	AnnotationJobIds     *string `json:"AnnotationJobIds,omitempty" xml:"AnnotationJobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryAnnotationJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListRequest) SetOwnerId(v int64) *QueryAnnotationJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAnnotationJobListRequest) SetResourceOwnerAccount(v string) *QueryAnnotationJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryAnnotationJobListRequest) SetResourceOwnerId(v int64) *QueryAnnotationJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryAnnotationJobListRequest) SetAnnotationJobIds(v string) *QueryAnnotationJobListRequest {
	s.AnnotationJobIds = &v
	return s
}

func (s *QueryAnnotationJobListRequest) SetOwnerAccount(v string) *QueryAnnotationJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryAnnotationJobListResponseBody struct {
	AnnotationJobList *QueryAnnotationJobListResponseBodyAnnotationJobList `json:"AnnotationJobList,omitempty" xml:"AnnotationJobList,omitempty" type:"Struct"`
	RequestId         *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistIds       *QueryAnnotationJobListResponseBodyNonExistIds       `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryAnnotationJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponseBody) SetAnnotationJobList(v *QueryAnnotationJobListResponseBodyAnnotationJobList) *QueryAnnotationJobListResponseBody {
	s.AnnotationJobList = v
	return s
}

func (s *QueryAnnotationJobListResponseBody) SetRequestId(v string) *QueryAnnotationJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAnnotationJobListResponseBody) SetNonExistIds(v *QueryAnnotationJobListResponseBodyNonExistIds) *QueryAnnotationJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryAnnotationJobListResponseBodyAnnotationJobList struct {
	AnnotationJob []*QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob `json:"AnnotationJob,omitempty" xml:"AnnotationJob,omitempty" type:"Repeated"`
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobList) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobList) SetAnnotationJob(v []*QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) *QueryAnnotationJobListResponseBodyAnnotationJobList {
	s.AnnotationJob = v
	return s
}

type QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob struct {
	CreationTime          *string                                                                                `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State                 *string                                                                                `json:"State,omitempty" xml:"State,omitempty"`
	UserData              *string                                                                                `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code                  *string                                                                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Message               *string                                                                                `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId            *string                                                                                `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input                 *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput                 `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id                    *string                                                                                `json:"Id,omitempty" xml:"Id,omitempty"`
	VideoAnnotationResult *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult `json:"VideoAnnotationResult,omitempty" xml:"VideoAnnotationResult,omitempty" type:"Struct"`
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetCreationTime(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.CreationTime = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetState(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.State = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetUserData(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.UserData = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetCode(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.Code = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetMessage(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.Message = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetPipelineId(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.PipelineId = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetInput(v *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.Input = v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetId(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.Id = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob) SetVideoAnnotationResult(v *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJob {
	s.VideoAnnotationResult = v
	return s
}

type QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput) SetObject(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput {
	s.Object = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput) SetLocation(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput {
	s.Location = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput) SetBucket(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobInput {
	s.Bucket = &v
	return s
}

type QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult struct {
	Annotations *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotations `json:"Annotations,omitempty" xml:"Annotations,omitempty" type:"Struct"`
	Details     *string                                                                                           `json:"Details,omitempty" xml:"Details,omitempty"`
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult) SetAnnotations(v *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotations) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult {
	s.Annotations = v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult) SetDetails(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResult {
	s.Details = &v
	return s
}

type QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotations struct {
	Annotation []*QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation `json:"Annotation,omitempty" xml:"Annotation,omitempty" type:"Repeated"`
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotations) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotations) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotations) SetAnnotation(v []*QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotations {
	s.Annotation = v
	return s
}

type QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation struct {
	Score *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation) SetScore(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation {
	s.Score = &v
	return s
}

func (s *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation) SetLabel(v string) *QueryAnnotationJobListResponseBodyAnnotationJobListAnnotationJobVideoAnnotationResultAnnotationsAnnotation {
	s.Label = &v
	return s
}

type QueryAnnotationJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryAnnotationJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryAnnotationJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryAnnotationJobListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryAnnotationJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryAnnotationJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAnnotationJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryAnnotationJobListResponse) SetHeaders(v map[string]*string) *QueryAnnotationJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryAnnotationJobListResponse) SetBody(v *QueryAnnotationJobListResponseBody) *QueryAnnotationJobListResponse {
	s.Body = v
	return s
}

type SubmitPornJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	PornConfig           *string `json:"PornConfig,omitempty" xml:"PornConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitPornJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitPornJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitPornJobRequest) SetOwnerId(v int64) *SubmitPornJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitPornJobRequest) SetResourceOwnerAccount(v string) *SubmitPornJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitPornJobRequest) SetResourceOwnerId(v int64) *SubmitPornJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitPornJobRequest) SetInput(v string) *SubmitPornJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitPornJobRequest) SetPipelineId(v string) *SubmitPornJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitPornJobRequest) SetPornConfig(v string) *SubmitPornJobRequest {
	s.PornConfig = &v
	return s
}

func (s *SubmitPornJobRequest) SetUserData(v string) *SubmitPornJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitPornJobRequest) SetOwnerAccount(v string) *SubmitPornJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitPornJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitPornJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitPornJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitPornJobResponseBody) SetRequestId(v string) *SubmitPornJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitPornJobResponseBody) SetJobId(v string) *SubmitPornJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitPornJobResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitPornJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitPornJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitPornJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitPornJobResponse) SetHeaders(v map[string]*string) *SubmitPornJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitPornJobResponse) SetBody(v *SubmitPornJobResponseBody) *SubmitPornJobResponse {
	s.Body = v
	return s
}

type DescribeMtsUserResourcePackageRequest struct {
	SecurityToken *string `json:"SecurityToken,omitempty" xml:"SecurityToken,omitempty"`
	OwnerId       *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
}

func (s DescribeMtsUserResourcePackageRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageRequest) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageRequest) SetSecurityToken(v string) *DescribeMtsUserResourcePackageRequest {
	s.SecurityToken = &v
	return s
}

func (s *DescribeMtsUserResourcePackageRequest) SetOwnerId(v int64) *DescribeMtsUserResourcePackageRequest {
	s.OwnerId = &v
	return s
}

type DescribeMtsUserResourcePackageResponseBody struct {
	RequestId            *string                                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ResourcePackageInfos *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos `json:"ResourcePackageInfos,omitempty" xml:"ResourcePackageInfos,omitempty" type:"Struct"`
}

func (s DescribeMtsUserResourcePackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageResponseBody) SetRequestId(v string) *DescribeMtsUserResourcePackageResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBody) SetResourcePackageInfos(v *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos) *DescribeMtsUserResourcePackageResponseBody {
	s.ResourcePackageInfos = v
	return s
}

type DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos struct {
	ResourcePackageInfo []*DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo `json:"ResourcePackageInfo,omitempty" xml:"ResourcePackageInfo,omitempty" type:"Repeated"`
}

func (s DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos) SetResourcePackageInfo(v []*DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfos {
	s.ResourcePackageInfo = v
	return s
}

type DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo struct {
	DisplayName   *string `json:"DisplayName,omitempty" xml:"DisplayName,omitempty"`
	Status        *string `json:"Status,omitempty" xml:"Status,omitempty"`
	CommodityCode *string `json:"CommodityCode,omitempty" xml:"CommodityCode,omitempty"`
	CurrCapacity  *string `json:"CurrCapacity,omitempty" xml:"CurrCapacity,omitempty"`
	InitCapacity  *string `json:"InitCapacity,omitempty" xml:"InitCapacity,omitempty"`
	InstanceId    *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetDisplayName(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.DisplayName = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetStatus(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.Status = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetCommodityCode(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.CommodityCode = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetCurrCapacity(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.CurrCapacity = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetInitCapacity(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.InitCapacity = &v
	return s
}

func (s *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo) SetInstanceId(v string) *DescribeMtsUserResourcePackageResponseBodyResourcePackageInfosResourcePackageInfo {
	s.InstanceId = &v
	return s
}

type DescribeMtsUserResourcePackageResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DescribeMtsUserResourcePackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeMtsUserResourcePackageResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeMtsUserResourcePackageResponse) GoString() string {
	return s.String()
}

func (s *DescribeMtsUserResourcePackageResponse) SetHeaders(v map[string]*string) *DescribeMtsUserResourcePackageResponse {
	s.Headers = v
	return s
}

func (s *DescribeMtsUserResourcePackageResponse) SetBody(v *DescribeMtsUserResourcePackageResponseBody) *DescribeMtsUserResourcePackageResponse {
	s.Body = v
	return s
}

type AddTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Container            *string `json:"Container,omitempty" xml:"Container,omitempty"`
	Video                *string `json:"Video,omitempty" xml:"Video,omitempty"`
	Audio                *string `json:"Audio,omitempty" xml:"Audio,omitempty"`
	TransConfig          *string `json:"TransConfig,omitempty" xml:"TransConfig,omitempty"`
	MuxConfig            *string `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddTemplateRequest) SetOwnerId(v int64) *AddTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *AddTemplateRequest) SetResourceOwnerAccount(v string) *AddTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddTemplateRequest) SetResourceOwnerId(v int64) *AddTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddTemplateRequest) SetName(v string) *AddTemplateRequest {
	s.Name = &v
	return s
}

func (s *AddTemplateRequest) SetContainer(v string) *AddTemplateRequest {
	s.Container = &v
	return s
}

func (s *AddTemplateRequest) SetVideo(v string) *AddTemplateRequest {
	s.Video = &v
	return s
}

func (s *AddTemplateRequest) SetAudio(v string) *AddTemplateRequest {
	s.Audio = &v
	return s
}

func (s *AddTemplateRequest) SetTransConfig(v string) *AddTemplateRequest {
	s.TransConfig = &v
	return s
}

func (s *AddTemplateRequest) SetMuxConfig(v string) *AddTemplateRequest {
	s.MuxConfig = &v
	return s
}

func (s *AddTemplateRequest) SetOwnerAccount(v string) *AddTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type AddTemplateResponseBody struct {
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *AddTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBody) SetRequestId(v string) *AddTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTemplateResponseBody) SetTemplate(v *AddTemplateResponseBodyTemplate) *AddTemplateResponseBody {
	s.Template = v
	return s
}

type AddTemplateResponseBodyTemplate struct {
	Video       *AddTemplateResponseBodyTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig *AddTemplateResponseBodyTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	State       *string                                     `json:"State,omitempty" xml:"State,omitempty"`
	MuxConfig   *AddTemplateResponseBodyTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                     `json:"Name,omitempty" xml:"Name,omitempty"`
	Audio       *AddTemplateResponseBodyTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Id          *string                                     `json:"Id,omitempty" xml:"Id,omitempty"`
	Container   *AddTemplateResponseBodyTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplate) SetVideo(v *AddTemplateResponseBodyTemplateVideo) *AddTemplateResponseBodyTemplate {
	s.Video = v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetTransConfig(v *AddTemplateResponseBodyTemplateTransConfig) *AddTemplateResponseBodyTemplate {
	s.TransConfig = v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetState(v string) *AddTemplateResponseBodyTemplate {
	s.State = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetMuxConfig(v *AddTemplateResponseBodyTemplateMuxConfig) *AddTemplateResponseBodyTemplate {
	s.MuxConfig = v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetName(v string) *AddTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetAudio(v *AddTemplateResponseBodyTemplateAudio) *AddTemplateResponseBodyTemplate {
	s.Audio = v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetId(v string) *AddTemplateResponseBodyTemplate {
	s.Id = &v
	return s
}

func (s *AddTemplateResponseBodyTemplate) SetContainer(v *AddTemplateResponseBodyTemplateContainer) *AddTemplateResponseBodyTemplate {
	s.Container = v
	return s
}

type AddTemplateResponseBodyTemplateVideo struct {
	Bufsize       *string                                         `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	LongShortMode *string                                         `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	Degrain       *string                                         `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd    *AddTemplateResponseBodyTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt        *string                                         `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad           *string                                         `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec         *string                                         `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height        *string                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale        *string                                         `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop          *string                                         `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate       *string                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate       *string                                         `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps        *string                                         `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile       *string                                         `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf           *string                                         `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Remove        *string                                         `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Gop           *string                                         `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width         *string                                         `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps           *string                                         `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset        *string                                         `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode      *string                                         `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	ResoPriority  *string                                         `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
}

func (s AddTemplateResponseBodyTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateVideo) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateVideo) SetBufsize(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetLongShortMode(v string) *AddTemplateResponseBodyTemplateVideo {
	s.LongShortMode = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetDegrain(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetBitrateBnd(v *AddTemplateResponseBodyTemplateVideoBitrateBnd) *AddTemplateResponseBodyTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetPixFmt(v string) *AddTemplateResponseBodyTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetPad(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Pad = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetCodec(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Codec = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetHeight(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Height = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetQscale(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetCrop(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Crop = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetBitrate(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetMaxrate(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetMaxFps(v string) *AddTemplateResponseBodyTemplateVideo {
	s.MaxFps = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetProfile(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Profile = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetCrf(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Crf = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetRemove(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Remove = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetGop(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Gop = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetWidth(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Width = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetFps(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Fps = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetPreset(v string) *AddTemplateResponseBodyTemplateVideo {
	s.Preset = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetScanMode(v string) *AddTemplateResponseBodyTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideo) SetResoPriority(v string) *AddTemplateResponseBodyTemplateVideo {
	s.ResoPriority = &v
	return s
}

type AddTemplateResponseBodyTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s AddTemplateResponseBodyTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateVideoBitrateBnd) SetMax(v string) *AddTemplateResponseBodyTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateVideoBitrateBnd) SetMin(v string) *AddTemplateResponseBodyTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type AddTemplateResponseBodyTemplateTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s AddTemplateResponseBodyTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckAudioBitrate(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetTransMode(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.TransMode = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckReso(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetAdjDarMethod(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckVideoBitrate(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckResoFail(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *AddTemplateResponseBodyTemplateTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type AddTemplateResponseBodyTemplateMuxConfig struct {
	Webp    *AddTemplateResponseBodyTemplateMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
	Gif     *AddTemplateResponseBodyTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *AddTemplateResponseBodyTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s AddTemplateResponseBodyTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateMuxConfig) SetWebp(v *AddTemplateResponseBodyTemplateMuxConfigWebp) *AddTemplateResponseBodyTemplateMuxConfig {
	s.Webp = v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfig) SetGif(v *AddTemplateResponseBodyTemplateMuxConfigGif) *AddTemplateResponseBodyTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfig) SetSegment(v *AddTemplateResponseBodyTemplateMuxConfigSegment) *AddTemplateResponseBodyTemplateMuxConfig {
	s.Segment = v
	return s
}

type AddTemplateResponseBodyTemplateMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s AddTemplateResponseBodyTemplateMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateMuxConfigWebp) SetLoop(v string) *AddTemplateResponseBodyTemplateMuxConfigWebp {
	s.Loop = &v
	return s
}

type AddTemplateResponseBodyTemplateMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s AddTemplateResponseBodyTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateMuxConfigGif) SetFinalDelay(v string) *AddTemplateResponseBodyTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfigGif) SetDitherMode(v string) *AddTemplateResponseBodyTemplateMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfigGif) SetLoop(v string) *AddTemplateResponseBodyTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateMuxConfigGif) SetIsCustomPalette(v string) *AddTemplateResponseBodyTemplateMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type AddTemplateResponseBodyTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s AddTemplateResponseBodyTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateMuxConfigSegment) SetDuration(v string) *AddTemplateResponseBodyTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type AddTemplateResponseBodyTemplateAudio struct {
	Profile    *string                                     `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Remove     *string                                     `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Codec      *string                                     `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string                                     `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string                                     `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string                                     `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Volume     *AddTemplateResponseBodyTemplateAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
	Bitrate    *string                                     `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s AddTemplateResponseBodyTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateAudio) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateAudio) SetProfile(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Profile = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetRemove(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Remove = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetCodec(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Codec = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetSamplerate(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Samplerate = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetQscale(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetChannels(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Channels = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetVolume(v *AddTemplateResponseBodyTemplateAudioVolume) *AddTemplateResponseBodyTemplateAudio {
	s.Volume = v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudio) SetBitrate(v string) *AddTemplateResponseBodyTemplateAudio {
	s.Bitrate = &v
	return s
}

type AddTemplateResponseBodyTemplateAudioVolume struct {
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s AddTemplateResponseBodyTemplateAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateAudioVolume) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateAudioVolume) SetMethod(v string) *AddTemplateResponseBodyTemplateAudioVolume {
	s.Method = &v
	return s
}

func (s *AddTemplateResponseBodyTemplateAudioVolume) SetLevel(v string) *AddTemplateResponseBodyTemplateAudioVolume {
	s.Level = &v
	return s
}

type AddTemplateResponseBodyTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s AddTemplateResponseBodyTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponseBodyTemplateContainer) GoString() string {
	return s.String()
}

func (s *AddTemplateResponseBodyTemplateContainer) SetFormat(v string) *AddTemplateResponseBodyTemplateContainer {
	s.Format = &v
	return s
}

type AddTemplateResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddTemplateResponse) SetHeaders(v map[string]*string) *AddTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddTemplateResponse) SetBody(v *AddTemplateResponseBody) *AddTemplateResponse {
	s.Body = v
	return s
}

type SubmitMCJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Video                *string `json:"Video,omitempty" xml:"Video,omitempty"`
	Images               *string `json:"Images,omitempty" xml:"Images,omitempty"`
	Texts                *string `json:"Texts,omitempty" xml:"Texts,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	CensorConfig         *string `json:"CensorConfig,omitempty" xml:"CensorConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitMCJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMCJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMCJobRequest) SetOwnerId(v int64) *SubmitMCJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitMCJobRequest) SetResourceOwnerAccount(v string) *SubmitMCJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitMCJobRequest) SetResourceOwnerId(v int64) *SubmitMCJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitMCJobRequest) SetVideo(v string) *SubmitMCJobRequest {
	s.Video = &v
	return s
}

func (s *SubmitMCJobRequest) SetImages(v string) *SubmitMCJobRequest {
	s.Images = &v
	return s
}

func (s *SubmitMCJobRequest) SetTexts(v string) *SubmitMCJobRequest {
	s.Texts = &v
	return s
}

func (s *SubmitMCJobRequest) SetPipelineId(v string) *SubmitMCJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitMCJobRequest) SetCensorConfig(v string) *SubmitMCJobRequest {
	s.CensorConfig = &v
	return s
}

func (s *SubmitMCJobRequest) SetUserData(v string) *SubmitMCJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitMCJobRequest) SetOwnerAccount(v string) *SubmitMCJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitMCJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitMCJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMCJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMCJobResponseBody) SetRequestId(v string) *SubmitMCJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitMCJobResponseBody) SetJobId(v string) *SubmitMCJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitMCJobResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitMCJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMCJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMCJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMCJobResponse) SetHeaders(v map[string]*string) *SubmitMCJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMCJobResponse) SetBody(v *SubmitMCJobResponseBody) *SubmitMCJobResponse {
	s.Body = v
	return s
}

type ReportPornJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Label                *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Detail               *string `json:"Detail,omitempty" xml:"Detail,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportPornJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportPornJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportPornJobResultRequest) SetOwnerId(v int64) *ReportPornJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportPornJobResultRequest) SetResourceOwnerAccount(v string) *ReportPornJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportPornJobResultRequest) SetResourceOwnerId(v int64) *ReportPornJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportPornJobResultRequest) SetJobId(v string) *ReportPornJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportPornJobResultRequest) SetLabel(v string) *ReportPornJobResultRequest {
	s.Label = &v
	return s
}

func (s *ReportPornJobResultRequest) SetDetail(v string) *ReportPornJobResultRequest {
	s.Detail = &v
	return s
}

func (s *ReportPornJobResultRequest) SetOwnerAccount(v string) *ReportPornJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportPornJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportPornJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportPornJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportPornJobResultResponseBody) SetRequestId(v string) *ReportPornJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportPornJobResultResponseBody) SetJobId(v string) *ReportPornJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportPornJobResultResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportPornJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportPornJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportPornJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportPornJobResultResponse) SetHeaders(v map[string]*string) *ReportPornJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportPornJobResultResponse) SetBody(v *ReportPornJobResultResponseBody) *ReportPornJobResultResponse {
	s.Body = v
	return s
}

type UpdateMediaWorkflowRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Topology             *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowRequest) SetOwnerId(v int64) *UpdateMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetResourceOwnerAccount(v string) *UpdateMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetResourceOwnerId(v int64) *UpdateMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetMediaWorkflowId(v string) *UpdateMediaWorkflowRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetTopology(v string) *UpdateMediaWorkflowRequest {
	s.Topology = &v
	return s
}

func (s *UpdateMediaWorkflowRequest) SetOwnerAccount(v string) *UpdateMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateMediaWorkflowResponseBody struct {
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MediaWorkflow *UpdateMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
}

func (s UpdateMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowResponseBody) SetRequestId(v string) *UpdateMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBody) SetMediaWorkflow(v *UpdateMediaWorkflowResponseBodyMediaWorkflow) *UpdateMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

type UpdateMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s UpdateMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetTriggerMode(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.TriggerMode = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *UpdateMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *UpdateMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type UpdateMediaWorkflowResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowResponse) SetHeaders(v map[string]*string) *UpdateMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaWorkflowResponse) SetBody(v *UpdateMediaWorkflowResponseBody) *UpdateMediaWorkflowResponse {
	s.Body = v
	return s
}

type DeleteSmarttagTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteSmarttagTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmarttagTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteSmarttagTemplateRequest) SetOwnerId(v int64) *DeleteSmarttagTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteSmarttagTemplateRequest) SetResourceOwnerAccount(v string) *DeleteSmarttagTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteSmarttagTemplateRequest) SetResourceOwnerId(v int64) *DeleteSmarttagTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteSmarttagTemplateRequest) SetOwnerAccount(v string) *DeleteSmarttagTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteSmarttagTemplateRequest) SetTemplateId(v string) *DeleteSmarttagTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteSmarttagTemplateResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteSmarttagTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmarttagTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteSmarttagTemplateResponseBody) SetRequestId(v string) *DeleteSmarttagTemplateResponseBody {
	s.RequestId = &v
	return s
}

type DeleteSmarttagTemplateResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteSmarttagTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteSmarttagTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteSmarttagTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteSmarttagTemplateResponse) SetHeaders(v map[string]*string) *DeleteSmarttagTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteSmarttagTemplateResponse) SetBody(v *DeleteSmarttagTemplateResponseBody) *DeleteSmarttagTemplateResponse {
	s.Body = v
	return s
}

type QueryMediaWorkflowListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaWorkflowIds     *string `json:"MediaWorkflowIds,omitempty" xml:"MediaWorkflowIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMediaWorkflowListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListRequest) SetOwnerId(v int64) *QueryMediaWorkflowListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaWorkflowListRequest) SetResourceOwnerAccount(v string) *QueryMediaWorkflowListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaWorkflowListRequest) SetResourceOwnerId(v int64) *QueryMediaWorkflowListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaWorkflowListRequest) SetMediaWorkflowIds(v string) *QueryMediaWorkflowListRequest {
	s.MediaWorkflowIds = &v
	return s
}

func (s *QueryMediaWorkflowListRequest) SetOwnerAccount(v string) *QueryMediaWorkflowListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMediaWorkflowListResponseBody struct {
	NonExistMediaWorkflowIds *QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds `json:"NonExistMediaWorkflowIds,omitempty" xml:"NonExistMediaWorkflowIds,omitempty" type:"Struct"`
	MediaWorkflowList        *QueryMediaWorkflowListResponseBodyMediaWorkflowList        `json:"MediaWorkflowList,omitempty" xml:"MediaWorkflowList,omitempty" type:"Struct"`
	RequestId                *string                                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaWorkflowListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponseBody) SetNonExistMediaWorkflowIds(v *QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds) *QueryMediaWorkflowListResponseBody {
	s.NonExistMediaWorkflowIds = v
	return s
}

func (s *QueryMediaWorkflowListResponseBody) SetMediaWorkflowList(v *QueryMediaWorkflowListResponseBodyMediaWorkflowList) *QueryMediaWorkflowListResponseBody {
	s.MediaWorkflowList = v
	return s
}

func (s *QueryMediaWorkflowListResponseBody) SetRequestId(v string) *QueryMediaWorkflowListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds struct {
	MediaWorkflowId []*string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds) SetMediaWorkflowId(v []*string) *QueryMediaWorkflowListResponseBodyNonExistMediaWorkflowIds {
	s.MediaWorkflowId = v
	return s
}

type QueryMediaWorkflowListResponseBodyMediaWorkflowList struct {
	MediaWorkflow []*QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowListResponseBodyMediaWorkflowList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponseBodyMediaWorkflowList) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowList) SetMediaWorkflow(v []*QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) *QueryMediaWorkflowListResponseBodyMediaWorkflowList {
	s.MediaWorkflow = v
	return s
}

type QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetCreationTime(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetMediaWorkflowId(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetState(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.State = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetTriggerMode(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.TriggerMode = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetName(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.Name = &v
	return s
}

func (s *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow) SetTopology(v string) *QueryMediaWorkflowListResponseBodyMediaWorkflowListMediaWorkflow {
	s.Topology = &v
	return s
}

type QueryMediaWorkflowListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaWorkflowListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaWorkflowListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowListResponse) SetHeaders(v map[string]*string) *QueryMediaWorkflowListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaWorkflowListResponse) SetBody(v *QueryMediaWorkflowListResponseBody) *QueryMediaWorkflowListResponse {
	s.Body = v
	return s
}

type SubmitIProductionJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	FunctionName         *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	ModelId              *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	JobParams            *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	ScheduleParams       *string `json:"ScheduleParams,omitempty" xml:"ScheduleParams,omitempty"`
	NotifyUrl            *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Output               *string `json:"Output,omitempty" xml:"Output,omitempty"`
}

func (s SubmitIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobRequest) SetOwnerId(v int64) *SubmitIProductionJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetResourceOwnerAccount(v string) *SubmitIProductionJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetResourceOwnerId(v int64) *SubmitIProductionJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetFunctionName(v string) *SubmitIProductionJobRequest {
	s.FunctionName = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetModelId(v string) *SubmitIProductionJobRequest {
	s.ModelId = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetJobParams(v string) *SubmitIProductionJobRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetScheduleParams(v string) *SubmitIProductionJobRequest {
	s.ScheduleParams = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetNotifyUrl(v string) *SubmitIProductionJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetUserData(v string) *SubmitIProductionJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetPipelineId(v string) *SubmitIProductionJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetOwnerAccount(v string) *SubmitIProductionJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetInput(v string) *SubmitIProductionJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitIProductionJobRequest) SetOutput(v string) *SubmitIProductionJobRequest {
	s.Output = &v
	return s
}

type SubmitIProductionJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s SubmitIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobResponseBody) SetRequestId(v string) *SubmitIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitIProductionJobResponseBody) SetJobId(v string) *SubmitIProductionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *SubmitIProductionJobResponseBody) SetResult(v string) *SubmitIProductionJobResponseBody {
	s.Result = &v
	return s
}

type SubmitIProductionJobResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitIProductionJobResponse) SetHeaders(v map[string]*string) *SubmitIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitIProductionJobResponse) SetBody(v *SubmitIProductionJobResponseBody) *SubmitIProductionJobResponse {
	s.Body = v
	return s
}

type GetLicenseRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	LicenseUrl           *string `json:"LicenseUrl,omitempty" xml:"LicenseUrl,omitempty"`
	Data                 *string `json:"Data,omitempty" xml:"Data,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	Header               *string `json:"Header,omitempty" xml:"Header,omitempty"`
	Type                 *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetLicenseRequest) String() string {
	return tea.Prettify(s)
}

func (s GetLicenseRequest) GoString() string {
	return s.String()
}

func (s *GetLicenseRequest) SetOwnerId(v string) *GetLicenseRequest {
	s.OwnerId = &v
	return s
}

func (s *GetLicenseRequest) SetResourceOwnerId(v string) *GetLicenseRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetLicenseRequest) SetResourceOwnerAccount(v string) *GetLicenseRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetLicenseRequest) SetOwnerAccount(v string) *GetLicenseRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetLicenseRequest) SetLicenseUrl(v string) *GetLicenseRequest {
	s.LicenseUrl = &v
	return s
}

func (s *GetLicenseRequest) SetData(v string) *GetLicenseRequest {
	s.Data = &v
	return s
}

func (s *GetLicenseRequest) SetMediaId(v string) *GetLicenseRequest {
	s.MediaId = &v
	return s
}

func (s *GetLicenseRequest) SetHeader(v string) *GetLicenseRequest {
	s.Header = &v
	return s
}

func (s *GetLicenseRequest) SetType(v string) *GetLicenseRequest {
	s.Type = &v
	return s
}

type GetLicenseResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	License   *string `json:"License,omitempty" xml:"License,omitempty"`
}

func (s GetLicenseResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetLicenseResponseBody) GoString() string {
	return s.String()
}

func (s *GetLicenseResponseBody) SetRequestId(v string) *GetLicenseResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetLicenseResponseBody) SetLicense(v string) *GetLicenseResponseBody {
	s.License = &v
	return s
}

type GetLicenseResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetLicenseResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetLicenseResponse) String() string {
	return tea.Prettify(s)
}

func (s GetLicenseResponse) GoString() string {
	return s.String()
}

func (s *GetLicenseResponse) SetHeaders(v map[string]*string) *GetLicenseResponse {
	s.Headers = v
	return s
}

func (s *GetLicenseResponse) SetBody(v *GetLicenseResponseBody) *GetLicenseResponse {
	s.Body = v
	return s
}

type QueryVideoSummaryJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryVideoSummaryJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListRequest) SetOwnerId(v int64) *QueryVideoSummaryJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryVideoSummaryJobListRequest) SetResourceOwnerAccount(v string) *QueryVideoSummaryJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryVideoSummaryJobListRequest) SetResourceOwnerId(v int64) *QueryVideoSummaryJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryVideoSummaryJobListRequest) SetJobIds(v string) *QueryVideoSummaryJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryVideoSummaryJobListRequest) SetOwnerAccount(v string) *QueryVideoSummaryJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryVideoSummaryJobListResponseBody struct {
	RequestId   *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList     *QueryVideoSummaryJobListResponseBodyJobList     `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NonExistIds *QueryVideoSummaryJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryVideoSummaryJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBody) SetRequestId(v string) *QueryVideoSummaryJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBody) SetJobList(v *QueryVideoSummaryJobListResponseBodyJobList) *QueryVideoSummaryJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryVideoSummaryJobListResponseBody) SetNonExistIds(v *QueryVideoSummaryJobListResponseBodyNonExistIds) *QueryVideoSummaryJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryVideoSummaryJobListResponseBodyJobList struct {
	Job []*QueryVideoSummaryJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryVideoSummaryJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBodyJobList) SetJob(v []*QueryVideoSummaryJobListResponseBodyJobListJob) *QueryVideoSummaryJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryVideoSummaryJobListResponseBodyJobListJob struct {
	CreationTime       *string                                                           `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State              *string                                                           `json:"State,omitempty" xml:"State,omitempty"`
	UserData           *string                                                           `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code               *string                                                           `json:"Code,omitempty" xml:"Code,omitempty"`
	Message            *string                                                           `json:"Message,omitempty" xml:"Message,omitempty"`
	VideoSummaryResult *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult `json:"VideoSummaryResult,omitempty" xml:"VideoSummaryResult,omitempty" type:"Struct"`
	PipelineId         *string                                                           `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input              *QueryVideoSummaryJobListResponseBodyJobListJobInput              `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id                 *string                                                           `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryVideoSummaryJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetState(v string) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetUserData(v string) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetCode(v string) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetMessage(v string) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetVideoSummaryResult(v *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.VideoSummaryResult = v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetInput(v *QueryVideoSummaryJobListResponseBodyJobListJobInput) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJob) SetId(v string) *QueryVideoSummaryJobListResponseBodyJobListJob {
	s.Id = &v
	return s
}

type QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult struct {
	VideoSummaryList *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryList `json:"VideoSummaryList,omitempty" xml:"VideoSummaryList,omitempty" type:"Struct"`
	OutputFile       *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile       `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult) SetVideoSummaryList(v *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryList) *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult {
	s.VideoSummaryList = v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult) SetOutputFile(v *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile) *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResult {
	s.OutputFile = v
	return s
}

type QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryList struct {
	VideoSummary []*QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary `json:"VideoSummary,omitempty" xml:"VideoSummary,omitempty" type:"Repeated"`
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryList) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryList) SetVideoSummary(v []*QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary) *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryList {
	s.VideoSummary = v
	return s
}

type QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary) SetEndTime(v string) *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary {
	s.EndTime = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary) SetStartTime(v string) *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultVideoSummaryListVideoSummary {
	s.StartTime = &v
	return s
}

type QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile) SetObject(v string) *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile {
	s.Object = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile) SetLocation(v string) *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile {
	s.Location = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile) SetBucket(v string) *QueryVideoSummaryJobListResponseBodyJobListJobVideoSummaryResultOutputFile {
	s.Bucket = &v
	return s
}

type QueryVideoSummaryJobListResponseBodyJobListJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobInput) SetObject(v string) *QueryVideoSummaryJobListResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobInput) SetLocation(v string) *QueryVideoSummaryJobListResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *QueryVideoSummaryJobListResponseBodyJobListJobInput) SetBucket(v string) *QueryVideoSummaryJobListResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type QueryVideoSummaryJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryVideoSummaryJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryVideoSummaryJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryVideoSummaryJobListResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryVideoSummaryJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryVideoSummaryJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSummaryJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryVideoSummaryJobListResponse) SetHeaders(v map[string]*string) *QueryVideoSummaryJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryVideoSummaryJobListResponse) SetBody(v *QueryVideoSummaryJobListResponseBody) *QueryVideoSummaryJobListResponse {
	s.Body = v
	return s
}

type SubmitSmarttagJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Title                *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Content              *string `json:"Content,omitempty" xml:"Content,omitempty"`
	ContentType          *string `json:"ContentType,omitempty" xml:"ContentType,omitempty"`
	ContentAddr          *string `json:"ContentAddr,omitempty" xml:"ContentAddr,omitempty"`
	Params               *string `json:"Params,omitempty" xml:"Params,omitempty"`
	NotifyUrl            *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s SubmitSmarttagJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobRequest) SetOwnerId(v int64) *SubmitSmarttagJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetResourceOwnerAccount(v string) *SubmitSmarttagJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetResourceOwnerId(v int64) *SubmitSmarttagJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetOwnerAccount(v string) *SubmitSmarttagJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetPipelineId(v string) *SubmitSmarttagJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetTitle(v string) *SubmitSmarttagJobRequest {
	s.Title = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetContent(v string) *SubmitSmarttagJobRequest {
	s.Content = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetContentType(v string) *SubmitSmarttagJobRequest {
	s.ContentType = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetContentAddr(v string) *SubmitSmarttagJobRequest {
	s.ContentAddr = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetParams(v string) *SubmitSmarttagJobRequest {
	s.Params = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetNotifyUrl(v string) *SubmitSmarttagJobRequest {
	s.NotifyUrl = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetUserData(v string) *SubmitSmarttagJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetInput(v string) *SubmitSmarttagJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitSmarttagJobRequest) SetTemplateId(v string) *SubmitSmarttagJobRequest {
	s.TemplateId = &v
	return s
}

type SubmitSmarttagJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitSmarttagJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobResponseBody) SetRequestId(v string) *SubmitSmarttagJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitSmarttagJobResponseBody) SetJobId(v string) *SubmitSmarttagJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitSmarttagJobResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitSmarttagJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitSmarttagJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSmarttagJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSmarttagJobResponse) SetHeaders(v map[string]*string) *SubmitSmarttagJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSmarttagJobResponse) SetBody(v *SubmitSmarttagJobResponseBody) *SubmitSmarttagJobResponse {
	s.Body = v
	return s
}

type QuerySmarttagJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QuerySmarttagJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobRequest) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobRequest) SetOwnerId(v int64) *QuerySmarttagJobRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmarttagJobRequest) SetResourceOwnerAccount(v string) *QuerySmarttagJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmarttagJobRequest) SetResourceOwnerId(v int64) *QuerySmarttagJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmarttagJobRequest) SetOwnerAccount(v string) *QuerySmarttagJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QuerySmarttagJobRequest) SetJobId(v string) *QuerySmarttagJobRequest {
	s.JobId = &v
	return s
}

type QuerySmarttagJobResponseBody struct {
	JobStatus *string                              `json:"JobStatus,omitempty" xml:"JobStatus,omitempty"`
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserData  *string                              `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Results   *QuerySmarttagJobResponseBodyResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s QuerySmarttagJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBody) SetJobStatus(v string) *QuerySmarttagJobResponseBody {
	s.JobStatus = &v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetRequestId(v string) *QuerySmarttagJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetUserData(v string) *QuerySmarttagJobResponseBody {
	s.UserData = &v
	return s
}

func (s *QuerySmarttagJobResponseBody) SetResults(v *QuerySmarttagJobResponseBodyResults) *QuerySmarttagJobResponseBody {
	s.Results = v
	return s
}

type QuerySmarttagJobResponseBodyResults struct {
	Result []*QuerySmarttagJobResponseBodyResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QuerySmarttagJobResponseBodyResults) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBodyResults) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBodyResults) SetResult(v []*QuerySmarttagJobResponseBodyResultsResult) *QuerySmarttagJobResponseBodyResults {
	s.Result = v
	return s
}

type QuerySmarttagJobResponseBodyResultsResult struct {
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s QuerySmarttagJobResponseBodyResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponseBodyResultsResult) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponseBodyResultsResult) SetType(v string) *QuerySmarttagJobResponseBodyResultsResult {
	s.Type = &v
	return s
}

func (s *QuerySmarttagJobResponseBodyResultsResult) SetData(v string) *QuerySmarttagJobResponseBodyResultsResult {
	s.Data = &v
	return s
}

type QuerySmarttagJobResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySmarttagJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySmarttagJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagJobResponse) GoString() string {
	return s.String()
}

func (s *QuerySmarttagJobResponse) SetHeaders(v map[string]*string) *QuerySmarttagJobResponse {
	s.Headers = v
	return s
}

func (s *QuerySmarttagJobResponse) SetBody(v *QuerySmarttagJobResponseBody) *QuerySmarttagJobResponse {
	s.Body = v
	return s
}

type UpdateMediaCoverRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	CoverURL             *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateMediaCoverRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCoverRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaCoverRequest) SetOwnerId(v int64) *UpdateMediaCoverRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetResourceOwnerAccount(v string) *UpdateMediaCoverRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetResourceOwnerId(v int64) *UpdateMediaCoverRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetMediaId(v string) *UpdateMediaCoverRequest {
	s.MediaId = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetCoverURL(v string) *UpdateMediaCoverRequest {
	s.CoverURL = &v
	return s
}

func (s *UpdateMediaCoverRequest) SetOwnerAccount(v string) *UpdateMediaCoverRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateMediaCoverResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateMediaCoverResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCoverResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaCoverResponseBody) SetRequestId(v string) *UpdateMediaCoverResponseBody {
	s.RequestId = &v
	return s
}

type UpdateMediaCoverResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMediaCoverResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMediaCoverResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaCoverResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaCoverResponse) SetHeaders(v map[string]*string) *UpdateMediaCoverResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaCoverResponse) SetBody(v *UpdateMediaCoverResponseBody) *UpdateMediaCoverResponse {
	s.Body = v
	return s
}

type QueryIProductionJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobRequest) SetOwnerId(v int64) *QueryIProductionJobRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryIProductionJobRequest) SetResourceOwnerAccount(v string) *QueryIProductionJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryIProductionJobRequest) SetResourceOwnerId(v int64) *QueryIProductionJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryIProductionJobRequest) SetJobId(v string) *QueryIProductionJobRequest {
	s.JobId = &v
	return s
}

func (s *QueryIProductionJobRequest) SetOwnerAccount(v string) *QueryIProductionJobRequest {
	s.OwnerAccount = &v
	return s
}

type QueryIProductionJobResponseBody struct {
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	Input        *string `json:"Input,omitempty" xml:"Input,omitempty"`
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	Output       *string `json:"Output,omitempty" xml:"Output,omitempty"`
	PipelineId   *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	JobParams    *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Result       *string `json:"Result,omitempty" xml:"Result,omitempty"`
}

func (s QueryIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponseBody) SetFunctionName(v string) *QueryIProductionJobResponseBody {
	s.FunctionName = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetInput(v string) *QueryIProductionJobResponseBody {
	s.Input = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetRequestId(v string) *QueryIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetUserData(v string) *QueryIProductionJobResponseBody {
	s.UserData = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetState(v string) *QueryIProductionJobResponseBody {
	s.State = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetOutput(v string) *QueryIProductionJobResponseBody {
	s.Output = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetPipelineId(v string) *QueryIProductionJobResponseBody {
	s.PipelineId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetJobParams(v string) *QueryIProductionJobResponseBody {
	s.JobParams = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetJobId(v string) *QueryIProductionJobResponseBody {
	s.JobId = &v
	return s
}

func (s *QueryIProductionJobResponseBody) SetResult(v string) *QueryIProductionJobResponseBody {
	s.Result = &v
	return s
}

type QueryIProductionJobResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *QueryIProductionJobResponse) SetHeaders(v map[string]*string) *QueryIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *QueryIProductionJobResponse) SetBody(v *QueryIProductionJobResponseBody) *QueryIProductionJobResponse {
	s.Body = v
	return s
}

type ListMediaRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize      *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	From                 *string `json:"From,omitempty" xml:"From,omitempty"`
	To                   *string `json:"To,omitempty" xml:"To,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaRequest) GoString() string {
	return s.String()
}

func (s *ListMediaRequest) SetOwnerId(v int64) *ListMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *ListMediaRequest) SetResourceOwnerAccount(v string) *ListMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListMediaRequest) SetResourceOwnerId(v int64) *ListMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListMediaRequest) SetNextPageToken(v string) *ListMediaRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaRequest) SetMaximumPageSize(v int64) *ListMediaRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *ListMediaRequest) SetFrom(v string) *ListMediaRequest {
	s.From = &v
	return s
}

func (s *ListMediaRequest) SetTo(v string) *ListMediaRequest {
	s.To = &v
	return s
}

func (s *ListMediaRequest) SetOwnerAccount(v string) *ListMediaRequest {
	s.OwnerAccount = &v
	return s
}

type ListMediaResponseBody struct {
	MediaList     *ListMediaResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Struct"`
	RequestId     *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken *string                         `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
}

func (s ListMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBody) SetMediaList(v *ListMediaResponseBodyMediaList) *ListMediaResponseBody {
	s.MediaList = v
	return s
}

func (s *ListMediaResponseBody) SetRequestId(v string) *ListMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediaResponseBody) SetNextPageToken(v string) *ListMediaResponseBody {
	s.NextPageToken = &v
	return s
}

type ListMediaResponseBodyMediaList struct {
	Media []*ListMediaResponseBodyMediaListMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Repeated"`
}

func (s ListMediaResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaList) SetMedia(v []*ListMediaResponseBodyMediaListMedia) *ListMediaResponseBodyMediaList {
	s.Media = v
	return s
}

type ListMediaResponseBodyMediaListMedia struct {
	CreationTime *string                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CateId       *int64                                        `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Height       *string                                       `json:"Height,omitempty" xml:"Height,omitempty"`
	CensorState  *string                                       `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	Tags         *ListMediaResponseBodyMediaListMediaTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Bitrate      *string                                       `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	MediaId      *string                                       `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	File         *ListMediaResponseBodyMediaListMediaFile      `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	PublishState *string                                       `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	Description  *string                                       `json:"Description,omitempty" xml:"Description,omitempty"`
	Width        *string                                       `json:"Width,omitempty" xml:"Width,omitempty"`
	Size         *string                                       `json:"Size,omitempty" xml:"Size,omitempty"`
	CoverURL     *string                                       `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	RunIdList    *ListMediaResponseBodyMediaListMediaRunIdList `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Duration     *string                                       `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps          *string                                       `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Title        *string                                       `json:"Title,omitempty" xml:"Title,omitempty"`
	Format       *string                                       `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s ListMediaResponseBodyMediaListMedia) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaListMedia) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaListMedia) SetCreationTime(v string) *ListMediaResponseBodyMediaListMedia {
	s.CreationTime = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetCateId(v int64) *ListMediaResponseBodyMediaListMedia {
	s.CateId = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetHeight(v string) *ListMediaResponseBodyMediaListMedia {
	s.Height = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetCensorState(v string) *ListMediaResponseBodyMediaListMedia {
	s.CensorState = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetTags(v *ListMediaResponseBodyMediaListMediaTags) *ListMediaResponseBodyMediaListMedia {
	s.Tags = v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetBitrate(v string) *ListMediaResponseBodyMediaListMedia {
	s.Bitrate = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetMediaId(v string) *ListMediaResponseBodyMediaListMedia {
	s.MediaId = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetFile(v *ListMediaResponseBodyMediaListMediaFile) *ListMediaResponseBodyMediaListMedia {
	s.File = v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetPublishState(v string) *ListMediaResponseBodyMediaListMedia {
	s.PublishState = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetDescription(v string) *ListMediaResponseBodyMediaListMedia {
	s.Description = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetWidth(v string) *ListMediaResponseBodyMediaListMedia {
	s.Width = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetSize(v string) *ListMediaResponseBodyMediaListMedia {
	s.Size = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetCoverURL(v string) *ListMediaResponseBodyMediaListMedia {
	s.CoverURL = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetRunIdList(v *ListMediaResponseBodyMediaListMediaRunIdList) *ListMediaResponseBodyMediaListMedia {
	s.RunIdList = v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetDuration(v string) *ListMediaResponseBodyMediaListMedia {
	s.Duration = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetFps(v string) *ListMediaResponseBodyMediaListMedia {
	s.Fps = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetTitle(v string) *ListMediaResponseBodyMediaListMedia {
	s.Title = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMedia) SetFormat(v string) *ListMediaResponseBodyMediaListMedia {
	s.Format = &v
	return s
}

type ListMediaResponseBodyMediaListMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s ListMediaResponseBodyMediaListMediaTags) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaListMediaTags) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaListMediaTags) SetTag(v []*string) *ListMediaResponseBodyMediaListMediaTags {
	s.Tag = v
	return s
}

type ListMediaResponseBodyMediaListMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s ListMediaResponseBodyMediaListMediaFile) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaListMediaFile) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaListMediaFile) SetState(v string) *ListMediaResponseBodyMediaListMediaFile {
	s.State = &v
	return s
}

func (s *ListMediaResponseBodyMediaListMediaFile) SetURL(v string) *ListMediaResponseBodyMediaListMediaFile {
	s.URL = &v
	return s
}

type ListMediaResponseBodyMediaListMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s ListMediaResponseBodyMediaListMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponseBodyMediaListMediaRunIdList) GoString() string {
	return s.String()
}

func (s *ListMediaResponseBodyMediaListMediaRunIdList) SetRunId(v []*string) *ListMediaResponseBodyMediaListMediaRunIdList {
	s.RunId = v
	return s
}

type ListMediaResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaResponse) GoString() string {
	return s.String()
}

func (s *ListMediaResponse) SetHeaders(v map[string]*string) *ListMediaResponse {
	s.Headers = v
	return s
}

func (s *ListMediaResponse) SetBody(v *ListMediaResponseBody) *ListMediaResponse {
	s.Body = v
	return s
}

type GetPackageRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Data                 *string `json:"Data,omitempty" xml:"Data,omitempty"`
}

func (s GetPackageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPackageRequest) GoString() string {
	return s.String()
}

func (s *GetPackageRequest) SetOwnerId(v string) *GetPackageRequest {
	s.OwnerId = &v
	return s
}

func (s *GetPackageRequest) SetResourceOwnerId(v string) *GetPackageRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *GetPackageRequest) SetResourceOwnerAccount(v string) *GetPackageRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *GetPackageRequest) SetOwnerAccount(v string) *GetPackageRequest {
	s.OwnerAccount = &v
	return s
}

func (s *GetPackageRequest) SetData(v string) *GetPackageRequest {
	s.Data = &v
	return s
}

type GetPackageResponseBody struct {
	CertPackage *string `json:"CertPackage,omitempty" xml:"CertPackage,omitempty"`
	RequestId   *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s GetPackageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPackageResponseBody) GoString() string {
	return s.String()
}

func (s *GetPackageResponseBody) SetCertPackage(v string) *GetPackageResponseBody {
	s.CertPackage = &v
	return s
}

func (s *GetPackageResponseBody) SetRequestId(v string) *GetPackageResponseBody {
	s.RequestId = &v
	return s
}

type GetPackageResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetPackageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPackageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPackageResponse) GoString() string {
	return s.String()
}

func (s *GetPackageResponse) SetHeaders(v map[string]*string) *GetPackageResponse {
	s.Headers = v
	return s
}

func (s *GetPackageResponse) SetBody(v *GetPackageResponseBody) *GetPackageResponse {
	s.Body = v
	return s
}

type UpdateWaterMarkTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	WaterMarkTemplateId  *string `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Config               *string `json:"Config,omitempty" xml:"Config,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateWaterMarkTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateRequest) SetOwnerId(v int64) *UpdateWaterMarkTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetResourceOwnerAccount(v string) *UpdateWaterMarkTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetResourceOwnerId(v int64) *UpdateWaterMarkTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetWaterMarkTemplateId(v string) *UpdateWaterMarkTemplateRequest {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetName(v string) *UpdateWaterMarkTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetConfig(v string) *UpdateWaterMarkTemplateRequest {
	s.Config = &v
	return s
}

func (s *UpdateWaterMarkTemplateRequest) SetOwnerAccount(v string) *UpdateWaterMarkTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateWaterMarkTemplateResponseBody struct {
	WaterMarkTemplate *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate `json:"WaterMarkTemplate,omitempty" xml:"WaterMarkTemplate,omitempty" type:"Struct"`
	RequestId         *string                                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateWaterMarkTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponseBody) SetWaterMarkTemplate(v *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) *UpdateWaterMarkTemplateResponseBody {
	s.WaterMarkTemplate = v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBody) SetRequestId(v string) *UpdateWaterMarkTemplateResponseBody {
	s.RequestId = &v
	return s
}

type UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate struct {
	Type       *string                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	RatioRefer *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer `json:"RatioRefer,omitempty" xml:"RatioRefer,omitempty" type:"Struct"`
	ReferPos   *string                                                         `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	State      *string                                                         `json:"State,omitempty" xml:"State,omitempty"`
	Dx         *string                                                         `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width      *string                                                         `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	Timeline   *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline   `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	Name       *string                                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	Dy         *string                                                         `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Id         *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetType(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Type = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetRatioRefer(v *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.RatioRefer = v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetReferPos(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.ReferPos = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetState(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.State = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetDx(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Dx = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetWidth(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Width = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetHeight(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Height = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetTimeline(v *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Timeline = v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetName(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Name = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetDy(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Dy = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate) SetId(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Id = &v
	return s
}

type UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer struct {
	Dx     *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Dy     *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetDx(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Dx = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetWidth(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Width = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetHeight(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Height = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetDy(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Dy = &v
	return s
}

type UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) SetStart(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline {
	s.Start = &v
	return s
}

func (s *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) SetDuration(v string) *UpdateWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline {
	s.Duration = &v
	return s
}

type UpdateWaterMarkTemplateResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateWaterMarkTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateWaterMarkTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateWaterMarkTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateWaterMarkTemplateResponse) SetHeaders(v map[string]*string) *UpdateWaterMarkTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateWaterMarkTemplateResponse) SetBody(v *UpdateWaterMarkTemplateResponseBody) *UpdateWaterMarkTemplateResponse {
	s.Body = v
	return s
}

type QueryMcuTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s QueryMcuTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuTemplateRequest) GoString() string {
	return s.String()
}

func (s *QueryMcuTemplateRequest) SetOwnerId(v int64) *QueryMcuTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMcuTemplateRequest) SetResourceOwnerAccount(v string) *QueryMcuTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMcuTemplateRequest) SetResourceOwnerId(v int64) *QueryMcuTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMcuTemplateRequest) SetOwnerAccount(v string) *QueryMcuTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMcuTemplateRequest) SetTemplateId(v string) *QueryMcuTemplateRequest {
	s.TemplateId = &v
	return s
}

type QueryMcuTemplateResponseBody struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Templates *QueryMcuTemplateResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Struct"`
}

func (s QueryMcuTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMcuTemplateResponseBody) SetRequestId(v string) *QueryMcuTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMcuTemplateResponseBody) SetTemplates(v *QueryMcuTemplateResponseBodyTemplates) *QueryMcuTemplateResponseBody {
	s.Templates = v
	return s
}

type QueryMcuTemplateResponseBodyTemplates struct {
	Job []*QueryMcuTemplateResponseBodyTemplatesJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryMcuTemplateResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuTemplateResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *QueryMcuTemplateResponseBodyTemplates) SetJob(v []*QueryMcuTemplateResponseBodyTemplatesJob) *QueryMcuTemplateResponseBodyTemplates {
	s.Job = v
	return s
}

type QueryMcuTemplateResponseBodyTemplatesJob struct {
	Template   *string `json:"Template,omitempty" xml:"Template,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s QueryMcuTemplateResponseBodyTemplatesJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuTemplateResponseBodyTemplatesJob) GoString() string {
	return s.String()
}

func (s *QueryMcuTemplateResponseBodyTemplatesJob) SetTemplate(v string) *QueryMcuTemplateResponseBodyTemplatesJob {
	s.Template = &v
	return s
}

func (s *QueryMcuTemplateResponseBodyTemplatesJob) SetTemplateId(v string) *QueryMcuTemplateResponseBodyTemplatesJob {
	s.TemplateId = &v
	return s
}

type QueryMcuTemplateResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMcuTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMcuTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuTemplateResponse) GoString() string {
	return s.String()
}

func (s *QueryMcuTemplateResponse) SetHeaders(v map[string]*string) *QueryMcuTemplateResponse {
	s.Headers = v
	return s
}

func (s *QueryMcuTemplateResponse) SetBody(v *QueryMcuTemplateResponseBody) *QueryMcuTemplateResponse {
	s.Body = v
	return s
}

type ActivateMediaWorkflowRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ActivateMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s ActivateMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *ActivateMediaWorkflowRequest) SetOwnerId(v int64) *ActivateMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *ActivateMediaWorkflowRequest) SetResourceOwnerAccount(v string) *ActivateMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ActivateMediaWorkflowRequest) SetResourceOwnerId(v int64) *ActivateMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ActivateMediaWorkflowRequest) SetMediaWorkflowId(v string) *ActivateMediaWorkflowRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *ActivateMediaWorkflowRequest) SetOwnerAccount(v string) *ActivateMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

type ActivateMediaWorkflowResponseBody struct {
	RequestId     *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MediaWorkflow *ActivateMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
}

func (s ActivateMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ActivateMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *ActivateMediaWorkflowResponseBody) SetRequestId(v string) *ActivateMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBody) SetMediaWorkflow(v *ActivateMediaWorkflowResponseBodyMediaWorkflow) *ActivateMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

type ActivateMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s ActivateMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s ActivateMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *ActivateMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *ActivateMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type ActivateMediaWorkflowResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ActivateMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ActivateMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s ActivateMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *ActivateMediaWorkflowResponse) SetHeaders(v map[string]*string) *ActivateMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *ActivateMediaWorkflowResponse) SetBody(v *ActivateMediaWorkflowResponseBody) *ActivateMediaWorkflowResponse {
	s.Body = v
	return s
}

type SearchMediaRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	From                 *string `json:"From,omitempty" xml:"From,omitempty"`
	To                   *string `json:"To,omitempty" xml:"To,omitempty"`
	KeyWord              *string `json:"KeyWord,omitempty" xml:"KeyWord,omitempty"`
	Title                *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Tag                  *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	CateId               *string `json:"CateId,omitempty" xml:"CateId,omitempty"`
	SortBy               *string `json:"SortBy,omitempty" xml:"SortBy,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SearchMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaRequest) GoString() string {
	return s.String()
}

func (s *SearchMediaRequest) SetOwnerId(v int64) *SearchMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchMediaRequest) SetResourceOwnerAccount(v string) *SearchMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchMediaRequest) SetResourceOwnerId(v int64) *SearchMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchMediaRequest) SetFrom(v string) *SearchMediaRequest {
	s.From = &v
	return s
}

func (s *SearchMediaRequest) SetTo(v string) *SearchMediaRequest {
	s.To = &v
	return s
}

func (s *SearchMediaRequest) SetKeyWord(v string) *SearchMediaRequest {
	s.KeyWord = &v
	return s
}

func (s *SearchMediaRequest) SetTitle(v string) *SearchMediaRequest {
	s.Title = &v
	return s
}

func (s *SearchMediaRequest) SetDescription(v string) *SearchMediaRequest {
	s.Description = &v
	return s
}

func (s *SearchMediaRequest) SetTag(v string) *SearchMediaRequest {
	s.Tag = &v
	return s
}

func (s *SearchMediaRequest) SetCateId(v string) *SearchMediaRequest {
	s.CateId = &v
	return s
}

func (s *SearchMediaRequest) SetSortBy(v string) *SearchMediaRequest {
	s.SortBy = &v
	return s
}

func (s *SearchMediaRequest) SetPageSize(v int64) *SearchMediaRequest {
	s.PageSize = &v
	return s
}

func (s *SearchMediaRequest) SetPageNumber(v int64) *SearchMediaRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchMediaRequest) SetOwnerAccount(v string) *SearchMediaRequest {
	s.OwnerAccount = &v
	return s
}

type SearchMediaResponseBody struct {
	MediaList  *SearchMediaResponseBodyMediaList `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Struct"`
	TotalNum   *int64                            `json:"TotalNum,omitempty" xml:"TotalNum,omitempty"`
	PageSize   *int64                            `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber *int64                            `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
}

func (s SearchMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBody) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBody) SetMediaList(v *SearchMediaResponseBodyMediaList) *SearchMediaResponseBody {
	s.MediaList = v
	return s
}

func (s *SearchMediaResponseBody) SetTotalNum(v int64) *SearchMediaResponseBody {
	s.TotalNum = &v
	return s
}

func (s *SearchMediaResponseBody) SetPageSize(v int64) *SearchMediaResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchMediaResponseBody) SetRequestId(v string) *SearchMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchMediaResponseBody) SetPageNumber(v int64) *SearchMediaResponseBody {
	s.PageNumber = &v
	return s
}

type SearchMediaResponseBodyMediaList struct {
	Media []*SearchMediaResponseBodyMediaListMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Repeated"`
}

func (s SearchMediaResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaList) SetMedia(v []*SearchMediaResponseBodyMediaListMedia) *SearchMediaResponseBodyMediaList {
	s.Media = v
	return s
}

type SearchMediaResponseBodyMediaListMedia struct {
	CreationTime *string                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CateId       *int64                                          `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Height       *string                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	Tags         *SearchMediaResponseBodyMediaListMediaTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Bitrate      *string                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	MediaId      *string                                         `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	File         *SearchMediaResponseBodyMediaListMediaFile      `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	PublishState *string                                         `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	Description  *string                                         `json:"Description,omitempty" xml:"Description,omitempty"`
	Width        *string                                         `json:"Width,omitempty" xml:"Width,omitempty"`
	Size         *string                                         `json:"Size,omitempty" xml:"Size,omitempty"`
	CoverURL     *string                                         `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	RunIdList    *SearchMediaResponseBodyMediaListMediaRunIdList `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Duration     *string                                         `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps          *string                                         `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Title        *string                                         `json:"Title,omitempty" xml:"Title,omitempty"`
	Format       *string                                         `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SearchMediaResponseBodyMediaListMedia) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaListMedia) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaListMedia) SetCreationTime(v string) *SearchMediaResponseBodyMediaListMedia {
	s.CreationTime = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetCateId(v int64) *SearchMediaResponseBodyMediaListMedia {
	s.CateId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetHeight(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Height = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetTags(v *SearchMediaResponseBodyMediaListMediaTags) *SearchMediaResponseBodyMediaListMedia {
	s.Tags = v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetBitrate(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Bitrate = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetMediaId(v string) *SearchMediaResponseBodyMediaListMedia {
	s.MediaId = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetFile(v *SearchMediaResponseBodyMediaListMediaFile) *SearchMediaResponseBodyMediaListMedia {
	s.File = v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetPublishState(v string) *SearchMediaResponseBodyMediaListMedia {
	s.PublishState = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetDescription(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Description = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetWidth(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Width = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetSize(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Size = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetCoverURL(v string) *SearchMediaResponseBodyMediaListMedia {
	s.CoverURL = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetRunIdList(v *SearchMediaResponseBodyMediaListMediaRunIdList) *SearchMediaResponseBodyMediaListMedia {
	s.RunIdList = v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetDuration(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Duration = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetFps(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Fps = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetTitle(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Title = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMedia) SetFormat(v string) *SearchMediaResponseBodyMediaListMedia {
	s.Format = &v
	return s
}

type SearchMediaResponseBodyMediaListMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s SearchMediaResponseBodyMediaListMediaTags) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaListMediaTags) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaListMediaTags) SetTag(v []*string) *SearchMediaResponseBodyMediaListMediaTags {
	s.Tag = v
	return s
}

type SearchMediaResponseBodyMediaListMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s SearchMediaResponseBodyMediaListMediaFile) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaListMediaFile) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaListMediaFile) SetState(v string) *SearchMediaResponseBodyMediaListMediaFile {
	s.State = &v
	return s
}

func (s *SearchMediaResponseBodyMediaListMediaFile) SetURL(v string) *SearchMediaResponseBodyMediaListMediaFile {
	s.URL = &v
	return s
}

type SearchMediaResponseBodyMediaListMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s SearchMediaResponseBodyMediaListMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponseBodyMediaListMediaRunIdList) GoString() string {
	return s.String()
}

func (s *SearchMediaResponseBodyMediaListMediaRunIdList) SetRunId(v []*string) *SearchMediaResponseBodyMediaListMediaRunIdList {
	s.RunId = v
	return s
}

type SearchMediaResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchMediaResponse) GoString() string {
	return s.String()
}

func (s *SearchMediaResponse) SetHeaders(v map[string]*string) *SearchMediaResponse {
	s.Headers = v
	return s
}

func (s *SearchMediaResponse) SetBody(v *SearchMediaResponseBody) *SearchMediaResponse {
	s.Body = v
	return s
}

type SubmitTerrorismJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	TerrorismConfig      *string `json:"TerrorismConfig,omitempty" xml:"TerrorismConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitTerrorismJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTerrorismJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTerrorismJobRequest) SetOwnerId(v int64) *SubmitTerrorismJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitTerrorismJobRequest) SetResourceOwnerAccount(v string) *SubmitTerrorismJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitTerrorismJobRequest) SetResourceOwnerId(v int64) *SubmitTerrorismJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitTerrorismJobRequest) SetInput(v string) *SubmitTerrorismJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitTerrorismJobRequest) SetPipelineId(v string) *SubmitTerrorismJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitTerrorismJobRequest) SetTerrorismConfig(v string) *SubmitTerrorismJobRequest {
	s.TerrorismConfig = &v
	return s
}

func (s *SubmitTerrorismJobRequest) SetUserData(v string) *SubmitTerrorismJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitTerrorismJobRequest) SetOwnerAccount(v string) *SubmitTerrorismJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitTerrorismJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitTerrorismJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTerrorismJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTerrorismJobResponseBody) SetRequestId(v string) *SubmitTerrorismJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitTerrorismJobResponseBody) SetJobId(v string) *SubmitTerrorismJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitTerrorismJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitTerrorismJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitTerrorismJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTerrorismJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTerrorismJobResponse) SetHeaders(v map[string]*string) *SubmitTerrorismJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTerrorismJobResponse) SetBody(v *SubmitTerrorismJobResponseBody) *SubmitTerrorismJobResponse {
	s.Body = v
	return s
}

type AddCategoryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	CateName             *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	ParentId             *int64  `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryRequest) GoString() string {
	return s.String()
}

func (s *AddCategoryRequest) SetOwnerId(v int64) *AddCategoryRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCategoryRequest) SetResourceOwnerAccount(v string) *AddCategoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddCategoryRequest) SetResourceOwnerId(v int64) *AddCategoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddCategoryRequest) SetCateName(v string) *AddCategoryRequest {
	s.CateName = &v
	return s
}

func (s *AddCategoryRequest) SetParentId(v int64) *AddCategoryRequest {
	s.ParentId = &v
	return s
}

func (s *AddCategoryRequest) SetOwnerAccount(v string) *AddCategoryRequest {
	s.OwnerAccount = &v
	return s
}

type AddCategoryResponseBody struct {
	Category  *AddCategoryResponseBodyCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Struct"`
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBody) SetCategory(v *AddCategoryResponseBodyCategory) *AddCategoryResponseBody {
	s.Category = v
	return s
}

func (s *AddCategoryResponseBody) SetRequestId(v string) *AddCategoryResponseBody {
	s.RequestId = &v
	return s
}

type AddCategoryResponseBodyCategory struct {
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	CateId   *string `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Level    *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s AddCategoryResponseBodyCategory) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponseBodyCategory) GoString() string {
	return s.String()
}

func (s *AddCategoryResponseBodyCategory) SetCateName(v string) *AddCategoryResponseBodyCategory {
	s.CateName = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetParentId(v string) *AddCategoryResponseBodyCategory {
	s.ParentId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetCateId(v string) *AddCategoryResponseBodyCategory {
	s.CateId = &v
	return s
}

func (s *AddCategoryResponseBodyCategory) SetLevel(v string) *AddCategoryResponseBodyCategory {
	s.Level = &v
	return s
}

type AddCategoryResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCategoryResponse) GoString() string {
	return s.String()
}

func (s *AddCategoryResponse) SetHeaders(v map[string]*string) *AddCategoryResponse {
	s.Headers = v
	return s
}

func (s *AddCategoryResponse) SetBody(v *AddCategoryResponseBody) *AddCategoryResponse {
	s.Body = v
	return s
}

type QueryInnerJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryInnerJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryInnerJobRequest) GoString() string {
	return s.String()
}

func (s *QueryInnerJobRequest) SetOwnerId(v int64) *QueryInnerJobRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryInnerJobRequest) SetResourceOwnerAccount(v string) *QueryInnerJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryInnerJobRequest) SetResourceOwnerId(v int64) *QueryInnerJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryInnerJobRequest) SetJobId(v string) *QueryInnerJobRequest {
	s.JobId = &v
	return s
}

type QueryInnerJobResponseBody struct {
	Status     *string                         `json:"Status,omitempty" xml:"Status,omitempty"`
	Suggestion *string                         `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	RequestId  *string                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Video      *QueryInnerJobResponseBodyVideo `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	Image      *QueryInnerJobResponseBodyImage `json:"Image,omitempty" xml:"Image,omitempty" type:"Struct"`
}

func (s QueryInnerJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryInnerJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryInnerJobResponseBody) SetStatus(v string) *QueryInnerJobResponseBody {
	s.Status = &v
	return s
}

func (s *QueryInnerJobResponseBody) SetSuggestion(v string) *QueryInnerJobResponseBody {
	s.Suggestion = &v
	return s
}

func (s *QueryInnerJobResponseBody) SetRequestId(v string) *QueryInnerJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryInnerJobResponseBody) SetVideo(v *QueryInnerJobResponseBodyVideo) *QueryInnerJobResponseBody {
	s.Video = v
	return s
}

func (s *QueryInnerJobResponseBody) SetImage(v *QueryInnerJobResponseBodyImage) *QueryInnerJobResponseBody {
	s.Image = v
	return s
}

type QueryInnerJobResponseBodyVideo struct {
	Index  *int32  `json:"Index,omitempty" xml:"Index,omitempty"`
	Result *int32  `json:"Result,omitempty" xml:"Result,omitempty"`
	Code   *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s QueryInnerJobResponseBodyVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryInnerJobResponseBodyVideo) GoString() string {
	return s.String()
}

func (s *QueryInnerJobResponseBodyVideo) SetIndex(v int32) *QueryInnerJobResponseBodyVideo {
	s.Index = &v
	return s
}

func (s *QueryInnerJobResponseBodyVideo) SetResult(v int32) *QueryInnerJobResponseBodyVideo {
	s.Result = &v
	return s
}

func (s *QueryInnerJobResponseBodyVideo) SetCode(v string) *QueryInnerJobResponseBodyVideo {
	s.Code = &v
	return s
}

type QueryInnerJobResponseBodyImage struct {
	Result []*QueryInnerJobResponseBodyImageResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryInnerJobResponseBodyImage) String() string {
	return tea.Prettify(s)
}

func (s QueryInnerJobResponseBodyImage) GoString() string {
	return s.String()
}

func (s *QueryInnerJobResponseBodyImage) SetResult(v []*QueryInnerJobResponseBodyImageResult) *QueryInnerJobResponseBodyImage {
	s.Result = v
	return s
}

type QueryInnerJobResponseBodyImageResult struct {
	Index  *int32  `json:"Index,omitempty" xml:"Index,omitempty"`
	Result *int32  `json:"Result,omitempty" xml:"Result,omitempty"`
	Code   *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s QueryInnerJobResponseBodyImageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryInnerJobResponseBodyImageResult) GoString() string {
	return s.String()
}

func (s *QueryInnerJobResponseBodyImageResult) SetIndex(v int32) *QueryInnerJobResponseBodyImageResult {
	s.Index = &v
	return s
}

func (s *QueryInnerJobResponseBodyImageResult) SetResult(v int32) *QueryInnerJobResponseBodyImageResult {
	s.Result = &v
	return s
}

func (s *QueryInnerJobResponseBodyImageResult) SetCode(v string) *QueryInnerJobResponseBodyImageResult {
	s.Code = &v
	return s
}

type QueryInnerJobResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryInnerJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryInnerJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryInnerJobResponse) GoString() string {
	return s.String()
}

func (s *QueryInnerJobResponse) SetHeaders(v map[string]*string) *QueryInnerJobResponse {
	s.Headers = v
	return s
}

func (s *QueryInnerJobResponse) SetBody(v *QueryInnerJobResponseBody) *QueryInnerJobResponse {
	s.Body = v
	return s
}

type ListFpShotFilesRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	PageSize             *int32  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	FpDBId               *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListFpShotFilesRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotFilesRequest) GoString() string {
	return s.String()
}

func (s *ListFpShotFilesRequest) SetOwnerId(v int64) *ListFpShotFilesRequest {
	s.OwnerId = &v
	return s
}

func (s *ListFpShotFilesRequest) SetResourceOwnerAccount(v string) *ListFpShotFilesRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListFpShotFilesRequest) SetResourceOwnerId(v int64) *ListFpShotFilesRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListFpShotFilesRequest) SetNextPageToken(v string) *ListFpShotFilesRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListFpShotFilesRequest) SetPageSize(v int32) *ListFpShotFilesRequest {
	s.PageSize = &v
	return s
}

func (s *ListFpShotFilesRequest) SetFpDBId(v string) *ListFpShotFilesRequest {
	s.FpDBId = &v
	return s
}

func (s *ListFpShotFilesRequest) SetOwnerAccount(v string) *ListFpShotFilesRequest {
	s.OwnerAccount = &v
	return s
}

type ListFpShotFilesResponseBody struct {
	RequestId      *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken  *string                                    `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	FpShotFileList *ListFpShotFilesResponseBodyFpShotFileList `json:"FpShotFileList,omitempty" xml:"FpShotFileList,omitempty" type:"Struct"`
}

func (s ListFpShotFilesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotFilesResponseBody) GoString() string {
	return s.String()
}

func (s *ListFpShotFilesResponseBody) SetRequestId(v string) *ListFpShotFilesResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFpShotFilesResponseBody) SetNextPageToken(v string) *ListFpShotFilesResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *ListFpShotFilesResponseBody) SetFpShotFileList(v *ListFpShotFilesResponseBodyFpShotFileList) *ListFpShotFilesResponseBody {
	s.FpShotFileList = v
	return s
}

type ListFpShotFilesResponseBodyFpShotFileList struct {
	FpShotFile []*ListFpShotFilesResponseBodyFpShotFileListFpShotFile `json:"FpShotFile,omitempty" xml:"FpShotFile,omitempty" type:"Repeated"`
}

func (s ListFpShotFilesResponseBodyFpShotFileList) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotFilesResponseBodyFpShotFileList) GoString() string {
	return s.String()
}

func (s *ListFpShotFilesResponseBodyFpShotFileList) SetFpShotFile(v []*ListFpShotFilesResponseBodyFpShotFileListFpShotFile) *ListFpShotFilesResponseBodyFpShotFileList {
	s.FpShotFile = v
	return s
}

type ListFpShotFilesResponseBodyFpShotFileListFpShotFile struct {
	PrimaryKey *string                                                       `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	InputFile  *ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	FileId     *string                                                       `json:"FileId,omitempty" xml:"FileId,omitempty"`
}

func (s ListFpShotFilesResponseBodyFpShotFileListFpShotFile) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotFilesResponseBodyFpShotFileListFpShotFile) GoString() string {
	return s.String()
}

func (s *ListFpShotFilesResponseBodyFpShotFileListFpShotFile) SetPrimaryKey(v string) *ListFpShotFilesResponseBodyFpShotFileListFpShotFile {
	s.PrimaryKey = &v
	return s
}

func (s *ListFpShotFilesResponseBodyFpShotFileListFpShotFile) SetInputFile(v *ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile) *ListFpShotFilesResponseBodyFpShotFileListFpShotFile {
	s.InputFile = v
	return s
}

func (s *ListFpShotFilesResponseBodyFpShotFileListFpShotFile) SetFileId(v string) *ListFpShotFilesResponseBodyFpShotFileListFpShotFile {
	s.FileId = &v
	return s
}

type ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile) GoString() string {
	return s.String()
}

func (s *ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile) SetObject(v string) *ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile {
	s.Object = &v
	return s
}

func (s *ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile) SetLocation(v string) *ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile {
	s.Location = &v
	return s
}

func (s *ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile) SetBucket(v string) *ListFpShotFilesResponseBodyFpShotFileListFpShotFileInputFile {
	s.Bucket = &v
	return s
}

type ListFpShotFilesResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFpShotFilesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFpShotFilesResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotFilesResponse) GoString() string {
	return s.String()
}

func (s *ListFpShotFilesResponse) SetHeaders(v map[string]*string) *ListFpShotFilesResponse {
	s.Headers = v
	return s
}

func (s *ListFpShotFilesResponse) SetBody(v *ListFpShotFilesResponseBody) *ListFpShotFilesResponse {
	s.Body = v
	return s
}

type QueryTerrorismPipelineListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineIds          *string `json:"PipelineIds,omitempty" xml:"PipelineIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryTerrorismPipelineListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismPipelineListRequest) GoString() string {
	return s.String()
}

func (s *QueryTerrorismPipelineListRequest) SetOwnerId(v int64) *QueryTerrorismPipelineListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryTerrorismPipelineListRequest) SetResourceOwnerAccount(v string) *QueryTerrorismPipelineListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryTerrorismPipelineListRequest) SetResourceOwnerId(v int64) *QueryTerrorismPipelineListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTerrorismPipelineListRequest) SetPipelineIds(v string) *QueryTerrorismPipelineListRequest {
	s.PipelineIds = &v
	return s
}

func (s *QueryTerrorismPipelineListRequest) SetOwnerAccount(v string) *QueryTerrorismPipelineListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryTerrorismPipelineListResponseBody struct {
	RequestId    *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PipelineList *QueryTerrorismPipelineListResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
	NonExistIds  *QueryTerrorismPipelineListResponseBodyNonExistIds  `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryTerrorismPipelineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismPipelineListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTerrorismPipelineListResponseBody) SetRequestId(v string) *QueryTerrorismPipelineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTerrorismPipelineListResponseBody) SetPipelineList(v *QueryTerrorismPipelineListResponseBodyPipelineList) *QueryTerrorismPipelineListResponseBody {
	s.PipelineList = v
	return s
}

func (s *QueryTerrorismPipelineListResponseBody) SetNonExistIds(v *QueryTerrorismPipelineListResponseBodyNonExistIds) *QueryTerrorismPipelineListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryTerrorismPipelineListResponseBodyPipelineList struct {
	Pipeline []*QueryTerrorismPipelineListResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s QueryTerrorismPipelineListResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismPipelineListResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *QueryTerrorismPipelineListResponseBodyPipelineList) SetPipeline(v []*QueryTerrorismPipelineListResponseBodyPipelineListPipeline) *QueryTerrorismPipelineListResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type QueryTerrorismPipelineListResponseBodyPipelineListPipeline struct {
	State        *string                                                                 `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                                 `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                                 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryTerrorismPipelineListResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismPipelineListResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *QueryTerrorismPipelineListResponseBodyPipelineListPipeline) SetState(v string) *QueryTerrorismPipelineListResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *QueryTerrorismPipelineListResponseBodyPipelineListPipeline) SetNotifyConfig(v *QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig) *QueryTerrorismPipelineListResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *QueryTerrorismPipelineListResponseBodyPipelineListPipeline) SetPriority(v string) *QueryTerrorismPipelineListResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *QueryTerrorismPipelineListResponseBodyPipelineListPipeline) SetName(v string) *QueryTerrorismPipelineListResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *QueryTerrorismPipelineListResponseBodyPipelineListPipeline) SetId(v string) *QueryTerrorismPipelineListResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetQueue(v string) *QueryTerrorismPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type QueryTerrorismPipelineListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryTerrorismPipelineListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismPipelineListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryTerrorismPipelineListResponseBodyNonExistIds) SetString_(v []*string) *QueryTerrorismPipelineListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryTerrorismPipelineListResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTerrorismPipelineListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTerrorismPipelineListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismPipelineListResponse) GoString() string {
	return s.String()
}

func (s *QueryTerrorismPipelineListResponse) SetHeaders(v map[string]*string) *QueryTerrorismPipelineListResponse {
	s.Headers = v
	return s
}

func (s *QueryTerrorismPipelineListResponse) SetBody(v *QueryTerrorismPipelineListResponseBody) *QueryTerrorismPipelineListResponse {
	s.Body = v
	return s
}

type AddMediaRequest struct {
	OwnerId               *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount  *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId       *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	FileURL               *string `json:"FileURL,omitempty" xml:"FileURL,omitempty"`
	Title                 *string `json:"Title,omitempty" xml:"Title,omitempty"`
	Description           *string `json:"Description,omitempty" xml:"Description,omitempty"`
	CoverURL              *string `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	Tags                  *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
	MediaWorkflowId       *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowUserData *string `json:"MediaWorkflowUserData,omitempty" xml:"MediaWorkflowUserData,omitempty"`
	InputUnbind           *bool   `json:"InputUnbind,omitempty" xml:"InputUnbind,omitempty"`
	CateId                *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	OverrideParams        *string `json:"OverrideParams,omitempty" xml:"OverrideParams,omitempty"`
	OwnerAccount          *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaRequest) GoString() string {
	return s.String()
}

func (s *AddMediaRequest) SetOwnerId(v int64) *AddMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMediaRequest) SetResourceOwnerAccount(v string) *AddMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddMediaRequest) SetResourceOwnerId(v int64) *AddMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddMediaRequest) SetFileURL(v string) *AddMediaRequest {
	s.FileURL = &v
	return s
}

func (s *AddMediaRequest) SetTitle(v string) *AddMediaRequest {
	s.Title = &v
	return s
}

func (s *AddMediaRequest) SetDescription(v string) *AddMediaRequest {
	s.Description = &v
	return s
}

func (s *AddMediaRequest) SetCoverURL(v string) *AddMediaRequest {
	s.CoverURL = &v
	return s
}

func (s *AddMediaRequest) SetTags(v string) *AddMediaRequest {
	s.Tags = &v
	return s
}

func (s *AddMediaRequest) SetMediaWorkflowId(v string) *AddMediaRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *AddMediaRequest) SetMediaWorkflowUserData(v string) *AddMediaRequest {
	s.MediaWorkflowUserData = &v
	return s
}

func (s *AddMediaRequest) SetInputUnbind(v bool) *AddMediaRequest {
	s.InputUnbind = &v
	return s
}

func (s *AddMediaRequest) SetCateId(v int64) *AddMediaRequest {
	s.CateId = &v
	return s
}

func (s *AddMediaRequest) SetOverrideParams(v string) *AddMediaRequest {
	s.OverrideParams = &v
	return s
}

func (s *AddMediaRequest) SetOwnerAccount(v string) *AddMediaRequest {
	s.OwnerAccount = &v
	return s
}

type AddMediaResponseBody struct {
	RequestId *string                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Media     *AddMediaResponseBodyMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Struct"`
}

func (s AddMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBody) SetRequestId(v string) *AddMediaResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMediaResponseBody) SetMedia(v *AddMediaResponseBodyMedia) *AddMediaResponseBody {
	s.Media = v
	return s
}

type AddMediaResponseBodyMedia struct {
	CreationTime *string                             `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CateId       *int64                              `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Height       *string                             `json:"Height,omitempty" xml:"Height,omitempty"`
	CensorState  *string                             `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	Tags         *AddMediaResponseBodyMediaTags      `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	Bitrate      *string                             `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	MediaId      *string                             `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	File         *AddMediaResponseBodyMediaFile      `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	PublishState *string                             `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	Description  *string                             `json:"Description,omitempty" xml:"Description,omitempty"`
	Width        *string                             `json:"Width,omitempty" xml:"Width,omitempty"`
	Size         *string                             `json:"Size,omitempty" xml:"Size,omitempty"`
	CoverURL     *string                             `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	RunIdList    *AddMediaResponseBodyMediaRunIdList `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Duration     *string                             `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps          *string                             `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Title        *string                             `json:"Title,omitempty" xml:"Title,omitempty"`
	Format       *string                             `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s AddMediaResponseBodyMedia) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBodyMedia) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBodyMedia) SetCreationTime(v string) *AddMediaResponseBodyMedia {
	s.CreationTime = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetCateId(v int64) *AddMediaResponseBodyMedia {
	s.CateId = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetHeight(v string) *AddMediaResponseBodyMedia {
	s.Height = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetCensorState(v string) *AddMediaResponseBodyMedia {
	s.CensorState = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetTags(v *AddMediaResponseBodyMediaTags) *AddMediaResponseBodyMedia {
	s.Tags = v
	return s
}

func (s *AddMediaResponseBodyMedia) SetBitrate(v string) *AddMediaResponseBodyMedia {
	s.Bitrate = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetMediaId(v string) *AddMediaResponseBodyMedia {
	s.MediaId = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetFile(v *AddMediaResponseBodyMediaFile) *AddMediaResponseBodyMedia {
	s.File = v
	return s
}

func (s *AddMediaResponseBodyMedia) SetPublishState(v string) *AddMediaResponseBodyMedia {
	s.PublishState = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetDescription(v string) *AddMediaResponseBodyMedia {
	s.Description = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetWidth(v string) *AddMediaResponseBodyMedia {
	s.Width = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetSize(v string) *AddMediaResponseBodyMedia {
	s.Size = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetCoverURL(v string) *AddMediaResponseBodyMedia {
	s.CoverURL = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetRunIdList(v *AddMediaResponseBodyMediaRunIdList) *AddMediaResponseBodyMedia {
	s.RunIdList = v
	return s
}

func (s *AddMediaResponseBodyMedia) SetDuration(v string) *AddMediaResponseBodyMedia {
	s.Duration = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetFps(v string) *AddMediaResponseBodyMedia {
	s.Fps = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetTitle(v string) *AddMediaResponseBodyMedia {
	s.Title = &v
	return s
}

func (s *AddMediaResponseBodyMedia) SetFormat(v string) *AddMediaResponseBodyMedia {
	s.Format = &v
	return s
}

type AddMediaResponseBodyMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s AddMediaResponseBodyMediaTags) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBodyMediaTags) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBodyMediaTags) SetTag(v []*string) *AddMediaResponseBodyMediaTags {
	s.Tag = v
	return s
}

type AddMediaResponseBodyMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s AddMediaResponseBodyMediaFile) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBodyMediaFile) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBodyMediaFile) SetState(v string) *AddMediaResponseBodyMediaFile {
	s.State = &v
	return s
}

func (s *AddMediaResponseBodyMediaFile) SetURL(v string) *AddMediaResponseBodyMediaFile {
	s.URL = &v
	return s
}

type AddMediaResponseBodyMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s AddMediaResponseBodyMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponseBodyMediaRunIdList) GoString() string {
	return s.String()
}

func (s *AddMediaResponseBodyMediaRunIdList) SetRunId(v []*string) *AddMediaResponseBodyMediaRunIdList {
	s.RunId = v
	return s
}

type AddMediaResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaResponse) GoString() string {
	return s.String()
}

func (s *AddMediaResponse) SetHeaders(v map[string]*string) *AddMediaResponse {
	s.Headers = v
	return s
}

func (s *AddMediaResponse) SetBody(v *AddMediaResponseBody) *AddMediaResponse {
	s.Body = v
	return s
}

type StopIProductionJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s StopIProductionJobRequest) String() string {
	return tea.Prettify(s)
}

func (s StopIProductionJobRequest) GoString() string {
	return s.String()
}

func (s *StopIProductionJobRequest) SetOwnerId(v int64) *StopIProductionJobRequest {
	s.OwnerId = &v
	return s
}

func (s *StopIProductionJobRequest) SetResourceOwnerAccount(v string) *StopIProductionJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *StopIProductionJobRequest) SetResourceOwnerId(v int64) *StopIProductionJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *StopIProductionJobRequest) SetJobId(v string) *StopIProductionJobRequest {
	s.JobId = &v
	return s
}

func (s *StopIProductionJobRequest) SetOwnerAccount(v string) *StopIProductionJobRequest {
	s.OwnerAccount = &v
	return s
}

type StopIProductionJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s StopIProductionJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopIProductionJobResponseBody) GoString() string {
	return s.String()
}

func (s *StopIProductionJobResponseBody) SetRequestId(v string) *StopIProductionJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopIProductionJobResponseBody) SetJobId(v string) *StopIProductionJobResponseBody {
	s.JobId = &v
	return s
}

type StopIProductionJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *StopIProductionJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopIProductionJobResponse) String() string {
	return tea.Prettify(s)
}

func (s StopIProductionJobResponse) GoString() string {
	return s.String()
}

func (s *StopIProductionJobResponse) SetHeaders(v map[string]*string) *StopIProductionJobResponse {
	s.Headers = v
	return s
}

func (s *StopIProductionJobResponse) SetBody(v *StopIProductionJobResponseBody) *StopIProductionJobResponse {
	s.Body = v
	return s
}

type DeleteMcuTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteMcuTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcuTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteMcuTemplateRequest) SetOwnerId(v int64) *DeleteMcuTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMcuTemplateRequest) SetResourceOwnerAccount(v string) *DeleteMcuTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMcuTemplateRequest) SetResourceOwnerId(v int64) *DeleteMcuTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteMcuTemplateRequest) SetOwnerAccount(v string) *DeleteMcuTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *DeleteMcuTemplateRequest) SetTemplateId(v string) *DeleteMcuTemplateRequest {
	s.TemplateId = &v
	return s
}

type DeleteMcuTemplateResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteMcuTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcuTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMcuTemplateResponseBody) SetRequestId(v string) *DeleteMcuTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMcuTemplateResponseBody) SetTemplateId(v string) *DeleteMcuTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type DeleteMcuTemplateResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMcuTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMcuTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMcuTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteMcuTemplateResponse) SetHeaders(v map[string]*string) *DeleteMcuTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteMcuTemplateResponse) SetBody(v *DeleteMcuTemplateResponseBody) *DeleteMcuTemplateResponse {
	s.Body = v
	return s
}

type QueryMediaCensorJobListRequest struct {
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount       *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                      *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OwnerAccount               *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	NextPageToken              *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize            *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	State                      *string `json:"State,omitempty" xml:"State,omitempty"`
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	EndOfJobCreatedTimeRange   *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	PipelineId                 *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s QueryMediaCensorJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListRequest) SetOwnerId(v int64) *QueryMediaCensorJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetResourceOwnerAccount(v string) *QueryMediaCensorJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetResourceOwnerId(v int64) *QueryMediaCensorJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetJobId(v string) *QueryMediaCensorJobListRequest {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetOwnerAccount(v string) *QueryMediaCensorJobListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetNextPageToken(v string) *QueryMediaCensorJobListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetMaximumPageSize(v int64) *QueryMediaCensorJobListRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetState(v string) *QueryMediaCensorJobListRequest {
	s.State = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetStartOfJobCreatedTimeRange(v string) *QueryMediaCensorJobListRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetEndOfJobCreatedTimeRange(v string) *QueryMediaCensorJobListRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryMediaCensorJobListRequest) SetPipelineId(v string) *QueryMediaCensorJobListRequest {
	s.PipelineId = &v
	return s
}

type QueryMediaCensorJobListResponseBody struct {
	MediaCensorJobList *QueryMediaCensorJobListResponseBodyMediaCensorJobList `json:"MediaCensorJobList,omitempty" xml:"MediaCensorJobList,omitempty" type:"Struct"`
	RequestId          *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken      *string                                                `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	NonExistIds        *QueryMediaCensorJobListResponseBodyNonExistIds        `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBody) SetMediaCensorJobList(v *QueryMediaCensorJobListResponseBodyMediaCensorJobList) *QueryMediaCensorJobListResponseBody {
	s.MediaCensorJobList = v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetRequestId(v string) *QueryMediaCensorJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetNextPageToken(v string) *QueryMediaCensorJobListResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBody) SetNonExistIds(v *QueryMediaCensorJobListResponseBodyNonExistIds) *QueryMediaCensorJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobList struct {
	MediaCensorJob []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob `json:"MediaCensorJob,omitempty" xml:"MediaCensorJob,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobList) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobList) SetMediaCensorJob(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) *QueryMediaCensorJobListResponseBodyMediaCensorJobList {
	s.MediaCensorJob = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob struct {
	CreationTime            *string                                                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime              *string                                                                                     `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Suggestion              *string                                                                                     `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	CoverImageCensorResults *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults `json:"CoverImageCensorResults,omitempty" xml:"CoverImageCensorResults,omitempty" type:"Struct"`
	State                   *string                                                                                     `json:"State,omitempty" xml:"State,omitempty"`
	TitleCensorResult       *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult       `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty" type:"Struct"`
	Message                 *string                                                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	Input                   *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput                   `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	BarrageCensorResult     *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult     `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty" type:"Struct"`
	DescCensorResult        *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult        `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty" type:"Struct"`
	VideoCensorConfig       *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig       `json:"VideoCensorConfig,omitempty" xml:"VideoCensorConfig,omitempty" type:"Struct"`
	JobId                   *string                                                                                     `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData                *string                                                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code                    *string                                                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	VensorCensorResult      *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult      `json:"VensorCensorResult,omitempty" xml:"VensorCensorResult,omitempty" type:"Struct"`
	PipelineId              *string                                                                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCreationTime(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetFinishTime(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.FinishTime = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCoverImageCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.CoverImageCensorResults = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetState(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.State = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetTitleCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.TitleCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetMessage(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Message = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetInput(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Input = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetBarrageCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.BarrageCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetDescCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.DescCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetVideoCensorConfig(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.VideoCensorConfig = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetJobId(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.JobId = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetUserData(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.UserData = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetCode(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.Code = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetVensorCensorResult(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.VensorCensorResult = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob) SetPipelineId(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJob {
	s.PipelineId = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults struct {
	CoverImageCensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult `json:"CoverImageCensorResult,omitempty" xml:"CoverImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults) SetCoverImageCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResults {
	s.CoverImageCensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult struct {
	Object   *string                                                                                                                  `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string                                                                                                                  `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string                                                                                                                  `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	Results  *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults `json:"Results,omitempty" xml:"Results,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Bucket = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult) SetResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResult {
	s.Results = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults struct {
	Result []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults) SetResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResults {
	s.Result = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobCoverImageCensorResultsCoverImageCensorResultResultsResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobTitleCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobInput {
	s.Bucket = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobBarrageCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobDescCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig struct {
	OutputFile  *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	VideoCensor *string                                                                                         `json:"VideoCensor,omitempty" xml:"VideoCensor,omitempty"`
	BizType     *string                                                                                         `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetOutputFile(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetVideoCensor(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.VideoCensor = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig) SetBizType(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfig {
	s.BizType = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetLocation(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile) SetBucket(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVideoCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult struct {
	VideoTimelines *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines `json:"VideoTimelines,omitempty" xml:"VideoTimelines,omitempty" type:"Struct"`
	NextPageToken  *string                                                                                              `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	CensorResults  *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults  `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetVideoTimelines(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.VideoTimelines = v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetNextPageToken(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.NextPageToken = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult) SetCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResult {
	s.CensorResults = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines struct {
	VideoTimeline []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline `json:"VideoTimeline,omitempty" xml:"VideoTimeline,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines) SetVideoTimeline(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelines {
	s.VideoTimeline = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline struct {
	Timestamp     *string                                                                                                                        `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Object        *string                                                                                                                        `json:"Object,omitempty" xml:"Object,omitempty"`
	CensorResults *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults `json:"CensorResults,omitempty" xml:"CensorResults,omitempty" type:"Struct"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetTimestamp(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.Timestamp = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetObject(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.Object = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline) SetCensorResults(v *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimeline {
	s.CensorResults = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults struct {
	CensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults) SetCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultVideoTimelinesVideoTimelineCensorResultsCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults struct {
	CensorResult []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult `json:"CensorResult,omitempty" xml:"CensorResult,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults) SetCensorResult(v []*QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResults {
	s.CensorResult = v
	return s
}

type QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Label      *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Scene      *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	Rate       *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetSuggestion(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetLabel(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Label = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetScene(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Scene = &v
	return s
}

func (s *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult) SetRate(v string) *QueryMediaCensorJobListResponseBodyMediaCensorJobListMediaCensorJobVensorCensorResultCensorResultsCensorResult {
	s.Rate = &v
	return s
}

type QueryMediaCensorJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaCensorJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryMediaCensorJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryMediaCensorJobListResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaCensorJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaCensorJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaCensorJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaCensorJobListResponse) SetHeaders(v map[string]*string) *QueryMediaCensorJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaCensorJobListResponse) SetBody(v *QueryMediaCensorJobListResponseBody) *QueryMediaCensorJobListResponse {
	s.Body = v
	return s
}

type ListPornPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListPornPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s ListPornPipelineRequest) GoString() string {
	return s.String()
}

func (s *ListPornPipelineRequest) SetOwnerId(v int64) *ListPornPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *ListPornPipelineRequest) SetResourceOwnerAccount(v string) *ListPornPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListPornPipelineRequest) SetResourceOwnerId(v int64) *ListPornPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListPornPipelineRequest) SetPageSize(v int64) *ListPornPipelineRequest {
	s.PageSize = &v
	return s
}

func (s *ListPornPipelineRequest) SetPageNumber(v int64) *ListPornPipelineRequest {
	s.PageNumber = &v
	return s
}

func (s *ListPornPipelineRequest) SetState(v string) *ListPornPipelineRequest {
	s.State = &v
	return s
}

func (s *ListPornPipelineRequest) SetOwnerAccount(v string) *ListPornPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type ListPornPipelineResponseBody struct {
	TotalCount   *int64                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize     *int64                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int64                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PipelineList *ListPornPipelineResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
}

func (s ListPornPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListPornPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *ListPornPipelineResponseBody) SetTotalCount(v int64) *ListPornPipelineResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListPornPipelineResponseBody) SetPageSize(v int64) *ListPornPipelineResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListPornPipelineResponseBody) SetRequestId(v string) *ListPornPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListPornPipelineResponseBody) SetPageNumber(v int64) *ListPornPipelineResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListPornPipelineResponseBody) SetPipelineList(v *ListPornPipelineResponseBodyPipelineList) *ListPornPipelineResponseBody {
	s.PipelineList = v
	return s
}

type ListPornPipelineResponseBodyPipelineList struct {
	Pipeline []*ListPornPipelineResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s ListPornPipelineResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s ListPornPipelineResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *ListPornPipelineResponseBodyPipelineList) SetPipeline(v []*ListPornPipelineResponseBodyPipelineListPipeline) *ListPornPipelineResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type ListPornPipelineResponseBodyPipelineListPipeline struct {
	State        *string                                                       `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                       `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                       `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s ListPornPipelineResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s ListPornPipelineResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *ListPornPipelineResponseBodyPipelineListPipeline) SetState(v string) *ListPornPipelineResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *ListPornPipelineResponseBodyPipelineListPipeline) SetNotifyConfig(v *ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig) *ListPornPipelineResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *ListPornPipelineResponseBodyPipelineListPipeline) SetPriority(v string) *ListPornPipelineResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *ListPornPipelineResponseBodyPipelineListPipeline) SetName(v string) *ListPornPipelineResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *ListPornPipelineResponseBodyPipelineListPipeline) SetId(v string) *ListPornPipelineResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig) SetQueue(v string) *ListPornPipelineResponseBodyPipelineListPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type ListPornPipelineResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListPornPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListPornPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s ListPornPipelineResponse) GoString() string {
	return s.String()
}

func (s *ListPornPipelineResponse) SetHeaders(v map[string]*string) *ListPornPipelineResponse {
	s.Headers = v
	return s
}

func (s *ListPornPipelineResponse) SetBody(v *ListPornPipelineResponseBody) *ListPornPipelineResponse {
	s.Body = v
	return s
}

type AddTerrorismPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddTerrorismPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s AddTerrorismPipelineRequest) GoString() string {
	return s.String()
}

func (s *AddTerrorismPipelineRequest) SetOwnerId(v int64) *AddTerrorismPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *AddTerrorismPipelineRequest) SetResourceOwnerAccount(v string) *AddTerrorismPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddTerrorismPipelineRequest) SetResourceOwnerId(v int64) *AddTerrorismPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddTerrorismPipelineRequest) SetName(v string) *AddTerrorismPipelineRequest {
	s.Name = &v
	return s
}

func (s *AddTerrorismPipelineRequest) SetPriority(v int32) *AddTerrorismPipelineRequest {
	s.Priority = &v
	return s
}

func (s *AddTerrorismPipelineRequest) SetNotifyConfig(v string) *AddTerrorismPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *AddTerrorismPipelineRequest) SetOwnerAccount(v string) *AddTerrorismPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type AddTerrorismPipelineResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *AddTerrorismPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s AddTerrorismPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddTerrorismPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *AddTerrorismPipelineResponseBody) SetRequestId(v string) *AddTerrorismPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddTerrorismPipelineResponseBody) SetPipeline(v *AddTerrorismPipelineResponseBodyPipeline) *AddTerrorismPipelineResponseBody {
	s.Pipeline = v
	return s
}

type AddTerrorismPipelineResponseBodyPipeline struct {
	State        *string                                               `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *AddTerrorismPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                                `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                               `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                               `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s AddTerrorismPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s AddTerrorismPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *AddTerrorismPipelineResponseBodyPipeline) SetState(v string) *AddTerrorismPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *AddTerrorismPipelineResponseBodyPipeline) SetNotifyConfig(v *AddTerrorismPipelineResponseBodyPipelineNotifyConfig) *AddTerrorismPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *AddTerrorismPipelineResponseBodyPipeline) SetPriority(v int32) *AddTerrorismPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *AddTerrorismPipelineResponseBodyPipeline) SetName(v string) *AddTerrorismPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *AddTerrorismPipelineResponseBodyPipeline) SetId(v string) *AddTerrorismPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type AddTerrorismPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s AddTerrorismPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s AddTerrorismPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *AddTerrorismPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *AddTerrorismPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *AddTerrorismPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *AddTerrorismPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type AddTerrorismPipelineResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddTerrorismPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddTerrorismPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s AddTerrorismPipelineResponse) GoString() string {
	return s.String()
}

func (s *AddTerrorismPipelineResponse) SetHeaders(v map[string]*string) *AddTerrorismPipelineResponse {
	s.Headers = v
	return s
}

func (s *AddTerrorismPipelineResponse) SetBody(v *AddTerrorismPipelineResponseBody) *AddTerrorismPipelineResponse {
	s.Body = v
	return s
}

type CreateFpShotDBRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ModelId              *int32  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	Config               *string `json:"Config,omitempty" xml:"Config,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CreateFpShotDBRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateFpShotDBRequest) GoString() string {
	return s.String()
}

func (s *CreateFpShotDBRequest) SetOwnerId(v int64) *CreateFpShotDBRequest {
	s.OwnerId = &v
	return s
}

func (s *CreateFpShotDBRequest) SetResourceOwnerAccount(v string) *CreateFpShotDBRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CreateFpShotDBRequest) SetResourceOwnerId(v int64) *CreateFpShotDBRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CreateFpShotDBRequest) SetName(v string) *CreateFpShotDBRequest {
	s.Name = &v
	return s
}

func (s *CreateFpShotDBRequest) SetModelId(v int32) *CreateFpShotDBRequest {
	s.ModelId = &v
	return s
}

func (s *CreateFpShotDBRequest) SetConfig(v string) *CreateFpShotDBRequest {
	s.Config = &v
	return s
}

func (s *CreateFpShotDBRequest) SetDescription(v string) *CreateFpShotDBRequest {
	s.Description = &v
	return s
}

func (s *CreateFpShotDBRequest) SetOwnerAccount(v string) *CreateFpShotDBRequest {
	s.OwnerAccount = &v
	return s
}

type CreateFpShotDBResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	FpShotDB  *CreateFpShotDBResponseBodyFpShotDB `json:"FpShotDB,omitempty" xml:"FpShotDB,omitempty" type:"Struct"`
}

func (s CreateFpShotDBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateFpShotDBResponseBody) GoString() string {
	return s.String()
}

func (s *CreateFpShotDBResponseBody) SetRequestId(v string) *CreateFpShotDBResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateFpShotDBResponseBody) SetFpShotDB(v *CreateFpShotDBResponseBodyFpShotDB) *CreateFpShotDBResponseBody {
	s.FpShotDB = v
	return s
}

type CreateFpShotDBResponseBodyFpShotDB struct {
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	State       *string `json:"State,omitempty" xml:"State,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	FpDBId      *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	ModelId     *int32  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	Config      *string `json:"Config,omitempty" xml:"Config,omitempty"`
}

func (s CreateFpShotDBResponseBodyFpShotDB) String() string {
	return tea.Prettify(s)
}

func (s CreateFpShotDBResponseBodyFpShotDB) GoString() string {
	return s.String()
}

func (s *CreateFpShotDBResponseBodyFpShotDB) SetDescription(v string) *CreateFpShotDBResponseBodyFpShotDB {
	s.Description = &v
	return s
}

func (s *CreateFpShotDBResponseBodyFpShotDB) SetState(v string) *CreateFpShotDBResponseBodyFpShotDB {
	s.State = &v
	return s
}

func (s *CreateFpShotDBResponseBodyFpShotDB) SetName(v string) *CreateFpShotDBResponseBodyFpShotDB {
	s.Name = &v
	return s
}

func (s *CreateFpShotDBResponseBodyFpShotDB) SetFpDBId(v string) *CreateFpShotDBResponseBodyFpShotDB {
	s.FpDBId = &v
	return s
}

func (s *CreateFpShotDBResponseBodyFpShotDB) SetModelId(v int32) *CreateFpShotDBResponseBodyFpShotDB {
	s.ModelId = &v
	return s
}

func (s *CreateFpShotDBResponseBodyFpShotDB) SetConfig(v string) *CreateFpShotDBResponseBodyFpShotDB {
	s.Config = &v
	return s
}

type CreateFpShotDBResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateFpShotDBResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateFpShotDBResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateFpShotDBResponse) GoString() string {
	return s.String()
}

func (s *CreateFpShotDBResponse) SetHeaders(v map[string]*string) *CreateFpShotDBResponse {
	s.Headers = v
	return s
}

func (s *CreateFpShotDBResponse) SetBody(v *CreateFpShotDBResponseBody) *CreateFpShotDBResponse {
	s.Body = v
	return s
}

type UnregisterCustomFaceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	CategoryId           *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	PersonId             *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	FaceId               *string `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
}

func (s UnregisterCustomFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s UnregisterCustomFaceRequest) GoString() string {
	return s.String()
}

func (s *UnregisterCustomFaceRequest) SetOwnerId(v int64) *UnregisterCustomFaceRequest {
	s.OwnerId = &v
	return s
}

func (s *UnregisterCustomFaceRequest) SetResourceOwnerAccount(v string) *UnregisterCustomFaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnregisterCustomFaceRequest) SetResourceOwnerId(v int64) *UnregisterCustomFaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnregisterCustomFaceRequest) SetOwnerAccount(v string) *UnregisterCustomFaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *UnregisterCustomFaceRequest) SetCategoryId(v string) *UnregisterCustomFaceRequest {
	s.CategoryId = &v
	return s
}

func (s *UnregisterCustomFaceRequest) SetPersonId(v string) *UnregisterCustomFaceRequest {
	s.PersonId = &v
	return s
}

func (s *UnregisterCustomFaceRequest) SetFaceId(v string) *UnregisterCustomFaceRequest {
	s.FaceId = &v
	return s
}

type UnregisterCustomFaceResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnregisterCustomFaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnregisterCustomFaceResponseBody) GoString() string {
	return s.String()
}

func (s *UnregisterCustomFaceResponseBody) SetRequestId(v string) *UnregisterCustomFaceResponseBody {
	s.RequestId = &v
	return s
}

type UnregisterCustomFaceResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnregisterCustomFaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnregisterCustomFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s UnregisterCustomFaceResponse) GoString() string {
	return s.String()
}

func (s *UnregisterCustomFaceResponse) SetHeaders(v map[string]*string) *UnregisterCustomFaceResponse {
	s.Headers = v
	return s
}

func (s *UnregisterCustomFaceResponse) SetBody(v *UnregisterCustomFaceResponseBody) *UnregisterCustomFaceResponse {
	s.Body = v
	return s
}

type QuerySmarttagTemplateListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s QuerySmarttagTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagTemplateListRequest) GoString() string {
	return s.String()
}

func (s *QuerySmarttagTemplateListRequest) SetOwnerId(v int64) *QuerySmarttagTemplateListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySmarttagTemplateListRequest) SetResourceOwnerAccount(v string) *QuerySmarttagTemplateListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySmarttagTemplateListRequest) SetResourceOwnerId(v int64) *QuerySmarttagTemplateListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySmarttagTemplateListRequest) SetOwnerAccount(v string) *QuerySmarttagTemplateListRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QuerySmarttagTemplateListRequest) SetTemplateId(v string) *QuerySmarttagTemplateListRequest {
	s.TemplateId = &v
	return s
}

type QuerySmarttagTemplateListResponseBody struct {
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Templates *QuerySmarttagTemplateListResponseBodyTemplates `json:"Templates,omitempty" xml:"Templates,omitempty" type:"Struct"`
}

func (s QuerySmarttagTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySmarttagTemplateListResponseBody) SetRequestId(v string) *QuerySmarttagTemplateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySmarttagTemplateListResponseBody) SetTemplates(v *QuerySmarttagTemplateListResponseBodyTemplates) *QuerySmarttagTemplateListResponseBody {
	s.Templates = v
	return s
}

type QuerySmarttagTemplateListResponseBodyTemplates struct {
	Template []*QuerySmarttagTemplateListResponseBodyTemplatesTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s QuerySmarttagTemplateListResponseBodyTemplates) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagTemplateListResponseBodyTemplates) GoString() string {
	return s.String()
}

func (s *QuerySmarttagTemplateListResponseBodyTemplates) SetTemplate(v []*QuerySmarttagTemplateListResponseBodyTemplatesTemplate) *QuerySmarttagTemplateListResponseBodyTemplates {
	s.Template = v
	return s
}

type QuerySmarttagTemplateListResponseBodyTemplatesTemplate struct {
	AnalyseTypes    *string `json:"AnalyseTypes,omitempty" xml:"AnalyseTypes,omitempty"`
	Industry        *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	IsDefault       *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
	TemplateName    *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	TemplateId      *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	FaceCategoryIds *string `json:"FaceCategoryIds,omitempty" xml:"FaceCategoryIds,omitempty"`
	Scene           *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
}

func (s QuerySmarttagTemplateListResponseBodyTemplatesTemplate) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagTemplateListResponseBodyTemplatesTemplate) GoString() string {
	return s.String()
}

func (s *QuerySmarttagTemplateListResponseBodyTemplatesTemplate) SetAnalyseTypes(v string) *QuerySmarttagTemplateListResponseBodyTemplatesTemplate {
	s.AnalyseTypes = &v
	return s
}

func (s *QuerySmarttagTemplateListResponseBodyTemplatesTemplate) SetIndustry(v string) *QuerySmarttagTemplateListResponseBodyTemplatesTemplate {
	s.Industry = &v
	return s
}

func (s *QuerySmarttagTemplateListResponseBodyTemplatesTemplate) SetIsDefault(v bool) *QuerySmarttagTemplateListResponseBodyTemplatesTemplate {
	s.IsDefault = &v
	return s
}

func (s *QuerySmarttagTemplateListResponseBodyTemplatesTemplate) SetTemplateName(v string) *QuerySmarttagTemplateListResponseBodyTemplatesTemplate {
	s.TemplateName = &v
	return s
}

func (s *QuerySmarttagTemplateListResponseBodyTemplatesTemplate) SetTemplateId(v string) *QuerySmarttagTemplateListResponseBodyTemplatesTemplate {
	s.TemplateId = &v
	return s
}

func (s *QuerySmarttagTemplateListResponseBodyTemplatesTemplate) SetFaceCategoryIds(v string) *QuerySmarttagTemplateListResponseBodyTemplatesTemplate {
	s.FaceCategoryIds = &v
	return s
}

func (s *QuerySmarttagTemplateListResponseBodyTemplatesTemplate) SetScene(v string) *QuerySmarttagTemplateListResponseBodyTemplatesTemplate {
	s.Scene = &v
	return s
}

type QuerySmarttagTemplateListResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySmarttagTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySmarttagTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySmarttagTemplateListResponse) GoString() string {
	return s.String()
}

func (s *QuerySmarttagTemplateListResponse) SetHeaders(v map[string]*string) *QuerySmarttagTemplateListResponse {
	s.Headers = v
	return s
}

func (s *QuerySmarttagTemplateListResponse) SetBody(v *QuerySmarttagTemplateListResponseBody) *QuerySmarttagTemplateListResponse {
	s.Body = v
	return s
}

type SubmitFpShotJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	FpShotConfig         *string `json:"FpShotConfig,omitempty" xml:"FpShotConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitFpShotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpShotJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitFpShotJobRequest) SetOwnerId(v int64) *SubmitFpShotJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitFpShotJobRequest) SetResourceOwnerAccount(v string) *SubmitFpShotJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitFpShotJobRequest) SetResourceOwnerId(v int64) *SubmitFpShotJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitFpShotJobRequest) SetInput(v string) *SubmitFpShotJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitFpShotJobRequest) SetPipelineId(v string) *SubmitFpShotJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitFpShotJobRequest) SetFpShotConfig(v string) *SubmitFpShotJobRequest {
	s.FpShotConfig = &v
	return s
}

func (s *SubmitFpShotJobRequest) SetUserData(v string) *SubmitFpShotJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitFpShotJobRequest) SetOwnerAccount(v string) *SubmitFpShotJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitFpShotJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitFpShotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpShotJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFpShotJobResponseBody) SetRequestId(v string) *SubmitFpShotJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFpShotJobResponseBody) SetJobId(v string) *SubmitFpShotJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitFpShotJobResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitFpShotJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitFpShotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpShotJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitFpShotJobResponse) SetHeaders(v map[string]*string) *SubmitFpShotJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitFpShotJobResponse) SetBody(v *SubmitFpShotJobResponseBody) *SubmitFpShotJobResponse {
	s.Body = v
	return s
}

type QueryCensorPipelineListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineIds          *string `json:"PipelineIds,omitempty" xml:"PipelineIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryCensorPipelineListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorPipelineListRequest) GoString() string {
	return s.String()
}

func (s *QueryCensorPipelineListRequest) SetOwnerId(v int64) *QueryCensorPipelineListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCensorPipelineListRequest) SetResourceOwnerAccount(v string) *QueryCensorPipelineListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryCensorPipelineListRequest) SetResourceOwnerId(v int64) *QueryCensorPipelineListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryCensorPipelineListRequest) SetPipelineIds(v string) *QueryCensorPipelineListRequest {
	s.PipelineIds = &v
	return s
}

func (s *QueryCensorPipelineListRequest) SetOwnerAccount(v string) *QueryCensorPipelineListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryCensorPipelineListResponseBody struct {
	RequestId    *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PipelineList *QueryCensorPipelineListResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
	NonExistIds  *QueryCensorPipelineListResponseBodyNonExistIds  `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryCensorPipelineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorPipelineListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCensorPipelineListResponseBody) SetRequestId(v string) *QueryCensorPipelineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCensorPipelineListResponseBody) SetPipelineList(v *QueryCensorPipelineListResponseBodyPipelineList) *QueryCensorPipelineListResponseBody {
	s.PipelineList = v
	return s
}

func (s *QueryCensorPipelineListResponseBody) SetNonExistIds(v *QueryCensorPipelineListResponseBodyNonExistIds) *QueryCensorPipelineListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryCensorPipelineListResponseBodyPipelineList struct {
	Pipeline []*QueryCensorPipelineListResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s QueryCensorPipelineListResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorPipelineListResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *QueryCensorPipelineListResponseBodyPipelineList) SetPipeline(v []*QueryCensorPipelineListResponseBodyPipelineListPipeline) *QueryCensorPipelineListResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type QueryCensorPipelineListResponseBodyPipelineListPipeline struct {
	State        *string                                                              `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                              `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                              `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryCensorPipelineListResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorPipelineListResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *QueryCensorPipelineListResponseBodyPipelineListPipeline) SetState(v string) *QueryCensorPipelineListResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *QueryCensorPipelineListResponseBodyPipelineListPipeline) SetNotifyConfig(v *QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig) *QueryCensorPipelineListResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *QueryCensorPipelineListResponseBodyPipelineListPipeline) SetPriority(v string) *QueryCensorPipelineListResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *QueryCensorPipelineListResponseBodyPipelineListPipeline) SetName(v string) *QueryCensorPipelineListResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *QueryCensorPipelineListResponseBodyPipelineListPipeline) SetId(v string) *QueryCensorPipelineListResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetQueue(v string) *QueryCensorPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type QueryCensorPipelineListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryCensorPipelineListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorPipelineListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryCensorPipelineListResponseBodyNonExistIds) SetString_(v []*string) *QueryCensorPipelineListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryCensorPipelineListResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryCensorPipelineListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryCensorPipelineListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorPipelineListResponse) GoString() string {
	return s.String()
}

func (s *QueryCensorPipelineListResponse) SetHeaders(v map[string]*string) *QueryCensorPipelineListResponse {
	s.Headers = v
	return s
}

func (s *QueryCensorPipelineListResponse) SetBody(v *QueryCensorPipelineListResponseBody) *QueryCensorPipelineListResponse {
	s.Body = v
	return s
}

type SubmitMcuJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Template             *string `json:"Template,omitempty" xml:"Template,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitMcuJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMcuJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMcuJobRequest) SetOwnerId(v int64) *SubmitMcuJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitMcuJobRequest) SetResourceOwnerAccount(v string) *SubmitMcuJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitMcuJobRequest) SetResourceOwnerId(v int64) *SubmitMcuJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitMcuJobRequest) SetOwnerAccount(v string) *SubmitMcuJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitMcuJobRequest) SetInput(v string) *SubmitMcuJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitMcuJobRequest) SetPipelineId(v string) *SubmitMcuJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitMcuJobRequest) SetTemplateId(v string) *SubmitMcuJobRequest {
	s.TemplateId = &v
	return s
}

func (s *SubmitMcuJobRequest) SetTemplate(v string) *SubmitMcuJobRequest {
	s.Template = &v
	return s
}

func (s *SubmitMcuJobRequest) SetUserData(v string) *SubmitMcuJobRequest {
	s.UserData = &v
	return s
}

type SubmitMcuJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitMcuJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMcuJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMcuJobResponseBody) SetRequestId(v string) *SubmitMcuJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitMcuJobResponseBody) SetJobId(v string) *SubmitMcuJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitMcuJobResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitMcuJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMcuJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMcuJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMcuJobResponse) SetHeaders(v map[string]*string) *SubmitMcuJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMcuJobResponse) SetBody(v *SubmitMcuJobResponseBody) *SubmitMcuJobResponse {
	s.Body = v
	return s
}

type CategoryTreeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CategoryTreeRequest) String() string {
	return tea.Prettify(s)
}

func (s CategoryTreeRequest) GoString() string {
	return s.String()
}

func (s *CategoryTreeRequest) SetOwnerId(v int64) *CategoryTreeRequest {
	s.OwnerId = &v
	return s
}

func (s *CategoryTreeRequest) SetResourceOwnerAccount(v string) *CategoryTreeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CategoryTreeRequest) SetResourceOwnerId(v int64) *CategoryTreeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CategoryTreeRequest) SetOwnerAccount(v string) *CategoryTreeRequest {
	s.OwnerAccount = &v
	return s
}

type CategoryTreeResponseBody struct {
	RequestId    *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CategoryTree *string `json:"CategoryTree,omitempty" xml:"CategoryTree,omitempty"`
}

func (s CategoryTreeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CategoryTreeResponseBody) GoString() string {
	return s.String()
}

func (s *CategoryTreeResponseBody) SetRequestId(v string) *CategoryTreeResponseBody {
	s.RequestId = &v
	return s
}

func (s *CategoryTreeResponseBody) SetCategoryTree(v string) *CategoryTreeResponseBody {
	s.CategoryTree = &v
	return s
}

type CategoryTreeResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CategoryTreeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CategoryTreeResponse) String() string {
	return tea.Prettify(s)
}

func (s CategoryTreeResponse) GoString() string {
	return s.String()
}

func (s *CategoryTreeResponse) SetHeaders(v map[string]*string) *CategoryTreeResponse {
	s.Headers = v
	return s
}

func (s *CategoryTreeResponse) SetBody(v *CategoryTreeResponseBody) *CategoryTreeResponse {
	s.Body = v
	return s
}

type SubmitTagJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	TagConfig            *string `json:"TagConfig,omitempty" xml:"TagConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitTagJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitTagJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitTagJobRequest) SetOwnerId(v int64) *SubmitTagJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitTagJobRequest) SetResourceOwnerAccount(v string) *SubmitTagJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitTagJobRequest) SetResourceOwnerId(v int64) *SubmitTagJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitTagJobRequest) SetInput(v string) *SubmitTagJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitTagJobRequest) SetTagConfig(v string) *SubmitTagJobRequest {
	s.TagConfig = &v
	return s
}

func (s *SubmitTagJobRequest) SetUserData(v string) *SubmitTagJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitTagJobRequest) SetPipelineId(v string) *SubmitTagJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitTagJobRequest) SetOwnerAccount(v string) *SubmitTagJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitTagJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitTagJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitTagJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitTagJobResponseBody) SetRequestId(v string) *SubmitTagJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitTagJobResponseBody) SetJobId(v string) *SubmitTagJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitTagJobResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitTagJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitTagJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitTagJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitTagJobResponse) SetHeaders(v map[string]*string) *SubmitTagJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitTagJobResponse) SetBody(v *SubmitTagJobResponseBody) *SubmitTagJobResponse {
	s.Body = v
	return s
}

type SubmitCoverJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	CoverConfig          *string `json:"CoverConfig,omitempty" xml:"CoverConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitCoverJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitCoverJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitCoverJobRequest) SetOwnerId(v int64) *SubmitCoverJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitCoverJobRequest) SetResourceOwnerAccount(v string) *SubmitCoverJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitCoverJobRequest) SetResourceOwnerId(v int64) *SubmitCoverJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitCoverJobRequest) SetInput(v string) *SubmitCoverJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitCoverJobRequest) SetCoverConfig(v string) *SubmitCoverJobRequest {
	s.CoverConfig = &v
	return s
}

func (s *SubmitCoverJobRequest) SetUserData(v string) *SubmitCoverJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitCoverJobRequest) SetPipelineId(v string) *SubmitCoverJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitCoverJobRequest) SetOwnerAccount(v string) *SubmitCoverJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitCoverJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitCoverJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitCoverJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitCoverJobResponseBody) SetRequestId(v string) *SubmitCoverJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitCoverJobResponseBody) SetJobId(v string) *SubmitCoverJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitCoverJobResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitCoverJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitCoverJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitCoverJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitCoverJobResponse) SetHeaders(v map[string]*string) *SubmitCoverJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitCoverJobResponse) SetBody(v *SubmitCoverJobResponseBody) *SubmitCoverJobResponse {
	s.Body = v
	return s
}

type AddCensorPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddCensorPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCensorPipelineRequest) GoString() string {
	return s.String()
}

func (s *AddCensorPipelineRequest) SetOwnerId(v int64) *AddCensorPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCensorPipelineRequest) SetResourceOwnerAccount(v string) *AddCensorPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddCensorPipelineRequest) SetResourceOwnerId(v int64) *AddCensorPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddCensorPipelineRequest) SetName(v string) *AddCensorPipelineRequest {
	s.Name = &v
	return s
}

func (s *AddCensorPipelineRequest) SetPriority(v int32) *AddCensorPipelineRequest {
	s.Priority = &v
	return s
}

func (s *AddCensorPipelineRequest) SetNotifyConfig(v string) *AddCensorPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *AddCensorPipelineRequest) SetOwnerAccount(v string) *AddCensorPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type AddCensorPipelineResponseBody struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *AddCensorPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s AddCensorPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCensorPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *AddCensorPipelineResponseBody) SetRequestId(v string) *AddCensorPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCensorPipelineResponseBody) SetPipeline(v *AddCensorPipelineResponseBodyPipeline) *AddCensorPipelineResponseBody {
	s.Pipeline = v
	return s
}

type AddCensorPipelineResponseBodyPipeline struct {
	State        *string                                            `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *AddCensorPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                             `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                            `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s AddCensorPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s AddCensorPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *AddCensorPipelineResponseBodyPipeline) SetState(v string) *AddCensorPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *AddCensorPipelineResponseBodyPipeline) SetNotifyConfig(v *AddCensorPipelineResponseBodyPipelineNotifyConfig) *AddCensorPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *AddCensorPipelineResponseBodyPipeline) SetPriority(v int32) *AddCensorPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *AddCensorPipelineResponseBodyPipeline) SetName(v string) *AddCensorPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *AddCensorPipelineResponseBodyPipeline) SetId(v string) *AddCensorPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type AddCensorPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s AddCensorPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s AddCensorPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *AddCensorPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *AddCensorPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *AddCensorPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *AddCensorPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type AddCensorPipelineResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCensorPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCensorPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCensorPipelineResponse) GoString() string {
	return s.String()
}

func (s *AddCensorPipelineResponse) SetHeaders(v map[string]*string) *AddCensorPipelineResponse {
	s.Headers = v
	return s
}

func (s *AddCensorPipelineResponse) SetBody(v *AddCensorPipelineResponseBody) *AddCensorPipelineResponse {
	s.Body = v
	return s
}

type SearchWaterMarkTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SearchWaterMarkTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateRequest) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateRequest) SetOwnerId(v int64) *SearchWaterMarkTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetResourceOwnerAccount(v string) *SearchWaterMarkTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetResourceOwnerId(v int64) *SearchWaterMarkTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetPageSize(v int64) *SearchWaterMarkTemplateRequest {
	s.PageSize = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetPageNumber(v int64) *SearchWaterMarkTemplateRequest {
	s.PageNumber = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetState(v string) *SearchWaterMarkTemplateRequest {
	s.State = &v
	return s
}

func (s *SearchWaterMarkTemplateRequest) SetOwnerAccount(v string) *SearchWaterMarkTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type SearchWaterMarkTemplateResponseBody struct {
	TotalCount            *int64                                                    `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize              *int64                                                    `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId             *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber            *int64                                                    `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	WaterMarkTemplateList *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList `json:"WaterMarkTemplateList,omitempty" xml:"WaterMarkTemplateList,omitempty" type:"Struct"`
}

func (s SearchWaterMarkTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBody) SetTotalCount(v int64) *SearchWaterMarkTemplateResponseBody {
	s.TotalCount = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBody) SetPageSize(v int64) *SearchWaterMarkTemplateResponseBody {
	s.PageSize = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBody) SetRequestId(v string) *SearchWaterMarkTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBody) SetPageNumber(v int64) *SearchWaterMarkTemplateResponseBody {
	s.PageNumber = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBody) SetWaterMarkTemplateList(v *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList) *SearchWaterMarkTemplateResponseBody {
	s.WaterMarkTemplateList = v
	return s
}

type SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList struct {
	WaterMarkTemplate []*SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate `json:"WaterMarkTemplate,omitempty" xml:"WaterMarkTemplate,omitempty" type:"Repeated"`
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList) SetWaterMarkTemplate(v []*SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateList {
	s.WaterMarkTemplate = v
	return s
}

type SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate struct {
	Type       *string                                                                              `json:"Type,omitempty" xml:"Type,omitempty"`
	RatioRefer *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer `json:"RatioRefer,omitempty" xml:"RatioRefer,omitempty" type:"Struct"`
	ReferPos   *string                                                                              `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	State      *string                                                                              `json:"State,omitempty" xml:"State,omitempty"`
	Dx         *string                                                                              `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width      *string                                                                              `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                                              `json:"Height,omitempty" xml:"Height,omitempty"`
	Timeline   *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline   `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	Name       *string                                                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Dy         *string                                                                              `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Id         *string                                                                              `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetType(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Type = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetRatioRefer(v *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.RatioRefer = v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetReferPos(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.ReferPos = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetState(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.State = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetDx(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Dx = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetWidth(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Width = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetHeight(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Height = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetTimeline(v *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Timeline = v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetName(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Name = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetDy(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Dy = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetId(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Id = &v
	return s
}

type SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer struct {
	Dx     *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Dy     *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetDx(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Dx = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetWidth(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Width = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetHeight(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Height = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetDy(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Dy = &v
	return s
}

type SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) SetStart(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline {
	s.Start = &v
	return s
}

func (s *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) SetDuration(v string) *SearchWaterMarkTemplateResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline {
	s.Duration = &v
	return s
}

type SearchWaterMarkTemplateResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SearchWaterMarkTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SearchWaterMarkTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s SearchWaterMarkTemplateResponse) GoString() string {
	return s.String()
}

func (s *SearchWaterMarkTemplateResponse) SetHeaders(v map[string]*string) *SearchWaterMarkTemplateResponse {
	s.Headers = v
	return s
}

func (s *SearchWaterMarkTemplateResponse) SetBody(v *SearchWaterMarkTemplateResponseBody) *SearchWaterMarkTemplateResponse {
	s.Body = v
	return s
}

type SubmitAsrJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	AsrConfig            *string `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitAsrJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAsrJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAsrJobRequest) SetOwnerId(v int64) *SubmitAsrJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitAsrJobRequest) SetResourceOwnerAccount(v string) *SubmitAsrJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitAsrJobRequest) SetResourceOwnerId(v int64) *SubmitAsrJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitAsrJobRequest) SetInput(v string) *SubmitAsrJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitAsrJobRequest) SetPipelineId(v string) *SubmitAsrJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitAsrJobRequest) SetAsrConfig(v string) *SubmitAsrJobRequest {
	s.AsrConfig = &v
	return s
}

func (s *SubmitAsrJobRequest) SetUserData(v string) *SubmitAsrJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitAsrJobRequest) SetOwnerAccount(v string) *SubmitAsrJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitAsrJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitAsrJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAsrJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAsrJobResponseBody) SetRequestId(v string) *SubmitAsrJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAsrJobResponseBody) SetJobId(v string) *SubmitAsrJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitAsrJobResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitAsrJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitAsrJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAsrJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAsrJobResponse) SetHeaders(v map[string]*string) *SubmitAsrJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAsrJobResponse) SetBody(v *SubmitAsrJobResponseBody) *SubmitAsrJobResponse {
	s.Body = v
	return s
}

type AddMediaWorkflowRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology             *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
	TriggerMode          *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *AddMediaWorkflowRequest) SetOwnerId(v int64) *AddMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetResourceOwnerAccount(v string) *AddMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetResourceOwnerId(v int64) *AddMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetName(v string) *AddMediaWorkflowRequest {
	s.Name = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetTopology(v string) *AddMediaWorkflowRequest {
	s.Topology = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetTriggerMode(v string) *AddMediaWorkflowRequest {
	s.TriggerMode = &v
	return s
}

func (s *AddMediaWorkflowRequest) SetOwnerAccount(v string) *AddMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

type AddMediaWorkflowResponseBody struct {
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MediaWorkflow *AddMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
}

func (s AddMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaWorkflowResponseBody) SetRequestId(v string) *AddMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddMediaWorkflowResponseBody) SetMediaWorkflow(v *AddMediaWorkflowResponseBodyMediaWorkflow) *AddMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

type AddMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s AddMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s AddMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetTriggerMode(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.TriggerMode = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *AddMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *AddMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type AddMediaWorkflowResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *AddMediaWorkflowResponse) SetHeaders(v map[string]*string) *AddMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *AddMediaWorkflowResponse) SetBody(v *AddMediaWorkflowResponseBody) *AddMediaWorkflowResponse {
	s.Body = v
	return s
}

type QueryAsrJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryAsrJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListRequest) SetOwnerId(v int64) *QueryAsrJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryAsrJobListRequest) SetResourceOwnerAccount(v string) *QueryAsrJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryAsrJobListRequest) SetResourceOwnerId(v int64) *QueryAsrJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryAsrJobListRequest) SetJobIds(v string) *QueryAsrJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryAsrJobListRequest) SetOwnerAccount(v string) *QueryAsrJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryAsrJobListResponseBody struct {
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList     *QueryAsrJobListResponseBodyJobList     `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NonExistIds *QueryAsrJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryAsrJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBody) SetRequestId(v string) *QueryAsrJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryAsrJobListResponseBody) SetJobList(v *QueryAsrJobListResponseBodyJobList) *QueryAsrJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryAsrJobListResponseBody) SetNonExistIds(v *QueryAsrJobListResponseBodyNonExistIds) *QueryAsrJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryAsrJobListResponseBodyJobList struct {
	Job []*QueryAsrJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryAsrJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBodyJobList) SetJob(v []*QueryAsrJobListResponseBodyJobListJob) *QueryAsrJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryAsrJobListResponseBodyJobListJob struct {
	CreationTime *string                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State        *string                                         `json:"State,omitempty" xml:"State,omitempty"`
	UserData     *string                                         `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code         *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Message      *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	AsrConfig    *QueryAsrJobListResponseBodyJobListJobAsrConfig `json:"AsrConfig,omitempty" xml:"AsrConfig,omitempty" type:"Struct"`
	PipelineId   *string                                         `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input        *QueryAsrJobListResponseBodyJobListJobInput     `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id           *string                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	AsrResult    *QueryAsrJobListResponseBodyJobListJobAsrResult `json:"AsrResult,omitempty" xml:"AsrResult,omitempty" type:"Struct"`
}

func (s QueryAsrJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryAsrJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetState(v string) *QueryAsrJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetUserData(v string) *QueryAsrJobListResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetCode(v string) *QueryAsrJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetMessage(v string) *QueryAsrJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetAsrConfig(v *QueryAsrJobListResponseBodyJobListJobAsrConfig) *QueryAsrJobListResponseBodyJobListJob {
	s.AsrConfig = v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryAsrJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetInput(v *QueryAsrJobListResponseBodyJobListJobInput) *QueryAsrJobListResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetId(v string) *QueryAsrJobListResponseBodyJobListJob {
	s.Id = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJob) SetAsrResult(v *QueryAsrJobListResponseBodyJobListJobAsrResult) *QueryAsrJobListResponseBodyJobListJob {
	s.AsrResult = v
	return s
}

type QueryAsrJobListResponseBodyJobListJobAsrConfig struct {
	Scene *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
}

func (s QueryAsrJobListResponseBodyJobListJobAsrConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBodyJobListJobAsrConfig) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrConfig) SetScene(v string) *QueryAsrJobListResponseBodyJobListJobAsrConfig {
	s.Scene = &v
	return s
}

type QueryAsrJobListResponseBodyJobListJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryAsrJobListResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBodyJobListJobInput) SetObject(v string) *QueryAsrJobListResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJobInput) SetLocation(v string) *QueryAsrJobListResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJobInput) SetBucket(v string) *QueryAsrJobListResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type QueryAsrJobListResponseBodyJobListJobAsrResult struct {
	Duration    *string                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AsrTextList *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextList `json:"AsrTextList,omitempty" xml:"AsrTextList,omitempty" type:"Struct"`
}

func (s QueryAsrJobListResponseBodyJobListJobAsrResult) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBodyJobListJobAsrResult) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrResult) SetDuration(v string) *QueryAsrJobListResponseBodyJobListJobAsrResult {
	s.Duration = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrResult) SetAsrTextList(v *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextList) *QueryAsrJobListResponseBodyJobListJobAsrResult {
	s.AsrTextList = v
	return s
}

type QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextList struct {
	AsrText []*QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText `json:"AsrText,omitempty" xml:"AsrText,omitempty" type:"Repeated"`
}

func (s QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextList) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextList) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextList) SetAsrText(v []*QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText) *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextList {
	s.AsrText = v
	return s
}

type QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *int32  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ChannelId  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	SpeechRate *string `json:"SpeechRate,omitempty" xml:"SpeechRate,omitempty"`
}

func (s QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText) SetEndTime(v string) *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText {
	s.EndTime = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText) SetStartTime(v int32) *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText {
	s.StartTime = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText) SetChannelId(v string) *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText {
	s.ChannelId = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText) SetText(v string) *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText {
	s.Text = &v
	return s
}

func (s *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText) SetSpeechRate(v string) *QueryAsrJobListResponseBodyJobListJobAsrResultAsrTextListAsrText {
	s.SpeechRate = &v
	return s
}

type QueryAsrJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryAsrJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryAsrJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryAsrJobListResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryAsrJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryAsrJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryAsrJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryAsrJobListResponse) SetHeaders(v map[string]*string) *QueryAsrJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryAsrJobListResponse) SetBody(v *QueryAsrJobListResponseBody) *QueryAsrJobListResponse {
	s.Body = v
	return s
}

type SubmitVideoPoseJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	OutputConfig         *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitVideoPoseJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobRequest) SetOwnerId(v int64) *SubmitVideoPoseJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitVideoPoseJobRequest) SetResourceOwnerAccount(v string) *SubmitVideoPoseJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitVideoPoseJobRequest) SetResourceOwnerId(v int64) *SubmitVideoPoseJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitVideoPoseJobRequest) SetOwnerAccount(v string) *SubmitVideoPoseJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitVideoPoseJobRequest) SetInput(v string) *SubmitVideoPoseJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitVideoPoseJobRequest) SetOutputConfig(v string) *SubmitVideoPoseJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitVideoPoseJobRequest) SetPipelineId(v string) *SubmitVideoPoseJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitVideoPoseJobRequest) SetUserData(v string) *SubmitVideoPoseJobRequest {
	s.UserData = &v
	return s
}

type SubmitVideoPoseJobResponseBody struct {
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	VideoPoseJob *SubmitVideoPoseJobResponseBodyVideoPoseJob `json:"VideoPoseJob,omitempty" xml:"VideoPoseJob,omitempty" type:"Struct"`
}

func (s SubmitVideoPoseJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBody) SetRequestId(v string) *SubmitVideoPoseJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBody) SetVideoPoseJob(v *SubmitVideoPoseJobResponseBodyVideoPoseJob) *SubmitVideoPoseJobResponseBody {
	s.VideoPoseJob = v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJob struct {
	OutputConfig     *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig     `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	State            *string                                                     `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                     `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData         *string                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId       *string                                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	MNSMessageResult *SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Input            *SubmitVideoPoseJobResponseBodyVideoPoseJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Properties       *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties       `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJob) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJob) SetOutputConfig(v *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig) *SubmitVideoPoseJobResponseBodyVideoPoseJob {
	s.OutputConfig = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJob) SetState(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJob {
	s.State = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJob) SetJobId(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJob {
	s.JobId = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJob) SetUserData(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJob {
	s.UserData = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJob) SetPipelineId(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJob) SetMNSMessageResult(v *SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult) *SubmitVideoPoseJobResponseBodyVideoPoseJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJob) SetInput(v *SubmitVideoPoseJobResponseBodyVideoPoseJobInput) *SubmitVideoPoseJobResponseBodyVideoPoseJob {
	s.Input = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJob) SetProperties(v *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) *SubmitVideoPoseJobResponseBodyVideoPoseJob {
	s.Properties = v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig struct {
	DataFile  *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile  `json:"DataFile,omitempty" xml:"DataFile,omitempty" type:"Struct"`
	VideoFile *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile `json:"VideoFile,omitempty" xml:"VideoFile,omitempty" type:"Struct"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig) SetDataFile(v *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig {
	s.DataFile = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig) SetVideoFile(v *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfig {
	s.VideoFile = v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile) SetRoleArn(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile) SetObject(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile {
	s.Object = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile) SetLocation(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile {
	s.Location = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile) SetBucket(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigDataFile {
	s.Bucket = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile) SetRoleArn(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile) SetObject(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile {
	s.Object = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile) SetLocation(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile {
	s.Location = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile) SetBucket(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobOutputConfigVideoFile {
	s.Bucket = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult) SetMessageId(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult) SetErrorMessage(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult) SetErrorCode(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobInput struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobInput) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobInput) SetRoleArn(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobInput {
	s.RoleArn = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobInput) SetObject(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobInput {
	s.Object = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobInput) SetLocation(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobInput {
	s.Location = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobInput) SetBucket(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobInput {
	s.Bucket = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobProperties struct {
	Width      *string                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                      `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                      `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                      `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                      `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetWidth(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.Width = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetHeight(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.Height = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetDuration(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.Duration = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetFps(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.Fps = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetBitrate(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.Bitrate = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetFileFormat(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.FileFormat = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetStreams(v *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.Streams = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetFormat(v *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.Format = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties) SetFileSize(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobProperties {
	s.FileSize = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams struct {
	VideoStreamList    *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams) SetVideoStreamList(v *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamList) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams) SetAudioStreamList(v *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamList) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams) SetSubtitleStreamList(v *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamList) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamList struct {
	VideoStream []*SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamList) SetVideoStream(v []*SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream struct {
	Sar            *string                                                                                           `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Height         *string                                                                                           `json:"Height,omitempty" xml:"Height,omitempty"`
	CodecTagString *string                                                                                           `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	NetworkCost    *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Width          *string                                                                                           `json:"Width,omitempty" xml:"Width,omitempty"`
	Index          *string                                                                                           `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                           `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                           `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                           `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Lang           *string                                                                                           `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                           `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	NumFrames      *string                                                                                           `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Rotate         *string                                                                                           `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Bitrate        *string                                                                                           `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	HasBFrames     *string                                                                                           `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                           `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                           `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Dar            *string                                                                                           `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                           `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string                                                                                           `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                           `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                           `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                           `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                           `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetRotate(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamList struct {
	AudioStream []*SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamList) SetAudioStream(v []*SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetTimebase(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Timebase = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetStartTime(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.StartTime = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecName(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecName = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecLongName(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetDuration(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Duration = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTag(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTimeBase(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTagString(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTagString = &v
	return s
}

type SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) SetStartTime(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) SetNumPrograms(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) SetSize(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat {
	s.Size = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) SetNumStreams(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) SetFormatLongName(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) SetDuration(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) SetBitrate(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat) SetFormatName(v string) *SubmitVideoPoseJobResponseBodyVideoPoseJobPropertiesFormat {
	s.FormatName = &v
	return s
}

type SubmitVideoPoseJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitVideoPoseJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitVideoPoseJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoPoseJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitVideoPoseJobResponse) SetHeaders(v map[string]*string) *SubmitVideoPoseJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitVideoPoseJobResponse) SetBody(v *SubmitVideoPoseJobResponseBody) *SubmitVideoPoseJobResponse {
	s.Body = v
	return s
}

type RegisterMediaDetailPersonRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Category             *string `json:"Category,omitempty" xml:"Category,omitempty"`
	PersonName           *string `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	Images               *string `json:"Images,omitempty" xml:"Images,omitempty"`
	PersonLib            *string `json:"PersonLib,omitempty" xml:"PersonLib,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s RegisterMediaDetailPersonRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonRequest) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonRequest) SetOwnerId(v int64) *RegisterMediaDetailPersonRequest {
	s.OwnerId = &v
	return s
}

func (s *RegisterMediaDetailPersonRequest) SetResourceOwnerAccount(v string) *RegisterMediaDetailPersonRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RegisterMediaDetailPersonRequest) SetResourceOwnerId(v int64) *RegisterMediaDetailPersonRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RegisterMediaDetailPersonRequest) SetCategory(v string) *RegisterMediaDetailPersonRequest {
	s.Category = &v
	return s
}

func (s *RegisterMediaDetailPersonRequest) SetPersonName(v string) *RegisterMediaDetailPersonRequest {
	s.PersonName = &v
	return s
}

func (s *RegisterMediaDetailPersonRequest) SetImages(v string) *RegisterMediaDetailPersonRequest {
	s.Images = &v
	return s
}

func (s *RegisterMediaDetailPersonRequest) SetPersonLib(v string) *RegisterMediaDetailPersonRequest {
	s.PersonLib = &v
	return s
}

func (s *RegisterMediaDetailPersonRequest) SetOwnerAccount(v string) *RegisterMediaDetailPersonRequest {
	s.OwnerAccount = &v
	return s
}

type RegisterMediaDetailPersonResponseBody struct {
	RequestId            *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	RegisteredPersonages *RegisterMediaDetailPersonResponseBodyRegisteredPersonages `json:"RegisteredPersonages,omitempty" xml:"RegisteredPersonages,omitempty" type:"Struct"`
	FailedImages         *RegisterMediaDetailPersonResponseBodyFailedImages         `json:"FailedImages,omitempty" xml:"FailedImages,omitempty" type:"Struct"`
}

func (s RegisterMediaDetailPersonResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonResponseBody) SetRequestId(v string) *RegisterMediaDetailPersonResponseBody {
	s.RequestId = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBody) SetRegisteredPersonages(v *RegisterMediaDetailPersonResponseBodyRegisteredPersonages) *RegisterMediaDetailPersonResponseBody {
	s.RegisteredPersonages = v
	return s
}

func (s *RegisterMediaDetailPersonResponseBody) SetFailedImages(v *RegisterMediaDetailPersonResponseBodyFailedImages) *RegisterMediaDetailPersonResponseBody {
	s.FailedImages = v
	return s
}

type RegisterMediaDetailPersonResponseBodyRegisteredPersonages struct {
	RegisteredPersonage []*RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage `json:"RegisteredPersonage,omitempty" xml:"RegisteredPersonage,omitempty" type:"Repeated"`
}

func (s RegisterMediaDetailPersonResponseBodyRegisteredPersonages) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonResponseBodyRegisteredPersonages) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonages) SetRegisteredPersonage(v []*RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) *RegisterMediaDetailPersonResponseBodyRegisteredPersonages {
	s.RegisteredPersonage = v
	return s
}

type RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage struct {
	Quality    *string                                                                                `json:"Quality,omitempty" xml:"Quality,omitempty"`
	ImageFile  *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile `json:"ImageFile,omitempty" xml:"ImageFile,omitempty" type:"Struct"`
	PersonName *string                                                                                `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	Gender     *string                                                                                `json:"Gender,omitempty" xml:"Gender,omitempty"`
	FaceId     *string                                                                                `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
	Target     *string                                                                                `json:"Target,omitempty" xml:"Target,omitempty"`
	ImageId    *string                                                                                `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) SetQuality(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage {
	s.Quality = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) SetImageFile(v *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage {
	s.ImageFile = v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) SetPersonName(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage {
	s.PersonName = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) SetGender(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage {
	s.Gender = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) SetFaceId(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage {
	s.FaceId = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) SetTarget(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage {
	s.Target = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage) SetImageId(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonage {
	s.ImageId = &v
	return s
}

type RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile) SetObject(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile {
	s.Object = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile) SetLocation(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile {
	s.Location = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile) SetBucket(v string) *RegisterMediaDetailPersonResponseBodyRegisteredPersonagesRegisteredPersonageImageFile {
	s.Bucket = &v
	return s
}

type RegisterMediaDetailPersonResponseBodyFailedImages struct {
	FailedImage []*RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage `json:"FailedImage,omitempty" xml:"FailedImage,omitempty" type:"Repeated"`
}

func (s RegisterMediaDetailPersonResponseBodyFailedImages) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonResponseBodyFailedImages) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonResponseBodyFailedImages) SetFailedImage(v []*RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage) *RegisterMediaDetailPersonResponseBodyFailedImages {
	s.FailedImage = v
	return s
}

type RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage struct {
	ImageFile *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile `json:"ImageFile,omitempty" xml:"ImageFile,omitempty" type:"Struct"`
	Success   *string                                                                `json:"Success,omitempty" xml:"Success,omitempty"`
	Code      *string                                                                `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage) SetImageFile(v *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile) *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage {
	s.ImageFile = v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage) SetSuccess(v string) *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage {
	s.Success = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage) SetCode(v string) *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImage {
	s.Code = &v
	return s
}

type RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile) SetObject(v string) *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile {
	s.Object = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile) SetLocation(v string) *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile {
	s.Location = &v
	return s
}

func (s *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile) SetBucket(v string) *RegisterMediaDetailPersonResponseBodyFailedImagesFailedImageImageFile {
	s.Bucket = &v
	return s
}

type RegisterMediaDetailPersonResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RegisterMediaDetailPersonResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RegisterMediaDetailPersonResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailPersonResponse) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailPersonResponse) SetHeaders(v map[string]*string) *RegisterMediaDetailPersonResponse {
	s.Headers = v
	return s
}

func (s *RegisterMediaDetailPersonResponse) SetBody(v *RegisterMediaDetailPersonResponseBody) *RegisterMediaDetailPersonResponse {
	s.Body = v
	return s
}

type QueryCensorJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryCensorJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListRequest) SetOwnerId(v int64) *QueryCensorJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCensorJobListRequest) SetResourceOwnerAccount(v string) *QueryCensorJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryCensorJobListRequest) SetResourceOwnerId(v int64) *QueryCensorJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryCensorJobListRequest) SetJobIds(v string) *QueryCensorJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryCensorJobListRequest) SetOwnerAccount(v string) *QueryCensorJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryCensorJobListResponseBody struct {
	RequestId     *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	CensorJobList *QueryCensorJobListResponseBodyCensorJobList `json:"CensorJobList,omitempty" xml:"CensorJobList,omitempty" type:"Struct"`
	NonExistIds   *QueryCensorJobListResponseBodyNonExistIds   `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryCensorJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBody) SetRequestId(v string) *QueryCensorJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCensorJobListResponseBody) SetCensorJobList(v *QueryCensorJobListResponseBodyCensorJobList) *QueryCensorJobListResponseBody {
	s.CensorJobList = v
	return s
}

func (s *QueryCensorJobListResponseBody) SetNonExistIds(v *QueryCensorJobListResponseBodyNonExistIds) *QueryCensorJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryCensorJobListResponseBodyCensorJobList struct {
	CensorJob []*QueryCensorJobListResponseBodyCensorJobListCensorJob `json:"CensorJob,omitempty" xml:"CensorJob,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyCensorJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobList) SetCensorJob(v []*QueryCensorJobListResponseBodyCensorJobListCensorJob) *QueryCensorJobListResponseBodyCensorJobList {
	s.CensorJob = v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJob struct {
	CreationTime          *string                                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State                 *string                                                                    `json:"State,omitempty" xml:"State,omitempty"`
	CensorTerrorismResult *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult `json:"CensorTerrorismResult,omitempty" xml:"CensorTerrorismResult,omitempty" type:"Struct"`
	ImageCensorResults    *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResults    `json:"ImageCensorResults,omitempty" xml:"ImageCensorResults,omitempty" type:"Struct"`
	TitleCensorResult     *string                                                                    `json:"TitleCensorResult,omitempty" xml:"TitleCensorResult,omitempty"`
	Message               *string                                                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	Input                 *QueryCensorJobListResponseBodyCensorJobListCensorJobInput                 `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	BarrageCensorResult   *string                                                                    `json:"BarrageCensorResult,omitempty" xml:"BarrageCensorResult,omitempty"`
	DescCensorResult      *string                                                                    `json:"DescCensorResult,omitempty" xml:"DescCensorResult,omitempty"`
	ResultSaveObject      *string                                                                    `json:"ResultSaveObject,omitempty" xml:"ResultSaveObject,omitempty"`
	CensorConfig          *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig          `json:"CensorConfig,omitempty" xml:"CensorConfig,omitempty" type:"Struct"`
	UserData              *string                                                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code                  *string                                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	CensorPornResult      *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult      `json:"CensorPornResult,omitempty" xml:"CensorPornResult,omitempty" type:"Struct"`
	PipelineId            *string                                                                    `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Id                    *string                                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJob) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJob) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetCreationTime(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.CreationTime = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetState(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.State = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetCensorTerrorismResult(v *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.CensorTerrorismResult = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetImageCensorResults(v *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResults) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.ImageCensorResults = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetTitleCensorResult(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.TitleCensorResult = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetMessage(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.Message = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetInput(v *QueryCensorJobListResponseBodyCensorJobListCensorJobInput) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.Input = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetBarrageCensorResult(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.BarrageCensorResult = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetDescCensorResult(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.DescCensorResult = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetResultSaveObject(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.ResultSaveObject = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetCensorConfig(v *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.CensorConfig = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetUserData(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.UserData = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetCode(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.Code = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetCensorPornResult(v *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.CensorPornResult = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetPipelineId(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.PipelineId = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJob) SetId(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJob {
	s.Id = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult struct {
	TerrorismTopList     *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopList     `json:"TerrorismTopList,omitempty" xml:"TerrorismTopList,omitempty" type:"Struct"`
	Suggestion           *string                                                                                        `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	AverageScore         *string                                                                                        `json:"AverageScore,omitempty" xml:"AverageScore,omitempty"`
	TerrorismCounterList *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterList `json:"TerrorismCounterList,omitempty" xml:"TerrorismCounterList,omitempty" type:"Struct"`
	Label                *string                                                                                        `json:"Label,omitempty" xml:"Label,omitempty"`
	MaxScore             *string                                                                                        `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) SetTerrorismTopList(v *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopList) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult {
	s.TerrorismTopList = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) SetSuggestion(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult {
	s.Suggestion = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) SetAverageScore(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult {
	s.AverageScore = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) SetTerrorismCounterList(v *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterList) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult {
	s.TerrorismCounterList = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) SetLabel(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult {
	s.Label = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult) SetMaxScore(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResult {
	s.MaxScore = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopList struct {
	Top []*QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop `json:"Top,omitempty" xml:"Top,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopList) SetTop(v []*QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopList {
	s.Top = v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop struct {
	Index     *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Score     *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Object    *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Label     *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop) SetIndex(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Index = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop) SetScore(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Score = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop) SetTimestamp(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Timestamp = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop) SetObject(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Object = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop) SetLabel(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismTopListTop {
	s.Label = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterList struct {
	Counter []*QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter `json:"Counter,omitempty" xml:"Counter,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterList) SetCounter(v []*QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterList {
	s.Counter = v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter struct {
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Count *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter) SetLabel(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter {
	s.Label = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter) SetCount(v int32) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorTerrorismResultTerrorismCounterListCounter {
	s.Count = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResults struct {
	ImageCensorResult []*QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult `json:"ImageCensorResult,omitempty" xml:"ImageCensorResult,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResults) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResults) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResults) SetImageCensorResult(v []*QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult) *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResults {
	s.ImageCensorResult = v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult struct {
	ImageBucket   *string `json:"ImageBucket,omitempty" xml:"ImageBucket,omitempty"`
	Result        *string `json:"Result,omitempty" xml:"Result,omitempty"`
	ImageLocation *string `json:"ImageLocation,omitempty" xml:"ImageLocation,omitempty"`
	ImageObject   *string `json:"ImageObject,omitempty" xml:"ImageObject,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult) SetImageBucket(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult {
	s.ImageBucket = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult) SetResult(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult {
	s.Result = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult) SetImageLocation(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult {
	s.ImageLocation = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult) SetImageObject(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobImageCensorResultsImageCensorResult {
	s.ImageObject = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobInput) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobInput) SetObject(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobInput {
	s.Object = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobInput) SetLocation(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobInput {
	s.Location = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobInput) SetBucket(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobInput {
	s.Bucket = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig struct {
	Interval   *string                                                                     `json:"Interval,omitempty" xml:"Interval,omitempty"`
	SaveType   *string                                                                     `json:"SaveType,omitempty" xml:"SaveType,omitempty"`
	OutputFile *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Scenes     *string                                                                     `json:"Scenes,omitempty" xml:"Scenes,omitempty"`
	BizType    *string                                                                     `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig) SetInterval(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig {
	s.Interval = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig) SetSaveType(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig {
	s.SaveType = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig) SetOutputFile(v *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig {
	s.OutputFile = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig) SetScenes(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig {
	s.Scenes = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig) SetBizType(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfig {
	s.BizType = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile) SetObject(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile) SetLocation(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile) SetBucket(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorConfigOutputFile {
	s.Bucket = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult struct {
	PornCounterList *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterList `json:"PornCounterList,omitempty" xml:"PornCounterList,omitempty" type:"Struct"`
	Suggestion      *string                                                                              `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	AverageScore    *string                                                                              `json:"AverageScore,omitempty" xml:"AverageScore,omitempty"`
	PornTopList     *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopList     `json:"PornTopList,omitempty" xml:"PornTopList,omitempty" type:"Struct"`
	Label           *string                                                                              `json:"Label,omitempty" xml:"Label,omitempty"`
	MaxScore        *string                                                                              `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) SetPornCounterList(v *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterList) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult {
	s.PornCounterList = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) SetSuggestion(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult {
	s.Suggestion = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) SetAverageScore(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult {
	s.AverageScore = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) SetPornTopList(v *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopList) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult {
	s.PornTopList = v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) SetLabel(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult {
	s.Label = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult) SetMaxScore(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResult {
	s.MaxScore = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterList struct {
	Counter []*QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter `json:"Counter,omitempty" xml:"Counter,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterList) SetCounter(v []*QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterList {
	s.Counter = v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter struct {
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Count *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter) SetLabel(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter {
	s.Label = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter) SetCount(v int32) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornCounterListCounter {
	s.Count = &v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopList struct {
	Top []*QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop `json:"Top,omitempty" xml:"Top,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopList) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopList) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopList) SetTop(v []*QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopList {
	s.Top = v
	return s
}

type QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop struct {
	Index     *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Score     *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Object    *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Label     *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop) SetIndex(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop {
	s.Index = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop) SetScore(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop {
	s.Score = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop) SetTimestamp(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop {
	s.Timestamp = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop) SetObject(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop {
	s.Object = &v
	return s
}

func (s *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop) SetLabel(v string) *QueryCensorJobListResponseBodyCensorJobListCensorJobCensorPornResultPornTopListTop {
	s.Label = &v
	return s
}

type QueryCensorJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryCensorJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryCensorJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryCensorJobListResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryCensorJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryCensorJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCensorJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryCensorJobListResponse) SetHeaders(v map[string]*string) *QueryCensorJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryCensorJobListResponse) SetBody(v *QueryCensorJobListResponseBody) *QueryCensorJobListResponse {
	s.Body = v
	return s
}

type SubmitFpCompareJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MasterMedia          *string `json:"MasterMedia,omitempty" xml:"MasterMedia,omitempty"`
	QueryMedia           *string `json:"QueryMedia,omitempty" xml:"QueryMedia,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	FpDBId               *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	MatchedFrameStorage  *string `json:"MatchedFrameStorage,omitempty" xml:"MatchedFrameStorage,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitFpCompareJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpCompareJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitFpCompareJobRequest) SetOwnerId(v int64) *SubmitFpCompareJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetResourceOwnerAccount(v string) *SubmitFpCompareJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetResourceOwnerId(v int64) *SubmitFpCompareJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetMasterMedia(v string) *SubmitFpCompareJobRequest {
	s.MasterMedia = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetQueryMedia(v string) *SubmitFpCompareJobRequest {
	s.QueryMedia = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetPipelineId(v string) *SubmitFpCompareJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetFpDBId(v string) *SubmitFpCompareJobRequest {
	s.FpDBId = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetMatchedFrameStorage(v string) *SubmitFpCompareJobRequest {
	s.MatchedFrameStorage = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetUserData(v string) *SubmitFpCompareJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitFpCompareJobRequest) SetOwnerAccount(v string) *SubmitFpCompareJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitFpCompareJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitFpCompareJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpCompareJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFpCompareJobResponseBody) SetRequestId(v string) *SubmitFpCompareJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFpCompareJobResponseBody) SetJobId(v string) *SubmitFpCompareJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitFpCompareJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitFpCompareJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitFpCompareJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpCompareJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitFpCompareJobResponse) SetHeaders(v map[string]*string) *SubmitFpCompareJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitFpCompareJobResponse) SetBody(v *SubmitFpCompareJobResponseBody) *SubmitFpCompareJobResponse {
	s.Body = v
	return s
}

type DeleteCategoryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	CateId               *int64  `json:"CateId,omitempty" xml:"CateId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryRequest) GoString() string {
	return s.String()
}

func (s *DeleteCategoryRequest) SetOwnerId(v int64) *DeleteCategoryRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteCategoryRequest) SetResourceOwnerAccount(v string) *DeleteCategoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteCategoryRequest) SetResourceOwnerId(v int64) *DeleteCategoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteCategoryRequest) SetCateId(v int64) *DeleteCategoryRequest {
	s.CateId = &v
	return s
}

func (s *DeleteCategoryRequest) SetOwnerAccount(v string) *DeleteCategoryRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteCategoryResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponseBody) SetRequestId(v string) *DeleteCategoryResponseBody {
	s.RequestId = &v
	return s
}

type DeleteCategoryResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCategoryResponse) GoString() string {
	return s.String()
}

func (s *DeleteCategoryResponse) SetHeaders(v map[string]*string) *DeleteCategoryResponse {
	s.Headers = v
	return s
}

func (s *DeleteCategoryResponse) SetBody(v *DeleteCategoryResponseBody) *DeleteCategoryResponse {
	s.Body = v
	return s
}

type QuerySnapshotJobListRequest struct {
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount       *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	SnapshotJobIds             *string `json:"SnapshotJobIds,omitempty" xml:"SnapshotJobIds,omitempty"`
	NextPageToken              *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize            *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	State                      *string `json:"State,omitempty" xml:"State,omitempty"`
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	EndOfJobCreatedTimeRange   *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	PipelineId                 *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount               *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QuerySnapshotJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListRequest) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListRequest) SetOwnerId(v int64) *QuerySnapshotJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetResourceOwnerAccount(v string) *QuerySnapshotJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetResourceOwnerId(v int64) *QuerySnapshotJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetSnapshotJobIds(v string) *QuerySnapshotJobListRequest {
	s.SnapshotJobIds = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetNextPageToken(v string) *QuerySnapshotJobListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetMaximumPageSize(v int64) *QuerySnapshotJobListRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetState(v string) *QuerySnapshotJobListRequest {
	s.State = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetStartOfJobCreatedTimeRange(v string) *QuerySnapshotJobListRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetEndOfJobCreatedTimeRange(v string) *QuerySnapshotJobListRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetPipelineId(v string) *QuerySnapshotJobListRequest {
	s.PipelineId = &v
	return s
}

func (s *QuerySnapshotJobListRequest) SetOwnerAccount(v string) *QuerySnapshotJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QuerySnapshotJobListResponseBody struct {
	SnapshotJobList        *QuerySnapshotJobListResponseBodySnapshotJobList        `json:"SnapshotJobList,omitempty" xml:"SnapshotJobList,omitempty" type:"Struct"`
	RequestId              *string                                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistSnapshotJobIds *QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds `json:"NonExistSnapshotJobIds,omitempty" xml:"NonExistSnapshotJobIds,omitempty" type:"Struct"`
	NextPageToken          *string                                                 `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
}

func (s QuerySnapshotJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBody) SetSnapshotJobList(v *QuerySnapshotJobListResponseBodySnapshotJobList) *QuerySnapshotJobListResponseBody {
	s.SnapshotJobList = v
	return s
}

func (s *QuerySnapshotJobListResponseBody) SetRequestId(v string) *QuerySnapshotJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QuerySnapshotJobListResponseBody) SetNonExistSnapshotJobIds(v *QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds) *QuerySnapshotJobListResponseBody {
	s.NonExistSnapshotJobIds = v
	return s
}

func (s *QuerySnapshotJobListResponseBody) SetNextPageToken(v string) *QuerySnapshotJobListResponseBody {
	s.NextPageToken = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobList struct {
	SnapshotJob []*QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob `json:"SnapshotJob,omitempty" xml:"SnapshotJob,omitempty" type:"Repeated"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobList) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobList) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobList) SetSnapshotJob(v []*QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) *QuerySnapshotJobListResponseBodySnapshotJobList {
	s.SnapshotJob = v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob struct {
	CreationTime     *string                                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	SnapshotConfig   *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig   `json:"SnapshotConfig,omitempty" xml:"SnapshotConfig,omitempty" type:"Struct"`
	State            *string                                                                     `json:"State,omitempty" xml:"State,omitempty"`
	Message          *string                                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	MNSMessageResult *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Input            *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Count            *string                                                                     `json:"Count,omitempty" xml:"Count,omitempty"`
	TileCount        *string                                                                     `json:"TileCount,omitempty" xml:"TileCount,omitempty"`
	UserData         *string                                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	PipelineId       *string                                                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Id               *string                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetCreationTime(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.CreationTime = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetSnapshotConfig(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.SnapshotConfig = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetState(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.State = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetMessage(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Message = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetMNSMessageResult(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.MNSMessageResult = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetInput(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Input = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetCount(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Count = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetTileCount(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.TileCount = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetUserData(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.UserData = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetCode(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Code = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetPipelineId(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.PipelineId = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob) SetId(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJob {
	s.Id = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig struct {
	Time           *string                                                                                 `json:"Time,omitempty" xml:"Time,omitempty"`
	TileOut        *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut        `json:"TileOut,omitempty" xml:"TileOut,omitempty" type:"Struct"`
	Interval       *string                                                                                 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	FrameType      *string                                                                                 `json:"FrameType,omitempty" xml:"FrameType,omitempty"`
	Width          *string                                                                                 `json:"Width,omitempty" xml:"Width,omitempty"`
	Height         *string                                                                                 `json:"Height,omitempty" xml:"Height,omitempty"`
	OutputFile     *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile     `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Num            *string                                                                                 `json:"Num,omitempty" xml:"Num,omitempty"`
	TileOutputFile *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile `json:"TileOutputFile,omitempty" xml:"TileOutputFile,omitempty" type:"Struct"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetTime(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Time = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetTileOut(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.TileOut = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetInterval(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Interval = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetFrameType(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.FrameType = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetWidth(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Width = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetHeight(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Height = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetOutputFile(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.OutputFile = v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetNum(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.Num = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig) SetTileOutputFile(v *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfig {
	s.TileOutputFile = v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut struct {
	Padding       *string `json:"Padding,omitempty" xml:"Padding,omitempty"`
	Color         *string `json:"Color,omitempty" xml:"Color,omitempty"`
	CellSelStep   *string `json:"CellSelStep,omitempty" xml:"CellSelStep,omitempty"`
	CellHeight    *string `json:"CellHeight,omitempty" xml:"CellHeight,omitempty"`
	CellWidth     *string `json:"CellWidth,omitempty" xml:"CellWidth,omitempty"`
	Margin        *string `json:"Margin,omitempty" xml:"Margin,omitempty"`
	Columns       *string `json:"Columns,omitempty" xml:"Columns,omitempty"`
	IsKeepCellPic *string `json:"IsKeepCellPic,omitempty" xml:"IsKeepCellPic,omitempty"`
	Lines         *string `json:"Lines,omitempty" xml:"Lines,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetPadding(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Padding = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetColor(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Color = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetCellSelStep(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.CellSelStep = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetCellHeight(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.CellHeight = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetCellWidth(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.CellWidth = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetMargin(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Margin = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetColumns(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Columns = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetIsKeepCellPic(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.IsKeepCellPic = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut) SetLines(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOut {
	s.Lines = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) SetRoleArn(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile {
	s.RoleArn = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) SetObject(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) SetLocation(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile) SetBucket(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigOutputFile {
	s.Bucket = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) SetRoleArn(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile {
	s.RoleArn = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) SetObject(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile {
	s.Object = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) SetLocation(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile {
	s.Location = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile) SetBucket(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobSnapshotConfigTileOutputFile {
	s.Bucket = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) SetMessageId(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) SetErrorMessage(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult) SetErrorCode(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) SetRoleArn(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput {
	s.RoleArn = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) SetObject(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput {
	s.Object = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) SetLocation(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput {
	s.Location = &v
	return s
}

func (s *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput) SetBucket(v string) *QuerySnapshotJobListResponseBodySnapshotJobListSnapshotJobInput {
	s.Bucket = &v
	return s
}

type QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds) SetString_(v []*string) *QuerySnapshotJobListResponseBodyNonExistSnapshotJobIds {
	s.String_ = v
	return s
}

type QuerySnapshotJobListResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QuerySnapshotJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QuerySnapshotJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QuerySnapshotJobListResponse) GoString() string {
	return s.String()
}

func (s *QuerySnapshotJobListResponse) SetHeaders(v map[string]*string) *QuerySnapshotJobListResponse {
	s.Headers = v
	return s
}

func (s *QuerySnapshotJobListResponse) SetBody(v *QuerySnapshotJobListResponseBody) *QuerySnapshotJobListResponse {
	s.Body = v
	return s
}

type DetectImageSyncRequest struct {
	// 图片url链接
	Image *string `json:"Image,omitempty" xml:"Image,omitempty"`
}

func (s DetectImageSyncRequest) String() string {
	return tea.Prettify(s)
}

func (s DetectImageSyncRequest) GoString() string {
	return s.String()
}

func (s *DetectImageSyncRequest) SetImage(v string) *DetectImageSyncRequest {
	s.Image = &v
	return s
}

type DetectImageSyncResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// 返回结果
	Result *string `json:"Result,omitempty" xml:"Result,omitempty"`
	// 请求状态
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// 返回信息
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s DetectImageSyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DetectImageSyncResponseBody) GoString() string {
	return s.String()
}

func (s *DetectImageSyncResponseBody) SetRequestId(v string) *DetectImageSyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *DetectImageSyncResponseBody) SetResult(v string) *DetectImageSyncResponseBody {
	s.Result = &v
	return s
}

func (s *DetectImageSyncResponseBody) SetStatus(v string) *DetectImageSyncResponseBody {
	s.Status = &v
	return s
}

func (s *DetectImageSyncResponseBody) SetMessage(v string) *DetectImageSyncResponseBody {
	s.Message = &v
	return s
}

type DetectImageSyncResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DetectImageSyncResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DetectImageSyncResponse) String() string {
	return tea.Prettify(s)
}

func (s DetectImageSyncResponse) GoString() string {
	return s.String()
}

func (s *DetectImageSyncResponse) SetHeaders(v map[string]*string) *DetectImageSyncResponse {
	s.Headers = v
	return s
}

func (s *DetectImageSyncResponse) SetBody(v *DetectImageSyncResponseBody) *DetectImageSyncResponse {
	s.Body = v
	return s
}

type QueryTagJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TagJobIds            *string `json:"TagJobIds,omitempty" xml:"TagJobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryTagJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryTagJobListRequest) SetOwnerId(v int64) *QueryTagJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryTagJobListRequest) SetResourceOwnerAccount(v string) *QueryTagJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryTagJobListRequest) SetResourceOwnerId(v int64) *QueryTagJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTagJobListRequest) SetTagJobIds(v string) *QueryTagJobListRequest {
	s.TagJobIds = &v
	return s
}

func (s *QueryTagJobListRequest) SetOwnerAccount(v string) *QueryTagJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryTagJobListResponseBody struct {
	TagJobList  *QueryTagJobListResponseBodyTagJobList  `json:"TagJobList,omitempty" xml:"TagJobList,omitempty" type:"Struct"`
	RequestId   *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistIds *QueryTagJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryTagJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBody) SetTagJobList(v *QueryTagJobListResponseBodyTagJobList) *QueryTagJobListResponseBody {
	s.TagJobList = v
	return s
}

func (s *QueryTagJobListResponseBody) SetRequestId(v string) *QueryTagJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTagJobListResponseBody) SetNonExistIds(v *QueryTagJobListResponseBodyNonExistIds) *QueryTagJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryTagJobListResponseBodyTagJobList struct {
	TagJob []*QueryTagJobListResponseBodyTagJobListTagJob `json:"TagJob,omitempty" xml:"TagJob,omitempty" type:"Repeated"`
}

func (s QueryTagJobListResponseBodyTagJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobList) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobList) SetTagJob(v []*QueryTagJobListResponseBodyTagJobListTagJob) *QueryTagJobListResponseBodyTagJobList {
	s.TagJob = v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJob struct {
	CreationTime   *string                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VideoTagResult *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult `json:"VideoTagResult,omitempty" xml:"VideoTagResult,omitempty" type:"Struct"`
	State          *string                                                    `json:"State,omitempty" xml:"State,omitempty"`
	UserData       *string                                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code           *string                                                    `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                                    `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId     *string                                                    `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input          *QueryTagJobListResponseBodyTagJobListTagJobInput          `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id             *string                                                    `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJob) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJob) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetCreationTime(v string) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.CreationTime = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetVideoTagResult(v *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.VideoTagResult = v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetState(v string) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.State = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetUserData(v string) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.UserData = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetCode(v string) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.Code = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetMessage(v string) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.Message = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetPipelineId(v string) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.PipelineId = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetInput(v *QueryTagJobListResponseBodyTagJobListTagJobInput) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.Input = v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJob) SetId(v string) *QueryTagJobListResponseBodyTagJobListTagJob {
	s.Id = &v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult struct {
	TagAnResults *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResults `json:"TagAnResults,omitempty" xml:"TagAnResults,omitempty" type:"Struct"`
	TagFrResults *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResults `json:"TagFrResults,omitempty" xml:"TagFrResults,omitempty" type:"Struct"`
	Details      *string                                                                `json:"Details,omitempty" xml:"Details,omitempty"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult) SetTagAnResults(v *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResults) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult {
	s.TagAnResults = v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult) SetTagFrResults(v *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResults) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult {
	s.TagFrResults = v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult) SetDetails(v string) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResult {
	s.Details = &v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResults struct {
	TagAnResult []*QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult `json:"TagAnResult,omitempty" xml:"TagAnResult,omitempty" type:"Repeated"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResults) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResults) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResults) SetTagAnResult(v []*QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResults {
	s.TagAnResult = v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult struct {
	Score *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult) SetScore(v string) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult {
	s.Score = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult) SetLabel(v string) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagAnResultsTagAnResult {
	s.Label = &v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResults struct {
	TagFrResult []*QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult `json:"TagFrResult,omitempty" xml:"TagFrResult,omitempty" type:"Repeated"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResults) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResults) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResults) SetTagFrResult(v []*QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResults {
	s.TagFrResult = v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult struct {
	TagFaces *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFaces `json:"TagFaces,omitempty" xml:"TagFaces,omitempty" type:"Struct"`
	Time     *string                                                                                   `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult) SetTagFaces(v *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFaces) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult {
	s.TagFaces = v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult) SetTime(v string) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResult {
	s.Time = &v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFaces struct {
	TagFace []*QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace `json:"TagFace,omitempty" xml:"TagFace,omitempty" type:"Repeated"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFaces) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFaces) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFaces) SetTagFace(v []*QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFaces {
	s.TagFace = v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace struct {
	Score  *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace) SetScore(v string) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace {
	s.Score = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace) SetName(v string) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace {
	s.Name = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace) SetTarget(v string) *QueryTagJobListResponseBodyTagJobListTagJobVideoTagResultTagFrResultsTagFrResultTagFacesTagFace {
	s.Target = &v
	return s
}

type QueryTagJobListResponseBodyTagJobListTagJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryTagJobListResponseBodyTagJobListTagJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyTagJobListTagJobInput) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobInput) SetObject(v string) *QueryTagJobListResponseBodyTagJobListTagJobInput {
	s.Object = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobInput) SetLocation(v string) *QueryTagJobListResponseBodyTagJobListTagJobInput {
	s.Location = &v
	return s
}

func (s *QueryTagJobListResponseBodyTagJobListTagJobInput) SetBucket(v string) *QueryTagJobListResponseBodyTagJobListTagJobInput {
	s.Bucket = &v
	return s
}

type QueryTagJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryTagJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryTagJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryTagJobListResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTagJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTagJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTagJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryTagJobListResponse) SetHeaders(v map[string]*string) *QueryTagJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryTagJobListResponse) SetBody(v *QueryTagJobListResponseBody) *QueryTagJobListResponse {
	s.Body = v
	return s
}

type SubmitFpDBDeleteJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	FpDBId               *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	DelType              *string `json:"DelType,omitempty" xml:"DelType,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitFpDBDeleteJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpDBDeleteJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitFpDBDeleteJobRequest) SetOwnerId(v int64) *SubmitFpDBDeleteJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitFpDBDeleteJobRequest) SetResourceOwnerAccount(v string) *SubmitFpDBDeleteJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitFpDBDeleteJobRequest) SetResourceOwnerId(v int64) *SubmitFpDBDeleteJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitFpDBDeleteJobRequest) SetPipelineId(v string) *SubmitFpDBDeleteJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitFpDBDeleteJobRequest) SetFpDBId(v string) *SubmitFpDBDeleteJobRequest {
	s.FpDBId = &v
	return s
}

func (s *SubmitFpDBDeleteJobRequest) SetUserData(v string) *SubmitFpDBDeleteJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitFpDBDeleteJobRequest) SetDelType(v string) *SubmitFpDBDeleteJobRequest {
	s.DelType = &v
	return s
}

func (s *SubmitFpDBDeleteJobRequest) SetOwnerAccount(v string) *SubmitFpDBDeleteJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitFpDBDeleteJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitFpDBDeleteJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpDBDeleteJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitFpDBDeleteJobResponseBody) SetRequestId(v string) *SubmitFpDBDeleteJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitFpDBDeleteJobResponseBody) SetJobId(v string) *SubmitFpDBDeleteJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitFpDBDeleteJobResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitFpDBDeleteJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitFpDBDeleteJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitFpDBDeleteJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitFpDBDeleteJobResponse) SetHeaders(v map[string]*string) *SubmitFpDBDeleteJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitFpDBDeleteJobResponse) SetBody(v *SubmitFpDBDeleteJobResponseBody) *SubmitFpDBDeleteJobResponse {
	s.Body = v
	return s
}

type GetJobInfoRequest struct {
	JobId *string `json:"jobId,omitempty" xml:"jobId,omitempty"`
}

func (s GetJobInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s GetJobInfoRequest) GoString() string {
	return s.String()
}

func (s *GetJobInfoRequest) SetJobId(v string) *GetJobInfoRequest {
	s.JobId = &v
	return s
}

type GetJobInfoResponseBody struct {
	// Id of the request
	RequestId      *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MtsTransferJob *GetJobInfoResponseBodyMtsTransferJob `json:"MtsTransferJob,omitempty" xml:"MtsTransferJob,omitempty" type:"Struct"`
}

func (s GetJobInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetJobInfoResponseBody) GoString() string {
	return s.String()
}

func (s *GetJobInfoResponseBody) SetRequestId(v string) *GetJobInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetJobInfoResponseBody) SetMtsTransferJob(v *GetJobInfoResponseBodyMtsTransferJob) *GetJobInfoResponseBody {
	s.MtsTransferJob = v
	return s
}

type GetJobInfoResponseBodyMtsTransferJob struct {
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	JobType      *string `json:"JobType,omitempty" xml:"JobType,omitempty"`
	CreateTime   *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	ModifiedTime *string `json:"ModifiedTime,omitempty" xml:"ModifiedTime,omitempty"`
	FinishedTime *string `json:"FinishedTime,omitempty" xml:"FinishedTime,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Extend       *string `json:"Extend,omitempty" xml:"Extend,omitempty"`
	RequestJson  *string `json:"RequestJson,omitempty" xml:"RequestJson,omitempty"`
}

func (s GetJobInfoResponseBodyMtsTransferJob) String() string {
	return tea.Prettify(s)
}

func (s GetJobInfoResponseBodyMtsTransferJob) GoString() string {
	return s.String()
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetJobId(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.JobId = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetJobType(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.JobType = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetCreateTime(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.CreateTime = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetModifiedTime(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.ModifiedTime = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetFinishedTime(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.FinishedTime = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetState(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.State = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetErrorCode(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.ErrorCode = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetErrorMessage(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.ErrorMessage = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetUserData(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.UserData = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetExtend(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.Extend = &v
	return s
}

func (s *GetJobInfoResponseBodyMtsTransferJob) SetRequestJson(v string) *GetJobInfoResponseBodyMtsTransferJob {
	s.RequestJson = &v
	return s
}

type GetJobInfoResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *GetJobInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetJobInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s GetJobInfoResponse) GoString() string {
	return s.String()
}

func (s *GetJobInfoResponse) SetHeaders(v map[string]*string) *GetJobInfoResponse {
	s.Headers = v
	return s
}

func (s *GetJobInfoResponse) SetBody(v *GetJobInfoResponseBody) *GetJobInfoResponse {
	s.Body = v
	return s
}

type AddMediaTagRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	Tag                  *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddMediaTagRequest) String() string {
	return tea.Prettify(s)
}

func (s AddMediaTagRequest) GoString() string {
	return s.String()
}

func (s *AddMediaTagRequest) SetOwnerId(v int64) *AddMediaTagRequest {
	s.OwnerId = &v
	return s
}

func (s *AddMediaTagRequest) SetResourceOwnerAccount(v string) *AddMediaTagRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddMediaTagRequest) SetResourceOwnerId(v int64) *AddMediaTagRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddMediaTagRequest) SetMediaId(v string) *AddMediaTagRequest {
	s.MediaId = &v
	return s
}

func (s *AddMediaTagRequest) SetTag(v string) *AddMediaTagRequest {
	s.Tag = &v
	return s
}

func (s *AddMediaTagRequest) SetOwnerAccount(v string) *AddMediaTagRequest {
	s.OwnerAccount = &v
	return s
}

type AddMediaTagResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddMediaTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddMediaTagResponseBody) GoString() string {
	return s.String()
}

func (s *AddMediaTagResponseBody) SetRequestId(v string) *AddMediaTagResponseBody {
	s.RequestId = &v
	return s
}

type AddMediaTagResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddMediaTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddMediaTagResponse) String() string {
	return tea.Prettify(s)
}

func (s AddMediaTagResponse) GoString() string {
	return s.String()
}

func (s *AddMediaTagResponse) SetHeaders(v map[string]*string) *AddMediaTagResponse {
	s.Headers = v
	return s
}

func (s *AddMediaTagResponse) SetBody(v *AddMediaTagResponseBody) *AddMediaTagResponse {
	s.Body = v
	return s
}

type UnbindInputBucketRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Bucket               *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	RoleArn              *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UnbindInputBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s UnbindInputBucketRequest) GoString() string {
	return s.String()
}

func (s *UnbindInputBucketRequest) SetOwnerId(v int64) *UnbindInputBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *UnbindInputBucketRequest) SetResourceOwnerAccount(v string) *UnbindInputBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UnbindInputBucketRequest) SetResourceOwnerId(v int64) *UnbindInputBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UnbindInputBucketRequest) SetBucket(v string) *UnbindInputBucketRequest {
	s.Bucket = &v
	return s
}

func (s *UnbindInputBucketRequest) SetRoleArn(v string) *UnbindInputBucketRequest {
	s.RoleArn = &v
	return s
}

func (s *UnbindInputBucketRequest) SetOwnerAccount(v string) *UnbindInputBucketRequest {
	s.OwnerAccount = &v
	return s
}

type UnbindInputBucketResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UnbindInputBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UnbindInputBucketResponseBody) GoString() string {
	return s.String()
}

func (s *UnbindInputBucketResponseBody) SetRequestId(v string) *UnbindInputBucketResponseBody {
	s.RequestId = &v
	return s
}

type UnbindInputBucketResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UnbindInputBucketResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UnbindInputBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s UnbindInputBucketResponse) GoString() string {
	return s.String()
}

func (s *UnbindInputBucketResponse) SetHeaders(v map[string]*string) *UnbindInputBucketResponse {
	s.Headers = v
	return s
}

func (s *UnbindInputBucketResponse) SetBody(v *UnbindInputBucketResponseBody) *UnbindInputBucketResponse {
	s.Body = v
	return s
}

type QueryMediaWorkflowExecutionListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	RunIds               *string `json:"RunIds,omitempty" xml:"RunIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMediaWorkflowExecutionListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListRequest) SetOwnerId(v int64) *QueryMediaWorkflowExecutionListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListRequest) SetResourceOwnerAccount(v string) *QueryMediaWorkflowExecutionListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListRequest) SetResourceOwnerId(v int64) *QueryMediaWorkflowExecutionListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListRequest) SetRunIds(v string) *QueryMediaWorkflowExecutionListRequest {
	s.RunIds = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListRequest) SetOwnerAccount(v string) *QueryMediaWorkflowExecutionListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBody struct {
	NonExistRunIds             *QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds             `json:"NonExistRunIds,omitempty" xml:"NonExistRunIds,omitempty" type:"Struct"`
	MediaWorkflowExecutionList *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList `json:"MediaWorkflowExecutionList,omitempty" xml:"MediaWorkflowExecutionList,omitempty" type:"Struct"`
	RequestId                  *string                                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBody) SetNonExistRunIds(v *QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds) *QueryMediaWorkflowExecutionListResponseBody {
	s.NonExistRunIds = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBody) SetMediaWorkflowExecutionList(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList) *QueryMediaWorkflowExecutionListResponseBody {
	s.MediaWorkflowExecutionList = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBody) SetRequestId(v string) *QueryMediaWorkflowExecutionListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds) SetRunId(v []*string) *QueryMediaWorkflowExecutionListResponseBodyNonExistRunIds {
	s.RunId = v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList struct {
	MediaWorkflowExecution []*QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution `json:"MediaWorkflowExecution,omitempty" xml:"MediaWorkflowExecution,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList) SetMediaWorkflowExecution(v []*QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionList {
	s.MediaWorkflowExecution = v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution struct {
	CreationTime    *string                                                                                                  `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string                                                                                                  `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string                                                                                                  `json:"State,omitempty" xml:"State,omitempty"`
	ActivityList    *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList `json:"ActivityList,omitempty" xml:"ActivityList,omitempty" type:"Struct"`
	Name            *string                                                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	Input           *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput        `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MediaId         *string                                                                                                  `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	RunId           *string                                                                                                  `json:"RunId,omitempty" xml:"RunId,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetCreationTime(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetMediaWorkflowId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetState(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.State = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetActivityList(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.ActivityList = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetName(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.Name = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetInput(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.Input = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetMediaId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.MediaId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetRunId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.RunId = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList struct {
	Activity []*QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity `json:"Activity,omitempty" xml:"Activity,omitempty" type:"Repeated"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) SetActivity(v []*QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList {
	s.Activity = v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity struct {
	EndTime          *string                                                                                                                          `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Type             *string                                                                                                                          `json:"Type,omitempty" xml:"Type,omitempty"`
	StartTime        *string                                                                                                                          `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	State            *string                                                                                                                          `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                                                                                          `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code             *string                                                                                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                                                                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	Name             *string                                                                                                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	MNSMessageResult *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetEndTime(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.EndTime = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetType(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Type = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetStartTime(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.StartTime = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetState(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.State = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetJobId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.JobId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetCode(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Code = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetMessage(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Message = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetName(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Name = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetMNSMessageResult(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.MNSMessageResult = v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetMessageId(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetErrorMessage(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetErrorCode(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput struct {
	UserData  *string                                                                                                    `json:"UserData,omitempty" xml:"UserData,omitempty"`
	InputFile *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) SetUserData(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput {
	s.UserData = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) SetInputFile(v *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput {
	s.InputFile = v
	return s
}

type QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetObject(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Object = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetLocation(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetBucket(v string) *QueryMediaWorkflowExecutionListResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Bucket = &v
	return s
}

type QueryMediaWorkflowExecutionListResponse struct {
	Headers map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaWorkflowExecutionListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaWorkflowExecutionListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaWorkflowExecutionListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaWorkflowExecutionListResponse) SetHeaders(v map[string]*string) *QueryMediaWorkflowExecutionListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaWorkflowExecutionListResponse) SetBody(v *QueryMediaWorkflowExecutionListResponseBody) *QueryMediaWorkflowExecutionListResponse {
	s.Body = v
	return s
}

type SubmitComplexJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Inputs               *string `json:"Inputs,omitempty" xml:"Inputs,omitempty"`
	ComplexConfigs       *string `json:"ComplexConfigs,omitempty" xml:"ComplexConfigs,omitempty"`
	TranscodeOutput      *string `json:"TranscodeOutput,omitempty" xml:"TranscodeOutput,omitempty"`
	OutputBucket         *string `json:"OutputBucket,omitempty" xml:"OutputBucket,omitempty"`
	OutputLocation       *string `json:"OutputLocation,omitempty" xml:"OutputLocation,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitComplexJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobRequest) SetOwnerId(v int64) *SubmitComplexJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitComplexJobRequest) SetResourceOwnerAccount(v string) *SubmitComplexJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitComplexJobRequest) SetResourceOwnerId(v int64) *SubmitComplexJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitComplexJobRequest) SetInputs(v string) *SubmitComplexJobRequest {
	s.Inputs = &v
	return s
}

func (s *SubmitComplexJobRequest) SetComplexConfigs(v string) *SubmitComplexJobRequest {
	s.ComplexConfigs = &v
	return s
}

func (s *SubmitComplexJobRequest) SetTranscodeOutput(v string) *SubmitComplexJobRequest {
	s.TranscodeOutput = &v
	return s
}

func (s *SubmitComplexJobRequest) SetOutputBucket(v string) *SubmitComplexJobRequest {
	s.OutputBucket = &v
	return s
}

func (s *SubmitComplexJobRequest) SetOutputLocation(v string) *SubmitComplexJobRequest {
	s.OutputLocation = &v
	return s
}

func (s *SubmitComplexJobRequest) SetPipelineId(v string) *SubmitComplexJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitComplexJobRequest) SetUserData(v string) *SubmitComplexJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitComplexJobRequest) SetOwnerAccount(v string) *SubmitComplexJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitComplexJobResponseBody struct {
	RequestId  *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	ComplexJob *SubmitComplexJobResponseBodyComplexJob `json:"ComplexJob,omitempty" xml:"ComplexJob,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBody) SetRequestId(v string) *SubmitComplexJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitComplexJobResponseBody) SetComplexJob(v *SubmitComplexJobResponseBodyComplexJob) *SubmitComplexJobResponseBody {
	s.ComplexJob = v
	return s
}

type SubmitComplexJobResponseBodyComplexJob struct {
	CreationTime          *string                                                      `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent               *int64                                                       `json:"Percent,omitempty" xml:"Percent,omitempty"`
	FinishTime            *string                                                      `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State                 *string                                                      `json:"State,omitempty" xml:"State,omitempty"`
	TranscodeOutput       *SubmitComplexJobResponseBodyComplexJobTranscodeOutput       `json:"transcodeOutput,omitempty" xml:"transcodeOutput,omitempty" type:"Struct"`
	Message               *string                                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	MNSMessageResult      *SubmitComplexJobResponseBodyComplexJobMNSMessageResult      `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	ComplexEditingConfigs *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigs `json:"ComplexEditingConfigs,omitempty" xml:"ComplexEditingConfigs,omitempty" type:"Struct"`
	Inputs                *SubmitComplexJobResponseBodyComplexJobInputs                `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Struct"`
	JobId                 *string                                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code                  *string                                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	PipelineId            *string                                                      `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJob) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetCreationTime(v string) *SubmitComplexJobResponseBodyComplexJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetPercent(v int64) *SubmitComplexJobResponseBodyComplexJob {
	s.Percent = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetFinishTime(v string) *SubmitComplexJobResponseBodyComplexJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetState(v string) *SubmitComplexJobResponseBodyComplexJob {
	s.State = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetTranscodeOutput(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) *SubmitComplexJobResponseBodyComplexJob {
	s.TranscodeOutput = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetMessage(v string) *SubmitComplexJobResponseBodyComplexJob {
	s.Message = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetMNSMessageResult(v *SubmitComplexJobResponseBodyComplexJobMNSMessageResult) *SubmitComplexJobResponseBodyComplexJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetComplexEditingConfigs(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigs) *SubmitComplexJobResponseBodyComplexJob {
	s.ComplexEditingConfigs = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetInputs(v *SubmitComplexJobResponseBodyComplexJobInputs) *SubmitComplexJobResponseBodyComplexJob {
	s.Inputs = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetJobId(v string) *SubmitComplexJobResponseBodyComplexJob {
	s.JobId = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetCode(v string) *SubmitComplexJobResponseBodyComplexJob {
	s.Code = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJob) SetPipelineId(v string) *SubmitComplexJobResponseBodyComplexJob {
	s.PipelineId = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutput struct {
	Video                  *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig            *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Encryption             *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	WaterMarkList          *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
	DeWatermark            *string                                                                      `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	WaterMarkConfigUrl     *string                                                                      `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	M3U8NonStandardSupport *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	Priority               *string                                                                      `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Audio                  *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                                      `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	MergeList              *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	SuperReso              *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	UserData               *string                                                                      `json:"UserData,omitempty" xml:"UserData,omitempty"`
	DigiWaterMark          *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark          `json:"DigiWaterMark,omitempty" xml:"DigiWaterMark,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                                      `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	OutputFile             *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Rotate                 *string                                                                      `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Container              *SubmitComplexJobResponseBodyComplexJobTranscodeOutputContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Clip                   *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                                      `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	MuxConfig              *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TemplateId             *string                                                                      `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	SubtitleConfig         *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	Properties             *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutput) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetVideo(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.Video = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetTransConfig(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.TransConfig = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetEncryption(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.Encryption = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetWaterMarkList(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkList) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.WaterMarkList = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetDeWatermark(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.DeWatermark = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetWaterMarkConfigUrl(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetM3U8NonStandardSupport(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupport) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetPriority(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.Priority = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetAudio(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.Audio = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetAudioStreamMap(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.AudioStreamMap = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetMergeList(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeList) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.MergeList = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetSuperReso(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSuperReso) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.SuperReso = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetUserData(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.UserData = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetDigiWaterMark(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.DigiWaterMark = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetVideoStreamMap(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.VideoStreamMap = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetOutputFile(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.OutputFile = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetRotate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.Rotate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetContainer(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputContainer) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.Container = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetClip(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClip) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.Clip = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetMergeConfigUrl(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.MergeConfigUrl = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetMuxConfig(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.MuxConfig = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetTemplateId(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.TemplateId = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetSubtitleConfig(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.SubtitleConfig = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutput) SetProperties(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) *SubmitComplexJobResponseBodyComplexJobTranscodeOutput {
	s.Properties = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo struct {
	Bufsize    *string                                                               `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain    *string                                                               `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt     *string                                                               `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad        *string                                                               `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec      *string                                                               `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height     *string                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale     *string                                                               `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop       *string                                                               `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate    *string                                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate    *string                                                               `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps     *string                                                               `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile    *string                                                               `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf        *string                                                               `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop        *string                                                               `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width      *string                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps        *string                                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset     *string                                                               `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode   *string                                                               `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetBufsize(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetDegrain(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Degrain = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetBitrateBnd(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.BitrateBnd = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetPixFmt(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetPad(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Pad = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetCodec(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Codec = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetHeight(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Height = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetQscale(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Qscale = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetCrop(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Crop = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetMaxrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetMaxFps(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.MaxFps = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetProfile(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Profile = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetCrf(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Crf = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetGop(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Gop = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetWidth(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Width = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetFps(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Fps = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetPreset(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.Preset = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo) SetScanMode(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideo {
	s.ScanMode = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd) SetMax(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd) SetMin(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputVideoBitrateBnd {
	s.Min = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	Duration                *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetIsCheckAudioBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetIsCheckReso(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetTransMode(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.TransMode = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetAdjDarMethod(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetDuration(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.Duration = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetIsCheckVideoBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetIsCheckResoFail(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption struct {
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) SetType(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption {
	s.Type = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) SetKey(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption {
	s.Key = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) SetKeyType(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption {
	s.KeyType = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) SetId(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption {
	s.Id = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) SetKeyUri(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption {
	s.KeyUri = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption) SetSkipCnt(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputEncryption {
	s.SkipCnt = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkList struct {
	WaterMark []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkList) SetWaterMark(v []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkList {
	s.WaterMark = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark struct {
	Type                *string                                                                               `json:"Type,omitempty" xml:"Type,omitempty"`
	ReferPos            *string                                                                               `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Dx                  *string                                                                               `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width               *string                                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
	Height              *string                                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	WaterMarkTemplateId *string                                                                               `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Dy                  *string                                                                               `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) SetType(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) SetReferPos(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) SetDx(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) SetWidth(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark {
	s.Width = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) SetHeight(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) SetInputFile(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark) SetDy(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile) SetObject(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile) SetLocation(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile) SetBucket(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupport struct {
	TS *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupport) SetTS(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupport {
	s.TS = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS struct {
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS) SetSizeSupport(v bool) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS) SetMd5Support(v bool) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio struct {
	Profile    *string                                                           `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string                                                           `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string                                                           `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string                                                           `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string                                                           `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Volume     *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
	Bitrate    *string                                                           `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) SetProfile(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio {
	s.Profile = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) SetCodec(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio {
	s.Codec = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) SetSamplerate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) SetQscale(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio {
	s.Qscale = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) SetChannels(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio {
	s.Channels = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) SetVolume(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio {
	s.Volume = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio) SetBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudio {
	s.Bitrate = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume struct {
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume) SetMethod(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume) SetLevel(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputAudioVolume {
	s.Level = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeList struct {
	Merge []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeList) SetMerge(v []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeList {
	s.Merge = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge) SetStart(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge {
	s.Start = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge) SetRoleArn(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge) SetMergeURL(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge) SetDuration(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMergeListMerge {
	s.Duration = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSuperReso) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSuperReso) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSuperReso) SetIsHalfSample(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSuperReso {
	s.IsHalfSample = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark struct {
	Type      *string                                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	Alpha     *string                                                                      `json:"Alpha,omitempty" xml:"Alpha,omitempty"`
	InputFile *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark) SetType(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark {
	s.Type = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark) SetAlpha(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark {
	s.Alpha = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark) SetInputFile(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMark {
	s.InputFile = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile) SetObject(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile) SetLocation(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile) SetBucket(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputDigiWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile) SetRoleArn(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile) SetObject(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile) SetLocation(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile) SetBucket(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputOutputFile {
	s.Bucket = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputContainer) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputContainer) SetFormat(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputContainer {
	s.Format = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputClip struct {
	TimeSpan *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputClip) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClip) SetTimeSpan(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClip {
	s.TimeSpan = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan struct {
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan) SetSeek(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan {
	s.Seek = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan) SetDuration(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputClipTimeSpan {
	s.Duration = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig struct {
	Gif     *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig) SetGif(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig {
	s.Gif = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig) SetSegment(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigSegment) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfig {
	s.Segment = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif) SetFinalDelay(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif) SetDitherMode(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif) SetLoop(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif) SetIsCustomPalette(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigSegment) SetDuration(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputMuxConfigSegment {
	s.Duration = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig struct {
	ExtSubtitleList *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig) SetExtSubtitleList(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleList) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig) SetSubtitleList(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleList) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfig {
	s.SubtitleList = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                             `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                             `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleList struct {
	Subtitle []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleList) SetSubtitle(v []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleListSubtitle) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleListSubtitle) SetMap(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties struct {
	Width      *string                                                                 `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                                 `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                                 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                                 `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                                 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                                 `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                                 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetWidth(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.Width = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetHeight(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.Height = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetDuration(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.Duration = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetFps(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.Fps = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.Bitrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetFileFormat(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.FileFormat = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetStreams(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.Streams = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetFormat(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.Format = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties) SetFileSize(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputProperties {
	s.FileSize = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams struct {
	VideoStreamList    *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams) SetVideoStreamList(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamList) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams) SetAudioStreamList(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamList) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams) SetSubtitleStreamList(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamList) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamList struct {
	VideoStream []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamList) SetVideoStream(v []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream struct {
	Index          *string                                                                                                      `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                                      `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                                      `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                                      `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Sar            *string                                                                                                      `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Lang           *string                                                                                                      `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                                      `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Height         *string                                                                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	NumFrames      *string                                                                                                      `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string                                                                                                      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string                                                                                                      `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	HasBFrames     *string                                                                                                      `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                                      `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NetworkCost    *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Dar            *string                                                                                                      `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                                      `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Width          *string                                                                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration       *string                                                                                                      `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                      `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                                      `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                                      `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                                      `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamList struct {
	AudioStream []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamList) SetAudioStream(v []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) SetStartTime(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) SetNumPrograms(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) SetSize(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat {
	s.Size = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) SetNumStreams(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) SetFormatLongName(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) SetDuration(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) SetBitrate(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat) SetFormatName(v string) *SubmitComplexJobResponseBodyComplexJobTranscodeOutputPropertiesFormat {
	s.FormatName = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobMNSMessageResult) SetMessageId(v string) *SubmitComplexJobResponseBodyComplexJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobMNSMessageResult) SetErrorMessage(v string) *SubmitComplexJobResponseBodyComplexJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobMNSMessageResult) SetErrorCode(v string) *SubmitComplexJobResponseBodyComplexJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigs struct {
	ComplexEditingConfigs []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigs `json:"ComplexEditingConfigs,omitempty" xml:"ComplexEditingConfigs,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigs) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigs) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigs) SetComplexEditingConfigs(v []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigs) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigs {
	s.ComplexEditingConfigs = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigs struct {
	Editing *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing `json:"Editing,omitempty" xml:"Editing,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigs) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigs) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigs) SetEditing(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigs {
	s.Editing = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing struct {
	Timeline *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	ClipList *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipList `json:"ClipList,omitempty" xml:"ClipList,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing) SetTimeline(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing {
	s.Timeline = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing) SetClipList(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipList) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditing {
	s.ClipList = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline struct {
	TrackList      *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList      `json:"TrackList,omitempty" xml:"TrackList,omitempty" type:"Struct"`
	TimelineConfig *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig `json:"TimelineConfig,omitempty" xml:"TimelineConfig,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) SetTrackList(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline {
	s.TrackList = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline) SetTimelineConfig(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimeline {
	s.TimelineConfig = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList struct {
	Track []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack `json:"Track,omitempty" xml:"Track,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList) SetTrack(v []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackList {
	s.Track = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack struct {
	Type  *string                                                                                                             `json:"Type,omitempty" xml:"Type,omitempty"`
	Order *string                                                                                                             `json:"Order,omitempty" xml:"Order,omitempty"`
	Id    *string                                                                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
	Clips *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips `json:"Clips,omitempty" xml:"Clips,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) SetType(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack {
	s.Type = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) SetOrder(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack {
	s.Order = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) SetId(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack {
	s.Id = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack) SetClips(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrack {
	s.Clips = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips struct {
	Clip []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips) SetClip(v []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClips {
	s.Clip = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip struct {
	ClipsConfig *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig `json:"ClipsConfig,omitempty" xml:"ClipsConfig,omitempty" type:"Struct"`
	Out         *string                                                                                                                            `json:"Out,omitempty" xml:"Out,omitempty"`
	In          *string                                                                                                                            `json:"In,omitempty" xml:"In,omitempty"`
	ClipID      *string                                                                                                                            `json:"clipID,omitempty" xml:"clipID,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) SetClipsConfig(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip {
	s.ClipsConfig = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) SetOut(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip {
	s.Out = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) SetIn(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip {
	s.In = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip) SetClipID(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClip {
	s.ClipID = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig struct {
	ClipsConfigVideo *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo `json:"ClipsConfigVideo,omitempty" xml:"ClipsConfigVideo,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig) SetClipsConfigVideo(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfig {
	s.ClipsConfigVideo = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo struct {
	T *string `json:"T,omitempty" xml:"T,omitempty"`
	L *string `json:"L,omitempty" xml:"L,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetT(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.T = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo) SetL(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTrackListTrackClipsClipClipsConfigClipsConfigVideo {
	s.L = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig struct {
	TimelineConfigAudio *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio `json:"TimelineConfigAudio,omitempty" xml:"TimelineConfigAudio,omitempty" type:"Struct"`
	TimelineConfigVideo *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo `json:"TimelineConfigVideo,omitempty" xml:"TimelineConfigVideo,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) SetTimelineConfigAudio(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig {
	s.TimelineConfigAudio = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig) SetTimelineConfigVideo(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfig {
	s.TimelineConfigVideo = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio struct {
	ChannelLayout *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Samplerate    *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Channels      *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) SetChannelLayout(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) SetSamplerate(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio) SetChannels(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigAudio {
	s.Channels = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo struct {
	BgColor        *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	Width          *string `json:"Width,omitempty" xml:"Width,omitempty"`
	RenderRatio    *string `json:"RenderRatio,omitempty" xml:"RenderRatio,omitempty"`
	IsGpuData      *string `json:"IsGpuData,omitempty" xml:"IsGpuData,omitempty"`
	Height         *string `json:"Height,omitempty" xml:"Height,omitempty"`
	IsOneTrackData *string `json:"IsOneTrackData,omitempty" xml:"IsOneTrackData,omitempty"`
	Fps            *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	ReclosePrec    *string `json:"ReclosePrec,omitempty" xml:"ReclosePrec,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetBgColor(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.BgColor = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetWidth(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Width = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetRenderRatio(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.RenderRatio = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetIsGpuData(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsGpuData = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetHeight(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Height = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetIsOneTrackData(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.IsOneTrackData = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetFps(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.Fps = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo) SetReclosePrec(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingTimelineTimelineConfigTimelineConfigVideo {
	s.ReclosePrec = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipList struct {
	Clip []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipList) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipList) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipList) SetClip(v []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipList {
	s.Clip = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip struct {
	Type          *string                                                                                                     `json:"Type,omitempty" xml:"Type,omitempty"`
	SourceID      *string                                                                                                     `json:"SourceID,omitempty" xml:"SourceID,omitempty"`
	Effects       *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects `json:"Effects,omitempty" xml:"Effects,omitempty" type:"Struct"`
	SourceType    *string                                                                                                     `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	SourceStrmMap *string                                                                                                     `json:"SourceStrmMap,omitempty" xml:"SourceStrmMap,omitempty"`
	Out           *string                                                                                                     `json:"Out,omitempty" xml:"Out,omitempty"`
	In            *string                                                                                                     `json:"In,omitempty" xml:"In,omitempty"`
	Id            *string                                                                                                     `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetType(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.Type = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetSourceID(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.SourceID = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetEffects(v *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.Effects = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetSourceType(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.SourceType = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetSourceStrmMap(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.SourceStrmMap = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetOut(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.Out = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetIn(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.In = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip) SetId(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClip {
	s.Id = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects struct {
	Effect []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect `json:"Effect,omitempty" xml:"Effect,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects) SetEffect(v []*SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffects {
	s.Effect = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect struct {
	Effect       *string `json:"Effect,omitempty" xml:"Effect,omitempty"`
	EffectConfig *string `json:"EffectConfig,omitempty" xml:"EffectConfig,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) SetEffect(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect {
	s.Effect = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect) SetEffectConfig(v string) *SubmitComplexJobResponseBodyComplexJobComplexEditingConfigsComplexEditingConfigsEditingClipListClipEffectsEffect {
	s.EffectConfig = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobInputs struct {
	Inputs []*SubmitComplexJobResponseBodyComplexJobInputsInputs `json:"Inputs,omitempty" xml:"Inputs,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobInputs) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobInputs) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobInputs) SetInputs(v []*SubmitComplexJobResponseBodyComplexJobInputsInputs) *SubmitComplexJobResponseBodyComplexJobInputs {
	s.Inputs = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobInputsInputs struct {
	EditingInputs *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputs `json:"EditingInputs,omitempty" xml:"EditingInputs,omitempty" type:"Struct"`
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputs) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputs) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputs) SetEditingInputs(v *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputs) *SubmitComplexJobResponseBodyComplexJobInputsInputs {
	s.EditingInputs = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputs struct {
	EditingInput []*SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput `json:"EditingInput,omitempty" xml:"EditingInput,omitempty" type:"Repeated"`
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputs) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputs) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputs) SetEditingInput(v []*SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputs {
	s.EditingInput = v
	return s
}

type SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput struct {
	InputFile   *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile   `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	InputConfig *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig `json:"InputConfig,omitempty" xml:"InputConfig,omitempty" type:"Struct"`
	Id          *string                                                                                 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput) SetInputFile(v *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput {
	s.InputFile = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput) SetInputConfig(v *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput {
	s.InputConfig = v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput) SetId(v string) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInput {
	s.Id = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile) SetObject(v string) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile {
	s.Object = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile) SetLocation(v string) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile {
	s.Location = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile) SetBucket(v string) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputFile {
	s.Bucket = &v
	return s
}

type SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig struct {
	IsNormalSar       *string `json:"IsNormalSar,omitempty" xml:"IsNormalSar,omitempty"`
	DeinterlaceMethod *string `json:"DeinterlaceMethod,omitempty" xml:"DeinterlaceMethod,omitempty"`
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig) SetIsNormalSar(v string) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig {
	s.IsNormalSar = &v
	return s
}

func (s *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig) SetDeinterlaceMethod(v string) *SubmitComplexJobResponseBodyComplexJobInputsInputsEditingInputsEditingInputInputConfig {
	s.DeinterlaceMethod = &v
	return s
}

type SubmitComplexJobResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitComplexJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitComplexJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitComplexJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitComplexJobResponse) SetHeaders(v map[string]*string) *SubmitComplexJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitComplexJobResponse) SetBody(v *SubmitComplexJobResponseBody) *SubmitComplexJobResponse {
	s.Body = v
	return s
}

type AddAsrPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddAsrPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s AddAsrPipelineRequest) GoString() string {
	return s.String()
}

func (s *AddAsrPipelineRequest) SetOwnerId(v int64) *AddAsrPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *AddAsrPipelineRequest) SetResourceOwnerAccount(v string) *AddAsrPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddAsrPipelineRequest) SetResourceOwnerId(v int64) *AddAsrPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddAsrPipelineRequest) SetName(v string) *AddAsrPipelineRequest {
	s.Name = &v
	return s
}

func (s *AddAsrPipelineRequest) SetPriority(v int32) *AddAsrPipelineRequest {
	s.Priority = &v
	return s
}

func (s *AddAsrPipelineRequest) SetNotifyConfig(v string) *AddAsrPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *AddAsrPipelineRequest) SetOwnerAccount(v string) *AddAsrPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type AddAsrPipelineResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *AddAsrPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s AddAsrPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddAsrPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *AddAsrPipelineResponseBody) SetRequestId(v string) *AddAsrPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddAsrPipelineResponseBody) SetPipeline(v *AddAsrPipelineResponseBodyPipeline) *AddAsrPipelineResponseBody {
	s.Pipeline = v
	return s
}

type AddAsrPipelineResponseBodyPipeline struct {
	State        *string                                         `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *AddAsrPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                          `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                         `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s AddAsrPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s AddAsrPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *AddAsrPipelineResponseBodyPipeline) SetState(v string) *AddAsrPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *AddAsrPipelineResponseBodyPipeline) SetNotifyConfig(v *AddAsrPipelineResponseBodyPipelineNotifyConfig) *AddAsrPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *AddAsrPipelineResponseBodyPipeline) SetPriority(v int32) *AddAsrPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *AddAsrPipelineResponseBodyPipeline) SetName(v string) *AddAsrPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *AddAsrPipelineResponseBodyPipeline) SetId(v string) *AddAsrPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type AddAsrPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s AddAsrPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s AddAsrPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *AddAsrPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *AddAsrPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *AddAsrPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *AddAsrPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type AddAsrPipelineResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddAsrPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddAsrPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s AddAsrPipelineResponse) GoString() string {
	return s.String()
}

func (s *AddAsrPipelineResponse) SetHeaders(v map[string]*string) *AddAsrPipelineResponse {
	s.Headers = v
	return s
}

func (s *AddAsrPipelineResponse) SetBody(v *AddAsrPipelineResponseBody) *AddAsrPipelineResponse {
	s.Body = v
	return s
}

type CancelJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s CancelJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CancelJobRequest) GoString() string {
	return s.String()
}

func (s *CancelJobRequest) SetOwnerId(v int64) *CancelJobRequest {
	s.OwnerId = &v
	return s
}

func (s *CancelJobRequest) SetResourceOwnerAccount(v string) *CancelJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *CancelJobRequest) SetResourceOwnerId(v int64) *CancelJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *CancelJobRequest) SetJobId(v string) *CancelJobRequest {
	s.JobId = &v
	return s
}

func (s *CancelJobRequest) SetOwnerAccount(v string) *CancelJobRequest {
	s.OwnerAccount = &v
	return s
}

type CancelJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s CancelJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CancelJobResponseBody) GoString() string {
	return s.String()
}

func (s *CancelJobResponseBody) SetRequestId(v string) *CancelJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CancelJobResponseBody) SetJobId(v string) *CancelJobResponseBody {
	s.JobId = &v
	return s
}

type CancelJobResponse struct {
	Headers map[string]*string     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CancelJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CancelJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CancelJobResponse) GoString() string {
	return s.String()
}

func (s *CancelJobResponse) SetHeaders(v map[string]*string) *CancelJobResponse {
	s.Headers = v
	return s
}

func (s *CancelJobResponse) SetBody(v *CancelJobResponseBody) *CancelJobResponse {
	s.Body = v
	return s
}

type ListAllCategoryRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListAllCategoryRequest) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryRequest) GoString() string {
	return s.String()
}

func (s *ListAllCategoryRequest) SetOwnerId(v int64) *ListAllCategoryRequest {
	s.OwnerId = &v
	return s
}

func (s *ListAllCategoryRequest) SetResourceOwnerAccount(v string) *ListAllCategoryRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListAllCategoryRequest) SetResourceOwnerId(v int64) *ListAllCategoryRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListAllCategoryRequest) SetOwnerAccount(v string) *ListAllCategoryRequest {
	s.OwnerAccount = &v
	return s
}

type ListAllCategoryResponseBody struct {
	CategoryList *ListAllCategoryResponseBodyCategoryList `json:"CategoryList,omitempty" xml:"CategoryList,omitempty" type:"Struct"`
	RequestId    *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s ListAllCategoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryResponseBody) GoString() string {
	return s.String()
}

func (s *ListAllCategoryResponseBody) SetCategoryList(v *ListAllCategoryResponseBodyCategoryList) *ListAllCategoryResponseBody {
	s.CategoryList = v
	return s
}

func (s *ListAllCategoryResponseBody) SetRequestId(v string) *ListAllCategoryResponseBody {
	s.RequestId = &v
	return s
}

type ListAllCategoryResponseBodyCategoryList struct {
	Category []*ListAllCategoryResponseBodyCategoryListCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s ListAllCategoryResponseBodyCategoryList) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryResponseBodyCategoryList) GoString() string {
	return s.String()
}

func (s *ListAllCategoryResponseBodyCategoryList) SetCategory(v []*ListAllCategoryResponseBodyCategoryListCategory) *ListAllCategoryResponseBodyCategoryList {
	s.Category = v
	return s
}

type ListAllCategoryResponseBodyCategoryListCategory struct {
	CateName *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	ParentId *string `json:"ParentId,omitempty" xml:"ParentId,omitempty"`
	CateId   *string `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Level    *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s ListAllCategoryResponseBodyCategoryListCategory) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryResponseBodyCategoryListCategory) GoString() string {
	return s.String()
}

func (s *ListAllCategoryResponseBodyCategoryListCategory) SetCateName(v string) *ListAllCategoryResponseBodyCategoryListCategory {
	s.CateName = &v
	return s
}

func (s *ListAllCategoryResponseBodyCategoryListCategory) SetParentId(v string) *ListAllCategoryResponseBodyCategoryListCategory {
	s.ParentId = &v
	return s
}

func (s *ListAllCategoryResponseBodyCategoryListCategory) SetCateId(v string) *ListAllCategoryResponseBodyCategoryListCategory {
	s.CateId = &v
	return s
}

func (s *ListAllCategoryResponseBodyCategoryListCategory) SetLevel(v string) *ListAllCategoryResponseBodyCategoryListCategory {
	s.Level = &v
	return s
}

type ListAllCategoryResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListAllCategoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListAllCategoryResponse) String() string {
	return tea.Prettify(s)
}

func (s ListAllCategoryResponse) GoString() string {
	return s.String()
}

func (s *ListAllCategoryResponse) SetHeaders(v map[string]*string) *ListAllCategoryResponse {
	s.Headers = v
	return s
}

func (s *ListAllCategoryResponse) SetBody(v *ListAllCategoryResponseBody) *ListAllCategoryResponse {
	s.Body = v
	return s
}

type ListFpShotDBRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	FpDBIds              *string `json:"FpDBIds,omitempty" xml:"FpDBIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListFpShotDBRequest) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotDBRequest) GoString() string {
	return s.String()
}

func (s *ListFpShotDBRequest) SetOwnerId(v int64) *ListFpShotDBRequest {
	s.OwnerId = &v
	return s
}

func (s *ListFpShotDBRequest) SetResourceOwnerAccount(v string) *ListFpShotDBRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListFpShotDBRequest) SetResourceOwnerId(v int64) *ListFpShotDBRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListFpShotDBRequest) SetFpDBIds(v string) *ListFpShotDBRequest {
	s.FpDBIds = &v
	return s
}

func (s *ListFpShotDBRequest) SetOwnerAccount(v string) *ListFpShotDBRequest {
	s.OwnerAccount = &v
	return s
}

type ListFpShotDBResponseBody struct {
	FpShotDBList *ListFpShotDBResponseBodyFpShotDBList `json:"FpShotDBList,omitempty" xml:"FpShotDBList,omitempty" type:"Struct"`
	RequestId    *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistIds  *ListFpShotDBResponseBodyNonExistIds  `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s ListFpShotDBResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotDBResponseBody) GoString() string {
	return s.String()
}

func (s *ListFpShotDBResponseBody) SetFpShotDBList(v *ListFpShotDBResponseBodyFpShotDBList) *ListFpShotDBResponseBody {
	s.FpShotDBList = v
	return s
}

func (s *ListFpShotDBResponseBody) SetRequestId(v string) *ListFpShotDBResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListFpShotDBResponseBody) SetNonExistIds(v *ListFpShotDBResponseBodyNonExistIds) *ListFpShotDBResponseBody {
	s.NonExistIds = v
	return s
}

type ListFpShotDBResponseBodyFpShotDBList struct {
	FpShotDB []*ListFpShotDBResponseBodyFpShotDBListFpShotDB `json:"FpShotDB,omitempty" xml:"FpShotDB,omitempty" type:"Repeated"`
}

func (s ListFpShotDBResponseBodyFpShotDBList) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotDBResponseBodyFpShotDBList) GoString() string {
	return s.String()
}

func (s *ListFpShotDBResponseBodyFpShotDBList) SetFpShotDB(v []*ListFpShotDBResponseBodyFpShotDBListFpShotDB) *ListFpShotDBResponseBodyFpShotDBList {
	s.FpShotDB = v
	return s
}

type ListFpShotDBResponseBodyFpShotDBListFpShotDB struct {
	Status      *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	Name        *string `json:"Name,omitempty" xml:"Name,omitempty"`
	ModelId     *int32  `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	FpDBId      *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
}

func (s ListFpShotDBResponseBodyFpShotDBListFpShotDB) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotDBResponseBodyFpShotDBListFpShotDB) GoString() string {
	return s.String()
}

func (s *ListFpShotDBResponseBodyFpShotDBListFpShotDB) SetStatus(v string) *ListFpShotDBResponseBodyFpShotDBListFpShotDB {
	s.Status = &v
	return s
}

func (s *ListFpShotDBResponseBodyFpShotDBListFpShotDB) SetDescription(v string) *ListFpShotDBResponseBodyFpShotDBListFpShotDB {
	s.Description = &v
	return s
}

func (s *ListFpShotDBResponseBodyFpShotDBListFpShotDB) SetName(v string) *ListFpShotDBResponseBodyFpShotDBListFpShotDB {
	s.Name = &v
	return s
}

func (s *ListFpShotDBResponseBodyFpShotDBListFpShotDB) SetModelId(v int32) *ListFpShotDBResponseBodyFpShotDBListFpShotDB {
	s.ModelId = &v
	return s
}

func (s *ListFpShotDBResponseBodyFpShotDBListFpShotDB) SetFpDBId(v string) *ListFpShotDBResponseBodyFpShotDBListFpShotDB {
	s.FpDBId = &v
	return s
}

type ListFpShotDBResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s ListFpShotDBResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotDBResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *ListFpShotDBResponseBodyNonExistIds) SetString_(v []*string) *ListFpShotDBResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type ListFpShotDBResponse struct {
	Headers map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListFpShotDBResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListFpShotDBResponse) String() string {
	return tea.Prettify(s)
}

func (s ListFpShotDBResponse) GoString() string {
	return s.String()
}

func (s *ListFpShotDBResponse) SetHeaders(v map[string]*string) *ListFpShotDBResponse {
	s.Headers = v
	return s
}

func (s *ListFpShotDBResponse) SetBody(v *ListFpShotDBResponseBody) *ListFpShotDBResponse {
	s.Body = v
	return s
}

type AddSmarttagTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	TemplateName         *string `json:"TemplateName,omitempty" xml:"TemplateName,omitempty"`
	Industry             *string `json:"Industry,omitempty" xml:"Industry,omitempty"`
	Scene                *string `json:"Scene,omitempty" xml:"Scene,omitempty"`
	AnalyseTypes         *string `json:"AnalyseTypes,omitempty" xml:"AnalyseTypes,omitempty"`
	FaceCategoryIds      *string `json:"FaceCategoryIds,omitempty" xml:"FaceCategoryIds,omitempty"`
	IsDefault            *bool   `json:"IsDefault,omitempty" xml:"IsDefault,omitempty"`
}

func (s AddSmarttagTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddSmarttagTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddSmarttagTemplateRequest) SetOwnerId(v int64) *AddSmarttagTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetResourceOwnerAccount(v string) *AddSmarttagTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetResourceOwnerId(v int64) *AddSmarttagTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetOwnerAccount(v string) *AddSmarttagTemplateRequest {
	s.OwnerAccount = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetTemplateName(v string) *AddSmarttagTemplateRequest {
	s.TemplateName = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetIndustry(v string) *AddSmarttagTemplateRequest {
	s.Industry = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetScene(v string) *AddSmarttagTemplateRequest {
	s.Scene = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetAnalyseTypes(v string) *AddSmarttagTemplateRequest {
	s.AnalyseTypes = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetFaceCategoryIds(v string) *AddSmarttagTemplateRequest {
	s.FaceCategoryIds = &v
	return s
}

func (s *AddSmarttagTemplateRequest) SetIsDefault(v bool) *AddSmarttagTemplateRequest {
	s.IsDefault = &v
	return s
}

type AddSmarttagTemplateResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s AddSmarttagTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddSmarttagTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddSmarttagTemplateResponseBody) SetRequestId(v string) *AddSmarttagTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddSmarttagTemplateResponseBody) SetTemplateId(v string) *AddSmarttagTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type AddSmarttagTemplateResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddSmarttagTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddSmarttagTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddSmarttagTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddSmarttagTemplateResponse) SetHeaders(v map[string]*string) *AddSmarttagTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddSmarttagTemplateResponse) SetBody(v *AddSmarttagTemplateResponseBody) *AddSmarttagTemplateResponse {
	s.Body = v
	return s
}

type LogicalDeleteResourceRequest struct {
	Interrupt      *bool   `json:"Interrupt,omitempty" xml:"Interrupt,omitempty"`
	Invoker        *string `json:"Invoker,omitempty" xml:"Invoker,omitempty"`
	Pk             *string `json:"Pk,omitempty" xml:"Pk,omitempty"`
	Bid            *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Hid            *int64  `json:"Hid,omitempty" xml:"Hid,omitempty"`
	Country        *string `json:"Country,omitempty" xml:"Country,omitempty"`
	TaskIdentifier *string `json:"TaskIdentifier,omitempty" xml:"TaskIdentifier,omitempty"`
	TaskExtraData  *string `json:"TaskExtraData,omitempty" xml:"TaskExtraData,omitempty"`
	GmtWakeup      *string `json:"GmtWakeup,omitempty" xml:"GmtWakeup,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s LogicalDeleteResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s LogicalDeleteResourceRequest) GoString() string {
	return s.String()
}

func (s *LogicalDeleteResourceRequest) SetInterrupt(v bool) *LogicalDeleteResourceRequest {
	s.Interrupt = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetInvoker(v string) *LogicalDeleteResourceRequest {
	s.Invoker = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetPk(v string) *LogicalDeleteResourceRequest {
	s.Pk = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetBid(v string) *LogicalDeleteResourceRequest {
	s.Bid = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetHid(v int64) *LogicalDeleteResourceRequest {
	s.Hid = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetCountry(v string) *LogicalDeleteResourceRequest {
	s.Country = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetTaskIdentifier(v string) *LogicalDeleteResourceRequest {
	s.TaskIdentifier = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetTaskExtraData(v string) *LogicalDeleteResourceRequest {
	s.TaskExtraData = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetGmtWakeup(v string) *LogicalDeleteResourceRequest {
	s.GmtWakeup = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetSuccess(v bool) *LogicalDeleteResourceRequest {
	s.Success = &v
	return s
}

func (s *LogicalDeleteResourceRequest) SetMessage(v string) *LogicalDeleteResourceRequest {
	s.Message = &v
	return s
}

type LogicalDeleteResourceResponseBody struct {
	GmtWakeup      *string `json:"GmtWakeup,omitempty" xml:"GmtWakeup,omitempty"`
	Hid            *int64  `json:"Hid,omitempty" xml:"Hid,omitempty"`
	Invoker        *string `json:"Invoker,omitempty" xml:"Invoker,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	TaskIdentifier *string `json:"TaskIdentifier,omitempty" xml:"TaskIdentifier,omitempty"`
	TaskExtraData  *string `json:"TaskExtraData,omitempty" xml:"TaskExtraData,omitempty"`
	Country        *string `json:"Country,omitempty" xml:"Country,omitempty"`
	Pk             *string `json:"Pk,omitempty" xml:"Pk,omitempty"`
	Bid            *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Interrupt      *bool   `json:"Interrupt,omitempty" xml:"Interrupt,omitempty"`
}

func (s LogicalDeleteResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s LogicalDeleteResourceResponseBody) GoString() string {
	return s.String()
}

func (s *LogicalDeleteResourceResponseBody) SetGmtWakeup(v string) *LogicalDeleteResourceResponseBody {
	s.GmtWakeup = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetHid(v int64) *LogicalDeleteResourceResponseBody {
	s.Hid = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetInvoker(v string) *LogicalDeleteResourceResponseBody {
	s.Invoker = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetMessage(v string) *LogicalDeleteResourceResponseBody {
	s.Message = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetTaskIdentifier(v string) *LogicalDeleteResourceResponseBody {
	s.TaskIdentifier = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetTaskExtraData(v string) *LogicalDeleteResourceResponseBody {
	s.TaskExtraData = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetCountry(v string) *LogicalDeleteResourceResponseBody {
	s.Country = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetPk(v string) *LogicalDeleteResourceResponseBody {
	s.Pk = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetBid(v string) *LogicalDeleteResourceResponseBody {
	s.Bid = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetSuccess(v bool) *LogicalDeleteResourceResponseBody {
	s.Success = &v
	return s
}

func (s *LogicalDeleteResourceResponseBody) SetInterrupt(v bool) *LogicalDeleteResourceResponseBody {
	s.Interrupt = &v
	return s
}

type LogicalDeleteResourceResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *LogicalDeleteResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s LogicalDeleteResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s LogicalDeleteResourceResponse) GoString() string {
	return s.String()
}

func (s *LogicalDeleteResourceResponse) SetHeaders(v map[string]*string) *LogicalDeleteResourceResponse {
	s.Headers = v
	return s
}

func (s *LogicalDeleteResourceResponse) SetBody(v *LogicalDeleteResourceResponseBody) *LogicalDeleteResourceResponse {
	s.Body = v
	return s
}

type ListMediaWorkflowExecutionsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	MediaWorkflowName    *string `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	InputFileURL         *string `json:"InputFileURL,omitempty" xml:"InputFileURL,omitempty"`
	NextPageToken        *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize      *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListMediaWorkflowExecutionsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsRequest) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsRequest) SetOwnerId(v int64) *ListMediaWorkflowExecutionsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetResourceOwnerAccount(v string) *ListMediaWorkflowExecutionsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetResourceOwnerId(v int64) *ListMediaWorkflowExecutionsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetMediaWorkflowId(v string) *ListMediaWorkflowExecutionsRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetMediaWorkflowName(v string) *ListMediaWorkflowExecutionsRequest {
	s.MediaWorkflowName = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetInputFileURL(v string) *ListMediaWorkflowExecutionsRequest {
	s.InputFileURL = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetNextPageToken(v string) *ListMediaWorkflowExecutionsRequest {
	s.NextPageToken = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetMaximumPageSize(v int64) *ListMediaWorkflowExecutionsRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *ListMediaWorkflowExecutionsRequest) SetOwnerAccount(v string) *ListMediaWorkflowExecutionsRequest {
	s.OwnerAccount = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBody struct {
	MediaWorkflowExecutionList *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList `json:"MediaWorkflowExecutionList,omitempty" xml:"MediaWorkflowExecutionList,omitempty" type:"Struct"`
	RequestId                  *string                                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken              *string                                                            `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBody) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBody) SetMediaWorkflowExecutionList(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList) *ListMediaWorkflowExecutionsResponseBody {
	s.MediaWorkflowExecutionList = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBody) SetRequestId(v string) *ListMediaWorkflowExecutionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBody) SetNextPageToken(v string) *ListMediaWorkflowExecutionsResponseBody {
	s.NextPageToken = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList struct {
	MediaWorkflowExecution []*ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution `json:"MediaWorkflowExecution,omitempty" xml:"MediaWorkflowExecution,omitempty" type:"Repeated"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList) SetMediaWorkflowExecution(v []*ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionList {
	s.MediaWorkflowExecution = v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution struct {
	CreationTime    *string                                                                                              `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string                                                                                              `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string                                                                                              `json:"State,omitempty" xml:"State,omitempty"`
	ActivityList    *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList `json:"ActivityList,omitempty" xml:"ActivityList,omitempty" type:"Struct"`
	Name            *string                                                                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Input           *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput        `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MediaId         *string                                                                                              `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	RunId           *string                                                                                              `json:"RunId,omitempty" xml:"RunId,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetCreationTime(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.CreationTime = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetMediaWorkflowId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.MediaWorkflowId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetState(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.State = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetActivityList(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.ActivityList = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetName(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.Name = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetInput(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.Input = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetMediaId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.MediaId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution) SetRunId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecution {
	s.RunId = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList struct {
	Activity []*ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity `json:"Activity,omitempty" xml:"Activity,omitempty" type:"Repeated"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList) SetActivity(v []*ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityList {
	s.Activity = v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity struct {
	EndTime          *string                                                                                                                      `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	Type             *string                                                                                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	StartTime        *string                                                                                                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	State            *string                                                                                                                      `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                                                                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code             *string                                                                                                                      `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                                                                                      `json:"Message,omitempty" xml:"Message,omitempty"`
	Name             *string                                                                                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	MNSMessageResult *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetEndTime(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.EndTime = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetType(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Type = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetStartTime(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.StartTime = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetState(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.State = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetJobId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.JobId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetCode(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Code = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetMessage(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Message = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetName(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.Name = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity) SetMNSMessageResult(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivity {
	s.MNSMessageResult = v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetMessageId(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetErrorMessage(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult) SetErrorCode(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionActivityListActivityMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput struct {
	UserData  *string                                                                                                `json:"UserData,omitempty" xml:"UserData,omitempty"`
	InputFile *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) SetUserData(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput {
	s.UserData = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput) SetInputFile(v *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInput {
	s.InputFile = v
	return s
}

type ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetObject(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Object = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetLocation(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Location = &v
	return s
}

func (s *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile) SetBucket(v string) *ListMediaWorkflowExecutionsResponseBodyMediaWorkflowExecutionListMediaWorkflowExecutionInputInputFile {
	s.Bucket = &v
	return s
}

type ListMediaWorkflowExecutionsResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListMediaWorkflowExecutionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListMediaWorkflowExecutionsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListMediaWorkflowExecutionsResponse) GoString() string {
	return s.String()
}

func (s *ListMediaWorkflowExecutionsResponse) SetHeaders(v map[string]*string) *ListMediaWorkflowExecutionsResponse {
	s.Headers = v
	return s
}

func (s *ListMediaWorkflowExecutionsResponse) SetBody(v *ListMediaWorkflowExecutionsResponseBody) *ListMediaWorkflowExecutionsResponse {
	s.Body = v
	return s
}

type SubmitInnerJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Video                *string `json:"Video,omitempty" xml:"Video,omitempty"`
	Images               *string `json:"Images,omitempty" xml:"Images,omitempty"`
	Uid                  *int64  `json:"Uid,omitempty" xml:"Uid,omitempty"`
	Config               *string `json:"Config,omitempty" xml:"Config,omitempty"`
}

func (s SubmitInnerJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitInnerJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitInnerJobRequest) SetOwnerId(v int64) *SubmitInnerJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitInnerJobRequest) SetResourceOwnerAccount(v string) *SubmitInnerJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitInnerJobRequest) SetResourceOwnerId(v int64) *SubmitInnerJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitInnerJobRequest) SetPipelineId(v string) *SubmitInnerJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitInnerJobRequest) SetVideo(v string) *SubmitInnerJobRequest {
	s.Video = &v
	return s
}

func (s *SubmitInnerJobRequest) SetImages(v string) *SubmitInnerJobRequest {
	s.Images = &v
	return s
}

func (s *SubmitInnerJobRequest) SetUid(v int64) *SubmitInnerJobRequest {
	s.Uid = &v
	return s
}

func (s *SubmitInnerJobRequest) SetConfig(v string) *SubmitInnerJobRequest {
	s.Config = &v
	return s
}

type SubmitInnerJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitInnerJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitInnerJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitInnerJobResponseBody) SetRequestId(v string) *SubmitInnerJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitInnerJobResponseBody) SetJobId(v string) *SubmitInnerJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitInnerJobResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitInnerJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitInnerJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitInnerJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitInnerJobResponse) SetHeaders(v map[string]*string) *SubmitInnerJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitInnerJobResponse) SetBody(v *SubmitInnerJobResponseBody) *SubmitInnerJobResponse {
	s.Body = v
	return s
}

type QueryMediaDetailJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMediaDetailJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListRequest) SetOwnerId(v int64) *QueryMediaDetailJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaDetailJobListRequest) SetResourceOwnerAccount(v string) *QueryMediaDetailJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaDetailJobListRequest) SetResourceOwnerId(v int64) *QueryMediaDetailJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaDetailJobListRequest) SetJobIds(v string) *QueryMediaDetailJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryMediaDetailJobListRequest) SetOwnerAccount(v string) *QueryMediaDetailJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMediaDetailJobListResponseBody struct {
	RequestId   *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList     *QueryMediaDetailJobListResponseBodyJobList     `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NonExistIds *QueryMediaDetailJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryMediaDetailJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBody) SetRequestId(v string) *QueryMediaDetailJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBody) SetJobList(v *QueryMediaDetailJobListResponseBodyJobList) *QueryMediaDetailJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryMediaDetailJobListResponseBody) SetNonExistIds(v *QueryMediaDetailJobListResponseBodyNonExistIds) *QueryMediaDetailJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobList struct {
	Job []*QueryMediaDetailJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobList) SetJob(v []*QueryMediaDetailJobListResponseBodyJobListJob) *QueryMediaDetailJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJob struct {
	CreationTime      *string                                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State             *string                                                         `json:"State,omitempty" xml:"State,omitempty"`
	UserData          *string                                                         `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code              *string                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	MediaDetailResult *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult `json:"MediaDetailResult,omitempty" xml:"MediaDetailResult,omitempty" type:"Struct"`
	Message           *string                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	MediaDetailConfig *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig `json:"MediaDetailConfig,omitempty" xml:"MediaDetailConfig,omitempty" type:"Struct"`
	PipelineId        *string                                                         `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input             *QueryMediaDetailJobListResponseBodyJobListJobInput             `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id                *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetState(v string) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetUserData(v string) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetCode(v string) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetMediaDetailResult(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.MediaDetailResult = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetMessage(v string) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetMediaDetailConfig(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.MediaDetailConfig = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetInput(v *QueryMediaDetailJobListResponseBodyJobListJobInput) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJob) SetId(v string) *QueryMediaDetailJobListResponseBodyJobListJob {
	s.Id = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult struct {
	Status                 *string                                                                               `json:"Status,omitempty" xml:"Status,omitempty"`
	MediaDetailRecgResults *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResults `json:"MediaDetailRecgResults,omitempty" xml:"MediaDetailRecgResults,omitempty" type:"Struct"`
	Tags                   *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultTags                   `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult) SetStatus(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult {
	s.Status = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult) SetMediaDetailRecgResults(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResults) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult {
	s.MediaDetailRecgResults = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult) SetTags(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultTags) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResult {
	s.Tags = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResults struct {
	MediaDetailRecgResult []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult `json:"MediaDetailRecgResult,omitempty" xml:"MediaDetailRecgResult,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResults) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResults) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResults) SetMediaDetailRecgResult(v []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResults {
	s.MediaDetailRecgResult = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult struct {
	Time          *string                                                                                                                 `json:"Time,omitempty" xml:"Time,omitempty"`
	Sensitives    *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitives    `json:"Sensitives,omitempty" xml:"Sensitives,omitempty" type:"Struct"`
	Politicians   *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticians   `json:"Politicians,omitempty" xml:"Politicians,omitempty" type:"Struct"`
	FrameTags     *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTags     `json:"FrameTags,omitempty" xml:"FrameTags,omitempty" type:"Struct"`
	ImageUrl      *string                                                                                                                 `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	Customs       *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustoms       `json:"Customs,omitempty" xml:"Customs,omitempty" type:"Struct"`
	FrameTagInfos *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfos `json:"FrameTagInfos,omitempty" xml:"FrameTagInfos,omitempty" type:"Struct"`
	Celebrities   *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebrities   `json:"Celebrities,omitempty" xml:"Celebrities,omitempty" type:"Struct"`
	OcrText       *string                                                                                                                 `json:"OcrText,omitempty" xml:"OcrText,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetTime(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.Time = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetSensitives(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitives) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.Sensitives = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetPoliticians(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticians) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.Politicians = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetFrameTags(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTags) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.FrameTags = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetImageUrl(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.ImageUrl = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetCustoms(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustoms) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.Customs = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetFrameTagInfos(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfos) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.FrameTagInfos = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetCelebrities(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebrities) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.Celebrities = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult) SetOcrText(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResult {
	s.OcrText = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitives struct {
	Sensitive []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive `json:"Sensitive,omitempty" xml:"Sensitive,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitives) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitives) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitives) SetSensitive(v []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitives {
	s.Sensitive = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive struct {
	Score  *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive) SetScore(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive {
	s.Score = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive) SetName(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive {
	s.Name = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive) SetTarget(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultSensitivesSensitive {
	s.Target = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticians struct {
	Politician []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician `json:"Politician,omitempty" xml:"Politician,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticians) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticians) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticians) SetPolitician(v []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticians {
	s.Politician = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician struct {
	Score  *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician) SetScore(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician {
	s.Score = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician) SetName(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician {
	s.Name = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician) SetTarget(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultPoliticiansPolitician {
	s.Target = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTags struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTags) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTags) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTags) SetString_(v []*string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTags {
	s.String_ = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustoms struct {
	Custom []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom `json:"Custom,omitempty" xml:"Custom,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustoms) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustoms) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustoms) SetCustom(v []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustoms {
	s.Custom = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom struct {
	Name  *string                                                                                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Clips *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClips `json:"Clips,omitempty" xml:"Clips,omitempty" type:"Struct"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom) SetName(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom {
	s.Name = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom) SetClips(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClips) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustom {
	s.Clips = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClips struct {
	Clip []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClips) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClips) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClips) SetClip(v []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClips {
	s.Clip = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip struct {
	EndTime     *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	MinScore    *string `json:"MinScore,omitempty" xml:"MinScore,omitempty"`
	StartTime   *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	AvgScore    *string `json:"AvgScore,omitempty" xml:"AvgScore,omitempty"`
	MaxScore    *string `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
	EndTarget   *string `json:"EndTarget,omitempty" xml:"EndTarget,omitempty"`
	StartTarget *string `json:"StartTarget,omitempty" xml:"StartTarget,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) SetEndTime(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip {
	s.EndTime = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) SetMinScore(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip {
	s.MinScore = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) SetStartTime(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip {
	s.StartTime = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) SetAvgScore(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip {
	s.AvgScore = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) SetMaxScore(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip {
	s.MaxScore = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) SetEndTarget(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip {
	s.EndTarget = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip) SetStartTarget(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCustomsCustomClipsClip {
	s.StartTarget = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfos struct {
	FrameTagInfo []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo `json:"FrameTagInfo,omitempty" xml:"FrameTagInfo,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfos) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfos) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfos) SetFrameTagInfo(v []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfos {
	s.FrameTagInfo = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo struct {
	Score    *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Tag      *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo) SetScore(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo {
	s.Score = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo) SetCategory(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo {
	s.Category = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo) SetTag(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultFrameTagInfosFrameTagInfo {
	s.Tag = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebrities struct {
	Celebrity []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity `json:"Celebrity,omitempty" xml:"Celebrity,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebrities) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebrities) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebrities) SetCelebrity(v []*QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebrities {
	s.Celebrity = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity struct {
	Score  *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity) SetScore(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity {
	s.Score = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity) SetName(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity {
	s.Name = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity) SetTarget(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultMediaDetailRecgResultsMediaDetailRecgResultCelebritiesCelebrity {
	s.Target = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultTags struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultTags) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultTags) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultTags) SetString_(v []*string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailResultTags {
	s.String_ = v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig struct {
	OutputFile *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Scenario   *string                                                                   `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	DetailType *string                                                                   `json:"DetailType,omitempty" xml:"DetailType,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig) SetOutputFile(v *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig {
	s.OutputFile = v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig) SetScenario(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig {
	s.Scenario = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig) SetDetailType(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfig {
	s.DetailType = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile) SetObject(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile) SetLocation(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile) SetBucket(v string) *QueryMediaDetailJobListResponseBodyJobListJobMediaDetailConfigOutputFile {
	s.Bucket = &v
	return s
}

type QueryMediaDetailJobListResponseBodyJobListJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMediaDetailJobListResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobInput) SetObject(v string) *QueryMediaDetailJobListResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobInput) SetLocation(v string) *QueryMediaDetailJobListResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *QueryMediaDetailJobListResponseBodyJobListJobInput) SetBucket(v string) *QueryMediaDetailJobListResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type QueryMediaDetailJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaDetailJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryMediaDetailJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryMediaDetailJobListResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaDetailJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaDetailJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaDetailJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaDetailJobListResponse) SetHeaders(v map[string]*string) *QueryMediaDetailJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaDetailJobListResponse) SetBody(v *QueryMediaDetailJobListResponseBody) *QueryMediaDetailJobListResponse {
	s.Body = v
	return s
}

type UpdatePornPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdatePornPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePornPipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdatePornPipelineRequest) SetOwnerId(v int64) *UpdatePornPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdatePornPipelineRequest) SetResourceOwnerAccount(v string) *UpdatePornPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdatePornPipelineRequest) SetResourceOwnerId(v int64) *UpdatePornPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdatePornPipelineRequest) SetPipelineId(v string) *UpdatePornPipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdatePornPipelineRequest) SetName(v string) *UpdatePornPipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdatePornPipelineRequest) SetState(v string) *UpdatePornPipelineRequest {
	s.State = &v
	return s
}

func (s *UpdatePornPipelineRequest) SetPriority(v int32) *UpdatePornPipelineRequest {
	s.Priority = &v
	return s
}

func (s *UpdatePornPipelineRequest) SetNotifyConfig(v string) *UpdatePornPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *UpdatePornPipelineRequest) SetOwnerAccount(v string) *UpdatePornPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type UpdatePornPipelineResponseBody struct {
	RequestId *string                                 `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *UpdatePornPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s UpdatePornPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePornPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePornPipelineResponseBody) SetRequestId(v string) *UpdatePornPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePornPipelineResponseBody) SetPipeline(v *UpdatePornPipelineResponseBodyPipeline) *UpdatePornPipelineResponseBody {
	s.Pipeline = v
	return s
}

type UpdatePornPipelineResponseBodyPipeline struct {
	State        *string                                             `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *UpdatePornPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                              `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                             `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                             `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdatePornPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s UpdatePornPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *UpdatePornPipelineResponseBodyPipeline) SetState(v string) *UpdatePornPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *UpdatePornPipelineResponseBodyPipeline) SetNotifyConfig(v *UpdatePornPipelineResponseBodyPipelineNotifyConfig) *UpdatePornPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *UpdatePornPipelineResponseBodyPipeline) SetPriority(v int32) *UpdatePornPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *UpdatePornPipelineResponseBodyPipeline) SetName(v string) *UpdatePornPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *UpdatePornPipelineResponseBodyPipeline) SetId(v string) *UpdatePornPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type UpdatePornPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s UpdatePornPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdatePornPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *UpdatePornPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *UpdatePornPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *UpdatePornPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *UpdatePornPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type UpdatePornPipelineResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdatePornPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdatePornPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePornPipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdatePornPipelineResponse) SetHeaders(v map[string]*string) *UpdatePornPipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdatePornPipelineResponse) SetBody(v *UpdatePornPipelineResponseBody) *UpdatePornPipelineResponse {
	s.Body = v
	return s
}

type DeleteWaterMarkTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	WaterMarkTemplateId  *string `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteWaterMarkTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaterMarkTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteWaterMarkTemplateRequest) SetOwnerId(v int64) *DeleteWaterMarkTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteWaterMarkTemplateRequest) SetResourceOwnerAccount(v string) *DeleteWaterMarkTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteWaterMarkTemplateRequest) SetResourceOwnerId(v int64) *DeleteWaterMarkTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteWaterMarkTemplateRequest) SetWaterMarkTemplateId(v string) *DeleteWaterMarkTemplateRequest {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *DeleteWaterMarkTemplateRequest) SetOwnerAccount(v string) *DeleteWaterMarkTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteWaterMarkTemplateResponseBody struct {
	RequestId           *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	WaterMarkTemplateId *string `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
}

func (s DeleteWaterMarkTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaterMarkTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteWaterMarkTemplateResponseBody) SetRequestId(v string) *DeleteWaterMarkTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteWaterMarkTemplateResponseBody) SetWaterMarkTemplateId(v string) *DeleteWaterMarkTemplateResponseBody {
	s.WaterMarkTemplateId = &v
	return s
}

type DeleteWaterMarkTemplateResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteWaterMarkTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteWaterMarkTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteWaterMarkTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteWaterMarkTemplateResponse) SetHeaders(v map[string]*string) *DeleteWaterMarkTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteWaterMarkTemplateResponse) SetBody(v *DeleteWaterMarkTemplateResponseBody) *DeleteWaterMarkTemplateResponse {
	s.Body = v
	return s
}

type SubmitVideoQualityJobRequest struct {
	UserId         *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	PipelineId     *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	SourceType     *string `json:"SourceType,omitempty" xml:"SourceType,omitempty"`
	ModelId        *string `json:"ModelId,omitempty" xml:"ModelId,omitempty"`
	Input          *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Output         *string `json:"Output,omitempty" xml:"Output,omitempty"`
	JobParams      *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
	ScheduleParams *string `json:"ScheduleParams,omitempty" xml:"ScheduleParams,omitempty"`
	UserData       *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	NotifyUrl      *string `json:"NotifyUrl,omitempty" xml:"NotifyUrl,omitempty"`
}

func (s SubmitVideoQualityJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoQualityJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitVideoQualityJobRequest) SetUserId(v int64) *SubmitVideoQualityJobRequest {
	s.UserId = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetPipelineId(v string) *SubmitVideoQualityJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetSourceType(v string) *SubmitVideoQualityJobRequest {
	s.SourceType = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetModelId(v string) *SubmitVideoQualityJobRequest {
	s.ModelId = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetInput(v string) *SubmitVideoQualityJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetOutput(v string) *SubmitVideoQualityJobRequest {
	s.Output = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetJobParams(v string) *SubmitVideoQualityJobRequest {
	s.JobParams = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetScheduleParams(v string) *SubmitVideoQualityJobRequest {
	s.ScheduleParams = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetUserData(v string) *SubmitVideoQualityJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitVideoQualityJobRequest) SetNotifyUrl(v string) *SubmitVideoQualityJobRequest {
	s.NotifyUrl = &v
	return s
}

type SubmitVideoQualityJobResponseBody struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitVideoQualityJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoQualityJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitVideoQualityJobResponseBody) SetMessage(v string) *SubmitVideoQualityJobResponseBody {
	s.Message = &v
	return s
}

func (s *SubmitVideoQualityJobResponseBody) SetRequestId(v string) *SubmitVideoQualityJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitVideoQualityJobResponseBody) SetCode(v string) *SubmitVideoQualityJobResponseBody {
	s.Code = &v
	return s
}

func (s *SubmitVideoQualityJobResponseBody) SetJobId(v string) *SubmitVideoQualityJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitVideoQualityJobResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitVideoQualityJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitVideoQualityJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoQualityJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitVideoQualityJobResponse) SetHeaders(v map[string]*string) *SubmitVideoQualityJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitVideoQualityJobResponse) SetBody(v *SubmitVideoQualityJobResponseBody) *SubmitVideoQualityJobResponse {
	s.Body = v
	return s
}

type AddCoverPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority             *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddCoverPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s AddCoverPipelineRequest) GoString() string {
	return s.String()
}

func (s *AddCoverPipelineRequest) SetOwnerId(v int64) *AddCoverPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *AddCoverPipelineRequest) SetResourceOwnerAccount(v string) *AddCoverPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddCoverPipelineRequest) SetResourceOwnerId(v int64) *AddCoverPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddCoverPipelineRequest) SetName(v string) *AddCoverPipelineRequest {
	s.Name = &v
	return s
}

func (s *AddCoverPipelineRequest) SetPriority(v string) *AddCoverPipelineRequest {
	s.Priority = &v
	return s
}

func (s *AddCoverPipelineRequest) SetNotifyConfig(v string) *AddCoverPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *AddCoverPipelineRequest) SetRole(v string) *AddCoverPipelineRequest {
	s.Role = &v
	return s
}

func (s *AddCoverPipelineRequest) SetOwnerAccount(v string) *AddCoverPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type AddCoverPipelineResponseBody struct {
	RequestId *string                               `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *AddCoverPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s AddCoverPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddCoverPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *AddCoverPipelineResponseBody) SetRequestId(v string) *AddCoverPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddCoverPipelineResponseBody) SetPipeline(v *AddCoverPipelineResponseBodyPipeline) *AddCoverPipelineResponseBody {
	s.Pipeline = v
	return s
}

type AddCoverPipelineResponseBodyPipeline struct {
	State        *string                                           `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *AddCoverPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                           `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Role         *string                                           `json:"Role,omitempty" xml:"Role,omitempty"`
	Name         *string                                           `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                           `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s AddCoverPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s AddCoverPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *AddCoverPipelineResponseBodyPipeline) SetState(v string) *AddCoverPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *AddCoverPipelineResponseBodyPipeline) SetNotifyConfig(v *AddCoverPipelineResponseBodyPipelineNotifyConfig) *AddCoverPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *AddCoverPipelineResponseBodyPipeline) SetPriority(v string) *AddCoverPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *AddCoverPipelineResponseBodyPipeline) SetRole(v string) *AddCoverPipelineResponseBodyPipeline {
	s.Role = &v
	return s
}

func (s *AddCoverPipelineResponseBodyPipeline) SetName(v string) *AddCoverPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *AddCoverPipelineResponseBodyPipeline) SetId(v string) *AddCoverPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type AddCoverPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s AddCoverPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s AddCoverPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *AddCoverPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *AddCoverPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *AddCoverPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *AddCoverPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type AddCoverPipelineResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddCoverPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddCoverPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s AddCoverPipelineResponse) GoString() string {
	return s.String()
}

func (s *AddCoverPipelineResponse) SetHeaders(v map[string]*string) *AddCoverPipelineResponse {
	s.Headers = v
	return s
}

func (s *AddCoverPipelineResponse) SetBody(v *AddCoverPipelineResponseBody) *AddCoverPipelineResponse {
	s.Body = v
	return s
}

type SubmitURLUploadJobRequest struct {
	Region        *string                                 `json:"Region,omitempty" xml:"Region,omitempty"`
	SourceFileURL *string                                 `json:"SourceFileURL,omitempty" xml:"SourceFileURL,omitempty"`
	TargetStorage *SubmitURLUploadJobRequestTargetStorage `json:"TargetStorage,omitempty" xml:"TargetStorage,omitempty" type:"Struct"`
	UserData      *string                                 `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Notify        *string                                 `json:"Notify,omitempty" xml:"Notify,omitempty"`
}

func (s SubmitURLUploadJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitURLUploadJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitURLUploadJobRequest) SetRegion(v string) *SubmitURLUploadJobRequest {
	s.Region = &v
	return s
}

func (s *SubmitURLUploadJobRequest) SetSourceFileURL(v string) *SubmitURLUploadJobRequest {
	s.SourceFileURL = &v
	return s
}

func (s *SubmitURLUploadJobRequest) SetTargetStorage(v *SubmitURLUploadJobRequestTargetStorage) *SubmitURLUploadJobRequest {
	s.TargetStorage = v
	return s
}

func (s *SubmitURLUploadJobRequest) SetUserData(v string) *SubmitURLUploadJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitURLUploadJobRequest) SetNotify(v string) *SubmitURLUploadJobRequest {
	s.Notify = &v
	return s
}

type SubmitURLUploadJobRequestTargetStorage struct {
	Bucket         *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	ObjectKey      *string `json:"ObjectKey,omitempty" xml:"ObjectKey,omitempty"`
	BucketOwnerId  *string `json:"BucketOwnerId,omitempty" xml:"BucketOwnerId,omitempty"`
	ObjectRoleName *string `json:"ObjectRoleName,omitempty" xml:"ObjectRoleName,omitempty"`
	S3Provider     *string `json:"S3Provider,omitempty" xml:"S3Provider,omitempty"`
	S3Endpoint     *string `json:"S3Endpoint,omitempty" xml:"S3Endpoint,omitempty"`
	S3AccessKey    *string `json:"S3AccessKey,omitempty" xml:"S3AccessKey,omitempty"`
	S3SecretKey    *string `json:"S3SecretKey,omitempty" xml:"S3SecretKey,omitempty"`
	S3SessionToken *string `json:"S3SessionToken,omitempty" xml:"S3SessionToken,omitempty"`
}

func (s SubmitURLUploadJobRequestTargetStorage) String() string {
	return tea.Prettify(s)
}

func (s SubmitURLUploadJobRequestTargetStorage) GoString() string {
	return s.String()
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetBucket(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.Bucket = &v
	return s
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetObjectKey(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.ObjectKey = &v
	return s
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetBucketOwnerId(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.BucketOwnerId = &v
	return s
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetObjectRoleName(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.ObjectRoleName = &v
	return s
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetS3Provider(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.S3Provider = &v
	return s
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetS3Endpoint(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.S3Endpoint = &v
	return s
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetS3AccessKey(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.S3AccessKey = &v
	return s
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetS3SecretKey(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.S3SecretKey = &v
	return s
}

func (s *SubmitURLUploadJobRequestTargetStorage) SetS3SessionToken(v string) *SubmitURLUploadJobRequestTargetStorage {
	s.S3SessionToken = &v
	return s
}

type SubmitURLUploadJobShrinkRequest struct {
	Region              *string `json:"Region,omitempty" xml:"Region,omitempty"`
	SourceFileURL       *string `json:"SourceFileURL,omitempty" xml:"SourceFileURL,omitempty"`
	TargetStorageShrink *string `json:"TargetStorage,omitempty" xml:"TargetStorage,omitempty"`
	UserData            *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Notify              *string `json:"Notify,omitempty" xml:"Notify,omitempty"`
}

func (s SubmitURLUploadJobShrinkRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitURLUploadJobShrinkRequest) GoString() string {
	return s.String()
}

func (s *SubmitURLUploadJobShrinkRequest) SetRegion(v string) *SubmitURLUploadJobShrinkRequest {
	s.Region = &v
	return s
}

func (s *SubmitURLUploadJobShrinkRequest) SetSourceFileURL(v string) *SubmitURLUploadJobShrinkRequest {
	s.SourceFileURL = &v
	return s
}

func (s *SubmitURLUploadJobShrinkRequest) SetTargetStorageShrink(v string) *SubmitURLUploadJobShrinkRequest {
	s.TargetStorageShrink = &v
	return s
}

func (s *SubmitURLUploadJobShrinkRequest) SetUserData(v string) *SubmitURLUploadJobShrinkRequest {
	s.UserData = &v
	return s
}

func (s *SubmitURLUploadJobShrinkRequest) SetNotify(v string) *SubmitURLUploadJobShrinkRequest {
	s.Notify = &v
	return s
}

type SubmitURLUploadJobResponseBody struct {
	// Id of the request
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitURLUploadJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitURLUploadJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitURLUploadJobResponseBody) SetRequestId(v string) *SubmitURLUploadJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitURLUploadJobResponseBody) SetJobId(v string) *SubmitURLUploadJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitURLUploadJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitURLUploadJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitURLUploadJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitURLUploadJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitURLUploadJobResponse) SetHeaders(v map[string]*string) *SubmitURLUploadJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitURLUploadJobResponse) SetBody(v *SubmitURLUploadJobResponseBody) *SubmitURLUploadJobResponse {
	s.Body = v
	return s
}

type QueryMediaListByURLRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	FileURLs             *string `json:"FileURLs,omitempty" xml:"FileURLs,omitempty"`
	IncludePlayList      *bool   `json:"IncludePlayList,omitempty" xml:"IncludePlayList,omitempty"`
	IncludeSnapshotList  *bool   `json:"IncludeSnapshotList,omitempty" xml:"IncludeSnapshotList,omitempty"`
	IncludeMediaInfo     *bool   `json:"IncludeMediaInfo,omitempty" xml:"IncludeMediaInfo,omitempty"`
	IncludeSummaryList   *bool   `json:"IncludeSummaryList,omitempty" xml:"IncludeSummaryList,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMediaListByURLRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLRequest) SetOwnerId(v int64) *QueryMediaListByURLRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetResourceOwnerAccount(v string) *QueryMediaListByURLRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetResourceOwnerId(v int64) *QueryMediaListByURLRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetFileURLs(v string) *QueryMediaListByURLRequest {
	s.FileURLs = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetIncludePlayList(v bool) *QueryMediaListByURLRequest {
	s.IncludePlayList = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetIncludeSnapshotList(v bool) *QueryMediaListByURLRequest {
	s.IncludeSnapshotList = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetIncludeMediaInfo(v bool) *QueryMediaListByURLRequest {
	s.IncludeMediaInfo = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetIncludeSummaryList(v bool) *QueryMediaListByURLRequest {
	s.IncludeSummaryList = &v
	return s
}

func (s *QueryMediaListByURLRequest) SetOwnerAccount(v string) *QueryMediaListByURLRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMediaListByURLResponseBody struct {
	MediaList        *QueryMediaListByURLResponseBodyMediaList        `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Struct"`
	NonExistFileURLs *QueryMediaListByURLResponseBodyNonExistFileURLs `json:"NonExistFileURLs,omitempty" xml:"NonExistFileURLs,omitempty" type:"Struct"`
	RequestId        *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaListByURLResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBody) SetMediaList(v *QueryMediaListByURLResponseBodyMediaList) *QueryMediaListByURLResponseBody {
	s.MediaList = v
	return s
}

func (s *QueryMediaListByURLResponseBody) SetNonExistFileURLs(v *QueryMediaListByURLResponseBodyNonExistFileURLs) *QueryMediaListByURLResponseBody {
	s.NonExistFileURLs = v
	return s
}

func (s *QueryMediaListByURLResponseBody) SetRequestId(v string) *QueryMediaListByURLResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaList struct {
	Media []*QueryMediaListByURLResponseBodyMediaListMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaList) SetMedia(v []*QueryMediaListByURLResponseBodyMediaListMedia) *QueryMediaListByURLResponseBodyMediaList {
	s.Media = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMedia struct {
	CreationTime *string                                                    `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CateId       *int64                                                     `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Height       *string                                                    `json:"Height,omitempty" xml:"Height,omitempty"`
	CensorState  *string                                                    `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	Tags         *QueryMediaListByURLResponseBodyMediaListMediaTags         `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	PlayList     *QueryMediaListByURLResponseBodyMediaListMediaPlayList     `json:"PlayList,omitempty" xml:"PlayList,omitempty" type:"Struct"`
	Bitrate      *string                                                    `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	MediaId      *string                                                    `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	File         *QueryMediaListByURLResponseBodyMediaListMediaFile         `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	SummaryList  *QueryMediaListByURLResponseBodyMediaListMediaSummaryList  `json:"SummaryList,omitempty" xml:"SummaryList,omitempty" type:"Struct"`
	PublishState *string                                                    `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	MediaInfo    *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo    `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	Description  *string                                                    `json:"Description,omitempty" xml:"Description,omitempty"`
	Size         *string                                                    `json:"Size,omitempty" xml:"Size,omitempty"`
	Width        *string                                                    `json:"Width,omitempty" xml:"Width,omitempty"`
	CoverURL     *string                                                    `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	SnapshotList *QueryMediaListByURLResponseBodyMediaListMediaSnapshotList `json:"SnapshotList,omitempty" xml:"SnapshotList,omitempty" type:"Struct"`
	RunIdList    *QueryMediaListByURLResponseBodyMediaListMediaRunIdList    `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Duration     *string                                                    `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps          *string                                                    `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Title        *string                                                    `json:"Title,omitempty" xml:"Title,omitempty"`
	Format       *string                                                    `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMedia) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMedia) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetCreationTime(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetCateId(v int64) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.CateId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetHeight(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Height = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetCensorState(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.CensorState = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetTags(v *QueryMediaListByURLResponseBodyMediaListMediaTags) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Tags = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetPlayList(v *QueryMediaListByURLResponseBodyMediaListMediaPlayList) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.PlayList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetMediaId(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.MediaId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetFile(v *QueryMediaListByURLResponseBodyMediaListMediaFile) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.File = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetSummaryList(v *QueryMediaListByURLResponseBodyMediaListMediaSummaryList) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.SummaryList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetPublishState(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.PublishState = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetMediaInfo(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.MediaInfo = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetDescription(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Description = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetSize(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Size = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetWidth(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Width = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetCoverURL(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.CoverURL = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetSnapshotList(v *QueryMediaListByURLResponseBodyMediaListMediaSnapshotList) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.SnapshotList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetRunIdList(v *QueryMediaListByURLResponseBodyMediaListMediaRunIdList) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.RunIdList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetFps(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Fps = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetTitle(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Title = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMedia) SetFormat(v string) *QueryMediaListByURLResponseBodyMediaListMedia {
	s.Format = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaTags) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaTags) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaTags) SetTag(v []*string) *QueryMediaListByURLResponseBodyMediaListMediaTags {
	s.Tag = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaPlayList struct {
	Play []*QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay `json:"Play,omitempty" xml:"Play,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayList) SetPlay(v []*QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) *QueryMediaListByURLResponseBodyMediaListMediaPlayList {
	s.Play = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay struct {
	Encryption        *string                                                        `json:"Encryption,omitempty" xml:"Encryption,omitempty"`
	Height            *string                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	Bitrate           *string                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	File              *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	MediaWorkflowId   *string                                                        `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Width             *string                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
	Size              *string                                                        `json:"Size,omitempty" xml:"Size,omitempty"`
	Fps               *string                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Duration          *string                                                        `json:"Duration,omitempty" xml:"Duration,omitempty"`
	ActivityName      *string                                                        `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	Format            *string                                                        `json:"Format,omitempty" xml:"Format,omitempty"`
	MediaWorkflowName *string                                                        `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetEncryption(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Encryption = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetHeight(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Height = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetFile(v *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.File = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetMediaWorkflowId(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetWidth(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Width = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetSize(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Size = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetFps(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Fps = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetActivityName(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetFormat(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.Format = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay) SetMediaWorkflowName(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlay {
	s.MediaWorkflowName = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) SetState(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile {
	s.State = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile) SetURL(v string) *QueryMediaListByURLResponseBodyMediaListMediaPlayListPlayFile {
	s.URL = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaFile) SetState(v string) *QueryMediaListByURLResponseBodyMediaListMediaFile {
	s.State = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaFile) SetURL(v string) *QueryMediaListByURLResponseBodyMediaListMediaFile {
	s.URL = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSummaryList struct {
	Summary []*QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryList) SetSummary(v []*QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) *QueryMediaListByURLResponseBodyMediaListMediaSummaryList {
	s.Summary = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary struct {
	Type              *string                                                              `json:"Type,omitempty" xml:"Type,omitempty"`
	MediaWorkflowId   *string                                                              `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	ActivityName      *string                                                              `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	MediaWorkflowName *string                                                              `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	File              *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetType(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.Type = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetMediaWorkflowId(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetActivityName(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetMediaWorkflowName(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary) SetFile(v *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummary {
	s.File = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) SetState(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile {
	s.State = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile) SetURL(v string) *QueryMediaListByURLResponseBodyMediaListMediaSummaryListSummaryFile {
	s.URL = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfo struct {
	Streams *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format  *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) SetStreams(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo {
	s.Streams = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo) SetFormat(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfo {
	s.Format = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams struct {
	VideoStreamList    *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) SetVideoStreamList(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams {
	s.VideoStreamList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) SetAudioStreamList(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams) SetSubtitleStreamList(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreams {
	s.SubtitleStreamList = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList struct {
	VideoStream []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) SetVideoStream(v []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream struct {
	Sar            *string                                                                                             `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Height         *string                                                                                             `json:"Height,omitempty" xml:"Height,omitempty"`
	CodecTagString *string                                                                                             `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	NetworkCost    *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Width          *string                                                                                             `json:"Width,omitempty" xml:"Width,omitempty"`
	Index          *string                                                                                             `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                             `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                             `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                             `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Lang           *string                                                                                             `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                             `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	NumFrames      *string                                                                                             `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Rotate         *string                                                                                             `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Bitrate        *string                                                                                             `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	HasBFrames     *string                                                                                             `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                             `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                             `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Dar            *string                                                                                             `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                             `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string                                                                                             `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                             `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                             `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                             `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                             `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetSar(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetLang(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetRotate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetDar(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetFps(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList struct {
	AudioStream []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) SetAudioStream(v []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetLang(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetStartTime(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetNumPrograms(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetSize(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.Size = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetNumStreams(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetFormatLongName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetDuration(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.Duration = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetBitrate(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat) SetFormatName(v string) *QueryMediaListByURLResponseBodyMediaListMediaMediaInfoFormat {
	s.FormatName = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSnapshotList struct {
	Snapshot []*QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot `json:"Snapshot,omitempty" xml:"Snapshot,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotList) SetSnapshot(v []*QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotList {
	s.Snapshot = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot struct {
	Type              *string                                                                `json:"Type,omitempty" xml:"Type,omitempty"`
	MediaWorkflowId   *string                                                                `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	ActivityName      *string                                                                `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	Count             *string                                                                `json:"Count,omitempty" xml:"Count,omitempty"`
	MediaWorkflowName *string                                                                `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	File              *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetType(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.Type = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetMediaWorkflowId(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetActivityName(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetCount(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.Count = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetMediaWorkflowName(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot) SetFile(v *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshot {
	s.File = v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) SetState(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile {
	s.State = &v
	return s
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile) SetURL(v string) *QueryMediaListByURLResponseBodyMediaListMediaSnapshotListSnapshotFile {
	s.URL = &v
	return s
}

type QueryMediaListByURLResponseBodyMediaListMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyMediaListMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyMediaListMediaRunIdList) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyMediaListMediaRunIdList) SetRunId(v []*string) *QueryMediaListByURLResponseBodyMediaListMediaRunIdList {
	s.RunId = v
	return s
}

type QueryMediaListByURLResponseBodyNonExistFileURLs struct {
	FileURL []*string `json:"FileURL,omitempty" xml:"FileURL,omitempty" type:"Repeated"`
}

func (s QueryMediaListByURLResponseBodyNonExistFileURLs) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponseBodyNonExistFileURLs) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponseBodyNonExistFileURLs) SetFileURL(v []*string) *QueryMediaListByURLResponseBodyNonExistFileURLs {
	s.FileURL = v
	return s
}

type QueryMediaListByURLResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaListByURLResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaListByURLResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListByURLResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaListByURLResponse) SetHeaders(v map[string]*string) *QueryMediaListByURLResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaListByURLResponse) SetBody(v *QueryMediaListByURLResponseBody) *QueryMediaListByURLResponse {
	s.Body = v
	return s
}

type SubmitMediaFpDeleteJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	PrimaryKey           *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	FpDBId               *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitMediaFpDeleteJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaFpDeleteJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaFpDeleteJobRequest) SetOwnerId(v int64) *SubmitMediaFpDeleteJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitMediaFpDeleteJobRequest) SetResourceOwnerAccount(v string) *SubmitMediaFpDeleteJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitMediaFpDeleteJobRequest) SetResourceOwnerId(v int64) *SubmitMediaFpDeleteJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitMediaFpDeleteJobRequest) SetPipelineId(v string) *SubmitMediaFpDeleteJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaFpDeleteJobRequest) SetPrimaryKey(v string) *SubmitMediaFpDeleteJobRequest {
	s.PrimaryKey = &v
	return s
}

func (s *SubmitMediaFpDeleteJobRequest) SetFpDBId(v string) *SubmitMediaFpDeleteJobRequest {
	s.FpDBId = &v
	return s
}

func (s *SubmitMediaFpDeleteJobRequest) SetUserData(v string) *SubmitMediaFpDeleteJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitMediaFpDeleteJobRequest) SetOwnerAccount(v string) *SubmitMediaFpDeleteJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitMediaFpDeleteJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitMediaFpDeleteJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaFpDeleteJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaFpDeleteJobResponseBody) SetRequestId(v string) *SubmitMediaFpDeleteJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaFpDeleteJobResponseBody) SetJobId(v string) *SubmitMediaFpDeleteJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitMediaFpDeleteJobResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitMediaFpDeleteJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMediaFpDeleteJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaFpDeleteJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaFpDeleteJobResponse) SetHeaders(v map[string]*string) *SubmitMediaFpDeleteJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaFpDeleteJobResponse) SetBody(v *SubmitMediaFpDeleteJobResponseBody) *SubmitMediaFpDeleteJobResponse {
	s.Body = v
	return s
}

type DeactivateMediaWorkflowRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeactivateMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeactivateMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *DeactivateMediaWorkflowRequest) SetOwnerId(v int64) *DeactivateMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *DeactivateMediaWorkflowRequest) SetResourceOwnerAccount(v string) *DeactivateMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeactivateMediaWorkflowRequest) SetResourceOwnerId(v int64) *DeactivateMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeactivateMediaWorkflowRequest) SetMediaWorkflowId(v string) *DeactivateMediaWorkflowRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *DeactivateMediaWorkflowRequest) SetOwnerAccount(v string) *DeactivateMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

type DeactivateMediaWorkflowResponseBody struct {
	RequestId     *string                                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MediaWorkflow *DeactivateMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
}

func (s DeactivateMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeactivateMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *DeactivateMediaWorkflowResponseBody) SetRequestId(v string) *DeactivateMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBody) SetMediaWorkflow(v *DeactivateMediaWorkflowResponseBodyMediaWorkflow) *DeactivateMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

type DeactivateMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s DeactivateMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s DeactivateMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *DeactivateMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *DeactivateMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type DeactivateMediaWorkflowResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeactivateMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeactivateMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeactivateMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *DeactivateMediaWorkflowResponse) SetHeaders(v map[string]*string) *DeactivateMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *DeactivateMediaWorkflowResponse) SetBody(v *DeactivateMediaWorkflowResponseBody) *DeactivateMediaWorkflowResponse {
	s.Body = v
	return s
}

type PhysicalDeleteResourceRequest struct {
	Interrupt      *bool   `json:"Interrupt,omitempty" xml:"Interrupt,omitempty"`
	Invoker        *string `json:"Invoker,omitempty" xml:"Invoker,omitempty"`
	Pk             *string `json:"Pk,omitempty" xml:"Pk,omitempty"`
	Bid            *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Hid            *int64  `json:"Hid,omitempty" xml:"Hid,omitempty"`
	Country        *string `json:"Country,omitempty" xml:"Country,omitempty"`
	TaskIdentifier *string `json:"TaskIdentifier,omitempty" xml:"TaskIdentifier,omitempty"`
	TaskExtraData  *string `json:"TaskExtraData,omitempty" xml:"TaskExtraData,omitempty"`
	GmtWakeup      *string `json:"GmtWakeup,omitempty" xml:"GmtWakeup,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s PhysicalDeleteResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s PhysicalDeleteResourceRequest) GoString() string {
	return s.String()
}

func (s *PhysicalDeleteResourceRequest) SetInterrupt(v bool) *PhysicalDeleteResourceRequest {
	s.Interrupt = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetInvoker(v string) *PhysicalDeleteResourceRequest {
	s.Invoker = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetPk(v string) *PhysicalDeleteResourceRequest {
	s.Pk = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetBid(v string) *PhysicalDeleteResourceRequest {
	s.Bid = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetHid(v int64) *PhysicalDeleteResourceRequest {
	s.Hid = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetCountry(v string) *PhysicalDeleteResourceRequest {
	s.Country = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetTaskIdentifier(v string) *PhysicalDeleteResourceRequest {
	s.TaskIdentifier = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetTaskExtraData(v string) *PhysicalDeleteResourceRequest {
	s.TaskExtraData = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetGmtWakeup(v string) *PhysicalDeleteResourceRequest {
	s.GmtWakeup = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetSuccess(v bool) *PhysicalDeleteResourceRequest {
	s.Success = &v
	return s
}

func (s *PhysicalDeleteResourceRequest) SetMessage(v string) *PhysicalDeleteResourceRequest {
	s.Message = &v
	return s
}

type PhysicalDeleteResourceResponseBody struct {
	GmtWakeup      *string `json:"GmtWakeup,omitempty" xml:"GmtWakeup,omitempty"`
	Hid            *int64  `json:"Hid,omitempty" xml:"Hid,omitempty"`
	Invoker        *string `json:"Invoker,omitempty" xml:"Invoker,omitempty"`
	Message        *string `json:"Message,omitempty" xml:"Message,omitempty"`
	TaskIdentifier *string `json:"TaskIdentifier,omitempty" xml:"TaskIdentifier,omitempty"`
	TaskExtraData  *string `json:"TaskExtraData,omitempty" xml:"TaskExtraData,omitempty"`
	Country        *string `json:"Country,omitempty" xml:"Country,omitempty"`
	Pk             *string `json:"Pk,omitempty" xml:"Pk,omitempty"`
	Bid            *string `json:"Bid,omitempty" xml:"Bid,omitempty"`
	Success        *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	Interrupt      *bool   `json:"Interrupt,omitempty" xml:"Interrupt,omitempty"`
}

func (s PhysicalDeleteResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PhysicalDeleteResourceResponseBody) GoString() string {
	return s.String()
}

func (s *PhysicalDeleteResourceResponseBody) SetGmtWakeup(v string) *PhysicalDeleteResourceResponseBody {
	s.GmtWakeup = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetHid(v int64) *PhysicalDeleteResourceResponseBody {
	s.Hid = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetInvoker(v string) *PhysicalDeleteResourceResponseBody {
	s.Invoker = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetMessage(v string) *PhysicalDeleteResourceResponseBody {
	s.Message = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetTaskIdentifier(v string) *PhysicalDeleteResourceResponseBody {
	s.TaskIdentifier = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetTaskExtraData(v string) *PhysicalDeleteResourceResponseBody {
	s.TaskExtraData = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetCountry(v string) *PhysicalDeleteResourceResponseBody {
	s.Country = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetPk(v string) *PhysicalDeleteResourceResponseBody {
	s.Pk = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetBid(v string) *PhysicalDeleteResourceResponseBody {
	s.Bid = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetSuccess(v bool) *PhysicalDeleteResourceResponseBody {
	s.Success = &v
	return s
}

func (s *PhysicalDeleteResourceResponseBody) SetInterrupt(v bool) *PhysicalDeleteResourceResponseBody {
	s.Interrupt = &v
	return s
}

type PhysicalDeleteResourceResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PhysicalDeleteResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PhysicalDeleteResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s PhysicalDeleteResourceResponse) GoString() string {
	return s.String()
}

func (s *PhysicalDeleteResourceResponse) SetHeaders(v map[string]*string) *PhysicalDeleteResourceResponse {
	s.Headers = v
	return s
}

func (s *PhysicalDeleteResourceResponse) SetBody(v *PhysicalDeleteResourceResponseBody) *PhysicalDeleteResourceResponse {
	s.Body = v
	return s
}

type DeleteMCTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteMCTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMCTemplateRequest) GoString() string {
	return s.String()
}

func (s *DeleteMCTemplateRequest) SetOwnerId(v int64) *DeleteMCTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMCTemplateRequest) SetResourceOwnerAccount(v string) *DeleteMCTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMCTemplateRequest) SetResourceOwnerId(v int64) *DeleteMCTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteMCTemplateRequest) SetTemplateId(v string) *DeleteMCTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *DeleteMCTemplateRequest) SetOwnerAccount(v string) *DeleteMCTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteMCTemplateResponseBody struct {
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TemplateId *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
}

func (s DeleteMCTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMCTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMCTemplateResponseBody) SetRequestId(v string) *DeleteMCTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMCTemplateResponseBody) SetTemplateId(v string) *DeleteMCTemplateResponseBody {
	s.TemplateId = &v
	return s
}

type DeleteMCTemplateResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMCTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMCTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMCTemplateResponse) GoString() string {
	return s.String()
}

func (s *DeleteMCTemplateResponse) SetHeaders(v map[string]*string) *DeleteMCTemplateResponse {
	s.Headers = v
	return s
}

func (s *DeleteMCTemplateResponse) SetBody(v *DeleteMCTemplateResponseBody) *DeleteMCTemplateResponse {
	s.Body = v
	return s
}

type UpdatePipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdatePipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdatePipelineRequest) SetOwnerId(v int64) *UpdatePipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdatePipelineRequest) SetResourceOwnerAccount(v string) *UpdatePipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdatePipelineRequest) SetResourceOwnerId(v int64) *UpdatePipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdatePipelineRequest) SetPipelineId(v string) *UpdatePipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdatePipelineRequest) SetName(v string) *UpdatePipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdatePipelineRequest) SetState(v string) *UpdatePipelineRequest {
	s.State = &v
	return s
}

func (s *UpdatePipelineRequest) SetNotifyConfig(v string) *UpdatePipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *UpdatePipelineRequest) SetRole(v string) *UpdatePipelineRequest {
	s.Role = &v
	return s
}

func (s *UpdatePipelineRequest) SetOwnerAccount(v string) *UpdatePipelineRequest {
	s.OwnerAccount = &v
	return s
}

type UpdatePipelineResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *UpdatePipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s UpdatePipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBody) SetRequestId(v string) *UpdatePipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdatePipelineResponseBody) SetPipeline(v *UpdatePipelineResponseBodyPipeline) *UpdatePipelineResponseBody {
	s.Pipeline = v
	return s
}

type UpdatePipelineResponseBodyPipeline struct {
	Speed         *string                                         `json:"Speed,omitempty" xml:"Speed,omitempty"`
	State         *string                                         `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig  *UpdatePipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Name          *string                                         `json:"Name,omitempty" xml:"Name,omitempty"`
	Role          *string                                         `json:"Role,omitempty" xml:"Role,omitempty"`
	Id            *string                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	QuotaAllocate *int64                                          `json:"QuotaAllocate,omitempty" xml:"QuotaAllocate,omitempty"`
}

func (s UpdatePipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBodyPipeline) SetSpeed(v string) *UpdatePipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetState(v string) *UpdatePipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetNotifyConfig(v *UpdatePipelineResponseBodyPipelineNotifyConfig) *UpdatePipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetName(v string) *UpdatePipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetRole(v string) *UpdatePipelineResponseBodyPipeline {
	s.Role = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetId(v string) *UpdatePipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipeline) SetQuotaAllocate(v int64) *UpdatePipelineResponseBodyPipeline {
	s.QuotaAllocate = &v
	return s
}

type UpdatePipelineResponseBodyPipelineNotifyConfig struct {
	MqTopic   *string `json:"MqTopic,omitempty" xml:"MqTopic,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	MqTag     *string `json:"MqTag,omitempty" xml:"MqTag,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s UpdatePipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponseBodyPipelineNotifyConfig) SetMqTopic(v string) *UpdatePipelineResponseBodyPipelineNotifyConfig {
	s.MqTopic = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipelineNotifyConfig) SetQueueName(v string) *UpdatePipelineResponseBodyPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipelineNotifyConfig) SetMqTag(v string) *UpdatePipelineResponseBodyPipelineNotifyConfig {
	s.MqTag = &v
	return s
}

func (s *UpdatePipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *UpdatePipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type UpdatePipelineResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdatePipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdatePipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdatePipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdatePipelineResponse) SetHeaders(v map[string]*string) *UpdatePipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdatePipelineResponse) SetBody(v *UpdatePipelineResponseBody) *UpdatePipelineResponse {
	s.Body = v
	return s
}

type DeleteMediaRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaIds             *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteMediaRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaRequest) SetOwnerId(v int64) *DeleteMediaRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMediaRequest) SetResourceOwnerAccount(v string) *DeleteMediaRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMediaRequest) SetResourceOwnerId(v int64) *DeleteMediaRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteMediaRequest) SetMediaIds(v string) *DeleteMediaRequest {
	s.MediaIds = &v
	return s
}

func (s *DeleteMediaRequest) SetOwnerAccount(v string) *DeleteMediaRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteMediaResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s DeleteMediaResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaResponseBody) SetRequestId(v string) *DeleteMediaResponseBody {
	s.RequestId = &v
	return s
}

type DeleteMediaResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMediaResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMediaResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaResponse) SetHeaders(v map[string]*string) *DeleteMediaResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaResponse) SetBody(v *DeleteMediaResponseBody) *DeleteMediaResponse {
	s.Body = v
	return s
}

type QueryFpCompareJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryFpCompareJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListRequest) SetOwnerId(v int64) *QueryFpCompareJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFpCompareJobListRequest) SetResourceOwnerAccount(v string) *QueryFpCompareJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFpCompareJobListRequest) SetResourceOwnerId(v int64) *QueryFpCompareJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryFpCompareJobListRequest) SetJobIds(v string) *QueryFpCompareJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryFpCompareJobListRequest) SetOwnerAccount(v string) *QueryFpCompareJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryFpCompareJobListResponseBody struct {
	FpCompareJobList *QueryFpCompareJobListResponseBodyFpCompareJobList `json:"FpCompareJobList,omitempty" xml:"FpCompareJobList,omitempty" type:"Struct"`
	RequestId        *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistIds      *QueryFpCompareJobListResponseBodyNonExistIds      `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryFpCompareJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBody) SetFpCompareJobList(v *QueryFpCompareJobListResponseBodyFpCompareJobList) *QueryFpCompareJobListResponseBody {
	s.FpCompareJobList = v
	return s
}

func (s *QueryFpCompareJobListResponseBody) SetRequestId(v string) *QueryFpCompareJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFpCompareJobListResponseBody) SetNonExistIds(v *QueryFpCompareJobListResponseBodyNonExistIds) *QueryFpCompareJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobList struct {
	FpCompareJob []*QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob `json:"FpCompareJob,omitempty" xml:"FpCompareJob,omitempty" type:"Repeated"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobList) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobList) SetFpCompareJob(v []*QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) *QueryFpCompareJobListResponseBodyFpCompareJobList {
	s.FpCompareJob = v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob struct {
	MasterFile        *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile        `json:"MasterFile,omitempty" xml:"MasterFile,omitempty" type:"Struct"`
	CreationTime      *string                                                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime        *string                                                                         `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State             *string                                                                         `json:"State,omitempty" xml:"State,omitempty"`
	Message           *string                                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	QueryFile         *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile         `json:"QueryFile,omitempty" xml:"QueryFile,omitempty" type:"Struct"`
	FpDBId            *string                                                                         `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	UserData          *string                                                                         `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code              *string                                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	MatchFrameStorage *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage `json:"MatchFrameStorage,omitempty" xml:"MatchFrameStorage,omitempty" type:"Struct"`
	PipelineId        *string                                                                         `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Id                *string                                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
	FpCompareResult   *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult   `json:"FpCompareResult,omitempty" xml:"FpCompareResult,omitempty" type:"Struct"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetMasterFile(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.MasterFile = v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetCreationTime(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.CreationTime = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetFinishTime(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.FinishTime = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetState(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.State = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetMessage(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.Message = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetQueryFile(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.QueryFile = v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetFpDBId(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.FpDBId = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetUserData(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.UserData = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetCode(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.Code = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetMatchFrameStorage(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.MatchFrameStorage = v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetPipelineId(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.PipelineId = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetId(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.Id = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob) SetFpCompareResult(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJob {
	s.FpCompareResult = v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile) SetObject(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile {
	s.Object = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile) SetLocation(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile {
	s.Location = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile) SetBucket(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMasterFile {
	s.Bucket = &v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile) SetObject(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile {
	s.Object = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile) SetLocation(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile {
	s.Location = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile) SetBucket(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobQueryFile {
	s.Bucket = &v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage struct {
	MasterMediaFrames     *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames     `json:"MasterMediaFrames,omitempty" xml:"MasterMediaFrames,omitempty" type:"Struct"`
	MatchedFramesDescFile *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile `json:"MatchedFramesDescFile,omitempty" xml:"MatchedFramesDescFile,omitempty" type:"Struct"`
	QueryMediaFrames      *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames      `json:"QueryMediaFrames,omitempty" xml:"QueryMediaFrames,omitempty" type:"Struct"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage) SetMasterMediaFrames(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage {
	s.MasterMediaFrames = v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage) SetMatchedFramesDescFile(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage {
	s.MatchedFramesDescFile = v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage) SetQueryMediaFrames(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorage {
	s.QueryMediaFrames = v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames) SetObject(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames {
	s.Object = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames) SetLocation(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames {
	s.Location = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames) SetBucket(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMasterMediaFrames {
	s.Bucket = &v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile) SetObject(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile {
	s.Object = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile) SetLocation(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile {
	s.Location = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile) SetBucket(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageMatchedFramesDescFile {
	s.Bucket = &v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames) SetObject(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames {
	s.Object = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames) SetLocation(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames {
	s.Location = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames) SetBucket(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobMatchFrameStorageQueryMediaFrames {
	s.Bucket = &v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult struct {
	MediaMatchSegments *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegments `json:"MediaMatchSegments,omitempty" xml:"MediaMatchSegments,omitempty" type:"Struct"`
	QueryMediaInfo     *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo     `json:"QueryMediaInfo,omitempty" xml:"QueryMediaInfo,omitempty" type:"Struct"`
	MasterMediaInfo    *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo    `json:"MasterMediaInfo,omitempty" xml:"MasterMediaInfo,omitempty" type:"Struct"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult) SetMediaMatchSegments(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegments) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult {
	s.MediaMatchSegments = v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult) SetQueryMediaInfo(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult {
	s.QueryMediaInfo = v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult) SetMasterMediaInfo(v *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResult {
	s.MasterMediaInfo = v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegments struct {
	MediaMatchSegment []*QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment `json:"MediaMatchSegment,omitempty" xml:"MediaMatchSegment,omitempty" type:"Repeated"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegments) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegments) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegments) SetMediaMatchSegment(v []*QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegments {
	s.MediaMatchSegment = v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment struct {
	QueryStartTime     *string `json:"QueryStartTime,omitempty" xml:"QueryStartTime,omitempty"`
	QueryEndFrame      *string `json:"QueryEndFrame,omitempty" xml:"QueryEndFrame,omitempty"`
	Score              *string `json:"Score,omitempty" xml:"Score,omitempty"`
	TotalMatchFrameNum *string `json:"TotalMatchFrameNum,omitempty" xml:"TotalMatchFrameNum,omitempty"`
	MasterEndTime      *string `json:"MasterEndTime,omitempty" xml:"MasterEndTime,omitempty"`
	MasterStartTime    *string `json:"MasterStartTime,omitempty" xml:"MasterStartTime,omitempty"`
	QueryStartFrame    *string `json:"QueryStartFrame,omitempty" xml:"QueryStartFrame,omitempty"`
	MasterEndFrame     *string `json:"MasterEndFrame,omitempty" xml:"MasterEndFrame,omitempty"`
	MasterStartFrame   *string `json:"MasterStartFrame,omitempty" xml:"MasterStartFrame,omitempty"`
	QueryEndTime       *string `json:"QueryEndTime,omitempty" xml:"QueryEndTime,omitempty"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetQueryStartTime(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.QueryStartTime = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetQueryEndFrame(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.QueryEndFrame = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetScore(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.Score = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetTotalMatchFrameNum(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.TotalMatchFrameNum = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetMasterEndTime(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.MasterEndTime = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetMasterStartTime(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.MasterStartTime = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetQueryStartFrame(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.QueryStartFrame = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetMasterEndFrame(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.MasterEndFrame = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetMasterStartFrame(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.MasterStartFrame = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment) SetQueryEndTime(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMediaMatchSegmentsMediaMatchSegment {
	s.QueryEndTime = &v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo struct {
	AudioSampleRate *string `json:"AudioSampleRate,omitempty" xml:"AudioSampleRate,omitempty"`
	AudioBitRate    *string `json:"AudioBitRate,omitempty" xml:"AudioBitRate,omitempty"`
	FpNum           *string `json:"FpNum,omitempty" xml:"FpNum,omitempty"`
	Width           *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height          *string `json:"Height,omitempty" xml:"Height,omitempty"`
	TotalVideoFrame *string `json:"TotalVideoFrame,omitempty" xml:"TotalVideoFrame,omitempty"`
	Fps             *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Duration        *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AudioChannels   *string `json:"AudioChannels,omitempty" xml:"AudioChannels,omitempty"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetAudioSampleRate(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.AudioSampleRate = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetAudioBitRate(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.AudioBitRate = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetFpNum(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.FpNum = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetWidth(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.Width = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetHeight(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.Height = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetTotalVideoFrame(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.TotalVideoFrame = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetFps(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.Fps = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetDuration(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.Duration = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo) SetAudioChannels(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultQueryMediaInfo {
	s.AudioChannels = &v
	return s
}

type QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo struct {
	AudioSampleRate *string `json:"AudioSampleRate,omitempty" xml:"AudioSampleRate,omitempty"`
	AudioBitRate    *string `json:"AudioBitRate,omitempty" xml:"AudioBitRate,omitempty"`
	FpNum           *string `json:"FpNum,omitempty" xml:"FpNum,omitempty"`
	Width           *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height          *string `json:"Height,omitempty" xml:"Height,omitempty"`
	TotalVideoFrame *string `json:"TotalVideoFrame,omitempty" xml:"TotalVideoFrame,omitempty"`
	Fps             *string `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Duration        *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AudioChannels   *string `json:"AudioChannels,omitempty" xml:"AudioChannels,omitempty"`
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetAudioSampleRate(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.AudioSampleRate = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetAudioBitRate(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.AudioBitRate = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetFpNum(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.FpNum = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetWidth(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.Width = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetHeight(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.Height = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetTotalVideoFrame(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.TotalVideoFrame = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetFps(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.Fps = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetDuration(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.Duration = &v
	return s
}

func (s *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo) SetAudioChannels(v string) *QueryFpCompareJobListResponseBodyFpCompareJobListFpCompareJobFpCompareResultMasterMediaInfo {
	s.AudioChannels = &v
	return s
}

type QueryFpCompareJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryFpCompareJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryFpCompareJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryFpCompareJobListResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryFpCompareJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryFpCompareJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFpCompareJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryFpCompareJobListResponse) SetHeaders(v map[string]*string) *QueryFpCompareJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryFpCompareJobListResponse) SetBody(v *QueryFpCompareJobListResponseBody) *QueryFpCompareJobListResponse {
	s.Body = v
	return s
}

type BindOutputBucketRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Bucket               *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	RoleArn              *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s BindOutputBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s BindOutputBucketRequest) GoString() string {
	return s.String()
}

func (s *BindOutputBucketRequest) SetOwnerId(v int64) *BindOutputBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *BindOutputBucketRequest) SetResourceOwnerAccount(v string) *BindOutputBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BindOutputBucketRequest) SetResourceOwnerId(v int64) *BindOutputBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BindOutputBucketRequest) SetBucket(v string) *BindOutputBucketRequest {
	s.Bucket = &v
	return s
}

func (s *BindOutputBucketRequest) SetRoleArn(v string) *BindOutputBucketRequest {
	s.RoleArn = &v
	return s
}

func (s *BindOutputBucketRequest) SetOwnerAccount(v string) *BindOutputBucketRequest {
	s.OwnerAccount = &v
	return s
}

type BindOutputBucketResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindOutputBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindOutputBucketResponseBody) GoString() string {
	return s.String()
}

func (s *BindOutputBucketResponseBody) SetRequestId(v string) *BindOutputBucketResponseBody {
	s.RequestId = &v
	return s
}

type BindOutputBucketResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindOutputBucketResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindOutputBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s BindOutputBucketResponse) GoString() string {
	return s.String()
}

func (s *BindOutputBucketResponse) SetHeaders(v map[string]*string) *BindOutputBucketResponse {
	s.Headers = v
	return s
}

func (s *BindOutputBucketResponse) SetBody(v *BindOutputBucketResponseBody) *BindOutputBucketResponse {
	s.Body = v
	return s
}

type AddPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Speed                *string `json:"Speed,omitempty" xml:"Speed,omitempty"`
	SpeedLevel           *int64  `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineRequest) GoString() string {
	return s.String()
}

func (s *AddPipelineRequest) SetOwnerId(v int64) *AddPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *AddPipelineRequest) SetResourceOwnerAccount(v string) *AddPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddPipelineRequest) SetResourceOwnerId(v int64) *AddPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddPipelineRequest) SetName(v string) *AddPipelineRequest {
	s.Name = &v
	return s
}

func (s *AddPipelineRequest) SetSpeed(v string) *AddPipelineRequest {
	s.Speed = &v
	return s
}

func (s *AddPipelineRequest) SetSpeedLevel(v int64) *AddPipelineRequest {
	s.SpeedLevel = &v
	return s
}

func (s *AddPipelineRequest) SetNotifyConfig(v string) *AddPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *AddPipelineRequest) SetRole(v string) *AddPipelineRequest {
	s.Role = &v
	return s
}

func (s *AddPipelineRequest) SetOwnerAccount(v string) *AddPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type AddPipelineResponseBody struct {
	RequestId *string                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *AddPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s AddPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *AddPipelineResponseBody) SetRequestId(v string) *AddPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddPipelineResponseBody) SetPipeline(v *AddPipelineResponseBodyPipeline) *AddPipelineResponseBody {
	s.Pipeline = v
	return s
}

type AddPipelineResponseBodyPipeline struct {
	Speed         *string                                      `json:"Speed,omitempty" xml:"Speed,omitempty"`
	State         *string                                      `json:"State,omitempty" xml:"State,omitempty"`
	SpeedLevel    *int64                                       `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
	NotifyConfig  *AddPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Role          *string                                      `json:"Role,omitempty" xml:"Role,omitempty"`
	Name          *string                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Id            *string                                      `json:"Id,omitempty" xml:"Id,omitempty"`
	QuotaAllocate *int64                                       `json:"QuotaAllocate,omitempty" xml:"QuotaAllocate,omitempty"`
}

func (s AddPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *AddPipelineResponseBodyPipeline) SetSpeed(v string) *AddPipelineResponseBodyPipeline {
	s.Speed = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetState(v string) *AddPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetSpeedLevel(v int64) *AddPipelineResponseBodyPipeline {
	s.SpeedLevel = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetNotifyConfig(v *AddPipelineResponseBodyPipelineNotifyConfig) *AddPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetRole(v string) *AddPipelineResponseBodyPipeline {
	s.Role = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetName(v string) *AddPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetId(v string) *AddPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

func (s *AddPipelineResponseBodyPipeline) SetQuotaAllocate(v int64) *AddPipelineResponseBodyPipeline {
	s.QuotaAllocate = &v
	return s
}

type AddPipelineResponseBodyPipelineNotifyConfig struct {
	MqTopic   *string `json:"MqTopic,omitempty" xml:"MqTopic,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	MqTag     *string `json:"MqTag,omitempty" xml:"MqTag,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s AddPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *AddPipelineResponseBodyPipelineNotifyConfig) SetMqTopic(v string) *AddPipelineResponseBodyPipelineNotifyConfig {
	s.MqTopic = &v
	return s
}

func (s *AddPipelineResponseBodyPipelineNotifyConfig) SetQueueName(v string) *AddPipelineResponseBodyPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *AddPipelineResponseBodyPipelineNotifyConfig) SetMqTag(v string) *AddPipelineResponseBodyPipelineNotifyConfig {
	s.MqTag = &v
	return s
}

func (s *AddPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *AddPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type AddPipelineResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPipelineResponse) GoString() string {
	return s.String()
}

func (s *AddPipelineResponse) SetHeaders(v map[string]*string) *AddPipelineResponse {
	s.Headers = v
	return s
}

func (s *AddPipelineResponse) SetBody(v *AddPipelineResponseBody) *AddPipelineResponse {
	s.Body = v
	return s
}

type QueryMCJobListRequest struct {
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount       *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds                     *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	NextPageToken              *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize            *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	State                      *string `json:"State,omitempty" xml:"State,omitempty"`
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	EndOfJobCreatedTimeRange   *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	PipelineId                 *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount               *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMCJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryMCJobListRequest) SetOwnerId(v int64) *QueryMCJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMCJobListRequest) SetResourceOwnerAccount(v string) *QueryMCJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMCJobListRequest) SetResourceOwnerId(v int64) *QueryMCJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMCJobListRequest) SetJobIds(v string) *QueryMCJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryMCJobListRequest) SetNextPageToken(v string) *QueryMCJobListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryMCJobListRequest) SetMaximumPageSize(v int64) *QueryMCJobListRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryMCJobListRequest) SetState(v string) *QueryMCJobListRequest {
	s.State = &v
	return s
}

func (s *QueryMCJobListRequest) SetStartOfJobCreatedTimeRange(v string) *QueryMCJobListRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryMCJobListRequest) SetEndOfJobCreatedTimeRange(v string) *QueryMCJobListRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryMCJobListRequest) SetPipelineId(v string) *QueryMCJobListRequest {
	s.PipelineId = &v
	return s
}

func (s *QueryMCJobListRequest) SetOwnerAccount(v string) *QueryMCJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMCJobListResponseBody struct {
	RequestId     *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken *string                                `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	JobList       *QueryMCJobListResponseBodyJobList     `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NonExistIds   *QueryMCJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBody) SetRequestId(v string) *QueryMCJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMCJobListResponseBody) SetNextPageToken(v string) *QueryMCJobListResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *QueryMCJobListResponseBody) SetJobList(v *QueryMCJobListResponseBodyJobList) *QueryMCJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryMCJobListResponseBody) SetNonExistIds(v *QueryMCJobListResponseBodyNonExistIds) *QueryMCJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryMCJobListResponseBodyJobList struct {
	Job []*QueryMCJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobList) SetJob(v []*QueryMCJobListResponseBodyJobListJob) *QueryMCJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryMCJobListResponseBodyJobListJob struct {
	CreationTime     *string                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	ResultOutputFile *string                                     `json:"ResultOutputFile,omitempty" xml:"ResultOutputFile,omitempty"`
	Result           *QueryMCJobListResponseBodyJobListJobResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	State            *string                                     `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                     `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData         *string                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId       *string                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryMCJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJob) SetResultOutputFile(v string) *QueryMCJobListResponseBodyJobListJob {
	s.ResultOutputFile = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJob) SetResult(v *QueryMCJobListResponseBodyJobListJobResult) *QueryMCJobListResponseBodyJobListJob {
	s.Result = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJob) SetState(v string) *QueryMCJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJob) SetJobId(v string) *QueryMCJobListResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJob) SetUserData(v string) *QueryMCJobListResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJob) SetCode(v string) *QueryMCJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJob) SetMessage(v string) *QueryMCJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryMCJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResult struct {
	Suggestion       *string                                                     `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	PornResult       *QueryMCJobListResponseBodyJobListJobResultPornResult       `json:"PornResult,omitempty" xml:"PornResult,omitempty" type:"Struct"`
	AdResult         *QueryMCJobListResponseBodyJobListJobResultAdResult         `json:"AdResult,omitempty" xml:"AdResult,omitempty" type:"Struct"`
	Score            *string                                                     `json:"Score,omitempty" xml:"Score,omitempty"`
	LogoResult       *QueryMCJobListResponseBodyJobListJobResultLogoResult       `json:"LogoResult,omitempty" xml:"LogoResult,omitempty" type:"Struct"`
	QrcodeResult     *QueryMCJobListResponseBodyJobListJobResultQrcodeResult     `json:"QrcodeResult,omitempty" xml:"QrcodeResult,omitempty" type:"Struct"`
	PoliticsResult   *QueryMCJobListResponseBodyJobListJobResultPoliticsResult   `json:"PoliticsResult,omitempty" xml:"PoliticsResult,omitempty" type:"Struct"`
	LiveResult       *QueryMCJobListResponseBodyJobListJobResultLiveResult       `json:"LiveResult,omitempty" xml:"LiveResult,omitempty" type:"Struct"`
	AbuseResult      *QueryMCJobListResponseBodyJobListJobResultAbuseResult      `json:"AbuseResult,omitempty" xml:"AbuseResult,omitempty" type:"Struct"`
	SpamResult       *QueryMCJobListResponseBodyJobListJobResultSpamResult       `json:"SpamResult,omitempty" xml:"SpamResult,omitempty" type:"Struct"`
	ContrabandResult *QueryMCJobListResponseBodyJobListJobResultContrabandResult `json:"ContrabandResult,omitempty" xml:"ContrabandResult,omitempty" type:"Struct"`
	TerrorismResult  *QueryMCJobListResponseBodyJobListJobResultTerrorismResult  `json:"TerrorismResult,omitempty" xml:"TerrorismResult,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResult {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetPornResult(v *QueryMCJobListResponseBodyJobListJobResultPornResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.PornResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetAdResult(v *QueryMCJobListResponseBodyJobListJobResultAdResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.AdResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResult {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetLogoResult(v *QueryMCJobListResponseBodyJobListJobResultLogoResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.LogoResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetQrcodeResult(v *QueryMCJobListResponseBodyJobListJobResultQrcodeResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.QrcodeResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetPoliticsResult(v *QueryMCJobListResponseBodyJobListJobResultPoliticsResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.PoliticsResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetLiveResult(v *QueryMCJobListResponseBodyJobListJobResultLiveResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.LiveResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetAbuseResult(v *QueryMCJobListResponseBodyJobListJobResultAbuseResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.AbuseResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetSpamResult(v *QueryMCJobListResponseBodyJobListJobResultSpamResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.SpamResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetContrabandResult(v *QueryMCJobListResponseBodyJobListJobResultContrabandResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.ContrabandResult = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResult) SetTerrorismResult(v *QueryMCJobListResponseBodyJobListJobResultTerrorismResult) *QueryMCJobListResponseBodyJobListJobResult {
	s.TerrorismResult = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResult struct {
	PornTexts  *QueryMCJobListResponseBodyJobListJobResultPornResultPornTexts  `json:"PornTexts,omitempty" xml:"PornTexts,omitempty" type:"Struct"`
	PornVideos *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideos `json:"PornVideos,omitempty" xml:"PornVideos,omitempty" type:"Struct"`
	PornAudios *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudios `json:"PornAudios,omitempty" xml:"PornAudios,omitempty" type:"Struct"`
	PornImages *QueryMCJobListResponseBodyJobListJobResultPornResultPornImages `json:"PornImages,omitempty" xml:"PornImages,omitempty" type:"Struct"`
	PornOcrs   *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrs   `json:"PornOcrs,omitempty" xml:"PornOcrs,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResult) SetPornTexts(v *QueryMCJobListResponseBodyJobListJobResultPornResultPornTexts) *QueryMCJobListResponseBodyJobListJobResultPornResult {
	s.PornTexts = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResult) SetPornVideos(v *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideos) *QueryMCJobListResponseBodyJobListJobResultPornResult {
	s.PornVideos = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResult) SetPornAudios(v *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudios) *QueryMCJobListResponseBodyJobListJobResultPornResult {
	s.PornAudios = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResult) SetPornImages(v *QueryMCJobListResponseBodyJobListJobResultPornResultPornImages) *QueryMCJobListResponseBodyJobListJobResultPornResult {
	s.PornImages = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResult) SetPornOcrs(v *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrs) *QueryMCJobListResponseBodyJobListJobResultPornResult {
	s.PornOcrs = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornTexts struct {
	PornText []*QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText `json:"PornText,omitempty" xml:"PornText,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornTexts) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornTexts) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornTexts) SetPornText(v []*QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText) *QueryMCJobListResponseBodyJobListJobResultPornResultPornTexts {
	s.PornText = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornTextsPornText {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornVideos struct {
	PornVideo []*QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo `json:"PornVideo,omitempty" xml:"PornVideo,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornVideos) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornVideos) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideos) SetPornVideo(v []*QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo) *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideos {
	s.PornVideo = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornVideosPornVideo {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornAudios struct {
	PornAudio []*QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio `json:"PornAudio,omitempty" xml:"PornAudio,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornAudios) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornAudios) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudios) SetPornAudio(v []*QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudios {
	s.PornAudio = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) SetEndTime(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio {
	s.EndTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) SetStartTime(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio {
	s.StartTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornAudiosPornAudio {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornImages struct {
	PornImage []*QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage `json:"PornImage,omitempty" xml:"PornImage,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornImages) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornImages) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornImages) SetPornImage(v []*QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage) *QueryMCJobListResponseBodyJobListJobResultPornResultPornImages {
	s.PornImage = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Url        *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage) SetUrl(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage {
	s.Url = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornImagesPornImage {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrs struct {
	PornOcr []*QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr `json:"PornOcr,omitempty" xml:"PornOcr,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrs) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrs) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrs) SetPornOcr(v []*QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr) *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrs {
	s.PornOcr = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultPornResultPornOcrsPornOcr {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResult struct {
	AdOcrs   *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrs   `json:"AdOcrs,omitempty" xml:"AdOcrs,omitempty" type:"Struct"`
	AdTexts  *QueryMCJobListResponseBodyJobListJobResultAdResultAdTexts  `json:"AdTexts,omitempty" xml:"AdTexts,omitempty" type:"Struct"`
	AdImages *QueryMCJobListResponseBodyJobListJobResultAdResultAdImages `json:"AdImages,omitempty" xml:"AdImages,omitempty" type:"Struct"`
	AdAudios *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudios `json:"AdAudios,omitempty" xml:"AdAudios,omitempty" type:"Struct"`
	AdVideos *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideos `json:"AdVideos,omitempty" xml:"AdVideos,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResult) SetAdOcrs(v *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrs) *QueryMCJobListResponseBodyJobListJobResultAdResult {
	s.AdOcrs = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResult) SetAdTexts(v *QueryMCJobListResponseBodyJobListJobResultAdResultAdTexts) *QueryMCJobListResponseBodyJobListJobResultAdResult {
	s.AdTexts = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResult) SetAdImages(v *QueryMCJobListResponseBodyJobListJobResultAdResultAdImages) *QueryMCJobListResponseBodyJobListJobResultAdResult {
	s.AdImages = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResult) SetAdAudios(v *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudios) *QueryMCJobListResponseBodyJobListJobResultAdResult {
	s.AdAudios = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResult) SetAdVideos(v *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideos) *QueryMCJobListResponseBodyJobListJobResultAdResult {
	s.AdVideos = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrs struct {
	AdOcr []*QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr `json:"AdOcr,omitempty" xml:"AdOcr,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrs) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrs) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrs) SetAdOcr(v []*QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr) *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrs {
	s.AdOcr = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdOcrsAdOcr {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdTexts struct {
	AdText []*QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText `json:"AdText,omitempty" xml:"AdText,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdTexts) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdTexts) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdTexts) SetAdText(v []*QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText) *QueryMCJobListResponseBodyJobListJobResultAdResultAdTexts {
	s.AdText = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdTextsAdText {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdImages struct {
	AdImage []*QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage `json:"AdImage,omitempty" xml:"AdImage,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdImages) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdImages) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdImages) SetAdImage(v []*QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage) *QueryMCJobListResponseBodyJobListJobResultAdResultAdImages {
	s.AdImage = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Url        *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage) SetUrl(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage {
	s.Url = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdImagesAdImage {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdAudios struct {
	AdAudio []*QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio `json:"AdAudio,omitempty" xml:"AdAudio,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdAudios) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdAudios) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudios) SetAdAudio(v []*QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudios {
	s.AdAudio = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) SetEndTime(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio {
	s.EndTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) SetStartTime(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio {
	s.StartTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdAudiosAdAudio {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdVideos struct {
	AdVideo []*QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo `json:"AdVideo,omitempty" xml:"AdVideo,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdVideos) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdVideos) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideos) SetAdVideo(v []*QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo) *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideos {
	s.AdVideo = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultAdResultAdVideosAdVideo {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLogoResult struct {
	LogoImages *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImages `json:"LogoImages,omitempty" xml:"LogoImages,omitempty" type:"Struct"`
	LogoVideos *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideos `json:"LogoVideos,omitempty" xml:"LogoVideos,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResult) SetLogoImages(v *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImages) *QueryMCJobListResponseBodyJobListJobResultLogoResult {
	s.LogoImages = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResult) SetLogoVideos(v *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideos) *QueryMCJobListResponseBodyJobListJobResultLogoResult {
	s.LogoVideos = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImages struct {
	LogoImage []*QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage `json:"LogoImage,omitempty" xml:"LogoImage,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImages) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImages) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImages) SetLogoImage(v []*QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImages {
	s.LogoImage = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Url        *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage) SetUrl(v string) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage {
	s.Url = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoImagesLogoImage {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideos struct {
	LogoVideo []*QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo `json:"LogoVideo,omitempty" xml:"LogoVideo,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideos) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideos) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideos) SetLogoVideo(v []*QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideos {
	s.LogoVideo = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultLogoResultLogoVideosLogoVideo {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultQrcodeResult struct {
	QrcodeImages *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImages `json:"QrcodeImages,omitempty" xml:"QrcodeImages,omitempty" type:"Struct"`
	QrcodeVideos *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideos `json:"QrcodeVideos,omitempty" xml:"QrcodeVideos,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResult) SetQrcodeImages(v *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImages) *QueryMCJobListResponseBodyJobListJobResultQrcodeResult {
	s.QrcodeImages = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResult) SetQrcodeVideos(v *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideos) *QueryMCJobListResponseBodyJobListJobResultQrcodeResult {
	s.QrcodeVideos = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImages struct {
	QrcodeImage []*QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage `json:"QrcodeImage,omitempty" xml:"QrcodeImage,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImages) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImages) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImages) SetQrcodeImage(v []*QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImages {
	s.QrcodeImage = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Url        *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage) SetUrl(v string) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage {
	s.Url = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeImagesQrcodeImage {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideos struct {
	QrcodeVideo []*QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo `json:"QrcodeVideo,omitempty" xml:"QrcodeVideo,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideos) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideos) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideos) SetQrcodeVideo(v []*QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideos {
	s.QrcodeVideo = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultQrcodeResultQrcodeVideosQrcodeVideo {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResult struct {
	PoliticsOcrs   *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrs   `json:"PoliticsOcrs,omitempty" xml:"PoliticsOcrs,omitempty" type:"Struct"`
	PoliticsVideos *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideos `json:"PoliticsVideos,omitempty" xml:"PoliticsVideos,omitempty" type:"Struct"`
	PoliticsImages *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImages `json:"PoliticsImages,omitempty" xml:"PoliticsImages,omitempty" type:"Struct"`
	PoliticsTexts  *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTexts  `json:"PoliticsTexts,omitempty" xml:"PoliticsTexts,omitempty" type:"Struct"`
	PoliticsAudios *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudios `json:"PoliticsAudios,omitempty" xml:"PoliticsAudios,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResult) SetPoliticsOcrs(v *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrs) *QueryMCJobListResponseBodyJobListJobResultPoliticsResult {
	s.PoliticsOcrs = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResult) SetPoliticsVideos(v *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideos) *QueryMCJobListResponseBodyJobListJobResultPoliticsResult {
	s.PoliticsVideos = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResult) SetPoliticsImages(v *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImages) *QueryMCJobListResponseBodyJobListJobResultPoliticsResult {
	s.PoliticsImages = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResult) SetPoliticsTexts(v *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTexts) *QueryMCJobListResponseBodyJobListJobResultPoliticsResult {
	s.PoliticsTexts = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResult) SetPoliticsAudios(v *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudios) *QueryMCJobListResponseBodyJobListJobResultPoliticsResult {
	s.PoliticsAudios = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrs struct {
	PoliticsOcr []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr `json:"PoliticsOcr,omitempty" xml:"PoliticsOcr,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrs) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrs) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrs) SetPoliticsOcr(v []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrs {
	s.PoliticsOcr = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsOcrsPoliticsOcr {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideos struct {
	PoliticsVideo []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo `json:"PoliticsVideo,omitempty" xml:"PoliticsVideo,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideos) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideos) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideos) SetPoliticsVideo(v []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideos {
	s.PoliticsVideo = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsVideosPoliticsVideo {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImages struct {
	PoliticsImage []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage `json:"PoliticsImage,omitempty" xml:"PoliticsImage,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImages) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImages) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImages) SetPoliticsImage(v []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImages {
	s.PoliticsImage = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Url        *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage) SetUrl(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage {
	s.Url = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsImagesPoliticsImage {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTexts struct {
	PoliticsText []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText `json:"PoliticsText,omitempty" xml:"PoliticsText,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTexts) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTexts) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTexts) SetPoliticsText(v []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTexts {
	s.PoliticsText = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsTextsPoliticsText {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudios struct {
	PoliticsAudio []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio `json:"PoliticsAudio,omitempty" xml:"PoliticsAudio,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudios) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudios) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudios) SetPoliticsAudio(v []*QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudios {
	s.PoliticsAudio = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) SetEndTime(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio {
	s.EndTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) SetStartTime(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio {
	s.StartTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultPoliticsResultPoliticsAudiosPoliticsAudio {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLiveResult struct {
	LiveImages *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImages `json:"LiveImages,omitempty" xml:"LiveImages,omitempty" type:"Struct"`
	LiveVideos *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideos `json:"LiveVideos,omitempty" xml:"LiveVideos,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResult) SetLiveImages(v *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImages) *QueryMCJobListResponseBodyJobListJobResultLiveResult {
	s.LiveImages = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResult) SetLiveVideos(v *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideos) *QueryMCJobListResponseBodyJobListJobResultLiveResult {
	s.LiveVideos = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImages struct {
	LiveImage []*QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage `json:"LiveImage,omitempty" xml:"LiveImage,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImages) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImages) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImages) SetLiveImage(v []*QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImages {
	s.LiveImage = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Url        *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage) SetUrl(v string) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage {
	s.Url = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveImagesLiveImage {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideos struct {
	LiveVideo []*QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo `json:"LiveVideo,omitempty" xml:"LiveVideo,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideos) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideos) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideos) SetLiveVideo(v []*QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideos {
	s.LiveVideo = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultLiveResultLiveVideosLiveVideo {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAbuseResult struct {
	AbuseOcrs   *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrs   `json:"AbuseOcrs,omitempty" xml:"AbuseOcrs,omitempty" type:"Struct"`
	AbuseAudios *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudios `json:"AbuseAudios,omitempty" xml:"AbuseAudios,omitempty" type:"Struct"`
	AbuseTexts  *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTexts  `json:"AbuseTexts,omitempty" xml:"AbuseTexts,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResult) SetAbuseOcrs(v *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrs) *QueryMCJobListResponseBodyJobListJobResultAbuseResult {
	s.AbuseOcrs = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResult) SetAbuseAudios(v *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudios) *QueryMCJobListResponseBodyJobListJobResultAbuseResult {
	s.AbuseAudios = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResult) SetAbuseTexts(v *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTexts) *QueryMCJobListResponseBodyJobListJobResultAbuseResult {
	s.AbuseTexts = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrs struct {
	AbuseOcr []*QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr `json:"AbuseOcr,omitempty" xml:"AbuseOcr,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrs) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrs) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrs) SetAbuseOcr(v []*QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrs {
	s.AbuseOcr = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseOcrsAbuseOcr {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudios struct {
	AbuseAudio []*QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio `json:"AbuseAudio,omitempty" xml:"AbuseAudio,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudios) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudios) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudios) SetAbuseAudio(v []*QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudios {
	s.AbuseAudio = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) SetEndTime(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio {
	s.EndTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) SetStartTime(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio {
	s.StartTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseAudiosAbuseAudio {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTexts struct {
	AbuseText []*QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText `json:"AbuseText,omitempty" xml:"AbuseText,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTexts) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTexts) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTexts) SetAbuseText(v []*QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTexts {
	s.AbuseText = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultAbuseResultAbuseTextsAbuseText {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultSpamResult struct {
	SpamTexts  *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTexts  `json:"SpamTexts,omitempty" xml:"SpamTexts,omitempty" type:"Struct"`
	SpamAudios *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudios `json:"SpamAudios,omitempty" xml:"SpamAudios,omitempty" type:"Struct"`
	SpamOcrs   *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrs   `json:"SpamOcrs,omitempty" xml:"SpamOcrs,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResult) SetSpamTexts(v *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTexts) *QueryMCJobListResponseBodyJobListJobResultSpamResult {
	s.SpamTexts = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResult) SetSpamAudios(v *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudios) *QueryMCJobListResponseBodyJobListJobResultSpamResult {
	s.SpamAudios = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResult) SetSpamOcrs(v *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrs) *QueryMCJobListResponseBodyJobListJobResultSpamResult {
	s.SpamOcrs = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTexts struct {
	SpamText []*QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText `json:"SpamText,omitempty" xml:"SpamText,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTexts) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTexts) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTexts) SetSpamText(v []*QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTexts {
	s.SpamText = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamTextsSpamText {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudios struct {
	SpamAudio []*QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio `json:"SpamAudio,omitempty" xml:"SpamAudio,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudios) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudios) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudios) SetSpamAudio(v []*QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudios {
	s.SpamAudio = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) SetEndTime(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio {
	s.EndTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) SetStartTime(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio {
	s.StartTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamAudiosSpamAudio {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrs struct {
	SpamOcr []*QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr `json:"SpamOcr,omitempty" xml:"SpamOcr,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrs) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrs) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrs) SetSpamOcr(v []*QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrs {
	s.SpamOcr = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultSpamResultSpamOcrsSpamOcr {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultContrabandResult struct {
	ContrabandAudios *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudios `json:"ContrabandAudios,omitempty" xml:"ContrabandAudios,omitempty" type:"Struct"`
	ContrabandOcrs   *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrs   `json:"ContrabandOcrs,omitempty" xml:"ContrabandOcrs,omitempty" type:"Struct"`
	ContrabandTexts  *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTexts  `json:"ContrabandTexts,omitempty" xml:"ContrabandTexts,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResult) SetContrabandAudios(v *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudios) *QueryMCJobListResponseBodyJobListJobResultContrabandResult {
	s.ContrabandAudios = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResult) SetContrabandOcrs(v *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrs) *QueryMCJobListResponseBodyJobListJobResultContrabandResult {
	s.ContrabandOcrs = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResult) SetContrabandTexts(v *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTexts) *QueryMCJobListResponseBodyJobListJobResultContrabandResult {
	s.ContrabandTexts = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudios struct {
	ContrabandAudio []*QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio `json:"ContrabandAudio,omitempty" xml:"ContrabandAudio,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudios) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudios) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudios) SetContrabandAudio(v []*QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudios {
	s.ContrabandAudio = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) SetEndTime(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio {
	s.EndTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) SetStartTime(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio {
	s.StartTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandAudiosContrabandAudio {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrs struct {
	ContrabandOcr []*QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr `json:"ContrabandOcr,omitempty" xml:"ContrabandOcr,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrs) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrs) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrs) SetContrabandOcr(v []*QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrs {
	s.ContrabandOcr = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandOcrsContrabandOcr {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTexts struct {
	ContrabandText []*QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText `json:"ContrabandText,omitempty" xml:"ContrabandText,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTexts) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTexts) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTexts) SetContrabandText(v []*QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTexts {
	s.ContrabandText = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultContrabandResultContrabandTextsContrabandText {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResult struct {
	TerrorismOcrs   *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrs   `json:"TerrorismOcrs,omitempty" xml:"TerrorismOcrs,omitempty" type:"Struct"`
	TerrorismAudios *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudios `json:"TerrorismAudios,omitempty" xml:"TerrorismAudios,omitempty" type:"Struct"`
	TerrorismVideos *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideos `json:"TerrorismVideos,omitempty" xml:"TerrorismVideos,omitempty" type:"Struct"`
	TerrorismTexts  *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTexts  `json:"TerrorismTexts,omitempty" xml:"TerrorismTexts,omitempty" type:"Struct"`
	TerrorismImages *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImages `json:"TerrorismImages,omitempty" xml:"TerrorismImages,omitempty" type:"Struct"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResult) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResult) SetTerrorismOcrs(v *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrs) *QueryMCJobListResponseBodyJobListJobResultTerrorismResult {
	s.TerrorismOcrs = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResult) SetTerrorismAudios(v *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudios) *QueryMCJobListResponseBodyJobListJobResultTerrorismResult {
	s.TerrorismAudios = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResult) SetTerrorismVideos(v *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideos) *QueryMCJobListResponseBodyJobListJobResultTerrorismResult {
	s.TerrorismVideos = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResult) SetTerrorismTexts(v *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTexts) *QueryMCJobListResponseBodyJobListJobResultTerrorismResult {
	s.TerrorismTexts = v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResult) SetTerrorismImages(v *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImages) *QueryMCJobListResponseBodyJobListJobResultTerrorismResult {
	s.TerrorismImages = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrs struct {
	TerrorismOcr []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr `json:"TerrorismOcr,omitempty" xml:"TerrorismOcr,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrs) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrs) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrs) SetTerrorismOcr(v []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrs {
	s.TerrorismOcr = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismOcrsTerrorismOcr {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudios struct {
	TerrorismAudio []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio `json:"TerrorismAudio,omitempty" xml:"TerrorismAudio,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudios) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudios) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudios) SetTerrorismAudio(v []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudios {
	s.TerrorismAudio = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) SetEndTime(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio {
	s.EndTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) SetStartTime(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio {
	s.StartTime = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio {
	s.Text = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismAudiosTerrorismAudio {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideos struct {
	TerrorismVideo []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo `json:"TerrorismVideo,omitempty" xml:"TerrorismVideo,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideos) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideos) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideos) SetTerrorismVideo(v []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideos {
	s.TerrorismVideo = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo struct {
	Time       *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Object     *string `json:"Object,omitempty" xml:"Object,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo) SetTime(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo {
	s.Time = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo) SetObject(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismVideosTerrorismVideo {
	s.Object = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTexts struct {
	TerrorismText []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText `json:"TerrorismText,omitempty" xml:"TerrorismText,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTexts) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTexts) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTexts) SetTerrorismText(v []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTexts {
	s.TerrorismText = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismTextsTerrorismText {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImages struct {
	TerrorismImage []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage `json:"TerrorismImage,omitempty" xml:"TerrorismImage,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImages) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImages) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImages) SetTerrorismImage(v []*QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImages {
	s.TerrorismImage = v
	return s
}

type QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage struct {
	Suggestion *string `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	Score      *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Url        *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage) SetSuggestion(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage {
	s.Suggestion = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage) SetScore(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage {
	s.Score = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage) SetUrl(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage {
	s.Url = &v
	return s
}

func (s *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage) SetText(v string) *QueryMCJobListResponseBodyJobListJobResultTerrorismResultTerrorismImagesTerrorismImage {
	s.Text = &v
	return s
}

type QueryMCJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMCJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryMCJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryMCJobListResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMCJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMCJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMCJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryMCJobListResponse) SetHeaders(v map[string]*string) *QueryMCJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryMCJobListResponse) SetBody(v *QueryMCJobListResponseBody) *QueryMCJobListResponse {
	s.Body = v
	return s
}

type QueryMediaListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaIds             *string `json:"MediaIds,omitempty" xml:"MediaIds,omitempty"`
	IncludePlayList      *bool   `json:"IncludePlayList,omitempty" xml:"IncludePlayList,omitempty"`
	IncludeSnapshotList  *bool   `json:"IncludeSnapshotList,omitempty" xml:"IncludeSnapshotList,omitempty"`
	IncludeMediaInfo     *bool   `json:"IncludeMediaInfo,omitempty" xml:"IncludeMediaInfo,omitempty"`
	IncludeSummaryList   *bool   `json:"IncludeSummaryList,omitempty" xml:"IncludeSummaryList,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMediaListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaListRequest) SetOwnerId(v int64) *QueryMediaListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaListRequest) SetResourceOwnerAccount(v string) *QueryMediaListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaListRequest) SetResourceOwnerId(v int64) *QueryMediaListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaListRequest) SetMediaIds(v string) *QueryMediaListRequest {
	s.MediaIds = &v
	return s
}

func (s *QueryMediaListRequest) SetIncludePlayList(v bool) *QueryMediaListRequest {
	s.IncludePlayList = &v
	return s
}

func (s *QueryMediaListRequest) SetIncludeSnapshotList(v bool) *QueryMediaListRequest {
	s.IncludeSnapshotList = &v
	return s
}

func (s *QueryMediaListRequest) SetIncludeMediaInfo(v bool) *QueryMediaListRequest {
	s.IncludeMediaInfo = &v
	return s
}

func (s *QueryMediaListRequest) SetIncludeSummaryList(v bool) *QueryMediaListRequest {
	s.IncludeSummaryList = &v
	return s
}

func (s *QueryMediaListRequest) SetOwnerAccount(v string) *QueryMediaListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMediaListResponseBody struct {
	NonExistMediaIds *QueryMediaListResponseBodyNonExistMediaIds `json:"NonExistMediaIds,omitempty" xml:"NonExistMediaIds,omitempty" type:"Struct"`
	MediaList        *QueryMediaListResponseBodyMediaList        `json:"MediaList,omitempty" xml:"MediaList,omitempty" type:"Struct"`
	RequestId        *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s QueryMediaListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBody) SetNonExistMediaIds(v *QueryMediaListResponseBodyNonExistMediaIds) *QueryMediaListResponseBody {
	s.NonExistMediaIds = v
	return s
}

func (s *QueryMediaListResponseBody) SetMediaList(v *QueryMediaListResponseBodyMediaList) *QueryMediaListResponseBody {
	s.MediaList = v
	return s
}

func (s *QueryMediaListResponseBody) SetRequestId(v string) *QueryMediaListResponseBody {
	s.RequestId = &v
	return s
}

type QueryMediaListResponseBodyNonExistMediaIds struct {
	MediaId []*string `json:"MediaId,omitempty" xml:"MediaId,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyNonExistMediaIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyNonExistMediaIds) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyNonExistMediaIds) SetMediaId(v []*string) *QueryMediaListResponseBodyNonExistMediaIds {
	s.MediaId = v
	return s
}

type QueryMediaListResponseBodyMediaList struct {
	Media []*QueryMediaListResponseBodyMediaListMedia `json:"Media,omitempty" xml:"Media,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaList) SetMedia(v []*QueryMediaListResponseBodyMediaListMedia) *QueryMediaListResponseBodyMediaList {
	s.Media = v
	return s
}

type QueryMediaListResponseBodyMediaListMedia struct {
	CreationTime *string                                               `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	CateId       *int64                                                `json:"CateId,omitempty" xml:"CateId,omitempty"`
	Height       *string                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	CensorState  *string                                               `json:"CensorState,omitempty" xml:"CensorState,omitempty"`
	Tags         *QueryMediaListResponseBodyMediaListMediaTags         `json:"Tags,omitempty" xml:"Tags,omitempty" type:"Struct"`
	PlayList     *QueryMediaListResponseBodyMediaListMediaPlayList     `json:"PlayList,omitempty" xml:"PlayList,omitempty" type:"Struct"`
	Bitrate      *string                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	MediaId      *string                                               `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	File         *QueryMediaListResponseBodyMediaListMediaFile         `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	SummaryList  *QueryMediaListResponseBodyMediaListMediaSummaryList  `json:"SummaryList,omitempty" xml:"SummaryList,omitempty" type:"Struct"`
	PublishState *string                                               `json:"PublishState,omitempty" xml:"PublishState,omitempty"`
	MediaInfo    *QueryMediaListResponseBodyMediaListMediaMediaInfo    `json:"MediaInfo,omitempty" xml:"MediaInfo,omitempty" type:"Struct"`
	Description  *string                                               `json:"Description,omitempty" xml:"Description,omitempty"`
	Size         *string                                               `json:"Size,omitempty" xml:"Size,omitempty"`
	Width        *string                                               `json:"Width,omitempty" xml:"Width,omitempty"`
	CoverURL     *string                                               `json:"CoverURL,omitempty" xml:"CoverURL,omitempty"`
	SnapshotList *QueryMediaListResponseBodyMediaListMediaSnapshotList `json:"SnapshotList,omitempty" xml:"SnapshotList,omitempty" type:"Struct"`
	RunIdList    *QueryMediaListResponseBodyMediaListMediaRunIdList    `json:"RunIdList,omitempty" xml:"RunIdList,omitempty" type:"Struct"`
	Duration     *string                                               `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps          *string                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Title        *string                                               `json:"Title,omitempty" xml:"Title,omitempty"`
	Format       *string                                               `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMedia) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMedia) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetCreationTime(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetCateId(v int64) *QueryMediaListResponseBodyMediaListMedia {
	s.CateId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetHeight(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Height = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetCensorState(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.CensorState = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetTags(v *QueryMediaListResponseBodyMediaListMediaTags) *QueryMediaListResponseBodyMediaListMedia {
	s.Tags = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetPlayList(v *QueryMediaListResponseBodyMediaListMediaPlayList) *QueryMediaListResponseBodyMediaListMedia {
	s.PlayList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetMediaId(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.MediaId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetFile(v *QueryMediaListResponseBodyMediaListMediaFile) *QueryMediaListResponseBodyMediaListMedia {
	s.File = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetSummaryList(v *QueryMediaListResponseBodyMediaListMediaSummaryList) *QueryMediaListResponseBodyMediaListMedia {
	s.SummaryList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetPublishState(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.PublishState = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetMediaInfo(v *QueryMediaListResponseBodyMediaListMediaMediaInfo) *QueryMediaListResponseBodyMediaListMedia {
	s.MediaInfo = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetDescription(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Description = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetSize(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Size = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetWidth(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Width = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetCoverURL(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.CoverURL = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetSnapshotList(v *QueryMediaListResponseBodyMediaListMediaSnapshotList) *QueryMediaListResponseBodyMediaListMedia {
	s.SnapshotList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetRunIdList(v *QueryMediaListResponseBodyMediaListMediaRunIdList) *QueryMediaListResponseBodyMediaListMedia {
	s.RunIdList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetDuration(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetFps(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Fps = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetTitle(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Title = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMedia) SetFormat(v string) *QueryMediaListResponseBodyMediaListMedia {
	s.Format = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaTags struct {
	Tag []*string `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaTags) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaTags) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaTags) SetTag(v []*string) *QueryMediaListResponseBodyMediaListMediaTags {
	s.Tag = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaPlayList struct {
	Play []*QueryMediaListResponseBodyMediaListMediaPlayListPlay `json:"Play,omitempty" xml:"Play,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaPlayList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaPlayList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayList) SetPlay(v []*QueryMediaListResponseBodyMediaListMediaPlayListPlay) *QueryMediaListResponseBodyMediaListMediaPlayList {
	s.Play = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaPlayListPlay struct {
	Encryption        *string                                                   `json:"Encryption,omitempty" xml:"Encryption,omitempty"`
	Height            *string                                                   `json:"Height,omitempty" xml:"Height,omitempty"`
	Bitrate           *string                                                   `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	File              *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
	MediaWorkflowId   *string                                                   `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	Width             *string                                                   `json:"Width,omitempty" xml:"Width,omitempty"`
	Size              *string                                                   `json:"Size,omitempty" xml:"Size,omitempty"`
	Fps               *string                                                   `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Duration          *string                                                   `json:"Duration,omitempty" xml:"Duration,omitempty"`
	ActivityName      *string                                                   `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	Format            *string                                                   `json:"Format,omitempty" xml:"Format,omitempty"`
	MediaWorkflowName *string                                                   `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaPlayListPlay) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaPlayListPlay) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetEncryption(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Encryption = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetHeight(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Height = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetFile(v *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.File = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetMediaWorkflowId(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetWidth(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Width = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetSize(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Size = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetFps(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Fps = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetDuration(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetActivityName(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetFormat(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.Format = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlay) SetMediaWorkflowName(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlay {
	s.MediaWorkflowName = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaPlayListPlayFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) SetState(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile {
	s.State = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile) SetURL(v string) *QueryMediaListResponseBodyMediaListMediaPlayListPlayFile {
	s.URL = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaFile) SetState(v string) *QueryMediaListResponseBodyMediaListMediaFile {
	s.State = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaFile) SetURL(v string) *QueryMediaListResponseBodyMediaListMediaFile {
	s.URL = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSummaryList struct {
	Summary []*QueryMediaListResponseBodyMediaListMediaSummaryListSummary `json:"Summary,omitempty" xml:"Summary,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryList) SetSummary(v []*QueryMediaListResponseBodyMediaListMediaSummaryListSummary) *QueryMediaListResponseBodyMediaListMediaSummaryList {
	s.Summary = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSummaryListSummary struct {
	Type              *string                                                         `json:"Type,omitempty" xml:"Type,omitempty"`
	MediaWorkflowId   *string                                                         `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	ActivityName      *string                                                         `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	MediaWorkflowName *string                                                         `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	File              *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryListSummary) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryListSummary) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetType(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.Type = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetMediaWorkflowId(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetActivityName(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetMediaWorkflowName(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummary) SetFile(v *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) *QueryMediaListResponseBodyMediaListMediaSummaryListSummary {
	s.File = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) SetState(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile {
	s.State = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile) SetURL(v string) *QueryMediaListResponseBodyMediaListMediaSummaryListSummaryFile {
	s.URL = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfo struct {
	Streams *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format  *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfo) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfo) SetStreams(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) *QueryMediaListResponseBodyMediaListMediaMediaInfo {
	s.Streams = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfo) SetFormat(v *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) *QueryMediaListResponseBodyMediaListMediaMediaInfo {
	s.Format = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreams struct {
	VideoStreamList    *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) SetVideoStreamList(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams {
	s.VideoStreamList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) SetAudioStreamList(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams) SetSubtitleStreamList(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreams {
	s.SubtitleStreamList = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList struct {
	VideoStream []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList) SetVideoStream(v []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream struct {
	Sar            *string                                                                                        `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Height         *string                                                                                        `json:"Height,omitempty" xml:"Height,omitempty"`
	CodecTagString *string                                                                                        `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	NetworkCost    *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Width          *string                                                                                        `json:"Width,omitempty" xml:"Width,omitempty"`
	Index          *string                                                                                        `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                        `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                        `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                        `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Lang           *string                                                                                        `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                        `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	NumFrames      *string                                                                                        `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Rotate         *string                                                                                        `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Bitrate        *string                                                                                        `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	HasBFrames     *string                                                                                        `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                        `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                        `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Dar            *string                                                                                        `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                        `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string                                                                                        `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                        `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                        `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                        `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                        `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetSar(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetLang(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetRotate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetDar(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetFps(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList struct {
	AudioStream []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList) SetAudioStream(v []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetLang(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaMediaInfoFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetStartTime(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.StartTime = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetNumPrograms(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetSize(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.Size = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetNumStreams(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetFormatLongName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetDuration(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.Duration = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetBitrate(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat) SetFormatName(v string) *QueryMediaListResponseBodyMediaListMediaMediaInfoFormat {
	s.FormatName = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSnapshotList struct {
	Snapshot []*QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot `json:"Snapshot,omitempty" xml:"Snapshot,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotList) SetSnapshot(v []*QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) *QueryMediaListResponseBodyMediaListMediaSnapshotList {
	s.Snapshot = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot struct {
	Type              *string                                                           `json:"Type,omitempty" xml:"Type,omitempty"`
	MediaWorkflowId   *string                                                           `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	ActivityName      *string                                                           `json:"ActivityName,omitempty" xml:"ActivityName,omitempty"`
	Count             *string                                                           `json:"Count,omitempty" xml:"Count,omitempty"`
	MediaWorkflowName *string                                                           `json:"MediaWorkflowName,omitempty" xml:"MediaWorkflowName,omitempty"`
	File              *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile `json:"File,omitempty" xml:"File,omitempty" type:"Struct"`
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetType(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.Type = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetMediaWorkflowId(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.MediaWorkflowId = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetActivityName(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.ActivityName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetCount(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.Count = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetMediaWorkflowName(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.MediaWorkflowName = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot) SetFile(v *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshot {
	s.File = v
	return s
}

type QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile struct {
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	URL   *string `json:"URL,omitempty" xml:"URL,omitempty"`
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) SetState(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile {
	s.State = &v
	return s
}

func (s *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile) SetURL(v string) *QueryMediaListResponseBodyMediaListMediaSnapshotListSnapshotFile {
	s.URL = &v
	return s
}

type QueryMediaListResponseBodyMediaListMediaRunIdList struct {
	RunId []*string `json:"RunId,omitempty" xml:"RunId,omitempty" type:"Repeated"`
}

func (s QueryMediaListResponseBodyMediaListMediaRunIdList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponseBodyMediaListMediaRunIdList) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponseBodyMediaListMediaRunIdList) SetRunId(v []*string) *QueryMediaListResponseBodyMediaListMediaRunIdList {
	s.RunId = v
	return s
}

type QueryMediaListResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaListResponse) SetHeaders(v map[string]*string) *QueryMediaListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaListResponse) SetBody(v *QueryMediaListResponseBody) *QueryMediaListResponse {
	s.Body = v
	return s
}

type QueryFpDBDeleteJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryFpDBDeleteJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFpDBDeleteJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryFpDBDeleteJobListRequest) SetOwnerId(v int64) *QueryFpDBDeleteJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFpDBDeleteJobListRequest) SetResourceOwnerAccount(v string) *QueryFpDBDeleteJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFpDBDeleteJobListRequest) SetResourceOwnerId(v int64) *QueryFpDBDeleteJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryFpDBDeleteJobListRequest) SetJobIds(v string) *QueryFpDBDeleteJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryFpDBDeleteJobListRequest) SetOwnerAccount(v string) *QueryFpDBDeleteJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryFpDBDeleteJobListResponseBody struct {
	RequestId         *string                                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	FpDBDeleteJobList *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobList `json:"FpDBDeleteJobList,omitempty" xml:"FpDBDeleteJobList,omitempty" type:"Struct"`
	NonExistIds       *QueryFpDBDeleteJobListResponseBodyNonExistIds       `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryFpDBDeleteJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFpDBDeleteJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFpDBDeleteJobListResponseBody) SetRequestId(v string) *QueryFpDBDeleteJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBody) SetFpDBDeleteJobList(v *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobList) *QueryFpDBDeleteJobListResponseBody {
	s.FpDBDeleteJobList = v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBody) SetNonExistIds(v *QueryFpDBDeleteJobListResponseBodyNonExistIds) *QueryFpDBDeleteJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobList struct {
	FpDBDeleteJob []*QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob `json:"FpDBDeleteJob,omitempty" xml:"FpDBDeleteJob,omitempty" type:"Repeated"`
}

func (s QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobList) GoString() string {
	return s.String()
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobList) SetFpDBDeleteJob(v []*QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobList {
	s.FpDBDeleteJob = v
	return s
}

type QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob struct {
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	FinishTime   *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	DelType      *string `json:"DelType,omitempty" xml:"DelType,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message      *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId   *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	FpDBId       *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) String() string {
	return tea.Prettify(s)
}

func (s QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) GoString() string {
	return s.String()
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetCreationTime(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.CreationTime = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetStatus(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.Status = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetFinishTime(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.FinishTime = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetDelType(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.DelType = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetUserData(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.UserData = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetCode(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.Code = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetMessage(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.Message = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetPipelineId(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.PipelineId = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetFpDBId(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.FpDBId = &v
	return s
}

func (s *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob) SetId(v string) *QueryFpDBDeleteJobListResponseBodyFpDBDeleteJobListFpDBDeleteJob {
	s.Id = &v
	return s
}

type QueryFpDBDeleteJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryFpDBDeleteJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryFpDBDeleteJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryFpDBDeleteJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryFpDBDeleteJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryFpDBDeleteJobListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryFpDBDeleteJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryFpDBDeleteJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFpDBDeleteJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryFpDBDeleteJobListResponse) SetHeaders(v map[string]*string) *QueryFpDBDeleteJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryFpDBDeleteJobListResponse) SetBody(v *QueryFpDBDeleteJobListResponseBody) *QueryFpDBDeleteJobListResponse {
	s.Body = v
	return s
}

type RegisterCustomFaceRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	CategoryId           *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	PersonId             *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
	ImageUrl             *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
}

func (s RegisterCustomFaceRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterCustomFaceRequest) GoString() string {
	return s.String()
}

func (s *RegisterCustomFaceRequest) SetOwnerId(v int64) *RegisterCustomFaceRequest {
	s.OwnerId = &v
	return s
}

func (s *RegisterCustomFaceRequest) SetResourceOwnerAccount(v string) *RegisterCustomFaceRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RegisterCustomFaceRequest) SetResourceOwnerId(v int64) *RegisterCustomFaceRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RegisterCustomFaceRequest) SetOwnerAccount(v string) *RegisterCustomFaceRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RegisterCustomFaceRequest) SetCategoryId(v string) *RegisterCustomFaceRequest {
	s.CategoryId = &v
	return s
}

func (s *RegisterCustomFaceRequest) SetPersonId(v string) *RegisterCustomFaceRequest {
	s.PersonId = &v
	return s
}

func (s *RegisterCustomFaceRequest) SetImageUrl(v string) *RegisterCustomFaceRequest {
	s.ImageUrl = &v
	return s
}

type RegisterCustomFaceResponseBody struct {
	FaceId    *string `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterCustomFaceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterCustomFaceResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterCustomFaceResponseBody) SetFaceId(v string) *RegisterCustomFaceResponseBody {
	s.FaceId = &v
	return s
}

func (s *RegisterCustomFaceResponseBody) SetRequestId(v string) *RegisterCustomFaceResponseBody {
	s.RequestId = &v
	return s
}

type RegisterCustomFaceResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RegisterCustomFaceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RegisterCustomFaceResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterCustomFaceResponse) GoString() string {
	return s.String()
}

func (s *RegisterCustomFaceResponse) SetHeaders(v map[string]*string) *RegisterCustomFaceResponse {
	s.Headers = v
	return s
}

func (s *RegisterCustomFaceResponse) SetBody(v *RegisterCustomFaceResponseBody) *RegisterCustomFaceResponse {
	s.Body = v
	return s
}

type SubmitMediaInfoJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Async                *bool   `json:"Async,omitempty" xml:"Async,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitMediaInfoJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobRequest) SetOwnerId(v int64) *SubmitMediaInfoJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetResourceOwnerAccount(v string) *SubmitMediaInfoJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetResourceOwnerId(v int64) *SubmitMediaInfoJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetInput(v string) *SubmitMediaInfoJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetUserData(v string) *SubmitMediaInfoJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetPipelineId(v string) *SubmitMediaInfoJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetAsync(v bool) *SubmitMediaInfoJobRequest {
	s.Async = &v
	return s
}

func (s *SubmitMediaInfoJobRequest) SetOwnerAccount(v string) *SubmitMediaInfoJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitMediaInfoJobResponseBody struct {
	MediaInfoJob *SubmitMediaInfoJobResponseBodyMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Struct"`
	RequestId    *string                                     `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitMediaInfoJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBody) SetMediaInfoJob(v *SubmitMediaInfoJobResponseBodyMediaInfoJob) *SubmitMediaInfoJobResponseBody {
	s.MediaInfoJob = v
	return s
}

func (s *SubmitMediaInfoJobResponseBody) SetRequestId(v string) *SubmitMediaInfoJobResponseBody {
	s.RequestId = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJob struct {
	CreationTime     *string                                                     `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State            *string                                                     `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                     `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData         *string                                                     `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                     `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                     `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId       *string                                                     `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Async            *bool                                                       `json:"Async,omitempty" xml:"Async,omitempty"`
	Input            *SubmitMediaInfoJobResponseBodyMediaInfoJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MNSMessageResult *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Properties       *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties       `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJob) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetCreationTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetState(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.State = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetJobId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetUserData(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.UserData = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetCode(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Code = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetMessage(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Message = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetPipelineId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetAsync(v bool) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Async = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetInput(v *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Input = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetMNSMessageResult(v *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJob) SetProperties(v *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) *SubmitMediaInfoJobResponseBodyMediaInfoJob {
	s.Properties = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetObject(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Object = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetLocation(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Location = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobInput) SetBucket(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobInput {
	s.Bucket = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) SetMessageId(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) SetErrorMessage(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult) SetErrorCode(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobProperties struct {
	Width      *string                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                      `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                      `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                      `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                      `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Width = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Fps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetFileFormat(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.FileFormat = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetStreams(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Streams = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetFormat(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.Format = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties) SetFileSize(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobProperties {
	s.FileSize = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams struct {
	VideoStreamList    *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) SetVideoStreamList(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) SetAudioStreamList(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams) SetSubtitleStreamList(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList struct {
	VideoStream []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList) SetVideoStream(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream struct {
	Sar            *string                                                                                           `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Height         *string                                                                                           `json:"Height,omitempty" xml:"Height,omitempty"`
	CodecTagString *string                                                                                           `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	NetworkCost    *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Width          *string                                                                                           `json:"Width,omitempty" xml:"Width,omitempty"`
	Index          *string                                                                                           `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                           `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                           `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                           `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Lang           *string                                                                                           `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                           `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	NumFrames      *string                                                                                           `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Rotate         *string                                                                                           `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Bitrate        *string                                                                                           `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	HasBFrames     *string                                                                                           `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                           `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                           `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Dar            *string                                                                                           `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                           `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string                                                                                           `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                           `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                           `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                           `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                           `json:"Level,omitempty" xml:"Level,omitempty"`
	ColorRange     *string                                                                                           `json:"ColorRange,omitempty" xml:"ColorRange,omitempty"`
	ColorTransfer  *string                                                                                           `json:"ColorTransfer,omitempty" xml:"ColorTransfer,omitempty"`
	ColorPrimaries *string                                                                                           `json:"ColorPrimaries,omitempty" xml:"ColorPrimaries,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetRotate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetColorRange(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.ColorRange = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetColorTransfer(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.ColorTransfer = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetColorPrimaries(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.ColorPrimaries = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList struct {
	AudioStream []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList) SetAudioStream(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetTimebase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Timebase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTag(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTimeBase(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTagString(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTagString = &v
	return s
}

type SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetStartTime(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetNumPrograms(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetSize(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.Size = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetNumStreams(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetFormatLongName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetDuration(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetBitrate(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat) SetFormatName(v string) *SubmitMediaInfoJobResponseBodyMediaInfoJobPropertiesFormat {
	s.FormatName = &v
	return s
}

type SubmitMediaInfoJobResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitMediaInfoJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMediaInfoJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaInfoJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaInfoJobResponse) SetHeaders(v map[string]*string) *SubmitMediaInfoJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaInfoJobResponse) SetBody(v *SubmitMediaInfoJobResponseBody) *SubmitMediaInfoJobResponse {
	s.Body = v
	return s
}

type QueryPornJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryPornJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryPornJobListRequest) SetOwnerId(v int64) *QueryPornJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPornJobListRequest) SetResourceOwnerAccount(v string) *QueryPornJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPornJobListRequest) SetResourceOwnerId(v int64) *QueryPornJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryPornJobListRequest) SetJobIds(v string) *QueryPornJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryPornJobListRequest) SetOwnerAccount(v string) *QueryPornJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryPornJobListResponseBody struct {
	RequestId   *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PornJobList *QueryPornJobListResponseBodyPornJobList `json:"PornJobList,omitempty" xml:"PornJobList,omitempty" type:"Struct"`
	NonExistIds *QueryPornJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryPornJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBody) SetRequestId(v string) *QueryPornJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPornJobListResponseBody) SetPornJobList(v *QueryPornJobListResponseBodyPornJobList) *QueryPornJobListResponseBody {
	s.PornJobList = v
	return s
}

func (s *QueryPornJobListResponseBody) SetNonExistIds(v *QueryPornJobListResponseBodyNonExistIds) *QueryPornJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryPornJobListResponseBodyPornJobList struct {
	PornJob []*QueryPornJobListResponseBodyPornJobListPornJob `json:"PornJob,omitempty" xml:"PornJob,omitempty" type:"Repeated"`
}

func (s QueryPornJobListResponseBodyPornJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobList) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobList) SetPornJob(v []*QueryPornJobListResponseBodyPornJobListPornJob) *QueryPornJobListResponseBodyPornJobList {
	s.PornJob = v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJob struct {
	CreationTime     *string                                                         `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	PornConfig       *QueryPornJobListResponseBodyPornJobListPornJobPornConfig       `json:"PornConfig,omitempty" xml:"PornConfig,omitempty" type:"Struct"`
	State            *string                                                         `json:"State,omitempty" xml:"State,omitempty"`
	UserData         *string                                                         `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	CensorPornResult *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult `json:"CensorPornResult,omitempty" xml:"CensorPornResult,omitempty" type:"Struct"`
	PipelineId       *string                                                         `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input            *QueryPornJobListResponseBodyPornJobListPornJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id               *string                                                         `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJob) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJob) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetCreationTime(v string) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.CreationTime = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetPornConfig(v *QueryPornJobListResponseBodyPornJobListPornJobPornConfig) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.PornConfig = v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetState(v string) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.State = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetUserData(v string) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.UserData = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetCode(v string) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.Code = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetMessage(v string) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.Message = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetCensorPornResult(v *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.CensorPornResult = v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetPipelineId(v string) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.PipelineId = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetInput(v *QueryPornJobListResponseBodyPornJobListPornJobInput) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.Input = v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJob) SetId(v string) *QueryPornJobListResponseBodyPornJobListPornJob {
	s.Id = &v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJobPornConfig struct {
	Interval   *string                                                             `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OutputFile *QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	BizType    *string                                                             `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJobPornConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJobPornConfig) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobPornConfig) SetInterval(v string) *QueryPornJobListResponseBodyPornJobListPornJobPornConfig {
	s.Interval = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobPornConfig) SetOutputFile(v *QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile) *QueryPornJobListResponseBodyPornJobListPornJobPornConfig {
	s.OutputFile = v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobPornConfig) SetBizType(v string) *QueryPornJobListResponseBodyPornJobListPornJobPornConfig {
	s.BizType = &v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile) SetObject(v string) *QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile) SetLocation(v string) *QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile) SetBucket(v string) *QueryPornJobListResponseBodyPornJobListPornJobPornConfigOutputFile {
	s.Bucket = &v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult struct {
	PornCounterList *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterList `json:"PornCounterList,omitempty" xml:"PornCounterList,omitempty" type:"Struct"`
	Suggestion      *string                                                                        `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	AverageScore    *string                                                                        `json:"AverageScore,omitempty" xml:"AverageScore,omitempty"`
	PornTopList     *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopList     `json:"PornTopList,omitempty" xml:"PornTopList,omitempty" type:"Struct"`
	Label           *string                                                                        `json:"Label,omitempty" xml:"Label,omitempty"`
	MaxScore        *string                                                                        `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) SetPornCounterList(v *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterList) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult {
	s.PornCounterList = v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) SetSuggestion(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult {
	s.Suggestion = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) SetAverageScore(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult {
	s.AverageScore = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) SetPornTopList(v *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopList) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult {
	s.PornTopList = v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) SetLabel(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult {
	s.Label = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult) SetMaxScore(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResult {
	s.MaxScore = &v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterList struct {
	Counter []*QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter `json:"Counter,omitempty" xml:"Counter,omitempty" type:"Repeated"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterList) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterList) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterList) SetCounter(v []*QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterList {
	s.Counter = v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter struct {
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Count *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter) SetLabel(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter {
	s.Label = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter) SetCount(v int32) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornCounterListCounter {
	s.Count = &v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopList struct {
	Top []*QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop `json:"Top,omitempty" xml:"Top,omitempty" type:"Repeated"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopList) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopList) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopList) SetTop(v []*QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopList {
	s.Top = v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop struct {
	Index     *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Score     *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Object    *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Label     *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop) SetIndex(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop {
	s.Index = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop) SetScore(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop {
	s.Score = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop) SetTimestamp(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop {
	s.Timestamp = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop) SetObject(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop {
	s.Object = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop) SetLabel(v string) *QueryPornJobListResponseBodyPornJobListPornJobCensorPornResultPornTopListTop {
	s.Label = &v
	return s
}

type QueryPornJobListResponseBodyPornJobListPornJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryPornJobListResponseBodyPornJobListPornJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyPornJobListPornJobInput) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobInput) SetObject(v string) *QueryPornJobListResponseBodyPornJobListPornJobInput {
	s.Object = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobInput) SetLocation(v string) *QueryPornJobListResponseBodyPornJobListPornJobInput {
	s.Location = &v
	return s
}

func (s *QueryPornJobListResponseBodyPornJobListPornJobInput) SetBucket(v string) *QueryPornJobListResponseBodyPornJobListPornJobInput {
	s.Bucket = &v
	return s
}

type QueryPornJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryPornJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryPornJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryPornJobListResponse struct {
	Headers map[string]*string            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryPornJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPornJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPornJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryPornJobListResponse) SetHeaders(v map[string]*string) *QueryPornJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryPornJobListResponse) SetBody(v *QueryPornJobListResponseBody) *QueryPornJobListResponse {
	s.Body = v
	return s
}

type UpdateCategoryNameRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	CateId               *string `json:"CateId,omitempty" xml:"CateId,omitempty"`
	CateName             *string `json:"CateName,omitempty" xml:"CateName,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateCategoryNameRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryNameRequest) GoString() string {
	return s.String()
}

func (s *UpdateCategoryNameRequest) SetOwnerId(v int64) *UpdateCategoryNameRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetResourceOwnerAccount(v string) *UpdateCategoryNameRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetResourceOwnerId(v int64) *UpdateCategoryNameRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetCateId(v string) *UpdateCategoryNameRequest {
	s.CateId = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetCateName(v string) *UpdateCategoryNameRequest {
	s.CateName = &v
	return s
}

func (s *UpdateCategoryNameRequest) SetOwnerAccount(v string) *UpdateCategoryNameRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateCategoryNameResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s UpdateCategoryNameResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryNameResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCategoryNameResponseBody) SetRequestId(v string) *UpdateCategoryNameResponseBody {
	s.RequestId = &v
	return s
}

type UpdateCategoryNameResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateCategoryNameResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCategoryNameResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCategoryNameResponse) GoString() string {
	return s.String()
}

func (s *UpdateCategoryNameResponse) SetHeaders(v map[string]*string) *UpdateCategoryNameResponse {
	s.Headers = v
	return s
}

func (s *UpdateCategoryNameResponse) SetBody(v *UpdateCategoryNameResponseBody) *UpdateCategoryNameResponse {
	s.Body = v
	return s
}

type DeleteMediaWorkflowRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s DeleteMediaWorkflowRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaWorkflowRequest) GoString() string {
	return s.String()
}

func (s *DeleteMediaWorkflowRequest) SetOwnerId(v int64) *DeleteMediaWorkflowRequest {
	s.OwnerId = &v
	return s
}

func (s *DeleteMediaWorkflowRequest) SetResourceOwnerAccount(v string) *DeleteMediaWorkflowRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *DeleteMediaWorkflowRequest) SetResourceOwnerId(v int64) *DeleteMediaWorkflowRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *DeleteMediaWorkflowRequest) SetMediaWorkflowId(v string) *DeleteMediaWorkflowRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *DeleteMediaWorkflowRequest) SetOwnerAccount(v string) *DeleteMediaWorkflowRequest {
	s.OwnerAccount = &v
	return s
}

type DeleteMediaWorkflowResponseBody struct {
	RequestId     *string                                       `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MediaWorkflow *DeleteMediaWorkflowResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
}

func (s DeleteMediaWorkflowResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaWorkflowResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteMediaWorkflowResponseBody) SetRequestId(v string) *DeleteMediaWorkflowResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBody) SetMediaWorkflow(v *DeleteMediaWorkflowResponseBodyMediaWorkflow) *DeleteMediaWorkflowResponseBody {
	s.MediaWorkflow = v
	return s
}

type DeleteMediaWorkflowResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s DeleteMediaWorkflowResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaWorkflowResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetCreationTime(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetState(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetName(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *DeleteMediaWorkflowResponseBodyMediaWorkflow) SetTopology(v string) *DeleteMediaWorkflowResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type DeleteMediaWorkflowResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *DeleteMediaWorkflowResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteMediaWorkflowResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteMediaWorkflowResponse) GoString() string {
	return s.String()
}

func (s *DeleteMediaWorkflowResponse) SetHeaders(v map[string]*string) *DeleteMediaWorkflowResponse {
	s.Headers = v
	return s
}

func (s *DeleteMediaWorkflowResponse) SetBody(v *DeleteMediaWorkflowResponseBody) *DeleteMediaWorkflowResponse {
	s.Body = v
	return s
}

type QueryMcuJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
}

func (s QueryMcuJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobRequest) GoString() string {
	return s.String()
}

func (s *QueryMcuJobRequest) SetOwnerId(v int64) *QueryMcuJobRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMcuJobRequest) SetResourceOwnerAccount(v string) *QueryMcuJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMcuJobRequest) SetResourceOwnerId(v int64) *QueryMcuJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMcuJobRequest) SetOwnerAccount(v string) *QueryMcuJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *QueryMcuJobRequest) SetJobIds(v string) *QueryMcuJobRequest {
	s.JobIds = &v
	return s
}

type QueryMcuJobResponseBody struct {
	NonExistJobIds *QueryMcuJobResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobResult      *QueryMcuJobResponseBodyJobResult      `json:"JobResult,omitempty" xml:"JobResult,omitempty" type:"Struct"`
}

func (s QueryMcuJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBody) SetNonExistJobIds(v *QueryMcuJobResponseBodyNonExistJobIds) *QueryMcuJobResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *QueryMcuJobResponseBody) SetRequestId(v string) *QueryMcuJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMcuJobResponseBody) SetJobResult(v *QueryMcuJobResponseBodyJobResult) *QueryMcuJobResponseBody {
	s.JobResult = v
	return s
}

type QueryMcuJobResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyNonExistJobIds) SetString_(v []*string) *QueryMcuJobResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type QueryMcuJobResponseBodyJobResult struct {
	Job []*QueryMcuJobResponseBodyJobResultJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResult) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResult) SetJob(v []*QueryMcuJobResponseBodyJobResultJob) *QueryMcuJobResponseBodyJobResult {
	s.Job = v
	return s
}

type QueryMcuJobResponseBodyJobResultJob struct {
	TagResult      *QueryMcuJobResponseBodyJobResultJobTagResult      `json:"TagResult,omitempty" xml:"TagResult,omitempty" type:"Struct"`
	JobId          *string                                            `json:"JobId,omitempty" xml:"JobId,omitempty"`
	OcrResult      *QueryMcuJobResponseBodyJobResultJobOcrResult      `json:"OcrResult,omitempty" xml:"OcrResult,omitempty" type:"Struct"`
	Template       *string                                            `json:"Template,omitempty" xml:"Template,omitempty"`
	UserData       *string                                            `json:"UserData,omitempty" xml:"UserData,omitempty"`
	SubTaskInfo    *QueryMcuJobResponseBodyJobResultJobSubTaskInfo    `json:"SubTaskInfo,omitempty" xml:"SubTaskInfo,omitempty" type:"Struct"`
	CategoryResult *QueryMcuJobResponseBodyJobResultJobCategoryResult `json:"CategoryResult,omitempty" xml:"CategoryResult,omitempty" type:"Struct"`
	FaceResult     *QueryMcuJobResponseBodyJobResultJobFaceResult     `json:"FaceResult,omitempty" xml:"FaceResult,omitempty" type:"Struct"`
	TemplateId     *string                                            `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Input          *QueryMcuJobResponseBodyJobResultJobInput          `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	AsrResult      *QueryMcuJobResponseBodyJobResultJobAsrResult      `json:"AsrResult,omitempty" xml:"AsrResult,omitempty" type:"Struct"`
}

func (s QueryMcuJobResponseBodyJobResultJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJob) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetTagResult(v *QueryMcuJobResponseBodyJobResultJobTagResult) *QueryMcuJobResponseBodyJobResultJob {
	s.TagResult = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetJobId(v string) *QueryMcuJobResponseBodyJobResultJob {
	s.JobId = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetOcrResult(v *QueryMcuJobResponseBodyJobResultJobOcrResult) *QueryMcuJobResponseBodyJobResultJob {
	s.OcrResult = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetTemplate(v string) *QueryMcuJobResponseBodyJobResultJob {
	s.Template = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetUserData(v string) *QueryMcuJobResponseBodyJobResultJob {
	s.UserData = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetSubTaskInfo(v *QueryMcuJobResponseBodyJobResultJobSubTaskInfo) *QueryMcuJobResponseBodyJobResultJob {
	s.SubTaskInfo = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetCategoryResult(v *QueryMcuJobResponseBodyJobResultJobCategoryResult) *QueryMcuJobResponseBodyJobResultJob {
	s.CategoryResult = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetFaceResult(v *QueryMcuJobResponseBodyJobResultJobFaceResult) *QueryMcuJobResponseBodyJobResultJob {
	s.FaceResult = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetTemplateId(v string) *QueryMcuJobResponseBodyJobResultJob {
	s.TemplateId = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetInput(v *QueryMcuJobResponseBodyJobResultJobInput) *QueryMcuJobResponseBodyJobResultJob {
	s.Input = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJob) SetAsrResult(v *QueryMcuJobResponseBodyJobResultJobAsrResult) *QueryMcuJobResponseBodyJobResultJob {
	s.AsrResult = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobTagResult struct {
	Tag []*QueryMcuJobResponseBodyJobResultJobTagResultTag `json:"Tag,omitempty" xml:"Tag,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResultJobTagResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobTagResult) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResult) SetTag(v []*QueryMcuJobResponseBodyJobResultJobTagResultTag) *QueryMcuJobResponseBodyJobResultJobTagResult {
	s.Tag = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobTagResultTag struct {
	Time          *string                                                       `json:"Time,omitempty" xml:"Time,omitempty"`
	ImageUrl      *string                                                       `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	FrameTagInfos *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfos `json:"FrameTagInfos,omitempty" xml:"FrameTagInfos,omitempty" type:"Struct"`
	ImageId       *string                                                       `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobTagResultTag) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobTagResultTag) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResultTag) SetTime(v string) *QueryMcuJobResponseBodyJobResultJobTagResultTag {
	s.Time = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResultTag) SetImageUrl(v string) *QueryMcuJobResponseBodyJobResultJobTagResultTag {
	s.ImageUrl = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResultTag) SetFrameTagInfos(v *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfos) *QueryMcuJobResponseBodyJobResultJobTagResultTag {
	s.FrameTagInfos = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResultTag) SetImageId(v string) *QueryMcuJobResponseBodyJobResultJobTagResultTag {
	s.ImageId = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfos struct {
	FrameTagInfo []*QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo `json:"FrameTagInfo,omitempty" xml:"FrameTagInfo,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfos) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfos) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfos) SetFrameTagInfo(v []*QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo) *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfos {
	s.FrameTagInfo = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo struct {
	Score    *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	Tag      *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo) SetScore(v string) *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo {
	s.Score = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo) SetCategory(v string) *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo {
	s.Category = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo) SetTag(v string) *QueryMcuJobResponseBodyJobResultJobTagResultTagFrameTagInfosFrameTagInfo {
	s.Tag = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobOcrResult struct {
	Ocr []*QueryMcuJobResponseBodyJobResultJobOcrResultOcr `json:"Ocr,omitempty" xml:"Ocr,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResultJobOcrResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobOcrResult) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobOcrResult) SetOcr(v []*QueryMcuJobResponseBodyJobResultJobOcrResultOcr) *QueryMcuJobResponseBodyJobResultJobOcrResult {
	s.Ocr = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobOcrResultOcr struct {
	Time     *string `json:"Time,omitempty" xml:"Time,omitempty"`
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	OcrText  *string `json:"OcrText,omitempty" xml:"OcrText,omitempty"`
	ImageId  *string `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobOcrResultOcr) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobOcrResultOcr) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobOcrResultOcr) SetTime(v string) *QueryMcuJobResponseBodyJobResultJobOcrResultOcr {
	s.Time = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobOcrResultOcr) SetImageUrl(v string) *QueryMcuJobResponseBodyJobResultJobOcrResultOcr {
	s.ImageUrl = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobOcrResultOcr) SetOcrText(v string) *QueryMcuJobResponseBodyJobResultJobOcrResultOcr {
	s.OcrText = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobOcrResultOcr) SetImageId(v string) *QueryMcuJobResponseBodyJobResultJobOcrResultOcr {
	s.ImageId = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobSubTaskInfo struct {
	SubTask []*QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask `json:"SubTask,omitempty" xml:"SubTask,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResultJobSubTaskInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobSubTaskInfo) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobSubTaskInfo) SetSubTask(v []*QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask) *QueryMcuJobResponseBodyJobResultJobSubTaskInfo {
	s.SubTask = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask struct {
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Code    *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask) SetType(v string) *QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask {
	s.Type = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask) SetCode(v string) *QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask {
	s.Code = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask) SetMessage(v string) *QueryMcuJobResponseBodyJobResultJobSubTaskInfoSubTask {
	s.Message = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobCategoryResult struct {
	Categories *QueryMcuJobResponseBodyJobResultJobCategoryResultCategories `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Struct"`
	Details    *string                                                      `json:"Details,omitempty" xml:"Details,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobCategoryResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobCategoryResult) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobCategoryResult) SetCategories(v *QueryMcuJobResponseBodyJobResultJobCategoryResultCategories) *QueryMcuJobResponseBodyJobResultJobCategoryResult {
	s.Categories = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobCategoryResult) SetDetails(v string) *QueryMcuJobResponseBodyJobResultJobCategoryResult {
	s.Details = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobCategoryResultCategories struct {
	Category []*QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResultJobCategoryResultCategories) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobCategoryResultCategories) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobCategoryResultCategories) SetCategory(v []*QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory) *QueryMcuJobResponseBodyJobResultJobCategoryResultCategories {
	s.Category = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory struct {
	Score *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory) SetScore(v string) *QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory {
	s.Score = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory) SetLabel(v string) *QueryMcuJobResponseBodyJobResultJobCategoryResultCategoriesCategory {
	s.Label = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobFaceResult struct {
	Face []*QueryMcuJobResponseBodyJobResultJobFaceResultFace `json:"Face,omitempty" xml:"Face,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResultJobFaceResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobFaceResult) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResult) SetFace(v []*QueryMcuJobResponseBodyJobResultJobFaceResultFace) *QueryMcuJobResponseBodyJobResultJobFaceResult {
	s.Face = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobFaceResultFace struct {
	Time        *string                                                       `json:"Time,omitempty" xml:"Time,omitempty"`
	ImageUrl    *string                                                       `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	Celebrities *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebrities `json:"Celebrities,omitempty" xml:"Celebrities,omitempty" type:"Struct"`
	ImageId     *string                                                       `json:"ImageId,omitempty" xml:"ImageId,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobFaceResultFace) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobFaceResultFace) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResultFace) SetTime(v string) *QueryMcuJobResponseBodyJobResultJobFaceResultFace {
	s.Time = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResultFace) SetImageUrl(v string) *QueryMcuJobResponseBodyJobResultJobFaceResultFace {
	s.ImageUrl = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResultFace) SetCelebrities(v *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebrities) *QueryMcuJobResponseBodyJobResultJobFaceResultFace {
	s.Celebrities = v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResultFace) SetImageId(v string) *QueryMcuJobResponseBodyJobResultJobFaceResultFace {
	s.ImageId = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebrities struct {
	Celebrity []*QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity `json:"Celebrity,omitempty" xml:"Celebrity,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebrities) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebrities) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebrities) SetCelebrity(v []*QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity) *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebrities {
	s.Celebrity = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity struct {
	Score  *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity) SetScore(v string) *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity {
	s.Score = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity) SetName(v string) *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity {
	s.Name = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity) SetTarget(v string) *QueryMcuJobResponseBodyJobResultJobFaceResultFaceCelebritiesCelebrity {
	s.Target = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobInput) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobInput) SetObject(v string) *QueryMcuJobResponseBodyJobResultJobInput {
	s.Object = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobInput) SetLocation(v string) *QueryMcuJobResponseBodyJobResultJobInput {
	s.Location = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobInput) SetBucket(v string) *QueryMcuJobResponseBodyJobResultJobInput {
	s.Bucket = &v
	return s
}

type QueryMcuJobResponseBodyJobResultJobAsrResult struct {
	Duration    *string                                                  `json:"Duration,omitempty" xml:"Duration,omitempty"`
	AsrTextList *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextList `json:"AsrTextList,omitempty" xml:"AsrTextList,omitempty" type:"Struct"`
}

func (s QueryMcuJobResponseBodyJobResultJobAsrResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobAsrResult) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobAsrResult) SetDuration(v string) *QueryMcuJobResponseBodyJobResultJobAsrResult {
	s.Duration = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobAsrResult) SetAsrTextList(v *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextList) *QueryMcuJobResponseBodyJobResultJobAsrResult {
	s.AsrTextList = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextList struct {
	AsrText []*QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText `json:"AsrText,omitempty" xml:"AsrText,omitempty" type:"Repeated"`
}

func (s QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextList) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextList) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextList) SetAsrText(v []*QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText) *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextList {
	s.AsrText = v
	return s
}

type QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText struct {
	EndTime    *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime  *int32  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	ChannelId  *string `json:"ChannelId,omitempty" xml:"ChannelId,omitempty"`
	Text       *string `json:"Text,omitempty" xml:"Text,omitempty"`
	SpeechRate *string `json:"SpeechRate,omitempty" xml:"SpeechRate,omitempty"`
}

func (s QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText) SetEndTime(v string) *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText {
	s.EndTime = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText) SetStartTime(v int32) *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText {
	s.StartTime = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText) SetChannelId(v string) *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText {
	s.ChannelId = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText) SetText(v string) *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText {
	s.Text = &v
	return s
}

func (s *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText) SetSpeechRate(v string) *QueryMcuJobResponseBodyJobResultJobAsrResultAsrTextListAsrText {
	s.SpeechRate = &v
	return s
}

type QueryMcuJobResponse struct {
	Headers map[string]*string       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMcuJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMcuJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMcuJobResponse) GoString() string {
	return s.String()
}

func (s *QueryMcuJobResponse) SetHeaders(v map[string]*string) *QueryMcuJobResponse {
	s.Headers = v
	return s
}

func (s *QueryMcuJobResponse) SetBody(v *QueryMcuJobResponseBody) *QueryMcuJobResponse {
	s.Body = v
	return s
}

type ListCoverPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageNumber           *int64  `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ListCoverPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCoverPipelineRequest) GoString() string {
	return s.String()
}

func (s *ListCoverPipelineRequest) SetOwnerId(v int64) *ListCoverPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *ListCoverPipelineRequest) SetResourceOwnerAccount(v string) *ListCoverPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListCoverPipelineRequest) SetResourceOwnerId(v int64) *ListCoverPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListCoverPipelineRequest) SetPageSize(v int64) *ListCoverPipelineRequest {
	s.PageSize = &v
	return s
}

func (s *ListCoverPipelineRequest) SetPageNumber(v int64) *ListCoverPipelineRequest {
	s.PageNumber = &v
	return s
}

func (s *ListCoverPipelineRequest) SetState(v string) *ListCoverPipelineRequest {
	s.State = &v
	return s
}

func (s *ListCoverPipelineRequest) SetOwnerAccount(v string) *ListCoverPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type ListCoverPipelineResponseBody struct {
	TotalCount   *int64                                     `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	PageSize     *int64                                     `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PageNumber   *int64                                     `json:"PageNumber,omitempty" xml:"PageNumber,omitempty"`
	PipelineList *ListCoverPipelineResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
}

func (s ListCoverPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCoverPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *ListCoverPipelineResponseBody) SetTotalCount(v int64) *ListCoverPipelineResponseBody {
	s.TotalCount = &v
	return s
}

func (s *ListCoverPipelineResponseBody) SetPageSize(v int64) *ListCoverPipelineResponseBody {
	s.PageSize = &v
	return s
}

func (s *ListCoverPipelineResponseBody) SetRequestId(v string) *ListCoverPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCoverPipelineResponseBody) SetPageNumber(v int64) *ListCoverPipelineResponseBody {
	s.PageNumber = &v
	return s
}

func (s *ListCoverPipelineResponseBody) SetPipelineList(v *ListCoverPipelineResponseBodyPipelineList) *ListCoverPipelineResponseBody {
	s.PipelineList = v
	return s
}

type ListCoverPipelineResponseBodyPipelineList struct {
	Pipeline []*ListCoverPipelineResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s ListCoverPipelineResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s ListCoverPipelineResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *ListCoverPipelineResponseBodyPipelineList) SetPipeline(v []*ListCoverPipelineResponseBodyPipelineListPipeline) *ListCoverPipelineResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type ListCoverPipelineResponseBodyPipelineListPipeline struct {
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	QuotaNum     *int32  `json:"quotaNum,omitempty" xml:"quotaNum,omitempty"`
	UserId       *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	NotifyConfig *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	ExtendConfig *string `json:"ExtendConfig,omitempty" xml:"ExtendConfig,omitempty"`
	Priority     *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Role         *string `json:"Role,omitempty" xml:"Role,omitempty"`
	Name         *string `json:"Name,omitempty" xml:"Name,omitempty"`
	PipelineId   *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	QuotaUsed    *int32  `json:"quotaUsed,omitempty" xml:"quotaUsed,omitempty"`
}

func (s ListCoverPipelineResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s ListCoverPipelineResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetState(v string) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetQuotaNum(v int32) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.QuotaNum = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetUserId(v int64) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.UserId = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetNotifyConfig(v string) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.NotifyConfig = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetExtendConfig(v string) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.ExtendConfig = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetPriority(v string) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetRole(v string) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.Role = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetName(v string) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetPipelineId(v string) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.PipelineId = &v
	return s
}

func (s *ListCoverPipelineResponseBodyPipelineListPipeline) SetQuotaUsed(v int32) *ListCoverPipelineResponseBodyPipelineListPipeline {
	s.QuotaUsed = &v
	return s
}

type ListCoverPipelineResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCoverPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCoverPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCoverPipelineResponse) GoString() string {
	return s.String()
}

func (s *ListCoverPipelineResponse) SetHeaders(v map[string]*string) *ListCoverPipelineResponse {
	s.Headers = v
	return s
}

func (s *ListCoverPipelineResponse) SetBody(v *ListCoverPipelineResponseBody) *ListCoverPipelineResponse {
	s.Body = v
	return s
}

type SubmitBeautifyJobsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	BeautifyConfig       *string `json:"BeautifyConfig,omitempty" xml:"BeautifyConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Async                *bool   `json:"Async,omitempty" xml:"Async,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitBeautifyJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsRequest) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsRequest) SetOwnerId(v int64) *SubmitBeautifyJobsRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitBeautifyJobsRequest) SetResourceOwnerAccount(v string) *SubmitBeautifyJobsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitBeautifyJobsRequest) SetResourceOwnerId(v int64) *SubmitBeautifyJobsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitBeautifyJobsRequest) SetBeautifyConfig(v string) *SubmitBeautifyJobsRequest {
	s.BeautifyConfig = &v
	return s
}

func (s *SubmitBeautifyJobsRequest) SetUserData(v string) *SubmitBeautifyJobsRequest {
	s.UserData = &v
	return s
}

func (s *SubmitBeautifyJobsRequest) SetPipelineId(v string) *SubmitBeautifyJobsRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitBeautifyJobsRequest) SetAsync(v bool) *SubmitBeautifyJobsRequest {
	s.Async = &v
	return s
}

func (s *SubmitBeautifyJobsRequest) SetOwnerAccount(v string) *SubmitBeautifyJobsRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitBeautifyJobsResponseBody struct {
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList   *SubmitBeautifyJobsResponseBodyJobList `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
}

func (s SubmitBeautifyJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsResponseBody) SetRequestId(v string) *SubmitBeautifyJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBody) SetJobList(v *SubmitBeautifyJobsResponseBodyJobList) *SubmitBeautifyJobsResponseBody {
	s.JobList = v
	return s
}

type SubmitBeautifyJobsResponseBodyJobList struct {
	Job []*SubmitBeautifyJobsResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s SubmitBeautifyJobsResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsResponseBodyJobList) SetJob(v []*SubmitBeautifyJobsResponseBodyJobListJob) *SubmitBeautifyJobsResponseBodyJobList {
	s.Job = v
	return s
}

type SubmitBeautifyJobsResponseBodyJobListJob struct {
	CreationTime     *string                                                   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	BeautifyConfig   *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfig   `json:"BeautifyConfig,omitempty" xml:"BeautifyConfig,omitempty" type:"Struct"`
	State            *string                                                   `json:"State,omitempty" xml:"State,omitempty"`
	UserData         *string                                                   `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId       *string                                                   `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input            *SubmitBeautifyJobsResponseBodyJobListJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MNSMessageResult *SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Id               *string                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitBeautifyJobsResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetCreationTime(v string) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetBeautifyConfig(v *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfig) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.BeautifyConfig = v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetState(v string) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetUserData(v string) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetCode(v string) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetMessage(v string) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetPipelineId(v string) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetInput(v *SubmitBeautifyJobsResponseBodyJobListJobInput) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetMNSMessageResult(v *SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJob) SetId(v string) *SubmitBeautifyJobsResponseBodyJobListJob {
	s.Id = &v
	return s
}

type SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfig struct {
	OutputFile *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
}

func (s SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfig) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfig) SetOutputFile(v *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile) *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfig {
	s.OutputFile = v
	return s
}

type SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile) SetRoleArn(v string) *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile) SetObject(v string) *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile) SetLocation(v string) *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile) SetBucket(v string) *SubmitBeautifyJobsResponseBodyJobListJobBeautifyConfigOutputFile {
	s.Bucket = &v
	return s
}

type SubmitBeautifyJobsResponseBodyJobListJobInput struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitBeautifyJobsResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobInput) SetRoleArn(v string) *SubmitBeautifyJobsResponseBodyJobListJobInput {
	s.RoleArn = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobInput) SetObject(v string) *SubmitBeautifyJobsResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobInput) SetLocation(v string) *SubmitBeautifyJobsResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobInput) SetBucket(v string) *SubmitBeautifyJobsResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *SubmitBeautifyJobsResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type SubmitBeautifyJobsResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitBeautifyJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitBeautifyJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitBeautifyJobsResponse) GoString() string {
	return s.String()
}

func (s *SubmitBeautifyJobsResponse) SetHeaders(v map[string]*string) *SubmitBeautifyJobsResponse {
	s.Headers = v
	return s
}

func (s *SubmitBeautifyJobsResponse) SetBody(v *SubmitBeautifyJobsResponseBody) *SubmitBeautifyJobsResponse {
	s.Body = v
	return s
}

type QueryImageSearchJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryImageSearchJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListRequest) SetOwnerId(v int64) *QueryImageSearchJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryImageSearchJobListRequest) SetResourceOwnerAccount(v string) *QueryImageSearchJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryImageSearchJobListRequest) SetResourceOwnerId(v int64) *QueryImageSearchJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryImageSearchJobListRequest) SetJobIds(v string) *QueryImageSearchJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryImageSearchJobListRequest) SetOwnerAccount(v string) *QueryImageSearchJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryImageSearchJobListResponseBody struct {
	ImageSearchJobList *QueryImageSearchJobListResponseBodyImageSearchJobList `json:"ImageSearchJobList,omitempty" xml:"ImageSearchJobList,omitempty" type:"Struct"`
	RequestId          *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistIds        *QueryImageSearchJobListResponseBodyNonExistIds        `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryImageSearchJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBody) SetImageSearchJobList(v *QueryImageSearchJobListResponseBodyImageSearchJobList) *QueryImageSearchJobListResponseBody {
	s.ImageSearchJobList = v
	return s
}

func (s *QueryImageSearchJobListResponseBody) SetRequestId(v string) *QueryImageSearchJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryImageSearchJobListResponseBody) SetNonExistIds(v *QueryImageSearchJobListResponseBodyNonExistIds) *QueryImageSearchJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryImageSearchJobListResponseBodyImageSearchJobList struct {
	ImageSearchJob []*QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob `json:"ImageSearchJob,omitempty" xml:"ImageSearchJob,omitempty" type:"Repeated"`
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobList) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobList) SetImageSearchJob(v []*QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) *QueryImageSearchJobListResponseBodyImageSearchJobList {
	s.ImageSearchJob = v
	return s
}

type QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob struct {
	CreationTime *string                                                                        `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime   *string                                                                        `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	Result       *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResult     `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	State        *string                                                                        `json:"State,omitempty" xml:"State,omitempty"`
	UserData     *string                                                                        `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code         *string                                                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Message      *string                                                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId   *string                                                                        `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	InputImage   *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage `json:"inputImage,omitempty" xml:"inputImage,omitempty" type:"Struct"`
	Id           *string                                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	InputVideo   *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo `json:"InputVideo,omitempty" xml:"InputVideo,omitempty" type:"Struct"`
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetCreationTime(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.CreationTime = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetFinishTime(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.FinishTime = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetResult(v *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResult) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.Result = v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetState(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.State = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetUserData(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.UserData = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetCode(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.Code = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetMessage(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.Message = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetPipelineId(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.PipelineId = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetInputImage(v *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.InputImage = v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetId(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.Id = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob) SetInputVideo(v *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJob {
	s.InputVideo = v
	return s
}

type QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResult struct {
	ImageSearchShots *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShots `json:"ImageSearchShots,omitempty" xml:"ImageSearchShots,omitempty" type:"Struct"`
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResult) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResult) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResult) SetImageSearchShots(v *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShots) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResult {
	s.ImageSearchShots = v
	return s
}

type QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShots struct {
	ImageSearchShots []*QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots `json:"ImageSearchShots,omitempty" xml:"ImageSearchShots,omitempty" type:"Repeated"`
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShots) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShots) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShots) SetImageSearchShots(v []*QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShots {
	s.ImageSearchShots = v
	return s
}

type QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots struct {
	MatchedFrame     *string `json:"MatchedFrame,omitempty" xml:"MatchedFrame,omitempty"`
	MatchedTimestamp *string `json:"MatchedTimestamp,omitempty" xml:"MatchedTimestamp,omitempty"`
	Similarity       *string `json:"Similarity,omitempty" xml:"Similarity,omitempty"`
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots) SetMatchedFrame(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots {
	s.MatchedFrame = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots) SetMatchedTimestamp(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots {
	s.MatchedTimestamp = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots) SetSimilarity(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobResultImageSearchShotsImageSearchShots {
	s.Similarity = &v
	return s
}

type QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage) SetObject(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage {
	s.Object = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage) SetLocation(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage {
	s.Location = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage) SetBucket(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputImage {
	s.Bucket = &v
	return s
}

type QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo) SetObject(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo {
	s.Object = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo) SetLocation(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo {
	s.Location = &v
	return s
}

func (s *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo) SetBucket(v string) *QueryImageSearchJobListResponseBodyImageSearchJobListImageSearchJobInputVideo {
	s.Bucket = &v
	return s
}

type QueryImageSearchJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryImageSearchJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryImageSearchJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryImageSearchJobListResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryImageSearchJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryImageSearchJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryImageSearchJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryImageSearchJobListResponse) SetHeaders(v map[string]*string) *QueryImageSearchJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryImageSearchJobListResponse) SetBody(v *QueryImageSearchJobListResponseBody) *QueryImageSearchJobListResponse {
	s.Body = v
	return s
}

type SubmitVideoSummaryJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	VideoSummaryConfig   *string `json:"VideoSummaryConfig,omitempty" xml:"VideoSummaryConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitVideoSummaryJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoSummaryJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitVideoSummaryJobRequest) SetOwnerId(v int64) *SubmitVideoSummaryJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitVideoSummaryJobRequest) SetResourceOwnerAccount(v string) *SubmitVideoSummaryJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitVideoSummaryJobRequest) SetResourceOwnerId(v int64) *SubmitVideoSummaryJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitVideoSummaryJobRequest) SetInput(v string) *SubmitVideoSummaryJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitVideoSummaryJobRequest) SetPipelineId(v string) *SubmitVideoSummaryJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitVideoSummaryJobRequest) SetVideoSummaryConfig(v string) *SubmitVideoSummaryJobRequest {
	s.VideoSummaryConfig = &v
	return s
}

func (s *SubmitVideoSummaryJobRequest) SetUserData(v string) *SubmitVideoSummaryJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitVideoSummaryJobRequest) SetOwnerAccount(v string) *SubmitVideoSummaryJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitVideoSummaryJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitVideoSummaryJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoSummaryJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitVideoSummaryJobResponseBody) SetRequestId(v string) *SubmitVideoSummaryJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitVideoSummaryJobResponseBody) SetJobId(v string) *SubmitVideoSummaryJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitVideoSummaryJobResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitVideoSummaryJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitVideoSummaryJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoSummaryJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitVideoSummaryJobResponse) SetHeaders(v map[string]*string) *SubmitVideoSummaryJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitVideoSummaryJobResponse) SetBody(v *SubmitVideoSummaryJobResponseBody) *SubmitVideoSummaryJobResponse {
	s.Body = v
	return s
}

type SubmitMediaDetailJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	MediaDetailConfig    *string `json:"MediaDetailConfig,omitempty" xml:"MediaDetailConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitMediaDetailJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaDetailJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitMediaDetailJobRequest) SetOwnerId(v int64) *SubmitMediaDetailJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitMediaDetailJobRequest) SetResourceOwnerAccount(v string) *SubmitMediaDetailJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitMediaDetailJobRequest) SetResourceOwnerId(v int64) *SubmitMediaDetailJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitMediaDetailJobRequest) SetInput(v string) *SubmitMediaDetailJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitMediaDetailJobRequest) SetPipelineId(v string) *SubmitMediaDetailJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitMediaDetailJobRequest) SetMediaDetailConfig(v string) *SubmitMediaDetailJobRequest {
	s.MediaDetailConfig = &v
	return s
}

func (s *SubmitMediaDetailJobRequest) SetUserData(v string) *SubmitMediaDetailJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitMediaDetailJobRequest) SetOwnerAccount(v string) *SubmitMediaDetailJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitMediaDetailJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitMediaDetailJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaDetailJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitMediaDetailJobResponseBody) SetRequestId(v string) *SubmitMediaDetailJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitMediaDetailJobResponseBody) SetJobId(v string) *SubmitMediaDetailJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitMediaDetailJobResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitMediaDetailJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitMediaDetailJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitMediaDetailJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitMediaDetailJobResponse) SetHeaders(v map[string]*string) *SubmitMediaDetailJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitMediaDetailJobResponse) SetBody(v *SubmitMediaDetailJobResponseBody) *SubmitMediaDetailJobResponse {
	s.Body = v
	return s
}

type QueryFpImportResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	StartTime            *int64  `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	EndTime              *int64  `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	PageSize             *int64  `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	PageIndex            *int64  `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryFpImportResultRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFpImportResultRequest) GoString() string {
	return s.String()
}

func (s *QueryFpImportResultRequest) SetOwnerId(v int64) *QueryFpImportResultRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFpImportResultRequest) SetResourceOwnerAccount(v string) *QueryFpImportResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFpImportResultRequest) SetResourceOwnerId(v int64) *QueryFpImportResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryFpImportResultRequest) SetStartTime(v int64) *QueryFpImportResultRequest {
	s.StartTime = &v
	return s
}

func (s *QueryFpImportResultRequest) SetEndTime(v int64) *QueryFpImportResultRequest {
	s.EndTime = &v
	return s
}

func (s *QueryFpImportResultRequest) SetPageSize(v int64) *QueryFpImportResultRequest {
	s.PageSize = &v
	return s
}

func (s *QueryFpImportResultRequest) SetPageIndex(v int64) *QueryFpImportResultRequest {
	s.PageIndex = &v
	return s
}

func (s *QueryFpImportResultRequest) SetOwnerAccount(v string) *QueryFpImportResultRequest {
	s.OwnerAccount = &v
	return s
}

type QueryFpImportResultResponseBody struct {
	PageInfo            *QueryFpImportResultResponseBodyPageInfo            `json:"PageInfo,omitempty" xml:"PageInfo,omitempty" type:"Struct"`
	FpResultLogInfoList *QueryFpImportResultResponseBodyFpResultLogInfoList `json:"FpResultLogInfoList,omitempty" xml:"FpResultLogInfoList,omitempty" type:"Struct"`
	RequestId           *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LogCount            *int64                                              `json:"LogCount,omitempty" xml:"LogCount,omitempty"`
}

func (s QueryFpImportResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFpImportResultResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFpImportResultResponseBody) SetPageInfo(v *QueryFpImportResultResponseBodyPageInfo) *QueryFpImportResultResponseBody {
	s.PageInfo = v
	return s
}

func (s *QueryFpImportResultResponseBody) SetFpResultLogInfoList(v *QueryFpImportResultResponseBodyFpResultLogInfoList) *QueryFpImportResultResponseBody {
	s.FpResultLogInfoList = v
	return s
}

func (s *QueryFpImportResultResponseBody) SetRequestId(v string) *QueryFpImportResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFpImportResultResponseBody) SetLogCount(v int64) *QueryFpImportResultResponseBody {
	s.LogCount = &v
	return s
}

type QueryFpImportResultResponseBodyPageInfo struct {
	PageIndex *int64 `json:"PageIndex,omitempty" xml:"PageIndex,omitempty"`
	PageSize  *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	Total     *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s QueryFpImportResultResponseBodyPageInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryFpImportResultResponseBodyPageInfo) GoString() string {
	return s.String()
}

func (s *QueryFpImportResultResponseBodyPageInfo) SetPageIndex(v int64) *QueryFpImportResultResponseBodyPageInfo {
	s.PageIndex = &v
	return s
}

func (s *QueryFpImportResultResponseBodyPageInfo) SetPageSize(v int64) *QueryFpImportResultResponseBodyPageInfo {
	s.PageSize = &v
	return s
}

func (s *QueryFpImportResultResponseBodyPageInfo) SetTotal(v int64) *QueryFpImportResultResponseBodyPageInfo {
	s.Total = &v
	return s
}

type QueryFpImportResultResponseBodyFpResultLogInfoList struct {
	FpResultLogInfo []*QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo `json:"FpResultLogInfo,omitempty" xml:"FpResultLogInfo,omitempty" type:"Repeated"`
}

func (s QueryFpImportResultResponseBodyFpResultLogInfoList) String() string {
	return tea.Prettify(s)
}

func (s QueryFpImportResultResponseBodyFpResultLogInfoList) GoString() string {
	return s.String()
}

func (s *QueryFpImportResultResponseBodyFpResultLogInfoList) SetFpResultLogInfo(v []*QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) *QueryFpImportResultResponseBodyFpResultLogInfoList {
	s.FpResultLogInfo = v
	return s
}

type QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo struct {
	LogStartTime *int64  `json:"LogStartTime,omitempty" xml:"LogStartTime,omitempty"`
	LogPath      *string `json:"LogPath,omitempty" xml:"LogPath,omitempty"`
	CreateTime   *int64  `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	LogSize      *int64  `json:"LogSize,omitempty" xml:"LogSize,omitempty"`
	LogName      *string `json:"LogName,omitempty" xml:"LogName,omitempty"`
	LogEndTime   *int64  `json:"LogEndTime,omitempty" xml:"LogEndTime,omitempty"`
}

func (s QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) String() string {
	return tea.Prettify(s)
}

func (s QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) GoString() string {
	return s.String()
}

func (s *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) SetLogStartTime(v int64) *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo {
	s.LogStartTime = &v
	return s
}

func (s *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) SetLogPath(v string) *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo {
	s.LogPath = &v
	return s
}

func (s *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) SetCreateTime(v int64) *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo {
	s.CreateTime = &v
	return s
}

func (s *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) SetLogSize(v int64) *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo {
	s.LogSize = &v
	return s
}

func (s *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) SetLogName(v string) *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo {
	s.LogName = &v
	return s
}

func (s *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo) SetLogEndTime(v int64) *QueryFpImportResultResponseBodyFpResultLogInfoListFpResultLogInfo {
	s.LogEndTime = &v
	return s
}

type QueryFpImportResultResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryFpImportResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryFpImportResultResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFpImportResultResponse) GoString() string {
	return s.String()
}

func (s *QueryFpImportResultResponse) SetHeaders(v map[string]*string) *QueryFpImportResultResponse {
	s.Headers = v
	return s
}

func (s *QueryFpImportResultResponse) SetBody(v *QueryFpImportResultResponseBody) *QueryFpImportResultResponse {
	s.Body = v
	return s
}

type QueryWaterMarkTemplateListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	WaterMarkTemplateIds *string `json:"WaterMarkTemplateIds,omitempty" xml:"WaterMarkTemplateIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryWaterMarkTemplateListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListRequest) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListRequest) SetOwnerId(v int64) *QueryWaterMarkTemplateListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryWaterMarkTemplateListRequest) SetResourceOwnerAccount(v string) *QueryWaterMarkTemplateListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryWaterMarkTemplateListRequest) SetResourceOwnerId(v int64) *QueryWaterMarkTemplateListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryWaterMarkTemplateListRequest) SetWaterMarkTemplateIds(v string) *QueryWaterMarkTemplateListRequest {
	s.WaterMarkTemplateIds = &v
	return s
}

func (s *QueryWaterMarkTemplateListRequest) SetOwnerAccount(v string) *QueryWaterMarkTemplateListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryWaterMarkTemplateListResponseBody struct {
	RequestId             *string                                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistWids          *QueryWaterMarkTemplateListResponseBodyNonExistWids          `json:"NonExistWids,omitempty" xml:"NonExistWids,omitempty" type:"Struct"`
	WaterMarkTemplateList *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList `json:"WaterMarkTemplateList,omitempty" xml:"WaterMarkTemplateList,omitempty" type:"Struct"`
}

func (s QueryWaterMarkTemplateListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBody) SetRequestId(v string) *QueryWaterMarkTemplateListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBody) SetNonExistWids(v *QueryWaterMarkTemplateListResponseBodyNonExistWids) *QueryWaterMarkTemplateListResponseBody {
	s.NonExistWids = v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBody) SetWaterMarkTemplateList(v *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList) *QueryWaterMarkTemplateListResponseBody {
	s.WaterMarkTemplateList = v
	return s
}

type QueryWaterMarkTemplateListResponseBodyNonExistWids struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryWaterMarkTemplateListResponseBodyNonExistWids) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyNonExistWids) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyNonExistWids) SetString_(v []*string) *QueryWaterMarkTemplateListResponseBodyNonExistWids {
	s.String_ = v
	return s
}

type QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList struct {
	WaterMarkTemplate []*QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate `json:"WaterMarkTemplate,omitempty" xml:"WaterMarkTemplate,omitempty" type:"Repeated"`
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList) SetWaterMarkTemplate(v []*QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateList {
	s.WaterMarkTemplate = v
	return s
}

type QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate struct {
	Type       *string                                                                                 `json:"Type,omitempty" xml:"Type,omitempty"`
	RatioRefer *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer `json:"RatioRefer,omitempty" xml:"RatioRefer,omitempty" type:"Struct"`
	ReferPos   *string                                                                                 `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	State      *string                                                                                 `json:"State,omitempty" xml:"State,omitempty"`
	Dx         *string                                                                                 `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width      *string                                                                                 `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                                                 `json:"Height,omitempty" xml:"Height,omitempty"`
	Timeline   *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline   `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	Name       *string                                                                                 `json:"Name,omitempty" xml:"Name,omitempty"`
	Dy         *string                                                                                 `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Id         *string                                                                                 `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetType(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Type = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetRatioRefer(v *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.RatioRefer = v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetReferPos(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.ReferPos = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetState(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.State = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetDx(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Dx = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetWidth(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Width = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetHeight(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Height = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetTimeline(v *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Timeline = v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetName(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Name = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetDy(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Dy = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate) SetId(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplate {
	s.Id = &v
	return s
}

type QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer struct {
	Dx     *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Dy     *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetDx(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Dx = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetWidth(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Width = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetHeight(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Height = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer) SetDy(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateRatioRefer {
	s.Dy = &v
	return s
}

type QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) SetStart(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline {
	s.Start = &v
	return s
}

func (s *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline) SetDuration(v string) *QueryWaterMarkTemplateListResponseBodyWaterMarkTemplateListWaterMarkTemplateTimeline {
	s.Duration = &v
	return s
}

type QueryWaterMarkTemplateListResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryWaterMarkTemplateListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryWaterMarkTemplateListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryWaterMarkTemplateListResponse) GoString() string {
	return s.String()
}

func (s *QueryWaterMarkTemplateListResponse) SetHeaders(v map[string]*string) *QueryWaterMarkTemplateListResponse {
	s.Headers = v
	return s
}

func (s *QueryWaterMarkTemplateListResponse) SetBody(v *QueryWaterMarkTemplateListResponseBody) *QueryWaterMarkTemplateListResponse {
	s.Body = v
	return s
}

type QueryMediaInfoJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaInfoJobIds      *string `json:"MediaInfoJobIds,omitempty" xml:"MediaInfoJobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMediaInfoJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListRequest) SetOwnerId(v int64) *QueryMediaInfoJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaInfoJobListRequest) SetResourceOwnerAccount(v string) *QueryMediaInfoJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaInfoJobListRequest) SetResourceOwnerId(v int64) *QueryMediaInfoJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaInfoJobListRequest) SetMediaInfoJobIds(v string) *QueryMediaInfoJobListRequest {
	s.MediaInfoJobIds = &v
	return s
}

func (s *QueryMediaInfoJobListRequest) SetOwnerAccount(v string) *QueryMediaInfoJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMediaInfoJobListResponseBody struct {
	NonExistMediaInfoJobIds *QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds `json:"NonExistMediaInfoJobIds,omitempty" xml:"NonExistMediaInfoJobIds,omitempty" type:"Struct"`
	RequestId               *string                                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MediaInfoJobList        *QueryMediaInfoJobListResponseBodyMediaInfoJobList        `json:"MediaInfoJobList,omitempty" xml:"MediaInfoJobList,omitempty" type:"Struct"`
}

func (s QueryMediaInfoJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBody) SetNonExistMediaInfoJobIds(v *QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds) *QueryMediaInfoJobListResponseBody {
	s.NonExistMediaInfoJobIds = v
	return s
}

func (s *QueryMediaInfoJobListResponseBody) SetRequestId(v string) *QueryMediaInfoJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBody) SetMediaInfoJobList(v *QueryMediaInfoJobListResponseBodyMediaInfoJobList) *QueryMediaInfoJobListResponseBody {
	s.MediaInfoJobList = v
	return s
}

type QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds) SetString_(v []*string) *QueryMediaInfoJobListResponseBodyNonExistMediaInfoJobIds {
	s.String_ = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobList struct {
	MediaInfoJob []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob `json:"MediaInfoJob,omitempty" xml:"MediaInfoJob,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobList) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobList) SetMediaInfoJob(v []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) *QueryMediaInfoJobListResponseBodyMediaInfoJobList {
	s.MediaInfoJob = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob struct {
	CreationTime     *string                                                                        `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State            *string                                                                        `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                                        `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData         *string                                                                        `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                                        `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                                        `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId       *string                                                                        `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Async            *bool                                                                          `json:"Async,omitempty" xml:"Async,omitempty"`
	Input            *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MNSMessageResult *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Properties       *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties       `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetCreationTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetState(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.State = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetJobId(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.JobId = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetUserData(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.UserData = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetCode(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Code = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetMessage(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Message = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetPipelineId(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetAsync(v bool) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Async = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetInput(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Input = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetMNSMessageResult(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.MNSMessageResult = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob) SetProperties(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJob {
	s.Properties = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) SetObject(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput {
	s.Object = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) SetLocation(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput {
	s.Location = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput) SetBucket(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobInput {
	s.Bucket = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) SetMessageId(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) SetErrorMessage(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult) SetErrorCode(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties struct {
	Width      *string                                                                         `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                                         `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                                         `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                                         `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                                         `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                                         `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                                         `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetWidth(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Width = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetHeight(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Height = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetFps(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Fps = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetFileFormat(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.FileFormat = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetStreams(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Streams = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetFormat(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.Format = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties) SetFileSize(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobProperties {
	s.FileSize = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams struct {
	VideoStreamList    *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) SetVideoStreamList(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) SetAudioStreamList(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams) SetSubtitleStreamList(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList struct {
	VideoStream []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList) SetVideoStream(v []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream struct {
	Sar            *string                                                                                                              `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Height         *string                                                                                                              `json:"Height,omitempty" xml:"Height,omitempty"`
	CodecTagString *string                                                                                                              `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	NetworkCost    *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Width          *string                                                                                                              `json:"Width,omitempty" xml:"Width,omitempty"`
	Index          *string                                                                                                              `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                                              `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                                              `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                                              `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Lang           *string                                                                                                              `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                                              `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	NumFrames      *string                                                                                                              `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Rotate         *string                                                                                                              `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Bitrate        *string                                                                                                              `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	HasBFrames     *string                                                                                                              `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                                              `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                                              `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Dar            *string                                                                                                              `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                                              `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string                                                                                                              `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                              `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                                              `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                                              `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                                              `json:"Level,omitempty" xml:"Level,omitempty"`
	ColorRange     *string                                                                                                              `json:"ColorRange,omitempty" xml:"ColorRange,omitempty"`
	ColorTransfer  *string                                                                                                              `json:"ColorTransfer,omitempty" xml:"ColorTransfer,omitempty"`
	ColorPrimaries *string                                                                                                              `json:"ColorPrimaries,omitempty" xml:"ColorPrimaries,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetRotate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetColorRange(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.ColorRange = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetColorTransfer(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.ColorTransfer = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream) SetColorPrimaries(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStream {
	s.ColorPrimaries = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList struct {
	AudioStream []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList) SetAudioStream(v []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetTimebase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Timebase = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetStartTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.StartTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecLongName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTag(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTag = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTimeBase(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTagString(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTagString = &v
	return s
}

type QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetStartTime(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetNumPrograms(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetSize(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.Size = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetNumStreams(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetFormatLongName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetDuration(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetBitrate(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat) SetFormatName(v string) *QueryMediaInfoJobListResponseBodyMediaInfoJobListMediaInfoJobPropertiesFormat {
	s.FormatName = &v
	return s
}

type QueryMediaInfoJobListResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaInfoJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaInfoJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaInfoJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaInfoJobListResponse) SetHeaders(v map[string]*string) *QueryMediaInfoJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaInfoJobListResponse) SetBody(v *QueryMediaInfoJobListResponseBody) *QueryMediaInfoJobListResponse {
	s.Body = v
	return s
}

type QueryMediaFpDeleteJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryMediaFpDeleteJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaFpDeleteJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryMediaFpDeleteJobListRequest) SetOwnerId(v int64) *QueryMediaFpDeleteJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryMediaFpDeleteJobListRequest) SetResourceOwnerAccount(v string) *QueryMediaFpDeleteJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryMediaFpDeleteJobListRequest) SetResourceOwnerId(v int64) *QueryMediaFpDeleteJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryMediaFpDeleteJobListRequest) SetJobIds(v string) *QueryMediaFpDeleteJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryMediaFpDeleteJobListRequest) SetOwnerAccount(v string) *QueryMediaFpDeleteJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryMediaFpDeleteJobListResponseBody struct {
	RequestId            *string                                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistIds          *QueryMediaFpDeleteJobListResponseBodyNonExistIds          `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
	MediaFpDeleteJobList *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobList `json:"MediaFpDeleteJobList,omitempty" xml:"MediaFpDeleteJobList,omitempty" type:"Struct"`
}

func (s QueryMediaFpDeleteJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaFpDeleteJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryMediaFpDeleteJobListResponseBody) SetRequestId(v string) *QueryMediaFpDeleteJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBody) SetNonExistIds(v *QueryMediaFpDeleteJobListResponseBodyNonExistIds) *QueryMediaFpDeleteJobListResponseBody {
	s.NonExistIds = v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBody) SetMediaFpDeleteJobList(v *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobList) *QueryMediaFpDeleteJobListResponseBody {
	s.MediaFpDeleteJobList = v
	return s
}

type QueryMediaFpDeleteJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryMediaFpDeleteJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaFpDeleteJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryMediaFpDeleteJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryMediaFpDeleteJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobList struct {
	MediaFpDeleteJob []*QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob `json:"MediaFpDeleteJob,omitempty" xml:"MediaFpDeleteJob,omitempty" type:"Repeated"`
}

func (s QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobList) GoString() string {
	return s.String()
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobList) SetMediaFpDeleteJob(v []*QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobList {
	s.MediaFpDeleteJob = v
	return s
}

type QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob struct {
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	FinishTime   *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	PrimaryKey   *string `json:"PrimaryKey,omitempty" xml:"PrimaryKey,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message      *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId   *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	FpDBId       *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) GoString() string {
	return s.String()
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetCreationTime(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.CreationTime = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetFinishTime(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.FinishTime = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetPrimaryKey(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.PrimaryKey = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetState(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.State = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetUserData(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.UserData = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetCode(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.Code = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetMessage(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.Message = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetPipelineId(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.PipelineId = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetFpDBId(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.FpDBId = &v
	return s
}

func (s *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob) SetId(v string) *QueryMediaFpDeleteJobListResponseBodyMediaFpDeleteJobListMediaFpDeleteJob {
	s.Id = &v
	return s
}

type QueryMediaFpDeleteJobListResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryMediaFpDeleteJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryMediaFpDeleteJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryMediaFpDeleteJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryMediaFpDeleteJobListResponse) SetHeaders(v map[string]*string) *QueryMediaFpDeleteJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryMediaFpDeleteJobListResponse) SetBody(v *QueryMediaFpDeleteJobListResponseBody) *QueryMediaFpDeleteJobListResponse {
	s.Body = v
	return s
}

type ReportTagJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Tag                  *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Result               *string `json:"Result,omitempty" xml:"Result,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportTagJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportTagJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportTagJobResultRequest) SetOwnerId(v int64) *ReportTagJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportTagJobResultRequest) SetResourceOwnerAccount(v string) *ReportTagJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportTagJobResultRequest) SetResourceOwnerId(v int64) *ReportTagJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportTagJobResultRequest) SetJobId(v string) *ReportTagJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportTagJobResultRequest) SetTag(v string) *ReportTagJobResultRequest {
	s.Tag = &v
	return s
}

func (s *ReportTagJobResultRequest) SetResult(v string) *ReportTagJobResultRequest {
	s.Result = &v
	return s
}

func (s *ReportTagJobResultRequest) SetOwnerAccount(v string) *ReportTagJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportTagJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportTagJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportTagJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportTagJobResultResponseBody) SetRequestId(v string) *ReportTagJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportTagJobResultResponseBody) SetJobId(v string) *ReportTagJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportTagJobResultResponse struct {
	Headers map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportTagJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportTagJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportTagJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportTagJobResultResponse) SetHeaders(v map[string]*string) *ReportTagJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportTagJobResultResponse) SetBody(v *ReportTagJobResultResponseBody) *ReportTagJobResultResponse {
	s.Body = v
	return s
}

type AddPornPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddPornPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s AddPornPipelineRequest) GoString() string {
	return s.String()
}

func (s *AddPornPipelineRequest) SetOwnerId(v int64) *AddPornPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *AddPornPipelineRequest) SetResourceOwnerAccount(v string) *AddPornPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddPornPipelineRequest) SetResourceOwnerId(v int64) *AddPornPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddPornPipelineRequest) SetName(v string) *AddPornPipelineRequest {
	s.Name = &v
	return s
}

func (s *AddPornPipelineRequest) SetPriority(v int32) *AddPornPipelineRequest {
	s.Priority = &v
	return s
}

func (s *AddPornPipelineRequest) SetNotifyConfig(v string) *AddPornPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *AddPornPipelineRequest) SetOwnerAccount(v string) *AddPornPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type AddPornPipelineResponseBody struct {
	RequestId *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *AddPornPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s AddPornPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddPornPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *AddPornPipelineResponseBody) SetRequestId(v string) *AddPornPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddPornPipelineResponseBody) SetPipeline(v *AddPornPipelineResponseBodyPipeline) *AddPornPipelineResponseBody {
	s.Pipeline = v
	return s
}

type AddPornPipelineResponseBodyPipeline struct {
	State        *string                                          `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *AddPornPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                           `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                          `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                          `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s AddPornPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s AddPornPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *AddPornPipelineResponseBodyPipeline) SetState(v string) *AddPornPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *AddPornPipelineResponseBodyPipeline) SetNotifyConfig(v *AddPornPipelineResponseBodyPipelineNotifyConfig) *AddPornPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *AddPornPipelineResponseBodyPipeline) SetPriority(v int32) *AddPornPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *AddPornPipelineResponseBodyPipeline) SetName(v string) *AddPornPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *AddPornPipelineResponseBodyPipeline) SetId(v string) *AddPornPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type AddPornPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s AddPornPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s AddPornPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *AddPornPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *AddPornPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *AddPornPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *AddPornPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type AddPornPipelineResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddPornPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddPornPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s AddPornPipelineResponse) GoString() string {
	return s.String()
}

func (s *AddPornPipelineResponse) SetHeaders(v map[string]*string) *AddPornPipelineResponse {
	s.Headers = v
	return s
}

func (s *AddPornPipelineResponse) SetBody(v *AddPornPipelineResponseBody) *AddPornPipelineResponse {
	s.Body = v
	return s
}

type QueryPornPipelineListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineIds          *string `json:"PipelineIds,omitempty" xml:"PipelineIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryPornPipelineListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPornPipelineListRequest) GoString() string {
	return s.String()
}

func (s *QueryPornPipelineListRequest) SetOwnerId(v int64) *QueryPornPipelineListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPornPipelineListRequest) SetResourceOwnerAccount(v string) *QueryPornPipelineListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPornPipelineListRequest) SetResourceOwnerId(v int64) *QueryPornPipelineListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryPornPipelineListRequest) SetPipelineIds(v string) *QueryPornPipelineListRequest {
	s.PipelineIds = &v
	return s
}

func (s *QueryPornPipelineListRequest) SetOwnerAccount(v string) *QueryPornPipelineListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryPornPipelineListResponseBody struct {
	RequestId    *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PipelineList *QueryPornPipelineListResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
	NonExistIds  *QueryPornPipelineListResponseBodyNonExistIds  `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryPornPipelineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPornPipelineListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPornPipelineListResponseBody) SetRequestId(v string) *QueryPornPipelineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPornPipelineListResponseBody) SetPipelineList(v *QueryPornPipelineListResponseBodyPipelineList) *QueryPornPipelineListResponseBody {
	s.PipelineList = v
	return s
}

func (s *QueryPornPipelineListResponseBody) SetNonExistIds(v *QueryPornPipelineListResponseBodyNonExistIds) *QueryPornPipelineListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryPornPipelineListResponseBodyPipelineList struct {
	Pipeline []*QueryPornPipelineListResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s QueryPornPipelineListResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s QueryPornPipelineListResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *QueryPornPipelineListResponseBodyPipelineList) SetPipeline(v []*QueryPornPipelineListResponseBodyPipelineListPipeline) *QueryPornPipelineListResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type QueryPornPipelineListResponseBodyPipelineListPipeline struct {
	State        *string                                                            `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *string                                                            `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                            `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryPornPipelineListResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s QueryPornPipelineListResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *QueryPornPipelineListResponseBodyPipelineListPipeline) SetState(v string) *QueryPornPipelineListResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *QueryPornPipelineListResponseBodyPipelineListPipeline) SetNotifyConfig(v *QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig) *QueryPornPipelineListResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *QueryPornPipelineListResponseBodyPipelineListPipeline) SetPriority(v string) *QueryPornPipelineListResponseBodyPipelineListPipeline {
	s.Priority = &v
	return s
}

func (s *QueryPornPipelineListResponseBodyPipelineListPipeline) SetName(v string) *QueryPornPipelineListResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *QueryPornPipelineListResponseBodyPipelineListPipeline) SetId(v string) *QueryPornPipelineListResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

type QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetQueue(v string) *QueryPornPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type QueryPornPipelineListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryPornPipelineListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryPornPipelineListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryPornPipelineListResponseBodyNonExistIds) SetString_(v []*string) *QueryPornPipelineListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryPornPipelineListResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryPornPipelineListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPornPipelineListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPornPipelineListResponse) GoString() string {
	return s.String()
}

func (s *QueryPornPipelineListResponse) SetHeaders(v map[string]*string) *QueryPornPipelineListResponse {
	s.Headers = v
	return s
}

func (s *QueryPornPipelineListResponse) SetBody(v *QueryPornPipelineListResponseBody) *QueryPornPipelineListResponse {
	s.Body = v
	return s
}

type QueryTerrorismJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryTerrorismJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListRequest) SetOwnerId(v int64) *QueryTerrorismJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryTerrorismJobListRequest) SetResourceOwnerAccount(v string) *QueryTerrorismJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryTerrorismJobListRequest) SetResourceOwnerId(v int64) *QueryTerrorismJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryTerrorismJobListRequest) SetJobIds(v string) *QueryTerrorismJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryTerrorismJobListRequest) SetOwnerAccount(v string) *QueryTerrorismJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryTerrorismJobListResponseBody struct {
	RequestId        *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	TerrorismJobList *QueryTerrorismJobListResponseBodyTerrorismJobList `json:"TerrorismJobList,omitempty" xml:"TerrorismJobList,omitempty" type:"Struct"`
	NonExistIds      *QueryTerrorismJobListResponseBodyNonExistIds      `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryTerrorismJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBody) SetRequestId(v string) *QueryTerrorismJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryTerrorismJobListResponseBody) SetTerrorismJobList(v *QueryTerrorismJobListResponseBodyTerrorismJobList) *QueryTerrorismJobListResponseBody {
	s.TerrorismJobList = v
	return s
}

func (s *QueryTerrorismJobListResponseBody) SetNonExistIds(v *QueryTerrorismJobListResponseBodyNonExistIds) *QueryTerrorismJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobList struct {
	TerrorismJob []*QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob `json:"TerrorismJob,omitempty" xml:"TerrorismJob,omitempty" type:"Repeated"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobList) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobList) SetTerrorismJob(v []*QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) *QueryTerrorismJobListResponseBodyTerrorismJobList {
	s.TerrorismJob = v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob struct {
	CreationTime          *string                                                                             `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State                 *string                                                                             `json:"State,omitempty" xml:"State,omitempty"`
	UserData              *string                                                                             `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code                  *string                                                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Message               *string                                                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	CensorTerrorismResult *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult `json:"CensorTerrorismResult,omitempty" xml:"CensorTerrorismResult,omitempty" type:"Struct"`
	TerrorismConfig       *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig       `json:"TerrorismConfig,omitempty" xml:"TerrorismConfig,omitempty" type:"Struct"`
	PipelineId            *string                                                                             `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input                 *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput                 `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id                    *string                                                                             `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetCreationTime(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.CreationTime = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetState(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.State = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetUserData(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.UserData = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetCode(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.Code = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetMessage(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.Message = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetCensorTerrorismResult(v *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.CensorTerrorismResult = v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetTerrorismConfig(v *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.TerrorismConfig = v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetPipelineId(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.PipelineId = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetInput(v *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.Input = v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob) SetId(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJob {
	s.Id = &v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult struct {
	TerrorismTopList     *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopList     `json:"TerrorismTopList,omitempty" xml:"TerrorismTopList,omitempty" type:"Struct"`
	Suggestion           *string                                                                                                 `json:"Suggestion,omitempty" xml:"Suggestion,omitempty"`
	AverageScore         *string                                                                                                 `json:"AverageScore,omitempty" xml:"AverageScore,omitempty"`
	TerrorismCounterList *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterList `json:"TerrorismCounterList,omitempty" xml:"TerrorismCounterList,omitempty" type:"Struct"`
	Label                *string                                                                                                 `json:"Label,omitempty" xml:"Label,omitempty"`
	MaxScore             *string                                                                                                 `json:"MaxScore,omitempty" xml:"MaxScore,omitempty"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) SetTerrorismTopList(v *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopList) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult {
	s.TerrorismTopList = v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) SetSuggestion(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult {
	s.Suggestion = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) SetAverageScore(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult {
	s.AverageScore = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) SetTerrorismCounterList(v *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterList) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult {
	s.TerrorismCounterList = v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) SetLabel(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult {
	s.Label = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult) SetMaxScore(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResult {
	s.MaxScore = &v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopList struct {
	Top []*QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop `json:"Top,omitempty" xml:"Top,omitempty" type:"Repeated"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopList) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopList) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopList) SetTop(v []*QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopList {
	s.Top = v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop struct {
	Index     *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Score     *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	Object    *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Label     *string `json:"Label,omitempty" xml:"Label,omitempty"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop) SetIndex(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop {
	s.Index = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop) SetScore(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop {
	s.Score = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop) SetTimestamp(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop {
	s.Timestamp = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop) SetObject(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop {
	s.Object = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop) SetLabel(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismTopListTop {
	s.Label = &v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterList struct {
	Counter []*QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter `json:"Counter,omitempty" xml:"Counter,omitempty" type:"Repeated"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterList) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterList) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterList) SetCounter(v []*QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterList {
	s.Counter = v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter struct {
	Label *string `json:"Label,omitempty" xml:"Label,omitempty"`
	Count *int32  `json:"Count,omitempty" xml:"Count,omitempty"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter) SetLabel(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter {
	s.Label = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter) SetCount(v int32) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobCensorTerrorismResultTerrorismCounterListCounter {
	s.Count = &v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig struct {
	Interval   *string                                                                                 `json:"Interval,omitempty" xml:"Interval,omitempty"`
	OutputFile *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	BizType    *string                                                                                 `json:"BizType,omitempty" xml:"BizType,omitempty"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig) SetInterval(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig {
	s.Interval = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig) SetOutputFile(v *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig {
	s.OutputFile = v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig) SetBizType(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfig {
	s.BizType = &v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile) SetObject(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile) SetLocation(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile) SetBucket(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobTerrorismConfigOutputFile {
	s.Bucket = &v
	return s
}

type QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput) SetObject(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput {
	s.Object = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput) SetLocation(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput {
	s.Location = &v
	return s
}

func (s *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput) SetBucket(v string) *QueryTerrorismJobListResponseBodyTerrorismJobListTerrorismJobInput {
	s.Bucket = &v
	return s
}

type QueryTerrorismJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryTerrorismJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryTerrorismJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryTerrorismJobListResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryTerrorismJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryTerrorismJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryTerrorismJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryTerrorismJobListResponse) SetHeaders(v map[string]*string) *QueryTerrorismJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryTerrorismJobListResponse) SetBody(v *QueryTerrorismJobListResponseBody) *QueryTerrorismJobListResponse {
	s.Body = v
	return s
}

type SubmitJobsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	Outputs              *string `json:"Outputs,omitempty" xml:"Outputs,omitempty"`
	OutputBucket         *string `json:"OutputBucket,omitempty" xml:"OutputBucket,omitempty"`
	OutputLocation       *string `json:"OutputLocation,omitempty" xml:"OutputLocation,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsRequest) GoString() string {
	return s.String()
}

func (s *SubmitJobsRequest) SetOwnerId(v int64) *SubmitJobsRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitJobsRequest) SetResourceOwnerAccount(v string) *SubmitJobsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitJobsRequest) SetResourceOwnerId(v int64) *SubmitJobsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitJobsRequest) SetInput(v string) *SubmitJobsRequest {
	s.Input = &v
	return s
}

func (s *SubmitJobsRequest) SetOutputs(v string) *SubmitJobsRequest {
	s.Outputs = &v
	return s
}

func (s *SubmitJobsRequest) SetOutputBucket(v string) *SubmitJobsRequest {
	s.OutputBucket = &v
	return s
}

func (s *SubmitJobsRequest) SetOutputLocation(v string) *SubmitJobsRequest {
	s.OutputLocation = &v
	return s
}

func (s *SubmitJobsRequest) SetPipelineId(v string) *SubmitJobsRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitJobsRequest) SetOwnerAccount(v string) *SubmitJobsRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitJobsResponseBody struct {
	JobResultList *SubmitJobsResponseBodyJobResultList `json:"JobResultList,omitempty" xml:"JobResultList,omitempty" type:"Struct"`
	RequestId     *string                              `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SubmitJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBody) SetJobResultList(v *SubmitJobsResponseBodyJobResultList) *SubmitJobsResponseBody {
	s.JobResultList = v
	return s
}

func (s *SubmitJobsResponseBody) SetRequestId(v string) *SubmitJobsResponseBody {
	s.RequestId = &v
	return s
}

type SubmitJobsResponseBodyJobResultList struct {
	JobResult []*SubmitJobsResponseBodyJobResultListJobResult `json:"JobResult,omitempty" xml:"JobResult,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultList) SetJobResult(v []*SubmitJobsResponseBodyJobResultListJobResult) *SubmitJobsResponseBodyJobResultList {
	s.JobResult = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResult struct {
	Job     *SubmitJobsResponseBodyJobResultListJobResultJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	Success *bool                                            `json:"Success,omitempty" xml:"Success,omitempty"`
	Code    *string                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Message *string                                          `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResult) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResult) SetJob(v *SubmitJobsResponseBodyJobResultListJobResultJob) *SubmitJobsResponseBodyJobResultListJobResult {
	s.Job = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResult) SetSuccess(v bool) *SubmitJobsResponseBodyJobResultListJobResult {
	s.Success = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResult) SetCode(v string) *SubmitJobsResponseBodyJobResultListJobResult {
	s.Code = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResult) SetMessage(v string) *SubmitJobsResponseBodyJobResultListJobResult {
	s.Message = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJob struct {
	CreationTime     *string                                                          `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent          *int64                                                           `json:"Percent,omitempty" xml:"Percent,omitempty"`
	FinishTime       *string                                                          `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	State            *string                                                          `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                          `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Code             *string                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	Output           *SubmitJobsResponseBodyJobResultListJobResultJobOutput           `json:"Output,omitempty" xml:"Output,omitempty" type:"Struct"`
	PipelineId       *string                                                          `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input            *SubmitJobsResponseBodyJobResultListJobResultJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	MNSMessageResult *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJob) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetCreationTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetPercent(v int64) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Percent = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetFinishTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.FinishTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetState(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.State = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetJobId(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.JobId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetCode(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Code = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetMessage(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Message = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetOutput(v *SubmitJobsResponseBodyJobResultListJobResultJobOutput) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Output = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetPipelineId(v string) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetInput(v *SubmitJobsResponseBodyJobResultListJobResultJobInput) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.Input = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJob) SetMNSMessageResult(v *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) *SubmitJobsResponseBodyJobResultListJobResultJob {
	s.MNSMessageResult = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutput struct {
	Video                  *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo                  `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig            *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig            `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	Encryption             *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption             `json:"Encryption,omitempty" xml:"Encryption,omitempty" type:"Struct"`
	WaterMarkList          *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList          `json:"WaterMarkList,omitempty" xml:"WaterMarkList,omitempty" type:"Struct"`
	WaterMarkConfigUrl     *string                                                                      `json:"WaterMarkConfigUrl,omitempty" xml:"WaterMarkConfigUrl,omitempty"`
	DeWatermark            *string                                                                      `json:"DeWatermark,omitempty" xml:"DeWatermark,omitempty"`
	M3U8NonStandardSupport *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport `json:"M3U8NonStandardSupport,omitempty" xml:"M3U8NonStandardSupport,omitempty" type:"Struct"`
	Priority               *string                                                                      `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Audio                  *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio                  `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	AudioStreamMap         *string                                                                      `json:"AudioStreamMap,omitempty" xml:"AudioStreamMap,omitempty"`
	MergeList              *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList              `json:"MergeList,omitempty" xml:"MergeList,omitempty" type:"Struct"`
	SuperReso              *SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso              `json:"SuperReso,omitempty" xml:"SuperReso,omitempty" type:"Struct"`
	UserData               *string                                                                      `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OutSubtitleList        *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList        `json:"OutSubtitleList,omitempty" xml:"OutSubtitleList,omitempty" type:"Struct"`
	DigiWaterMark          *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark          `json:"DigiWaterMark,omitempty" xml:"DigiWaterMark,omitempty" type:"Struct"`
	VideoStreamMap         *string                                                                      `json:"VideoStreamMap,omitempty" xml:"VideoStreamMap,omitempty"`
	OutputFile             *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile             `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	AmixList               *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList               `json:"AmixList,omitempty" xml:"AmixList,omitempty" type:"Struct"`
	Rotate                 *string                                                                      `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Container              *SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer              `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
	Clip                   *SubmitJobsResponseBodyJobResultListJobResultJobOutputClip                   `json:"Clip,omitempty" xml:"Clip,omitempty" type:"Struct"`
	MergeConfigUrl         *string                                                                      `json:"MergeConfigUrl,omitempty" xml:"MergeConfigUrl,omitempty"`
	OpeningList            *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList            `json:"OpeningList,omitempty" xml:"OpeningList,omitempty" type:"Struct"`
	MuxConfig              *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig              `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	TailSlateList          *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList          `json:"TailSlateList,omitempty" xml:"TailSlateList,omitempty" type:"Struct"`
	TemplateId             *string                                                                      `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	SubtitleConfig         *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig         `json:"SubtitleConfig,omitempty" xml:"SubtitleConfig,omitempty" type:"Struct"`
	Properties             *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties             `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutput) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutput) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetVideo(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Video = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetTransConfig(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.TransConfig = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetEncryption(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Encryption = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetWaterMarkList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.WaterMarkList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetWaterMarkConfigUrl(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.WaterMarkConfigUrl = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetDeWatermark(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.DeWatermark = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetM3U8NonStandardSupport(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.M3U8NonStandardSupport = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetPriority(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Priority = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetAudio(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Audio = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetAudioStreamMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.AudioStreamMap = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetMergeList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.MergeList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetSuperReso(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.SuperReso = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetUserData(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.UserData = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetOutSubtitleList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.OutSubtitleList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetDigiWaterMark(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.DigiWaterMark = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetVideoStreamMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.VideoStreamMap = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetOutputFile(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.OutputFile = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetAmixList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.AmixList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetRotate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Rotate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetContainer(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Container = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetClip(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputClip) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Clip = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetMergeConfigUrl(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.MergeConfigUrl = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetOpeningList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.OpeningList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetMuxConfig(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.MuxConfig = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetTailSlateList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.TailSlateList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetTemplateId(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.TemplateId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetSubtitleConfig(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.SubtitleConfig = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutput) SetProperties(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) *SubmitJobsResponseBodyJobResultListJobResultJobOutput {
	s.Properties = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo struct {
	Bufsize      *string                                                               `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain      *string                                                               `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd   *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt       *string                                                               `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad          *string                                                               `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec        *string                                                               `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height       *string                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale       *string                                                               `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop         *string                                                               `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate      *string                                                               `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate      *string                                                               `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps       *string                                                               `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile      *string                                                               `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf          *string                                                               `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop          *string                                                               `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width        *string                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps          *string                                                               `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset       *string                                                               `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode     *string                                                               `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	ResoPriority *string                                                               `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetBufsize(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetDegrain(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Degrain = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetBitrateBnd(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.BitrateBnd = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetPixFmt(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetPad(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Pad = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetCodec(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Codec = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetQscale(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Qscale = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetCrop(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Crop = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetMaxrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetMaxFps(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.MaxFps = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetProfile(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Profile = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetCrf(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Crf = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetGop(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Gop = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Width = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetFps(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Fps = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetPreset(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.Preset = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetScanMode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.ScanMode = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo) SetResoPriority(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideo {
	s.ResoPriority = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) SetMax(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd) SetMin(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputVideoBitrateBnd {
	s.Min = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckAudioBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetTransMode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.TransMode = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckReso(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckVideoBitrateFail(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetAdjDarMethod(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckVideoBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckResoFail(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig) SetIsCheckAudioBitrateFail(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption struct {
	Type    *string `json:"Type,omitempty" xml:"Type,omitempty"`
	Key     *string `json:"Key,omitempty" xml:"Key,omitempty"`
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	Id      *string `json:"Id,omitempty" xml:"Id,omitempty"`
	KeyUri  *string `json:"KeyUri,omitempty" xml:"KeyUri,omitempty"`
	SkipCnt *string `json:"SkipCnt,omitempty" xml:"SkipCnt,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetType(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.Type = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetKey(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.Key = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetKeyType(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.KeyType = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetId(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.Id = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetKeyUri(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.KeyUri = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption) SetSkipCnt(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputEncryption {
	s.SkipCnt = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList struct {
	WaterMark []*SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark `json:"WaterMark,omitempty" xml:"WaterMark,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList) SetWaterMark(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkList {
	s.WaterMark = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark struct {
	Type                *string                                                                               `json:"Type,omitempty" xml:"Type,omitempty"`
	ReferPos            *string                                                                               `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	Dx                  *string                                                                               `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width               *string                                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
	Height              *string                                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	InputFile           *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	WaterMarkTemplateId *string                                                                               `json:"WaterMarkTemplateId,omitempty" xml:"WaterMarkTemplateId,omitempty"`
	Dy                  *string                                                                               `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetType(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Type = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetReferPos(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.ReferPos = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetDx(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Dx = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Width = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetInputFile(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.InputFile = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetWaterMarkTemplateId(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.WaterMarkTemplateId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark) SetDy(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMark {
	s.Dy = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputWaterMarkListWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport struct {
	TS *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS `json:"TS,omitempty" xml:"TS,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport) SetTS(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupport {
	s.TS = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS struct {
	SizeSupport *bool `json:"SizeSupport,omitempty" xml:"SizeSupport,omitempty"`
	Md5Support  *bool `json:"Md5Support,omitempty" xml:"Md5Support,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) SetSizeSupport(v bool) *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS {
	s.SizeSupport = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS) SetMd5Support(v bool) *SubmitJobsResponseBodyJobResultListJobResultJobOutputM3U8NonStandardSupportTS {
	s.Md5Support = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio struct {
	Profile    *string                                                           `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string                                                           `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string                                                           `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string                                                           `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string                                                           `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Volume     *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume `json:"Volume,omitempty" xml:"Volume,omitempty" type:"Struct"`
	Bitrate    *string                                                           `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetProfile(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Profile = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetCodec(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Codec = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetSamplerate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetQscale(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Qscale = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetChannels(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Channels = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetVolume(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Volume = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudio {
	s.Bitrate = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume struct {
	Method *string `json:"Method,omitempty" xml:"Method,omitempty"`
	Level  *string `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) SetMethod(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume {
	s.Method = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume) SetLevel(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAudioVolume {
	s.Level = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList struct {
	Merge []*SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge `json:"Merge,omitempty" xml:"Merge,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList) SetMerge(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeList {
	s.Merge = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	MergeURL *string `json:"MergeURL,omitempty" xml:"MergeURL,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) SetStart(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge {
	s.Start = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) SetRoleArn(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge {
	s.RoleArn = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) SetMergeURL(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge {
	s.MergeURL = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMergeListMerge {
	s.Duration = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso struct {
	IsHalfSample *string `json:"IsHalfSample,omitempty" xml:"IsHalfSample,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso) SetIsHalfSample(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSuperReso {
	s.IsHalfSample = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList struct {
	OutSubtitle []*SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle `json:"OutSubtitle,omitempty" xml:"OutSubtitle,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList) SetOutSubtitle(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleList {
	s.OutSubtitle = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle struct {
	Map             *string                                                                                         `json:"Map,omitempty" xml:"Map,omitempty"`
	OutSubtitleFile *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile `json:"OutSubtitleFile,omitempty" xml:"OutSubtitleFile,omitempty" type:"Struct"`
	Success         *bool                                                                                           `json:"Success,omitempty" xml:"Success,omitempty"`
	Message         *string                                                                                         `json:"Message,omitempty" xml:"Message,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) SetMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle {
	s.Map = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) SetOutSubtitleFile(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle {
	s.OutSubtitleFile = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) SetSuccess(v bool) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle {
	s.Success = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle) SetMessage(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitle {
	s.Message = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetRoleArn(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Object = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutSubtitleListOutSubtitleOutSubtitleFile {
	s.Bucket = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark struct {
	Type      *string                                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	Alpha     *string                                                                      `json:"Alpha,omitempty" xml:"Alpha,omitempty"`
	InputFile *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) SetType(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark {
	s.Type = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) SetAlpha(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark {
	s.Alpha = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark) SetInputFile(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMark {
	s.InputFile = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile {
	s.Object = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputDigiWaterMarkInputFile {
	s.Bucket = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) SetRoleArn(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOutputFile {
	s.Bucket = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList struct {
	Amix []*SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix `json:"Amix,omitempty" xml:"Amix,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList) SetAmix(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixList {
	s.Amix = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix struct {
	Map        *string `json:"Map,omitempty" xml:"Map,omitempty"`
	Start      *string `json:"Start,omitempty" xml:"Start,omitempty"`
	AmixURL    *string `json:"AmixURL,omitempty" xml:"AmixURL,omitempty"`
	Duration   *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	MixDurMode *string `json:"MixDurMode,omitempty" xml:"MixDurMode,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.Map = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetStart(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.Start = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetAmixURL(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.AmixURL = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix) SetMixDurMode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputAmixListAmix {
	s.MixDurMode = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer) SetFormat(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputContainer {
	s.Format = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputClip struct {
	TimeSpan *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan `json:"TimeSpan,omitempty" xml:"TimeSpan,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputClip) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputClip) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputClip) SetTimeSpan(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) *SubmitJobsResponseBodyJobResultListJobResultJobOutputClip {
	s.TimeSpan = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan struct {
	Seek     *string `json:"Seek,omitempty" xml:"Seek,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) SetSeek(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan {
	s.Seek = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputClipTimeSpan {
	s.Duration = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList struct {
	Opening []*SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening `json:"Opening,omitempty" xml:"Opening,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList) SetOpening(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningList {
	s.Opening = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening struct {
	OpenUrl *string `json:"openUrl,omitempty" xml:"openUrl,omitempty"`
	Start   *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Width   *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height  *string `json:"Height,omitempty" xml:"Height,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) SetOpenUrl(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening {
	s.OpenUrl = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) SetStart(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening {
	s.Start = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening {
	s.Width = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputOpeningListOpening {
	s.Height = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig struct {
	Webp    *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
	Gif     *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) SetWebp(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig {
	s.Webp = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) SetGif(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig {
	s.Gif = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig) SetSegment(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfig {
	s.Segment = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp) SetLoop(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigWebp {
	s.Loop = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) SetFinalDelay(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) SetDitherMode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) SetLoop(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif) SetIsCustomPalette(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputMuxConfigSegment {
	s.Duration = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList struct {
	TailSlate []*SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate `json:"TailSlate,omitempty" xml:"TailSlate,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList) SetTailSlate(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateList {
	s.TailSlate = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate struct {
	Start         *string `json:"Start,omitempty" xml:"Start,omitempty"`
	BgColor       *string `json:"BgColor,omitempty" xml:"BgColor,omitempty"`
	IsMergeAudio  *bool   `json:"IsMergeAudio,omitempty" xml:"IsMergeAudio,omitempty"`
	Width         *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height        *string `json:"Height,omitempty" xml:"Height,omitempty"`
	BlendDuration *string `json:"BlendDuration,omitempty" xml:"BlendDuration,omitempty"`
	TailUrl       *string `json:"TailUrl,omitempty" xml:"TailUrl,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetStart(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.Start = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetBgColor(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.BgColor = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetIsMergeAudio(v bool) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.IsMergeAudio = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.Width = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetBlendDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.BlendDuration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate) SetTailUrl(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputTailSlateListTailSlate {
	s.TailUrl = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig struct {
	ExtSubtitleList *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList `json:"ExtSubtitleList,omitempty" xml:"ExtSubtitleList,omitempty" type:"Struct"`
	SubtitleList    *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList    `json:"SubtitleList,omitempty" xml:"SubtitleList,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) SetExtSubtitleList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig {
	s.ExtSubtitleList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig) SetSubtitleList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfig {
	s.SubtitleList = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList struct {
	ExtSubtitle []*SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle `json:"ExtSubtitle,omitempty" xml:"ExtSubtitle,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList) SetExtSubtitle(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleList {
	s.ExtSubtitle = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle struct {
	CharEnc  *string                                                                                             `json:"CharEnc,omitempty" xml:"CharEnc,omitempty"`
	FontName *string                                                                                             `json:"FontName,omitempty" xml:"FontName,omitempty"`
	Input    *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetCharEnc(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.CharEnc = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetFontName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.FontName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle) SetInput(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitle {
	s.Input = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Object = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigExtSubtitleListExtSubtitleInput {
	s.Bucket = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList struct {
	Subtitle []*SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle `json:"Subtitle,omitempty" xml:"Subtitle,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList) SetSubtitle(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleList {
	s.Subtitle = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle struct {
	Map *string `json:"Map,omitempty" xml:"Map,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle) SetMap(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputSubtitleConfigSubtitleListSubtitle {
	s.Map = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties struct {
	Width      *string                                                                 `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                                 `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                                 `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                                 `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                                 `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                                 `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                                 `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Width = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetFps(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Fps = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetFileFormat(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.FileFormat = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetStreams(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Streams = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetFormat(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.Format = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties) SetFileSize(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputProperties {
	s.FileSize = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams struct {
	VideoStreamList    *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) SetVideoStreamList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) SetAudioStreamList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams) SetSubtitleStreamList(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList struct {
	VideoStream []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList) SetVideoStream(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream struct {
	Index          *string                                                                                                      `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                                      `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                                      `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                                      `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Sar            *string                                                                                                      `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Lang           *string                                                                                                      `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                                      `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Height         *string                                                                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	NumFrames      *string                                                                                                      `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string                                                                                                      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string                                                                                                      `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	HasBFrames     *string                                                                                                      `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                                      `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                                      `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NetworkCost    *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Dar            *string                                                                                                      `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                                      `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Width          *string                                                                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
	Duration       *string                                                                                                      `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                                      `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                                      `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                                      `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                                      `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList struct {
	AudioStream []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList) SetAudioStream(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Index *string `json:"Index,omitempty" xml:"Index,omitempty"`
	Lang  *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetStartTime(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetNumPrograms(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetSize(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.Size = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetNumStreams(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetFormatLongName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetDuration(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetBitrate(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat) SetFormatName(v string) *SubmitJobsResponseBodyJobResultListJobResultJobOutputPropertiesFormat {
	s.FormatName = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobInput) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobInput) SetObject(v string) *SubmitJobsResponseBodyJobResultListJobResultJobInput {
	s.Object = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobInput) SetLocation(v string) *SubmitJobsResponseBodyJobResultListJobResultJobInput {
	s.Location = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobInput) SetBucket(v string) *SubmitJobsResponseBodyJobResultListJobResultJobInput {
	s.Bucket = &v
	return s
}

type SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetMessageId(v string) *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetErrorMessage(v string) *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult) SetErrorCode(v string) *SubmitJobsResponseBodyJobResultListJobResultJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type SubmitJobsResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitJobsResponse) GoString() string {
	return s.String()
}

func (s *SubmitJobsResponse) SetHeaders(v map[string]*string) *SubmitJobsResponse {
	s.Headers = v
	return s
}

func (s *SubmitJobsResponse) SetBody(v *SubmitJobsResponseBody) *SubmitJobsResponse {
	s.Body = v
	return s
}

type RefreshCdnDomainConfigsCacheRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Domains              *string `json:"Domains,omitempty" xml:"Domains,omitempty"`
}

func (s RefreshCdnDomainConfigsCacheRequest) String() string {
	return tea.Prettify(s)
}

func (s RefreshCdnDomainConfigsCacheRequest) GoString() string {
	return s.String()
}

func (s *RefreshCdnDomainConfigsCacheRequest) SetOwnerId(v string) *RefreshCdnDomainConfigsCacheRequest {
	s.OwnerId = &v
	return s
}

func (s *RefreshCdnDomainConfigsCacheRequest) SetResourceOwnerId(v string) *RefreshCdnDomainConfigsCacheRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RefreshCdnDomainConfigsCacheRequest) SetResourceOwnerAccount(v string) *RefreshCdnDomainConfigsCacheRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RefreshCdnDomainConfigsCacheRequest) SetOwnerAccount(v string) *RefreshCdnDomainConfigsCacheRequest {
	s.OwnerAccount = &v
	return s
}

func (s *RefreshCdnDomainConfigsCacheRequest) SetDomains(v string) *RefreshCdnDomainConfigsCacheRequest {
	s.Domains = &v
	return s
}

type RefreshCdnDomainConfigsCacheResponseBody struct {
	SucessDomains *RefreshCdnDomainConfigsCacheResponseBodySucessDomains `json:"SucessDomains,omitempty" xml:"SucessDomains,omitempty" type:"Struct"`
	FailedDomains *RefreshCdnDomainConfigsCacheResponseBodyFailedDomains `json:"FailedDomains,omitempty" xml:"FailedDomains,omitempty" type:"Struct"`
	RequestId     *string                                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RefreshCdnDomainConfigsCacheResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RefreshCdnDomainConfigsCacheResponseBody) GoString() string {
	return s.String()
}

func (s *RefreshCdnDomainConfigsCacheResponseBody) SetSucessDomains(v *RefreshCdnDomainConfigsCacheResponseBodySucessDomains) *RefreshCdnDomainConfigsCacheResponseBody {
	s.SucessDomains = v
	return s
}

func (s *RefreshCdnDomainConfigsCacheResponseBody) SetFailedDomains(v *RefreshCdnDomainConfigsCacheResponseBodyFailedDomains) *RefreshCdnDomainConfigsCacheResponseBody {
	s.FailedDomains = v
	return s
}

func (s *RefreshCdnDomainConfigsCacheResponseBody) SetRequestId(v string) *RefreshCdnDomainConfigsCacheResponseBody {
	s.RequestId = &v
	return s
}

type RefreshCdnDomainConfigsCacheResponseBodySucessDomains struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s RefreshCdnDomainConfigsCacheResponseBodySucessDomains) String() string {
	return tea.Prettify(s)
}

func (s RefreshCdnDomainConfigsCacheResponseBodySucessDomains) GoString() string {
	return s.String()
}

func (s *RefreshCdnDomainConfigsCacheResponseBodySucessDomains) SetString_(v []*string) *RefreshCdnDomainConfigsCacheResponseBodySucessDomains {
	s.String_ = v
	return s
}

type RefreshCdnDomainConfigsCacheResponseBodyFailedDomains struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s RefreshCdnDomainConfigsCacheResponseBodyFailedDomains) String() string {
	return tea.Prettify(s)
}

func (s RefreshCdnDomainConfigsCacheResponseBodyFailedDomains) GoString() string {
	return s.String()
}

func (s *RefreshCdnDomainConfigsCacheResponseBodyFailedDomains) SetString_(v []*string) *RefreshCdnDomainConfigsCacheResponseBodyFailedDomains {
	s.String_ = v
	return s
}

type RefreshCdnDomainConfigsCacheResponse struct {
	Headers map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RefreshCdnDomainConfigsCacheResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RefreshCdnDomainConfigsCacheResponse) String() string {
	return tea.Prettify(s)
}

func (s RefreshCdnDomainConfigsCacheResponse) GoString() string {
	return s.String()
}

func (s *RefreshCdnDomainConfigsCacheResponse) SetHeaders(v map[string]*string) *RefreshCdnDomainConfigsCacheResponse {
	s.Headers = v
	return s
}

func (s *RefreshCdnDomainConfigsCacheResponse) SetBody(v *RefreshCdnDomainConfigsCacheResponseBody) *RefreshCdnDomainConfigsCacheResponse {
	s.Body = v
	return s
}

type QueryFpFileDeleteJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryFpFileDeleteJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFpFileDeleteJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryFpFileDeleteJobListRequest) SetOwnerId(v int64) *QueryFpFileDeleteJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFpFileDeleteJobListRequest) SetResourceOwnerAccount(v string) *QueryFpFileDeleteJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFpFileDeleteJobListRequest) SetResourceOwnerId(v int64) *QueryFpFileDeleteJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryFpFileDeleteJobListRequest) SetJobIds(v string) *QueryFpFileDeleteJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryFpFileDeleteJobListRequest) SetOwnerAccount(v string) *QueryFpFileDeleteJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryFpFileDeleteJobListResponseBody struct {
	RequestId           *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	FpFileDeleteJobList *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobList `json:"FpFileDeleteJobList,omitempty" xml:"FpFileDeleteJobList,omitempty" type:"Struct"`
	NonExistIds         *QueryFpFileDeleteJobListResponseBodyNonExistIds         `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryFpFileDeleteJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFpFileDeleteJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFpFileDeleteJobListResponseBody) SetRequestId(v string) *QueryFpFileDeleteJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBody) SetFpFileDeleteJobList(v *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobList) *QueryFpFileDeleteJobListResponseBody {
	s.FpFileDeleteJobList = v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBody) SetNonExistIds(v *QueryFpFileDeleteJobListResponseBodyNonExistIds) *QueryFpFileDeleteJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobList struct {
	FpFileDeleteJob []*QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob `json:"FpFileDeleteJob,omitempty" xml:"FpFileDeleteJob,omitempty" type:"Repeated"`
}

func (s QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobList) GoString() string {
	return s.String()
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobList) SetFpFileDeleteJob(v []*QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobList {
	s.FpFileDeleteJob = v
	return s
}

type QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob struct {
	CreationTime *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Status       *string `json:"Status,omitempty" xml:"Status,omitempty"`
	FinishTime   *string `json:"FinishTime,omitempty" xml:"FinishTime,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code         *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Message      *string `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId   *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	FpDBId       *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	Id           *string `json:"Id,omitempty" xml:"Id,omitempty"`
	FileIds      *string `json:"FileIds,omitempty" xml:"FileIds,omitempty"`
}

func (s QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) String() string {
	return tea.Prettify(s)
}

func (s QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) GoString() string {
	return s.String()
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetCreationTime(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.CreationTime = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetStatus(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.Status = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetFinishTime(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.FinishTime = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetUserData(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.UserData = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetCode(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.Code = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetMessage(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.Message = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetPipelineId(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.PipelineId = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetFpDBId(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.FpDBId = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetId(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.Id = &v
	return s
}

func (s *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob) SetFileIds(v string) *QueryFpFileDeleteJobListResponseBodyFpFileDeleteJobListFpFileDeleteJob {
	s.FileIds = &v
	return s
}

type QueryFpFileDeleteJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryFpFileDeleteJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryFpFileDeleteJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryFpFileDeleteJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryFpFileDeleteJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryFpFileDeleteJobListResponse struct {
	Headers map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryFpFileDeleteJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryFpFileDeleteJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFpFileDeleteJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryFpFileDeleteJobListResponse) SetHeaders(v map[string]*string) *QueryFpFileDeleteJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryFpFileDeleteJobListResponse) SetBody(v *QueryFpFileDeleteJobListResponseBody) *QueryFpFileDeleteJobListResponse {
	s.Body = v
	return s
}

type SubmitImageSearchJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	InputVideo           *string `json:"InputVideo,omitempty" xml:"InputVideo,omitempty"`
	InputImage           *string `json:"InputImage,omitempty" xml:"InputImage,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	FpDBId               *string `json:"FpDBId,omitempty" xml:"FpDBId,omitempty"`
	Config               *string `json:"Config,omitempty" xml:"Config,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitImageSearchJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageSearchJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitImageSearchJobRequest) SetOwnerId(v int64) *SubmitImageSearchJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetResourceOwnerAccount(v string) *SubmitImageSearchJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetResourceOwnerId(v int64) *SubmitImageSearchJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetInputVideo(v string) *SubmitImageSearchJobRequest {
	s.InputVideo = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetInputImage(v string) *SubmitImageSearchJobRequest {
	s.InputImage = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetPipelineId(v string) *SubmitImageSearchJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetFpDBId(v string) *SubmitImageSearchJobRequest {
	s.FpDBId = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetConfig(v string) *SubmitImageSearchJobRequest {
	s.Config = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetUserData(v string) *SubmitImageSearchJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitImageSearchJobRequest) SetOwnerAccount(v string) *SubmitImageSearchJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitImageSearchJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitImageSearchJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageSearchJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitImageSearchJobResponseBody) SetRequestId(v string) *SubmitImageSearchJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitImageSearchJobResponseBody) SetJobId(v string) *SubmitImageSearchJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitImageSearchJobResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitImageSearchJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitImageSearchJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitImageSearchJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitImageSearchJobResponse) SetHeaders(v map[string]*string) *SubmitImageSearchJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitImageSearchJobResponse) SetBody(v *SubmitImageSearchJobResponseBody) *SubmitImageSearchJobResponse {
	s.Body = v
	return s
}

type UpdateMediaWorkflowTriggerModeRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	MediaWorkflowId      *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	TriggerMode          *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateMediaWorkflowTriggerModeRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowTriggerModeRequest) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetOwnerId(v int64) *UpdateMediaWorkflowTriggerModeRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetResourceOwnerAccount(v string) *UpdateMediaWorkflowTriggerModeRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetResourceOwnerId(v int64) *UpdateMediaWorkflowTriggerModeRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetMediaWorkflowId(v string) *UpdateMediaWorkflowTriggerModeRequest {
	s.MediaWorkflowId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetTriggerMode(v string) *UpdateMediaWorkflowTriggerModeRequest {
	s.TriggerMode = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeRequest) SetOwnerAccount(v string) *UpdateMediaWorkflowTriggerModeRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateMediaWorkflowTriggerModeResponseBody struct {
	RequestId     *string                                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	MediaWorkflow *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow `json:"MediaWorkflow,omitempty" xml:"MediaWorkflow,omitempty" type:"Struct"`
}

func (s UpdateMediaWorkflowTriggerModeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowTriggerModeResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowTriggerModeResponseBody) SetRequestId(v string) *UpdateMediaWorkflowTriggerModeResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBody) SetMediaWorkflow(v *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) *UpdateMediaWorkflowTriggerModeResponseBody {
	s.MediaWorkflow = v
	return s
}

type UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow struct {
	CreationTime    *string `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	MediaWorkflowId *string `json:"MediaWorkflowId,omitempty" xml:"MediaWorkflowId,omitempty"`
	State           *string `json:"State,omitempty" xml:"State,omitempty"`
	TriggerMode     *string `json:"TriggerMode,omitempty" xml:"TriggerMode,omitempty"`
	Name            *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Topology        *string `json:"Topology,omitempty" xml:"Topology,omitempty"`
}

func (s UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetCreationTime(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.CreationTime = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetMediaWorkflowId(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.MediaWorkflowId = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetState(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.State = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetTriggerMode(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.TriggerMode = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetName(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.Name = &v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow) SetTopology(v string) *UpdateMediaWorkflowTriggerModeResponseBodyMediaWorkflow {
	s.Topology = &v
	return s
}

type UpdateMediaWorkflowTriggerModeResponse struct {
	Headers map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateMediaWorkflowTriggerModeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateMediaWorkflowTriggerModeResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateMediaWorkflowTriggerModeResponse) GoString() string {
	return s.String()
}

func (s *UpdateMediaWorkflowTriggerModeResponse) SetHeaders(v map[string]*string) *UpdateMediaWorkflowTriggerModeResponse {
	s.Headers = v
	return s
}

func (s *UpdateMediaWorkflowTriggerModeResponse) SetBody(v *UpdateMediaWorkflowTriggerModeResponseBody) *UpdateMediaWorkflowTriggerModeResponse {
	s.Body = v
	return s
}

type SetAuthConfigRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	Key1                 *string `json:"Key1,omitempty" xml:"Key1,omitempty"`
	Key2                 *string `json:"Key2,omitempty" xml:"Key2,omitempty"`
}

func (s SetAuthConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s SetAuthConfigRequest) GoString() string {
	return s.String()
}

func (s *SetAuthConfigRequest) SetOwnerId(v string) *SetAuthConfigRequest {
	s.OwnerId = &v
	return s
}

func (s *SetAuthConfigRequest) SetResourceOwnerId(v string) *SetAuthConfigRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SetAuthConfigRequest) SetResourceOwnerAccount(v string) *SetAuthConfigRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SetAuthConfigRequest) SetOwnerAccount(v string) *SetAuthConfigRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SetAuthConfigRequest) SetKey1(v string) *SetAuthConfigRequest {
	s.Key1 = &v
	return s
}

func (s *SetAuthConfigRequest) SetKey2(v string) *SetAuthConfigRequest {
	s.Key2 = &v
	return s
}

type SetAuthConfigResponseBody struct {
	Key2      *string `json:"Key2,omitempty" xml:"Key2,omitempty"`
	Key1      *string `json:"Key1,omitempty" xml:"Key1,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s SetAuthConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetAuthConfigResponseBody) GoString() string {
	return s.String()
}

func (s *SetAuthConfigResponseBody) SetKey2(v string) *SetAuthConfigResponseBody {
	s.Key2 = &v
	return s
}

func (s *SetAuthConfigResponseBody) SetKey1(v string) *SetAuthConfigResponseBody {
	s.Key1 = &v
	return s
}

func (s *SetAuthConfigResponseBody) SetRequestId(v string) *SetAuthConfigResponseBody {
	s.RequestId = &v
	return s
}

type SetAuthConfigResponse struct {
	Headers map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SetAuthConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetAuthConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s SetAuthConfigResponse) GoString() string {
	return s.String()
}

func (s *SetAuthConfigResponse) SetHeaders(v map[string]*string) *SetAuthConfigResponse {
	s.Headers = v
	return s
}

func (s *SetAuthConfigResponse) SetBody(v *SetAuthConfigResponseBody) *SetAuthConfigResponse {
	s.Body = v
	return s
}

type UpdateCensorPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateCensorPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCensorPipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdateCensorPipelineRequest) SetOwnerId(v int64) *UpdateCensorPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCensorPipelineRequest) SetResourceOwnerAccount(v string) *UpdateCensorPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateCensorPipelineRequest) SetResourceOwnerId(v int64) *UpdateCensorPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateCensorPipelineRequest) SetPipelineId(v string) *UpdateCensorPipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdateCensorPipelineRequest) SetName(v string) *UpdateCensorPipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdateCensorPipelineRequest) SetState(v string) *UpdateCensorPipelineRequest {
	s.State = &v
	return s
}

func (s *UpdateCensorPipelineRequest) SetPriority(v int32) *UpdateCensorPipelineRequest {
	s.Priority = &v
	return s
}

func (s *UpdateCensorPipelineRequest) SetNotifyConfig(v string) *UpdateCensorPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *UpdateCensorPipelineRequest) SetOwnerAccount(v string) *UpdateCensorPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateCensorPipelineResponseBody struct {
	RequestId *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *UpdateCensorPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s UpdateCensorPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCensorPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCensorPipelineResponseBody) SetRequestId(v string) *UpdateCensorPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCensorPipelineResponseBody) SetPipeline(v *UpdateCensorPipelineResponseBodyPipeline) *UpdateCensorPipelineResponseBody {
	s.Pipeline = v
	return s
}

type UpdateCensorPipelineResponseBodyPipeline struct {
	State        *string                                               `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *UpdateCensorPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                                `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                               `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                               `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateCensorPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s UpdateCensorPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *UpdateCensorPipelineResponseBodyPipeline) SetState(v string) *UpdateCensorPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *UpdateCensorPipelineResponseBodyPipeline) SetNotifyConfig(v *UpdateCensorPipelineResponseBodyPipelineNotifyConfig) *UpdateCensorPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *UpdateCensorPipelineResponseBodyPipeline) SetPriority(v int32) *UpdateCensorPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *UpdateCensorPipelineResponseBodyPipeline) SetName(v string) *UpdateCensorPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *UpdateCensorPipelineResponseBodyPipeline) SetId(v string) *UpdateCensorPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type UpdateCensorPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s UpdateCensorPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateCensorPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *UpdateCensorPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *UpdateCensorPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *UpdateCensorPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *UpdateCensorPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type UpdateCensorPipelineResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateCensorPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCensorPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCensorPipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdateCensorPipelineResponse) SetHeaders(v map[string]*string) *UpdateCensorPipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdateCensorPipelineResponse) SetBody(v *UpdateCensorPipelineResponseBody) *UpdateCensorPipelineResponse {
	s.Body = v
	return s
}

type SubmitSnapshotJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	SnapshotConfig       *string `json:"SnapshotConfig,omitempty" xml:"SnapshotConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitSnapshotJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobRequest) SetOwnerId(v int64) *SubmitSnapshotJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetResourceOwnerAccount(v string) *SubmitSnapshotJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetResourceOwnerId(v int64) *SubmitSnapshotJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetInput(v string) *SubmitSnapshotJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetSnapshotConfig(v string) *SubmitSnapshotJobRequest {
	s.SnapshotConfig = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetUserData(v string) *SubmitSnapshotJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetPipelineId(v string) *SubmitSnapshotJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitSnapshotJobRequest) SetOwnerAccount(v string) *SubmitSnapshotJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitSnapshotJobResponseBody struct {
	RequestId   *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SnapshotJob *SubmitSnapshotJobResponseBodySnapshotJob `json:"SnapshotJob,omitempty" xml:"SnapshotJob,omitempty" type:"Struct"`
}

func (s SubmitSnapshotJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBody) SetRequestId(v string) *SubmitSnapshotJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitSnapshotJobResponseBody) SetSnapshotJob(v *SubmitSnapshotJobResponseBodySnapshotJob) *SubmitSnapshotJobResponseBody {
	s.SnapshotJob = v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJob struct {
	CreationTime     *string                                                   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	SnapshotConfig   *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig   `json:"SnapshotConfig,omitempty" xml:"SnapshotConfig,omitempty" type:"Struct"`
	State            *string                                                   `json:"State,omitempty" xml:"State,omitempty"`
	Message          *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	MNSMessageResult *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Input            *SubmitSnapshotJobResponseBodySnapshotJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Count            *string                                                   `json:"Count,omitempty" xml:"Count,omitempty"`
	TileCount        *string                                                   `json:"TileCount,omitempty" xml:"TileCount,omitempty"`
	UserData         *string                                                   `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	PipelineId       *string                                                   `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Id               *string                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJob) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetCreationTime(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetSnapshotConfig(v *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.SnapshotConfig = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetState(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.State = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetMessage(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Message = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetMNSMessageResult(v *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetInput(v *SubmitSnapshotJobResponseBodySnapshotJobInput) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Input = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetCount(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Count = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetTileCount(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.TileCount = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetUserData(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.UserData = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetCode(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Code = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetPipelineId(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJob) SetId(v string) *SubmitSnapshotJobResponseBodySnapshotJob {
	s.Id = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig struct {
	Time           *string                                                               `json:"Time,omitempty" xml:"Time,omitempty"`
	TileOut        *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut        `json:"TileOut,omitempty" xml:"TileOut,omitempty" type:"Struct"`
	Interval       *string                                                               `json:"Interval,omitempty" xml:"Interval,omitempty"`
	FrameType      *string                                                               `json:"FrameType,omitempty" xml:"FrameType,omitempty"`
	Width          *string                                                               `json:"Width,omitempty" xml:"Width,omitempty"`
	Height         *string                                                               `json:"Height,omitempty" xml:"Height,omitempty"`
	OutputFile     *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile     `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
	Num            *string                                                               `json:"Num,omitempty" xml:"Num,omitempty"`
	TileOutputFile *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile `json:"TileOutputFile,omitempty" xml:"TileOutputFile,omitempty" type:"Struct"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetTime(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Time = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetTileOut(v *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.TileOut = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetInterval(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Interval = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetFrameType(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.FrameType = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetWidth(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Width = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetHeight(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Height = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetOutputFile(v *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.OutputFile = v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetNum(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.Num = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig) SetTileOutputFile(v *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfig {
	s.TileOutputFile = v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut struct {
	Padding       *string `json:"Padding,omitempty" xml:"Padding,omitempty"`
	Color         *string `json:"Color,omitempty" xml:"Color,omitempty"`
	CellSelStep   *string `json:"CellSelStep,omitempty" xml:"CellSelStep,omitempty"`
	CellHeight    *string `json:"CellHeight,omitempty" xml:"CellHeight,omitempty"`
	CellWidth     *string `json:"CellWidth,omitempty" xml:"CellWidth,omitempty"`
	Margin        *string `json:"Margin,omitempty" xml:"Margin,omitempty"`
	Columns       *string `json:"Columns,omitempty" xml:"Columns,omitempty"`
	IsKeepCellPic *string `json:"IsKeepCellPic,omitempty" xml:"IsKeepCellPic,omitempty"`
	Lines         *string `json:"Lines,omitempty" xml:"Lines,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetPadding(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Padding = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetColor(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Color = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetCellSelStep(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.CellSelStep = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetCellHeight(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.CellHeight = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetCellWidth(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.CellWidth = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetMargin(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Margin = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetColumns(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Columns = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetIsKeepCellPic(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.IsKeepCellPic = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut) SetLines(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOut {
	s.Lines = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) SetRoleArn(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) SetObject(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) SetLocation(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile) SetBucket(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigOutputFile {
	s.Bucket = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) SetRoleArn(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile {
	s.RoleArn = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) SetObject(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile {
	s.Object = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) SetLocation(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile {
	s.Location = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile) SetBucket(v string) *SubmitSnapshotJobResponseBodySnapshotJobSnapshotConfigTileOutputFile {
	s.Bucket = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) SetMessageId(v string) *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) SetErrorMessage(v string) *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult) SetErrorCode(v string) *SubmitSnapshotJobResponseBodySnapshotJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type SubmitSnapshotJobResponseBodySnapshotJobInput struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitSnapshotJobResponseBodySnapshotJobInput) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponseBodySnapshotJobInput) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobInput) SetRoleArn(v string) *SubmitSnapshotJobResponseBodySnapshotJobInput {
	s.RoleArn = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobInput) SetObject(v string) *SubmitSnapshotJobResponseBodySnapshotJobInput {
	s.Object = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobInput) SetLocation(v string) *SubmitSnapshotJobResponseBodySnapshotJobInput {
	s.Location = &v
	return s
}

func (s *SubmitSnapshotJobResponseBodySnapshotJobInput) SetBucket(v string) *SubmitSnapshotJobResponseBodySnapshotJobInput {
	s.Bucket = &v
	return s
}

type SubmitSnapshotJobResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitSnapshotJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitSnapshotJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSnapshotJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSnapshotJobResponse) SetHeaders(v map[string]*string) *SubmitSnapshotJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSnapshotJobResponse) SetBody(v *SubmitSnapshotJobResponseBody) *SubmitSnapshotJobResponse {
	s.Body = v
	return s
}

type ListCustomPersonsRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	CategoryId           *string `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	PersonId             *string `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
}

func (s ListCustomPersonsRequest) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsRequest) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsRequest) SetOwnerId(v int64) *ListCustomPersonsRequest {
	s.OwnerId = &v
	return s
}

func (s *ListCustomPersonsRequest) SetResourceOwnerAccount(v string) *ListCustomPersonsRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ListCustomPersonsRequest) SetResourceOwnerId(v int64) *ListCustomPersonsRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ListCustomPersonsRequest) SetOwnerAccount(v string) *ListCustomPersonsRequest {
	s.OwnerAccount = &v
	return s
}

func (s *ListCustomPersonsRequest) SetCategoryId(v string) *ListCustomPersonsRequest {
	s.CategoryId = &v
	return s
}

func (s *ListCustomPersonsRequest) SetPersonId(v string) *ListCustomPersonsRequest {
	s.PersonId = &v
	return s
}

type ListCustomPersonsResponseBody struct {
	RequestId  *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Categories *ListCustomPersonsResponseBodyCategories `json:"Categories,omitempty" xml:"Categories,omitempty" type:"Struct"`
}

func (s ListCustomPersonsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsResponseBody) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsResponseBody) SetRequestId(v string) *ListCustomPersonsResponseBody {
	s.RequestId = &v
	return s
}

func (s *ListCustomPersonsResponseBody) SetCategories(v *ListCustomPersonsResponseBodyCategories) *ListCustomPersonsResponseBody {
	s.Categories = v
	return s
}

type ListCustomPersonsResponseBodyCategories struct {
	Category []*ListCustomPersonsResponseBodyCategoriesCategory `json:"Category,omitempty" xml:"Category,omitempty" type:"Repeated"`
}

func (s ListCustomPersonsResponseBodyCategories) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsResponseBodyCategories) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsResponseBodyCategories) SetCategory(v []*ListCustomPersonsResponseBodyCategoriesCategory) *ListCustomPersonsResponseBodyCategories {
	s.Category = v
	return s
}

type ListCustomPersonsResponseBodyCategoriesCategory struct {
	Persons             *ListCustomPersonsResponseBodyCategoriesCategoryPersons `json:"Persons,omitempty" xml:"Persons,omitempty" type:"Struct"`
	CategoryId          *string                                                 `json:"CategoryId,omitempty" xml:"CategoryId,omitempty"`
	CategoryName        *string                                                 `json:"CategoryName,omitempty" xml:"CategoryName,omitempty"`
	CategoryDescription *string                                                 `json:"CategoryDescription,omitempty" xml:"CategoryDescription,omitempty"`
}

func (s ListCustomPersonsResponseBodyCategoriesCategory) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsResponseBodyCategoriesCategory) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsResponseBodyCategoriesCategory) SetPersons(v *ListCustomPersonsResponseBodyCategoriesCategoryPersons) *ListCustomPersonsResponseBodyCategoriesCategory {
	s.Persons = v
	return s
}

func (s *ListCustomPersonsResponseBodyCategoriesCategory) SetCategoryId(v string) *ListCustomPersonsResponseBodyCategoriesCategory {
	s.CategoryId = &v
	return s
}

func (s *ListCustomPersonsResponseBodyCategoriesCategory) SetCategoryName(v string) *ListCustomPersonsResponseBodyCategoriesCategory {
	s.CategoryName = &v
	return s
}

func (s *ListCustomPersonsResponseBodyCategoriesCategory) SetCategoryDescription(v string) *ListCustomPersonsResponseBodyCategoriesCategory {
	s.CategoryDescription = &v
	return s
}

type ListCustomPersonsResponseBodyCategoriesCategoryPersons struct {
	Person []*ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson `json:"Person,omitempty" xml:"Person,omitempty" type:"Repeated"`
}

func (s ListCustomPersonsResponseBodyCategoriesCategoryPersons) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsResponseBodyCategoriesCategoryPersons) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsResponseBodyCategoriesCategoryPersons) SetPerson(v []*ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson) *ListCustomPersonsResponseBodyCategoriesCategoryPersons {
	s.Person = v
	return s
}

type ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson struct {
	PersonName        *string                                                            `json:"PersonName,omitempty" xml:"PersonName,omitempty"`
	PersonDescription *string                                                            `json:"PersonDescription,omitempty" xml:"PersonDescription,omitempty"`
	Faces             *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFaces `json:"Faces,omitempty" xml:"Faces,omitempty" type:"Struct"`
	PersonId          *string                                                            `json:"PersonId,omitempty" xml:"PersonId,omitempty"`
}

func (s ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson) SetPersonName(v string) *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson {
	s.PersonName = &v
	return s
}

func (s *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson) SetPersonDescription(v string) *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson {
	s.PersonDescription = &v
	return s
}

func (s *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson) SetFaces(v *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFaces) *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson {
	s.Faces = v
	return s
}

func (s *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson) SetPersonId(v string) *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPerson {
	s.PersonId = &v
	return s
}

type ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFaces struct {
	Face []*ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace `json:"Face,omitempty" xml:"Face,omitempty" type:"Repeated"`
}

func (s ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFaces) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFaces) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFaces) SetFace(v []*ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace) *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFaces {
	s.Face = v
	return s
}

type ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace struct {
	ImageUrl *string `json:"ImageUrl,omitempty" xml:"ImageUrl,omitempty"`
	FaceId   *string `json:"FaceId,omitempty" xml:"FaceId,omitempty"`
}

func (s ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace) SetImageUrl(v string) *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace {
	s.ImageUrl = &v
	return s
}

func (s *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace) SetFaceId(v string) *ListCustomPersonsResponseBodyCategoriesCategoryPersonsPersonFacesFace {
	s.FaceId = &v
	return s
}

type ListCustomPersonsResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ListCustomPersonsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ListCustomPersonsResponse) String() string {
	return tea.Prettify(s)
}

func (s ListCustomPersonsResponse) GoString() string {
	return s.String()
}

func (s *ListCustomPersonsResponse) SetHeaders(v map[string]*string) *ListCustomPersonsResponse {
	s.Headers = v
	return s
}

func (s *ListCustomPersonsResponse) SetBody(v *ListCustomPersonsResponseBody) *ListCustomPersonsResponse {
	s.Body = v
	return s
}

type QueryFacerecogJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	FacerecogJobIds      *string `json:"FacerecogJobIds,omitempty" xml:"FacerecogJobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryFacerecogJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListRequest) SetOwnerId(v int64) *QueryFacerecogJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryFacerecogJobListRequest) SetResourceOwnerAccount(v string) *QueryFacerecogJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryFacerecogJobListRequest) SetResourceOwnerId(v int64) *QueryFacerecogJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryFacerecogJobListRequest) SetFacerecogJobIds(v string) *QueryFacerecogJobListRequest {
	s.FacerecogJobIds = &v
	return s
}

func (s *QueryFacerecogJobListRequest) SetOwnerAccount(v string) *QueryFacerecogJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryFacerecogJobListResponseBody struct {
	RequestId        *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NonExistIds      *QueryFacerecogJobListResponseBodyNonExistIds      `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
	FacerecogJobList *QueryFacerecogJobListResponseBodyFacerecogJobList `json:"FacerecogJobList,omitempty" xml:"FacerecogJobList,omitempty" type:"Struct"`
}

func (s QueryFacerecogJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBody) SetRequestId(v string) *QueryFacerecogJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryFacerecogJobListResponseBody) SetNonExistIds(v *QueryFacerecogJobListResponseBodyNonExistIds) *QueryFacerecogJobListResponseBody {
	s.NonExistIds = v
	return s
}

func (s *QueryFacerecogJobListResponseBody) SetFacerecogJobList(v *QueryFacerecogJobListResponseBodyFacerecogJobList) *QueryFacerecogJobListResponseBody {
	s.FacerecogJobList = v
	return s
}

type QueryFacerecogJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryFacerecogJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryFacerecogJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryFacerecogJobListResponseBodyFacerecogJobList struct {
	FacerecogJob []*QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob `json:"FacerecogJob,omitempty" xml:"FacerecogJob,omitempty" type:"Repeated"`
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobList) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobList) SetFacerecogJob(v []*QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) *QueryFacerecogJobListResponseBodyFacerecogJobList {
	s.FacerecogJob = v
	return s
}

type QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob struct {
	CreationTime         *string                                                                            `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	VideoFacerecogResult *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResult `json:"VideoFacerecogResult,omitempty" xml:"VideoFacerecogResult,omitempty" type:"Struct"`
	State                *string                                                                            `json:"State,omitempty" xml:"State,omitempty"`
	UserData             *string                                                                            `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code                 *string                                                                            `json:"Code,omitempty" xml:"Code,omitempty"`
	Message              *string                                                                            `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId           *string                                                                            `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input                *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput                `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id                   *string                                                                            `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetCreationTime(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.CreationTime = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetVideoFacerecogResult(v *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResult) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.VideoFacerecogResult = v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetState(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.State = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetUserData(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.UserData = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetCode(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.Code = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetMessage(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.Message = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetPipelineId(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.PipelineId = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetInput(v *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.Input = v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob) SetId(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJob {
	s.Id = &v
	return s
}

type QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResult struct {
	Facerecogs *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogs `json:"Facerecogs,omitempty" xml:"Facerecogs,omitempty" type:"Struct"`
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResult) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResult) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResult) SetFacerecogs(v *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogs) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResult {
	s.Facerecogs = v
	return s
}

type QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogs struct {
	Facerecog []*QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog `json:"Facerecog,omitempty" xml:"Facerecog,omitempty" type:"Repeated"`
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogs) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogs) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogs) SetFacerecog(v []*QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogs {
	s.Facerecog = v
	return s
}

type QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog struct {
	Time  *string                                                                                                    `json:"Time,omitempty" xml:"Time,omitempty"`
	Faces *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFaces `json:"Faces,omitempty" xml:"Faces,omitempty" type:"Struct"`
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog) SetTime(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog {
	s.Time = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog) SetFaces(v *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFaces) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecog {
	s.Faces = v
	return s
}

type QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFaces struct {
	Face []*QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace `json:"Face,omitempty" xml:"Face,omitempty" type:"Repeated"`
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFaces) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFaces) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFaces) SetFace(v []*QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFaces {
	s.Face = v
	return s
}

type QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace struct {
	Score  *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Name   *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Target *string `json:"Target,omitempty" xml:"Target,omitempty"`
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace) SetScore(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace {
	s.Score = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace) SetName(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace {
	s.Name = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace) SetTarget(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobVideoFacerecogResultFacerecogsFacerecogFacesFace {
	s.Target = &v
	return s
}

type QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput) SetObject(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput {
	s.Object = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput) SetLocation(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput {
	s.Location = &v
	return s
}

func (s *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput) SetBucket(v string) *QueryFacerecogJobListResponseBodyFacerecogJobListFacerecogJobInput {
	s.Bucket = &v
	return s
}

type QueryFacerecogJobListResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryFacerecogJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryFacerecogJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryFacerecogJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryFacerecogJobListResponse) SetHeaders(v map[string]*string) *QueryFacerecogJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryFacerecogJobListResponse) SetBody(v *QueryFacerecogJobListResponseBody) *QueryFacerecogJobListResponse {
	s.Body = v
	return s
}

type CreateInferenceServerRequest struct {
	TestId       *string `json:"TestId,omitempty" xml:"TestId,omitempty"`
	ModelType    *string `json:"ModelType,omitempty" xml:"ModelType,omitempty"`
	ModelPath    *string `json:"ModelPath,omitempty" xml:"ModelPath,omitempty"`
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	PipelineId   *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s CreateInferenceServerRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateInferenceServerRequest) GoString() string {
	return s.String()
}

func (s *CreateInferenceServerRequest) SetTestId(v string) *CreateInferenceServerRequest {
	s.TestId = &v
	return s
}

func (s *CreateInferenceServerRequest) SetModelType(v string) *CreateInferenceServerRequest {
	s.ModelType = &v
	return s
}

func (s *CreateInferenceServerRequest) SetModelPath(v string) *CreateInferenceServerRequest {
	s.ModelPath = &v
	return s
}

func (s *CreateInferenceServerRequest) SetFunctionName(v string) *CreateInferenceServerRequest {
	s.FunctionName = &v
	return s
}

func (s *CreateInferenceServerRequest) SetPipelineId(v string) *CreateInferenceServerRequest {
	s.PipelineId = &v
	return s
}

func (s *CreateInferenceServerRequest) SetUserData(v string) *CreateInferenceServerRequest {
	s.UserData = &v
	return s
}

type CreateInferenceServerResponseBody struct {
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s CreateInferenceServerResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateInferenceServerResponseBody) GoString() string {
	return s.String()
}

func (s *CreateInferenceServerResponseBody) SetMessage(v string) *CreateInferenceServerResponseBody {
	s.Message = &v
	return s
}

func (s *CreateInferenceServerResponseBody) SetRequestId(v string) *CreateInferenceServerResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateInferenceServerResponseBody) SetCode(v string) *CreateInferenceServerResponseBody {
	s.Code = &v
	return s
}

type CreateInferenceServerResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *CreateInferenceServerResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateInferenceServerResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateInferenceServerResponse) GoString() string {
	return s.String()
}

func (s *CreateInferenceServerResponse) SetHeaders(v map[string]*string) *CreateInferenceServerResponse {
	s.Headers = v
	return s
}

func (s *CreateInferenceServerResponse) SetBody(v *CreateInferenceServerResponseBody) *CreateInferenceServerResponse {
	s.Body = v
	return s
}

type ReportMediaDetailJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Tag                  *string `json:"Tag,omitempty" xml:"Tag,omitempty"`
	Results              *string `json:"Results,omitempty" xml:"Results,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportMediaDetailJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportMediaDetailJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportMediaDetailJobResultRequest) SetOwnerId(v int64) *ReportMediaDetailJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportMediaDetailJobResultRequest) SetResourceOwnerAccount(v string) *ReportMediaDetailJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportMediaDetailJobResultRequest) SetResourceOwnerId(v int64) *ReportMediaDetailJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportMediaDetailJobResultRequest) SetJobId(v string) *ReportMediaDetailJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportMediaDetailJobResultRequest) SetTag(v string) *ReportMediaDetailJobResultRequest {
	s.Tag = &v
	return s
}

func (s *ReportMediaDetailJobResultRequest) SetResults(v string) *ReportMediaDetailJobResultRequest {
	s.Results = &v
	return s
}

func (s *ReportMediaDetailJobResultRequest) SetOwnerAccount(v string) *ReportMediaDetailJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportMediaDetailJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportMediaDetailJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportMediaDetailJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportMediaDetailJobResultResponseBody) SetRequestId(v string) *ReportMediaDetailJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportMediaDetailJobResultResponseBody) SetJobId(v string) *ReportMediaDetailJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportMediaDetailJobResultResponse struct {
	Headers map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportMediaDetailJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportMediaDetailJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportMediaDetailJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportMediaDetailJobResultResponse) SetHeaders(v map[string]*string) *ReportMediaDetailJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportMediaDetailJobResultResponse) SetBody(v *ReportMediaDetailJobResultResponseBody) *ReportMediaDetailJobResultResponse {
	s.Body = v
	return s
}

type SubmitAnnotationJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	AnnotationConfig     *string `json:"AnnotationConfig,omitempty" xml:"AnnotationConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitAnnotationJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnnotationJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAnnotationJobRequest) SetOwnerId(v int64) *SubmitAnnotationJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitAnnotationJobRequest) SetResourceOwnerAccount(v string) *SubmitAnnotationJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitAnnotationJobRequest) SetResourceOwnerId(v int64) *SubmitAnnotationJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitAnnotationJobRequest) SetInput(v string) *SubmitAnnotationJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitAnnotationJobRequest) SetAnnotationConfig(v string) *SubmitAnnotationJobRequest {
	s.AnnotationConfig = &v
	return s
}

func (s *SubmitAnnotationJobRequest) SetUserData(v string) *SubmitAnnotationJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitAnnotationJobRequest) SetPipelineId(v string) *SubmitAnnotationJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitAnnotationJobRequest) SetOwnerAccount(v string) *SubmitAnnotationJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitAnnotationJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitAnnotationJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnnotationJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAnnotationJobResponseBody) SetRequestId(v string) *SubmitAnnotationJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAnnotationJobResponseBody) SetJobId(v string) *SubmitAnnotationJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitAnnotationJobResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitAnnotationJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitAnnotationJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnnotationJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAnnotationJobResponse) SetHeaders(v map[string]*string) *SubmitAnnotationJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAnnotationJobResponse) SetBody(v *SubmitAnnotationJobResponseBody) *SubmitAnnotationJobResponse {
	s.Body = v
	return s
}

type RegisterMediaDetailScenarioRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Scenario             *string `json:"Scenario,omitempty" xml:"Scenario,omitempty"`
	Description          *string `json:"Description,omitempty" xml:"Description,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s RegisterMediaDetailScenarioRequest) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailScenarioRequest) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailScenarioRequest) SetOwnerId(v int64) *RegisterMediaDetailScenarioRequest {
	s.OwnerId = &v
	return s
}

func (s *RegisterMediaDetailScenarioRequest) SetResourceOwnerAccount(v string) *RegisterMediaDetailScenarioRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *RegisterMediaDetailScenarioRequest) SetResourceOwnerId(v int64) *RegisterMediaDetailScenarioRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *RegisterMediaDetailScenarioRequest) SetJobId(v string) *RegisterMediaDetailScenarioRequest {
	s.JobId = &v
	return s
}

func (s *RegisterMediaDetailScenarioRequest) SetScenario(v string) *RegisterMediaDetailScenarioRequest {
	s.Scenario = &v
	return s
}

func (s *RegisterMediaDetailScenarioRequest) SetDescription(v string) *RegisterMediaDetailScenarioRequest {
	s.Description = &v
	return s
}

func (s *RegisterMediaDetailScenarioRequest) SetOwnerAccount(v string) *RegisterMediaDetailScenarioRequest {
	s.OwnerAccount = &v
	return s
}

type RegisterMediaDetailScenarioResponseBody struct {
	ScenarioId *string `json:"ScenarioId,omitempty" xml:"ScenarioId,omitempty"`
	RequestId  *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s RegisterMediaDetailScenarioResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailScenarioResponseBody) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailScenarioResponseBody) SetScenarioId(v string) *RegisterMediaDetailScenarioResponseBody {
	s.ScenarioId = &v
	return s
}

func (s *RegisterMediaDetailScenarioResponseBody) SetRequestId(v string) *RegisterMediaDetailScenarioResponseBody {
	s.RequestId = &v
	return s
}

type RegisterMediaDetailScenarioResponse struct {
	Headers map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *RegisterMediaDetailScenarioResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RegisterMediaDetailScenarioResponse) String() string {
	return tea.Prettify(s)
}

func (s RegisterMediaDetailScenarioResponse) GoString() string {
	return s.String()
}

func (s *RegisterMediaDetailScenarioResponse) SetHeaders(v map[string]*string) *RegisterMediaDetailScenarioResponse {
	s.Headers = v
	return s
}

func (s *RegisterMediaDetailScenarioResponse) SetBody(v *RegisterMediaDetailScenarioResponseBody) *RegisterMediaDetailScenarioResponse {
	s.Body = v
	return s
}

type QueryVideoSplitJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryVideoSplitJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListRequest) SetOwnerId(v int64) *QueryVideoSplitJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryVideoSplitJobListRequest) SetResourceOwnerAccount(v string) *QueryVideoSplitJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryVideoSplitJobListRequest) SetResourceOwnerId(v int64) *QueryVideoSplitJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryVideoSplitJobListRequest) SetJobIds(v string) *QueryVideoSplitJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryVideoSplitJobListRequest) SetOwnerAccount(v string) *QueryVideoSplitJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryVideoSplitJobListResponseBody struct {
	RequestId   *string                                        `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList     *QueryVideoSplitJobListResponseBodyJobList     `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
	NonExistIds *QueryVideoSplitJobListResponseBodyNonExistIds `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryVideoSplitJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponseBody) SetRequestId(v string) *QueryVideoSplitJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBody) SetJobList(v *QueryVideoSplitJobListResponseBodyJobList) *QueryVideoSplitJobListResponseBody {
	s.JobList = v
	return s
}

func (s *QueryVideoSplitJobListResponseBody) SetNonExistIds(v *QueryVideoSplitJobListResponseBodyNonExistIds) *QueryVideoSplitJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryVideoSplitJobListResponseBodyJobList struct {
	Job []*QueryVideoSplitJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryVideoSplitJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponseBodyJobList) SetJob(v []*QueryVideoSplitJobListResponseBodyJobListJob) *QueryVideoSplitJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryVideoSplitJobListResponseBodyJobListJob struct {
	CreationTime     *string                                                       `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State            *string                                                       `json:"State,omitempty" xml:"State,omitempty"`
	UserData         *string                                                       `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                       `json:"Code,omitempty" xml:"Code,omitempty"`
	Message          *string                                                       `json:"Message,omitempty" xml:"Message,omitempty"`
	VideoSplitResult *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResult `json:"VideoSplitResult,omitempty" xml:"VideoSplitResult,omitempty" type:"Struct"`
	PipelineId       *string                                                       `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input            *QueryVideoSplitJobListResponseBodyJobListJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id               *string                                                       `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s QueryVideoSplitJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetCreationTime(v string) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.CreationTime = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetState(v string) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetUserData(v string) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetCode(v string) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.Code = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetMessage(v string) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.Message = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetVideoSplitResult(v *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResult) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.VideoSplitResult = v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetInput(v *QueryVideoSplitJobListResponseBodyJobListJobInput) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJob) SetId(v string) *QueryVideoSplitJobListResponseBodyJobListJob {
	s.Id = &v
	return s
}

type QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResult struct {
	VideoSplitList *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitList `json:"VideoSplitList,omitempty" xml:"VideoSplitList,omitempty" type:"Struct"`
}

func (s QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResult) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResult) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResult) SetVideoSplitList(v *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitList) *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResult {
	s.VideoSplitList = v
	return s
}

type QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitList struct {
	VideoSplit []*QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit `json:"VideoSplit,omitempty" xml:"VideoSplit,omitempty" type:"Repeated"`
}

func (s QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitList) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitList) SetVideoSplit(v []*QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit) *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitList {
	s.VideoSplit = v
	return s
}

type QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit struct {
	EndTime   *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Path      *string `json:"Path,omitempty" xml:"Path,omitempty"`
}

func (s QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit) SetEndTime(v string) *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit {
	s.EndTime = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit) SetStartTime(v string) *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit {
	s.StartTime = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit) SetPath(v string) *QueryVideoSplitJobListResponseBodyJobListJobVideoSplitResultVideoSplitListVideoSplit {
	s.Path = &v
	return s
}

type QueryVideoSplitJobListResponseBodyJobListJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryVideoSplitJobListResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponseBodyJobListJobInput) SetObject(v string) *QueryVideoSplitJobListResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJobInput) SetLocation(v string) *QueryVideoSplitJobListResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *QueryVideoSplitJobListResponseBodyJobListJobInput) SetBucket(v string) *QueryVideoSplitJobListResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type QueryVideoSplitJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryVideoSplitJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryVideoSplitJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryVideoSplitJobListResponse struct {
	Headers map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryVideoSplitJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryVideoSplitJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoSplitJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryVideoSplitJobListResponse) SetHeaders(v map[string]*string) *QueryVideoSplitJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryVideoSplitJobListResponse) SetBody(v *QueryVideoSplitJobListResponseBody) *QueryVideoSplitJobListResponse {
	s.Body = v
	return s
}

type ReportAnnotationJobResultRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobId                *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	Annotation           *string `json:"Annotation,omitempty" xml:"Annotation,omitempty"`
	Details              *string `json:"Details,omitempty" xml:"Details,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s ReportAnnotationJobResultRequest) String() string {
	return tea.Prettify(s)
}

func (s ReportAnnotationJobResultRequest) GoString() string {
	return s.String()
}

func (s *ReportAnnotationJobResultRequest) SetOwnerId(v int64) *ReportAnnotationJobResultRequest {
	s.OwnerId = &v
	return s
}

func (s *ReportAnnotationJobResultRequest) SetResourceOwnerAccount(v string) *ReportAnnotationJobResultRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *ReportAnnotationJobResultRequest) SetResourceOwnerId(v int64) *ReportAnnotationJobResultRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *ReportAnnotationJobResultRequest) SetJobId(v string) *ReportAnnotationJobResultRequest {
	s.JobId = &v
	return s
}

func (s *ReportAnnotationJobResultRequest) SetAnnotation(v string) *ReportAnnotationJobResultRequest {
	s.Annotation = &v
	return s
}

func (s *ReportAnnotationJobResultRequest) SetDetails(v string) *ReportAnnotationJobResultRequest {
	s.Details = &v
	return s
}

func (s *ReportAnnotationJobResultRequest) SetOwnerAccount(v string) *ReportAnnotationJobResultRequest {
	s.OwnerAccount = &v
	return s
}

type ReportAnnotationJobResultResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s ReportAnnotationJobResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ReportAnnotationJobResultResponseBody) GoString() string {
	return s.String()
}

func (s *ReportAnnotationJobResultResponseBody) SetRequestId(v string) *ReportAnnotationJobResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *ReportAnnotationJobResultResponseBody) SetJobId(v string) *ReportAnnotationJobResultResponseBody {
	s.JobId = &v
	return s
}

type ReportAnnotationJobResultResponse struct {
	Headers map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *ReportAnnotationJobResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ReportAnnotationJobResultResponse) String() string {
	return tea.Prettify(s)
}

func (s ReportAnnotationJobResultResponse) GoString() string {
	return s.String()
}

func (s *ReportAnnotationJobResultResponse) SetHeaders(v map[string]*string) *ReportAnnotationJobResultResponse {
	s.Headers = v
	return s
}

func (s *ReportAnnotationJobResultResponse) SetBody(v *ReportAnnotationJobResultResponseBody) *ReportAnnotationJobResultResponse {
	s.Body = v
	return s
}

type BindInputBucketRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Bucket               *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
	RoleArn              *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s BindInputBucketRequest) String() string {
	return tea.Prettify(s)
}

func (s BindInputBucketRequest) GoString() string {
	return s.String()
}

func (s *BindInputBucketRequest) SetOwnerId(v int64) *BindInputBucketRequest {
	s.OwnerId = &v
	return s
}

func (s *BindInputBucketRequest) SetResourceOwnerAccount(v string) *BindInputBucketRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *BindInputBucketRequest) SetResourceOwnerId(v int64) *BindInputBucketRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *BindInputBucketRequest) SetBucket(v string) *BindInputBucketRequest {
	s.Bucket = &v
	return s
}

func (s *BindInputBucketRequest) SetRoleArn(v string) *BindInputBucketRequest {
	s.RoleArn = &v
	return s
}

func (s *BindInputBucketRequest) SetOwnerAccount(v string) *BindInputBucketRequest {
	s.OwnerAccount = &v
	return s
}

type BindInputBucketResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s BindInputBucketResponseBody) String() string {
	return tea.Prettify(s)
}

func (s BindInputBucketResponseBody) GoString() string {
	return s.String()
}

func (s *BindInputBucketResponseBody) SetRequestId(v string) *BindInputBucketResponseBody {
	s.RequestId = &v
	return s
}

type BindInputBucketResponse struct {
	Headers map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *BindInputBucketResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s BindInputBucketResponse) String() string {
	return tea.Prettify(s)
}

func (s BindInputBucketResponse) GoString() string {
	return s.String()
}

func (s *BindInputBucketResponse) SetHeaders(v map[string]*string) *BindInputBucketResponse {
	s.Headers = v
	return s
}

func (s *BindInputBucketResponse) SetBody(v *BindInputBucketResponseBody) *BindInputBucketResponse {
	s.Body = v
	return s
}

type QueryPipelineListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineIds          *string `json:"PipelineIds,omitempty" xml:"PipelineIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryPipelineListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListRequest) GoString() string {
	return s.String()
}

func (s *QueryPipelineListRequest) SetOwnerId(v int64) *QueryPipelineListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryPipelineListRequest) SetResourceOwnerAccount(v string) *QueryPipelineListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryPipelineListRequest) SetResourceOwnerId(v int64) *QueryPipelineListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryPipelineListRequest) SetPipelineIds(v string) *QueryPipelineListRequest {
	s.PipelineIds = &v
	return s
}

func (s *QueryPipelineListRequest) SetOwnerAccount(v string) *QueryPipelineListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryPipelineListResponseBody struct {
	RequestId    *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	PipelineList *QueryPipelineListResponseBodyPipelineList `json:"PipelineList,omitempty" xml:"PipelineList,omitempty" type:"Struct"`
	NonExistPids *QueryPipelineListResponseBodyNonExistPids `json:"NonExistPids,omitempty" xml:"NonExistPids,omitempty" type:"Struct"`
}

func (s QueryPipelineListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBody) SetRequestId(v string) *QueryPipelineListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryPipelineListResponseBody) SetPipelineList(v *QueryPipelineListResponseBodyPipelineList) *QueryPipelineListResponseBody {
	s.PipelineList = v
	return s
}

func (s *QueryPipelineListResponseBody) SetNonExistPids(v *QueryPipelineListResponseBodyNonExistPids) *QueryPipelineListResponseBody {
	s.NonExistPids = v
	return s
}

type QueryPipelineListResponseBodyPipelineList struct {
	Pipeline []*QueryPipelineListResponseBodyPipelineListPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Repeated"`
}

func (s QueryPipelineListResponseBodyPipelineList) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBodyPipelineList) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBodyPipelineList) SetPipeline(v []*QueryPipelineListResponseBodyPipelineListPipeline) *QueryPipelineListResponseBodyPipelineList {
	s.Pipeline = v
	return s
}

type QueryPipelineListResponseBodyPipelineListPipeline struct {
	Speed         *string                                                        `json:"Speed,omitempty" xml:"Speed,omitempty"`
	State         *string                                                        `json:"State,omitempty" xml:"State,omitempty"`
	SpeedLevel    *int64                                                         `json:"SpeedLevel,omitempty" xml:"SpeedLevel,omitempty"`
	NotifyConfig  *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Role          *string                                                        `json:"Role,omitempty" xml:"Role,omitempty"`
	Name          *string                                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	Id            *string                                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	QuotaAllocate *int64                                                         `json:"QuotaAllocate,omitempty" xml:"QuotaAllocate,omitempty"`
}

func (s QueryPipelineListResponseBodyPipelineListPipeline) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBodyPipelineListPipeline) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetSpeed(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.Speed = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetState(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.State = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetSpeedLevel(v int64) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.SpeedLevel = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetNotifyConfig(v *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.NotifyConfig = v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetRole(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.Role = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetName(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.Name = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetId(v string) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.Id = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipeline) SetQuotaAllocate(v int64) *QueryPipelineListResponseBodyPipelineListPipeline {
	s.QuotaAllocate = &v
	return s
}

type QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig struct {
	MqTopic   *string `json:"MqTopic,omitempty" xml:"MqTopic,omitempty"`
	QueueName *string `json:"QueueName,omitempty" xml:"QueueName,omitempty"`
	MqTag     *string `json:"MqTag,omitempty" xml:"MqTag,omitempty"`
	Topic     *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
}

func (s QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetMqTopic(v string) *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.MqTopic = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetQueueName(v string) *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.QueueName = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetMqTag(v string) *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.MqTag = &v
	return s
}

func (s *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig) SetTopic(v string) *QueryPipelineListResponseBodyPipelineListPipelineNotifyConfig {
	s.Topic = &v
	return s
}

type QueryPipelineListResponseBodyNonExistPids struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryPipelineListResponseBodyNonExistPids) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponseBodyNonExistPids) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponseBodyNonExistPids) SetString_(v []*string) *QueryPipelineListResponseBodyNonExistPids {
	s.String_ = v
	return s
}

type QueryPipelineListResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryPipelineListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryPipelineListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryPipelineListResponse) GoString() string {
	return s.String()
}

func (s *QueryPipelineListResponse) SetHeaders(v map[string]*string) *QueryPipelineListResponse {
	s.Headers = v
	return s
}

func (s *QueryPipelineListResponse) SetBody(v *QueryPipelineListResponseBody) *QueryPipelineListResponse {
	s.Body = v
	return s
}

type UpdateTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	TemplateId           *string `json:"TemplateId,omitempty" xml:"TemplateId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Container            *string `json:"Container,omitempty" xml:"Container,omitempty"`
	Video                *string `json:"Video,omitempty" xml:"Video,omitempty"`
	Audio                *string `json:"Audio,omitempty" xml:"Audio,omitempty"`
	MuxConfig            *string `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty"`
	TransConfig          *string `json:"TransConfig,omitempty" xml:"TransConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateRequest) GoString() string {
	return s.String()
}

func (s *UpdateTemplateRequest) SetOwnerId(v int64) *UpdateTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateTemplateRequest) SetResourceOwnerAccount(v string) *UpdateTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateTemplateRequest) SetResourceOwnerId(v int64) *UpdateTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateTemplateRequest) SetTemplateId(v string) *UpdateTemplateRequest {
	s.TemplateId = &v
	return s
}

func (s *UpdateTemplateRequest) SetName(v string) *UpdateTemplateRequest {
	s.Name = &v
	return s
}

func (s *UpdateTemplateRequest) SetContainer(v string) *UpdateTemplateRequest {
	s.Container = &v
	return s
}

func (s *UpdateTemplateRequest) SetVideo(v string) *UpdateTemplateRequest {
	s.Video = &v
	return s
}

func (s *UpdateTemplateRequest) SetAudio(v string) *UpdateTemplateRequest {
	s.Audio = &v
	return s
}

func (s *UpdateTemplateRequest) SetMuxConfig(v string) *UpdateTemplateRequest {
	s.MuxConfig = &v
	return s
}

func (s *UpdateTemplateRequest) SetTransConfig(v string) *UpdateTemplateRequest {
	s.TransConfig = &v
	return s
}

func (s *UpdateTemplateRequest) SetOwnerAccount(v string) *UpdateTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateTemplateResponseBody struct {
	RequestId *string                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Template  *UpdateTemplateResponseBodyTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Struct"`
}

func (s UpdateTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBody) SetRequestId(v string) *UpdateTemplateResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTemplateResponseBody) SetTemplate(v *UpdateTemplateResponseBodyTemplate) *UpdateTemplateResponseBody {
	s.Template = v
	return s
}

type UpdateTemplateResponseBodyTemplate struct {
	Video       *UpdateTemplateResponseBodyTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig *UpdateTemplateResponseBodyTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	State       *string                                        `json:"State,omitempty" xml:"State,omitempty"`
	MuxConfig   *UpdateTemplateResponseBodyTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                        `json:"Name,omitempty" xml:"Name,omitempty"`
	Audio       *UpdateTemplateResponseBodyTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Id          *string                                        `json:"Id,omitempty" xml:"Id,omitempty"`
	Container   *UpdateTemplateResponseBodyTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
}

func (s UpdateTemplateResponseBodyTemplate) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplate) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplate) SetVideo(v *UpdateTemplateResponseBodyTemplateVideo) *UpdateTemplateResponseBodyTemplate {
	s.Video = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetTransConfig(v *UpdateTemplateResponseBodyTemplateTransConfig) *UpdateTemplateResponseBodyTemplate {
	s.TransConfig = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetState(v string) *UpdateTemplateResponseBodyTemplate {
	s.State = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetMuxConfig(v *UpdateTemplateResponseBodyTemplateMuxConfig) *UpdateTemplateResponseBodyTemplate {
	s.MuxConfig = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetName(v string) *UpdateTemplateResponseBodyTemplate {
	s.Name = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetAudio(v *UpdateTemplateResponseBodyTemplateAudio) *UpdateTemplateResponseBodyTemplate {
	s.Audio = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetId(v string) *UpdateTemplateResponseBodyTemplate {
	s.Id = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplate) SetContainer(v *UpdateTemplateResponseBodyTemplateContainer) *UpdateTemplateResponseBodyTemplate {
	s.Container = v
	return s
}

type UpdateTemplateResponseBodyTemplateVideo struct {
	LongShortMode *string                                            `json:"LongShortMode,omitempty" xml:"LongShortMode,omitempty"`
	Bufsize       *string                                            `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain       *string                                            `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd    *UpdateTemplateResponseBodyTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt        *string                                            `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Pad           *string                                            `json:"Pad,omitempty" xml:"Pad,omitempty"`
	Codec         *string                                            `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height        *string                                            `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale        *string                                            `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Crop          *string                                            `json:"Crop,omitempty" xml:"Crop,omitempty"`
	Bitrate       *string                                            `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate       *string                                            `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	MaxFps        *string                                            `json:"MaxFps,omitempty" xml:"MaxFps,omitempty"`
	Profile       *string                                            `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf           *string                                            `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Remove        *string                                            `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Gop           *string                                            `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width         *string                                            `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps           *string                                            `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset        *string                                            `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode      *string                                            `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
	ResoPriority  *string                                            `json:"ResoPriority,omitempty" xml:"ResoPriority,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateVideo) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetLongShortMode(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.LongShortMode = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetBufsize(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetDegrain(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetBitrateBnd(v *UpdateTemplateResponseBodyTemplateVideoBitrateBnd) *UpdateTemplateResponseBodyTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetPixFmt(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetPad(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Pad = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetCodec(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Codec = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetHeight(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Height = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetQscale(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetCrop(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Crop = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetBitrate(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetMaxrate(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetMaxFps(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.MaxFps = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetProfile(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Profile = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetCrf(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Crf = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetRemove(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Remove = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetGop(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Gop = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetWidth(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Width = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetFps(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Fps = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetPreset(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.Preset = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetScanMode(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.ScanMode = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideo) SetResoPriority(v string) *UpdateTemplateResponseBodyTemplateVideo {
	s.ResoPriority = &v
	return s
}

type UpdateTemplateResponseBodyTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateVideoBitrateBnd) SetMax(v string) *UpdateTemplateResponseBodyTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateVideoBitrateBnd) SetMin(v string) *UpdateTemplateResponseBodyTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type UpdateTemplateResponseBodyTemplateTransConfig struct {
	IsCheckAudioBitrate     *string `json:"IsCheckAudioBitrate,omitempty" xml:"IsCheckAudioBitrate,omitempty"`
	TransMode               *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
	IsCheckReso             *string `json:"IsCheckReso,omitempty" xml:"IsCheckReso,omitempty"`
	IsCheckVideoBitrateFail *string `json:"IsCheckVideoBitrateFail,omitempty" xml:"IsCheckVideoBitrateFail,omitempty"`
	AdjDarMethod            *string `json:"AdjDarMethod,omitempty" xml:"AdjDarMethod,omitempty"`
	IsCheckVideoBitrate     *string `json:"IsCheckVideoBitrate,omitempty" xml:"IsCheckVideoBitrate,omitempty"`
	IsCheckResoFail         *string `json:"IsCheckResoFail,omitempty" xml:"IsCheckResoFail,omitempty"`
	IsCheckAudioBitrateFail *string `json:"IsCheckAudioBitrateFail,omitempty" xml:"IsCheckAudioBitrateFail,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckAudioBitrate(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckAudioBitrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetTransMode(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.TransMode = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckReso(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckReso = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckVideoBitrateFail(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckVideoBitrateFail = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetAdjDarMethod(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.AdjDarMethod = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckVideoBitrate(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckVideoBitrate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckResoFail(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckResoFail = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateTransConfig) SetIsCheckAudioBitrateFail(v string) *UpdateTemplateResponseBodyTemplateTransConfig {
	s.IsCheckAudioBitrateFail = &v
	return s
}

type UpdateTemplateResponseBodyTemplateMuxConfig struct {
	Webp    *UpdateTemplateResponseBodyTemplateMuxConfigWebp    `json:"Webp,omitempty" xml:"Webp,omitempty" type:"Struct"`
	Gif     *UpdateTemplateResponseBodyTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *UpdateTemplateResponseBodyTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s UpdateTemplateResponseBodyTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfig) SetWebp(v *UpdateTemplateResponseBodyTemplateMuxConfigWebp) *UpdateTemplateResponseBodyTemplateMuxConfig {
	s.Webp = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfig) SetGif(v *UpdateTemplateResponseBodyTemplateMuxConfigGif) *UpdateTemplateResponseBodyTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfig) SetSegment(v *UpdateTemplateResponseBodyTemplateMuxConfigSegment) *UpdateTemplateResponseBodyTemplateMuxConfig {
	s.Segment = v
	return s
}

type UpdateTemplateResponseBodyTemplateMuxConfigWebp struct {
	Loop *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigWebp) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigWebp) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigWebp) SetLoop(v string) *UpdateTemplateResponseBodyTemplateMuxConfigWebp {
	s.Loop = &v
	return s
}

type UpdateTemplateResponseBodyTemplateMuxConfigGif struct {
	FinalDelay      *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	DitherMode      *string `json:"DitherMode,omitempty" xml:"DitherMode,omitempty"`
	Loop            *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
	IsCustomPalette *string `json:"IsCustomPalette,omitempty" xml:"IsCustomPalette,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigGif) SetFinalDelay(v string) *UpdateTemplateResponseBodyTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigGif) SetDitherMode(v string) *UpdateTemplateResponseBodyTemplateMuxConfigGif {
	s.DitherMode = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigGif) SetLoop(v string) *UpdateTemplateResponseBodyTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigGif) SetIsCustomPalette(v string) *UpdateTemplateResponseBodyTemplateMuxConfigGif {
	s.IsCustomPalette = &v
	return s
}

type UpdateTemplateResponseBodyTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateMuxConfigSegment) SetDuration(v string) *UpdateTemplateResponseBodyTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type UpdateTemplateResponseBodyTemplateAudio struct {
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Remove     *string `json:"Remove,omitempty" xml:"Remove,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateAudio) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetProfile(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Profile = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetRemove(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Remove = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetCodec(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Codec = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetSamplerate(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Samplerate = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetQscale(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetChannels(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Channels = &v
	return s
}

func (s *UpdateTemplateResponseBodyTemplateAudio) SetBitrate(v string) *UpdateTemplateResponseBodyTemplateAudio {
	s.Bitrate = &v
	return s
}

type UpdateTemplateResponseBodyTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s UpdateTemplateResponseBodyTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponseBodyTemplateContainer) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponseBodyTemplateContainer) SetFormat(v string) *UpdateTemplateResponseBodyTemplateContainer {
	s.Format = &v
	return s
}

type UpdateTemplateResponse struct {
	Headers map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTemplateResponse) GoString() string {
	return s.String()
}

func (s *UpdateTemplateResponse) SetHeaders(v map[string]*string) *UpdateTemplateResponse {
	s.Headers = v
	return s
}

func (s *UpdateTemplateResponse) SetBody(v *UpdateTemplateResponseBody) *UpdateTemplateResponse {
	s.Body = v
	return s
}

type UpdateCoverPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	Role                 *string `json:"Role,omitempty" xml:"Role,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateCoverPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateCoverPipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdateCoverPipelineRequest) SetOwnerId(v int64) *UpdateCoverPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetResourceOwnerAccount(v string) *UpdateCoverPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetResourceOwnerId(v int64) *UpdateCoverPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetPipelineId(v string) *UpdateCoverPipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetName(v string) *UpdateCoverPipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetState(v string) *UpdateCoverPipelineRequest {
	s.State = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetPriority(v int32) *UpdateCoverPipelineRequest {
	s.Priority = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetNotifyConfig(v string) *UpdateCoverPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetRole(v string) *UpdateCoverPipelineRequest {
	s.Role = &v
	return s
}

func (s *UpdateCoverPipelineRequest) SetOwnerAccount(v string) *UpdateCoverPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateCoverPipelineResponseBody struct {
	RequestId *string                                  `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *UpdateCoverPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s UpdateCoverPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateCoverPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateCoverPipelineResponseBody) SetRequestId(v string) *UpdateCoverPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateCoverPipelineResponseBody) SetPipeline(v *UpdateCoverPipelineResponseBodyPipeline) *UpdateCoverPipelineResponseBody {
	s.Pipeline = v
	return s
}

type UpdateCoverPipelineResponseBodyPipeline struct {
	State        *string                                              `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *UpdateCoverPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                               `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Role         *string                                              `json:"Role,omitempty" xml:"Role,omitempty"`
	Name         *string                                              `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                              `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateCoverPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s UpdateCoverPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *UpdateCoverPipelineResponseBodyPipeline) SetState(v string) *UpdateCoverPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *UpdateCoverPipelineResponseBodyPipeline) SetNotifyConfig(v *UpdateCoverPipelineResponseBodyPipelineNotifyConfig) *UpdateCoverPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *UpdateCoverPipelineResponseBodyPipeline) SetPriority(v int32) *UpdateCoverPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *UpdateCoverPipelineResponseBodyPipeline) SetRole(v string) *UpdateCoverPipelineResponseBodyPipeline {
	s.Role = &v
	return s
}

func (s *UpdateCoverPipelineResponseBodyPipeline) SetName(v string) *UpdateCoverPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *UpdateCoverPipelineResponseBodyPipeline) SetId(v string) *UpdateCoverPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type UpdateCoverPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s UpdateCoverPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateCoverPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *UpdateCoverPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *UpdateCoverPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *UpdateCoverPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *UpdateCoverPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type UpdateCoverPipelineResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateCoverPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateCoverPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateCoverPipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdateCoverPipelineResponse) SetHeaders(v map[string]*string) *UpdateCoverPipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdateCoverPipelineResponse) SetBody(v *UpdateCoverPipelineResponseBody) *UpdateCoverPipelineResponse {
	s.Body = v
	return s
}

type UpdateTerrorismPipelineRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	State                *string `json:"State,omitempty" xml:"State,omitempty"`
	Priority             *int32  `json:"Priority,omitempty" xml:"Priority,omitempty"`
	NotifyConfig         *string `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s UpdateTerrorismPipelineRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateTerrorismPipelineRequest) GoString() string {
	return s.String()
}

func (s *UpdateTerrorismPipelineRequest) SetOwnerId(v int64) *UpdateTerrorismPipelineRequest {
	s.OwnerId = &v
	return s
}

func (s *UpdateTerrorismPipelineRequest) SetResourceOwnerAccount(v string) *UpdateTerrorismPipelineRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *UpdateTerrorismPipelineRequest) SetResourceOwnerId(v int64) *UpdateTerrorismPipelineRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *UpdateTerrorismPipelineRequest) SetPipelineId(v string) *UpdateTerrorismPipelineRequest {
	s.PipelineId = &v
	return s
}

func (s *UpdateTerrorismPipelineRequest) SetName(v string) *UpdateTerrorismPipelineRequest {
	s.Name = &v
	return s
}

func (s *UpdateTerrorismPipelineRequest) SetState(v string) *UpdateTerrorismPipelineRequest {
	s.State = &v
	return s
}

func (s *UpdateTerrorismPipelineRequest) SetPriority(v int32) *UpdateTerrorismPipelineRequest {
	s.Priority = &v
	return s
}

func (s *UpdateTerrorismPipelineRequest) SetNotifyConfig(v string) *UpdateTerrorismPipelineRequest {
	s.NotifyConfig = &v
	return s
}

func (s *UpdateTerrorismPipelineRequest) SetOwnerAccount(v string) *UpdateTerrorismPipelineRequest {
	s.OwnerAccount = &v
	return s
}

type UpdateTerrorismPipelineResponseBody struct {
	RequestId *string                                      `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Pipeline  *UpdateTerrorismPipelineResponseBodyPipeline `json:"Pipeline,omitempty" xml:"Pipeline,omitempty" type:"Struct"`
}

func (s UpdateTerrorismPipelineResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateTerrorismPipelineResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateTerrorismPipelineResponseBody) SetRequestId(v string) *UpdateTerrorismPipelineResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateTerrorismPipelineResponseBody) SetPipeline(v *UpdateTerrorismPipelineResponseBodyPipeline) *UpdateTerrorismPipelineResponseBody {
	s.Pipeline = v
	return s
}

type UpdateTerrorismPipelineResponseBodyPipeline struct {
	State        *string                                                  `json:"State,omitempty" xml:"State,omitempty"`
	NotifyConfig *UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig `json:"NotifyConfig,omitempty" xml:"NotifyConfig,omitempty" type:"Struct"`
	Priority     *int32                                                   `json:"Priority,omitempty" xml:"Priority,omitempty"`
	Name         *string                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	Id           *string                                                  `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s UpdateTerrorismPipelineResponseBodyPipeline) String() string {
	return tea.Prettify(s)
}

func (s UpdateTerrorismPipelineResponseBodyPipeline) GoString() string {
	return s.String()
}

func (s *UpdateTerrorismPipelineResponseBodyPipeline) SetState(v string) *UpdateTerrorismPipelineResponseBodyPipeline {
	s.State = &v
	return s
}

func (s *UpdateTerrorismPipelineResponseBodyPipeline) SetNotifyConfig(v *UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig) *UpdateTerrorismPipelineResponseBodyPipeline {
	s.NotifyConfig = v
	return s
}

func (s *UpdateTerrorismPipelineResponseBodyPipeline) SetPriority(v int32) *UpdateTerrorismPipelineResponseBodyPipeline {
	s.Priority = &v
	return s
}

func (s *UpdateTerrorismPipelineResponseBodyPipeline) SetName(v string) *UpdateTerrorismPipelineResponseBodyPipeline {
	s.Name = &v
	return s
}

func (s *UpdateTerrorismPipelineResponseBodyPipeline) SetId(v string) *UpdateTerrorismPipelineResponseBodyPipeline {
	s.Id = &v
	return s
}

type UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig struct {
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	Queue *string `json:"Queue,omitempty" xml:"Queue,omitempty"`
}

func (s UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig) String() string {
	return tea.Prettify(s)
}

func (s UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig) GoString() string {
	return s.String()
}

func (s *UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig) SetTopic(v string) *UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig {
	s.Topic = &v
	return s
}

func (s *UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig) SetQueue(v string) *UpdateTerrorismPipelineResponseBodyPipelineNotifyConfig {
	s.Queue = &v
	return s
}

type UpdateTerrorismPipelineResponse struct {
	Headers map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *UpdateTerrorismPipelineResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateTerrorismPipelineResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateTerrorismPipelineResponse) GoString() string {
	return s.String()
}

func (s *UpdateTerrorismPipelineResponse) SetHeaders(v map[string]*string) *UpdateTerrorismPipelineResponse {
	s.Headers = v
	return s
}

func (s *UpdateTerrorismPipelineResponse) SetBody(v *UpdateTerrorismPipelineResponseBody) *UpdateTerrorismPipelineResponse {
	s.Body = v
	return s
}

type QueryInferenceJobRequest struct {
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s QueryInferenceJobRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryInferenceJobRequest) GoString() string {
	return s.String()
}

func (s *QueryInferenceJobRequest) SetJobId(v string) *QueryInferenceJobRequest {
	s.JobId = &v
	return s
}

type QueryInferenceJobResponseBody struct {
	Message   *string                           `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Job       *QueryInferenceJobResponseBodyJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Struct"`
	Code      *string                           `json:"Code,omitempty" xml:"Code,omitempty"`
}

func (s QueryInferenceJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryInferenceJobResponseBody) GoString() string {
	return s.String()
}

func (s *QueryInferenceJobResponseBody) SetMessage(v string) *QueryInferenceJobResponseBody {
	s.Message = &v
	return s
}

func (s *QueryInferenceJobResponseBody) SetRequestId(v string) *QueryInferenceJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryInferenceJobResponseBody) SetJob(v *QueryInferenceJobResponseBodyJob) *QueryInferenceJobResponseBody {
	s.Job = v
	return s
}

func (s *QueryInferenceJobResponseBody) SetCode(v string) *QueryInferenceJobResponseBody {
	s.Code = &v
	return s
}

type QueryInferenceJobResponseBodyJob struct {
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	Result    *string `json:"Result,omitempty" xml:"Result,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserId    *int64  `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	JobTime   *int64  `json:"JobTime,omitempty" xml:"JobTime,omitempty"`
	JobParams *string `json:"JobParams,omitempty" xml:"JobParams,omitempty"`
}

func (s QueryInferenceJobResponseBodyJob) String() string {
	return tea.Prettify(s)
}

func (s QueryInferenceJobResponseBodyJob) GoString() string {
	return s.String()
}

func (s *QueryInferenceJobResponseBodyJob) SetStatus(v string) *QueryInferenceJobResponseBodyJob {
	s.Status = &v
	return s
}

func (s *QueryInferenceJobResponseBodyJob) SetResult(v string) *QueryInferenceJobResponseBodyJob {
	s.Result = &v
	return s
}

func (s *QueryInferenceJobResponseBodyJob) SetJobId(v string) *QueryInferenceJobResponseBodyJob {
	s.JobId = &v
	return s
}

func (s *QueryInferenceJobResponseBodyJob) SetUserId(v int64) *QueryInferenceJobResponseBodyJob {
	s.UserId = &v
	return s
}

func (s *QueryInferenceJobResponseBodyJob) SetMessage(v string) *QueryInferenceJobResponseBodyJob {
	s.Message = &v
	return s
}

func (s *QueryInferenceJobResponseBodyJob) SetJobTime(v int64) *QueryInferenceJobResponseBodyJob {
	s.JobTime = &v
	return s
}

func (s *QueryInferenceJobResponseBodyJob) SetJobParams(v string) *QueryInferenceJobResponseBodyJob {
	s.JobParams = &v
	return s
}

type QueryInferenceJobResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryInferenceJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryInferenceJobResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryInferenceJobResponse) GoString() string {
	return s.String()
}

func (s *QueryInferenceJobResponse) SetHeaders(v map[string]*string) *QueryInferenceJobResponse {
	s.Headers = v
	return s
}

func (s *QueryInferenceJobResponse) SetBody(v *QueryInferenceJobResponseBody) *QueryInferenceJobResponse {
	s.Body = v
	return s
}

type QueryVideoPoseJobListRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	JobIds               *string `json:"JobIds,omitempty" xml:"JobIds,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryVideoPoseJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListRequest) SetOwnerId(v int64) *QueryVideoPoseJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryVideoPoseJobListRequest) SetResourceOwnerAccount(v string) *QueryVideoPoseJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryVideoPoseJobListRequest) SetResourceOwnerId(v int64) *QueryVideoPoseJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryVideoPoseJobListRequest) SetJobIds(v string) *QueryVideoPoseJobListRequest {
	s.JobIds = &v
	return s
}

func (s *QueryVideoPoseJobListRequest) SetOwnerAccount(v string) *QueryVideoPoseJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryVideoPoseJobListResponseBody struct {
	NonExistJobIds *QueryVideoPoseJobListResponseBodyNonExistJobIds `json:"NonExistJobIds,omitempty" xml:"NonExistJobIds,omitempty" type:"Struct"`
	RequestId      *string                                          `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobList        *QueryVideoPoseJobListResponseBodyJobList        `json:"JobList,omitempty" xml:"JobList,omitempty" type:"Struct"`
}

func (s QueryVideoPoseJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBody) SetNonExistJobIds(v *QueryVideoPoseJobListResponseBodyNonExistJobIds) *QueryVideoPoseJobListResponseBody {
	s.NonExistJobIds = v
	return s
}

func (s *QueryVideoPoseJobListResponseBody) SetRequestId(v string) *QueryVideoPoseJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBody) SetJobList(v *QueryVideoPoseJobListResponseBodyJobList) *QueryVideoPoseJobListResponseBody {
	s.JobList = v
	return s
}

type QueryVideoPoseJobListResponseBodyNonExistJobIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryVideoPoseJobListResponseBodyNonExistJobIds) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyNonExistJobIds) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyNonExistJobIds) SetString_(v []*string) *QueryVideoPoseJobListResponseBodyNonExistJobIds {
	s.String_ = v
	return s
}

type QueryVideoPoseJobListResponseBodyJobList struct {
	Job []*QueryVideoPoseJobListResponseBodyJobListJob `json:"Job,omitempty" xml:"Job,omitempty" type:"Repeated"`
}

func (s QueryVideoPoseJobListResponseBodyJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobList) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobList) SetJob(v []*QueryVideoPoseJobListResponseBodyJobListJob) *QueryVideoPoseJobListResponseBodyJobList {
	s.Job = v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJob struct {
	OutputConfig     *QueryVideoPoseJobListResponseBodyJobListJobOutputConfig     `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty" type:"Struct"`
	State            *string                                                      `json:"State,omitempty" xml:"State,omitempty"`
	JobId            *string                                                      `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData         *string                                                      `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId       *string                                                      `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	MNSMessageResult *QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	Input            *QueryVideoPoseJobListResponseBodyJobListJobInput            `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Properties       *QueryVideoPoseJobListResponseBodyJobListJobProperties       `json:"Properties,omitempty" xml:"Properties,omitempty" type:"Struct"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJob) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJob) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJob) SetOutputConfig(v *QueryVideoPoseJobListResponseBodyJobListJobOutputConfig) *QueryVideoPoseJobListResponseBodyJobListJob {
	s.OutputConfig = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJob) SetState(v string) *QueryVideoPoseJobListResponseBodyJobListJob {
	s.State = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJob) SetJobId(v string) *QueryVideoPoseJobListResponseBodyJobListJob {
	s.JobId = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJob) SetUserData(v string) *QueryVideoPoseJobListResponseBodyJobListJob {
	s.UserData = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJob) SetPipelineId(v string) *QueryVideoPoseJobListResponseBodyJobListJob {
	s.PipelineId = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJob) SetMNSMessageResult(v *QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult) *QueryVideoPoseJobListResponseBodyJobListJob {
	s.MNSMessageResult = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJob) SetInput(v *QueryVideoPoseJobListResponseBodyJobListJobInput) *QueryVideoPoseJobListResponseBodyJobListJob {
	s.Input = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJob) SetProperties(v *QueryVideoPoseJobListResponseBodyJobListJobProperties) *QueryVideoPoseJobListResponseBodyJobListJob {
	s.Properties = v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobOutputConfig struct {
	DataFile  *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile  `json:"DataFile,omitempty" xml:"DataFile,omitempty" type:"Struct"`
	VideoFile *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile `json:"VideoFile,omitempty" xml:"VideoFile,omitempty" type:"Struct"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobOutputConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobOutputConfig) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfig) SetDataFile(v *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfig {
	s.DataFile = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfig) SetVideoFile(v *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfig {
	s.VideoFile = v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile) SetRoleArn(v string) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile {
	s.RoleArn = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile) SetObject(v string) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile {
	s.Object = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile) SetLocation(v string) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile {
	s.Location = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile) SetBucket(v string) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigDataFile {
	s.Bucket = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile) SetRoleArn(v string) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile {
	s.RoleArn = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile) SetObject(v string) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile {
	s.Object = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile) SetLocation(v string) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile {
	s.Location = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile) SetBucket(v string) *QueryVideoPoseJobListResponseBodyJobListJobOutputConfigVideoFile {
	s.Bucket = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult) SetMessageId(v string) *QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult) SetErrorMessage(v string) *QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult) SetErrorCode(v string) *QueryVideoPoseJobListResponseBodyJobListJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobInput struct {
	RoleArn  *string `json:"RoleArn,omitempty" xml:"RoleArn,omitempty"`
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobInput) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobInput) SetRoleArn(v string) *QueryVideoPoseJobListResponseBodyJobListJobInput {
	s.RoleArn = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobInput) SetObject(v string) *QueryVideoPoseJobListResponseBodyJobListJobInput {
	s.Object = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobInput) SetLocation(v string) *QueryVideoPoseJobListResponseBodyJobListJobInput {
	s.Location = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobInput) SetBucket(v string) *QueryVideoPoseJobListResponseBodyJobListJobInput {
	s.Bucket = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobProperties struct {
	Width      *string                                                       `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                       `json:"Height,omitempty" xml:"Height,omitempty"`
	Duration   *string                                                       `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps        *string                                                       `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Bitrate    *string                                                       `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FileFormat *string                                                       `json:"FileFormat,omitempty" xml:"FileFormat,omitempty"`
	Streams    *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams `json:"Streams,omitempty" xml:"Streams,omitempty" type:"Struct"`
	Format     *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat  `json:"Format,omitempty" xml:"Format,omitempty" type:"Struct"`
	FileSize   *string                                                       `json:"FileSize,omitempty" xml:"FileSize,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobProperties) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobProperties) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetWidth(v string) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.Width = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetHeight(v string) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.Height = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetDuration(v string) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.Duration = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetFps(v string) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.Fps = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetBitrate(v string) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.Bitrate = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetFileFormat(v string) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.FileFormat = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetStreams(v *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.Streams = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetFormat(v *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.Format = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobProperties) SetFileSize(v string) *QueryVideoPoseJobListResponseBodyJobListJobProperties {
	s.FileSize = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams struct {
	VideoStreamList    *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamList    `json:"VideoStreamList,omitempty" xml:"VideoStreamList,omitempty" type:"Struct"`
	AudioStreamList    *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamList    `json:"AudioStreamList,omitempty" xml:"AudioStreamList,omitempty" type:"Struct"`
	SubtitleStreamList *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamList `json:"SubtitleStreamList,omitempty" xml:"SubtitleStreamList,omitempty" type:"Struct"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams) SetVideoStreamList(v *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamList) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams {
	s.VideoStreamList = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams) SetAudioStreamList(v *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamList) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams {
	s.AudioStreamList = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams) SetSubtitleStreamList(v *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamList) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreams {
	s.SubtitleStreamList = v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamList struct {
	VideoStream []*QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream `json:"VideoStream,omitempty" xml:"VideoStream,omitempty" type:"Repeated"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamList) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamList) SetVideoStream(v []*QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamList {
	s.VideoStream = v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream struct {
	Sar            *string                                                                                            `json:"Sar,omitempty" xml:"Sar,omitempty"`
	Height         *string                                                                                            `json:"Height,omitempty" xml:"Height,omitempty"`
	CodecTagString *string                                                                                            `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	NetworkCost    *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost `json:"NetworkCost,omitempty" xml:"NetworkCost,omitempty" type:"Struct"`
	Width          *string                                                                                            `json:"Width,omitempty" xml:"Width,omitempty"`
	Index          *string                                                                                            `json:"Index,omitempty" xml:"Index,omitempty"`
	Timebase       *string                                                                                            `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	AvgFPS         *string                                                                                            `json:"AvgFPS,omitempty" xml:"AvgFPS,omitempty"`
	PixFmt         *string                                                                                            `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Lang           *string                                                                                            `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string                                                                                            `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	NumFrames      *string                                                                                            `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Rotate         *string                                                                                            `json:"Rotate,omitempty" xml:"Rotate,omitempty"`
	Bitrate        *string                                                                                            `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	HasBFrames     *string                                                                                            `json:"HasBFrames,omitempty" xml:"HasBFrames,omitempty"`
	Profile        *string                                                                                            `json:"Profile,omitempty" xml:"Profile,omitempty"`
	StartTime      *string                                                                                            `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	Dar            *string                                                                                            `json:"Dar,omitempty" xml:"Dar,omitempty"`
	CodecName      *string                                                                                            `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string                                                                                            `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Fps            *string                                                                                            `json:"Fps,omitempty" xml:"Fps,omitempty"`
	CodecTag       *string                                                                                            `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string                                                                                            `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	Level          *string                                                                                            `json:"Level,omitempty" xml:"Level,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetSar(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Sar = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetHeight(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Height = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTagString(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetNetworkCost(v *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.NetworkCost = v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetWidth(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Width = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetIndex(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Index = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetTimebase(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Timebase = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetAvgFPS(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.AvgFPS = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetPixFmt(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.PixFmt = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetLang(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Lang = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetCodecLongName(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetNumFrames(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.NumFrames = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetRotate(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Rotate = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetBitrate(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Bitrate = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetHasBFrames(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.HasBFrames = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetProfile(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Profile = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetStartTime(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.StartTime = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetDar(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Dar = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetCodecName(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecName = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetDuration(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Duration = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetFps(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Fps = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTag(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTag = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetCodecTimeBase(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream) SetLevel(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStream {
	s.Level = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost struct {
	PreloadTime   *string `json:"PreloadTime,omitempty" xml:"PreloadTime,omitempty"`
	AvgBitrate    *string `json:"AvgBitrate,omitempty" xml:"AvgBitrate,omitempty"`
	CostBandwidth *string `json:"CostBandwidth,omitempty" xml:"CostBandwidth,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetPreloadTime(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.PreloadTime = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetAvgBitrate(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.AvgBitrate = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost) SetCostBandwidth(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsVideoStreamListVideoStreamNetworkCost {
	s.CostBandwidth = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamList struct {
	AudioStream []*QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream `json:"AudioStream,omitempty" xml:"AudioStream,omitempty" type:"Repeated"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamList) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamList) SetAudioStream(v []*QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamList {
	s.AudioStream = v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	SampleFmt      *string `json:"SampleFmt,omitempty" xml:"SampleFmt,omitempty"`
	ChannelLayout  *string `json:"ChannelLayout,omitempty" xml:"ChannelLayout,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	Samplerate     *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Channels       *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	NumFrames      *string `json:"NumFrames,omitempty" xml:"NumFrames,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetTimebase(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.Timebase = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetIndex(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.Index = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetSampleFmt(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.SampleFmt = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetChannelLayout(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.ChannelLayout = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetLang(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.Lang = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetSamplerate(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.Samplerate = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetCodecLongName(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetChannels(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.Channels = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetNumFrames(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.NumFrames = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetBitrate(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.Bitrate = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTagString(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTagString = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetStartTime(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.StartTime = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetCodecName(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecName = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetDuration(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.Duration = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTag(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTag = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream) SetCodecTimeBase(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsAudioStreamListAudioStream {
	s.CodecTimeBase = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamList struct {
	SubtitleStream []*QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream `json:"SubtitleStream,omitempty" xml:"SubtitleStream,omitempty" type:"Repeated"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamList) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamList) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamList) SetSubtitleStream(v []*QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamList {
	s.SubtitleStream = v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream struct {
	Timebase       *string `json:"Timebase,omitempty" xml:"Timebase,omitempty"`
	Index          *string `json:"Index,omitempty" xml:"Index,omitempty"`
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	CodecName      *string `json:"CodecName,omitempty" xml:"CodecName,omitempty"`
	Lang           *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	CodecLongName  *string `json:"CodecLongName,omitempty" xml:"CodecLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	CodecTag       *string `json:"CodecTag,omitempty" xml:"CodecTag,omitempty"`
	CodecTimeBase  *string `json:"CodecTimeBase,omitempty" xml:"CodecTimeBase,omitempty"`
	CodecTagString *string `json:"CodecTagString,omitempty" xml:"CodecTagString,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetTimebase(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Timebase = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetIndex(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Index = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetStartTime(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.StartTime = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecName(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecName = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetLang(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Lang = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecLongName(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecLongName = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetDuration(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.Duration = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTag(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTag = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTimeBase(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTimeBase = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream) SetCodecTagString(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesStreamsSubtitleStreamListSubtitleStream {
	s.CodecTagString = &v
	return s
}

type QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat struct {
	StartTime      *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	NumPrograms    *string `json:"NumPrograms,omitempty" xml:"NumPrograms,omitempty"`
	Size           *string `json:"Size,omitempty" xml:"Size,omitempty"`
	NumStreams     *string `json:"NumStreams,omitempty" xml:"NumStreams,omitempty"`
	FormatLongName *string `json:"FormatLongName,omitempty" xml:"FormatLongName,omitempty"`
	Duration       *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
	Bitrate        *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	FormatName     *string `json:"FormatName,omitempty" xml:"FormatName,omitempty"`
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) SetStartTime(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat {
	s.StartTime = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) SetNumPrograms(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat {
	s.NumPrograms = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) SetSize(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat {
	s.Size = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) SetNumStreams(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat {
	s.NumStreams = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) SetFormatLongName(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat {
	s.FormatLongName = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) SetDuration(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat {
	s.Duration = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) SetBitrate(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat {
	s.Bitrate = &v
	return s
}

func (s *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat) SetFormatName(v string) *QueryVideoPoseJobListResponseBodyJobListJobPropertiesFormat {
	s.FormatName = &v
	return s
}

type QueryVideoPoseJobListResponse struct {
	Headers map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryVideoPoseJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryVideoPoseJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryVideoPoseJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryVideoPoseJobListResponse) SetHeaders(v map[string]*string) *QueryVideoPoseJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryVideoPoseJobListResponse) SetBody(v *QueryVideoPoseJobListResponseBody) *QueryVideoPoseJobListResponse {
	s.Body = v
	return s
}

type SubmitAnalysisJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	AnalysisConfig       *string `json:"AnalysisConfig,omitempty" xml:"AnalysisConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Priority             *string `json:"Priority,omitempty" xml:"Priority,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitAnalysisJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobRequest) SetOwnerId(v int64) *SubmitAnalysisJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetResourceOwnerAccount(v string) *SubmitAnalysisJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetResourceOwnerId(v int64) *SubmitAnalysisJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetInput(v string) *SubmitAnalysisJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetAnalysisConfig(v string) *SubmitAnalysisJobRequest {
	s.AnalysisConfig = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetUserData(v string) *SubmitAnalysisJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetPipelineId(v string) *SubmitAnalysisJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetPriority(v string) *SubmitAnalysisJobRequest {
	s.Priority = &v
	return s
}

func (s *SubmitAnalysisJobRequest) SetOwnerAccount(v string) *SubmitAnalysisJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitAnalysisJobResponseBody struct {
	RequestId   *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	AnalysisJob *SubmitAnalysisJobResponseBodyAnalysisJob `json:"AnalysisJob,omitempty" xml:"AnalysisJob,omitempty" type:"Struct"`
}

func (s SubmitAnalysisJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBody) SetRequestId(v string) *SubmitAnalysisJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitAnalysisJobResponseBody) SetAnalysisJob(v *SubmitAnalysisJobResponseBodyAnalysisJob) *SubmitAnalysisJobResponseBody {
	s.AnalysisJob = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJob struct {
	CreationTime     *string                                                   `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	Percent          *int64                                                    `json:"Percent,omitempty" xml:"Percent,omitempty"`
	State            *string                                                   `json:"State,omitempty" xml:"State,omitempty"`
	AnalysisConfig   *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig   `json:"AnalysisConfig,omitempty" xml:"AnalysisConfig,omitempty" type:"Struct"`
	Message          *string                                                   `json:"Message,omitempty" xml:"Message,omitempty"`
	Priority         *string                                                   `json:"Priority,omitempty" xml:"Priority,omitempty"`
	MNSMessageResult *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult `json:"MNSMessageResult,omitempty" xml:"MNSMessageResult,omitempty" type:"Struct"`
	TemplateList     *SubmitAnalysisJobResponseBodyAnalysisJobTemplateList     `json:"TemplateList,omitempty" xml:"TemplateList,omitempty" type:"Struct"`
	UserData         *string                                                   `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code             *string                                                   `json:"Code,omitempty" xml:"Code,omitempty"`
	InputFile        *SubmitAnalysisJobResponseBodyAnalysisJobInputFile        `json:"InputFile,omitempty" xml:"InputFile,omitempty" type:"Struct"`
	PipelineId       *string                                                   `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Id               *string                                                   `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJob) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetCreationTime(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.CreationTime = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetPercent(v int64) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Percent = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetState(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.State = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetAnalysisConfig(v *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.AnalysisConfig = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetMessage(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Message = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetPriority(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Priority = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetMNSMessageResult(v *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.MNSMessageResult = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetTemplateList(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateList) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.TemplateList = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetUserData(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.UserData = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetCode(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Code = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetInputFile(v *SubmitAnalysisJobResponseBodyAnalysisJobInputFile) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.InputFile = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetPipelineId(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.PipelineId = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJob) SetId(v string) *SubmitAnalysisJobResponseBodyAnalysisJob {
	s.Id = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig struct {
	QualityControl    *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl    `json:"QualityControl,omitempty" xml:"QualityControl,omitempty" type:"Struct"`
	PropertiesControl *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl `json:"PropertiesControl,omitempty" xml:"PropertiesControl,omitempty" type:"Struct"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) SetQualityControl(v *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig {
	s.QualityControl = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig) SetPropertiesControl(v *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfig {
	s.PropertiesControl = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl struct {
	MethodStreaming *string `json:"MethodStreaming,omitempty" xml:"MethodStreaming,omitempty"`
	RateQuality     *string `json:"RateQuality,omitempty" xml:"RateQuality,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) SetMethodStreaming(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl {
	s.MethodStreaming = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl) SetRateQuality(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigQualityControl {
	s.RateQuality = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl struct {
	Deinterlace *string                                                                      `json:"Deinterlace,omitempty" xml:"Deinterlace,omitempty"`
	Crop        *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop `json:"Crop,omitempty" xml:"Crop,omitempty" type:"Struct"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) SetDeinterlace(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl {
	s.Deinterlace = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl) SetCrop(v *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControl {
	s.Crop = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop struct {
	Top    *string `json:"Top,omitempty" xml:"Top,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Left   *string `json:"Left,omitempty" xml:"Left,omitempty"`
	Mode   *string `json:"Mode,omitempty" xml:"Mode,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetTop(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Top = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetWidth(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Width = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetHeight(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Height = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetLeft(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Left = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop) SetMode(v string) *SubmitAnalysisJobResponseBodyAnalysisJobAnalysisConfigPropertiesControlCrop {
	s.Mode = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult struct {
	MessageId    *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	ErrorCode    *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) SetMessageId(v string) *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult {
	s.MessageId = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) SetErrorMessage(v string) *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult {
	s.ErrorMessage = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult) SetErrorCode(v string) *SubmitAnalysisJobResponseBodyAnalysisJobMNSMessageResult {
	s.ErrorCode = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateList struct {
	Template []*SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate `json:"Template,omitempty" xml:"Template,omitempty" type:"Repeated"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateList) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateList) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateList) SetTemplate(v []*SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateList {
	s.Template = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate struct {
	Video       *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo       `json:"Video,omitempty" xml:"Video,omitempty" type:"Struct"`
	TransConfig *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig `json:"TransConfig,omitempty" xml:"TransConfig,omitempty" type:"Struct"`
	State       *string                                                                  `json:"State,omitempty" xml:"State,omitempty"`
	MuxConfig   *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig   `json:"MuxConfig,omitempty" xml:"MuxConfig,omitempty" type:"Struct"`
	Name        *string                                                                  `json:"Name,omitempty" xml:"Name,omitempty"`
	Audio       *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio       `json:"Audio,omitempty" xml:"Audio,omitempty" type:"Struct"`
	Id          *string                                                                  `json:"Id,omitempty" xml:"Id,omitempty"`
	Container   *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer   `json:"Container,omitempty" xml:"Container,omitempty" type:"Struct"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetVideo(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Video = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetTransConfig(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.TransConfig = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetState(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.State = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetMuxConfig(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.MuxConfig = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetName(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Name = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetAudio(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Audio = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetId(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Id = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate) SetContainer(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplate {
	s.Container = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo struct {
	Bufsize    *string                                                                      `json:"Bufsize,omitempty" xml:"Bufsize,omitempty"`
	Degrain    *string                                                                      `json:"Degrain,omitempty" xml:"Degrain,omitempty"`
	BitrateBnd *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd `json:"BitrateBnd,omitempty" xml:"BitrateBnd,omitempty" type:"Struct"`
	PixFmt     *string                                                                      `json:"PixFmt,omitempty" xml:"PixFmt,omitempty"`
	Codec      *string                                                                      `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Height     *string                                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	Qscale     *string                                                                      `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Bitrate    *string                                                                      `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
	Maxrate    *string                                                                      `json:"Maxrate,omitempty" xml:"Maxrate,omitempty"`
	Profile    *string                                                                      `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Crf        *string                                                                      `json:"Crf,omitempty" xml:"Crf,omitempty"`
	Gop        *string                                                                      `json:"Gop,omitempty" xml:"Gop,omitempty"`
	Width      *string                                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
	Fps        *string                                                                      `json:"Fps,omitempty" xml:"Fps,omitempty"`
	Preset     *string                                                                      `json:"Preset,omitempty" xml:"Preset,omitempty"`
	ScanMode   *string                                                                      `json:"ScanMode,omitempty" xml:"ScanMode,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetBufsize(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Bufsize = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetDegrain(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Degrain = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetBitrateBnd(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.BitrateBnd = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetPixFmt(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.PixFmt = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetCodec(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Codec = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetHeight(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Height = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetQscale(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Qscale = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetBitrate(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Bitrate = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetMaxrate(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Maxrate = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetProfile(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Profile = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetCrf(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Crf = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetGop(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Gop = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetWidth(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Width = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetFps(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Fps = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetPreset(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.Preset = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo) SetScanMode(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideo {
	s.ScanMode = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd struct {
	Max *string `json:"Max,omitempty" xml:"Max,omitempty"`
	Min *string `json:"Min,omitempty" xml:"Min,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) SetMax(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd {
	s.Max = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd) SetMin(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateVideoBitrateBnd {
	s.Min = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig struct {
	TransMode *string `json:"TransMode,omitempty" xml:"TransMode,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig) SetTransMode(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateTransConfig {
	s.TransMode = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig struct {
	Gif     *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif     `json:"Gif,omitempty" xml:"Gif,omitempty" type:"Struct"`
	Segment *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment `json:"Segment,omitempty" xml:"Segment,omitempty" type:"Struct"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) SetGif(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig {
	s.Gif = v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig) SetSegment(v *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfig {
	s.Segment = v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif struct {
	FinalDelay *string `json:"FinalDelay,omitempty" xml:"FinalDelay,omitempty"`
	Loop       *string `json:"Loop,omitempty" xml:"Loop,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) SetFinalDelay(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif {
	s.FinalDelay = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif) SetLoop(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigGif {
	s.Loop = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment struct {
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment) SetDuration(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateMuxConfigSegment {
	s.Duration = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio struct {
	Profile    *string `json:"Profile,omitempty" xml:"Profile,omitempty"`
	Codec      *string `json:"Codec,omitempty" xml:"Codec,omitempty"`
	Samplerate *string `json:"Samplerate,omitempty" xml:"Samplerate,omitempty"`
	Qscale     *string `json:"Qscale,omitempty" xml:"Qscale,omitempty"`
	Channels   *string `json:"Channels,omitempty" xml:"Channels,omitempty"`
	Bitrate    *string `json:"Bitrate,omitempty" xml:"Bitrate,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetProfile(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Profile = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetCodec(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Codec = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetSamplerate(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Samplerate = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetQscale(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Qscale = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetChannels(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Channels = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio) SetBitrate(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateAudio {
	s.Bitrate = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer struct {
	Format *string `json:"Format,omitempty" xml:"Format,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer) SetFormat(v string) *SubmitAnalysisJobResponseBodyAnalysisJobTemplateListTemplateContainer {
	s.Format = &v
	return s
}

type SubmitAnalysisJobResponseBodyAnalysisJobInputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobInputFile) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponseBodyAnalysisJobInputFile) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobInputFile) SetObject(v string) *SubmitAnalysisJobResponseBodyAnalysisJobInputFile {
	s.Object = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobInputFile) SetLocation(v string) *SubmitAnalysisJobResponseBodyAnalysisJobInputFile {
	s.Location = &v
	return s
}

func (s *SubmitAnalysisJobResponseBodyAnalysisJobInputFile) SetBucket(v string) *SubmitAnalysisJobResponseBodyAnalysisJobInputFile {
	s.Bucket = &v
	return s
}

type SubmitAnalysisJobResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitAnalysisJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitAnalysisJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitAnalysisJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitAnalysisJobResponse) SetHeaders(v map[string]*string) *SubmitAnalysisJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitAnalysisJobResponse) SetBody(v *SubmitAnalysisJobResponseBody) *SubmitAnalysisJobResponse {
	s.Body = v
	return s
}

type SubmitVideoSplitJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Input                *string `json:"Input,omitempty" xml:"Input,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	VideoSplitConfig     *string `json:"VideoSplitConfig,omitempty" xml:"VideoSplitConfig,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s SubmitVideoSplitJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoSplitJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitVideoSplitJobRequest) SetOwnerId(v int64) *SubmitVideoSplitJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitVideoSplitJobRequest) SetResourceOwnerAccount(v string) *SubmitVideoSplitJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitVideoSplitJobRequest) SetResourceOwnerId(v int64) *SubmitVideoSplitJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitVideoSplitJobRequest) SetInput(v string) *SubmitVideoSplitJobRequest {
	s.Input = &v
	return s
}

func (s *SubmitVideoSplitJobRequest) SetPipelineId(v string) *SubmitVideoSplitJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitVideoSplitJobRequest) SetVideoSplitConfig(v string) *SubmitVideoSplitJobRequest {
	s.VideoSplitConfig = &v
	return s
}

func (s *SubmitVideoSplitJobRequest) SetUserData(v string) *SubmitVideoSplitJobRequest {
	s.UserData = &v
	return s
}

func (s *SubmitVideoSplitJobRequest) SetOwnerAccount(v string) *SubmitVideoSplitJobRequest {
	s.OwnerAccount = &v
	return s
}

type SubmitVideoSplitJobResponseBody struct {
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	JobId     *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s SubmitVideoSplitJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoSplitJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitVideoSplitJobResponseBody) SetRequestId(v string) *SubmitVideoSplitJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitVideoSplitJobResponseBody) SetJobId(v string) *SubmitVideoSplitJobResponseBody {
	s.JobId = &v
	return s
}

type SubmitVideoSplitJobResponse struct {
	Headers map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitVideoSplitJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitVideoSplitJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitVideoSplitJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitVideoSplitJobResponse) SetHeaders(v map[string]*string) *SubmitVideoSplitJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitVideoSplitJobResponse) SetBody(v *SubmitVideoSplitJobResponseBody) *SubmitVideoSplitJobResponse {
	s.Body = v
	return s
}

type PlayInfoRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	MediaId              *string `json:"MediaId,omitempty" xml:"MediaId,omitempty"`
	Formats              *string `json:"Formats,omitempty" xml:"Formats,omitempty"`
	AuthInfo             *string `json:"AuthInfo,omitempty" xml:"AuthInfo,omitempty"`
	AuthTimeout          *int64  `json:"AuthTimeout,omitempty" xml:"AuthTimeout,omitempty"`
	Rand                 *string `json:"Rand,omitempty" xml:"Rand,omitempty"`
	PlayDomain           *string `json:"PlayDomain,omitempty" xml:"PlayDomain,omitempty"`
	HlsUriToken          *string `json:"HlsUriToken,omitempty" xml:"HlsUriToken,omitempty"`
	Terminal             *string `json:"Terminal,omitempty" xml:"Terminal,omitempty"`
}

func (s PlayInfoRequest) String() string {
	return tea.Prettify(s)
}

func (s PlayInfoRequest) GoString() string {
	return s.String()
}

func (s *PlayInfoRequest) SetOwnerId(v string) *PlayInfoRequest {
	s.OwnerId = &v
	return s
}

func (s *PlayInfoRequest) SetResourceOwnerId(v string) *PlayInfoRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PlayInfoRequest) SetResourceOwnerAccount(v string) *PlayInfoRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PlayInfoRequest) SetOwnerAccount(v string) *PlayInfoRequest {
	s.OwnerAccount = &v
	return s
}

func (s *PlayInfoRequest) SetMediaId(v string) *PlayInfoRequest {
	s.MediaId = &v
	return s
}

func (s *PlayInfoRequest) SetFormats(v string) *PlayInfoRequest {
	s.Formats = &v
	return s
}

func (s *PlayInfoRequest) SetAuthInfo(v string) *PlayInfoRequest {
	s.AuthInfo = &v
	return s
}

func (s *PlayInfoRequest) SetAuthTimeout(v int64) *PlayInfoRequest {
	s.AuthTimeout = &v
	return s
}

func (s *PlayInfoRequest) SetRand(v string) *PlayInfoRequest {
	s.Rand = &v
	return s
}

func (s *PlayInfoRequest) SetPlayDomain(v string) *PlayInfoRequest {
	s.PlayDomain = &v
	return s
}

func (s *PlayInfoRequest) SetHlsUriToken(v string) *PlayInfoRequest {
	s.HlsUriToken = &v
	return s
}

func (s *PlayInfoRequest) SetTerminal(v string) *PlayInfoRequest {
	s.Terminal = &v
	return s
}

type PlayInfoResponseBody struct {
	RequestId         *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NotFoundCDNDomain *PlayInfoResponseBodyNotFoundCDNDomain `json:"NotFoundCDNDomain,omitempty" xml:"NotFoundCDNDomain,omitempty" type:"Struct"`
	PlayInfoList      *PlayInfoResponseBodyPlayInfoList      `json:"PlayInfoList,omitempty" xml:"PlayInfoList,omitempty" type:"Struct"`
}

func (s PlayInfoResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PlayInfoResponseBody) GoString() string {
	return s.String()
}

func (s *PlayInfoResponseBody) SetRequestId(v string) *PlayInfoResponseBody {
	s.RequestId = &v
	return s
}

func (s *PlayInfoResponseBody) SetNotFoundCDNDomain(v *PlayInfoResponseBodyNotFoundCDNDomain) *PlayInfoResponseBody {
	s.NotFoundCDNDomain = v
	return s
}

func (s *PlayInfoResponseBody) SetPlayInfoList(v *PlayInfoResponseBodyPlayInfoList) *PlayInfoResponseBody {
	s.PlayInfoList = v
	return s
}

type PlayInfoResponseBodyNotFoundCDNDomain struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s PlayInfoResponseBodyNotFoundCDNDomain) String() string {
	return tea.Prettify(s)
}

func (s PlayInfoResponseBodyNotFoundCDNDomain) GoString() string {
	return s.String()
}

func (s *PlayInfoResponseBodyNotFoundCDNDomain) SetString_(v []*string) *PlayInfoResponseBodyNotFoundCDNDomain {
	s.String_ = v
	return s
}

type PlayInfoResponseBodyPlayInfoList struct {
	PlayInfo []*PlayInfoResponseBodyPlayInfoListPlayInfo `json:"PlayInfo,omitempty" xml:"PlayInfo,omitempty" type:"Repeated"`
}

func (s PlayInfoResponseBodyPlayInfoList) String() string {
	return tea.Prettify(s)
}

func (s PlayInfoResponseBodyPlayInfoList) GoString() string {
	return s.String()
}

func (s *PlayInfoResponseBodyPlayInfoList) SetPlayInfo(v []*PlayInfoResponseBodyPlayInfoListPlayInfo) *PlayInfoResponseBodyPlayInfoList {
	s.PlayInfo = v
	return s
}

type PlayInfoResponseBodyPlayInfoListPlayInfo struct {
	DownloadType   *string `json:"downloadType,omitempty" xml:"downloadType,omitempty"`
	Width          *string `json:"width,omitempty" xml:"width,omitempty"`
	Definition     *string `json:"definition,omitempty" xml:"definition,omitempty"`
	Rand           *string `json:"rand,omitempty" xml:"rand,omitempty"`
	Url            *string `json:"Url,omitempty" xml:"Url,omitempty"`
	Complexity     *string `json:"complexity,omitempty" xml:"complexity,omitempty"`
	Encryption     *string `json:"encryption,omitempty" xml:"encryption,omitempty"`
	Fps            *string `json:"fps,omitempty" xml:"fps,omitempty"`
	EncryptionType *string `json:"encryptionType,omitempty" xml:"encryptionType,omitempty"`
	Height         *string `json:"height,omitempty" xml:"height,omitempty"`
	ActivityName   *string `json:"activityName,omitempty" xml:"activityName,omitempty"`
	Size           *string `json:"size,omitempty" xml:"size,omitempty"`
	Bitrate        *string `json:"bitrate,omitempty" xml:"bitrate,omitempty"`
	Plaintext      *string `json:"plaintext,omitempty" xml:"plaintext,omitempty"`
	Duration       *string `json:"duration,omitempty" xml:"duration,omitempty"`
	Format         *string `json:"format,omitempty" xml:"format,omitempty"`
}

func (s PlayInfoResponseBodyPlayInfoListPlayInfo) String() string {
	return tea.Prettify(s)
}

func (s PlayInfoResponseBodyPlayInfoListPlayInfo) GoString() string {
	return s.String()
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetDownloadType(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.DownloadType = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetWidth(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Width = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetDefinition(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Definition = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetRand(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Rand = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetUrl(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Url = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetComplexity(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Complexity = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetEncryption(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Encryption = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetFps(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Fps = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetEncryptionType(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.EncryptionType = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetHeight(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Height = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetActivityName(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.ActivityName = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetSize(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Size = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetBitrate(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Bitrate = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetPlaintext(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Plaintext = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetDuration(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Duration = &v
	return s
}

func (s *PlayInfoResponseBodyPlayInfoListPlayInfo) SetFormat(v string) *PlayInfoResponseBodyPlayInfoListPlayInfo {
	s.Format = &v
	return s
}

type PlayInfoResponse struct {
	Headers map[string]*string    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PlayInfoResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PlayInfoResponse) String() string {
	return tea.Prettify(s)
}

func (s PlayInfoResponse) GoString() string {
	return s.String()
}

func (s *PlayInfoResponse) SetHeaders(v map[string]*string) *PlayInfoResponse {
	s.Headers = v
	return s
}

func (s *PlayInfoResponse) SetBody(v *PlayInfoResponseBody) *PlayInfoResponse {
	s.Body = v
	return s
}

type SubmitSubtitleJobRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
	InputConfig          *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
	OutputConfig         *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	PipelineId           *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	UserData             *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
}

func (s SubmitSubtitleJobRequest) String() string {
	return tea.Prettify(s)
}

func (s SubmitSubtitleJobRequest) GoString() string {
	return s.String()
}

func (s *SubmitSubtitleJobRequest) SetOwnerId(v int64) *SubmitSubtitleJobRequest {
	s.OwnerId = &v
	return s
}

func (s *SubmitSubtitleJobRequest) SetResourceOwnerAccount(v string) *SubmitSubtitleJobRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *SubmitSubtitleJobRequest) SetResourceOwnerId(v int64) *SubmitSubtitleJobRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *SubmitSubtitleJobRequest) SetOwnerAccount(v string) *SubmitSubtitleJobRequest {
	s.OwnerAccount = &v
	return s
}

func (s *SubmitSubtitleJobRequest) SetInputConfig(v string) *SubmitSubtitleJobRequest {
	s.InputConfig = &v
	return s
}

func (s *SubmitSubtitleJobRequest) SetOutputConfig(v string) *SubmitSubtitleJobRequest {
	s.OutputConfig = &v
	return s
}

func (s *SubmitSubtitleJobRequest) SetPipelineId(v string) *SubmitSubtitleJobRequest {
	s.PipelineId = &v
	return s
}

func (s *SubmitSubtitleJobRequest) SetUserData(v string) *SubmitSubtitleJobRequest {
	s.UserData = &v
	return s
}

type SubmitSubtitleJobResponseBody struct {
	RequestId   *string                                   `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	SubtitleJob *SubmitSubtitleJobResponseBodySubtitleJob `json:"SubtitleJob,omitempty" xml:"SubtitleJob,omitempty" type:"Struct"`
}

func (s SubmitSubtitleJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SubmitSubtitleJobResponseBody) GoString() string {
	return s.String()
}

func (s *SubmitSubtitleJobResponseBody) SetRequestId(v string) *SubmitSubtitleJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *SubmitSubtitleJobResponseBody) SetSubtitleJob(v *SubmitSubtitleJobResponseBodySubtitleJob) *SubmitSubtitleJobResponseBody {
	s.SubtitleJob = v
	return s
}

type SubmitSubtitleJobResponseBodySubtitleJob struct {
	OutputConfig *string `json:"OutputConfig,omitempty" xml:"OutputConfig,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	JobId        *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	UserData     *string `json:"UserData,omitempty" xml:"UserData,omitempty"`
	InputConfig  *string `json:"InputConfig,omitempty" xml:"InputConfig,omitempty"`
}

func (s SubmitSubtitleJobResponseBodySubtitleJob) String() string {
	return tea.Prettify(s)
}

func (s SubmitSubtitleJobResponseBodySubtitleJob) GoString() string {
	return s.String()
}

func (s *SubmitSubtitleJobResponseBodySubtitleJob) SetOutputConfig(v string) *SubmitSubtitleJobResponseBodySubtitleJob {
	s.OutputConfig = &v
	return s
}

func (s *SubmitSubtitleJobResponseBodySubtitleJob) SetState(v string) *SubmitSubtitleJobResponseBodySubtitleJob {
	s.State = &v
	return s
}

func (s *SubmitSubtitleJobResponseBodySubtitleJob) SetJobId(v string) *SubmitSubtitleJobResponseBodySubtitleJob {
	s.JobId = &v
	return s
}

func (s *SubmitSubtitleJobResponseBodySubtitleJob) SetUserData(v string) *SubmitSubtitleJobResponseBodySubtitleJob {
	s.UserData = &v
	return s
}

func (s *SubmitSubtitleJobResponseBodySubtitleJob) SetInputConfig(v string) *SubmitSubtitleJobResponseBodySubtitleJob {
	s.InputConfig = &v
	return s
}

type SubmitSubtitleJobResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *SubmitSubtitleJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SubmitSubtitleJobResponse) String() string {
	return tea.Prettify(s)
}

func (s SubmitSubtitleJobResponse) GoString() string {
	return s.String()
}

func (s *SubmitSubtitleJobResponse) SetHeaders(v map[string]*string) *SubmitSubtitleJobResponse {
	s.Headers = v
	return s
}

func (s *SubmitSubtitleJobResponse) SetBody(v *SubmitSubtitleJobResponseBody) *SubmitSubtitleJobResponse {
	s.Body = v
	return s
}

type QueryCoverJobListRequest struct {
	OwnerId                    *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount       *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId            *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	CoverJobIds                *string `json:"CoverJobIds,omitempty" xml:"CoverJobIds,omitempty"`
	NextPageToken              *string `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	MaximumPageSize            *int64  `json:"MaximumPageSize,omitempty" xml:"MaximumPageSize,omitempty"`
	State                      *string `json:"State,omitempty" xml:"State,omitempty"`
	StartOfJobCreatedTimeRange *string `json:"StartOfJobCreatedTimeRange,omitempty" xml:"StartOfJobCreatedTimeRange,omitempty"`
	EndOfJobCreatedTimeRange   *string `json:"EndOfJobCreatedTimeRange,omitempty" xml:"EndOfJobCreatedTimeRange,omitempty"`
	PipelineId                 *string `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	OwnerAccount               *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s QueryCoverJobListRequest) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListRequest) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListRequest) SetOwnerId(v int64) *QueryCoverJobListRequest {
	s.OwnerId = &v
	return s
}

func (s *QueryCoverJobListRequest) SetResourceOwnerAccount(v string) *QueryCoverJobListRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *QueryCoverJobListRequest) SetResourceOwnerId(v int64) *QueryCoverJobListRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *QueryCoverJobListRequest) SetCoverJobIds(v string) *QueryCoverJobListRequest {
	s.CoverJobIds = &v
	return s
}

func (s *QueryCoverJobListRequest) SetNextPageToken(v string) *QueryCoverJobListRequest {
	s.NextPageToken = &v
	return s
}

func (s *QueryCoverJobListRequest) SetMaximumPageSize(v int64) *QueryCoverJobListRequest {
	s.MaximumPageSize = &v
	return s
}

func (s *QueryCoverJobListRequest) SetState(v string) *QueryCoverJobListRequest {
	s.State = &v
	return s
}

func (s *QueryCoverJobListRequest) SetStartOfJobCreatedTimeRange(v string) *QueryCoverJobListRequest {
	s.StartOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryCoverJobListRequest) SetEndOfJobCreatedTimeRange(v string) *QueryCoverJobListRequest {
	s.EndOfJobCreatedTimeRange = &v
	return s
}

func (s *QueryCoverJobListRequest) SetPipelineId(v string) *QueryCoverJobListRequest {
	s.PipelineId = &v
	return s
}

func (s *QueryCoverJobListRequest) SetOwnerAccount(v string) *QueryCoverJobListRequest {
	s.OwnerAccount = &v
	return s
}

type QueryCoverJobListResponseBody struct {
	CoverJobList  *QueryCoverJobListResponseBodyCoverJobList `json:"CoverJobList,omitempty" xml:"CoverJobList,omitempty" type:"Struct"`
	RequestId     *string                                    `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	NextPageToken *string                                    `json:"NextPageToken,omitempty" xml:"NextPageToken,omitempty"`
	NonExistIds   *QueryCoverJobListResponseBodyNonExistIds  `json:"NonExistIds,omitempty" xml:"NonExistIds,omitempty" type:"Struct"`
}

func (s QueryCoverJobListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBody) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBody) SetCoverJobList(v *QueryCoverJobListResponseBodyCoverJobList) *QueryCoverJobListResponseBody {
	s.CoverJobList = v
	return s
}

func (s *QueryCoverJobListResponseBody) SetRequestId(v string) *QueryCoverJobListResponseBody {
	s.RequestId = &v
	return s
}

func (s *QueryCoverJobListResponseBody) SetNextPageToken(v string) *QueryCoverJobListResponseBody {
	s.NextPageToken = &v
	return s
}

func (s *QueryCoverJobListResponseBody) SetNonExistIds(v *QueryCoverJobListResponseBodyNonExistIds) *QueryCoverJobListResponseBody {
	s.NonExistIds = v
	return s
}

type QueryCoverJobListResponseBodyCoverJobList struct {
	CoverJob []*QueryCoverJobListResponseBodyCoverJobListCoverJob `json:"CoverJob,omitempty" xml:"CoverJob,omitempty" type:"Repeated"`
}

func (s QueryCoverJobListResponseBodyCoverJobList) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBodyCoverJobList) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBodyCoverJobList) SetCoverJob(v []*QueryCoverJobListResponseBodyCoverJobListCoverJob) *QueryCoverJobListResponseBodyCoverJobList {
	s.CoverJob = v
	return s
}

type QueryCoverJobListResponseBodyCoverJobListCoverJob struct {
	CreationTime   *string                                                          `json:"CreationTime,omitempty" xml:"CreationTime,omitempty"`
	State          *string                                                          `json:"State,omitempty" xml:"State,omitempty"`
	CoverImageList *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageList `json:"CoverImageList,omitempty" xml:"CoverImageList,omitempty" type:"Struct"`
	UserData       *string                                                          `json:"UserData,omitempty" xml:"UserData,omitempty"`
	Code           *string                                                          `json:"Code,omitempty" xml:"Code,omitempty"`
	Message        *string                                                          `json:"Message,omitempty" xml:"Message,omitempty"`
	PipelineId     *string                                                          `json:"PipelineId,omitempty" xml:"PipelineId,omitempty"`
	Input          *QueryCoverJobListResponseBodyCoverJobListCoverJobInput          `json:"Input,omitempty" xml:"Input,omitempty" type:"Struct"`
	Id             *string                                                          `json:"Id,omitempty" xml:"Id,omitempty"`
	CoverConfig    *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfig    `json:"CoverConfig,omitempty" xml:"CoverConfig,omitempty" type:"Struct"`
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJob) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJob) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetCreationTime(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.CreationTime = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetState(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.State = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetCoverImageList(v *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageList) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.CoverImageList = v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetUserData(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.UserData = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetCode(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.Code = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetMessage(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.Message = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetPipelineId(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.PipelineId = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetInput(v *QueryCoverJobListResponseBodyCoverJobListCoverJobInput) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.Input = v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetId(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.Id = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJob) SetCoverConfig(v *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfig) *QueryCoverJobListResponseBodyCoverJobListCoverJob {
	s.CoverConfig = v
	return s
}

type QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageList struct {
	CoverImage []*QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage `json:"CoverImage,omitempty" xml:"CoverImage,omitempty" type:"Repeated"`
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageList) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageList) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageList) SetCoverImage(v []*QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage) *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageList {
	s.CoverImage = v
	return s
}

type QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage struct {
	Time  *string `json:"Time,omitempty" xml:"Time,omitempty"`
	Score *string `json:"Score,omitempty" xml:"Score,omitempty"`
	Url   *string `json:"Url,omitempty" xml:"Url,omitempty"`
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage) SetTime(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage {
	s.Time = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage) SetScore(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage {
	s.Score = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage) SetUrl(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverImageListCoverImage {
	s.Url = &v
	return s
}

type QueryCoverJobListResponseBodyCoverJobListCoverJobInput struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobInput) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobInput) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobInput) SetObject(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobInput {
	s.Object = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobInput) SetLocation(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobInput {
	s.Location = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobInput) SetBucket(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobInput {
	s.Bucket = &v
	return s
}

type QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfig struct {
	OutputFile *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile `json:"OutputFile,omitempty" xml:"OutputFile,omitempty" type:"Struct"`
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfig) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfig) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfig) SetOutputFile(v *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile) *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfig {
	s.OutputFile = v
	return s
}

type QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile struct {
	Object   *string `json:"Object,omitempty" xml:"Object,omitempty"`
	Location *string `json:"Location,omitempty" xml:"Location,omitempty"`
	Bucket   *string `json:"Bucket,omitempty" xml:"Bucket,omitempty"`
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile) SetObject(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile {
	s.Object = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile) SetLocation(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile {
	s.Location = &v
	return s
}

func (s *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile) SetBucket(v string) *QueryCoverJobListResponseBodyCoverJobListCoverJobCoverConfigOutputFile {
	s.Bucket = &v
	return s
}

type QueryCoverJobListResponseBodyNonExistIds struct {
	String_ []*string `json:"String,omitempty" xml:"String,omitempty" type:"Repeated"`
}

func (s QueryCoverJobListResponseBodyNonExistIds) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponseBodyNonExistIds) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponseBodyNonExistIds) SetString_(v []*string) *QueryCoverJobListResponseBodyNonExistIds {
	s.String_ = v
	return s
}

type QueryCoverJobListResponse struct {
	Headers map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *QueryCoverJobListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s QueryCoverJobListResponse) String() string {
	return tea.Prettify(s)
}

func (s QueryCoverJobListResponse) GoString() string {
	return s.String()
}

func (s *QueryCoverJobListResponse) SetHeaders(v map[string]*string) *QueryCoverJobListResponse {
	s.Headers = v
	return s
}

func (s *QueryCoverJobListResponse) SetBody(v *QueryCoverJobListResponseBody) *QueryCoverJobListResponse {
	s.Body = v
	return s
}

type AddWaterMarkTemplateRequest struct {
	OwnerId              *int64  `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	ResourceOwnerId      *int64  `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	Name                 *string `json:"Name,omitempty" xml:"Name,omitempty"`
	Config               *string `json:"Config,omitempty" xml:"Config,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s AddWaterMarkTemplateRequest) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateRequest) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateRequest) SetOwnerId(v int64) *AddWaterMarkTemplateRequest {
	s.OwnerId = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetResourceOwnerAccount(v string) *AddWaterMarkTemplateRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetResourceOwnerId(v int64) *AddWaterMarkTemplateRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetName(v string) *AddWaterMarkTemplateRequest {
	s.Name = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetConfig(v string) *AddWaterMarkTemplateRequest {
	s.Config = &v
	return s
}

func (s *AddWaterMarkTemplateRequest) SetOwnerAccount(v string) *AddWaterMarkTemplateRequest {
	s.OwnerAccount = &v
	return s
}

type AddWaterMarkTemplateResponseBody struct {
	WaterMarkTemplate *AddWaterMarkTemplateResponseBodyWaterMarkTemplate `json:"WaterMarkTemplate,omitempty" xml:"WaterMarkTemplate,omitempty" type:"Struct"`
	RequestId         *string                                            `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
}

func (s AddWaterMarkTemplateResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponseBody) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponseBody) SetWaterMarkTemplate(v *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) *AddWaterMarkTemplateResponseBody {
	s.WaterMarkTemplate = v
	return s
}

func (s *AddWaterMarkTemplateResponseBody) SetRequestId(v string) *AddWaterMarkTemplateResponseBody {
	s.RequestId = &v
	return s
}

type AddWaterMarkTemplateResponseBodyWaterMarkTemplate struct {
	Type       *string                                                      `json:"Type,omitempty" xml:"Type,omitempty"`
	RatioRefer *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer `json:"RatioRefer,omitempty" xml:"RatioRefer,omitempty" type:"Struct"`
	ReferPos   *string                                                      `json:"ReferPos,omitempty" xml:"ReferPos,omitempty"`
	State      *string                                                      `json:"State,omitempty" xml:"State,omitempty"`
	Dx         *string                                                      `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width      *string                                                      `json:"Width,omitempty" xml:"Width,omitempty"`
	Height     *string                                                      `json:"Height,omitempty" xml:"Height,omitempty"`
	Timeline   *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline   `json:"Timeline,omitempty" xml:"Timeline,omitempty" type:"Struct"`
	Name       *string                                                      `json:"Name,omitempty" xml:"Name,omitempty"`
	Dy         *string                                                      `json:"Dy,omitempty" xml:"Dy,omitempty"`
	Id         *string                                                      `json:"Id,omitempty" xml:"Id,omitempty"`
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplate) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplate) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetType(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Type = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetRatioRefer(v *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.RatioRefer = v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetReferPos(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.ReferPos = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetState(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.State = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetDx(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Dx = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetWidth(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Width = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetHeight(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Height = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetTimeline(v *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Timeline = v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetName(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Name = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetDy(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Dy = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplate) SetId(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplate {
	s.Id = &v
	return s
}

type AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer struct {
	Dx     *string `json:"Dx,omitempty" xml:"Dx,omitempty"`
	Width  *string `json:"Width,omitempty" xml:"Width,omitempty"`
	Height *string `json:"Height,omitempty" xml:"Height,omitempty"`
	Dy     *string `json:"Dy,omitempty" xml:"Dy,omitempty"`
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetDx(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Dx = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetWidth(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Width = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetHeight(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Height = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer) SetDy(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateRatioRefer {
	s.Dy = &v
	return s
}

type AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline struct {
	Start    *string `json:"Start,omitempty" xml:"Start,omitempty"`
	Duration *string `json:"Duration,omitempty" xml:"Duration,omitempty"`
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) SetStart(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline {
	s.Start = &v
	return s
}

func (s *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline) SetDuration(v string) *AddWaterMarkTemplateResponseBodyWaterMarkTemplateTimeline {
	s.Duration = &v
	return s
}

type AddWaterMarkTemplateResponse struct {
	Headers map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *AddWaterMarkTemplateResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddWaterMarkTemplateResponse) String() string {
	return tea.Prettify(s)
}

func (s AddWaterMarkTemplateResponse) GoString() string {
	return s.String()
}

func (s *AddWaterMarkTemplateResponse) SetHeaders(v map[string]*string) *AddWaterMarkTemplateResponse {
	s.Headers = v
	return s
}

func (s *AddWaterMarkTemplateResponse) SetBody(v *AddWaterMarkTemplateResponseBody) *AddWaterMarkTemplateResponse {
	s.Body = v
	return s
}

type PlayerAuthRequest struct {
	OwnerId              *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	ResourceOwnerId      *string `json:"ResourceOwnerId,omitempty" xml:"ResourceOwnerId,omitempty"`
	ResourceOwnerAccount *string `json:"ResourceOwnerAccount,omitempty" xml:"ResourceOwnerAccount,omitempty"`
	OwnerAccount         *string `json:"OwnerAccount,omitempty" xml:"OwnerAccount,omitempty"`
}

func (s PlayerAuthRequest) String() string {
	return tea.Prettify(s)
}

func (s PlayerAuthRequest) GoString() string {
	return s.String()
}

func (s *PlayerAuthRequest) SetOwnerId(v string) *PlayerAuthRequest {
	s.OwnerId = &v
	return s
}

func (s *PlayerAuthRequest) SetResourceOwnerId(v string) *PlayerAuthRequest {
	s.ResourceOwnerId = &v
	return s
}

func (s *PlayerAuthRequest) SetResourceOwnerAccount(v string) *PlayerAuthRequest {
	s.ResourceOwnerAccount = &v
	return s
}

func (s *PlayerAuthRequest) SetOwnerAccount(v string) *PlayerAuthRequest {
	s.OwnerAccount = &v
	return s
}

type PlayerAuthResponseBody struct {
	RequestId  *string                           `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	LogURL     *string                           `json:"LogURL,omitempty" xml:"LogURL,omitempty"`
	SwitchList *PlayerAuthResponseBodySwitchList `json:"SwitchList,omitempty" xml:"SwitchList,omitempty" type:"Struct"`
}

func (s PlayerAuthResponseBody) String() string {
	return tea.Prettify(s)
}

func (s PlayerAuthResponseBody) GoString() string {
	return s.String()
}

func (s *PlayerAuthResponseBody) SetRequestId(v string) *PlayerAuthResponseBody {
	s.RequestId = &v
	return s
}

func (s *PlayerAuthResponseBody) SetLogURL(v string) *PlayerAuthResponseBody {
	s.LogURL = &v
	return s
}

func (s *PlayerAuthResponseBody) SetSwitchList(v *PlayerAuthResponseBodySwitchList) *PlayerAuthResponseBody {
	s.SwitchList = v
	return s
}

type PlayerAuthResponseBodySwitchList struct {
	Switch []*PlayerAuthResponseBodySwitchListSwitch `json:"Switch,omitempty" xml:"Switch,omitempty" type:"Repeated"`
}

func (s PlayerAuthResponseBodySwitchList) String() string {
	return tea.Prettify(s)
}

func (s PlayerAuthResponseBodySwitchList) GoString() string {
	return s.String()
}

func (s *PlayerAuthResponseBodySwitchList) SetSwitch(v []*PlayerAuthResponseBodySwitchListSwitch) *PlayerAuthResponseBodySwitchList {
	s.Switch = v
	return s
}

type PlayerAuthResponseBodySwitchListSwitch struct {
	FunctionId   *string `json:"FunctionId,omitempty" xml:"FunctionId,omitempty"`
	FunctionName *string `json:"FunctionName,omitempty" xml:"FunctionName,omitempty"`
	State        *string `json:"State,omitempty" xml:"State,omitempty"`
	SwitchId     *string `json:"SwitchId,omitempty" xml:"SwitchId,omitempty"`
}

func (s PlayerAuthResponseBodySwitchListSwitch) String() string {
	return tea.Prettify(s)
}

func (s PlayerAuthResponseBodySwitchListSwitch) GoString() string {
	return s.String()
}

func (s *PlayerAuthResponseBodySwitchListSwitch) SetFunctionId(v string) *PlayerAuthResponseBodySwitchListSwitch {
	s.FunctionId = &v
	return s
}

func (s *PlayerAuthResponseBodySwitchListSwitch) SetFunctionName(v string) *PlayerAuthResponseBodySwitchListSwitch {
	s.FunctionName = &v
	return s
}

func (s *PlayerAuthResponseBodySwitchListSwitch) SetState(v string) *PlayerAuthResponseBodySwitchListSwitch {
	s.State = &v
	return s
}

func (s *PlayerAuthResponseBodySwitchListSwitch) SetSwitchId(v string) *PlayerAuthResponseBodySwitchListSwitch {
	s.SwitchId = &v
	return s
}

type PlayerAuthResponse struct {
	Headers map[string]*string      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	Body    *PlayerAuthResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s PlayerAuthResponse) String() string {
	return tea.Prettify(s)
}

func (s PlayerAuthResponse) GoString() string {
	return s.String()
}

func (s *PlayerAuthResponse) SetHeaders(v map[string]*string) *PlayerAuthResponse {
	s.Headers = v
	return s
}

func (s *PlayerAuthResponse) SetBody(v *PlayerAuthResponseBody) *PlayerAuthResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("regional")
	client.EndpointMap = map[string]*string{
		"ap-northeast-2-pop":          tea.String("mts.aliyuncs.com"),
		"ap-southeast-2":              tea.String("mts.aliyuncs.com"),
		"ap-southeast-3":              tea.String("mts.aliyuncs.com"),
		"cn-beijing-finance-1":        tea.String("mts.aliyuncs.com"),
		"cn-beijing-finance-pop":      tea.String("mts.aliyuncs.com"),
		"cn-beijing-gov-1":            tea.String("mts.aliyuncs.com"),
		"cn-beijing-nu16-b01":         tea.String("mts.aliyuncs.com"),
		"cn-chengdu":                  tea.String("mts.aliyuncs.com"),
		"cn-edge-1":                   tea.String("mts.aliyuncs.com"),
		"cn-fujian":                   tea.String("mts.aliyuncs.com"),
		"cn-haidian-cm12-c01":         tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-bj-b01":          tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-finance":         tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-internal-prod-1": tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-internal-test-1": tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-internal-test-2": tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-internal-test-3": tea.String("mts.aliyuncs.com"),
		"cn-hangzhou-test-306":        tea.String("mts.aliyuncs.com"),
		"cn-hongkong-finance-pop":     tea.String("mts.aliyuncs.com"),
		"cn-huhehaote-nebula-1":       tea.String("mts.aliyuncs.com"),
		"cn-north-2-gov-1":            tea.String("mts.aliyuncs.com"),
		"cn-qingdao-nebula":           tea.String("mts.aliyuncs.com"),
		"cn-shanghai-et15-b01":        tea.String("mts.aliyuncs.com"),
		"cn-shanghai-et2-b01":         tea.String("mts.aliyuncs.com"),
		"cn-shanghai-finance-1":       tea.String("mts.aliyuncs.com"),
		"cn-shanghai-inner":           tea.String("mts.aliyuncs.com"),
		"cn-shanghai-internal-test-1": tea.String("mts.aliyuncs.com"),
		"cn-shenzhen-finance-1":       tea.String("mts.aliyuncs.com"),
		"cn-shenzhen-inner":           tea.String("mts.aliyuncs.com"),
		"cn-shenzhen-st4-d01":         tea.String("mts.aliyuncs.com"),
		"cn-shenzhen-su18-b01":        tea.String("mts.aliyuncs.com"),
		"cn-wuhan":                    tea.String("mts.aliyuncs.com"),
		"cn-wulanchabu":               tea.String("mts.aliyuncs.com"),
		"cn-yushanfang":               tea.String("mts.aliyuncs.com"),
		"cn-zhangbei":                 tea.String("mts.aliyuncs.com"),
		"cn-zhangbei-na61-b01":        tea.String("mts.aliyuncs.com"),
		"cn-zhangjiakou-na62-a01":     tea.String("mts.aliyuncs.com"),
		"cn-zhengzhou-nebula-1":       tea.String("mts.aliyuncs.com"),
		"eu-west-1-oxs":               tea.String("mts.aliyuncs.com"),
		"me-east-1":                   tea.String("mts.aliyuncs.com"),
		"rus-west-1-pop":              tea.String("mts.aliyuncs.com"),
		"us-east-1":                   tea.String("mts.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("mts"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAuthConfigWithOptions(request *QueryAuthConfigRequest, runtime *util.RuntimeOptions) (_result *QueryAuthConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryAuthConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryAuthConfig"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAuthConfig(request *QueryAuthConfigRequest) (_result *QueryAuthConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAuthConfigResponse{}
	_body, _err := client.QueryAuthConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAsrPipelineListWithOptions(request *QueryAsrPipelineListRequest, runtime *util.RuntimeOptions) (_result *QueryAsrPipelineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryAsrPipelineListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryAsrPipelineList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAsrPipelineList(request *QueryAsrPipelineListRequest) (_result *QueryAsrPipelineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAsrPipelineListResponse{}
	_body, _err := client.QueryAsrPipelineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMediaCensorJobWithOptions(request *SubmitMediaCensorJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaCensorJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitMediaCensorJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitMediaCensorJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMediaCensorJob(request *SubmitMediaCensorJobRequest) (_result *SubmitMediaCensorJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaCensorJobResponse{}
	_body, _err := client.SubmitMediaCensorJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateSessionWithOptions(request *CreateSessionRequest, runtime *util.RuntimeOptions) (_result *CreateSessionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateSessionResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateSession"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateSession(request *CreateSessionRequest) (_result *CreateSessionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateSessionResponse{}
	_body, _err := client.CreateSessionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAsrPipelineWithOptions(request *ListAsrPipelineRequest, runtime *util.RuntimeOptions) (_result *ListAsrPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListAsrPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListAsrPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAsrPipeline(request *ListAsrPipelineRequest) (_result *ListAsrPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAsrPipelineResponse{}
	_body, _err := client.ListAsrPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListJobWithOptions(request *ListJobRequest, runtime *util.RuntimeOptions) (_result *ListJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListJob(request *ListJobRequest) (_result *ListJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListJobResponse{}
	_body, _err := client.ListJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryIProductionJobListWithOptions(request *QueryIProductionJobListRequest, runtime *util.RuntimeOptions) (_result *QueryIProductionJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryIProductionJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryIProductionJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryIProductionJobList(request *QueryIProductionJobListRequest) (_result *QueryIProductionJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIProductionJobListResponse{}
	_body, _err := client.QueryIProductionJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMediaPublishStateWithOptions(request *UpdateMediaPublishStateRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaPublishStateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMediaPublishStateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMediaPublishState"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMediaPublishState(request *UpdateMediaPublishStateRequest) (_result *UpdateMediaPublishStateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaPublishStateResponse{}
	_body, _err := client.UpdateMediaPublishStateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFpFileDeleteJobWithOptions(request *SubmitFpFileDeleteJobRequest, runtime *util.RuntimeOptions) (_result *SubmitFpFileDeleteJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitFpFileDeleteJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitFpFileDeleteJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFpFileDeleteJob(request *SubmitFpFileDeleteJobRequest) (_result *SubmitFpFileDeleteJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFpFileDeleteJobResponse{}
	_body, _err := client.SubmitFpFileDeleteJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAnalysisJobListWithOptions(request *QueryAnalysisJobListRequest, runtime *util.RuntimeOptions) (_result *QueryAnalysisJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryAnalysisJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryAnalysisJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAnalysisJobList(request *QueryAnalysisJobListRequest) (_result *QueryAnalysisJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAnalysisJobListResponse{}
	_body, _err := client.QueryAnalysisJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitInferenceJobWithOptions(request *SubmitInferenceJobRequest, runtime *util.RuntimeOptions) (_result *SubmitInferenceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitInferenceJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitInferenceJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitInferenceJob(request *SubmitInferenceJobRequest) (_result *SubmitInferenceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitInferenceJobResponse{}
	_body, _err := client.SubmitInferenceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportCensorJobResultWithOptions(request *ReportCensorJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportCensorJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportCensorJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportCensorJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportCensorJobResult(request *ReportCensorJobResultRequest) (_result *ReportCensorJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportCensorJobResultResponse{}
	_body, _err := client.ReportCensorJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcuJobWithOptions(request *DeleteMcuJobRequest, runtime *util.RuntimeOptions) (_result *DeleteMcuJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteMcuJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteMcuJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcuJob(request *DeleteMcuJobRequest) (_result *DeleteMcuJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcuJobResponse{}
	_body, _err := client.DeleteMcuJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryInferenceServerWithOptions(request *QueryInferenceServerRequest, runtime *util.RuntimeOptions) (_result *QueryInferenceServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryInferenceServerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryInferenceServer"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryInferenceServer(request *QueryInferenceServerRequest) (_result *QueryInferenceServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryInferenceServerResponse{}
	_body, _err := client.QueryInferenceServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CheckResourceWithOptions(request *CheckResourceRequest, runtime *util.RuntimeOptions) (_result *CheckResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CheckResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CheckResource"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CheckResource(request *CheckResourceRequest) (_result *CheckResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CheckResourceResponse{}
	_body, _err := client.CheckResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListTerrorismPipelineWithOptions(request *ListTerrorismPipelineRequest, runtime *util.RuntimeOptions) (_result *ListTerrorismPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListTerrorismPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListTerrorismPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListTerrorismPipeline(request *ListTerrorismPipelineRequest) (_result *ListTerrorismPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListTerrorismPipelineResponse{}
	_body, _err := client.ListTerrorismPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportTerrorismJobResultWithOptions(request *ReportTerrorismJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportTerrorismJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportTerrorismJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportTerrorismJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportTerrorismJobResult(request *ReportTerrorismJobResultRequest) (_result *ReportTerrorismJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportTerrorismJobResultResponse{}
	_body, _err := client.ReportTerrorismJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAllMediaBucketWithOptions(request *ListAllMediaBucketRequest, runtime *util.RuntimeOptions) (_result *ListAllMediaBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListAllMediaBucketResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListAllMediaBucket"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAllMediaBucket(request *ListAllMediaBucketRequest) (_result *ListAllMediaBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllMediaBucketResponse{}
	_body, _err := client.ListAllMediaBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchPipelineWithOptions(request *SearchPipelineRequest, runtime *util.RuntimeOptions) (_result *SearchPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SearchPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SearchPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchPipeline(request *SearchPipelineRequest) (_result *SearchPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchPipelineResponse{}
	_body, _err := client.SearchPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindOutputBucketWithOptions(request *UnbindOutputBucketRequest, runtime *util.RuntimeOptions) (_result *UnbindOutputBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnbindOutputBucketResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnbindOutputBucket"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindOutputBucket(request *UnbindOutputBucketRequest) (_result *UnbindOutputBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindOutputBucketResponse{}
	_body, _err := client.UnbindOutputBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMediaCategoryWithOptions(request *UpdateMediaCategoryRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMediaCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMediaCategory"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMediaCategory(request *UpdateMediaCategoryRequest) (_result *UpdateMediaCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaCategoryResponse{}
	_body, _err := client.UpdateMediaCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryComplexJobListWithOptions(request *QueryComplexJobListRequest, runtime *util.RuntimeOptions) (_result *QueryComplexJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryComplexJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryComplexJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryComplexJobList(request *QueryComplexJobListRequest) (_result *QueryComplexJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryComplexJobListResponse{}
	_body, _err := client.QueryComplexJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListInferenceJobWithOptions(request *ListInferenceJobRequest, runtime *util.RuntimeOptions) (_result *ListInferenceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListInferenceJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListInferenceJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListInferenceJob(request *ListInferenceJobRequest) (_result *ListInferenceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListInferenceJobResponse{}
	_body, _err := client.ListInferenceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryJobListWithOptions(request *QueryJobListRequest, runtime *util.RuntimeOptions) (_result *QueryJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryJobList(request *QueryJobListRequest) (_result *QueryJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryJobListResponse{}
	_body, _err := client.QueryJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchMediaWorkflowWithOptions(request *SearchMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *SearchMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SearchMediaWorkflowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SearchMediaWorkflow"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchMediaWorkflow(request *SearchMediaWorkflowRequest) (_result *SearchMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaWorkflowResponse{}
	_body, _err := client.SearchMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCoverPipelineListWithOptions(request *QueryCoverPipelineListRequest, runtime *util.RuntimeOptions) (_result *QueryCoverPipelineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryCoverPipelineListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryCoverPipelineList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCoverPipelineList(request *QueryCoverPipelineListRequest) (_result *QueryCoverPipelineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCoverPipelineListResponse{}
	_body, _err := client.QueryCoverPipelineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryFpShotJobListWithOptions(request *QueryFpShotJobListRequest, runtime *util.RuntimeOptions) (_result *QueryFpShotJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryFpShotJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryFpShotJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryFpShotJobList(request *QueryFpShotJobListRequest) (_result *QueryFpShotJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFpShotJobListResponse{}
	_body, _err := client.QueryFpShotJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMediaTagWithOptions(request *DeleteMediaTagRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteMediaTagResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteMediaTag"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMediaTag(request *DeleteMediaTagRequest) (_result *DeleteMediaTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaTagResponse{}
	_body, _err := client.DeleteMediaTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeletePipelineWithOptions(request *DeletePipelineRequest, runtime *util.RuntimeOptions) (_result *DeletePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeletePipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeletePipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeletePipeline(request *DeletePipelineRequest) (_result *DeletePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeletePipelineResponse{}
	_body, _err := client.DeletePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateSmarttagTemplateWithOptions(request *UpdateSmarttagTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateSmarttagTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateSmarttagTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateSmarttagTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateSmarttagTemplate(request *UpdateSmarttagTemplateRequest) (_result *UpdateSmarttagTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateSmarttagTemplateResponse{}
	_body, _err := client.UpdateSmarttagTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateAsrPipelineWithOptions(request *UpdateAsrPipelineRequest, runtime *util.RuntimeOptions) (_result *UpdateAsrPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateAsrPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateAsrPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateAsrPipeline(request *UpdateAsrPipelineRequest) (_result *UpdateAsrPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAsrPipelineResponse{}
	_body, _err := client.UpdateAsrPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryVideoQualityJobWithOptions(request *QueryVideoQualityJobRequest, runtime *util.RuntimeOptions) (_result *QueryVideoQualityJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryVideoQualityJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryVideoQualityJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryVideoQualityJob(request *QueryVideoQualityJobRequest) (_result *QueryVideoQualityJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryVideoQualityJobResponse{}
	_body, _err := client.QueryVideoQualityJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DecryptKeyWithOptions(request *DecryptKeyRequest, runtime *util.RuntimeOptions) (_result *DecryptKeyResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DecryptKeyResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DecryptKey"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DecryptKey(request *DecryptKeyRequest) (_result *DecryptKeyResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DecryptKeyResponse{}
	_body, _err := client.DecryptKeyWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteTemplateWithOptions(request *DeleteTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteTemplate(request *DeleteTemplateRequest) (_result *DeleteTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteTemplateResponse{}
	_body, _err := client.DeleteTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTemplateListWithOptions(request *QueryTemplateListRequest, runtime *util.RuntimeOptions) (_result *QueryTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTemplateListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTemplateList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTemplateList(request *QueryTemplateListRequest) (_result *QueryTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTemplateListResponse{}
	_body, _err := client.QueryTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportFacerecogJobResultWithOptions(request *ReportFacerecogJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportFacerecogJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportFacerecogJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportFacerecogJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportFacerecogJobResult(request *ReportFacerecogJobResultRequest) (_result *ReportFacerecogJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportFacerecogJobResultResponse{}
	_body, _err := client.ReportFacerecogJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMCTemplateListWithOptions(request *QueryMCTemplateListRequest, runtime *util.RuntimeOptions) (_result *QueryMCTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMCTemplateListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMCTemplateList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMCTemplateList(request *QueryMCTemplateListRequest) (_result *QueryMCTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMCTemplateListResponse{}
	_body, _err := client.QueryMCTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMediaWithOptions(request *UpdateMediaRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMediaResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMedia"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMedia(request *UpdateMediaRequest) (_result *UpdateMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaResponse{}
	_body, _err := client.UpdateMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCensorPipelineWithOptions(request *ListCensorPipelineRequest, runtime *util.RuntimeOptions) (_result *ListCensorPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListCensorPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListCensorPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCensorPipeline(request *ListCensorPipelineRequest) (_result *ListCensorPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCensorPipelineResponse{}
	_body, _err := client.ListCensorPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySubtitleJobListWithOptions(request *QuerySubtitleJobListRequest, runtime *util.RuntimeOptions) (_result *QuerySubtitleJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QuerySubtitleJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QuerySubtitleJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySubtitleJobList(request *QuerySubtitleJobListRequest) (_result *QuerySubtitleJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySubtitleJobListResponse{}
	_body, _err := client.QuerySubtitleJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryVideoGifJobListWithOptions(request *QueryVideoGifJobListRequest, runtime *util.RuntimeOptions) (_result *QueryVideoGifJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryVideoGifJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryVideoGifJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryVideoGifJobList(request *QueryVideoGifJobListRequest) (_result *QueryVideoGifJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryVideoGifJobListResponse{}
	_body, _err := client.QueryVideoGifJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryEditingJobListWithOptions(request *QueryEditingJobListRequest, runtime *util.RuntimeOptions) (_result *QueryEditingJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryEditingJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryEditingJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryEditingJobList(request *QueryEditingJobListRequest) (_result *QueryEditingJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryEditingJobListResponse{}
	_body, _err := client.QueryEditingJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMCTemplateWithOptions(request *UpdateMCTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateMCTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMCTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMCTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMCTemplate(request *UpdateMCTemplateRequest) (_result *UpdateMCTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMCTemplateResponse{}
	_body, _err := client.UpdateMCTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportCoverJobResultWithOptions(request *ReportCoverJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportCoverJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportCoverJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportCoverJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportCoverJobResult(request *ReportCoverJobResultRequest) (_result *ReportCoverJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportCoverJobResultResponse{}
	_body, _err := client.ReportCoverJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitImageQualityJobWithOptions(request *SubmitImageQualityJobRequest, runtime *util.RuntimeOptions) (_result *SubmitImageQualityJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitImageQualityJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitImageQualityJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitImageQualityJob(request *SubmitImageQualityJobRequest) (_result *SubmitImageQualityJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitImageQualityJobResponse{}
	_body, _err := client.SubmitImageQualityJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMCTemplateWithOptions(request *AddMCTemplateRequest, runtime *util.RuntimeOptions) (_result *AddMCTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddMCTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddMCTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMCTemplate(request *AddMCTemplateRequest) (_result *AddMCTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMCTemplateResponse{}
	_body, _err := client.AddMCTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchTemplateWithOptions(request *SearchTemplateRequest, runtime *util.RuntimeOptions) (_result *SearchTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SearchTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SearchTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchTemplate(request *SearchTemplateRequest) (_result *SearchTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchTemplateResponse{}
	_body, _err := client.SearchTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMcuTemplateWithOptions(request *UpdateMcuTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateMcuTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMcuTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMcuTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMcuTemplate(request *UpdateMcuTemplateRequest) (_result *UpdateMcuTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMcuTemplateResponse{}
	_body, _err := client.UpdateMcuTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFacerecogJobWithOptions(request *SubmitFacerecogJobRequest, runtime *util.RuntimeOptions) (_result *SubmitFacerecogJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitFacerecogJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitFacerecogJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFacerecogJob(request *SubmitFacerecogJobRequest) (_result *SubmitFacerecogJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFacerecogJobResponse{}
	_body, _err := client.SubmitFacerecogJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitEditingJobsWithOptions(request *SubmitEditingJobsRequest, runtime *util.RuntimeOptions) (_result *SubmitEditingJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitEditingJobsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitEditingJobs"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitEditingJobs(request *SubmitEditingJobsRequest) (_result *SubmitEditingJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitEditingJobsResponse{}
	_body, _err := client.SubmitEditingJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportVideoSplitJobResultWithOptions(request *ReportVideoSplitJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportVideoSplitJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportVideoSplitJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportVideoSplitJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportVideoSplitJobResult(request *ReportVideoSplitJobResultRequest) (_result *ReportVideoSplitJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportVideoSplitJobResultResponse{}
	_body, _err := client.ReportVideoSplitJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaCensorJobDetailWithOptions(request *QueryMediaCensorJobDetailRequest, runtime *util.RuntimeOptions) (_result *QueryMediaCensorJobDetailResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaCensorJobDetailResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaCensorJobDetail"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaCensorJobDetail(request *QueryMediaCensorJobDetailRequest) (_result *QueryMediaCensorJobDetailResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaCensorJobDetailResponse{}
	_body, _err := client.QueryMediaCensorJobDetailWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) TagCustomPersonWithOptions(request *TagCustomPersonRequest, runtime *util.RuntimeOptions) (_result *TagCustomPersonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &TagCustomPersonResponse{}
	_body, _err := client.DoRPCRequest(tea.String("TagCustomPerson"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) TagCustomPerson(request *TagCustomPersonRequest) (_result *TagCustomPersonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &TagCustomPersonResponse{}
	_body, _err := client.TagCustomPersonWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateMcuTemplateWithOptions(request *CreateMcuTemplateRequest, runtime *util.RuntimeOptions) (_result *CreateMcuTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateMcuTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateMcuTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateMcuTemplate(request *CreateMcuTemplateRequest) (_result *CreateMcuTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateMcuTemplateResponse{}
	_body, _err := client.CreateMcuTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFpShotNotaryWithOptions(request *ListFpShotNotaryRequest, runtime *util.RuntimeOptions) (_result *ListFpShotNotaryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFpShotNotaryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFpShotNotary"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFpShotNotary(request *ListFpShotNotaryRequest) (_result *ListFpShotNotaryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFpShotNotaryResponse{}
	_body, _err := client.ListFpShotNotaryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportFpShotJobResultWithOptions(request *ReportFpShotJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportFpShotJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportFpShotJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportFpShotJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportFpShotJobResult(request *ReportFpShotJobResultRequest) (_result *ReportFpShotJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportFpShotJobResultResponse{}
	_body, _err := client.ReportFpShotJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitVideoGifJobWithOptions(request *SubmitVideoGifJobRequest, runtime *util.RuntimeOptions) (_result *SubmitVideoGifJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitVideoGifJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitVideoGifJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitVideoGifJob(request *SubmitVideoGifJobRequest) (_result *SubmitVideoGifJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitVideoGifJobResponse{}
	_body, _err := client.SubmitVideoGifJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAnnotationJobListWithOptions(request *QueryAnnotationJobListRequest, runtime *util.RuntimeOptions) (_result *QueryAnnotationJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryAnnotationJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryAnnotationJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAnnotationJobList(request *QueryAnnotationJobListRequest) (_result *QueryAnnotationJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAnnotationJobListResponse{}
	_body, _err := client.QueryAnnotationJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitPornJobWithOptions(request *SubmitPornJobRequest, runtime *util.RuntimeOptions) (_result *SubmitPornJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitPornJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitPornJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitPornJob(request *SubmitPornJobRequest) (_result *SubmitPornJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitPornJobResponse{}
	_body, _err := client.SubmitPornJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DescribeMtsUserResourcePackageWithOptions(request *DescribeMtsUserResourcePackageRequest, runtime *util.RuntimeOptions) (_result *DescribeMtsUserResourcePackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DescribeMtsUserResourcePackageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DescribeMtsUserResourcePackage"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DescribeMtsUserResourcePackage(request *DescribeMtsUserResourcePackageRequest) (_result *DescribeMtsUserResourcePackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeMtsUserResourcePackageResponse{}
	_body, _err := client.DescribeMtsUserResourcePackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTemplateWithOptions(request *AddTemplateRequest, runtime *util.RuntimeOptions) (_result *AddTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTemplate(request *AddTemplateRequest) (_result *AddTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTemplateResponse{}
	_body, _err := client.AddTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMCJobWithOptions(request *SubmitMCJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMCJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitMCJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitMCJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMCJob(request *SubmitMCJobRequest) (_result *SubmitMCJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMCJobResponse{}
	_body, _err := client.SubmitMCJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportPornJobResultWithOptions(request *ReportPornJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportPornJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportPornJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportPornJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportPornJobResult(request *ReportPornJobResultRequest) (_result *ReportPornJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportPornJobResultResponse{}
	_body, _err := client.ReportPornJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMediaWorkflowWithOptions(request *UpdateMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMediaWorkflowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMediaWorkflow"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMediaWorkflow(request *UpdateMediaWorkflowRequest) (_result *UpdateMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaWorkflowResponse{}
	_body, _err := client.UpdateMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteSmarttagTemplateWithOptions(request *DeleteSmarttagTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteSmarttagTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteSmarttagTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteSmarttagTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteSmarttagTemplate(request *DeleteSmarttagTemplateRequest) (_result *DeleteSmarttagTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteSmarttagTemplateResponse{}
	_body, _err := client.DeleteSmarttagTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaWorkflowListWithOptions(request *QueryMediaWorkflowListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaWorkflowListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaWorkflowListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaWorkflowList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaWorkflowList(request *QueryMediaWorkflowListRequest) (_result *QueryMediaWorkflowListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaWorkflowListResponse{}
	_body, _err := client.QueryMediaWorkflowListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitIProductionJobWithOptions(request *SubmitIProductionJobRequest, runtime *util.RuntimeOptions) (_result *SubmitIProductionJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitIProductionJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitIProductionJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitIProductionJob(request *SubmitIProductionJobRequest) (_result *SubmitIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitIProductionJobResponse{}
	_body, _err := client.SubmitIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetLicenseWithOptions(request *GetLicenseRequest, runtime *util.RuntimeOptions) (_result *GetLicenseResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetLicenseResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetLicense"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetLicense(request *GetLicenseRequest) (_result *GetLicenseResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetLicenseResponse{}
	_body, _err := client.GetLicenseWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryVideoSummaryJobListWithOptions(request *QueryVideoSummaryJobListRequest, runtime *util.RuntimeOptions) (_result *QueryVideoSummaryJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryVideoSummaryJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryVideoSummaryJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryVideoSummaryJobList(request *QueryVideoSummaryJobListRequest) (_result *QueryVideoSummaryJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryVideoSummaryJobListResponse{}
	_body, _err := client.QueryVideoSummaryJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitSmarttagJobWithOptions(request *SubmitSmarttagJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSmarttagJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitSmarttagJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitSmarttagJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitSmarttagJob(request *SubmitSmarttagJobRequest) (_result *SubmitSmarttagJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSmarttagJobResponse{}
	_body, _err := client.SubmitSmarttagJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySmarttagJobWithOptions(request *QuerySmarttagJobRequest, runtime *util.RuntimeOptions) (_result *QuerySmarttagJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QuerySmarttagJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QuerySmarttagJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySmarttagJob(request *QuerySmarttagJobRequest) (_result *QuerySmarttagJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmarttagJobResponse{}
	_body, _err := client.QuerySmarttagJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMediaCoverWithOptions(request *UpdateMediaCoverRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaCoverResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMediaCoverResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMediaCover"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMediaCover(request *UpdateMediaCoverRequest) (_result *UpdateMediaCoverResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaCoverResponse{}
	_body, _err := client.UpdateMediaCoverWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryIProductionJobWithOptions(request *QueryIProductionJobRequest, runtime *util.RuntimeOptions) (_result *QueryIProductionJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryIProductionJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryIProductionJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryIProductionJob(request *QueryIProductionJobRequest) (_result *QueryIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryIProductionJobResponse{}
	_body, _err := client.QueryIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMediaWithOptions(request *ListMediaRequest, runtime *util.RuntimeOptions) (_result *ListMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListMediaResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListMedia"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMedia(request *ListMediaRequest) (_result *ListMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaResponse{}
	_body, _err := client.ListMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetPackageWithOptions(request *GetPackageRequest, runtime *util.RuntimeOptions) (_result *GetPackageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &GetPackageResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetPackage"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetPackage(request *GetPackageRequest) (_result *GetPackageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPackageResponse{}
	_body, _err := client.GetPackageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateWaterMarkTemplateWithOptions(request *UpdateWaterMarkTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateWaterMarkTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateWaterMarkTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateWaterMarkTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateWaterMarkTemplate(request *UpdateWaterMarkTemplateRequest) (_result *UpdateWaterMarkTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateWaterMarkTemplateResponse{}
	_body, _err := client.UpdateWaterMarkTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMcuTemplateWithOptions(request *QueryMcuTemplateRequest, runtime *util.RuntimeOptions) (_result *QueryMcuTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMcuTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMcuTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMcuTemplate(request *QueryMcuTemplateRequest) (_result *QueryMcuTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMcuTemplateResponse{}
	_body, _err := client.QueryMcuTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ActivateMediaWorkflowWithOptions(request *ActivateMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *ActivateMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ActivateMediaWorkflowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ActivateMediaWorkflow"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ActivateMediaWorkflow(request *ActivateMediaWorkflowRequest) (_result *ActivateMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ActivateMediaWorkflowResponse{}
	_body, _err := client.ActivateMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchMediaWithOptions(request *SearchMediaRequest, runtime *util.RuntimeOptions) (_result *SearchMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SearchMediaResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SearchMedia"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchMedia(request *SearchMediaRequest) (_result *SearchMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchMediaResponse{}
	_body, _err := client.SearchMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitTerrorismJobWithOptions(request *SubmitTerrorismJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTerrorismJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitTerrorismJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitTerrorismJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitTerrorismJob(request *SubmitTerrorismJobRequest) (_result *SubmitTerrorismJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTerrorismJobResponse{}
	_body, _err := client.SubmitTerrorismJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCategoryWithOptions(request *AddCategoryRequest, runtime *util.RuntimeOptions) (_result *AddCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCategory"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCategory(request *AddCategoryRequest) (_result *AddCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCategoryResponse{}
	_body, _err := client.AddCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryInnerJobWithOptions(request *QueryInnerJobRequest, runtime *util.RuntimeOptions) (_result *QueryInnerJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryInnerJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryInnerJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryInnerJob(request *QueryInnerJobRequest) (_result *QueryInnerJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryInnerJobResponse{}
	_body, _err := client.QueryInnerJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFpShotFilesWithOptions(request *ListFpShotFilesRequest, runtime *util.RuntimeOptions) (_result *ListFpShotFilesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFpShotFilesResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFpShotFiles"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFpShotFiles(request *ListFpShotFilesRequest) (_result *ListFpShotFilesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFpShotFilesResponse{}
	_body, _err := client.ListFpShotFilesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTerrorismPipelineListWithOptions(request *QueryTerrorismPipelineListRequest, runtime *util.RuntimeOptions) (_result *QueryTerrorismPipelineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTerrorismPipelineListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTerrorismPipelineList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTerrorismPipelineList(request *QueryTerrorismPipelineListRequest) (_result *QueryTerrorismPipelineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTerrorismPipelineListResponse{}
	_body, _err := client.QueryTerrorismPipelineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMediaWithOptions(request *AddMediaRequest, runtime *util.RuntimeOptions) (_result *AddMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddMediaResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddMedia"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMedia(request *AddMediaRequest) (_result *AddMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaResponse{}
	_body, _err := client.AddMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) StopIProductionJobWithOptions(request *StopIProductionJobRequest, runtime *util.RuntimeOptions) (_result *StopIProductionJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &StopIProductionJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("StopIProductionJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) StopIProductionJob(request *StopIProductionJobRequest) (_result *StopIProductionJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopIProductionJobResponse{}
	_body, _err := client.StopIProductionJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMcuTemplateWithOptions(request *DeleteMcuTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteMcuTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteMcuTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteMcuTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMcuTemplate(request *DeleteMcuTemplateRequest) (_result *DeleteMcuTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMcuTemplateResponse{}
	_body, _err := client.DeleteMcuTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaCensorJobListWithOptions(request *QueryMediaCensorJobListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaCensorJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaCensorJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaCensorJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaCensorJobList(request *QueryMediaCensorJobListRequest) (_result *QueryMediaCensorJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaCensorJobListResponse{}
	_body, _err := client.QueryMediaCensorJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListPornPipelineWithOptions(request *ListPornPipelineRequest, runtime *util.RuntimeOptions) (_result *ListPornPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListPornPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListPornPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListPornPipeline(request *ListPornPipelineRequest) (_result *ListPornPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListPornPipelineResponse{}
	_body, _err := client.ListPornPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddTerrorismPipelineWithOptions(request *AddTerrorismPipelineRequest, runtime *util.RuntimeOptions) (_result *AddTerrorismPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddTerrorismPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddTerrorismPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddTerrorismPipeline(request *AddTerrorismPipelineRequest) (_result *AddTerrorismPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddTerrorismPipelineResponse{}
	_body, _err := client.AddTerrorismPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateFpShotDBWithOptions(request *CreateFpShotDBRequest, runtime *util.RuntimeOptions) (_result *CreateFpShotDBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateFpShotDBResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateFpShotDB"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateFpShotDB(request *CreateFpShotDBRequest) (_result *CreateFpShotDBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateFpShotDBResponse{}
	_body, _err := client.CreateFpShotDBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnregisterCustomFaceWithOptions(request *UnregisterCustomFaceRequest, runtime *util.RuntimeOptions) (_result *UnregisterCustomFaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnregisterCustomFaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnregisterCustomFace"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnregisterCustomFace(request *UnregisterCustomFaceRequest) (_result *UnregisterCustomFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnregisterCustomFaceResponse{}
	_body, _err := client.UnregisterCustomFaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySmarttagTemplateListWithOptions(request *QuerySmarttagTemplateListRequest, runtime *util.RuntimeOptions) (_result *QuerySmarttagTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QuerySmarttagTemplateListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QuerySmarttagTemplateList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySmarttagTemplateList(request *QuerySmarttagTemplateListRequest) (_result *QuerySmarttagTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySmarttagTemplateListResponse{}
	_body, _err := client.QuerySmarttagTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFpShotJobWithOptions(request *SubmitFpShotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitFpShotJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitFpShotJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitFpShotJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFpShotJob(request *SubmitFpShotJobRequest) (_result *SubmitFpShotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFpShotJobResponse{}
	_body, _err := client.SubmitFpShotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCensorPipelineListWithOptions(request *QueryCensorPipelineListRequest, runtime *util.RuntimeOptions) (_result *QueryCensorPipelineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryCensorPipelineListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryCensorPipelineList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCensorPipelineList(request *QueryCensorPipelineListRequest) (_result *QueryCensorPipelineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCensorPipelineListResponse{}
	_body, _err := client.QueryCensorPipelineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMcuJobWithOptions(request *SubmitMcuJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMcuJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitMcuJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitMcuJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMcuJob(request *SubmitMcuJobRequest) (_result *SubmitMcuJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMcuJobResponse{}
	_body, _err := client.SubmitMcuJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CategoryTreeWithOptions(request *CategoryTreeRequest, runtime *util.RuntimeOptions) (_result *CategoryTreeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CategoryTreeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CategoryTree"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CategoryTree(request *CategoryTreeRequest) (_result *CategoryTreeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CategoryTreeResponse{}
	_body, _err := client.CategoryTreeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitTagJobWithOptions(request *SubmitTagJobRequest, runtime *util.RuntimeOptions) (_result *SubmitTagJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitTagJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitTagJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitTagJob(request *SubmitTagJobRequest) (_result *SubmitTagJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitTagJobResponse{}
	_body, _err := client.SubmitTagJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitCoverJobWithOptions(request *SubmitCoverJobRequest, runtime *util.RuntimeOptions) (_result *SubmitCoverJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitCoverJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitCoverJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitCoverJob(request *SubmitCoverJobRequest) (_result *SubmitCoverJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitCoverJobResponse{}
	_body, _err := client.SubmitCoverJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCensorPipelineWithOptions(request *AddCensorPipelineRequest, runtime *util.RuntimeOptions) (_result *AddCensorPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCensorPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCensorPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCensorPipeline(request *AddCensorPipelineRequest) (_result *AddCensorPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCensorPipelineResponse{}
	_body, _err := client.AddCensorPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SearchWaterMarkTemplateWithOptions(request *SearchWaterMarkTemplateRequest, runtime *util.RuntimeOptions) (_result *SearchWaterMarkTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SearchWaterMarkTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SearchWaterMarkTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SearchWaterMarkTemplate(request *SearchWaterMarkTemplateRequest) (_result *SearchWaterMarkTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SearchWaterMarkTemplateResponse{}
	_body, _err := client.SearchWaterMarkTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitAsrJobWithOptions(request *SubmitAsrJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAsrJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitAsrJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitAsrJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitAsrJob(request *SubmitAsrJobRequest) (_result *SubmitAsrJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAsrJobResponse{}
	_body, _err := client.SubmitAsrJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMediaWorkflowWithOptions(request *AddMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *AddMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddMediaWorkflowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddMediaWorkflow"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMediaWorkflow(request *AddMediaWorkflowRequest) (_result *AddMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaWorkflowResponse{}
	_body, _err := client.AddMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryAsrJobListWithOptions(request *QueryAsrJobListRequest, runtime *util.RuntimeOptions) (_result *QueryAsrJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryAsrJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryAsrJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryAsrJobList(request *QueryAsrJobListRequest) (_result *QueryAsrJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryAsrJobListResponse{}
	_body, _err := client.QueryAsrJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitVideoPoseJobWithOptions(request *SubmitVideoPoseJobRequest, runtime *util.RuntimeOptions) (_result *SubmitVideoPoseJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitVideoPoseJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitVideoPoseJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitVideoPoseJob(request *SubmitVideoPoseJobRequest) (_result *SubmitVideoPoseJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitVideoPoseJobResponse{}
	_body, _err := client.SubmitVideoPoseJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RegisterMediaDetailPersonWithOptions(request *RegisterMediaDetailPersonRequest, runtime *util.RuntimeOptions) (_result *RegisterMediaDetailPersonResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RegisterMediaDetailPersonResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RegisterMediaDetailPerson"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RegisterMediaDetailPerson(request *RegisterMediaDetailPersonRequest) (_result *RegisterMediaDetailPersonResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterMediaDetailPersonResponse{}
	_body, _err := client.RegisterMediaDetailPersonWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCensorJobListWithOptions(request *QueryCensorJobListRequest, runtime *util.RuntimeOptions) (_result *QueryCensorJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryCensorJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryCensorJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCensorJobList(request *QueryCensorJobListRequest) (_result *QueryCensorJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCensorJobListResponse{}
	_body, _err := client.QueryCensorJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFpCompareJobWithOptions(request *SubmitFpCompareJobRequest, runtime *util.RuntimeOptions) (_result *SubmitFpCompareJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitFpCompareJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitFpCompareJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFpCompareJob(request *SubmitFpCompareJobRequest) (_result *SubmitFpCompareJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFpCompareJobResponse{}
	_body, _err := client.SubmitFpCompareJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteCategoryWithOptions(request *DeleteCategoryRequest, runtime *util.RuntimeOptions) (_result *DeleteCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteCategory"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteCategory(request *DeleteCategoryRequest) (_result *DeleteCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCategoryResponse{}
	_body, _err := client.DeleteCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QuerySnapshotJobListWithOptions(request *QuerySnapshotJobListRequest, runtime *util.RuntimeOptions) (_result *QuerySnapshotJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QuerySnapshotJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QuerySnapshotJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QuerySnapshotJobList(request *QuerySnapshotJobListRequest) (_result *QuerySnapshotJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QuerySnapshotJobListResponse{}
	_body, _err := client.QuerySnapshotJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DetectImageSyncWithOptions(request *DetectImageSyncRequest, runtime *util.RuntimeOptions) (_result *DetectImageSyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DetectImageSyncResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DetectImageSync"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DetectImageSync(request *DetectImageSyncRequest) (_result *DetectImageSyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DetectImageSyncResponse{}
	_body, _err := client.DetectImageSyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTagJobListWithOptions(request *QueryTagJobListRequest, runtime *util.RuntimeOptions) (_result *QueryTagJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTagJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTagJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTagJobList(request *QueryTagJobListRequest) (_result *QueryTagJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTagJobListResponse{}
	_body, _err := client.QueryTagJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitFpDBDeleteJobWithOptions(request *SubmitFpDBDeleteJobRequest, runtime *util.RuntimeOptions) (_result *SubmitFpDBDeleteJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitFpDBDeleteJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitFpDBDeleteJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitFpDBDeleteJob(request *SubmitFpDBDeleteJobRequest) (_result *SubmitFpDBDeleteJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitFpDBDeleteJobResponse{}
	_body, _err := client.SubmitFpDBDeleteJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetJobInfoWithOptions(request *GetJobInfoRequest, runtime *util.RuntimeOptions) (_result *GetJobInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: query,
	}
	_result = &GetJobInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("GetJobInfo"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("GET"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetJobInfo(request *GetJobInfoRequest) (_result *GetJobInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetJobInfoResponse{}
	_body, _err := client.GetJobInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddMediaTagWithOptions(request *AddMediaTagRequest, runtime *util.RuntimeOptions) (_result *AddMediaTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddMediaTagResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddMediaTag"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddMediaTag(request *AddMediaTagRequest) (_result *AddMediaTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddMediaTagResponse{}
	_body, _err := client.AddMediaTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UnbindInputBucketWithOptions(request *UnbindInputBucketRequest, runtime *util.RuntimeOptions) (_result *UnbindInputBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UnbindInputBucketResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UnbindInputBucket"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UnbindInputBucket(request *UnbindInputBucketRequest) (_result *UnbindInputBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UnbindInputBucketResponse{}
	_body, _err := client.UnbindInputBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaWorkflowExecutionListWithOptions(request *QueryMediaWorkflowExecutionListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaWorkflowExecutionListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaWorkflowExecutionListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaWorkflowExecutionList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaWorkflowExecutionList(request *QueryMediaWorkflowExecutionListRequest) (_result *QueryMediaWorkflowExecutionListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaWorkflowExecutionListResponse{}
	_body, _err := client.QueryMediaWorkflowExecutionListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitComplexJobWithOptions(request *SubmitComplexJobRequest, runtime *util.RuntimeOptions) (_result *SubmitComplexJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitComplexJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitComplexJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitComplexJob(request *SubmitComplexJobRequest) (_result *SubmitComplexJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitComplexJobResponse{}
	_body, _err := client.SubmitComplexJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddAsrPipelineWithOptions(request *AddAsrPipelineRequest, runtime *util.RuntimeOptions) (_result *AddAsrPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddAsrPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddAsrPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddAsrPipeline(request *AddAsrPipelineRequest) (_result *AddAsrPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddAsrPipelineResponse{}
	_body, _err := client.AddAsrPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CancelJobWithOptions(request *CancelJobRequest, runtime *util.RuntimeOptions) (_result *CancelJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CancelJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CancelJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CancelJob(request *CancelJobRequest) (_result *CancelJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CancelJobResponse{}
	_body, _err := client.CancelJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListAllCategoryWithOptions(request *ListAllCategoryRequest, runtime *util.RuntimeOptions) (_result *ListAllCategoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListAllCategoryResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListAllCategory"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListAllCategory(request *ListAllCategoryRequest) (_result *ListAllCategoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListAllCategoryResponse{}
	_body, _err := client.ListAllCategoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListFpShotDBWithOptions(request *ListFpShotDBRequest, runtime *util.RuntimeOptions) (_result *ListFpShotDBResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListFpShotDBResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListFpShotDB"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListFpShotDB(request *ListFpShotDBRequest) (_result *ListFpShotDBResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListFpShotDBResponse{}
	_body, _err := client.ListFpShotDBWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddSmarttagTemplateWithOptions(request *AddSmarttagTemplateRequest, runtime *util.RuntimeOptions) (_result *AddSmarttagTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddSmarttagTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddSmarttagTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddSmarttagTemplate(request *AddSmarttagTemplateRequest) (_result *AddSmarttagTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddSmarttagTemplateResponse{}
	_body, _err := client.AddSmarttagTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) LogicalDeleteResourceWithOptions(request *LogicalDeleteResourceRequest, runtime *util.RuntimeOptions) (_result *LogicalDeleteResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &LogicalDeleteResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("LogicalDeleteResource"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) LogicalDeleteResource(request *LogicalDeleteResourceRequest) (_result *LogicalDeleteResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &LogicalDeleteResourceResponse{}
	_body, _err := client.LogicalDeleteResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListMediaWorkflowExecutionsWithOptions(request *ListMediaWorkflowExecutionsRequest, runtime *util.RuntimeOptions) (_result *ListMediaWorkflowExecutionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListMediaWorkflowExecutionsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListMediaWorkflowExecutions"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListMediaWorkflowExecutions(request *ListMediaWorkflowExecutionsRequest) (_result *ListMediaWorkflowExecutionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListMediaWorkflowExecutionsResponse{}
	_body, _err := client.ListMediaWorkflowExecutionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitInnerJobWithOptions(request *SubmitInnerJobRequest, runtime *util.RuntimeOptions) (_result *SubmitInnerJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitInnerJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitInnerJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitInnerJob(request *SubmitInnerJobRequest) (_result *SubmitInnerJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitInnerJobResponse{}
	_body, _err := client.SubmitInnerJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaDetailJobListWithOptions(request *QueryMediaDetailJobListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaDetailJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaDetailJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaDetailJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaDetailJobList(request *QueryMediaDetailJobListRequest) (_result *QueryMediaDetailJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaDetailJobListResponse{}
	_body, _err := client.QueryMediaDetailJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdatePornPipelineWithOptions(request *UpdatePornPipelineRequest, runtime *util.RuntimeOptions) (_result *UpdatePornPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdatePornPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdatePornPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdatePornPipeline(request *UpdatePornPipelineRequest) (_result *UpdatePornPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePornPipelineResponse{}
	_body, _err := client.UpdatePornPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteWaterMarkTemplateWithOptions(request *DeleteWaterMarkTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteWaterMarkTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteWaterMarkTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteWaterMarkTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteWaterMarkTemplate(request *DeleteWaterMarkTemplateRequest) (_result *DeleteWaterMarkTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteWaterMarkTemplateResponse{}
	_body, _err := client.DeleteWaterMarkTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitVideoQualityJobWithOptions(request *SubmitVideoQualityJobRequest, runtime *util.RuntimeOptions) (_result *SubmitVideoQualityJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitVideoQualityJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitVideoQualityJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitVideoQualityJob(request *SubmitVideoQualityJobRequest) (_result *SubmitVideoQualityJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitVideoQualityJobResponse{}
	_body, _err := client.SubmitVideoQualityJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddCoverPipelineWithOptions(request *AddCoverPipelineRequest, runtime *util.RuntimeOptions) (_result *AddCoverPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddCoverPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddCoverPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddCoverPipeline(request *AddCoverPipelineRequest) (_result *AddCoverPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddCoverPipelineResponse{}
	_body, _err := client.AddCoverPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitURLUploadJobWithOptions(tmpReq *SubmitURLUploadJobRequest, runtime *util.RuntimeOptions) (_result *SubmitURLUploadJobResponse, _err error) {
	_err = util.ValidateModel(tmpReq)
	if _err != nil {
		return _result, _err
	}
	request := &SubmitURLUploadJobShrinkRequest{}
	openapiutil.Convert(tmpReq, request)
	if !tea.BoolValue(util.IsUnset(tea.ToMap(tmpReq.TargetStorage))) {
		request.TargetStorageShrink = openapiutil.ArrayToStringWithSpecifiedStyle(tea.ToMap(tmpReq.TargetStorage), tea.String("TargetStorage"), tea.String("json"))
	}

	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitURLUploadJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitURLUploadJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitURLUploadJob(request *SubmitURLUploadJobRequest) (_result *SubmitURLUploadJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitURLUploadJobResponse{}
	_body, _err := client.SubmitURLUploadJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaListByURLWithOptions(request *QueryMediaListByURLRequest, runtime *util.RuntimeOptions) (_result *QueryMediaListByURLResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaListByURLResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaListByURL"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaListByURL(request *QueryMediaListByURLRequest) (_result *QueryMediaListByURLResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaListByURLResponse{}
	_body, _err := client.QueryMediaListByURLWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMediaFpDeleteJobWithOptions(request *SubmitMediaFpDeleteJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaFpDeleteJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitMediaFpDeleteJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitMediaFpDeleteJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMediaFpDeleteJob(request *SubmitMediaFpDeleteJobRequest) (_result *SubmitMediaFpDeleteJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaFpDeleteJobResponse{}
	_body, _err := client.SubmitMediaFpDeleteJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeactivateMediaWorkflowWithOptions(request *DeactivateMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *DeactivateMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeactivateMediaWorkflowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeactivateMediaWorkflow"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeactivateMediaWorkflow(request *DeactivateMediaWorkflowRequest) (_result *DeactivateMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeactivateMediaWorkflowResponse{}
	_body, _err := client.DeactivateMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PhysicalDeleteResourceWithOptions(request *PhysicalDeleteResourceRequest, runtime *util.RuntimeOptions) (_result *PhysicalDeleteResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PhysicalDeleteResourceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("PhysicalDeleteResource"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PhysicalDeleteResource(request *PhysicalDeleteResourceRequest) (_result *PhysicalDeleteResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PhysicalDeleteResourceResponse{}
	_body, _err := client.PhysicalDeleteResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMCTemplateWithOptions(request *DeleteMCTemplateRequest, runtime *util.RuntimeOptions) (_result *DeleteMCTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteMCTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteMCTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMCTemplate(request *DeleteMCTemplateRequest) (_result *DeleteMCTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMCTemplateResponse{}
	_body, _err := client.DeleteMCTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdatePipelineWithOptions(request *UpdatePipelineRequest, runtime *util.RuntimeOptions) (_result *UpdatePipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdatePipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdatePipeline(request *UpdatePipelineRequest) (_result *UpdatePipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdatePipelineResponse{}
	_body, _err := client.UpdatePipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMediaWithOptions(request *DeleteMediaRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteMediaResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteMedia"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMedia(request *DeleteMediaRequest) (_result *DeleteMediaResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaResponse{}
	_body, _err := client.DeleteMediaWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryFpCompareJobListWithOptions(request *QueryFpCompareJobListRequest, runtime *util.RuntimeOptions) (_result *QueryFpCompareJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryFpCompareJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryFpCompareJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryFpCompareJobList(request *QueryFpCompareJobListRequest) (_result *QueryFpCompareJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFpCompareJobListResponse{}
	_body, _err := client.QueryFpCompareJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindOutputBucketWithOptions(request *BindOutputBucketRequest, runtime *util.RuntimeOptions) (_result *BindOutputBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BindOutputBucketResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BindOutputBucket"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindOutputBucket(request *BindOutputBucketRequest) (_result *BindOutputBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindOutputBucketResponse{}
	_body, _err := client.BindOutputBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddPipelineWithOptions(request *AddPipelineRequest, runtime *util.RuntimeOptions) (_result *AddPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddPipeline(request *AddPipelineRequest) (_result *AddPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPipelineResponse{}
	_body, _err := client.AddPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMCJobListWithOptions(request *QueryMCJobListRequest, runtime *util.RuntimeOptions) (_result *QueryMCJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMCJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMCJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMCJobList(request *QueryMCJobListRequest) (_result *QueryMCJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMCJobListResponse{}
	_body, _err := client.QueryMCJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaListWithOptions(request *QueryMediaListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaList(request *QueryMediaListRequest) (_result *QueryMediaListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaListResponse{}
	_body, _err := client.QueryMediaListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryFpDBDeleteJobListWithOptions(request *QueryFpDBDeleteJobListRequest, runtime *util.RuntimeOptions) (_result *QueryFpDBDeleteJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryFpDBDeleteJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryFpDBDeleteJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryFpDBDeleteJobList(request *QueryFpDBDeleteJobListRequest) (_result *QueryFpDBDeleteJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFpDBDeleteJobListResponse{}
	_body, _err := client.QueryFpDBDeleteJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RegisterCustomFaceWithOptions(request *RegisterCustomFaceRequest, runtime *util.RuntimeOptions) (_result *RegisterCustomFaceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RegisterCustomFaceResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RegisterCustomFace"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RegisterCustomFace(request *RegisterCustomFaceRequest) (_result *RegisterCustomFaceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterCustomFaceResponse{}
	_body, _err := client.RegisterCustomFaceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMediaInfoJobWithOptions(request *SubmitMediaInfoJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaInfoJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitMediaInfoJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMediaInfoJob(request *SubmitMediaInfoJobRequest) (_result *SubmitMediaInfoJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaInfoJobResponse{}
	_body, _err := client.SubmitMediaInfoJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPornJobListWithOptions(request *QueryPornJobListRequest, runtime *util.RuntimeOptions) (_result *QueryPornJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryPornJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryPornJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPornJobList(request *QueryPornJobListRequest) (_result *QueryPornJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPornJobListResponse{}
	_body, _err := client.QueryPornJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCategoryNameWithOptions(request *UpdateCategoryNameRequest, runtime *util.RuntimeOptions) (_result *UpdateCategoryNameResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateCategoryNameResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateCategoryName"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCategoryName(request *UpdateCategoryNameRequest) (_result *UpdateCategoryNameResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCategoryNameResponse{}
	_body, _err := client.UpdateCategoryNameWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) DeleteMediaWorkflowWithOptions(request *DeleteMediaWorkflowRequest, runtime *util.RuntimeOptions) (_result *DeleteMediaWorkflowResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &DeleteMediaWorkflowResponse{}
	_body, _err := client.DoRPCRequest(tea.String("DeleteMediaWorkflow"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) DeleteMediaWorkflow(request *DeleteMediaWorkflowRequest) (_result *DeleteMediaWorkflowResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteMediaWorkflowResponse{}
	_body, _err := client.DeleteMediaWorkflowWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMcuJobWithOptions(request *QueryMcuJobRequest, runtime *util.RuntimeOptions) (_result *QueryMcuJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMcuJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMcuJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMcuJob(request *QueryMcuJobRequest) (_result *QueryMcuJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMcuJobResponse{}
	_body, _err := client.QueryMcuJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCoverPipelineWithOptions(request *ListCoverPipelineRequest, runtime *util.RuntimeOptions) (_result *ListCoverPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListCoverPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListCoverPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCoverPipeline(request *ListCoverPipelineRequest) (_result *ListCoverPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCoverPipelineResponse{}
	_body, _err := client.ListCoverPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitBeautifyJobsWithOptions(request *SubmitBeautifyJobsRequest, runtime *util.RuntimeOptions) (_result *SubmitBeautifyJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitBeautifyJobsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitBeautifyJobs"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitBeautifyJobs(request *SubmitBeautifyJobsRequest) (_result *SubmitBeautifyJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitBeautifyJobsResponse{}
	_body, _err := client.SubmitBeautifyJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryImageSearchJobListWithOptions(request *QueryImageSearchJobListRequest, runtime *util.RuntimeOptions) (_result *QueryImageSearchJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryImageSearchJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryImageSearchJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryImageSearchJobList(request *QueryImageSearchJobListRequest) (_result *QueryImageSearchJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryImageSearchJobListResponse{}
	_body, _err := client.QueryImageSearchJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitVideoSummaryJobWithOptions(request *SubmitVideoSummaryJobRequest, runtime *util.RuntimeOptions) (_result *SubmitVideoSummaryJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitVideoSummaryJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitVideoSummaryJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitVideoSummaryJob(request *SubmitVideoSummaryJobRequest) (_result *SubmitVideoSummaryJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitVideoSummaryJobResponse{}
	_body, _err := client.SubmitVideoSummaryJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitMediaDetailJobWithOptions(request *SubmitMediaDetailJobRequest, runtime *util.RuntimeOptions) (_result *SubmitMediaDetailJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitMediaDetailJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitMediaDetailJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitMediaDetailJob(request *SubmitMediaDetailJobRequest) (_result *SubmitMediaDetailJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitMediaDetailJobResponse{}
	_body, _err := client.SubmitMediaDetailJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryFpImportResultWithOptions(request *QueryFpImportResultRequest, runtime *util.RuntimeOptions) (_result *QueryFpImportResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryFpImportResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryFpImportResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryFpImportResult(request *QueryFpImportResultRequest) (_result *QueryFpImportResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFpImportResultResponse{}
	_body, _err := client.QueryFpImportResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryWaterMarkTemplateListWithOptions(request *QueryWaterMarkTemplateListRequest, runtime *util.RuntimeOptions) (_result *QueryWaterMarkTemplateListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryWaterMarkTemplateListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryWaterMarkTemplateList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryWaterMarkTemplateList(request *QueryWaterMarkTemplateListRequest) (_result *QueryWaterMarkTemplateListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryWaterMarkTemplateListResponse{}
	_body, _err := client.QueryWaterMarkTemplateListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaInfoJobListWithOptions(request *QueryMediaInfoJobListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaInfoJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaInfoJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaInfoJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaInfoJobList(request *QueryMediaInfoJobListRequest) (_result *QueryMediaInfoJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaInfoJobListResponse{}
	_body, _err := client.QueryMediaInfoJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryMediaFpDeleteJobListWithOptions(request *QueryMediaFpDeleteJobListRequest, runtime *util.RuntimeOptions) (_result *QueryMediaFpDeleteJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryMediaFpDeleteJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryMediaFpDeleteJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryMediaFpDeleteJobList(request *QueryMediaFpDeleteJobListRequest) (_result *QueryMediaFpDeleteJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryMediaFpDeleteJobListResponse{}
	_body, _err := client.QueryMediaFpDeleteJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportTagJobResultWithOptions(request *ReportTagJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportTagJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportTagJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportTagJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportTagJobResult(request *ReportTagJobResultRequest) (_result *ReportTagJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportTagJobResultResponse{}
	_body, _err := client.ReportTagJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddPornPipelineWithOptions(request *AddPornPipelineRequest, runtime *util.RuntimeOptions) (_result *AddPornPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddPornPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddPornPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddPornPipeline(request *AddPornPipelineRequest) (_result *AddPornPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddPornPipelineResponse{}
	_body, _err := client.AddPornPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPornPipelineListWithOptions(request *QueryPornPipelineListRequest, runtime *util.RuntimeOptions) (_result *QueryPornPipelineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryPornPipelineListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryPornPipelineList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPornPipelineList(request *QueryPornPipelineListRequest) (_result *QueryPornPipelineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPornPipelineListResponse{}
	_body, _err := client.QueryPornPipelineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryTerrorismJobListWithOptions(request *QueryTerrorismJobListRequest, runtime *util.RuntimeOptions) (_result *QueryTerrorismJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryTerrorismJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryTerrorismJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryTerrorismJobList(request *QueryTerrorismJobListRequest) (_result *QueryTerrorismJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryTerrorismJobListResponse{}
	_body, _err := client.QueryTerrorismJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitJobsWithOptions(request *SubmitJobsRequest, runtime *util.RuntimeOptions) (_result *SubmitJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitJobsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitJobs"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitJobs(request *SubmitJobsRequest) (_result *SubmitJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitJobsResponse{}
	_body, _err := client.SubmitJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RefreshCdnDomainConfigsCacheWithOptions(request *RefreshCdnDomainConfigsCacheRequest, runtime *util.RuntimeOptions) (_result *RefreshCdnDomainConfigsCacheResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RefreshCdnDomainConfigsCacheResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RefreshCdnDomainConfigsCache"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RefreshCdnDomainConfigsCache(request *RefreshCdnDomainConfigsCacheRequest) (_result *RefreshCdnDomainConfigsCacheResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RefreshCdnDomainConfigsCacheResponse{}
	_body, _err := client.RefreshCdnDomainConfigsCacheWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryFpFileDeleteJobListWithOptions(request *QueryFpFileDeleteJobListRequest, runtime *util.RuntimeOptions) (_result *QueryFpFileDeleteJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryFpFileDeleteJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryFpFileDeleteJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryFpFileDeleteJobList(request *QueryFpFileDeleteJobListRequest) (_result *QueryFpFileDeleteJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFpFileDeleteJobListResponse{}
	_body, _err := client.QueryFpFileDeleteJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitImageSearchJobWithOptions(request *SubmitImageSearchJobRequest, runtime *util.RuntimeOptions) (_result *SubmitImageSearchJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitImageSearchJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitImageSearchJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitImageSearchJob(request *SubmitImageSearchJobRequest) (_result *SubmitImageSearchJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitImageSearchJobResponse{}
	_body, _err := client.SubmitImageSearchJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateMediaWorkflowTriggerModeWithOptions(request *UpdateMediaWorkflowTriggerModeRequest, runtime *util.RuntimeOptions) (_result *UpdateMediaWorkflowTriggerModeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateMediaWorkflowTriggerModeResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateMediaWorkflowTriggerMode"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateMediaWorkflowTriggerMode(request *UpdateMediaWorkflowTriggerModeRequest) (_result *UpdateMediaWorkflowTriggerModeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateMediaWorkflowTriggerModeResponse{}
	_body, _err := client.UpdateMediaWorkflowTriggerModeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SetAuthConfigWithOptions(request *SetAuthConfigRequest, runtime *util.RuntimeOptions) (_result *SetAuthConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SetAuthConfigResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SetAuthConfig"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SetAuthConfig(request *SetAuthConfigRequest) (_result *SetAuthConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetAuthConfigResponse{}
	_body, _err := client.SetAuthConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCensorPipelineWithOptions(request *UpdateCensorPipelineRequest, runtime *util.RuntimeOptions) (_result *UpdateCensorPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateCensorPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateCensorPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCensorPipeline(request *UpdateCensorPipelineRequest) (_result *UpdateCensorPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCensorPipelineResponse{}
	_body, _err := client.UpdateCensorPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitSnapshotJobWithOptions(request *SubmitSnapshotJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSnapshotJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitSnapshotJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitSnapshotJob(request *SubmitSnapshotJobRequest) (_result *SubmitSnapshotJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSnapshotJobResponse{}
	_body, _err := client.SubmitSnapshotJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ListCustomPersonsWithOptions(request *ListCustomPersonsRequest, runtime *util.RuntimeOptions) (_result *ListCustomPersonsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ListCustomPersonsResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ListCustomPersons"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ListCustomPersons(request *ListCustomPersonsRequest) (_result *ListCustomPersonsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ListCustomPersonsResponse{}
	_body, _err := client.ListCustomPersonsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryFacerecogJobListWithOptions(request *QueryFacerecogJobListRequest, runtime *util.RuntimeOptions) (_result *QueryFacerecogJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryFacerecogJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryFacerecogJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryFacerecogJobList(request *QueryFacerecogJobListRequest) (_result *QueryFacerecogJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryFacerecogJobListResponse{}
	_body, _err := client.QueryFacerecogJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateInferenceServerWithOptions(request *CreateInferenceServerRequest, runtime *util.RuntimeOptions) (_result *CreateInferenceServerResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &CreateInferenceServerResponse{}
	_body, _err := client.DoRPCRequest(tea.String("CreateInferenceServer"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateInferenceServer(request *CreateInferenceServerRequest) (_result *CreateInferenceServerResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateInferenceServerResponse{}
	_body, _err := client.CreateInferenceServerWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportMediaDetailJobResultWithOptions(request *ReportMediaDetailJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportMediaDetailJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportMediaDetailJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportMediaDetailJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportMediaDetailJobResult(request *ReportMediaDetailJobResultRequest) (_result *ReportMediaDetailJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportMediaDetailJobResultResponse{}
	_body, _err := client.ReportMediaDetailJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitAnnotationJobWithOptions(request *SubmitAnnotationJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAnnotationJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitAnnotationJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitAnnotationJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitAnnotationJob(request *SubmitAnnotationJobRequest) (_result *SubmitAnnotationJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAnnotationJobResponse{}
	_body, _err := client.SubmitAnnotationJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) RegisterMediaDetailScenarioWithOptions(request *RegisterMediaDetailScenarioRequest, runtime *util.RuntimeOptions) (_result *RegisterMediaDetailScenarioResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &RegisterMediaDetailScenarioResponse{}
	_body, _err := client.DoRPCRequest(tea.String("RegisterMediaDetailScenario"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) RegisterMediaDetailScenario(request *RegisterMediaDetailScenarioRequest) (_result *RegisterMediaDetailScenarioResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RegisterMediaDetailScenarioResponse{}
	_body, _err := client.RegisterMediaDetailScenarioWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryVideoSplitJobListWithOptions(request *QueryVideoSplitJobListRequest, runtime *util.RuntimeOptions) (_result *QueryVideoSplitJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryVideoSplitJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryVideoSplitJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryVideoSplitJobList(request *QueryVideoSplitJobListRequest) (_result *QueryVideoSplitJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryVideoSplitJobListResponse{}
	_body, _err := client.QueryVideoSplitJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) ReportAnnotationJobResultWithOptions(request *ReportAnnotationJobResultRequest, runtime *util.RuntimeOptions) (_result *ReportAnnotationJobResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &ReportAnnotationJobResultResponse{}
	_body, _err := client.DoRPCRequest(tea.String("ReportAnnotationJobResult"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) ReportAnnotationJobResult(request *ReportAnnotationJobResultRequest) (_result *ReportAnnotationJobResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ReportAnnotationJobResultResponse{}
	_body, _err := client.ReportAnnotationJobResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) BindInputBucketWithOptions(request *BindInputBucketRequest, runtime *util.RuntimeOptions) (_result *BindInputBucketResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &BindInputBucketResponse{}
	_body, _err := client.DoRPCRequest(tea.String("BindInputBucket"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) BindInputBucket(request *BindInputBucketRequest) (_result *BindInputBucketResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &BindInputBucketResponse{}
	_body, _err := client.BindInputBucketWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryPipelineListWithOptions(request *QueryPipelineListRequest, runtime *util.RuntimeOptions) (_result *QueryPipelineListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryPipelineListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryPipelineList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryPipelineList(request *QueryPipelineListRequest) (_result *QueryPipelineListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryPipelineListResponse{}
	_body, _err := client.QueryPipelineListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTemplateWithOptions(request *UpdateTemplateRequest, runtime *util.RuntimeOptions) (_result *UpdateTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTemplate(request *UpdateTemplateRequest) (_result *UpdateTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTemplateResponse{}
	_body, _err := client.UpdateTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateCoverPipelineWithOptions(request *UpdateCoverPipelineRequest, runtime *util.RuntimeOptions) (_result *UpdateCoverPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateCoverPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateCoverPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateCoverPipeline(request *UpdateCoverPipelineRequest) (_result *UpdateCoverPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateCoverPipelineResponse{}
	_body, _err := client.UpdateCoverPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) UpdateTerrorismPipelineWithOptions(request *UpdateTerrorismPipelineRequest, runtime *util.RuntimeOptions) (_result *UpdateTerrorismPipelineResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &UpdateTerrorismPipelineResponse{}
	_body, _err := client.DoRPCRequest(tea.String("UpdateTerrorismPipeline"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) UpdateTerrorismPipeline(request *UpdateTerrorismPipelineRequest) (_result *UpdateTerrorismPipelineResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateTerrorismPipelineResponse{}
	_body, _err := client.UpdateTerrorismPipelineWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryInferenceJobWithOptions(request *QueryInferenceJobRequest, runtime *util.RuntimeOptions) (_result *QueryInferenceJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryInferenceJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryInferenceJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryInferenceJob(request *QueryInferenceJobRequest) (_result *QueryInferenceJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryInferenceJobResponse{}
	_body, _err := client.QueryInferenceJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryVideoPoseJobListWithOptions(request *QueryVideoPoseJobListRequest, runtime *util.RuntimeOptions) (_result *QueryVideoPoseJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryVideoPoseJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryVideoPoseJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryVideoPoseJobList(request *QueryVideoPoseJobListRequest) (_result *QueryVideoPoseJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryVideoPoseJobListResponse{}
	_body, _err := client.QueryVideoPoseJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitAnalysisJobWithOptions(request *SubmitAnalysisJobRequest, runtime *util.RuntimeOptions) (_result *SubmitAnalysisJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitAnalysisJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitAnalysisJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitAnalysisJob(request *SubmitAnalysisJobRequest) (_result *SubmitAnalysisJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitAnalysisJobResponse{}
	_body, _err := client.SubmitAnalysisJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitVideoSplitJobWithOptions(request *SubmitVideoSplitJobRequest, runtime *util.RuntimeOptions) (_result *SubmitVideoSplitJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitVideoSplitJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitVideoSplitJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitVideoSplitJob(request *SubmitVideoSplitJobRequest) (_result *SubmitVideoSplitJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitVideoSplitJobResponse{}
	_body, _err := client.SubmitVideoSplitJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PlayInfoWithOptions(request *PlayInfoRequest, runtime *util.RuntimeOptions) (_result *PlayInfoResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PlayInfoResponse{}
	_body, _err := client.DoRPCRequest(tea.String("PlayInfo"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PlayInfo(request *PlayInfoRequest) (_result *PlayInfoResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PlayInfoResponse{}
	_body, _err := client.PlayInfoWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SubmitSubtitleJobWithOptions(request *SubmitSubtitleJobRequest, runtime *util.RuntimeOptions) (_result *SubmitSubtitleJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &SubmitSubtitleJobResponse{}
	_body, _err := client.DoRPCRequest(tea.String("SubmitSubtitleJob"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SubmitSubtitleJob(request *SubmitSubtitleJobRequest) (_result *SubmitSubtitleJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SubmitSubtitleJobResponse{}
	_body, _err := client.SubmitSubtitleJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) QueryCoverJobListWithOptions(request *QueryCoverJobListRequest, runtime *util.RuntimeOptions) (_result *QueryCoverJobListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &QueryCoverJobListResponse{}
	_body, _err := client.DoRPCRequest(tea.String("QueryCoverJobList"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) QueryCoverJobList(request *QueryCoverJobListRequest) (_result *QueryCoverJobListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &QueryCoverJobListResponse{}
	_body, _err := client.QueryCoverJobListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) AddWaterMarkTemplateWithOptions(request *AddWaterMarkTemplateRequest, runtime *util.RuntimeOptions) (_result *AddWaterMarkTemplateResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &AddWaterMarkTemplateResponse{}
	_body, _err := client.DoRPCRequest(tea.String("AddWaterMarkTemplate"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) AddWaterMarkTemplate(request *AddWaterMarkTemplateRequest) (_result *AddWaterMarkTemplateResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddWaterMarkTemplateResponse{}
	_body, _err := client.AddWaterMarkTemplateWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) PlayerAuthWithOptions(request *PlayerAuthRequest, runtime *util.RuntimeOptions) (_result *PlayerAuthResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	req := &openapi.OpenApiRequest{
		Body: util.ToMap(request),
	}
	_result = &PlayerAuthResponse{}
	_body, _err := client.DoRPCRequest(tea.String("PlayerAuth"), tea.String("2014-06-18"), tea.String("HTTPS"), tea.String("POST"), tea.String("AK"), tea.String("json"), req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) PlayerAuth(request *PlayerAuthRequest) (_result *PlayerAuthResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &PlayerAuthResponse{}
	_body, _err := client.PlayerAuthWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
