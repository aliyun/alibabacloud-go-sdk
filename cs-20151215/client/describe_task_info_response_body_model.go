// This file is auto-generated, don't edit it. Thanks.
package client

import (
	"github.com/alibabacloud-go/tea/dara"
)

type iDescribeTaskInfoResponseBody interface {
	dara.Model
	String() string
	GoString() string
	SetClusterId(v string) *DescribeTaskInfoResponseBody
	GetClusterId() *string
	SetCreated(v string) *DescribeTaskInfoResponseBody
	GetCreated() *string
	SetCurrentStage(v string) *DescribeTaskInfoResponseBody
	GetCurrentStage() *string
	SetError(v *DescribeTaskInfoResponseBodyError) *DescribeTaskInfoResponseBody
	GetError() *DescribeTaskInfoResponseBodyError
	SetEvents(v []*DescribeTaskInfoResponseBodyEvents) *DescribeTaskInfoResponseBody
	GetEvents() []*DescribeTaskInfoResponseBodyEvents
	SetParameters(v map[string]interface{}) *DescribeTaskInfoResponseBody
	GetParameters() map[string]interface{}
	SetStages(v []*DescribeTaskInfoResponseBodyStages) *DescribeTaskInfoResponseBody
	GetStages() []*DescribeTaskInfoResponseBodyStages
	SetState(v string) *DescribeTaskInfoResponseBody
	GetState() *string
	SetTarget(v *DescribeTaskInfoResponseBodyTarget) *DescribeTaskInfoResponseBody
	GetTarget() *DescribeTaskInfoResponseBodyTarget
	SetTaskId(v string) *DescribeTaskInfoResponseBody
	GetTaskId() *string
	SetTaskResult(v []*DescribeTaskInfoResponseBodyTaskResult) *DescribeTaskInfoResponseBody
	GetTaskResult() []*DescribeTaskInfoResponseBodyTaskResult
	SetTaskType(v string) *DescribeTaskInfoResponseBody
	GetTaskType() *string
	SetUpdated(v string) *DescribeTaskInfoResponseBody
	GetUpdated() *string
}

type DescribeTaskInfoResponseBody struct {
	// The cluster ID.
	//
	// example:
	//
	// c78592bfe92244365b3c3ad47f1de****
	ClusterId *string `json:"cluster_id,omitempty" xml:"cluster_id,omitempty"`
	// The time when the task was created.
	//
	// example:
	//
	// 2020-11-10T16:02:04+08:00
	Created *string `json:"created,omitempty" xml:"created,omitempty"`
	// The current stage of the task.
	//
	// example:
	//
	// DrainNodes
	CurrentStage *string `json:"current_stage,omitempty" xml:"current_stage,omitempty"`
	// The error returned for the task.
	Error *DescribeTaskInfoResponseBodyError `json:"error,omitempty" xml:"error,omitempty" type:"Struct"`
	// The event generated by the task.
	Events []*DescribeTaskInfoResponseBodyEvents `json:"events,omitempty" xml:"events,omitempty" type:"Repeated"`
	// The task parameters.
	Parameters map[string]interface{} `json:"parameters,omitempty" xml:"parameters,omitempty"`
	// Detailed information about the stage of the task.
	Stages []*DescribeTaskInfoResponseBodyStages `json:"stages,omitempty" xml:"stages,omitempty" type:"Repeated"`
	// The status of the task. Valid values:
	//
	// 	- `running`: The task is running.
	//
	// 	- `failed`: The task failed.
	//
	// 	- `success`: The task is complete.
	//
	// example:
	//
	// running
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// The object of the task.
	Target *DescribeTaskInfoResponseBodyTarget `json:"target,omitempty" xml:"target,omitempty" type:"Struct"`
	// The task ID.
	//
	// example:
	//
	// T-5faa48fb31b6b8078d000006
	TaskId *string `json:"task_id,omitempty" xml:"task_id,omitempty"`
	// The execution details of the task.
	TaskResult []*DescribeTaskInfoResponseBodyTaskResult `json:"task_result,omitempty" xml:"task_result,omitempty" type:"Repeated"`
	// The task type. A value of `cluster_scaleout` indicates a scale-out task.
	//
	// example:
	//
	// cluster_scaleout
	TaskType *string `json:"task_type,omitempty" xml:"task_type,omitempty"`
	// The time when the task was updated.
	//
	// example:
	//
	// 2020-11-10T16:03:06+08:00
	Updated *string `json:"updated,omitempty" xml:"updated,omitempty"`
}

func (s DescribeTaskInfoResponseBody) String() string {
	return dara.Prettify(s)
}

func (s DescribeTaskInfoResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTaskInfoResponseBody) GetClusterId() *string {
	return s.ClusterId
}

func (s *DescribeTaskInfoResponseBody) GetCreated() *string {
	return s.Created
}

func (s *DescribeTaskInfoResponseBody) GetCurrentStage() *string {
	return s.CurrentStage
}

func (s *DescribeTaskInfoResponseBody) GetError() *DescribeTaskInfoResponseBodyError {
	return s.Error
}

func (s *DescribeTaskInfoResponseBody) GetEvents() []*DescribeTaskInfoResponseBodyEvents {
	return s.Events
}

func (s *DescribeTaskInfoResponseBody) GetParameters() map[string]interface{} {
	return s.Parameters
}

func (s *DescribeTaskInfoResponseBody) GetStages() []*DescribeTaskInfoResponseBodyStages {
	return s.Stages
}

func (s *DescribeTaskInfoResponseBody) GetState() *string {
	return s.State
}

func (s *DescribeTaskInfoResponseBody) GetTarget() *DescribeTaskInfoResponseBodyTarget {
	return s.Target
}

func (s *DescribeTaskInfoResponseBody) GetTaskId() *string {
	return s.TaskId
}

func (s *DescribeTaskInfoResponseBody) GetTaskResult() []*DescribeTaskInfoResponseBodyTaskResult {
	return s.TaskResult
}

func (s *DescribeTaskInfoResponseBody) GetTaskType() *string {
	return s.TaskType
}

func (s *DescribeTaskInfoResponseBody) GetUpdated() *string {
	return s.Updated
}

func (s *DescribeTaskInfoResponseBody) SetClusterId(v string) *DescribeTaskInfoResponseBody {
	s.ClusterId = &v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetCreated(v string) *DescribeTaskInfoResponseBody {
	s.Created = &v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetCurrentStage(v string) *DescribeTaskInfoResponseBody {
	s.CurrentStage = &v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetError(v *DescribeTaskInfoResponseBodyError) *DescribeTaskInfoResponseBody {
	s.Error = v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetEvents(v []*DescribeTaskInfoResponseBodyEvents) *DescribeTaskInfoResponseBody {
	s.Events = v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetParameters(v map[string]interface{}) *DescribeTaskInfoResponseBody {
	s.Parameters = v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetStages(v []*DescribeTaskInfoResponseBodyStages) *DescribeTaskInfoResponseBody {
	s.Stages = v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetState(v string) *DescribeTaskInfoResponseBody {
	s.State = &v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetTarget(v *DescribeTaskInfoResponseBodyTarget) *DescribeTaskInfoResponseBody {
	s.Target = v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetTaskId(v string) *DescribeTaskInfoResponseBody {
	s.TaskId = &v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetTaskResult(v []*DescribeTaskInfoResponseBodyTaskResult) *DescribeTaskInfoResponseBody {
	s.TaskResult = v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetTaskType(v string) *DescribeTaskInfoResponseBody {
	s.TaskType = &v
	return s
}

func (s *DescribeTaskInfoResponseBody) SetUpdated(v string) *DescribeTaskInfoResponseBody {
	s.Updated = &v
	return s
}

func (s *DescribeTaskInfoResponseBody) Validate() error {
	return dara.Validate(s)
}

type DescribeTaskInfoResponseBodyError struct {
	// The error code returned.
	//
	// example:
	//
	// 400
	Code *string `json:"code,omitempty" xml:"code,omitempty"`
	// The error message returned.
	//
	// example:
	//
	// failed to xxx
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
}

func (s DescribeTaskInfoResponseBodyError) String() string {
	return dara.Prettify(s)
}

func (s DescribeTaskInfoResponseBodyError) GoString() string {
	return s.String()
}

func (s *DescribeTaskInfoResponseBodyError) GetCode() *string {
	return s.Code
}

func (s *DescribeTaskInfoResponseBodyError) GetMessage() *string {
	return s.Message
}

func (s *DescribeTaskInfoResponseBodyError) SetCode(v string) *DescribeTaskInfoResponseBodyError {
	s.Code = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyError) SetMessage(v string) *DescribeTaskInfoResponseBodyError {
	s.Message = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyError) Validate() error {
	return dara.Validate(s)
}

type DescribeTaskInfoResponseBodyEvents struct {
	// The action of the event.
	//
	// example:
	//
	// start
	Action *string `json:"action,omitempty" xml:"action,omitempty"`
	// The severity level of the event.
	//
	// example:
	//
	// Normal
	Level *string `json:"level,omitempty" xml:"level,omitempty"`
	// The message about the event.
	//
	// example:
	//
	// start to xxx
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// The cause of the event.
	//
	// example:
	//
	// NodePoolUpgradeStart
	Reason *string `json:"reason,omitempty" xml:"reason,omitempty"`
	// The source of the event.
	//
	// example:
	//
	// ACK
	Source *string `json:"source,omitempty" xml:"source,omitempty"`
	// The timestamp when the event was generated.
	//
	// example:
	//
	// 1669706229286
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s DescribeTaskInfoResponseBodyEvents) String() string {
	return dara.Prettify(s)
}

func (s DescribeTaskInfoResponseBodyEvents) GoString() string {
	return s.String()
}

func (s *DescribeTaskInfoResponseBodyEvents) GetAction() *string {
	return s.Action
}

func (s *DescribeTaskInfoResponseBodyEvents) GetLevel() *string {
	return s.Level
}

func (s *DescribeTaskInfoResponseBodyEvents) GetMessage() *string {
	return s.Message
}

func (s *DescribeTaskInfoResponseBodyEvents) GetReason() *string {
	return s.Reason
}

func (s *DescribeTaskInfoResponseBodyEvents) GetSource() *string {
	return s.Source
}

func (s *DescribeTaskInfoResponseBodyEvents) GetTimestamp() *string {
	return s.Timestamp
}

func (s *DescribeTaskInfoResponseBodyEvents) SetAction(v string) *DescribeTaskInfoResponseBodyEvents {
	s.Action = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyEvents) SetLevel(v string) *DescribeTaskInfoResponseBodyEvents {
	s.Level = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyEvents) SetMessage(v string) *DescribeTaskInfoResponseBodyEvents {
	s.Message = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyEvents) SetReason(v string) *DescribeTaskInfoResponseBodyEvents {
	s.Reason = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyEvents) SetSource(v string) *DescribeTaskInfoResponseBodyEvents {
	s.Source = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyEvents) SetTimestamp(v string) *DescribeTaskInfoResponseBodyEvents {
	s.Timestamp = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyEvents) Validate() error {
	return dara.Validate(s)
}

type DescribeTaskInfoResponseBodyStages struct {
	// The end time of the stage.
	//
	// example:
	//
	// 2022-12-15 23:00:00
	EndTime *string `json:"end_time,omitempty" xml:"end_time,omitempty"`
	// The message about the stage.
	//
	// example:
	//
	// success to xxxxx
	Message *string `json:"message,omitempty" xml:"message,omitempty"`
	// The output generated at the stage.
	Outputs map[string]interface{} `json:"outputs,omitempty" xml:"outputs,omitempty"`
	// The start time of the stage.
	//
	// example:
	//
	// 2022-12-15 23:00:00
	StartTime *string `json:"start_time,omitempty" xml:"start_time,omitempty"`
	// The status of the stage.
	//
	// example:
	//
	// running
	State *string `json:"state,omitempty" xml:"state,omitempty"`
}

func (s DescribeTaskInfoResponseBodyStages) String() string {
	return dara.Prettify(s)
}

func (s DescribeTaskInfoResponseBodyStages) GoString() string {
	return s.String()
}

func (s *DescribeTaskInfoResponseBodyStages) GetEndTime() *string {
	return s.EndTime
}

func (s *DescribeTaskInfoResponseBodyStages) GetMessage() *string {
	return s.Message
}

func (s *DescribeTaskInfoResponseBodyStages) GetOutputs() map[string]interface{} {
	return s.Outputs
}

func (s *DescribeTaskInfoResponseBodyStages) GetStartTime() *string {
	return s.StartTime
}

func (s *DescribeTaskInfoResponseBodyStages) GetState() *string {
	return s.State
}

func (s *DescribeTaskInfoResponseBodyStages) SetEndTime(v string) *DescribeTaskInfoResponseBodyStages {
	s.EndTime = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyStages) SetMessage(v string) *DescribeTaskInfoResponseBodyStages {
	s.Message = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyStages) SetOutputs(v map[string]interface{}) *DescribeTaskInfoResponseBodyStages {
	s.Outputs = v
	return s
}

func (s *DescribeTaskInfoResponseBodyStages) SetStartTime(v string) *DescribeTaskInfoResponseBodyStages {
	s.StartTime = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyStages) SetState(v string) *DescribeTaskInfoResponseBodyStages {
	s.State = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyStages) Validate() error {
	return dara.Validate(s)
}

type DescribeTaskInfoResponseBodyTarget struct {
	// The ID of the object.
	//
	// example:
	//
	// c78592bfe92244365b3c3ad47f1de****
	Id *string `json:"id,omitempty" xml:"id,omitempty"`
	// The type of the object.
	//
	// example:
	//
	// cluster
	Type *string `json:"type,omitempty" xml:"type,omitempty"`
}

func (s DescribeTaskInfoResponseBodyTarget) String() string {
	return dara.Prettify(s)
}

func (s DescribeTaskInfoResponseBodyTarget) GoString() string {
	return s.String()
}

func (s *DescribeTaskInfoResponseBodyTarget) GetId() *string {
	return s.Id
}

func (s *DescribeTaskInfoResponseBodyTarget) GetType() *string {
	return s.Type
}

func (s *DescribeTaskInfoResponseBodyTarget) SetId(v string) *DescribeTaskInfoResponseBodyTarget {
	s.Id = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyTarget) SetType(v string) *DescribeTaskInfoResponseBodyTarget {
	s.Type = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyTarget) Validate() error {
	return dara.Validate(s)
}

type DescribeTaskInfoResponseBodyTaskResult struct {
	// The resources that are managed by the task. For a scale-out task, the value of this parameter is the ID of the instance that is added by the task.
	//
	// example:
	//
	// i-xxx
	Data *string `json:"data,omitempty" xml:"data,omitempty"`
	// The status of the scale-out task. Valid values:
	//
	// 	- `success`: The scale-out task is successful.
	//
	// 	- `success`: The scale-out task failed.
	//
	// 	- `initial`: The scale-out task is being initialized.
	//
	// example:
	//
	// success
	Status *string `json:"status,omitempty" xml:"status,omitempty"`
}

func (s DescribeTaskInfoResponseBodyTaskResult) String() string {
	return dara.Prettify(s)
}

func (s DescribeTaskInfoResponseBodyTaskResult) GoString() string {
	return s.String()
}

func (s *DescribeTaskInfoResponseBodyTaskResult) GetData() *string {
	return s.Data
}

func (s *DescribeTaskInfoResponseBodyTaskResult) GetStatus() *string {
	return s.Status
}

func (s *DescribeTaskInfoResponseBodyTaskResult) SetData(v string) *DescribeTaskInfoResponseBodyTaskResult {
	s.Data = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyTaskResult) SetStatus(v string) *DescribeTaskInfoResponseBodyTaskResult {
	s.Status = &v
	return s
}

func (s *DescribeTaskInfoResponseBodyTaskResult) Validate() error {
	return dara.Validate(s)
}
