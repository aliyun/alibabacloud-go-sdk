// This file is auto-generated, don't edit it. Thanks.
/**
 *
 */
package client

import (
	openapi "github.com/alibabacloud-go/darabonba-openapi/v2/client"
	endpointutil "github.com/alibabacloud-go/endpoint-util/service"
	openapiutil "github.com/alibabacloud-go/openapi-util/service"
	util "github.com/alibabacloud-go/tea-utils/v2/service"
	"github.com/alibabacloud-go/tea/tea"
)

type DataResultValue struct {
	// The SQL ID.
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
	// The instance ID.
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The number of failed executions.
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
}

func (s DataResultValue) String() string {
	return tea.Prettify(s)
}

func (s DataResultValue) GoString() string {
	return s.String()
}

func (s *DataResultValue) SetSqlId(v string) *DataResultValue {
	s.SqlId = &v
	return s
}

func (s *DataResultValue) SetInstanceId(v string) *DataResultValue {
	s.InstanceId = &v
	return s
}

func (s *DataResultValue) SetCount(v int32) *DataResultValue {
	s.Count = &v
	return s
}

type DataSessionStatClientStatsValue struct {
	// The number of clients whose IP addresses are active.
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The total number of IP addresses of clients.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DataSessionStatClientStatsValue) String() string {
	return tea.Prettify(s)
}

func (s DataSessionStatClientStatsValue) GoString() string {
	return s.String()
}

func (s *DataSessionStatClientStatsValue) SetActiveCount(v int64) *DataSessionStatClientStatsValue {
	s.ActiveCount = &v
	return s
}

func (s *DataSessionStatClientStatsValue) SetTotalCount(v int64) *DataSessionStatClientStatsValue {
	s.TotalCount = &v
	return s
}

type DataSessionStatDbStatsValue struct {
	// The number of active namespaces.
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The total number of namespaces.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s DataSessionStatDbStatsValue) String() string {
	return tea.Prettify(s)
}

func (s DataSessionStatDbStatsValue) GoString() string {
	return s.String()
}

func (s *DataSessionStatDbStatsValue) SetActiveCount(v int64) *DataSessionStatDbStatsValue {
	s.ActiveCount = &v
	return s
}

func (s *DataSessionStatDbStatsValue) SetTotalCount(v int64) *DataSessionStatDbStatsValue {
	s.TotalCount = &v
	return s
}

type DataValue struct {
	// The timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *string `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The value of the metric.
	Value interface{} `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s DataValue) String() string {
	return tea.Prettify(s)
}

func (s DataValue) GoString() string {
	return s.String()
}

func (s *DataValue) SetTimestamp(v string) *DataValue {
	s.Timestamp = &v
	return s
}

func (s *DataValue) SetValue(v interface{}) *DataValue {
	s.Value = v
	return s
}

type AddHDMInstanceRequest struct {
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PostgreSQL**
	// *   **SQLServer**
	// *   **PolarDBMySQL**
	// *   **PolarDBPostgreSQL**
	// *   **Redis**
	// *   **MongoDB**
	// *   **PolarDBOracle**
	// *   **PolarDBX**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The reserved parameter.
	FlushAccount *string `json:"FlushAccount,omitempty" xml:"FlushAccount,omitempty"`
	// The name of the instance.
	InstanceAlias *string `json:"InstanceAlias,omitempty" xml:"InstanceAlias,omitempty"`
	// The type of the instance on which the database is deployed. Valid values:
	//
	// *   **RDS**: an Alibaba Cloud database instance.
	// *   **ECS**: an Elastic Compute Service (ECS) instance on which a self-managed database is deployed.
	// *   **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
	//
	// >  IDC refers to your data center.
	InstanceArea *string `json:"InstanceArea,omitempty" xml:"InstanceArea,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The endpoint that is used to access the instance over internal networks.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The network type of the instance.
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	// The password for the username.
	Password *string `json:"Password,omitempty" xml:"Password,omitempty"`
	// The port that is used to access the instance over internal networks.
	Port *string `json:"Port,omitempty" xml:"Port,omitempty"`
	// The ID of the region in which the instance resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The username that is used to log on to the database.
	Username *string `json:"Username,omitempty" xml:"Username,omitempty"`
	// The virtual private cloud (VPC) ID.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
	// The reserved parameter.
	Context *string `json:"__context,omitempty" xml:"__context,omitempty"`
}

func (s AddHDMInstanceRequest) String() string {
	return tea.Prettify(s)
}

func (s AddHDMInstanceRequest) GoString() string {
	return s.String()
}

func (s *AddHDMInstanceRequest) SetEngine(v string) *AddHDMInstanceRequest {
	s.Engine = &v
	return s
}

func (s *AddHDMInstanceRequest) SetFlushAccount(v string) *AddHDMInstanceRequest {
	s.FlushAccount = &v
	return s
}

func (s *AddHDMInstanceRequest) SetInstanceAlias(v string) *AddHDMInstanceRequest {
	s.InstanceAlias = &v
	return s
}

func (s *AddHDMInstanceRequest) SetInstanceArea(v string) *AddHDMInstanceRequest {
	s.InstanceArea = &v
	return s
}

func (s *AddHDMInstanceRequest) SetInstanceId(v string) *AddHDMInstanceRequest {
	s.InstanceId = &v
	return s
}

func (s *AddHDMInstanceRequest) SetIp(v string) *AddHDMInstanceRequest {
	s.Ip = &v
	return s
}

func (s *AddHDMInstanceRequest) SetNetworkType(v string) *AddHDMInstanceRequest {
	s.NetworkType = &v
	return s
}

func (s *AddHDMInstanceRequest) SetPassword(v string) *AddHDMInstanceRequest {
	s.Password = &v
	return s
}

func (s *AddHDMInstanceRequest) SetPort(v string) *AddHDMInstanceRequest {
	s.Port = &v
	return s
}

func (s *AddHDMInstanceRequest) SetRegion(v string) *AddHDMInstanceRequest {
	s.Region = &v
	return s
}

func (s *AddHDMInstanceRequest) SetUsername(v string) *AddHDMInstanceRequest {
	s.Username = &v
	return s
}

func (s *AddHDMInstanceRequest) SetVpcId(v string) *AddHDMInstanceRequest {
	s.VpcId = &v
	return s
}

func (s *AddHDMInstanceRequest) SetContext(v string) *AddHDMInstanceRequest {
	s.Context = &v
	return s
}

type AddHDMInstanceResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *AddHDMInstanceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The reserved parameter.
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s AddHDMInstanceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s AddHDMInstanceResponseBody) GoString() string {
	return s.String()
}

func (s *AddHDMInstanceResponseBody) SetCode(v string) *AddHDMInstanceResponseBody {
	s.Code = &v
	return s
}

func (s *AddHDMInstanceResponseBody) SetData(v *AddHDMInstanceResponseBodyData) *AddHDMInstanceResponseBody {
	s.Data = v
	return s
}

func (s *AddHDMInstanceResponseBody) SetMessage(v string) *AddHDMInstanceResponseBody {
	s.Message = &v
	return s
}

func (s *AddHDMInstanceResponseBody) SetRequestId(v string) *AddHDMInstanceResponseBody {
	s.RequestId = &v
	return s
}

func (s *AddHDMInstanceResponseBody) SetSuccess(v string) *AddHDMInstanceResponseBody {
	s.Success = &v
	return s
}

func (s *AddHDMInstanceResponseBody) SetSynchro(v string) *AddHDMInstanceResponseBody {
	s.Synchro = &v
	return s
}

type AddHDMInstanceResponseBodyData struct {
	// The user ID of the caller.
	CallerUid *string `json:"CallerUid,omitempty" xml:"CallerUid,omitempty"`
	// The HTTP status code returned.
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The error message returned if the request failed.
	Error *string `json:"Error,omitempty" xml:"Error,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The endpoint of the instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The ID of the instance owner.
	OwnerId *string `json:"OwnerId,omitempty" xml:"OwnerId,omitempty"`
	// The port number of the instance that you want to access.
	Port *int32 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The role of the current API caller.
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The tenant ID.
	TenantId *string `json:"TenantId,omitempty" xml:"TenantId,omitempty"`
	// The client token that is used to ensure the idempotence of the request.
	Token *string `json:"Token,omitempty" xml:"Token,omitempty"`
	// The unique identifier of the instance.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The VPC ID.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s AddHDMInstanceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s AddHDMInstanceResponseBodyData) GoString() string {
	return s.String()
}

func (s *AddHDMInstanceResponseBodyData) SetCallerUid(v string) *AddHDMInstanceResponseBodyData {
	s.CallerUid = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetCode(v int32) *AddHDMInstanceResponseBodyData {
	s.Code = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetError(v string) *AddHDMInstanceResponseBodyData {
	s.Error = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetInstanceId(v string) *AddHDMInstanceResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetIp(v string) *AddHDMInstanceResponseBodyData {
	s.Ip = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetOwnerId(v string) *AddHDMInstanceResponseBodyData {
	s.OwnerId = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetPort(v int32) *AddHDMInstanceResponseBodyData {
	s.Port = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetRole(v string) *AddHDMInstanceResponseBodyData {
	s.Role = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetTenantId(v string) *AddHDMInstanceResponseBodyData {
	s.TenantId = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetToken(v string) *AddHDMInstanceResponseBodyData {
	s.Token = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetUuid(v string) *AddHDMInstanceResponseBodyData {
	s.Uuid = &v
	return s
}

func (s *AddHDMInstanceResponseBodyData) SetVpcId(v string) *AddHDMInstanceResponseBodyData {
	s.VpcId = &v
	return s
}

type AddHDMInstanceResponse struct {
	Headers    map[string]*string          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *AddHDMInstanceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s AddHDMInstanceResponse) String() string {
	return tea.Prettify(s)
}

func (s AddHDMInstanceResponse) GoString() string {
	return s.String()
}

func (s *AddHDMInstanceResponse) SetHeaders(v map[string]*string) *AddHDMInstanceResponse {
	s.Headers = v
	return s
}

func (s *AddHDMInstanceResponse) SetStatusCode(v int32) *AddHDMInstanceResponse {
	s.StatusCode = &v
	return s
}

func (s *AddHDMInstanceResponse) SetBody(v *AddHDMInstanceResponseBody) *AddHDMInstanceResponse {
	s.Body = v
	return s
}

type CreateAdamBenchTaskRequest struct {
	// The description of the stress testing task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The ID of the destination instance. The instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance. You can call the [GetInstanceInspections](~~202857~~) operation to query the ID.
	DstInstanceId *string `json:"DstInstanceId,omitempty" xml:"DstInstanceId,omitempty"`
	// The name of the privileged account for the destination instance.
	DstSuperAccount *string `json:"DstSuperAccount,omitempty" xml:"DstSuperAccount,omitempty"`
	// The password of the privileged account for the destination instance.
	DstSuperPassword *string `json:"DstSuperPassword,omitempty" xml:"DstSuperPassword,omitempty"`
	// The rate at which the traffic captured from the source database instance is replayed on the destination database instance. Valid values: 1 to 30. Default value: 1.
	Rate *int32 `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The duration of the stress testing task for which the traffic is captured from the source instance. Unit: milliseconds.
	RequestDuration *int64 `json:"RequestDuration,omitempty" xml:"RequestDuration,omitempty"`
	// The start time of the stress testing task. Specify the time in the UNIX timestamp format. Unit: milliseconds.
	RequestStartTime *int64 `json:"RequestStartTime,omitempty" xml:"RequestStartTime,omitempty"`
	// The database engine that the source database instance runs.
	SrcEngine *string `json:"SrcEngine,omitempty" xml:"SrcEngine,omitempty"`
	// The version of the database engine that the source database instance runs.
	SrcEngineVersion *string `json:"SrcEngineVersion,omitempty" xml:"SrcEngineVersion,omitempty"`
	// The maximum number of queries per second (QPS) within the time period during which traffic on the source database instance is captured. The value must be accurate to two decimal places.
	SrcMaxQps *float64 `json:"SrcMaxQps,omitempty" xml:"SrcMaxQps,omitempty"`
	// The average QPS within the time period in which traffic on the source database instance is captured. The value must be accurate to two decimal places.
	SrcMeanQps *float64 `json:"SrcMeanQps,omitempty" xml:"SrcMeanQps,omitempty"`
	// The URL of the Object Storage Service (OSS) folder in which the archived objects for SQL statements that run on the source database instance are stored. You can obtain the URL after you upload the archived files to OSS.
	SrcSqlOssAddr *string `json:"SrcSqlOssAddr,omitempty" xml:"SrcSqlOssAddr,omitempty"`
}

func (s CreateAdamBenchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateAdamBenchTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateAdamBenchTaskRequest) SetDescription(v string) *CreateAdamBenchTaskRequest {
	s.Description = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetDstInstanceId(v string) *CreateAdamBenchTaskRequest {
	s.DstInstanceId = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetDstSuperAccount(v string) *CreateAdamBenchTaskRequest {
	s.DstSuperAccount = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetDstSuperPassword(v string) *CreateAdamBenchTaskRequest {
	s.DstSuperPassword = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetRate(v int32) *CreateAdamBenchTaskRequest {
	s.Rate = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetRequestDuration(v int64) *CreateAdamBenchTaskRequest {
	s.RequestDuration = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetRequestStartTime(v int64) *CreateAdamBenchTaskRequest {
	s.RequestStartTime = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetSrcEngine(v string) *CreateAdamBenchTaskRequest {
	s.SrcEngine = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetSrcEngineVersion(v string) *CreateAdamBenchTaskRequest {
	s.SrcEngineVersion = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetSrcMaxQps(v float64) *CreateAdamBenchTaskRequest {
	s.SrcMaxQps = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetSrcMeanQps(v float64) *CreateAdamBenchTaskRequest {
	s.SrcMeanQps = &v
	return s
}

func (s *CreateAdamBenchTaskRequest) SetSrcSqlOssAddr(v string) *CreateAdamBenchTaskRequest {
	s.SrcSqlOssAddr = &v
	return s
}

type CreateAdamBenchTaskResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// > If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateAdamBenchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateAdamBenchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateAdamBenchTaskResponseBody) SetCode(v string) *CreateAdamBenchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateAdamBenchTaskResponseBody) SetData(v string) *CreateAdamBenchTaskResponseBody {
	s.Data = &v
	return s
}

func (s *CreateAdamBenchTaskResponseBody) SetMessage(v string) *CreateAdamBenchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateAdamBenchTaskResponseBody) SetRequestId(v string) *CreateAdamBenchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateAdamBenchTaskResponseBody) SetSuccess(v string) *CreateAdamBenchTaskResponseBody {
	s.Success = &v
	return s
}

type CreateAdamBenchTaskResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateAdamBenchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateAdamBenchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateAdamBenchTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateAdamBenchTaskResponse) SetHeaders(v map[string]*string) *CreateAdamBenchTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateAdamBenchTaskResponse) SetStatusCode(v int32) *CreateAdamBenchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateAdamBenchTaskResponse) SetBody(v *CreateAdamBenchTaskResponseBody) *CreateAdamBenchTaskResponse {
	s.Body = v
	return s
}

type CreateCacheAnalysisJobRequest struct {
	// The ID of the backup file. You can call the [DescribeBackups](~~61081~~) operation to query the ID.
	//
	// *   If you need to specify multiple backup file IDs, separate them with commas (,). For example, you can set this parameter to `12345,67890`.
	// *   If you do not specify this parameter, the system automatically backs up the task and performs cache analysis on the backup file.
	BackupSetId *string `json:"BackupSetId,omitempty" xml:"BackupSetId,omitempty"`
	// The ID of the ApsaraDB for Redis instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data node on the instance. You can specify this parameter to query the monitoring information about the specified node.
	//
	// >  If you specify the BackupSetId parameter, the system ignores the NodeId parameter. You can call the [DescribeLogicInstanceTopology](~~94665~~) operation to query the node ID.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The delimiters used to identify the prefixes of keys. You do not need to specify this parameter if one or more of the following default delimiters are used: `: ; , _ - + @ = | #`
	Separators *string `json:"Separators,omitempty" xml:"Separators,omitempty"`
}

func (s CreateCacheAnalysisJobRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobRequest) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobRequest) SetBackupSetId(v string) *CreateCacheAnalysisJobRequest {
	s.BackupSetId = &v
	return s
}

func (s *CreateCacheAnalysisJobRequest) SetInstanceId(v string) *CreateCacheAnalysisJobRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateCacheAnalysisJobRequest) SetNodeId(v string) *CreateCacheAnalysisJobRequest {
	s.NodeId = &v
	return s
}

func (s *CreateCacheAnalysisJobRequest) SetSeparators(v string) *CreateCacheAnalysisJobRequest {
	s.Separators = &v
	return s
}

type CreateCacheAnalysisJobResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *CreateCacheAnalysisJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCacheAnalysisJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponseBody) SetCode(v string) *CreateCacheAnalysisJobResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBody) SetData(v *CreateCacheAnalysisJobResponseBodyData) *CreateCacheAnalysisJobResponseBody {
	s.Data = v
	return s
}

func (s *CreateCacheAnalysisJobResponseBody) SetMessage(v string) *CreateCacheAnalysisJobResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBody) SetRequestId(v string) *CreateCacheAnalysisJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBody) SetSuccess(v string) *CreateCacheAnalysisJobResponseBody {
	s.Success = &v
	return s
}

type CreateCacheAnalysisJobResponseBodyData struct {
	// The number of elements in the key.
	BigKeys *CreateCacheAnalysisJobResponseBodyDataBigKeys `json:"BigKeys,omitempty" xml:"BigKeys,omitempty" type:"Struct"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the cache analysis task.
	//
	// >  This parameter can be used to query a specific cache analysis task. When you call the CreateCacheAnalysisJob operation, it takes some time to create a cache analysis task. As a result, the analysis results cannot be immediately returned. You can call the [DescribeCacheAnalysisJob](~~180983~~) operation to query the analysis results of the specified cache analysis task.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The state of the cache analysis task. Valid values:
	//
	// *   **BACKUP**: The data is being backed up.
	// *   **ANALYZING**: The data is being analyzed.
	// *   **FINISHED**: The data is analyzed.
	// *   **FAILED**: An error occurred.
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
}

func (s CreateCacheAnalysisJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetBigKeys(v *CreateCacheAnalysisJobResponseBodyDataBigKeys) *CreateCacheAnalysisJobResponseBodyData {
	s.BigKeys = v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetInstanceId(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetJobId(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetMessage(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.Message = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetNodeId(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyData) SetTaskState(v string) *CreateCacheAnalysisJobResponseBodyData {
	s.TaskState = &v
	return s
}

type CreateCacheAnalysisJobResponseBodyDataBigKeys struct {
	KeyInfo []*CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s CreateCacheAnalysisJobResponseBodyDataBigKeys) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponseBodyDataBigKeys) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeys) SetKeyInfo(v []*CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) *CreateCacheAnalysisJobResponseBodyDataBigKeys {
	s.KeyInfo = v
	return s
}

type CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo struct {
	// The number of bytes that are occupied by the key.
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The name of the key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the ApsaraDB for Redis instance.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetBytes(v int64) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Bytes = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetCount(v int64) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Count = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetDb(v int32) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Db = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetEncoding(v string) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Encoding = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetExpirationTimeMillis(v int64) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetKey(v string) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Key = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetNodeId(v string) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.NodeId = &v
	return s
}

func (s *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetType(v string) *CreateCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Type = &v
	return s
}

type CreateCacheAnalysisJobResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCacheAnalysisJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCacheAnalysisJobResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCacheAnalysisJobResponse) GoString() string {
	return s.String()
}

func (s *CreateCacheAnalysisJobResponse) SetHeaders(v map[string]*string) *CreateCacheAnalysisJobResponse {
	s.Headers = v
	return s
}

func (s *CreateCacheAnalysisJobResponse) SetStatusCode(v int32) *CreateCacheAnalysisJobResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCacheAnalysisJobResponse) SetBody(v *CreateCacheAnalysisJobResponseBody) *CreateCacheAnalysisJobResponse {
	s.Body = v
	return s
}

type CreateCloudBenchTasksRequest struct {
	// The total number of stress testing tasks that you want to create. Valid values: **0** to **30**. Default value: **1**.
	Amount *string `json:"Amount,omitempty" xml:"Amount,omitempty"`
	// The ID of the backup set. You can call the [DescribeBackups](~~26273~~) operation to query the ID of the backup set.
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The time when the backup starts. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.
	BackupTime *string `json:"BackupTime,omitempty" xml:"BackupTime,omitempty"`
	// The type of the stress testing client. Valid values:
	//
	// *   **ECS**: indicates that you must create the [DBGateway](~~64905~~).
	// *   **DAS_ECS**: indicates that DAS automatically purchases and deploys an Elastic Compute Service (ECS) instance for stress testing.
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The description of the stress testing task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The endpoint of the destination instance. The specified endpoint must be the endpoint of an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance.
	//
	// >  This parameter takes effect only if you set **DstType** to **ConnectionString**.
	DstConnectionString *string `json:"DstConnectionString,omitempty" xml:"DstConnectionString,omitempty"`
	// The ID of the destination instance. The instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance. You can call the [GetInstanceInspections](~~202857~~) operation to query the ID.
	//
	// >  This parameter must be specified if you set **DstType** to **Instance**.
	DstInstanceId *string `json:"DstInstanceId,omitempty" xml:"DstInstanceId,omitempty"`
	// The port number of the instance that you want to access.
	//
	// >  This parameter takes effect only if you set **DstType** to **ConnectionString**.
	DstPort *string `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	// The name of the privileged account for the destination instance.
	DstSuperAccount *string `json:"DstSuperAccount,omitempty" xml:"DstSuperAccount,omitempty"`
	// The password of the privileged account for the destination instance.
	DstSuperPassword *string `json:"DstSuperPassword,omitempty" xml:"DstSuperPassword,omitempty"`
	// The type of the identifier that is used to indicate the destination instance. Valid values:
	//
	// *   **Instance**: the instance ID. This is the default value.
	// *   **ConnectionString**: the endpoint of the instance.
	DstType *string `json:"DstType,omitempty" xml:"DstType,omitempty"`
	// The specification of the Data Transmission Service (DTS) migration task. You can call the [DescribeCloudbenchTask](~~230669~~) operation to query the specification.
	//
	// >  You must migrate the basic data in the source instance to the destination instance before you start a stress testing task. When you create a DTS migration task, you must specify this parameter.
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The ID of the DTS migration task. You can call the [ConfigureDtsJob](~~208399~~) operation to query the ID.
	//
	// >  After a DTS migration task is created in the DTS console, you must specify this parameter.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The state that specifies the last operation that is performed for the stress testing task. Valid values:
	//
	// *   **WAIT_TARGET**: prepares the destination instance
	// *   **WAIT_DBGATEWAY**: prepares the DBGateway
	// *   **WAIT_SQL**: prepares the full SQL statistics
	// *   **WAIT_LOGIC**: prepares to replay the traffic
	//
	// >  When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task becomes completed.
	EndState *string `json:"EndState,omitempty" xml:"EndState,omitempty"`
	// The ID of the virtual private cloud (VPC) in which the database gateway (DBGateway) is deployed.
	//
	// >  This parameter must be specified if you set **ClientType** to **ECS**.
	GatewayVpcId *string `json:"GatewayVpcId,omitempty" xml:"GatewayVpcId,omitempty"`
	// The IP address or domain name of the DBGateway.
	//
	// >  This parameter must be specified if you set **ClientType** to **ECS**.
	GatewayVpcIp *string `json:"GatewayVpcIp,omitempty" xml:"GatewayVpcIp,omitempty"`
	// The rate at which the traffic captured from the source instance is replayed on the destination instance. The value must be a positive integer. Valid values: **1** to **30**. Default value: **1**.
	Rate *string `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The duration of the stress testing task for which the traffic is captured from the source instance. Unit: milliseconds.
	RequestDuration *string `json:"RequestDuration,omitempty" xml:"RequestDuration,omitempty"`
	// The time when the stress testing task ends. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	RequestEndTime *string `json:"RequestEndTime,omitempty" xml:"RequestEndTime,omitempty"`
	// The time when the stress testing task starts. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	RequestStartTime *string `json:"RequestStartTime,omitempty" xml:"RequestStartTime,omitempty"`
	// The duration within which the traffic generation stressing test takes effect. Unit: milliseconds.
	//
	// >  This parameter must be specified if you set **TaskType** to **smart pressure test**.
	SmartPressureTime *string `json:"SmartPressureTime,omitempty" xml:"SmartPressureTime,omitempty"`
	// The ID of the source instance. The instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance. You can call the [GetInstanceInspections](~~202857~~) operation to query the ID.
	//
	// >  This parameter must be specified if you set **DstType** to **Instance**.
	SrcInstanceId *string `json:"SrcInstanceId,omitempty" xml:"SrcInstanceId,omitempty"`
	// The reserved parameter.
	SrcPublicIp *string `json:"SrcPublicIp,omitempty" xml:"SrcPublicIp,omitempty"`
	// The name of the privileged account for the source instance. Set the value to **admin**.
	//
	// >  This parameter must be specified if you set **DstType** to **Instance**.
	SrcSuperAccount *string `json:"SrcSuperAccount,omitempty" xml:"SrcSuperAccount,omitempty"`
	// The password of the privileged account for the source instance.
	//
	// >  This parameter must be specified if you set **DstType** to **Instance**.
	SrcSuperPassword *string `json:"SrcSuperPassword,omitempty" xml:"SrcSuperPassword,omitempty"`
	// The type of the stress testing task. Valid values:
	//
	// *   **pressure test** (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
	// *   **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The temporary directory generated for stress testing.
	WorkDir *string `json:"WorkDir,omitempty" xml:"WorkDir,omitempty"`
}

func (s CreateCloudBenchTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudBenchTasksRequest) GoString() string {
	return s.String()
}

func (s *CreateCloudBenchTasksRequest) SetAmount(v string) *CreateCloudBenchTasksRequest {
	s.Amount = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetBackupId(v string) *CreateCloudBenchTasksRequest {
	s.BackupId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetBackupTime(v string) *CreateCloudBenchTasksRequest {
	s.BackupTime = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetClientType(v string) *CreateCloudBenchTasksRequest {
	s.ClientType = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDescription(v string) *CreateCloudBenchTasksRequest {
	s.Description = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstConnectionString(v string) *CreateCloudBenchTasksRequest {
	s.DstConnectionString = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstInstanceId(v string) *CreateCloudBenchTasksRequest {
	s.DstInstanceId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstPort(v string) *CreateCloudBenchTasksRequest {
	s.DstPort = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstSuperAccount(v string) *CreateCloudBenchTasksRequest {
	s.DstSuperAccount = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstSuperPassword(v string) *CreateCloudBenchTasksRequest {
	s.DstSuperPassword = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDstType(v string) *CreateCloudBenchTasksRequest {
	s.DstType = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDtsJobClass(v string) *CreateCloudBenchTasksRequest {
	s.DtsJobClass = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetDtsJobId(v string) *CreateCloudBenchTasksRequest {
	s.DtsJobId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetEndState(v string) *CreateCloudBenchTasksRequest {
	s.EndState = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetGatewayVpcId(v string) *CreateCloudBenchTasksRequest {
	s.GatewayVpcId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetGatewayVpcIp(v string) *CreateCloudBenchTasksRequest {
	s.GatewayVpcIp = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetRate(v string) *CreateCloudBenchTasksRequest {
	s.Rate = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetRequestDuration(v string) *CreateCloudBenchTasksRequest {
	s.RequestDuration = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetRequestEndTime(v string) *CreateCloudBenchTasksRequest {
	s.RequestEndTime = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetRequestStartTime(v string) *CreateCloudBenchTasksRequest {
	s.RequestStartTime = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSmartPressureTime(v string) *CreateCloudBenchTasksRequest {
	s.SmartPressureTime = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSrcInstanceId(v string) *CreateCloudBenchTasksRequest {
	s.SrcInstanceId = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSrcPublicIp(v string) *CreateCloudBenchTasksRequest {
	s.SrcPublicIp = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSrcSuperAccount(v string) *CreateCloudBenchTasksRequest {
	s.SrcSuperAccount = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetSrcSuperPassword(v string) *CreateCloudBenchTasksRequest {
	s.SrcSuperPassword = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetTaskType(v string) *CreateCloudBenchTasksRequest {
	s.TaskType = &v
	return s
}

func (s *CreateCloudBenchTasksRequest) SetWorkDir(v string) *CreateCloudBenchTasksRequest {
	s.WorkDir = &v
	return s
}

type CreateCloudBenchTasksResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *CreateCloudBenchTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateCloudBenchTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudBenchTasksResponseBody) GoString() string {
	return s.String()
}

func (s *CreateCloudBenchTasksResponseBody) SetCode(v string) *CreateCloudBenchTasksResponseBody {
	s.Code = &v
	return s
}

func (s *CreateCloudBenchTasksResponseBody) SetData(v *CreateCloudBenchTasksResponseBodyData) *CreateCloudBenchTasksResponseBody {
	s.Data = v
	return s
}

func (s *CreateCloudBenchTasksResponseBody) SetMessage(v string) *CreateCloudBenchTasksResponseBody {
	s.Message = &v
	return s
}

func (s *CreateCloudBenchTasksResponseBody) SetRequestId(v string) *CreateCloudBenchTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateCloudBenchTasksResponseBody) SetSuccess(v string) *CreateCloudBenchTasksResponseBody {
	s.Success = &v
	return s
}

type CreateCloudBenchTasksResponseBodyData struct {
	TaskIds []*string `json:"taskIds,omitempty" xml:"taskIds,omitempty" type:"Repeated"`
}

func (s CreateCloudBenchTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudBenchTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *CreateCloudBenchTasksResponseBodyData) SetTaskIds(v []*string) *CreateCloudBenchTasksResponseBodyData {
	s.TaskIds = v
	return s
}

type CreateCloudBenchTasksResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateCloudBenchTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateCloudBenchTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateCloudBenchTasksResponse) GoString() string {
	return s.String()
}

func (s *CreateCloudBenchTasksResponse) SetHeaders(v map[string]*string) *CreateCloudBenchTasksResponse {
	s.Headers = v
	return s
}

func (s *CreateCloudBenchTasksResponse) SetStatusCode(v int32) *CreateCloudBenchTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateCloudBenchTasksResponse) SetBody(v *CreateCloudBenchTasksResponseBody) *CreateCloudBenchTasksResponse {
	s.Body = v
	return s
}

type CreateDiagnosticReportRequest struct {
	// The instance ID.
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to create the diagnostic report. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be later than the end time.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The beginning of the time range to create the diagnostic report. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s CreateDiagnosticReportRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportRequest) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportRequest) SetDBInstanceId(v string) *CreateDiagnosticReportRequest {
	s.DBInstanceId = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetEndTime(v string) *CreateDiagnosticReportRequest {
	s.EndTime = &v
	return s
}

func (s *CreateDiagnosticReportRequest) SetStartTime(v string) *CreateDiagnosticReportRequest {
	s.StartTime = &v
	return s
}

type CreateDiagnosticReportResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateDiagnosticReportResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponseBody) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponseBody) SetCode(v string) *CreateDiagnosticReportResponseBody {
	s.Code = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetData(v string) *CreateDiagnosticReportResponseBody {
	s.Data = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetMessage(v string) *CreateDiagnosticReportResponseBody {
	s.Message = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetRequestId(v string) *CreateDiagnosticReportResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateDiagnosticReportResponseBody) SetSuccess(v string) *CreateDiagnosticReportResponseBody {
	s.Success = &v
	return s
}

type CreateDiagnosticReportResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateDiagnosticReportResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateDiagnosticReportResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateDiagnosticReportResponse) GoString() string {
	return s.String()
}

func (s *CreateDiagnosticReportResponse) SetHeaders(v map[string]*string) *CreateDiagnosticReportResponse {
	s.Headers = v
	return s
}

func (s *CreateDiagnosticReportResponse) SetStatusCode(v int32) *CreateDiagnosticReportResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateDiagnosticReportResponse) SetBody(v *CreateDiagnosticReportResponseBody) *CreateDiagnosticReportResponse {
	s.Body = v
	return s
}

type CreateKillInstanceSessionTaskRequest struct {
	// The database account that has the permissions to terminate sessions.
	DbUser *string `json:"DbUser,omitempty" xml:"DbUser,omitempty"`
	// The password of the database account.
	DbUserPassword *string `json:"DbUserPassword,omitempty" xml:"DbUserPassword,omitempty"`
	// The account whose sessions do not need to be terminated.
	//
	// >  Set this parameter to a JSON array. Separate database accounts with commas (,). Example: \[\"Database account 1\",\"Database account 2\"].
	IgnoredUsers *string `json:"IgnoredUsers,omitempty" xml:"IgnoredUsers,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// Specifies whether to terminate all sessions.
	//
	// *   **true**
	// *   **false**
	//
	// >  If you set this parameter to **true**, sessions of the accounts that are specified by **IgnoredUsers**, sessions of internal O\&M accounts of Alibaba Cloud, and **Binlog Dump** sessions are not terminated.
	KillAllSessions *bool `json:"KillAllSessions,omitempty" xml:"KillAllSessions,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster. If you do not specify a node ID and set **KillAllSessions** to **true**, the system traverses all nodes in the PolarDB for MySQL cluster and terminates the active sessions on each node.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The IDs of sessions that need to be terminated.
	//
	// >  Set this parameter to a JSON array. Separate session IDs with commas (,). Example: \[\"Session ID1\",\"Session ID2\"]. If **KillAllSessions** is set to **true**, this parameter does not take effect.
	SessionIds *string `json:"SessionIds,omitempty" xml:"SessionIds,omitempty"`
}

func (s CreateKillInstanceSessionTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskRequest) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskRequest) SetDbUser(v string) *CreateKillInstanceSessionTaskRequest {
	s.DbUser = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetDbUserPassword(v string) *CreateKillInstanceSessionTaskRequest {
	s.DbUserPassword = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetIgnoredUsers(v string) *CreateKillInstanceSessionTaskRequest {
	s.IgnoredUsers = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetInstanceId(v string) *CreateKillInstanceSessionTaskRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetKillAllSessions(v bool) *CreateKillInstanceSessionTaskRequest {
	s.KillAllSessions = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetNodeId(v string) *CreateKillInstanceSessionTaskRequest {
	s.NodeId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskRequest) SetSessionIds(v string) *CreateKillInstanceSessionTaskRequest {
	s.SessionIds = &v
	return s
}

type CreateKillInstanceSessionTaskResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The ID of the task that terminated the sessions.
	//
	// >  If the sessions of a PolarDB for MySQL cluster were terminated, **NodeId** is left empty, and **KillAllSessions** is set to **true**, the task IDs are returned based on the number of nodes. Example: \["f77d535b45405bd462b21caa3ee8\*\*\*\*", "e93ab549abb081eb5dcd5396a29b\*\*\*\*"].
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateKillInstanceSessionTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskResponseBody) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetCode(v int64) *CreateKillInstanceSessionTaskResponseBody {
	s.Code = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetData(v string) *CreateKillInstanceSessionTaskResponseBody {
	s.Data = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetMessage(v string) *CreateKillInstanceSessionTaskResponseBody {
	s.Message = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetRequestId(v string) *CreateKillInstanceSessionTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponseBody) SetSuccess(v bool) *CreateKillInstanceSessionTaskResponseBody {
	s.Success = &v
	return s
}

type CreateKillInstanceSessionTaskResponse struct {
	Headers    map[string]*string                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateKillInstanceSessionTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateKillInstanceSessionTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskResponse) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskResponse) SetHeaders(v map[string]*string) *CreateKillInstanceSessionTaskResponse {
	s.Headers = v
	return s
}

func (s *CreateKillInstanceSessionTaskResponse) SetStatusCode(v int32) *CreateKillInstanceSessionTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateKillInstanceSessionTaskResponse) SetBody(v *CreateKillInstanceSessionTaskResponseBody) *CreateKillInstanceSessionTaskResponse {
	s.Body = v
	return s
}

type CreateKillInstanceSessionTaskWithMaintainUserRequest struct {
	IgnoredUsers    *string `json:"IgnoredUsers,omitempty" xml:"IgnoredUsers,omitempty"`
	InstanceId      *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	KillAllSessions *bool   `json:"KillAllSessions,omitempty" xml:"KillAllSessions,omitempty"`
	NodeId          *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	SessionIds      *string `json:"SessionIds,omitempty" xml:"SessionIds,omitempty"`
}

func (s CreateKillInstanceSessionTaskWithMaintainUserRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskWithMaintainUserRequest) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetIgnoredUsers(v string) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.IgnoredUsers = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetInstanceId(v string) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetKillAllSessions(v bool) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.KillAllSessions = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetNodeId(v string) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.NodeId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserRequest) SetSessionIds(v string) *CreateKillInstanceSessionTaskWithMaintainUserRequest {
	s.SessionIds = &v
	return s
}

type CreateKillInstanceSessionTaskWithMaintainUserResponseBody struct {
	Code      *int64  `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateKillInstanceSessionTaskWithMaintainUserResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskWithMaintainUserResponseBody) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetCode(v int64) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.Code = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetData(v string) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.Data = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetMessage(v string) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.Message = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetRequestId(v string) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) SetSuccess(v bool) *CreateKillInstanceSessionTaskWithMaintainUserResponseBody {
	s.Success = &v
	return s
}

type CreateKillInstanceSessionTaskWithMaintainUserResponse struct {
	Headers    map[string]*string                                         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateKillInstanceSessionTaskWithMaintainUserResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateKillInstanceSessionTaskWithMaintainUserResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateKillInstanceSessionTaskWithMaintainUserResponse) GoString() string {
	return s.String()
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponse) SetHeaders(v map[string]*string) *CreateKillInstanceSessionTaskWithMaintainUserResponse {
	s.Headers = v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponse) SetStatusCode(v int32) *CreateKillInstanceSessionTaskWithMaintainUserResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateKillInstanceSessionTaskWithMaintainUserResponse) SetBody(v *CreateKillInstanceSessionTaskWithMaintainUserResponseBody) *CreateKillInstanceSessionTaskWithMaintainUserResponse {
	s.Body = v
	return s
}

type CreateQueryOptimizeTagRequest struct {
	// The remarks.
	//
	// The remarks can be 1 to 300 characters in length.
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// The database engine. Valid values:
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL
	// *   **PolarDBMySQL**: PolarDB for MySQL
	// *   **PostgreSQL**: ApsaraDB RDS for PostgreSQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The SQL template IDs. You can call the [GetQueryOptimizeExecErrorStats](~~405261~~) operation to obtain the SQL template ID. Separate multiple SQL template IDs with commas (,).
	SqlIds *string `json:"SqlIds,omitempty" xml:"SqlIds,omitempty"`
	// The status of **Tags**. Valid values:
	//
	// *   **0**: removes all tags added to the SQL templates that are specified by **SqlIds** and leaves **Tags** empty.
	// *   **1**: adds the tags specified by **Tags** to the SQL templates that are specified by **SqlIds**.
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
	// The SQL tags. Separate multiple SQL tags with commas (,). Valid values:
	//
	// *   **DAS_IMPORTANT**: The SQL template is important.
	// *   **DAS_NOT_IMPORTANT**: The SQL template is unimportant.
	// *   **USER_IGNORE**: The scheduling of the SQL template does not need to be optimized.
	// *   **DAS_IN_PLAN**: The scheduling of the SQL template needs to be optimized.
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s CreateQueryOptimizeTagRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryOptimizeTagRequest) GoString() string {
	return s.String()
}

func (s *CreateQueryOptimizeTagRequest) SetComments(v string) *CreateQueryOptimizeTagRequest {
	s.Comments = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetEngine(v string) *CreateQueryOptimizeTagRequest {
	s.Engine = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetInstanceId(v string) *CreateQueryOptimizeTagRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetSqlIds(v string) *CreateQueryOptimizeTagRequest {
	s.SqlIds = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetStatus(v int32) *CreateQueryOptimizeTagRequest {
	s.Status = &v
	return s
}

func (s *CreateQueryOptimizeTagRequest) SetTags(v string) *CreateQueryOptimizeTagRequest {
	s.Tags = &v
	return s
}

type CreateQueryOptimizeTagResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether the tags were added to the SQL templates.
	//
	// *   **true**
	// *   **false**
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateQueryOptimizeTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryOptimizeTagResponseBody) GoString() string {
	return s.String()
}

func (s *CreateQueryOptimizeTagResponseBody) SetCode(v string) *CreateQueryOptimizeTagResponseBody {
	s.Code = &v
	return s
}

func (s *CreateQueryOptimizeTagResponseBody) SetData(v bool) *CreateQueryOptimizeTagResponseBody {
	s.Data = &v
	return s
}

func (s *CreateQueryOptimizeTagResponseBody) SetMessage(v string) *CreateQueryOptimizeTagResponseBody {
	s.Message = &v
	return s
}

func (s *CreateQueryOptimizeTagResponseBody) SetRequestId(v string) *CreateQueryOptimizeTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateQueryOptimizeTagResponseBody) SetSuccess(v string) *CreateQueryOptimizeTagResponseBody {
	s.Success = &v
	return s
}

type CreateQueryOptimizeTagResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateQueryOptimizeTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateQueryOptimizeTagResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateQueryOptimizeTagResponse) GoString() string {
	return s.String()
}

func (s *CreateQueryOptimizeTagResponse) SetHeaders(v map[string]*string) *CreateQueryOptimizeTagResponse {
	s.Headers = v
	return s
}

func (s *CreateQueryOptimizeTagResponse) SetStatusCode(v int32) *CreateQueryOptimizeTagResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateQueryOptimizeTagResponse) SetBody(v *CreateQueryOptimizeTagResponseBody) *CreateQueryOptimizeTagResponse {
	s.Body = v
	return s
}

type CreateRequestDiagnosisRequest struct {
	// The name of the database.
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified for PolarDB for MySQL, PolarDB for PostgreSQL (Compatible with Oracle), and ApsaraDB for MongoDB instances.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The SQL statement that you want to diagnose.
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
}

func (s CreateRequestDiagnosisRequest) String() string {
	return tea.Prettify(s)
}

func (s CreateRequestDiagnosisRequest) GoString() string {
	return s.String()
}

func (s *CreateRequestDiagnosisRequest) SetDatabase(v string) *CreateRequestDiagnosisRequest {
	s.Database = &v
	return s
}

func (s *CreateRequestDiagnosisRequest) SetInstanceId(v string) *CreateRequestDiagnosisRequest {
	s.InstanceId = &v
	return s
}

func (s *CreateRequestDiagnosisRequest) SetNodeId(v string) *CreateRequestDiagnosisRequest {
	s.NodeId = &v
	return s
}

func (s *CreateRequestDiagnosisRequest) SetSql(v string) *CreateRequestDiagnosisRequest {
	s.Sql = &v
	return s
}

type CreateRequestDiagnosisResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The diagnostics ID, which is the unique identifier of the diagnosis. This parameter can be used to query the result of the diagnosis.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s CreateRequestDiagnosisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s CreateRequestDiagnosisResponseBody) GoString() string {
	return s.String()
}

func (s *CreateRequestDiagnosisResponseBody) SetCode(v string) *CreateRequestDiagnosisResponseBody {
	s.Code = &v
	return s
}

func (s *CreateRequestDiagnosisResponseBody) SetData(v string) *CreateRequestDiagnosisResponseBody {
	s.Data = &v
	return s
}

func (s *CreateRequestDiagnosisResponseBody) SetMessage(v string) *CreateRequestDiagnosisResponseBody {
	s.Message = &v
	return s
}

func (s *CreateRequestDiagnosisResponseBody) SetRequestId(v string) *CreateRequestDiagnosisResponseBody {
	s.RequestId = &v
	return s
}

func (s *CreateRequestDiagnosisResponseBody) SetSuccess(v string) *CreateRequestDiagnosisResponseBody {
	s.Success = &v
	return s
}

type CreateRequestDiagnosisResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *CreateRequestDiagnosisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s CreateRequestDiagnosisResponse) String() string {
	return tea.Prettify(s)
}

func (s CreateRequestDiagnosisResponse) GoString() string {
	return s.String()
}

func (s *CreateRequestDiagnosisResponse) SetHeaders(v map[string]*string) *CreateRequestDiagnosisResponse {
	s.Headers = v
	return s
}

func (s *CreateRequestDiagnosisResponse) SetStatusCode(v int32) *CreateRequestDiagnosisResponse {
	s.StatusCode = &v
	return s
}

func (s *CreateRequestDiagnosisResponse) SetBody(v *CreateRequestDiagnosisResponseBody) *CreateRequestDiagnosisResponse {
	s.Body = v
	return s
}

type DeleteCloudBenchTaskRequest struct {
	// The ID of the stress testing task. You can call the [DescribeCloudBenchTasks](~~230670~~) operation to query the ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DeleteCloudBenchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudBenchTaskRequest) GoString() string {
	return s.String()
}

func (s *DeleteCloudBenchTaskRequest) SetTaskId(v string) *DeleteCloudBenchTaskRequest {
	s.TaskId = &v
	return s
}

type DeleteCloudBenchTaskResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteCloudBenchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudBenchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteCloudBenchTaskResponseBody) SetCode(v string) *DeleteCloudBenchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteCloudBenchTaskResponseBody) SetData(v string) *DeleteCloudBenchTaskResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteCloudBenchTaskResponseBody) SetMessage(v string) *DeleteCloudBenchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteCloudBenchTaskResponseBody) SetRequestId(v string) *DeleteCloudBenchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteCloudBenchTaskResponseBody) SetSuccess(v string) *DeleteCloudBenchTaskResponseBody {
	s.Success = &v
	return s
}

type DeleteCloudBenchTaskResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteCloudBenchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteCloudBenchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteCloudBenchTaskResponse) GoString() string {
	return s.String()
}

func (s *DeleteCloudBenchTaskResponse) SetHeaders(v map[string]*string) *DeleteCloudBenchTaskResponse {
	s.Headers = v
	return s
}

func (s *DeleteCloudBenchTaskResponse) SetStatusCode(v int32) *DeleteCloudBenchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteCloudBenchTaskResponse) SetBody(v *DeleteCloudBenchTaskResponseBody) *DeleteCloudBenchTaskResponse {
	s.Body = v
	return s
}

type DeleteStopGatewayRequest struct {
	// The ID that can uniquely identify the DBGateway. You can obtain the DBGateway ID by calling the [DescribeCloudbenchTask](~~230669~~) operation. The DBGateway ID is the value of the **ClientGatewayId** field in the response.
	GatewayId *string `json:"GatewayId,omitempty" xml:"GatewayId,omitempty"`
}

func (s DeleteStopGatewayRequest) String() string {
	return tea.Prettify(s)
}

func (s DeleteStopGatewayRequest) GoString() string {
	return s.String()
}

func (s *DeleteStopGatewayRequest) SetGatewayId(v string) *DeleteStopGatewayRequest {
	s.GatewayId = &v
	return s
}

type DeleteStopGatewayResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of the DeleteStopGateway operation. Valid values:
	//
	// *   **0**: The metadata of the DBGateway is deleted.
	// *   **-1**: A system error occurs.
	// *   **-2**: The DBGateway does not exist.
	// *   **-3**: The DBGateway is not stopped and the metadata cannot be deleted.
	// *   **-4**: The metadata of the DBGateway fails to be deleted.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DeleteStopGatewayResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DeleteStopGatewayResponseBody) GoString() string {
	return s.String()
}

func (s *DeleteStopGatewayResponseBody) SetCode(v string) *DeleteStopGatewayResponseBody {
	s.Code = &v
	return s
}

func (s *DeleteStopGatewayResponseBody) SetData(v string) *DeleteStopGatewayResponseBody {
	s.Data = &v
	return s
}

func (s *DeleteStopGatewayResponseBody) SetMessage(v string) *DeleteStopGatewayResponseBody {
	s.Message = &v
	return s
}

func (s *DeleteStopGatewayResponseBody) SetRequestId(v string) *DeleteStopGatewayResponseBody {
	s.RequestId = &v
	return s
}

func (s *DeleteStopGatewayResponseBody) SetSuccess(v string) *DeleteStopGatewayResponseBody {
	s.Success = &v
	return s
}

type DeleteStopGatewayResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DeleteStopGatewayResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DeleteStopGatewayResponse) String() string {
	return tea.Prettify(s)
}

func (s DeleteStopGatewayResponse) GoString() string {
	return s.String()
}

func (s *DeleteStopGatewayResponse) SetHeaders(v map[string]*string) *DeleteStopGatewayResponse {
	s.Headers = v
	return s
}

func (s *DeleteStopGatewayResponse) SetStatusCode(v int32) *DeleteStopGatewayResponse {
	s.StatusCode = &v
	return s
}

func (s *DeleteStopGatewayResponse) SetBody(v *DeleteStopGatewayResponseBody) *DeleteStopGatewayResponse {
	s.Body = v
	return s
}

type DescribeAutoScalingConfigRequest struct {
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeAutoScalingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigRequest) SetInstanceId(v string) *DescribeAutoScalingConfigRequest {
	s.InstanceId = &v
	return s
}

type DescribeAutoScalingConfigResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The configurations of the auto scaling feature.
	Data *DescribeAutoScalingConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBody) SetCode(v string) *DescribeAutoScalingConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBody) SetData(v *DescribeAutoScalingConfigResponseBodyData) *DescribeAutoScalingConfigResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBody) SetMessage(v string) *DescribeAutoScalingConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBody) SetRequestId(v string) *DescribeAutoScalingConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBody) SetSuccess(v string) *DescribeAutoScalingConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyData struct {
	// The configurations of the automatic bandwidth adjustment feature.
	Bandwidth *DescribeAutoScalingConfigResponseBodyDataBandwidth `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" type:"Struct"`
	// The configurations of the auto scaling feature for local resources.
	Resource *DescribeAutoScalingConfigResponseBodyDataResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// The configurations of the auto scaling feature for shards.
	Shard *DescribeAutoScalingConfigResponseBodyDataShard `json:"Shard,omitempty" xml:"Shard,omitempty" type:"Struct"`
	// The configurations of the auto scaling feature for specifications.
	Spec *DescribeAutoScalingConfigResponseBodyDataSpec `json:"Spec,omitempty" xml:"Spec,omitempty" type:"Struct"`
	// The configurations of the automatic storage expansion feature.
	Storage *DescribeAutoScalingConfigResponseBodyDataStorage `json:"Storage,omitempty" xml:"Storage,omitempty" type:"Struct"`
}

func (s DescribeAutoScalingConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetBandwidth(v *DescribeAutoScalingConfigResponseBodyDataBandwidth) *DescribeAutoScalingConfigResponseBodyData {
	s.Bandwidth = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetResource(v *DescribeAutoScalingConfigResponseBodyDataResource) *DescribeAutoScalingConfigResponseBodyData {
	s.Resource = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetShard(v *DescribeAutoScalingConfigResponseBodyDataShard) *DescribeAutoScalingConfigResponseBodyData {
	s.Shard = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetSpec(v *DescribeAutoScalingConfigResponseBodyDataSpec) *DescribeAutoScalingConfigResponseBodyData {
	s.Spec = v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyData) SetStorage(v *DescribeAutoScalingConfigResponseBodyDataStorage) *DescribeAutoScalingConfigResponseBodyData {
	s.Storage = v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataBandwidth struct {
	// The average bandwidth usage threshold that triggers automatic bandwidth downgrade. Unit: %.
	BandwidthUsageLowerThreshold *int32 `json:"BandwidthUsageLowerThreshold,omitempty" xml:"BandwidthUsageLowerThreshold,omitempty"`
	// The average bandwidth usage threshold that triggers automatic bandwidth adjustment. Unit: %.
	BandwidthUsageUpperThreshold *int32 `json:"BandwidthUsageUpperThreshold,omitempty" xml:"BandwidthUsageUpperThreshold,omitempty"`
	// Indicates whether the automatic bandwidth downgrade feature is enabled. Valid values:
	//
	// *   **true**
	// *   **false**
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The observation window of the automatic bandwidth adjustment feature. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// *   **s**: seconds.
	// *   **m**: minutes.
	// *   **h**: hours.
	// *   **d**: days.
	//
	// >  A value of **5m** indicates 5 minutes.
	ObservationWindowSize *string `json:"ObservationWindowSize,omitempty" xml:"ObservationWindowSize,omitempty"`
	// Indicates whether the automatic bandwidth adjustment feature is enabled. Valid values:
	//
	// *   **true**
	// *   **false**
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataBandwidth) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataBandwidth) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetBandwidthUsageLowerThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.BandwidthUsageLowerThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetBandwidthUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.BandwidthUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetDowngrade(v bool) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.Downgrade = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.ObservationWindowSize = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataBandwidth) SetUpgrade(v bool) *DescribeAutoScalingConfigResponseBodyDataBandwidth {
	s.Upgrade = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataResource struct {
	// The scale-out step size of CPU.
	CpuStep *int32 `json:"CpuStep,omitempty" xml:"CpuStep,omitempty"`
	// The average CPU utilization threshold that triggers automatic scale-out of local resources. Unit: %.
	CpuUsageUpperThreshold *int32 `json:"CpuUsageUpperThreshold,omitempty" xml:"CpuUsageUpperThreshold,omitempty"`
	// The observation window of the automatic scale-in feature for local resources. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// *   **s**: seconds.
	// *   **m**: minutes.
	// *   **h**: hours.
	// *   **d**: days.
	//
	// >  A value of **5m** indicates 5 minutes.
	DowngradeObservationWindowSize *string `json:"DowngradeObservationWindowSize,omitempty" xml:"DowngradeObservationWindowSize,omitempty"`
	// Indicates whether the auto scaling feature is enabled for local resources. Valid values:
	//
	// *   **true**
	// *   **false**
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// The observation window of the automatic scale-out feature for local resources. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// *   **s**: seconds.
	// *   **m**: minutes.
	// *   **h**: hours.
	// *   **d**: days.
	//
	// >  A value of **5m** indicates 5 minutes.
	UpgradeObservationWindowSize *string `json:"UpgradeObservationWindowSize,omitempty" xml:"UpgradeObservationWindowSize,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataResource) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataResource) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetCpuStep(v int32) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.CpuStep = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetCpuUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.CpuUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetDowngradeObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.DowngradeObservationWindowSize = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetEnable(v bool) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.Enable = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataResource) SetUpgradeObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataResource {
	s.UpgradeObservationWindowSize = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataShard struct {
	// Indicates whether the feature of automatically removing shards is enabled. Valid values:
	//
	// *   **true**
	// *   **false**
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The observation window of the feature of automatically removing shards. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// *   **s**: seconds.
	// *   **m**: minutes.
	// *   **h**: hours.
	// *   **d**: days.
	//
	// >  A value of **1d** indicates one day.
	DowngradeObservationWindowSize *string `json:"DowngradeObservationWindowSize,omitempty" xml:"DowngradeObservationWindowSize,omitempty"`
	// The maximum number of shards in the instance.
	MaxShards *int32 `json:"MaxShards,omitempty" xml:"MaxShards,omitempty"`
	// The average memory usage threshold that triggers automatic removal of shards. Unit: %.
	MemUsageLowerThreshold *int32 `json:"MemUsageLowerThreshold,omitempty" xml:"MemUsageLowerThreshold,omitempty"`
	// The average memory usage threshold that triggers automatic adding of shards. Unit: %.
	MemUsageUpperThreshold *int32 `json:"MemUsageUpperThreshold,omitempty" xml:"MemUsageUpperThreshold,omitempty"`
	// The minimum number of shards in the instance.
	MinShards *int32 `json:"MinShards,omitempty" xml:"MinShards,omitempty"`
	// Indicates whether the feature of automatically adding shards is enabled. Valid values:
	//
	// *   **true**
	// *   **false**
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
	// The observation window of the feature of automatically adding shards. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// *   **s**: seconds.
	// *   **m**: minutes.
	// *   **h**: hours.
	// *   **d**: days.
	//
	// >  A value of **5m** indicates 5 minutes.
	UpgradeObservationWindowSize *string `json:"UpgradeObservationWindowSize,omitempty" xml:"UpgradeObservationWindowSize,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataShard) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataShard) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetDowngrade(v bool) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.Downgrade = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetDowngradeObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.DowngradeObservationWindowSize = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetMaxShards(v int32) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.MaxShards = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetMemUsageLowerThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.MemUsageLowerThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetMemUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.MemUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetMinShards(v int32) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.MinShards = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetUpgrade(v bool) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.Upgrade = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataShard) SetUpgradeObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataShard {
	s.UpgradeObservationWindowSize = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataSpec struct {
	// The quiescent period. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// *   **s**: seconds.
	// *   **m**: minutes.
	// *   **h**: hours.
	// *   **d**: days.
	//
	// >  A value of **5m** indicates 5 minutes.
	CoolDownTime *string `json:"CoolDownTime,omitempty" xml:"CoolDownTime,omitempty"`
	// The average CPU utilization threshold that triggers automatic specification scale-up. Unit: %.
	CpuUsageUpperThreshold *int32 `json:"CpuUsageUpperThreshold,omitempty" xml:"CpuUsageUpperThreshold,omitempty"`
	// Indicates whether the automatic specification scale-down feature is enabled. Valid values:
	//
	// *   **true**
	// *   **false**
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The maximum number of read-only nodes of the instance.
	MaxReadOnlyNodes *int32 `json:"MaxReadOnlyNodes,omitempty" xml:"MaxReadOnlyNodes,omitempty"`
	// The maximum specifications to which the database instance can be upgraded. For more information about the specifications of each type of supported database instances, see the following topics:
	//
	// *   PolarDB for MySQL Cluster Edition instances: [Specifications of compute nodes](~~102542~~).
	// *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or enhanced SSDs (ESSDs): [Specifications](~~276974~~).
	MaxSpec *string `json:"MaxSpec,omitempty" xml:"MaxSpec,omitempty"`
	// The average memory usage threshold that triggers automatic specification scale-up. Unit: %.
	MemUsageUpperThreshold *int32 `json:"MemUsageUpperThreshold,omitempty" xml:"MemUsageUpperThreshold,omitempty"`
	// The observation window. The return value consists of a numeric value and a time unit suffix. Valid values of the time unit suffix:
	//
	// *   **s**: seconds.
	// *   **m**: minutes.
	// *   **h**: hours.
	// *   **d**: days.
	//
	// >  A value of **5m** indicates 5 minutes.
	ObservationWindowSize *string `json:"ObservationWindowSize,omitempty" xml:"ObservationWindowSize,omitempty"`
	// Indicates whether the automatic specification scale-up feature is enabled. Valid values:
	//
	// *   **true**
	// *   **false**
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataSpec) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataSpec) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetCoolDownTime(v string) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.CoolDownTime = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetCpuUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.CpuUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetDowngrade(v bool) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.Downgrade = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetMaxReadOnlyNodes(v int32) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.MaxReadOnlyNodes = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetMaxSpec(v string) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.MaxSpec = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetMemUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.MemUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetObservationWindowSize(v string) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.ObservationWindowSize = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataSpec) SetUpgrade(v bool) *DescribeAutoScalingConfigResponseBodyDataSpec {
	s.Upgrade = &v
	return s
}

type DescribeAutoScalingConfigResponseBodyDataStorage struct {
	// The average storage usage threshold that triggers automatic storage expansion. Unit: %.
	DiskUsageUpperThreshold *int32 `json:"DiskUsageUpperThreshold,omitempty" xml:"DiskUsageUpperThreshold,omitempty"`
	// The maximum storage size. Unit: GB.
	MaxStorage *int32 `json:"MaxStorage,omitempty" xml:"MaxStorage,omitempty"`
	// Indicates whether the automatic storage expansion feature is enabled. Valid values:
	//
	// *   **true**
	// *   **false**
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s DescribeAutoScalingConfigResponseBodyDataStorage) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponseBodyDataStorage) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponseBodyDataStorage) SetDiskUsageUpperThreshold(v int32) *DescribeAutoScalingConfigResponseBodyDataStorage {
	s.DiskUsageUpperThreshold = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataStorage) SetMaxStorage(v int32) *DescribeAutoScalingConfigResponseBodyDataStorage {
	s.MaxStorage = &v
	return s
}

func (s *DescribeAutoScalingConfigResponseBodyDataStorage) SetUpgrade(v bool) *DescribeAutoScalingConfigResponseBodyDataStorage {
	s.Upgrade = &v
	return s
}

type DescribeAutoScalingConfigResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAutoScalingConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoScalingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingConfigResponse) SetHeaders(v map[string]*string) *DescribeAutoScalingConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoScalingConfigResponse) SetStatusCode(v int32) *DescribeAutoScalingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAutoScalingConfigResponse) SetBody(v *DescribeAutoScalingConfigResponseBody) *DescribeAutoScalingConfigResponse {
	s.Body = v
	return s
}

type DescribeAutoScalingHistoryRequest struct {
	// The type of the auto scaling task that you want to query. Set the value to **SPEC**, which indicates that you can query the history of only automatic performance scaling tasks.
	AutoScalingTaskType *string `json:"AutoScalingTaskType,omitempty" xml:"AutoScalingTaskType,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// > The end time must be later than the start time.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	//
	// > Only ApsaraDB RDS for MySQL instances are supported.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// > The maximum time range that can be specified is 45 days.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeAutoScalingHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryRequest) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryRequest) SetAutoScalingTaskType(v string) *DescribeAutoScalingHistoryRequest {
	s.AutoScalingTaskType = &v
	return s
}

func (s *DescribeAutoScalingHistoryRequest) SetEndTime(v int64) *DescribeAutoScalingHistoryRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeAutoScalingHistoryRequest) SetInstanceId(v string) *DescribeAutoScalingHistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeAutoScalingHistoryRequest) SetStartTime(v int64) *DescribeAutoScalingHistoryRequest {
	s.StartTime = &v
	return s
}

type DescribeAutoScalingHistoryResponseBody struct {
	// The HTTP status code returned. The status code 200 indicates that the request was successful.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The history of auto scaling.
	Data *DescribeAutoScalingHistoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// > If the request was successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeAutoScalingHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryResponseBody) SetCode(v string) *DescribeAutoScalingHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBody) SetData(v *DescribeAutoScalingHistoryResponseBodyData) *DescribeAutoScalingHistoryResponseBody {
	s.Data = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBody) SetMessage(v string) *DescribeAutoScalingHistoryResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBody) SetRequestId(v string) *DescribeAutoScalingHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBody) SetSuccess(v string) *DescribeAutoScalingHistoryResponseBody {
	s.Success = &v
	return s
}

type DescribeAutoScalingHistoryResponseBodyData struct {
	// The history of automatic bandwidth scaling of ApsaraDB for Redis instances. This feature is not supported.
	Bandwidth []map[string]interface{} `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" type:"Repeated"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The history of resource scale-out of ApsaraDB for Redis instances. This feature is not supported.
	Resource []map[string]interface{} `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Repeated"`
	// The history of automatic shard scale-out of ApsaraDB for Redis instances. This feature is not supported.
	Shard []map[string]interface{} `json:"Shard,omitempty" xml:"Shard,omitempty" type:"Repeated"`
	// The history of automatic performance scaling.
	SpecHistory []*DescribeAutoScalingHistoryResponseBodyDataSpecHistory `json:"SpecHistory,omitempty" xml:"SpecHistory,omitempty" type:"Repeated"`
	// The history of storage expansion. This feature is not supported.
	Storage []map[string]interface{} `json:"Storage,omitempty" xml:"Storage,omitempty" type:"Repeated"`
}

func (s DescribeAutoScalingHistoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetBandwidth(v []map[string]interface{}) *DescribeAutoScalingHistoryResponseBodyData {
	s.Bandwidth = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetInstanceId(v string) *DescribeAutoScalingHistoryResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetResource(v []map[string]interface{}) *DescribeAutoScalingHistoryResponseBodyData {
	s.Resource = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetShard(v []map[string]interface{}) *DescribeAutoScalingHistoryResponseBodyData {
	s.Shard = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetSpecHistory(v []*DescribeAutoScalingHistoryResponseBodyDataSpecHistory) *DescribeAutoScalingHistoryResponseBodyData {
	s.SpecHistory = v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyData) SetStorage(v []map[string]interface{}) *DescribeAutoScalingHistoryResponseBodyData {
	s.Storage = v
	return s
}

type DescribeAutoScalingHistoryResponseBodyDataSpecHistory struct {
	// The error code returned by the scaling task. Valid values:
	//
	// *   **Insufficient_Balance**: The account has insufficient balance or an unpaid order.
	// *   **REACH_SPEC_UPPERBOUND**: The instance type reaches the upper limit.
	// *   **Control_Error_Timeout_Msg**: The management task timed out.
	// *   **Invoke_Rds_Api_Error_Msg**: Failed to call the ApsaraDB RDS API.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The original number of CPU cores of the instance.
	OriginCore *int32 `json:"OriginCore,omitempty" xml:"OriginCore,omitempty"`
	// The original instance type.
	OriginInstanceClass *string `json:"OriginInstanceClass,omitempty" xml:"OriginInstanceClass,omitempty"`
	// The original memory size of the instance. Unit: GB.
	OriginMemory *float64 `json:"OriginMemory,omitempty" xml:"OriginMemory,omitempty"`
	// The type of the automatic performance scaling task. Valid values:
	//
	// *   **SCALE_UP**: automatic instance type scale-up task.
	// *   **SCALE_DOWN**: automatic instance type scale-down task.
	ScaleType *string `json:"ScaleType,omitempty" xml:"ScaleType,omitempty"`
	// The destination number of CPU cores of the instance.
	TargetCore *int32 `json:"TargetCore,omitempty" xml:"TargetCore,omitempty"`
	// The destination instance type.
	TargetInstanceClass *string `json:"TargetInstanceClass,omitempty" xml:"TargetInstanceClass,omitempty"`
	// The destination memory size of the instance. Unit: GB.
	TargetMemory *float64 `json:"TargetMemory,omitempty" xml:"TargetMemory,omitempty"`
	// The status of the task. Valid values:
	//
	// *   **true**: The task was successful.
	// *   **false**: The task failed.
	TaskExcuteStatus *bool `json:"TaskExcuteStatus,omitempty" xml:"TaskExcuteStatus,omitempty"`
	// The time when the task was run. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	TaskTime *int64 `json:"TaskTime,omitempty" xml:"TaskTime,omitempty"`
}

func (s DescribeAutoScalingHistoryResponseBodyDataSpecHistory) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryResponseBodyDataSpecHistory) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetErrorCode(v string) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.ErrorCode = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetOriginCore(v int32) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.OriginCore = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetOriginInstanceClass(v string) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.OriginInstanceClass = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetOriginMemory(v float64) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.OriginMemory = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetScaleType(v string) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.ScaleType = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTargetCore(v int32) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TargetCore = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTargetInstanceClass(v string) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TargetInstanceClass = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTargetMemory(v float64) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TargetMemory = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTaskExcuteStatus(v bool) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TaskExcuteStatus = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponseBodyDataSpecHistory) SetTaskTime(v int64) *DescribeAutoScalingHistoryResponseBodyDataSpecHistory {
	s.TaskTime = &v
	return s
}

type DescribeAutoScalingHistoryResponse struct {
	Headers    map[string]*string                      `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                  `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeAutoScalingHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeAutoScalingHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeAutoScalingHistoryResponse) GoString() string {
	return s.String()
}

func (s *DescribeAutoScalingHistoryResponse) SetHeaders(v map[string]*string) *DescribeAutoScalingHistoryResponse {
	s.Headers = v
	return s
}

func (s *DescribeAutoScalingHistoryResponse) SetStatusCode(v int32) *DescribeAutoScalingHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeAutoScalingHistoryResponse) SetBody(v *DescribeAutoScalingHistoryResponseBody) *DescribeAutoScalingHistoryResponse {
	s.Body = v
	return s
}

type DescribeCacheAnalysisJobRequest struct {
	// The ID of the instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the cache analysis task. You can obtain the task ID from the response parameters of the [CreateCacheAnalysisJob](~~180982~~) operation.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
}

func (s DescribeCacheAnalysisJobRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobRequest) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobRequest) SetInstanceId(v string) *DescribeCacheAnalysisJobRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCacheAnalysisJobRequest) SetJobId(v string) *DescribeCacheAnalysisJobRequest {
	s.JobId = &v
	return s
}

type DescribeCacheAnalysisJobResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the task.
	Data *DescribeCacheAnalysisJobResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The message that is returned for the request.
	//
	// >  If the request is successful, **Successful** is returned. If the request fails, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the request.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBody) SetCode(v string) *DescribeCacheAnalysisJobResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBody) SetData(v *DescribeCacheAnalysisJobResponseBodyData) *DescribeCacheAnalysisJobResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBody) SetMessage(v string) *DescribeCacheAnalysisJobResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBody) SetRequestId(v string) *DescribeCacheAnalysisJobResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBody) SetSuccess(v string) *DescribeCacheAnalysisJobResponseBody {
	s.Success = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyData struct {
	// The details of the large keys. The returned large keys are sorted in descending order based on the number of bytes occupied by the keys.
	BigKeys *DescribeCacheAnalysisJobResponseBodyDataBigKeys `json:"BigKeys,omitempty" xml:"BigKeys,omitempty" type:"Struct"`
	// The details of the large keys. The returned large keys are sorted in descending order based on the number of keys.
	BigKeysOfNum *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum `json:"BigKeysOfNum,omitempty" xml:"BigKeysOfNum,omitempty" type:"Struct"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the cache analysis task.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The prefixes of the keys.
	KeyPrefixes *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes `json:"KeyPrefixes,omitempty" xml:"KeyPrefixes,omitempty" type:"Struct"`
	// The message that is returned for the request.
	//
	// >  If the request is successful, **Successful** is returned. If the request fails, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The state of the cache analysis task. Valid values:
	//
	// *   **BACKUP**: The data is being backed up.
	// *   **ANALYZING**: The data is being analyzed.
	// *   **FINISHED**: The data is analyzed.
	// *   **FAILED**: An error occurred.
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	// The details of permanent keys. The returned keys are sorted in descending order based on the number of bytes occupied by the keys.
	UnexBigKeysOfBytes *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes `json:"UnexBigKeysOfBytes,omitempty" xml:"UnexBigKeysOfBytes,omitempty" type:"Struct"`
	// The details of permanent keys. The returned keys are sorted in descending order based on the number of keys.
	UnexBigKeysOfNum *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum `json:"UnexBigKeysOfNum,omitempty" xml:"UnexBigKeysOfNum,omitempty" type:"Struct"`
}

func (s DescribeCacheAnalysisJobResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetBigKeys(v *DescribeCacheAnalysisJobResponseBodyDataBigKeys) *DescribeCacheAnalysisJobResponseBodyData {
	s.BigKeys = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetBigKeysOfNum(v *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum) *DescribeCacheAnalysisJobResponseBodyData {
	s.BigKeysOfNum = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetInstanceId(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetJobId(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.JobId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetKeyPrefixes(v *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes) *DescribeCacheAnalysisJobResponseBodyData {
	s.KeyPrefixes = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetMessage(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.Message = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetTaskState(v string) *DescribeCacheAnalysisJobResponseBodyData {
	s.TaskState = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetUnexBigKeysOfBytes(v *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes) *DescribeCacheAnalysisJobResponseBodyData {
	s.UnexBigKeysOfBytes = v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyData) SetUnexBigKeysOfNum(v *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum) *DescribeCacheAnalysisJobResponseBodyData {
	s.UnexBigKeysOfNum = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataBigKeys struct {
	KeyInfo []*DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeys) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeys) SetKeyInfo(v []*DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) *DescribeCacheAnalysisJobResponseBodyDataBigKeys {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo struct {
	// The number of bytes that are occupied by the key.
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The name of the key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum struct {
	KeyInfo []*DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum) SetKeyInfo(v []*DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNum {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo struct {
	// The number of bytes that are occupied by the key.
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The name of the key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataBigKeysOfNumKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes struct {
	Prefix []*DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix `json:"Prefix,omitempty" xml:"Prefix,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes) SetPrefix(v []*DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixes {
	s.Prefix = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix struct {
	// The number of bytes that are occupied by the key.
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The number of keys that contain the prefix.
	KeyNum *int64 `json:"KeyNum,omitempty" xml:"KeyNum,omitempty"`
	// The prefix of the key.
	Prefix *string `json:"Prefix,omitempty" xml:"Prefix,omitempty"`
	// The data type of the instance.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetKeyNum(v int64) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.KeyNum = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetPrefix(v string) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.Prefix = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataKeyPrefixesPrefix {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes struct {
	KeyInfo []*DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes) SetKeyInfo(v []*DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytes {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo struct {
	// The number of bytes that are occupied by the key.
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The name of the key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfBytesKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum struct {
	KeyInfo []*DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum) SetKeyInfo(v []*DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNum {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo struct {
	// The number of bytes that are occupied by the key.
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The name of the key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo) SetType(v string) *DescribeCacheAnalysisJobResponseBodyDataUnexBigKeysOfNumKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCacheAnalysisJobResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCacheAnalysisJobResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobResponse) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobResponse) SetHeaders(v map[string]*string) *DescribeCacheAnalysisJobResponse {
	s.Headers = v
	return s
}

func (s *DescribeCacheAnalysisJobResponse) SetStatusCode(v int32) *DescribeCacheAnalysisJobResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCacheAnalysisJobResponse) SetBody(v *DescribeCacheAnalysisJobResponseBody) *DescribeCacheAnalysisJobResponse {
	s.Body = v
	return s
}

type DescribeCacheAnalysisJobsRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. The value must be an integer that is greater than 0. Default value: 1.
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeCacheAnalysisJobsRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsRequest) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsRequest) SetEndTime(v string) *DescribeCacheAnalysisJobsRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCacheAnalysisJobsRequest) SetInstanceId(v string) *DescribeCacheAnalysisJobsRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsRequest) SetPageNo(v string) *DescribeCacheAnalysisJobsRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeCacheAnalysisJobsRequest) SetPageSize(v string) *DescribeCacheAnalysisJobsRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCacheAnalysisJobsRequest) SetStartTime(v string) *DescribeCacheAnalysisJobsRequest {
	s.StartTime = &v
	return s
}

type DescribeCacheAnalysisJobsResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The list of cache analysis tasks.
	Data *DescribeCacheAnalysisJobsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetCode(v string) *DescribeCacheAnalysisJobsResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetData(v *DescribeCacheAnalysisJobsResponseBodyData) *DescribeCacheAnalysisJobsResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetMessage(v string) *DescribeCacheAnalysisJobsResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetRequestId(v string) *DescribeCacheAnalysisJobsResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBody) SetSuccess(v string) *DescribeCacheAnalysisJobsResponseBody {
	s.Success = &v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyData struct {
	// The reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The ID of the data node on the instance.
	List *DescribeCacheAnalysisJobsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The page number. The value must be an integer that is greater than 0. Default value: 1.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetExtra(v string) *DescribeCacheAnalysisJobsResponseBodyData {
	s.Extra = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetList(v *DescribeCacheAnalysisJobsResponseBodyDataList) *DescribeCacheAnalysisJobsResponseBodyData {
	s.List = v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetPageNo(v int64) *DescribeCacheAnalysisJobsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetPageSize(v int64) *DescribeCacheAnalysisJobsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyData) SetTotal(v int64) *DescribeCacheAnalysisJobsResponseBodyData {
	s.Total = &v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyDataList struct {
	CacheAnalysisJob []*DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob `json:"CacheAnalysisJob,omitempty" xml:"CacheAnalysisJob,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataList) SetCacheAnalysisJob(v []*DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) *DescribeCacheAnalysisJobsResponseBodyDataList {
	s.CacheAnalysisJob = v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob struct {
	// The details about the large keys.
	//
	// > The sub-parameters of this parameter and the content of the sub-parameters are not returned. To query the detailed information about the cache analysis tasks, call the [DescribeCacheAnalysisJob](~~443012~~) operation.
	BigKeys *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys `json:"BigKeys,omitempty" xml:"BigKeys,omitempty" type:"Struct"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the cache analysis task.
	JobId *string `json:"JobId,omitempty" xml:"JobId,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The state of the cache analysis task. Valid values:
	//
	// * **BACKUP**: The data is being backed up.
	// * **ANALYZING**: The data is being analyzed.
	// * **FINISHED**: The data is analyzed.
	// * **FAILED**: An error occurred.
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetBigKeys(v *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.BigKeys = v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetInstanceId(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.InstanceId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetJobId(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.JobId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetMessage(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.Message = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetNodeId(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob) SetTaskState(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJob {
	s.TaskState = &v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys struct {
	KeyInfo []*DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo `json:"KeyInfo,omitempty" xml:"KeyInfo,omitempty" type:"Repeated"`
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys) SetKeyInfo(v []*DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeys {
	s.KeyInfo = v
	return s
}

type DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo struct {
	// The number of bytes that are occupied by the key.
	Bytes *int64 `json:"Bytes,omitempty" xml:"Bytes,omitempty"`
	// The number of elements in the key.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The data type of the key.
	Encoding *string `json:"Encoding,omitempty" xml:"Encoding,omitempty"`
	// The expiration period of the key. Unit: milliseconds. A value of 0 indicates that the key does not expire.
	ExpirationTimeMillis *int64 `json:"ExpirationTimeMillis,omitempty" xml:"ExpirationTimeMillis,omitempty"`
	// The name of the key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The ID of the data node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The data type of the instance.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetBytes(v int64) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Bytes = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetCount(v int64) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Count = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetDb(v int32) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Db = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetEncoding(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Encoding = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetExpirationTimeMillis(v int64) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.ExpirationTimeMillis = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetKey(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Key = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetNodeId(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.NodeId = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo) SetType(v string) *DescribeCacheAnalysisJobsResponseBodyDataListCacheAnalysisJobBigKeysKeyInfo {
	s.Type = &v
	return s
}

type DescribeCacheAnalysisJobsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCacheAnalysisJobsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCacheAnalysisJobsResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCacheAnalysisJobsResponse) GoString() string {
	return s.String()
}

func (s *DescribeCacheAnalysisJobsResponse) SetHeaders(v map[string]*string) *DescribeCacheAnalysisJobsResponse {
	s.Headers = v
	return s
}

func (s *DescribeCacheAnalysisJobsResponse) SetStatusCode(v int32) *DescribeCacheAnalysisJobsResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCacheAnalysisJobsResponse) SetBody(v *DescribeCacheAnalysisJobsResponseBody) *DescribeCacheAnalysisJobsResponse {
	s.Body = v
	return s
}

type DescribeCloudBenchTasksRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be a positive integer. Default value: 10.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the stress testing task. Valid values:
	//
	// *   **SUCCESS**: The task is successful.
	// *   **IGNORED**: The task is ignored.
	// *   **RUNNING**: The task is running.
	// *   **EXCEPTION**: The task is abnormal.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The type of the stress testing task. Valid values:
	//
	// *   **pressure test** (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
	// *   **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s DescribeCloudBenchTasksRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksRequest) SetEndTime(v string) *DescribeCloudBenchTasksRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetPageNo(v string) *DescribeCloudBenchTasksRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetPageSize(v string) *DescribeCloudBenchTasksRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetStartTime(v string) *DescribeCloudBenchTasksRequest {
	s.StartTime = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetStatus(v string) *DescribeCloudBenchTasksRequest {
	s.Status = &v
	return s
}

func (s *DescribeCloudBenchTasksRequest) SetTaskType(v string) *DescribeCloudBenchTasksRequest {
	s.TaskType = &v
	return s
}

type DescribeCloudBenchTasksResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *DescribeCloudBenchTasksResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudBenchTasksResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponseBody) SetCode(v string) *DescribeCloudBenchTasksResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBody) SetData(v *DescribeCloudBenchTasksResponseBodyData) *DescribeCloudBenchTasksResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCloudBenchTasksResponseBody) SetMessage(v string) *DescribeCloudBenchTasksResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBody) SetRequestId(v string) *DescribeCloudBenchTasksResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBody) SetSuccess(v string) *DescribeCloudBenchTasksResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudBenchTasksResponseBodyData struct {
	// The reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The detailed information of the stress testing task.
	List *DescribeCloudBenchTasksResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The page number.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s DescribeCloudBenchTasksResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetExtra(v string) *DescribeCloudBenchTasksResponseBodyData {
	s.Extra = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetList(v *DescribeCloudBenchTasksResponseBodyDataList) *DescribeCloudBenchTasksResponseBodyData {
	s.List = v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetPageNo(v int32) *DescribeCloudBenchTasksResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetPageSize(v int32) *DescribeCloudBenchTasksResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyData) SetTotal(v int64) *DescribeCloudBenchTasksResponseBodyData {
	s.Total = &v
	return s
}

type DescribeCloudBenchTasksResponseBodyDataList struct {
	CloudbenchTasks []*DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks `json:"cloudbenchTasks,omitempty" xml:"cloudbenchTasks,omitempty" type:"Repeated"`
}

func (s DescribeCloudBenchTasksResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponseBodyDataList) SetCloudbenchTasks(v []*DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) *DescribeCloudBenchTasksResponseBodyDataList {
	s.CloudbenchTasks = v
	return s
}

type DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks struct {
	// The archiving task ID.
	ArchiveJobId *string `json:"ArchiveJobId,omitempty" xml:"ArchiveJobId,omitempty"`
	// The name of the table that was archived to Object Storage Service (OSS).
	ArchiveOssTableName *string `json:"ArchiveOssTableName,omitempty" xml:"ArchiveOssTableName,omitempty"`
	// The archiving status of the file that stores the analysis result of full SQL statistics. Valid values:
	//
	// * **0**: The file archiving is not started.
	// * **1**: The file is archived.
	// * **2**: An error occurred.
	// * **3**: The file is being archived.
	// * **4**: The archived file does not need to be downloaded.
	ArchiveState *int32 `json:"ArchiveState,omitempty" xml:"ArchiveState,omitempty"`
	// The ID of the backup set. You can call the [DescribeBackups](~~26273~~) operation to query the ID of the backup set.
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The backup type. Valid values:
	//
	// * **TIMESTAMP**: Data is restored to the state at a specific point in time.
	// * **BACKUPID**: Data is restored from a backup set that is identified by an ID.
	BackupType *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
	// The substep in the stress testing task. Valid values:
	//
	// * **NEW**: Initialize the stress testing task.
	// * **WAIT_BUY_ECS**: Purchase an ECS instance.
	// * **WAIT_START_ECS**: Start the ECS instance.
	// * **WAIT_INSTALL_JDK**: Install the Java Development Kit (JDK).
	// * **WAIT_INSTALL_DBGATEWAY**: Install the database gateway (DBGateway).
	// * **ADD_SECURITY_IPS_STEP**: Configure the whitelist of the security group.
	// * **ARCHIVIE**: Archive the file that stores the analysis results of full SQL statistics.
	// * **DOWNLOAD**: Download the file that stores the analysis result of full SQL statistics.
	// * **PROCEED**: Preprocess the file that stores the analysis result of full SQL statistics.
	// * **PRE_LOAD**: Preload the file that stores the analysis result of full SQL statistics.
	// * **VALIDATE**: Verify the functionality of stress testing.
	// * **PRESSURE**: Start the stress testing task.
	BenchStep *string `json:"BenchStep,omitempty" xml:"BenchStep,omitempty"`
	// The status that indicates the substep performed for the stress testing task. Valid values:
	//
	// * **NEW**: The task is being initialized.
	// * **RUNNING**: The task is running.
	// * **FAILED**: The task failed.
	// * **FINISHED**: The task is complete.
	// * **Terminated**: The task is terminated.
	// * **Deleted**: The task is deleted.
	BenchStepStatus *string `json:"BenchStepStatus,omitempty" xml:"BenchStepStatus,omitempty"`
	// The DBGateway ID of the stress testing client.
	ClientGatewayId *string `json:"ClientGatewayId,omitempty" xml:"ClientGatewayId,omitempty"`
	// The type of the stress testing client. Valid values:
	//
	// * **ECS**: indicates that you must prepare the DBGateway.
	// * **DAS_ECS**: indicates that DAS automatically purchases and deploys an ECS instance for stress testing.
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The description of the stress testing task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The UUID of the destination instance.
	DstInstanceUuid *string `json:"DstInstanceUuid,omitempty" xml:"DstInstanceUuid,omitempty"`
	// The reserved parameter.
	DstIp *string `json:"DstIp,omitempty" xml:"DstIp,omitempty"`
	// The port number of the destination instance.
	DstPort *int32 `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	// The type of the identifier that is used to indicate the destination instance. Valid values:
	//
	// * **Instance** (default): the instance ID.
	// * **ConnectionString**: the endpoint of the instance.
	DstType *string `json:"DstType,omitempty" xml:"DstType,omitempty"`
	// The specification of the DTS instance.
	//
	// > For more information about the specifications of DTS instances and the test performance of each instance, see [Specifications of data migration instances](~~26606~~).
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The ID of the DTS migration task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the Data Transmission Service (DTS) migration task.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The status of the DTS migration task. Valid values:
	//
	// * **NOT_STARTED**: The task is not started.
	// * **PRE_CHECKING**: The task is in precheck.
	// * **PRE_CHECK_FAILED**: The precheck failed.
	// * **CHECKING**: The task is being checked.
	// * **MIGRATING**: The data is being migrated.
	// * **CATCHED**: The data is migrated from the source instance to the destination instance.
	// * **SUSPENDING**: The task is suspended.
	// * **MIGRATION_FAILED**: The data failed to be migrated.
	// * **FINISHED**: The task is complete.
	// * **INITIALIZING**: The synchronization is being initialized.
	// * **INITIALIZE_FAILED**: The synchronization failed to be initialized.
	// * **SYNCHRONIZING**: The data is being synchronized.
	// * **MODIFYING**: The roles of the instances are being changed.
	// * **SWITCHING**: The roles of the instances are being switched.
	// * **FAILED**: The task failed.
	DtsJobState *int32 `json:"DtsJobState,omitempty" xml:"DtsJobState,omitempty"`
	// The status of the DTS migration task. Valid values:
	//
	// * **NOT_STARTED**: The task is not started.
	// * **PRE_CHECKING**: The task is in precheck.
	// * **PRE_CHECK_FAILED**: The precheck failed.
	// * **CHECKING**: The task is being checked.
	// * **MIGRATING**: The data is being migrated.
	// * **CATCHED**: The data is migrated from the source instance to the destination instance.
	// * **SUSPENDING**: The task is suspended.
	// * **MIGRATION_FAILED**: The data failed to be migrated.
	// * **FINISHED**: The task is complete.
	// * **INITIALIZING**: The synchronization is being initialized.
	// * **INITIALIZE_FAILED**: The synchronization failed to be initialized.
	// * **SYNCHRONIZING**: The data is being synchronized.
	// * **MODIFYING**: The roles of the instances are being changed.
	// * **SWITCHING**: The roles of the instances are being switched.
	// * **FAILED**: The task failed.
	DtsJobStatus *string `json:"DtsJobStatus,omitempty" xml:"DtsJobStatus,omitempty"`
	// The ID of the Elastic Compute Service (ECS) instance.
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	// The state that indicates the last operation performed for the stress testing task. Valid values:
	//
	// * **WAIT_TARGET**: prepares the destination instance.
	// * **WAIT_DBGATEWAY**: prepares the DBGateway.
	// * **WAIT_SQL**: prepares the full SQL statistics.
	// * **WAIT_LOGIC**: prepares to replay the traffic.
	//
	// > When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task is complete.
	EndState *string `json:"EndState,omitempty" xml:"EndState,omitempty"`
	// The error code returned for the substep of the stress testing task.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the task failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The additional information.
	External *string `json:"External,omitempty" xml:"External,omitempty"`
	// The rate at which the stress testing task replayed the traffic. This value is a positive integer. Valid values: **0** to **30**. Default value: **1**.
	Rate *int32 `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The duration of the stress testing task. Unit: millisecond.
	RequestDuration *int64 `json:"RequestDuration,omitempty" xml:"RequestDuration,omitempty"`
	// The duration of the stress testing task of the smart pressure test type. Unit: millisecond.
	SmartPressureTime *int32 `json:"SmartPressureTime,omitempty" xml:"SmartPressureTime,omitempty"`
	// The source of the task. Valid values:
	//
	// * **DAS**
	// * **OPEN_API**
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The reused information about the analysis result of full SQL statistics.
	SqlCompleteReuse *string `json:"SqlCompleteReuse,omitempty" xml:"SqlCompleteReuse,omitempty"`
	// The database engine of the source instance. Valid values:
	SrcInstanceArea *string `json:"SrcInstanceArea,omitempty" xml:"SrcInstanceArea,omitempty"`
	// The UUID of the source instance.
	SrcInstanceUuid *string `json:"SrcInstanceUuid,omitempty" xml:"SrcInstanceUuid,omitempty"`
	// The reserved parameter.
	SrcPublicIp *string `json:"SrcPublicIp,omitempty" xml:"SrcPublicIp,omitempty"`
	// The state that indicates the operation performed for the stress testing task. Valid values:
	//
	// * **WAIT_TARGET**: prepares the destination instance.
	// * **WAIT_DBGATEWAY**: prepares the DBGateway.
	// * **WAIT_SQL**: prepares the full SQL statistics.
	// * **WAIT_LOGIC**: prepares to replay the traffic.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The status of the stress testing task. Valid values:
	//
	// * **SUCCESS**: The task was successful.
	// * **IGNORED**: The task was ignored.
	// * **RUNNING**: The task is running.
	// * **EXCEPTION**: The task is abnormal.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the table that is used for stress testing.
	TableSchema *string `json:"TableSchema,omitempty" xml:"TableSchema,omitempty"`
	// The task ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the stress testing task. Valid values:
	//
	// * **pressure test** (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
	// * **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The topic that contains the consumed data. This topic is a topic in Message Queue for Apache Kafka.
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// The Alibaba Cloud account ID.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The version of the stress testing task. Valid values:
	//
	// * **V2.0**
	// * **V3.0**
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
	// The path of the temporary directory that is generated for stress testing.
	WorkDir *string `json:"WorkDir,omitempty" xml:"WorkDir,omitempty"`
}

func (s DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetArchiveJobId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ArchiveJobId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetArchiveOssTableName(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ArchiveOssTableName = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetArchiveState(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ArchiveState = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetBackupId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.BackupId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetBackupType(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.BackupType = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetBenchStep(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.BenchStep = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetBenchStepStatus(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.BenchStepStatus = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetClientGatewayId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ClientGatewayId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetClientType(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ClientType = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDescription(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Description = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDstInstanceUuid(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DstInstanceUuid = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDstIp(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DstIp = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDstPort(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DstPort = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDstType(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DstType = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobClass(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobName(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobName = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobState(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobState = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetDtsJobStatus(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.DtsJobStatus = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetEcsInstanceId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.EcsInstanceId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetEndState(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.EndState = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetErrorCode(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetErrorMessage(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetExternal(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.External = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetRate(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Rate = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetRequestDuration(v int64) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.RequestDuration = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSmartPressureTime(v int32) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SmartPressureTime = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSource(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Source = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSqlCompleteReuse(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SqlCompleteReuse = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSrcInstanceArea(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SrcInstanceArea = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSrcInstanceUuid(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SrcInstanceUuid = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetSrcPublicIp(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.SrcPublicIp = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetState(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.State = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetStatus(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Status = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetTableSchema(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.TableSchema = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetTaskId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.TaskId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetTaskType(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.TaskType = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetTopic(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Topic = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetUserId(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.UserId = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetVersion(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.Version = &v
	return s
}

func (s *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks) SetWorkDir(v string) *DescribeCloudBenchTasksResponseBodyDataListCloudbenchTasks {
	s.WorkDir = &v
	return s
}

type DescribeCloudBenchTasksResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCloudBenchTasksResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudBenchTasksResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudBenchTasksResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudBenchTasksResponse) SetHeaders(v map[string]*string) *DescribeCloudBenchTasksResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudBenchTasksResponse) SetStatusCode(v int32) *DescribeCloudBenchTasksResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudBenchTasksResponse) SetBody(v *DescribeCloudBenchTasksResponseBody) *DescribeCloudBenchTasksResponse {
	s.Body = v
	return s
}

type DescribeCloudbenchTaskRequest struct {
	// The ID of the stress testing task. You can call the [DescribeCloudBenchTasks](~~230670~~) operation to query the ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeCloudbenchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskRequest) SetTaskId(v string) *DescribeCloudbenchTaskRequest {
	s.TaskId = &v
	return s
}

type DescribeCloudbenchTaskResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *DescribeCloudbenchTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudbenchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskResponseBody) SetCode(v string) *DescribeCloudbenchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBody) SetData(v *DescribeCloudbenchTaskResponseBodyData) *DescribeCloudbenchTaskResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCloudbenchTaskResponseBody) SetMessage(v string) *DescribeCloudbenchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBody) SetRequestId(v string) *DescribeCloudbenchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBody) SetSuccess(v string) *DescribeCloudbenchTaskResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudbenchTaskResponseBodyData struct {
	// The ID of the archiving task.
	ArchiveJobId *string `json:"ArchiveJobId,omitempty" xml:"ArchiveJobId,omitempty"`
	// The name of the table that was archived to Object Storage Service (OSS).
	ArchiveOssTableName *string `json:"ArchiveOssTableName,omitempty" xml:"ArchiveOssTableName,omitempty"`
	// The archiving state of the file that stores the analysis result of full SQL statistics. Valid values:
	//
	// *   **0**: The file archiving is not started.
	// *   **1**: The file is archived.
	// *   **2**: An error occurred.
	// *   **3**: The file is being archived.
	// *   **4**: The archived file does not need to be downloaded.
	ArchiveState *int32 `json:"ArchiveState,omitempty" xml:"ArchiveState,omitempty"`
	// The ID of the backup set. You can call the [DescribeBackups](~~26273~~) operation to query the ID of the backup set.
	BackupId *string `json:"BackupId,omitempty" xml:"BackupId,omitempty"`
	// The backup type. Valid values:
	//
	// *   **TIMESTAMP**
	// *   **BACKUPID**
	BackupType *string `json:"BackupType,omitempty" xml:"BackupType,omitempty"`
	// The substep in the stress testing task. Valid values:
	//
	// *   **NEW**: initializes the stress testing task.
	// *   **WAIT_BUY_ECS**: purchases an ECS instance.
	// *   **WAIT_START_ECS**: starts an ECS instance.
	// *   **WAIT_INSTALL_JDK**: installs the Java Development Kit (JDK).
	// *   **WAIT_INSTALL_DBGATEWAY**: installs the database gateway (DBGateway).
	// *   **ADD_SECURITY_IPS_STEP**: configure a security group whitelist.
	// *   **ARCHIVE**: archives the full SQL statistics.
	// *   **DOWNLOAD**: downloads the file that stores the analysis result of full SQL statistics.
	// *   **PROCEED**: preprocesses the file that stores the analysis result of full SQL statistics.
	// *   **PRE_LOAD**: preloads the file that stores the analysis result of full SQL statistics.
	// *   **VALIDATE**: verifies the functionality of stress testing.
	// *   **PRESSURE**: starts the stress testing task.
	BenchStep *string `json:"BenchStep,omitempty" xml:"BenchStep,omitempty"`
	// The status that indicates the substep performed on the stress testing task. Valid values:
	//
	// *   **NEW**: The task is being initialized.
	// *   **RUNNING**: The task is running.
	// *   **FAILED**: The task failed.
	// *   **FINISHED**: The task is complete.
	// *   **Terminated**: The task is terminated.
	// *   **Deleted**: The task is deleted.
	BenchStepStatus *string `json:"BenchStepStatus,omitempty" xml:"BenchStepStatus,omitempty"`
	// The DBGateway ID of the stress testing client.
	ClientGatewayId *string `json:"ClientGatewayId,omitempty" xml:"ClientGatewayId,omitempty"`
	// The type of the stress testing client. Valid values:
	//
	// *   **ECS**: indicates that you must create the [DBGateway](~~64905~~).
	// *   **DAS_ECS**: indicates that DAS automatically purchases and deploys an ECS instance for stress testing.
	ClientType *string `json:"ClientType,omitempty" xml:"ClientType,omitempty"`
	// The description of the stress testing task.
	Description *string `json:"Description,omitempty" xml:"Description,omitempty"`
	// The UUID of the destination instance.
	DstInstanceUuid *string `json:"DstInstanceUuid,omitempty" xml:"DstInstanceUuid,omitempty"`
	// The reserved parameter.
	DstIp *string `json:"DstIp,omitempty" xml:"DstIp,omitempty"`
	// The port number of the destination instance.
	DstPort *int32 `json:"DstPort,omitempty" xml:"DstPort,omitempty"`
	// The type of the identifier that is used to indicate the destination instance. Valid values:
	//
	// *   **Instance** (default): the instance ID.
	// *   **ConnectionString**: the endpoint of the instance.
	DstType *string `json:"DstType,omitempty" xml:"DstType,omitempty"`
	// The specification of the DTS task.
	DtsJobClass *string `json:"DtsJobClass,omitempty" xml:"DtsJobClass,omitempty"`
	// The ID of the DTS migration task.
	DtsJobId *string `json:"DtsJobId,omitempty" xml:"DtsJobId,omitempty"`
	// The name of the Data Transmission Service (DTS) task.
	DtsJobName *string `json:"DtsJobName,omitempty" xml:"DtsJobName,omitempty"`
	// The state of the DTS task. Valid values:
	//
	// *   **NOT_STARTED**: The task is not started.
	// *   **PRE_CHECKING**: The task is in precheck.
	// *   **PRE_CHECK_FAILED**: The precheck failed.
	// *   **CHECKING**: The task is being checked.
	// *   **MIGRATING**: The data is being migrated.
	// *   **CATCHED**: The data is migrated from the source instance to the destination instance.
	// *   **SUSPENDING**: The task is suspended.
	// *   **MIGRATION_FAILED**: The data failed to be migrated.
	// *   **FINISHED**: The task is complete.
	// *   **INITIALIZING**: The synchronization is being initialized.
	// *   **INITIALIZE_FAILED**: The synchronization failed to be initialized.
	// *   **SYNCHRONIZING**: The data is being synchronized.
	// *   **MODIFYING**: The objects to be synchronized are being changed.
	// *   **SWITCHING**: The roles of the instances are being switched.
	// *   **FAILED**: The task failed.
	DtsJobState *int32 `json:"DtsJobState,omitempty" xml:"DtsJobState,omitempty"`
	// The state of the DTS task. Valid values:
	//
	// *   **NOT_STARTED**: The task is not started.
	// *   **PRE_CHECKING**: The task is in precheck.
	// *   **PRE_CHECK_FAILED**: The precheck failed.
	// *   **CHECKING**: The task is being checked.
	// *   **MIGRATING**: The data is being migrated.
	// *   **CATCHED**: The data is migrated from the source instance to the destination instance.
	// *   **SUSPENDING**: The task is suspended.
	// *   **MIGRATION_FAILED**: The data failed to be migrated.
	// *   **FINISHED**: The task is complete.
	// *   **INITIALIZING**: The synchronization is being initialized.
	// *   **INITIALIZE_FAILED**: The synchronization failed to be initialized.
	// *   **SYNCHRONIZING**: The data is being synchronized.
	// *   **MODIFYING**: The objects to be synchronized are being changed.
	// *   **SWITCHING**: The roles of the instances are being switched.
	// *   **FAILED**: The task failed.
	DtsJobStatus *string `json:"DtsJobStatus,omitempty" xml:"DtsJobStatus,omitempty"`
	// The ID of the Elastic Compute Service (ECS) instance.
	EcsInstanceId *string `json:"EcsInstanceId,omitempty" xml:"EcsInstanceId,omitempty"`
	// The state that specifies the last operation that is performed for the stress testing task. Valid values:
	//
	// *   **WAIT_TARGET**: prepares the destination instance.
	// *   **WAIT_DBGATEWAY**: prepares the DBGateway.
	// *   **WAIT_SQL**: prepares the full SQL statistics.
	// *   **WAIT_LOGIC**: prepares to replay the traffic.
	//
	// >  When the state of a stress testing task changes to the state that is specified by the EndState parameter, the stress testing task becomes completed.
	EndState *string `json:"EndState,omitempty" xml:"EndState,omitempty"`
	// The error code returned for the substep of the stress testing task.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message returned if the request failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The additional information.
	External *string `json:"External,omitempty" xml:"External,omitempty"`
	// The rate at which the stress testing task replayed the traffic. The value is a positive integer. Valid values:**1** to **30**. Default value: **1**.
	Rate *int64 `json:"Rate,omitempty" xml:"Rate,omitempty"`
	// The duration of the stress testing task for which traffic was captured from the source instance.
	RequestDuration *int64 `json:"RequestDuration,omitempty" xml:"RequestDuration,omitempty"`
	// The duration of the stress testing task for which the traffic was generated on the destination instance. Unit: milliseconds.
	SmartPressureTime *int32 `json:"SmartPressureTime,omitempty" xml:"SmartPressureTime,omitempty"`
	// The source of the task. Valid values:
	//
	// *   **DAS**
	// *   **OPEN_API**
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The reuse information about the analysis result of full SQL statistics.
	SqlCompleteReuse *string `json:"SqlCompleteReuse,omitempty" xml:"SqlCompleteReuse,omitempty"`
	// The database type of the source instance. Valid values:
	SrcInstanceArea *string `json:"SrcInstanceArea,omitempty" xml:"SrcInstanceArea,omitempty"`
	// The UUID of the source instance.
	SrcInstanceUuid *string `json:"SrcInstanceUuid,omitempty" xml:"SrcInstanceUuid,omitempty"`
	// The reserved parameter.
	SrcPublicIp *string `json:"SrcPublicIp,omitempty" xml:"SrcPublicIp,omitempty"`
	// The state that indicates the operation performed for the stress testing task. Valid values:
	//
	// *   **WAIT_TARGET**: prepares the destination instance.
	// *   **WAIT_DBGATEWAY**: prepares the DBGateway.
	// *   **WAIT_SQL**: prepares the full SQL statistics.
	// *   **WAIT_LOGIC**: prepares to replay the traffic.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The state of the stress testing task. Valid values:
	//
	// *   **SUCCESS**: The task is successful.
	// *   **IGNORED**: The task is ignored.
	// *   **RUNNING**: The task is running.
	// *   **EXCEPTION**: An error occurred.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The name of the table that is used for stress testing.
	TableSchema *string `json:"TableSchema,omitempty" xml:"TableSchema,omitempty"`
	// The task ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The type of the stress testing task. Valid values:
	//
	// *   **pressure test** (default): A task of this type replays the traffic that is captured from the source instance on the destination instance at the maximum playback rate that is supported by the destination instance.
	// *   **smart pressure test**: A task of this type analyzes the traffic that is captured from the source instance over a short period of time and generates traffic on the destination instance for continuous stress testing. The business model based on which the traffic is generated on the destination instance and the traffic distribution are consistent with those on the source instance. Stress testing tasks of this type can help you reduce the amount of time that is consumed to collect data from the source instance and reduce storage costs and performance overheads.
	TaskType *string `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
	// The topic that contains the consumed data. This topic is a topic in Message Queue for Apache Kafka.
	Topic *string `json:"Topic,omitempty" xml:"Topic,omitempty"`
	// The ID of the Alibaba Cloud account.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The version of the stress testing task. Valid values:
	//
	// *   **V2.0**
	// *   **V3.0**
	Version *string `json:"Version,omitempty" xml:"Version,omitempty"`
	// The temporary directory generated for stress testing.
	WorkDir *string `json:"WorkDir,omitempty" xml:"WorkDir,omitempty"`
}

func (s DescribeCloudbenchTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetArchiveJobId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ArchiveJobId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetArchiveOssTableName(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ArchiveOssTableName = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetArchiveState(v int32) *DescribeCloudbenchTaskResponseBodyData {
	s.ArchiveState = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetBackupId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.BackupId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetBackupType(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.BackupType = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetBenchStep(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.BenchStep = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetBenchStepStatus(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.BenchStepStatus = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetClientGatewayId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ClientGatewayId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetClientType(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ClientType = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDescription(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Description = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDstInstanceUuid(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DstInstanceUuid = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDstIp(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DstIp = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDstPort(v int32) *DescribeCloudbenchTaskResponseBodyData {
	s.DstPort = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDstType(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DstType = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobClass(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobClass = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobName(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobName = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobState(v int32) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobState = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetDtsJobStatus(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.DtsJobStatus = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetEcsInstanceId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.EcsInstanceId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetEndState(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.EndState = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetErrorCode(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetErrorMessage(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.ErrorMessage = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetExternal(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.External = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetRate(v int64) *DescribeCloudbenchTaskResponseBodyData {
	s.Rate = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetRequestDuration(v int64) *DescribeCloudbenchTaskResponseBodyData {
	s.RequestDuration = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSmartPressureTime(v int32) *DescribeCloudbenchTaskResponseBodyData {
	s.SmartPressureTime = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSource(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Source = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSqlCompleteReuse(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.SqlCompleteReuse = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSrcInstanceArea(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.SrcInstanceArea = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSrcInstanceUuid(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.SrcInstanceUuid = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetSrcPublicIp(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.SrcPublicIp = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetState(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.State = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetStatus(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetTableSchema(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.TableSchema = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetTaskId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetTaskType(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.TaskType = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetTopic(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Topic = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetUserId(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.UserId = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetVersion(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.Version = &v
	return s
}

func (s *DescribeCloudbenchTaskResponseBodyData) SetWorkDir(v string) *DescribeCloudbenchTaskResponseBodyData {
	s.WorkDir = &v
	return s
}

type DescribeCloudbenchTaskResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCloudbenchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudbenchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskResponse) SetHeaders(v map[string]*string) *DescribeCloudbenchTaskResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudbenchTaskResponse) SetStatusCode(v int32) *DescribeCloudbenchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudbenchTaskResponse) SetBody(v *DescribeCloudbenchTaskResponseBody) *DescribeCloudbenchTaskResponse {
	s.Body = v
	return s
}

type DescribeCloudbenchTaskConfigRequest struct {
	// The task ID. You can call the [DescribeCloudBenchTasks](~~230670~~) operation to query the task ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s DescribeCloudbenchTaskConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskConfigRequest) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskConfigRequest) SetTaskId(v string) *DescribeCloudbenchTaskConfigRequest {
	s.TaskId = &v
	return s
}

type DescribeCloudbenchTaskConfigResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *DescribeCloudbenchTaskConfigResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeCloudbenchTaskConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetCode(v string) *DescribeCloudbenchTaskConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetData(v *DescribeCloudbenchTaskConfigResponseBodyData) *DescribeCloudbenchTaskConfigResponseBody {
	s.Data = v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetMessage(v string) *DescribeCloudbenchTaskConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetRequestId(v string) *DescribeCloudbenchTaskConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBody) SetSuccess(v string) *DescribeCloudbenchTaskConfigResponseBody {
	s.Success = &v
	return s
}

type DescribeCloudbenchTaskConfigResponseBodyData struct {
	// The path in which the files are archived.
	ArchiveFolder *string `json:"ArchiveFolder,omitempty" xml:"ArchiveFolder,omitempty"`
	// The command that was run to start the stress testing task.
	BenchCmd *string `json:"BenchCmd,omitempty" xml:"BenchCmd,omitempty"`
	// The path to the JAR file that is used for stress testing.
	ClientJarPath *string `json:"ClientJarPath,omitempty" xml:"ClientJarPath,omitempty"`
	// The path to the JAR file that is stored in OSS. The JAR file is used for stress testing.
	JarOnOss *string `json:"JarOnOss,omitempty" xml:"JarOnOss,omitempty"`
	// The command that was run to preload the file that stores the analysis result of full SQL statistics.
	LoadCmd *string `json:"LoadCmd,omitempty" xml:"LoadCmd,omitempty"`
	// The name of the metadata file.
	MetaFileName *string `json:"MetaFileName,omitempty" xml:"MetaFileName,omitempty"`
	// The name of the metadata file stored in Object Storage Service (OSS).
	MetaFileOnOss *string `json:"MetaFileOnOss,omitempty" xml:"MetaFileOnOss,omitempty"`
	// The path to the metadata file.
	MetaFilePath *string `json:"MetaFilePath,omitempty" xml:"MetaFilePath,omitempty"`
	// The command that was run to parse the file that stores the analysis result of full SQL statistics.
	ParseCmd *string `json:"ParseCmd,omitempty" xml:"ParseCmd,omitempty"`
	// The path to the file that is parsed. The file stores the analysis result of full SQL statistics.
	ParseFilePath *string `json:"ParseFilePath,omitempty" xml:"ParseFilePath,omitempty"`
	// The location where the RocksDB storage system is deployed in the stress testing client.
	RocksDbPath *string `json:"RocksDbPath,omitempty" xml:"RocksDbPath,omitempty"`
	// The name of the file that stores the analysis result of full SQL statistics.
	SqlFileName *string `json:"SqlFileName,omitempty" xml:"SqlFileName,omitempty"`
	// The name of the file that stores the analysis result of full SQL statistics and that is stored in OSS.
	SqlFileOnOss *string `json:"SqlFileOnOss,omitempty" xml:"SqlFileOnOss,omitempty"`
	// The path to the file that stores the analysis result of full SQL statistics.
	SqlFilePath *string `json:"SqlFilePath,omitempty" xml:"SqlFilePath,omitempty"`
	// The task ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The Alibaba Cloud account ID.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The path of the temporary directory that is generated for stress testing.
	WorkDir *string `json:"WorkDir,omitempty" xml:"WorkDir,omitempty"`
}

func (s DescribeCloudbenchTaskConfigResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskConfigResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetArchiveFolder(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.ArchiveFolder = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetBenchCmd(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.BenchCmd = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetClientJarPath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.ClientJarPath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetJarOnOss(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.JarOnOss = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetLoadCmd(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.LoadCmd = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetMetaFileName(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.MetaFileName = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetMetaFileOnOss(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.MetaFileOnOss = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetMetaFilePath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.MetaFilePath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetParseCmd(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.ParseCmd = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetParseFilePath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.ParseFilePath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetRocksDbPath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.RocksDbPath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetSqlFileName(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.SqlFileName = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetSqlFileOnOss(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.SqlFileOnOss = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetSqlFilePath(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.SqlFilePath = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetTaskId(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetUserId(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.UserId = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponseBodyData) SetWorkDir(v string) *DescribeCloudbenchTaskConfigResponseBodyData {
	s.WorkDir = &v
	return s
}

type DescribeCloudbenchTaskConfigResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeCloudbenchTaskConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeCloudbenchTaskConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeCloudbenchTaskConfigResponse) GoString() string {
	return s.String()
}

func (s *DescribeCloudbenchTaskConfigResponse) SetHeaders(v map[string]*string) *DescribeCloudbenchTaskConfigResponse {
	s.Headers = v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponse) SetStatusCode(v int32) *DescribeCloudbenchTaskConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeCloudbenchTaskConfigResponse) SetBody(v *DescribeCloudbenchTaskConfigResponseBody) *DescribeCloudbenchTaskConfigResponse {
	s.Body = v
	return s
}

type DescribeDiagnosticReportListRequest struct {
	// The instance ID.
	DBInstanceId *string `json:"DBInstanceId,omitempty" xml:"DBInstanceId,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeDiagnosticReportListRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListRequest) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListRequest) SetDBInstanceId(v string) *DescribeDiagnosticReportListRequest {
	s.DBInstanceId = &v
	return s
}

func (s *DescribeDiagnosticReportListRequest) SetEndTime(v string) *DescribeDiagnosticReportListRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeDiagnosticReportListRequest) SetPageNo(v string) *DescribeDiagnosticReportListRequest {
	s.PageNo = &v
	return s
}

func (s *DescribeDiagnosticReportListRequest) SetPageSize(v string) *DescribeDiagnosticReportListRequest {
	s.PageSize = &v
	return s
}

func (s *DescribeDiagnosticReportListRequest) SetStartTime(v string) *DescribeDiagnosticReportListRequest {
	s.StartTime = &v
	return s
}

type DescribeDiagnosticReportListResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The information of the diagnostics reports. Valid values:
	//
	// *   **total**: the number of diagnostics reports.
	// *   **score**: the health score.
	// *   **diagnosticTime**: the time when the diagnostics report was generated. The time is displayed in UTC.
	// *   **startTime**: the start time of the query. The time is displayed in UTC.
	// *   **endTime**: the end time of the query. The time is displayed in UTC.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The reserved parameter.
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s DescribeDiagnosticReportListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponseBody) SetCode(v string) *DescribeDiagnosticReportListResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetData(v string) *DescribeDiagnosticReportListResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetMessage(v string) *DescribeDiagnosticReportListResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetRequestId(v string) *DescribeDiagnosticReportListResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetSuccess(v string) *DescribeDiagnosticReportListResponseBody {
	s.Success = &v
	return s
}

func (s *DescribeDiagnosticReportListResponseBody) SetSynchro(v string) *DescribeDiagnosticReportListResponseBody {
	s.Synchro = &v
	return s
}

type DescribeDiagnosticReportListResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeDiagnosticReportListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeDiagnosticReportListResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeDiagnosticReportListResponse) GoString() string {
	return s.String()
}

func (s *DescribeDiagnosticReportListResponse) SetHeaders(v map[string]*string) *DescribeDiagnosticReportListResponse {
	s.Headers = v
	return s
}

func (s *DescribeDiagnosticReportListResponse) SetStatusCode(v int32) *DescribeDiagnosticReportListResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeDiagnosticReportListResponse) SetBody(v *DescribeDiagnosticReportListResponseBody) *DescribeDiagnosticReportListResponse {
	s.Body = v
	return s
}

type DescribeHotBigKeysRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance. You can call the [DescribeRoleZoneInfo](~~190794~~) operation to query the ID.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeHotBigKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysRequest) SetConsoleContext(v string) *DescribeHotBigKeysRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DescribeHotBigKeysRequest) SetInstanceId(v string) *DescribeHotBigKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeHotBigKeysRequest) SetNodeId(v string) *DescribeHotBigKeysRequest {
	s.NodeId = &v
	return s
}

type DescribeHotBigKeysResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The list of hot keys and large keys.
	Data *DescribeHotBigKeysResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeHotBigKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBody) SetCode(v string) *DescribeHotBigKeysResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHotBigKeysResponseBody) SetData(v *DescribeHotBigKeysResponseBodyData) *DescribeHotBigKeysResponseBody {
	s.Data = v
	return s
}

func (s *DescribeHotBigKeysResponseBody) SetMessage(v string) *DescribeHotBigKeysResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHotBigKeysResponseBody) SetRequestId(v string) *DescribeHotBigKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHotBigKeysResponseBody) SetSuccess(v string) *DescribeHotBigKeysResponseBody {
	s.Success = &v
	return s
}

type DescribeHotBigKeysResponseBodyData struct {
	// The reason why the large key failed to be queried.
	BigKeyMsg *string `json:"BigKeyMsg,omitempty" xml:"BigKeyMsg,omitempty"`
	// The list of large keys.
	BigKeys *DescribeHotBigKeysResponseBodyDataBigKeys `json:"BigKeys,omitempty" xml:"BigKeys,omitempty" type:"Struct"`
	// The reason why the hot key failed to be queried.
	HotKeyMsg *string `json:"HotKeyMsg,omitempty" xml:"HotKeyMsg,omitempty"`
	// The list of hot keys.
	HotKeys *DescribeHotBigKeysResponseBodyDataHotKeys `json:"HotKeys,omitempty" xml:"HotKeys,omitempty" type:"Struct"`
}

func (s DescribeHotBigKeysResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyData) SetBigKeyMsg(v string) *DescribeHotBigKeysResponseBodyData {
	s.BigKeyMsg = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyData) SetBigKeys(v *DescribeHotBigKeysResponseBodyDataBigKeys) *DescribeHotBigKeysResponseBodyData {
	s.BigKeys = v
	return s
}

func (s *DescribeHotBigKeysResponseBodyData) SetHotKeyMsg(v string) *DescribeHotBigKeysResponseBodyData {
	s.HotKeyMsg = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyData) SetHotKeys(v *DescribeHotBigKeysResponseBodyDataHotKeys) *DescribeHotBigKeysResponseBodyData {
	s.HotKeys = v
	return s
}

type DescribeHotBigKeysResponseBodyDataBigKeys struct {
	BigKey []*DescribeHotBigKeysResponseBodyDataBigKeysBigKey `json:"BigKey,omitempty" xml:"BigKey,omitempty" type:"Repeated"`
}

func (s DescribeHotBigKeysResponseBodyDataBigKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyDataBigKeys) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeys) SetBigKey(v []*DescribeHotBigKeysResponseBodyDataBigKeysBigKey) *DescribeHotBigKeysResponseBodyDataBigKeys {
	s.BigKey = v
	return s
}

type DescribeHotBigKeysResponseBodyDataBigKeysBigKey struct {
	// The database in which the key is stored.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The number of elements in the key.
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeHotBigKeysResponseBodyDataBigKeysBigKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyDataBigKeysBigKey) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetDb(v int32) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.Db = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetKey(v string) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.Key = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetKeyType(v string) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.KeyType = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetNodeId(v string) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.NodeId = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataBigKeysBigKey) SetSize(v int64) *DescribeHotBigKeysResponseBodyDataBigKeysBigKey {
	s.Size = &v
	return s
}

type DescribeHotBigKeysResponseBodyDataHotKeys struct {
	HotKey []*DescribeHotBigKeysResponseBodyDataHotKeysHotKey `json:"HotKey,omitempty" xml:"HotKey,omitempty" type:"Repeated"`
}

func (s DescribeHotBigKeysResponseBodyDataHotKeys) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyDataHotKeys) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeys) SetHotKey(v []*DescribeHotBigKeysResponseBodyDataHotKeysHotKey) *DescribeHotBigKeysResponseBodyDataHotKeys {
	s.HotKey = v
	return s
}

type DescribeHotBigKeysResponseBodyDataHotKeysHotKey struct {
	// The database in which the key is stored.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The frequency at which the key is accessed, which indicates the queries per second (QPS) of the key.
	Hot *string `json:"Hot,omitempty" xml:"Hot,omitempty"`
	// The key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The statistical value that is calculated based on the least frequently used (LFU) caching algorithm.
	Lfu *int32 `json:"Lfu,omitempty" xml:"Lfu,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeHotBigKeysResponseBodyDataHotKeysHotKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponseBodyDataHotKeysHotKey) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetDb(v int32) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.Db = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetHot(v string) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.Hot = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetKey(v string) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.Key = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetKeyType(v string) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.KeyType = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetLfu(v int32) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.Lfu = &v
	return s
}

func (s *DescribeHotBigKeysResponseBodyDataHotKeysHotKey) SetNodeId(v string) *DescribeHotBigKeysResponseBodyDataHotKeysHotKey {
	s.NodeId = &v
	return s
}

type DescribeHotBigKeysResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHotBigKeysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHotBigKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotBigKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeHotBigKeysResponse) SetHeaders(v map[string]*string) *DescribeHotBigKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeHotBigKeysResponse) SetStatusCode(v int32) *DescribeHotBigKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHotBigKeysResponse) SetBody(v *DescribeHotBigKeysResponseBody) *DescribeHotBigKeysResponse {
	s.Body = v
	return s
}

type DescribeHotKeysRequest struct {
	// The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](~~60933~~) operation to query the instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance. You can call the [DescribeRoleZoneInfo](~~190794~~) operation to query the data shard ID.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeHotKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysRequest) SetInstanceId(v string) *DescribeHotKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeHotKeysRequest) SetNodeId(v string) *DescribeHotKeysRequest {
	s.NodeId = &v
	return s
}

type DescribeHotKeysResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the hot keys.
	Data *DescribeHotKeysResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeHotKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysResponseBody) SetCode(v string) *DescribeHotKeysResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeHotKeysResponseBody) SetData(v *DescribeHotKeysResponseBodyData) *DescribeHotKeysResponseBody {
	s.Data = v
	return s
}

func (s *DescribeHotKeysResponseBody) SetMessage(v string) *DescribeHotKeysResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeHotKeysResponseBody) SetRequestId(v string) *DescribeHotKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeHotKeysResponseBody) SetSuccess(v string) *DescribeHotKeysResponseBody {
	s.Success = &v
	return s
}

type DescribeHotKeysResponseBodyData struct {
	HotKey []*DescribeHotKeysResponseBodyDataHotKey `json:"HotKey,omitempty" xml:"HotKey,omitempty" type:"Repeated"`
}

func (s DescribeHotKeysResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysResponseBodyData) SetHotKey(v []*DescribeHotKeysResponseBodyDataHotKey) *DescribeHotKeysResponseBodyData {
	s.HotKey = v
	return s
}

type DescribeHotKeysResponseBodyDataHotKey struct {
	// The database in which the key is stored.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The frequency at which the key is accessed, which indicates the queries per second (QPS) of the key.
	Hot *string `json:"Hot,omitempty" xml:"Hot,omitempty"`
	// The name of the key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The number of elements in the key.
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeHotKeysResponseBodyDataHotKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysResponseBodyDataHotKey) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetDb(v int32) *DescribeHotKeysResponseBodyDataHotKey {
	s.Db = &v
	return s
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetHot(v string) *DescribeHotKeysResponseBodyDataHotKey {
	s.Hot = &v
	return s
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetKey(v string) *DescribeHotKeysResponseBodyDataHotKey {
	s.Key = &v
	return s
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetKeyType(v string) *DescribeHotKeysResponseBodyDataHotKey {
	s.KeyType = &v
	return s
}

func (s *DescribeHotKeysResponseBodyDataHotKey) SetSize(v int64) *DescribeHotKeysResponseBodyDataHotKey {
	s.Size = &v
	return s
}

type DescribeHotKeysResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeHotKeysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeHotKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeHotKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeHotKeysResponse) SetHeaders(v map[string]*string) *DescribeHotKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeHotKeysResponse) SetStatusCode(v int32) *DescribeHotKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeHotKeysResponse) SetBody(v *DescribeHotKeysResponseBody) *DescribeHotKeysResponse {
	s.Body = v
	return s
}

type DescribeInstanceDasProRequest struct {
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DescribeInstanceDasProRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDasProRequest) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDasProRequest) SetInstanceId(v string) *DescribeInstanceDasProRequest {
	s.InstanceId = &v
	return s
}

type DescribeInstanceDasProResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// Indicates whether DAS Professional Edition is enabled for the database instance.
	//
	// *   **true**
	// *   **false**
	Data *bool `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeInstanceDasProResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDasProResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDasProResponseBody) SetCode(v string) *DescribeInstanceDasProResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeInstanceDasProResponseBody) SetData(v bool) *DescribeInstanceDasProResponseBody {
	s.Data = &v
	return s
}

func (s *DescribeInstanceDasProResponseBody) SetMessage(v string) *DescribeInstanceDasProResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeInstanceDasProResponseBody) SetRequestId(v string) *DescribeInstanceDasProResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeInstanceDasProResponseBody) SetSuccess(v string) *DescribeInstanceDasProResponseBody {
	s.Success = &v
	return s
}

type DescribeInstanceDasProResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeInstanceDasProResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeInstanceDasProResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeInstanceDasProResponse) GoString() string {
	return s.String()
}

func (s *DescribeInstanceDasProResponse) SetHeaders(v map[string]*string) *DescribeInstanceDasProResponse {
	s.Headers = v
	return s
}

func (s *DescribeInstanceDasProResponse) SetStatusCode(v int32) *DescribeInstanceDasProResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeInstanceDasProResponse) SetBody(v *DescribeInstanceDasProResponseBody) *DescribeInstanceDasProResponse {
	s.Body = v
	return s
}

type DescribeTopBigKeysRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >
	//
	// *   The end time must be later than the start time.
	//
	// *   Only data within the last four days can be queried.
	//
	// *   The maximum interval between the **start time** and the** end time** is 3 hours.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance. You can call the [DescribeRoleZoneInfo](~~190794~~) operation to query the ID.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeTopBigKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysRequest) SetConsoleContext(v string) *DescribeTopBigKeysRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DescribeTopBigKeysRequest) SetEndTime(v string) *DescribeTopBigKeysRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTopBigKeysRequest) SetInstanceId(v string) *DescribeTopBigKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTopBigKeysRequest) SetNodeId(v string) *DescribeTopBigKeysRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeTopBigKeysRequest) SetStartTime(v string) *DescribeTopBigKeysRequest {
	s.StartTime = &v
	return s
}

type DescribeTopBigKeysResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information about the large keys.
	//
	// > This parameter is left empty If no large keys exist within the specified time range.
	Data *DescribeTopBigKeysResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeTopBigKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysResponseBody) SetCode(v string) *DescribeTopBigKeysResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTopBigKeysResponseBody) SetData(v *DescribeTopBigKeysResponseBodyData) *DescribeTopBigKeysResponseBody {
	s.Data = v
	return s
}

func (s *DescribeTopBigKeysResponseBody) SetMessage(v string) *DescribeTopBigKeysResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTopBigKeysResponseBody) SetRequestId(v string) *DescribeTopBigKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTopBigKeysResponseBody) SetSuccess(v string) *DescribeTopBigKeysResponseBody {
	s.Success = &v
	return s
}

type DescribeTopBigKeysResponseBodyData struct {
	BigKey []*DescribeTopBigKeysResponseBodyDataBigKey `json:"BigKey,omitempty" xml:"BigKey,omitempty" type:"Repeated"`
}

func (s DescribeTopBigKeysResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysResponseBodyData) SetBigKey(v []*DescribeTopBigKeysResponseBodyDataBigKey) *DescribeTopBigKeysResponseBodyData {
	s.BigKey = v
	return s
}

type DescribeTopBigKeysResponseBodyDataBigKey struct {
	// The database in which the key is stored.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The number of elements in the key.
	Size *int64 `json:"Size,omitempty" xml:"Size,omitempty"`
}

func (s DescribeTopBigKeysResponseBodyDataBigKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysResponseBodyDataBigKey) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetDb(v int32) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.Db = &v
	return s
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetKey(v string) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.Key = &v
	return s
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetKeyType(v string) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.KeyType = &v
	return s
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetNodeId(v string) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.NodeId = &v
	return s
}

func (s *DescribeTopBigKeysResponseBodyDataBigKey) SetSize(v int64) *DescribeTopBigKeysResponseBodyDataBigKey {
	s.Size = &v
	return s
}

type DescribeTopBigKeysResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTopBigKeysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTopBigKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopBigKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeTopBigKeysResponse) SetHeaders(v map[string]*string) *DescribeTopBigKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeTopBigKeysResponse) SetStatusCode(v int32) *DescribeTopBigKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTopBigKeysResponse) SetBody(v *DescribeTopBigKeysResponseBody) *DescribeTopBigKeysResponse {
	s.Body = v
	return s
}

type DescribeTopHotKeysRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >
	//
	// *   The end time must be later than the start time.
	//
	// *   Only data within the last four days can be queried.
	//
	// *   The maximum interval between the **start time** and the** end time** is 3 hours.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The ID of the ApsaraDB for Redis instance. You can call the [DescribeInstances](~~60933~~) operation to query the ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance. You can call the [DescribeRoleZoneInfo](~~190794~~) operation to query the ID.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s DescribeTopHotKeysRequest) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysRequest) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysRequest) SetConsoleContext(v string) *DescribeTopHotKeysRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DescribeTopHotKeysRequest) SetEndTime(v string) *DescribeTopHotKeysRequest {
	s.EndTime = &v
	return s
}

func (s *DescribeTopHotKeysRequest) SetInstanceId(v string) *DescribeTopHotKeysRequest {
	s.InstanceId = &v
	return s
}

func (s *DescribeTopHotKeysRequest) SetNodeId(v string) *DescribeTopHotKeysRequest {
	s.NodeId = &v
	return s
}

func (s *DescribeTopHotKeysRequest) SetStartTime(v string) *DescribeTopHotKeysRequest {
	s.StartTime = &v
	return s
}

type DescribeTopHotKeysResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information about the hot keys.
	Data *DescribeTopHotKeysResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DescribeTopHotKeysResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysResponseBody) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysResponseBody) SetCode(v string) *DescribeTopHotKeysResponseBody {
	s.Code = &v
	return s
}

func (s *DescribeTopHotKeysResponseBody) SetData(v *DescribeTopHotKeysResponseBodyData) *DescribeTopHotKeysResponseBody {
	s.Data = v
	return s
}

func (s *DescribeTopHotKeysResponseBody) SetMessage(v string) *DescribeTopHotKeysResponseBody {
	s.Message = &v
	return s
}

func (s *DescribeTopHotKeysResponseBody) SetRequestId(v string) *DescribeTopHotKeysResponseBody {
	s.RequestId = &v
	return s
}

func (s *DescribeTopHotKeysResponseBody) SetSuccess(v string) *DescribeTopHotKeysResponseBody {
	s.Success = &v
	return s
}

type DescribeTopHotKeysResponseBodyData struct {
	HotKey []*DescribeTopHotKeysResponseBodyDataHotKey `json:"HotKey,omitempty" xml:"HotKey,omitempty" type:"Repeated"`
}

func (s DescribeTopHotKeysResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysResponseBodyData) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysResponseBodyData) SetHotKey(v []*DescribeTopHotKeysResponseBodyDataHotKey) *DescribeTopHotKeysResponseBodyData {
	s.HotKey = v
	return s
}

type DescribeTopHotKeysResponseBodyDataHotKey struct {
	// The database in which the key is stored.
	Db *int32 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The frequency at which the key is accessed, which indicates the QPS of the key.
	Hot *string `json:"Hot,omitempty" xml:"Hot,omitempty"`
	// The key.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The type of the key.
	KeyType *string `json:"KeyType,omitempty" xml:"KeyType,omitempty"`
	// The statistical value that is calculated based on the least frequently used (LFU) caching algorithm.
	Lfu *int32 `json:"Lfu,omitempty" xml:"Lfu,omitempty"`
	// The ID of the data shard on the ApsaraDB for Redis instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
}

func (s DescribeTopHotKeysResponseBodyDataHotKey) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysResponseBodyDataHotKey) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetDb(v int32) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.Db = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetHot(v string) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.Hot = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetKey(v string) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.Key = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetKeyType(v string) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.KeyType = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetLfu(v int32) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.Lfu = &v
	return s
}

func (s *DescribeTopHotKeysResponseBodyDataHotKey) SetNodeId(v string) *DescribeTopHotKeysResponseBodyDataHotKey {
	s.NodeId = &v
	return s
}

type DescribeTopHotKeysResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DescribeTopHotKeysResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DescribeTopHotKeysResponse) String() string {
	return tea.Prettify(s)
}

func (s DescribeTopHotKeysResponse) GoString() string {
	return s.String()
}

func (s *DescribeTopHotKeysResponse) SetHeaders(v map[string]*string) *DescribeTopHotKeysResponse {
	s.Headers = v
	return s
}

func (s *DescribeTopHotKeysResponse) SetStatusCode(v int32) *DescribeTopHotKeysResponse {
	s.StatusCode = &v
	return s
}

func (s *DescribeTopHotKeysResponse) SetBody(v *DescribeTopHotKeysResponseBody) *DescribeTopHotKeysResponse {
	s.Body = v
	return s
}

type DisableAllSqlConcurrencyControlRulesRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  You must specify this parameter only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAllSqlConcurrencyControlRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableAllSqlConcurrencyControlRulesRequest) GoString() string {
	return s.String()
}

func (s *DisableAllSqlConcurrencyControlRulesRequest) SetConsoleContext(v string) *DisableAllSqlConcurrencyControlRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesRequest) SetInstanceId(v string) *DisableAllSqlConcurrencyControlRulesRequest {
	s.InstanceId = &v
	return s
}

type DisableAllSqlConcurrencyControlRulesResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableAllSqlConcurrencyControlRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableAllSqlConcurrencyControlRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetCode(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetData(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.Data = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetMessage(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetRequestId(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponseBody) SetSuccess(v string) *DisableAllSqlConcurrencyControlRulesResponseBody {
	s.Success = &v
	return s
}

type DisableAllSqlConcurrencyControlRulesResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableAllSqlConcurrencyControlRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableAllSqlConcurrencyControlRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableAllSqlConcurrencyControlRulesResponse) GoString() string {
	return s.String()
}

func (s *DisableAllSqlConcurrencyControlRulesResponse) SetHeaders(v map[string]*string) *DisableAllSqlConcurrencyControlRulesResponse {
	s.Headers = v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponse) SetStatusCode(v int32) *DisableAllSqlConcurrencyControlRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableAllSqlConcurrencyControlRulesResponse) SetBody(v *DisableAllSqlConcurrencyControlRulesResponseBody) *DisableAllSqlConcurrencyControlRulesResponse {
	s.Body = v
	return s
}

type DisableAutoResourceOptimizeRulesRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance ID.
	//
	// >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\"Instance ID1\", \"Instance ID2\"]`.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesRequest) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesRequest) SetConsoleContext(v string) *DisableAutoResourceOptimizeRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesRequest) SetInstanceIds(v string) *DisableAutoResourceOptimizeRulesRequest {
	s.InstanceIds = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *DisableAutoResourceOptimizeRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetCode(v int64) *DisableAutoResourceOptimizeRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetData(v *DisableAutoResourceOptimizeRulesResponseBodyData) *DisableAutoResourceOptimizeRulesResponseBody {
	s.Data = v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetMessage(v string) *DisableAutoResourceOptimizeRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetRequestId(v string) *DisableAutoResourceOptimizeRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBody) SetSuccess(v bool) *DisableAutoResourceOptimizeRulesResponseBody {
	s.Success = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponseBodyData struct {
	// The number of database instances for which the automatic tablespace fragment recycling feature failed to be disabled.
	ConfigFailInstanceCount *int64 `json:"ConfigFailInstanceCount,omitempty" xml:"ConfigFailInstanceCount,omitempty"`
	// The list of database instances for which the automatic tablespace fragment recycling feature failed to be disabled.
	ConfigFailInstanceList []*DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList `json:"ConfigFailInstanceList,omitempty" xml:"ConfigFailInstanceList,omitempty" type:"Repeated"`
	// The number of database instances for which the automatic tablespace fragment recycling feature is disabled.
	ConfigSuccessInstanceCount *int64 `json:"ConfigSuccessInstanceCount,omitempty" xml:"ConfigSuccessInstanceCount,omitempty"`
	// The list of database instances for which the automatic tablespace fragment recycling feature is disabled.
	ConfigSuccessInstanceList []*DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList `json:"ConfigSuccessInstanceList,omitempty" xml:"ConfigSuccessInstanceList,omitempty" type:"Repeated"`
	// The total number of database instances.
	TotalInstanceCount *int64 `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetConfigFailInstanceCount(v int64) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.ConfigFailInstanceCount = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetConfigFailInstanceList(v []*DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.ConfigFailInstanceList = v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetConfigSuccessInstanceCount(v int64) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.ConfigSuccessInstanceCount = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetConfigSuccessInstanceList(v []*DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.ConfigSuccessInstanceList = v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyData) SetTotalInstanceCount(v int64) *DisableAutoResourceOptimizeRulesResponseBodyData {
	s.TotalInstanceCount = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList struct {
	// Indicates whether the automatic tablespace fragment recycling feature is disabled. Valid values:
	//
	// * **true**
	//
	// * **false**
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The error message returned if the request failed.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) SetConfigSuccess(v bool) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) SetErrorMessage(v string) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList {
	s.ErrorMessage = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList) SetInstanceId(v string) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigFailInstanceList {
	s.InstanceId = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList struct {
	// Indicates whether the automatic tablespace fragment recycling feature is disabled. Valid values:
	//
	// * **true**
	//
	// * **false**
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) SetConfigSuccess(v bool) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList) SetInstanceId(v string) *DisableAutoResourceOptimizeRulesResponseBodyDataConfigSuccessInstanceList {
	s.InstanceId = &v
	return s
}

type DisableAutoResourceOptimizeRulesResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableAutoResourceOptimizeRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableAutoResourceOptimizeRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoResourceOptimizeRulesResponse) GoString() string {
	return s.String()
}

func (s *DisableAutoResourceOptimizeRulesResponse) SetHeaders(v map[string]*string) *DisableAutoResourceOptimizeRulesResponse {
	s.Headers = v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponse) SetStatusCode(v int32) *DisableAutoResourceOptimizeRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableAutoResourceOptimizeRulesResponse) SetBody(v *DisableAutoResourceOptimizeRulesResponseBody) *DisableAutoResourceOptimizeRulesResponse {
	s.Body = v
	return s
}

type DisableAutoThrottleRulesRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance IDs.
	//
	// >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\"Instance ID1\",\"Instance ID2\"]`.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s DisableAutoThrottleRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesRequest) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesRequest) SetConsoleContext(v string) *DisableAutoThrottleRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DisableAutoThrottleRulesRequest) SetInstanceIds(v string) *DisableAutoThrottleRulesRequest {
	s.InstanceIds = &v
	return s
}

type DisableAutoThrottleRulesResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *DisableAutoThrottleRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableAutoThrottleRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponseBody) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponseBody) SetCode(v int64) *DisableAutoThrottleRulesResponseBody {
	s.Code = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBody) SetData(v *DisableAutoThrottleRulesResponseBodyData) *DisableAutoThrottleRulesResponseBody {
	s.Data = v
	return s
}

func (s *DisableAutoThrottleRulesResponseBody) SetMessage(v string) *DisableAutoThrottleRulesResponseBody {
	s.Message = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBody) SetRequestId(v string) *DisableAutoThrottleRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBody) SetSuccess(v bool) *DisableAutoThrottleRulesResponseBody {
	s.Success = &v
	return s
}

type DisableAutoThrottleRulesResponseBodyData struct {
	// The number of database instances for which the automatic SQL throttling feature failed to be disabled.
	ConfigFailInstanceCount *int64 `json:"ConfigFailInstanceCount,omitempty" xml:"ConfigFailInstanceCount,omitempty"`
	// The database instances for which the automatic SQL throttling feature failed to be disabled.
	ConfigFailInstanceList []*DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList `json:"ConfigFailInstanceList,omitempty" xml:"ConfigFailInstanceList,omitempty" type:"Repeated"`
	// The number of database instances for which the automatic SQL throttling feature is disabled.
	ConfigSuccessInstanceCount *int64 `json:"ConfigSuccessInstanceCount,omitempty" xml:"ConfigSuccessInstanceCount,omitempty"`
	// The database instances for which the automatic SQL throttling feature is disabled.
	ConfigSuccessInstanceList []*DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList `json:"ConfigSuccessInstanceList,omitempty" xml:"ConfigSuccessInstanceList,omitempty" type:"Repeated"`
	// The total number of database instances.
	TotalInstanceCount *int64 `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
}

func (s DisableAutoThrottleRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetConfigFailInstanceCount(v int64) *DisableAutoThrottleRulesResponseBodyData {
	s.ConfigFailInstanceCount = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetConfigFailInstanceList(v []*DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) *DisableAutoThrottleRulesResponseBodyData {
	s.ConfigFailInstanceList = v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetConfigSuccessInstanceCount(v int64) *DisableAutoThrottleRulesResponseBodyData {
	s.ConfigSuccessInstanceCount = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetConfigSuccessInstanceList(v []*DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) *DisableAutoThrottleRulesResponseBodyData {
	s.ConfigSuccessInstanceList = v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyData) SetTotalInstanceCount(v int64) *DisableAutoThrottleRulesResponseBodyData {
	s.TotalInstanceCount = &v
	return s
}

type DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList struct {
	// Indicates whether the automatic SQL throttling feature is disabled. Valid values:
	//
	// * **true**
	//
	// * **false**
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The error message returned.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) SetConfigSuccess(v bool) *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) SetErrorMessage(v string) *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList {
	s.ErrorMessage = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList) SetInstanceId(v string) *DisableAutoThrottleRulesResponseBodyDataConfigFailInstanceList {
	s.InstanceId = &v
	return s
}

type DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList struct {
	// Indicates whether the automatic SQL throttling feature is disabled. Valid values:
	//
	// * **true**
	//
	// * **false**
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) SetConfigSuccess(v bool) *DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList) SetInstanceId(v string) *DisableAutoThrottleRulesResponseBodyDataConfigSuccessInstanceList {
	s.InstanceId = &v
	return s
}

type DisableAutoThrottleRulesResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableAutoThrottleRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableAutoThrottleRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableAutoThrottleRulesResponse) GoString() string {
	return s.String()
}

func (s *DisableAutoThrottleRulesResponse) SetHeaders(v map[string]*string) *DisableAutoThrottleRulesResponse {
	s.Headers = v
	return s
}

func (s *DisableAutoThrottleRulesResponse) SetStatusCode(v int32) *DisableAutoThrottleRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableAutoThrottleRulesResponse) SetBody(v *DisableAutoThrottleRulesResponseBody) *DisableAutoThrottleRulesResponse {
	s.Body = v
	return s
}

type DisableDasProRequest struct {
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId that you set when you call this operation.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s DisableDasProRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableDasProRequest) GoString() string {
	return s.String()
}

func (s *DisableDasProRequest) SetInstanceId(v string) *DisableDasProRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableDasProRequest) SetUserId(v string) *DisableDasProRequest {
	s.UserId = &v
	return s
}

type DisableDasProResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The reserved parameter.
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s DisableDasProResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableDasProResponseBody) GoString() string {
	return s.String()
}

func (s *DisableDasProResponseBody) SetCode(v string) *DisableDasProResponseBody {
	s.Code = &v
	return s
}

func (s *DisableDasProResponseBody) SetData(v string) *DisableDasProResponseBody {
	s.Data = &v
	return s
}

func (s *DisableDasProResponseBody) SetMessage(v string) *DisableDasProResponseBody {
	s.Message = &v
	return s
}

func (s *DisableDasProResponseBody) SetRequestId(v string) *DisableDasProResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableDasProResponseBody) SetSuccess(v string) *DisableDasProResponseBody {
	s.Success = &v
	return s
}

func (s *DisableDasProResponseBody) SetSynchro(v string) *DisableDasProResponseBody {
	s.Synchro = &v
	return s
}

type DisableDasProResponse struct {
	Headers    map[string]*string         `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                     `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableDasProResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableDasProResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableDasProResponse) GoString() string {
	return s.String()
}

func (s *DisableDasProResponse) SetHeaders(v map[string]*string) *DisableDasProResponse {
	s.Headers = v
	return s
}

func (s *DisableDasProResponse) SetStatusCode(v int32) *DisableDasProResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableDasProResponse) SetBody(v *DisableDasProResponseBody) *DisableDasProResponse {
	s.Body = v
	return s
}

type DisableInstanceDasConfigRequest struct {
	// The database engine. Set the value to Redis.
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The type of auto scaling. Valid values:
	//
	// *   **specScale**: The specifications of a database instance are automatically scaled up or down.
	// *   **shardScale**: The number of shards for a database instance is automatically increased or decreased.
	// *   **bandwidthScale**: The bandwidth of a database instance is automatically increased or decreased.
	ScaleType *string `json:"ScaleType,omitempty" xml:"ScaleType,omitempty"`
}

func (s DisableInstanceDasConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceDasConfigRequest) GoString() string {
	return s.String()
}

func (s *DisableInstanceDasConfigRequest) SetEngine(v string) *DisableInstanceDasConfigRequest {
	s.Engine = &v
	return s
}

func (s *DisableInstanceDasConfigRequest) SetInstanceId(v string) *DisableInstanceDasConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableInstanceDasConfigRequest) SetScaleType(v string) *DisableInstanceDasConfigRequest {
	s.ScaleType = &v
	return s
}

type DisableInstanceDasConfigResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The result of disabling the auto scaling feature for the database instance.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableInstanceDasConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceDasConfigResponseBody) GoString() string {
	return s.String()
}

func (s *DisableInstanceDasConfigResponseBody) SetCode(v string) *DisableInstanceDasConfigResponseBody {
	s.Code = &v
	return s
}

func (s *DisableInstanceDasConfigResponseBody) SetData(v string) *DisableInstanceDasConfigResponseBody {
	s.Data = &v
	return s
}

func (s *DisableInstanceDasConfigResponseBody) SetMessage(v string) *DisableInstanceDasConfigResponseBody {
	s.Message = &v
	return s
}

func (s *DisableInstanceDasConfigResponseBody) SetRequestId(v string) *DisableInstanceDasConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableInstanceDasConfigResponseBody) SetSuccess(v string) *DisableInstanceDasConfigResponseBody {
	s.Success = &v
	return s
}

type DisableInstanceDasConfigResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableInstanceDasConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableInstanceDasConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableInstanceDasConfigResponse) GoString() string {
	return s.String()
}

func (s *DisableInstanceDasConfigResponse) SetHeaders(v map[string]*string) *DisableInstanceDasConfigResponse {
	s.Headers = v
	return s
}

func (s *DisableInstanceDasConfigResponse) SetStatusCode(v int32) *DisableInstanceDasConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableInstanceDasConfigResponse) SetBody(v *DisableInstanceDasConfigResponseBody) *DisableInstanceDasConfigResponse {
	s.Body = v
	return s
}

type DisableSqlConcurrencyControlRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  The database instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the throttling rule that is applied to the instance. You can call the [GetRunningSqlConcurrencyControlRules](~~223538~~) operation to query the ID.
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
}

func (s DisableSqlConcurrencyControlRequest) String() string {
	return tea.Prettify(s)
}

func (s DisableSqlConcurrencyControlRequest) GoString() string {
	return s.String()
}

func (s *DisableSqlConcurrencyControlRequest) SetConsoleContext(v string) *DisableSqlConcurrencyControlRequest {
	s.ConsoleContext = &v
	return s
}

func (s *DisableSqlConcurrencyControlRequest) SetInstanceId(v string) *DisableSqlConcurrencyControlRequest {
	s.InstanceId = &v
	return s
}

func (s *DisableSqlConcurrencyControlRequest) SetItemId(v int64) *DisableSqlConcurrencyControlRequest {
	s.ItemId = &v
	return s
}

type DisableSqlConcurrencyControlResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s DisableSqlConcurrencyControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s DisableSqlConcurrencyControlResponseBody) GoString() string {
	return s.String()
}

func (s *DisableSqlConcurrencyControlResponseBody) SetCode(v string) *DisableSqlConcurrencyControlResponseBody {
	s.Code = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponseBody) SetData(v string) *DisableSqlConcurrencyControlResponseBody {
	s.Data = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponseBody) SetMessage(v string) *DisableSqlConcurrencyControlResponseBody {
	s.Message = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponseBody) SetRequestId(v string) *DisableSqlConcurrencyControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponseBody) SetSuccess(v string) *DisableSqlConcurrencyControlResponseBody {
	s.Success = &v
	return s
}

type DisableSqlConcurrencyControlResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *DisableSqlConcurrencyControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s DisableSqlConcurrencyControlResponse) String() string {
	return tea.Prettify(s)
}

func (s DisableSqlConcurrencyControlResponse) GoString() string {
	return s.String()
}

func (s *DisableSqlConcurrencyControlResponse) SetHeaders(v map[string]*string) *DisableSqlConcurrencyControlResponse {
	s.Headers = v
	return s
}

func (s *DisableSqlConcurrencyControlResponse) SetStatusCode(v int32) *DisableSqlConcurrencyControlResponse {
	s.StatusCode = &v
	return s
}

func (s *DisableSqlConcurrencyControlResponse) SetBody(v *DisableSqlConcurrencyControlResponseBody) *DisableSqlConcurrencyControlResponse {
	s.Body = v
	return s
}

type EnableDasProRequest struct {
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The storage duration of SQL Explorer data. Unit: day. Default value: **30**. Valid values:
	//
	// *   **30**
	// *   **180**
	// *   **365**
	// *   **1095**
	// *   **1825**
	SqlRetention *int32 `json:"SqlRetention,omitempty" xml:"SqlRetention,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s EnableDasProRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableDasProRequest) GoString() string {
	return s.String()
}

func (s *EnableDasProRequest) SetInstanceId(v string) *EnableDasProRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableDasProRequest) SetSqlRetention(v int32) *EnableDasProRequest {
	s.SqlRetention = &v
	return s
}

func (s *EnableDasProRequest) SetUserId(v string) *EnableDasProRequest {
	s.UserId = &v
	return s
}

type EnableDasProResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
	// The reserved parameter.
	Synchro *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s EnableDasProResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableDasProResponseBody) GoString() string {
	return s.String()
}

func (s *EnableDasProResponseBody) SetCode(v string) *EnableDasProResponseBody {
	s.Code = &v
	return s
}

func (s *EnableDasProResponseBody) SetData(v string) *EnableDasProResponseBody {
	s.Data = &v
	return s
}

func (s *EnableDasProResponseBody) SetMessage(v string) *EnableDasProResponseBody {
	s.Message = &v
	return s
}

func (s *EnableDasProResponseBody) SetRequestId(v string) *EnableDasProResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableDasProResponseBody) SetSuccess(v string) *EnableDasProResponseBody {
	s.Success = &v
	return s
}

func (s *EnableDasProResponseBody) SetSynchro(v string) *EnableDasProResponseBody {
	s.Synchro = &v
	return s
}

type EnableDasProResponse struct {
	Headers    map[string]*string        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EnableDasProResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableDasProResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableDasProResponse) GoString() string {
	return s.String()
}

func (s *EnableDasProResponse) SetHeaders(v map[string]*string) *EnableDasProResponse {
	s.Headers = v
	return s
}

func (s *EnableDasProResponse) SetStatusCode(v int32) *EnableDasProResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableDasProResponse) SetBody(v *EnableDasProResponseBody) *EnableDasProResponse {
	s.Body = v
	return s
}

type EnableSqlConcurrencyControlRequest struct {
	// The duration within which the SQL throttling rule takes effect. Unit: seconds.
	//
	// >  The throttling rule takes effect only within this duration.
	ConcurrencyControlTime *int64 `json:"ConcurrencyControlTime,omitempty" xml:"ConcurrencyControlTime,omitempty"`
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  You must specify the instance ID only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The maximum number of concurrent SQL statements. Set this parameter to a positive integer.
	//
	// >  When the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
	MaxConcurrency *int64 `json:"MaxConcurrency,omitempty" xml:"MaxConcurrency,omitempty"`
	// The keywords that are used to identify the SQL statements that need to be throttled.
	//
	// >  If you specify multiple SQL keywords, separate them with tildes (~). If the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
	SqlKeywords *string `json:"SqlKeywords,omitempty" xml:"SqlKeywords,omitempty"`
	// The type of the SQL statements. Valid values:
	//
	// *   **SELECT**
	// *   **UPDATE**
	// *   **DELETE**
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
}

func (s EnableSqlConcurrencyControlRequest) String() string {
	return tea.Prettify(s)
}

func (s EnableSqlConcurrencyControlRequest) GoString() string {
	return s.String()
}

func (s *EnableSqlConcurrencyControlRequest) SetConcurrencyControlTime(v int64) *EnableSqlConcurrencyControlRequest {
	s.ConcurrencyControlTime = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetConsoleContext(v string) *EnableSqlConcurrencyControlRequest {
	s.ConsoleContext = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetInstanceId(v string) *EnableSqlConcurrencyControlRequest {
	s.InstanceId = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetMaxConcurrency(v int64) *EnableSqlConcurrencyControlRequest {
	s.MaxConcurrency = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetSqlKeywords(v string) *EnableSqlConcurrencyControlRequest {
	s.SqlKeywords = &v
	return s
}

func (s *EnableSqlConcurrencyControlRequest) SetSqlType(v string) *EnableSqlConcurrencyControlRequest {
	s.SqlType = &v
	return s
}

type EnableSqlConcurrencyControlResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s EnableSqlConcurrencyControlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s EnableSqlConcurrencyControlResponseBody) GoString() string {
	return s.String()
}

func (s *EnableSqlConcurrencyControlResponseBody) SetCode(v string) *EnableSqlConcurrencyControlResponseBody {
	s.Code = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponseBody) SetData(v string) *EnableSqlConcurrencyControlResponseBody {
	s.Data = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponseBody) SetMessage(v string) *EnableSqlConcurrencyControlResponseBody {
	s.Message = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponseBody) SetRequestId(v string) *EnableSqlConcurrencyControlResponseBody {
	s.RequestId = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponseBody) SetSuccess(v string) *EnableSqlConcurrencyControlResponseBody {
	s.Success = &v
	return s
}

type EnableSqlConcurrencyControlResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *EnableSqlConcurrencyControlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s EnableSqlConcurrencyControlResponse) String() string {
	return tea.Prettify(s)
}

func (s EnableSqlConcurrencyControlResponse) GoString() string {
	return s.String()
}

func (s *EnableSqlConcurrencyControlResponse) SetHeaders(v map[string]*string) *EnableSqlConcurrencyControlResponse {
	s.Headers = v
	return s
}

func (s *EnableSqlConcurrencyControlResponse) SetStatusCode(v int32) *EnableSqlConcurrencyControlResponse {
	s.StatusCode = &v
	return s
}

func (s *EnableSqlConcurrencyControlResponse) SetBody(v *EnableSqlConcurrencyControlResponseBody) *EnableSqlConcurrencyControlResponse {
	s.Body = v
	return s
}

type GetAsyncErrorRequestListByCodeRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The error code. You can call the [GetAsyncErrorRequestStatByCode](~~409804~~) operation to query the MySQL error codes that may be generated in the SQL Explorer results of an instance.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeRequest) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetEnd(v int64) *GetAsyncErrorRequestListByCodeRequest {
	s.End = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetErrorCode(v string) *GetAsyncErrorRequestListByCodeRequest {
	s.ErrorCode = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetInstanceId(v string) *GetAsyncErrorRequestListByCodeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetNodeId(v string) *GetAsyncErrorRequestListByCodeRequest {
	s.NodeId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeRequest) SetStart(v int64) *GetAsyncErrorRequestListByCodeRequest {
	s.Start = &v
	return s
}

type GetAsyncErrorRequestListByCodeResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetAsyncErrorRequestListByCodeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetCode(v int64) *GetAsyncErrorRequestListByCodeResponseBody {
	s.Code = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetData(v *GetAsyncErrorRequestListByCodeResponseBodyData) *GetAsyncErrorRequestListByCodeResponseBody {
	s.Data = v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetMessage(v string) *GetAsyncErrorRequestListByCodeResponseBody {
	s.Message = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetRequestId(v string) *GetAsyncErrorRequestListByCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBody) SetSuccess(v bool) *GetAsyncErrorRequestListByCodeResponseBody {
	s.Success = &v
	return s
}

type GetAsyncErrorRequestListByCodeResponseBodyData struct {
	// Indicates whether the asynchronous request was complete.
	//
	// *   **true**
	// *   **false**
	Complete *bool `json:"complete,omitempty" xml:"complete,omitempty"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// *   **true**
	// *   **false**
	Fail *bool `json:"fail,omitempty" xml:"fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	IsFinish *bool `json:"isFinish,omitempty" xml:"isFinish,omitempty"`
	// The instance ID.
	Result []*GetAsyncErrorRequestListByCodeResponseBodyDataResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// The ID of the asynchronous request.
	ResultId *string `json:"resultId,omitempty" xml:"resultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// *   **RUNNING**
	// *   **SUCCESS**
	// *   **FAIL**
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetComplete(v bool) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.Complete = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetFail(v bool) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetIsFinish(v bool) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetResult(v []*GetAsyncErrorRequestListByCodeResponseBodyDataResult) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.Result = v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetResultId(v string) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetState(v string) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.State = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyData) SetTimestamp(v int64) *GetAsyncErrorRequestListByCodeResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetAsyncErrorRequestListByCodeResponseBodyDataResult struct {
	// The instance ID
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// SQL ID.
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
}

func (s GetAsyncErrorRequestListByCodeResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyDataResult) SetInstanceId(v string) *GetAsyncErrorRequestListByCodeResponseBodyDataResult {
	s.InstanceId = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponseBodyDataResult) SetSqlId(v string) *GetAsyncErrorRequestListByCodeResponseBodyDataResult {
	s.SqlId = &v
	return s
}

type GetAsyncErrorRequestListByCodeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAsyncErrorRequestListByCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAsyncErrorRequestListByCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestListByCodeResponse) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestListByCodeResponse) SetHeaders(v map[string]*string) *GetAsyncErrorRequestListByCodeResponse {
	s.Headers = v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponse) SetStatusCode(v int32) *GetAsyncErrorRequestListByCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAsyncErrorRequestListByCodeResponse) SetBody(v *GetAsyncErrorRequestListByCodeResponseBody) *GetAsyncErrorRequestListByCodeResponse {
	s.Body = v
	return s
}

type GetAsyncErrorRequestStatByCodeRequest struct {
	// The name of a database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified for PolarDB for MySQL clusters.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer feature of the database instance and can be up to 90 days earlier than the current time.
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeRequest) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetDbName(v string) *GetAsyncErrorRequestStatByCodeRequest {
	s.DbName = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetEnd(v int64) *GetAsyncErrorRequestStatByCodeRequest {
	s.End = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetInstanceId(v string) *GetAsyncErrorRequestStatByCodeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetNodeId(v string) *GetAsyncErrorRequestStatByCodeRequest {
	s.NodeId = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeRequest) SetStart(v int64) *GetAsyncErrorRequestStatByCodeRequest {
	s.Start = &v
	return s
}

type GetAsyncErrorRequestStatByCodeResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetAsyncErrorRequestStatByCodeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeResponseBody) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetCode(v int64) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.Code = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetData(v *GetAsyncErrorRequestStatByCodeResponseBodyData) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.Data = v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetMessage(v string) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.Message = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetRequestId(v string) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBody) SetSuccess(v bool) *GetAsyncErrorRequestStatByCodeResponseBody {
	s.Success = &v
	return s
}

type GetAsyncErrorRequestStatByCodeResponseBodyData struct {
	// Indicates whether the asynchronous request was complete.
	//
	// *   **true**
	// *   **false**
	Complete *bool `json:"complete,omitempty" xml:"complete,omitempty"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// *   **true**
	// *   **false**
	Fail *bool `json:"fail,omitempty" xml:"fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	IsFinish *bool `json:"isFinish,omitempty" xml:"isFinish,omitempty"`
	// The number of SQL queries corresponding to the error code.
	Result []*GetAsyncErrorRequestStatByCodeResponseBodyDataResult `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// The ID of the asynchronous request.
	ResultId *string `json:"resultId,omitempty" xml:"resultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// *   **RUNNING**
	// *   **SUCCESS**
	// *   **FAIL**
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetComplete(v bool) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.Complete = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetFail(v bool) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetIsFinish(v bool) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetResult(v []*GetAsyncErrorRequestStatByCodeResponseBodyDataResult) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.Result = v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetResultId(v string) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetState(v string) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.State = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyData) SetTimestamp(v int64) *GetAsyncErrorRequestStatByCodeResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetAsyncErrorRequestStatByCodeResponseBodyDataResult struct {
	// The number of SQL queries corresponding to the error code.
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
	// The error code returned if the request failed.
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// The instance ID.
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
}

func (s GetAsyncErrorRequestStatByCodeResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyDataResult) SetCount(v int32) *GetAsyncErrorRequestStatByCodeResponseBodyDataResult {
	s.Count = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyDataResult) SetErrorCode(v string) *GetAsyncErrorRequestStatByCodeResponseBodyDataResult {
	s.ErrorCode = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponseBodyDataResult) SetInstanceId(v string) *GetAsyncErrorRequestStatByCodeResponseBodyDataResult {
	s.InstanceId = &v
	return s
}

type GetAsyncErrorRequestStatByCodeResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAsyncErrorRequestStatByCodeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAsyncErrorRequestStatByCodeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatByCodeResponse) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatByCodeResponse) SetHeaders(v map[string]*string) *GetAsyncErrorRequestStatByCodeResponse {
	s.Headers = v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponse) SetStatusCode(v int32) *GetAsyncErrorRequestStatByCodeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAsyncErrorRequestStatByCodeResponse) SetBody(v *GetAsyncErrorRequestStatByCodeResponseBody) *GetAsyncErrorRequestStatByCodeResponse {
	s.Body = v
	return s
}

type GetAsyncErrorRequestStatResultRequest struct {
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified for PolarDB for MySQL instances.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The ID of the SQL template. Separate multiple SQL IDs with commas (,). You can call the [GetAsyncErrorRequestListByCode](~~410746~~) operation to query the ID of the SQL query for which MySQL error code is returned.
	SqlIdList *string `json:"SqlIdList,omitempty" xml:"SqlIdList,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The beginning of the time range to query must be within the storage duration of the database instance and can be up to 90 days earlier than the current time.
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetAsyncErrorRequestStatResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatResultRequest) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatResultRequest) SetDbName(v string) *GetAsyncErrorRequestStatResultRequest {
	s.DbName = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetEnd(v int64) *GetAsyncErrorRequestStatResultRequest {
	s.End = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetInstanceId(v string) *GetAsyncErrorRequestStatResultRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetNodeId(v string) *GetAsyncErrorRequestStatResultRequest {
	s.NodeId = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetSqlIdList(v string) *GetAsyncErrorRequestStatResultRequest {
	s.SqlIdList = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultRequest) SetStart(v int64) *GetAsyncErrorRequestStatResultRequest {
	s.Start = &v
	return s
}

type GetAsyncErrorRequestStatResultResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetAsyncErrorRequestStatResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAsyncErrorRequestStatResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetCode(v int64) *GetAsyncErrorRequestStatResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetData(v *GetAsyncErrorRequestStatResultResponseBodyData) *GetAsyncErrorRequestStatResultResponseBody {
	s.Data = v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetMessage(v string) *GetAsyncErrorRequestStatResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetRequestId(v string) *GetAsyncErrorRequestStatResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBody) SetSuccess(v bool) *GetAsyncErrorRequestStatResultResponseBody {
	s.Success = &v
	return s
}

type GetAsyncErrorRequestStatResultResponseBodyData struct {
	// Indicates whether the asynchronous request was complete.
	//
	// *   **true**
	// *   **false**
	Complete *bool `json:"complete,omitempty" xml:"complete,omitempty"`
	// Indicates whether the request failed. Valid values:
	//
	// *   **true**
	// *   **false**
	Fail *bool `json:"fail,omitempty" xml:"fail,omitempty"`
	// Indicates whether the asynchronous request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	IsFinish *bool `json:"isFinish,omitempty" xml:"isFinish,omitempty"`
	// The returned data of the asynchronous request.
	Result []map[string]*DataResultValue `json:"result,omitempty" xml:"result,omitempty" type:"Repeated"`
	// The ID of the asynchronous request.
	ResultId *string `json:"resultId,omitempty" xml:"resultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// *   **RUNNING**: The asynchronous request is running.
	// *   **SUCCESS**: The asynchronous request is successful.
	// *   **FAIL**: The asynchronous request fails.
	State *string `json:"state,omitempty" xml:"state,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetAsyncErrorRequestStatResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetComplete(v bool) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.Complete = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetFail(v bool) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetIsFinish(v bool) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetResult(v []map[string]*DataResultValue) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.Result = v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetResultId(v string) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetState(v string) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.State = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponseBodyData) SetTimestamp(v int64) *GetAsyncErrorRequestStatResultResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetAsyncErrorRequestStatResultResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAsyncErrorRequestStatResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAsyncErrorRequestStatResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAsyncErrorRequestStatResultResponse) GoString() string {
	return s.String()
}

func (s *GetAsyncErrorRequestStatResultResponse) SetHeaders(v map[string]*string) *GetAsyncErrorRequestStatResultResponse {
	s.Headers = v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponse) SetStatusCode(v int32) *GetAsyncErrorRequestStatResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAsyncErrorRequestStatResultResponse) SetBody(v *GetAsyncErrorRequestStatResultResponseBody) *GetAsyncErrorRequestStatResultResponse {
	s.Body = v
	return s
}

type GetAutoResourceOptimizeRulesRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance IDs.
	//
	// *   Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\"Instance ID1\",\"Instance ID2\"]`.
	//
	// *   By default, if you leave this parameter empty, all database instances for which the automatic fragment recycling feature has been enabled within the current Alibaba Cloud account are returned. The following types of database instances are returned:
	//
	//     *   Database instances for which the automatic fragment recycling feature is currently enabled.
	//     *   Database instances for which the automatic fragment recycling feature was once enabled but is currently disabled, including those for which DAS Professional Edition has been disabled but excluding those that have been released.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s GetAutoResourceOptimizeRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesRequest) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesRequest) SetConsoleContext(v string) *GetAutoResourceOptimizeRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesRequest) SetInstanceIds(v string) *GetAutoResourceOptimizeRulesRequest {
	s.InstanceIds = &v
	return s
}

type GetAutoResourceOptimizeRulesResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetAutoResourceOptimizeRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetCode(v int64) *GetAutoResourceOptimizeRulesResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetData(v *GetAutoResourceOptimizeRulesResponseBodyData) *GetAutoResourceOptimizeRulesResponseBody {
	s.Data = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetMessage(v string) *GetAutoResourceOptimizeRulesResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetRequestId(v string) *GetAutoResourceOptimizeRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBody) SetSuccess(v bool) *GetAutoResourceOptimizeRulesResponseBody {
	s.Success = &v
	return s
}

type GetAutoResourceOptimizeRulesResponseBodyData struct {
	// The number of database instances for which the automatic fragment recycling feature is currently enabled.
	EnableAutoResourceOptimizeCount *int64 `json:"EnableAutoResourceOptimizeCount,omitempty" xml:"EnableAutoResourceOptimizeCount,omitempty"`
	// The database instances for which the automatic fragment recycling feature is currently enabled.
	EnableAutoResourceOptimizeList []*GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList `json:"EnableAutoResourceOptimizeList,omitempty" xml:"EnableAutoResourceOptimizeList,omitempty" type:"Repeated"`
	// The number of database instances for which the automatic fragment recycling feature is enabled and DAS Professional Edition is disabled.
	HasEnableRuleButNotDasProCount *int64 `json:"HasEnableRuleButNotDasProCount,omitempty" xml:"HasEnableRuleButNotDasProCount,omitempty"`
	// The database instances for which the automatic fragment recycling feature is enabled and DAS Professional Edition is disabled.
	//
	// > This type of database instance does not perform automatic fragment recycling tasks until DAS Professional Edition is enabled for the instances again.
	HasEnableRuleButNotDasProList []*GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList `json:"HasEnableRuleButNotDasProList,omitempty" xml:"HasEnableRuleButNotDasProList,omitempty" type:"Repeated"`
	// The number of database instances that do not exist or for which the automatic fragment recycling feature has never been enabled.
	//
	// >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
	NeverEnableAutoResourceOptimizeOrReleasedInstanceCount *int64 `json:"NeverEnableAutoResourceOptimizeOrReleasedInstanceCount,omitempty" xml:"NeverEnableAutoResourceOptimizeOrReleasedInstanceCount,omitempty"`
	// The database instances that do not exist or for which the automatic fragment recycling feature has never been enabled.
	NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList []*string `json:"NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList,omitempty" xml:"NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList,omitempty" type:"Repeated"`
	// The number of database instances for which the automatic fragment recycling feature has been enabled.
	TotalAutoResourceOptimizeRulesCount *int64 `json:"TotalAutoResourceOptimizeRulesCount,omitempty" xml:"TotalAutoResourceOptimizeRulesCount,omitempty"`
	// The number of database instances for which the automatic fragment recycling feature was once enabled but is currently disabled.
	TurnOffAutoResourceOptimizeCount *int64 `json:"TurnOffAutoResourceOptimizeCount,omitempty" xml:"TurnOffAutoResourceOptimizeCount,omitempty"`
	// The database instances for which the automatic fragment recycling feature was once enabled but is currently disabled.
	TurnOffAutoResourceOptimizeList []*GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList `json:"TurnOffAutoResourceOptimizeList,omitempty" xml:"TurnOffAutoResourceOptimizeList,omitempty" type:"Repeated"`
}

func (s GetAutoResourceOptimizeRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetEnableAutoResourceOptimizeCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.EnableAutoResourceOptimizeCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetEnableAutoResourceOptimizeList(v []*GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.EnableAutoResourceOptimizeList = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetHasEnableRuleButNotDasProCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.HasEnableRuleButNotDasProCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetHasEnableRuleButNotDasProList(v []*GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.HasEnableRuleButNotDasProList = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetNeverEnableAutoResourceOptimizeOrReleasedInstanceCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.NeverEnableAutoResourceOptimizeOrReleasedInstanceCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetNeverEnableAutoResourceOptimizeOrReleasedInstanceIdList(v []*string) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.NeverEnableAutoResourceOptimizeOrReleasedInstanceIdList = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetTotalAutoResourceOptimizeRulesCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.TotalAutoResourceOptimizeRulesCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetTurnOffAutoResourceOptimizeCount(v int64) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.TurnOffAutoResourceOptimizeCount = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyData) SetTurnOffAutoResourceOptimizeList(v []*GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) *GetAutoResourceOptimizeRulesResponseBodyData {
	s.TurnOffAutoResourceOptimizeList = v
	return s
}

type GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList struct {
	// Indicates whether the automatic fragment recycling feature is enabled. Valid values:
	//
	// * **true**
	// * **false**
	AutoDefragment *bool `json:"AutoDefragment,omitempty" xml:"AutoDefragment,omitempty"`
	// Indicates whether DAS Professional Edition is enabled. Valid values:
	//
	// * **true**
	// * **false**
	DasProOn *bool `json:"DasProOn,omitempty" xml:"DasProOn,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
	TableFragmentationRatio *float64 `json:"TableFragmentationRatio,omitempty" xml:"TableFragmentationRatio,omitempty"`
	// The minimum storage usage of a single physical table for which the automatic fragment recycling feature is enabled. Unit: GB.
	TableSpaceSize *float64 `json:"TableSpaceSize,omitempty" xml:"TableSpaceSize,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetAutoDefragment(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.AutoDefragment = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetDasProOn(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.DasProOn = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetInstanceId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetTableFragmentationRatio(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.TableFragmentationRatio = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetTableSpaceSize(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.TableSpaceSize = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList) SetUserId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataEnableAutoResourceOptimizeList {
	s.UserId = &v
	return s
}

type GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList struct {
	// Indicates whether the automatic fragment recycling feature is enabled. Valid values:
	//
	// * **true**
	// * **false**
	AutoDefragment *bool `json:"AutoDefragment,omitempty" xml:"AutoDefragment,omitempty"`
	// Indicates whether DAS Professional Edition is enabled. Valid values:
	//
	// * **true**
	// * **false**
	DasProOn *bool `json:"DasProOn,omitempty" xml:"DasProOn,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
	TableFragmentationRatio *float64 `json:"TableFragmentationRatio,omitempty" xml:"TableFragmentationRatio,omitempty"`
	// The minimum storage usage of a single physical table for which the automatic fragment recycling feature is enabled. Unit: GB.
	TableSpaceSize *float64 `json:"TableSpaceSize,omitempty" xml:"TableSpaceSize,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetAutoDefragment(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.AutoDefragment = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetDasProOn(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.DasProOn = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetInstanceId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetTableFragmentationRatio(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.TableFragmentationRatio = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetTableSpaceSize(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.TableSpaceSize = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList) SetUserId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataHasEnableRuleButNotDasProList {
	s.UserId = &v
	return s
}

type GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList struct {
	// Indicates whether the automatic fragment recycling feature is enabled. Valid values:
	//
	// * **true**
	// * **false**
	AutoDefragment *bool `json:"AutoDefragment,omitempty" xml:"AutoDefragment,omitempty"`
	// Indicates whether DAS Professional Edition is enabled. Valid values:
	//
	// * **true**
	// * **false**
	DasProOn *bool `json:"DasProOn,omitempty" xml:"DasProOn,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The fragmentation rate of a single physical table for which the automatic fragment recycling feature is enabled.
	TableFragmentationRatio *float64 `json:"TableFragmentationRatio,omitempty" xml:"TableFragmentationRatio,omitempty"`
	// Indicates whether the automatic fragment recycling feature is enabled. Valid values:
	//
	// true
	// false
	TableSpaceSize *float64 `json:"TableSpaceSize,omitempty" xml:"TableSpaceSize,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetAutoDefragment(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.AutoDefragment = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetDasProOn(v bool) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.DasProOn = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetInstanceId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetTableFragmentationRatio(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.TableFragmentationRatio = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetTableSpaceSize(v float64) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.TableSpaceSize = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList) SetUserId(v string) *GetAutoResourceOptimizeRulesResponseBodyDataTurnOffAutoResourceOptimizeList {
	s.UserId = &v
	return s
}

type GetAutoResourceOptimizeRulesResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAutoResourceOptimizeRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAutoResourceOptimizeRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutoResourceOptimizeRulesResponse) GoString() string {
	return s.String()
}

func (s *GetAutoResourceOptimizeRulesResponse) SetHeaders(v map[string]*string) *GetAutoResourceOptimizeRulesResponse {
	s.Headers = v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponse) SetStatusCode(v int32) *GetAutoResourceOptimizeRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutoResourceOptimizeRulesResponse) SetBody(v *GetAutoResourceOptimizeRulesResponseBody) *GetAutoResourceOptimizeRulesResponse {
	s.Body = v
	return s
}

type GetAutoThrottleRulesRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance IDs.
	//
	// *   Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\"Instance ID1\",\"Instance ID2\"]`.
	//
	// *   By default, if you do not specify the database instance IDs, all database instances for which the automatic SQL throttling feature is enabled within the current Alibaba Cloud account are returned. The following types of database instances are returned:
	//
	//     *   Database instances for which the automatic SQL throttling feature is currently enabled.
	//     *   Database instances for which the automatic SQL throttling feature was once enabled but is currently disabled. Released database instances are not included.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
}

func (s GetAutoThrottleRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesRequest) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesRequest) SetConsoleContext(v string) *GetAutoThrottleRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetAutoThrottleRulesRequest) SetInstanceIds(v string) *GetAutoThrottleRulesRequest {
	s.InstanceIds = &v
	return s
}

type GetAutoThrottleRulesResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetAutoThrottleRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutoThrottleRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponseBody) SetCode(v int64) *GetAutoThrottleRulesResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBody) SetData(v *GetAutoThrottleRulesResponseBodyData) *GetAutoThrottleRulesResponseBody {
	s.Data = v
	return s
}

func (s *GetAutoThrottleRulesResponseBody) SetMessage(v string) *GetAutoThrottleRulesResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBody) SetRequestId(v string) *GetAutoThrottleRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBody) SetSuccess(v bool) *GetAutoThrottleRulesResponseBody {
	s.Success = &v
	return s
}

type GetAutoThrottleRulesResponseBodyData struct {
	// The number of database instances for which the automatic SQL throttling feature is currently enabled.
	EnableAutoThrottleCount *int64 `json:"EnableAutoThrottleCount,omitempty" xml:"EnableAutoThrottleCount,omitempty"`
	// The database instances for which the automatic SQL throttling feature is currently enabled.
	EnableAutoThrottleList []*GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList `json:"EnableAutoThrottleList,omitempty" xml:"EnableAutoThrottleList,omitempty" type:"Repeated"`
	// The number of database instances that do not exist or for which the automatic SQL throttling feature has never been enabled.
	//
	// >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
	NeverEnableAutoThrottleOrReleasedInstanceCount *int64 `json:"NeverEnableAutoThrottleOrReleasedInstanceCount,omitempty" xml:"NeverEnableAutoThrottleOrReleasedInstanceCount,omitempty"`
	// The number of database instances that do not exist or for which the automatic SQL throttling feature has never been enabled.
	//
	// >  If a database instance does not exist, the instance has been released or the specified instance ID is invalid.
	NeverEnableAutoThrottleOrReleasedInstanceIdList []*string `json:"NeverEnableAutoThrottleOrReleasedInstanceIdList,omitempty" xml:"NeverEnableAutoThrottleOrReleasedInstanceIdList,omitempty" type:"Repeated"`
	// The number of databases for which the automatic SQL throttling feature has been enabled.
	TotalAutoThrottleRulesCount *int64 `json:"TotalAutoThrottleRulesCount,omitempty" xml:"TotalAutoThrottleRulesCount,omitempty"`
	// The number of database instances for which the automatic SQL throttling feature was once enabled but is currently disabled.
	TurnOffAutoThrottleCount *int64 `json:"TurnOffAutoThrottleCount,omitempty" xml:"TurnOffAutoThrottleCount,omitempty"`
	// The database instances for which the automatic SQL throttling feature was once enabled but is currently disabled.
	TurnOffAutoThrottleList []*GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList `json:"TurnOffAutoThrottleList,omitempty" xml:"TurnOffAutoThrottleList,omitempty" type:"Repeated"`
}

func (s GetAutoThrottleRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponseBodyData) SetEnableAutoThrottleCount(v int64) *GetAutoThrottleRulesResponseBodyData {
	s.EnableAutoThrottleCount = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetEnableAutoThrottleList(v []*GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) *GetAutoThrottleRulesResponseBodyData {
	s.EnableAutoThrottleList = v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetNeverEnableAutoThrottleOrReleasedInstanceCount(v int64) *GetAutoThrottleRulesResponseBodyData {
	s.NeverEnableAutoThrottleOrReleasedInstanceCount = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetNeverEnableAutoThrottleOrReleasedInstanceIdList(v []*string) *GetAutoThrottleRulesResponseBodyData {
	s.NeverEnableAutoThrottleOrReleasedInstanceIdList = v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetTotalAutoThrottleRulesCount(v int64) *GetAutoThrottleRulesResponseBodyData {
	s.TotalAutoThrottleRulesCount = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetTurnOffAutoThrottleCount(v int64) *GetAutoThrottleRulesResponseBodyData {
	s.TurnOffAutoThrottleCount = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyData) SetTurnOffAutoThrottleList(v []*GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) *GetAutoThrottleRulesResponseBodyData {
	s.TurnOffAutoThrottleList = v
	return s
}

type GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList struct {
	// The maximum period of time during which an exception occurs when automatic SQL throttling is triggered. Unit: minutes.
	AbnormalDuration *float64 `json:"AbnormalDuration,omitempty" xml:"AbnormalDuration,omitempty"`
	// The maximum number of active sessions.
	ActiveSessions *int64 `json:"ActiveSessions,omitempty" xml:"ActiveSessions,omitempty"`
	// The end time of the throttling window. The value of this parameter is in UTC.
	AllowThrottleEndTime *string `json:"AllowThrottleEndTime,omitempty" xml:"AllowThrottleEndTime,omitempty"`
	// The start time of the throttling window. The value of this parameter is in UTC.
	AllowThrottleStartTime *string `json:"AllowThrottleStartTime,omitempty" xml:"AllowThrottleStartTime,omitempty"`
	// Indicates whether abnormal SQL statements in execution are terminated at a time. Valid values:
	//
	// > Abnormal SQL statements use the same template as the SQL statements that need to be throttled.
	//
	// * **true**
	// * **false**
	AutoKillSession *bool `json:"AutoKillSession,omitempty" xml:"AutoKillSession,omitempty"`
	// The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
	//
	// * **AND**
	// * **OR**
	CpuSessionRelation *string `json:"CpuSessionRelation,omitempty" xml:"CpuSessionRelation,omitempty"`
	// The CPU utilization threshold.
	CpuUsage *float64 `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The maximum throttling duration. Unit: minutes.
	MaxThrottleTime *float64 `json:"MaxThrottleTime,omitempty" xml:"MaxThrottleTime,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// Indicates whether the automatic SQL throttling feature is enabled. Valid values:
	//
	// * **true**
	// * **false**
	Visible *bool `json:"Visible,omitempty" xml:"Visible,omitempty"`
}

func (s GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetAbnormalDuration(v float64) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.AbnormalDuration = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetActiveSessions(v int64) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.ActiveSessions = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetAllowThrottleEndTime(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.AllowThrottleEndTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetAllowThrottleStartTime(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.AllowThrottleStartTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetAutoKillSession(v bool) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.AutoKillSession = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetCpuSessionRelation(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.CpuSessionRelation = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetCpuUsage(v float64) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.CpuUsage = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetInstanceId(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetMaxThrottleTime(v float64) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.MaxThrottleTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetUserId(v string) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.UserId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList) SetVisible(v bool) *GetAutoThrottleRulesResponseBodyDataEnableAutoThrottleList {
	s.Visible = &v
	return s
}

type GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList struct {
	// The maximum period of time during which the automatic SQL throttling feature is triggered. Unit: minutes.
	AbnormalDuration *float64 `json:"AbnormalDuration,omitempty" xml:"AbnormalDuration,omitempty"`
	// The maximum number of active sessions.
	ActiveSessions *int64 `json:"ActiveSessions,omitempty" xml:"ActiveSessions,omitempty"`
	// The end time of the throttling window. The value of this parameter is in UTC.
	AllowThrottleEndTime *string `json:"AllowThrottleEndTime,omitempty" xml:"AllowThrottleEndTime,omitempty"`
	// The start time of the throttling window. The value of this parameter is in UTC.
	AllowThrottleStartTime *string `json:"AllowThrottleStartTime,omitempty" xml:"AllowThrottleStartTime,omitempty"`
	// Indicates whether abnormal SQL statements in execution are terminated at a time. Valid values:
	//
	// > Abnormal SQL statements use the same template as the SQL statements that need to be throttled.
	//
	// * **true**
	// * **false**
	AutoKillSession *bool `json:"AutoKillSession,omitempty" xml:"AutoKillSession,omitempty"`
	// The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
	//
	// * **AND**
	// * **OR**
	CpuSessionRelation *string `json:"CpuSessionRelation,omitempty" xml:"CpuSessionRelation,omitempty"`
	// The CPU utilization threshold.
	CpuUsage *float64 `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The maximum throttling duration. Unit: minutes.
	MaxThrottleTime *float64 `json:"MaxThrottleTime,omitempty" xml:"MaxThrottleTime,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// Indicates whether the automatic SQL throttling feature is enabled. Valid values:
	//
	// * **true**
	// * **false**
	Visible *bool `json:"Visible,omitempty" xml:"Visible,omitempty"`
}

func (s GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetAbnormalDuration(v float64) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.AbnormalDuration = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetActiveSessions(v int64) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.ActiveSessions = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetAllowThrottleEndTime(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.AllowThrottleEndTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetAllowThrottleStartTime(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.AllowThrottleStartTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetAutoKillSession(v bool) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.AutoKillSession = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetCpuSessionRelation(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.CpuSessionRelation = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetCpuUsage(v float64) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.CpuUsage = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetInstanceId(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.InstanceId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetMaxThrottleTime(v float64) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.MaxThrottleTime = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetUserId(v string) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.UserId = &v
	return s
}

func (s *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList) SetVisible(v bool) *GetAutoThrottleRulesResponseBodyDataTurnOffAutoThrottleList {
	s.Visible = &v
	return s
}

type GetAutoThrottleRulesResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAutoThrottleRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAutoThrottleRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutoThrottleRulesResponse) GoString() string {
	return s.String()
}

func (s *GetAutoThrottleRulesResponse) SetHeaders(v map[string]*string) *GetAutoThrottleRulesResponse {
	s.Headers = v
	return s
}

func (s *GetAutoThrottleRulesResponse) SetStatusCode(v int32) *GetAutoThrottleRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutoThrottleRulesResponse) SetBody(v *GetAutoThrottleRulesResponseBody) *GetAutoThrottleRulesResponse {
	s.Body = v
	return s
}

type GetAutonomousNotifyEventContentRequest struct {
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The unique identifier of the event. You can call the [GetAutonomousNotifyEventsInRange](~~288371~~) operation to query the unique identifier returned by the SpanId response parameter.
	SpanId *string `json:"SpanId,omitempty" xml:"SpanId,omitempty"`
	// The reserved parameter.
	Context *string `json:"__context,omitempty" xml:"__context,omitempty"`
}

func (s GetAutonomousNotifyEventContentRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventContentRequest) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventContentRequest) SetInstanceId(v string) *GetAutonomousNotifyEventContentRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAutonomousNotifyEventContentRequest) SetSpanId(v string) *GetAutonomousNotifyEventContentRequest {
	s.SpanId = &v
	return s
}

func (s *GetAutonomousNotifyEventContentRequest) SetContext(v string) *GetAutonomousNotifyEventContentRequest {
	s.Context = &v
	return s
}

type GetAutonomousNotifyEventContentResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the notification events.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutonomousNotifyEventContentResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventContentResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetCode(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetData(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.Data = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetMessage(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetRequestId(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponseBody) SetSuccess(v string) *GetAutonomousNotifyEventContentResponseBody {
	s.Success = &v
	return s
}

type GetAutonomousNotifyEventContentResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAutonomousNotifyEventContentResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAutonomousNotifyEventContentResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventContentResponse) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventContentResponse) SetHeaders(v map[string]*string) *GetAutonomousNotifyEventContentResponse {
	s.Headers = v
	return s
}

func (s *GetAutonomousNotifyEventContentResponse) SetStatusCode(v int32) *GetAutonomousNotifyEventContentResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutonomousNotifyEventContentResponse) SetBody(v *GetAutonomousNotifyEventContentResponseBody) *GetAutonomousNotifyEventContentResponse {
	s.Body = v
	return s
}

type GetAutonomousNotifyEventsInRangeRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The reserved parameter.
	EventContext *string `json:"EventContext,omitempty" xml:"EventContext,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The urgency level of the events. If you specify this parameter, the MinLevel parameter does not take effect. Valid values:
	//
	// *   **Notice**: events for which the system sends notifications.
	// *   **Optimization**: events that need to be optimized.
	// *   **Warn**: events for which the system sends warnings.
	// *   **Critical**: critical events.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The minimum urgency level of the events. Valid values:
	//
	// *   **Notice**: events for which the system sends notifications.
	// *   **Optimization**: events that need to be optimized.
	// *   **Warn**: events for which the system sends warnings.
	// *   **Critical**: critical events.
	MinLevel *string `json:"MinLevel,omitempty" xml:"MinLevel,omitempty"`
	// The ID of the node in a PolarDB for MySQL cluster. You can call the [DescribeDBClusters](~~98094~~) operation to query the node ID returned by the DBNodeId response parameter.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	PageOffset *string `json:"PageOffset,omitempty" xml:"PageOffset,omitempty"`
	// The number of entries per page.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The reserved parameter.
	Context *string `json:"__context,omitempty" xml:"__context,omitempty"`
}

func (s GetAutonomousNotifyEventsInRangeRequest) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeRequest) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetEndTime(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.EndTime = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetEventContext(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.EventContext = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetInstanceId(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.InstanceId = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetLevel(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.Level = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetMinLevel(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.MinLevel = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetNodeId(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.NodeId = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetPageOffset(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.PageOffset = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetPageSize(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.PageSize = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetStartTime(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.StartTime = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeRequest) SetContext(v string) *GetAutonomousNotifyEventsInRangeRequest {
	s.Context = &v
	return s
}

type GetAutonomousNotifyEventsInRangeResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetAutonomousNotifyEventsInRangeResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetAutonomousNotifyEventsInRangeResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeResponseBody) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetCode(v string) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.Code = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetData(v *GetAutonomousNotifyEventsInRangeResponseBodyData) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.Data = v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetMessage(v string) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.Message = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetRequestId(v string) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBody) SetSuccess(v string) *GetAutonomousNotifyEventsInRangeResponseBody {
	s.Success = &v
	return s
}

type GetAutonomousNotifyEventsInRangeResponseBodyData struct {
	// The reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	List *GetAutonomousNotifyEventsInRangeResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The page number.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetAutonomousNotifyEventsInRangeResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetExtra(v string) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetList(v *GetAutonomousNotifyEventsInRangeResponseBodyDataList) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.List = v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetPageNo(v int64) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetPageSize(v int64) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyData) SetTotal(v int64) *GetAutonomousNotifyEventsInRangeResponseBodyData {
	s.Total = &v
	return s
}

type GetAutonomousNotifyEventsInRangeResponseBodyDataList struct {
	T []*string `json:"T,omitempty" xml:"T,omitempty" type:"Repeated"`
}

func (s GetAutonomousNotifyEventsInRangeResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeResponseBodyDataList) SetT(v []*string) *GetAutonomousNotifyEventsInRangeResponseBodyDataList {
	s.T = v
	return s
}

type GetAutonomousNotifyEventsInRangeResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetAutonomousNotifyEventsInRangeResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetAutonomousNotifyEventsInRangeResponse) String() string {
	return tea.Prettify(s)
}

func (s GetAutonomousNotifyEventsInRangeResponse) GoString() string {
	return s.String()
}

func (s *GetAutonomousNotifyEventsInRangeResponse) SetHeaders(v map[string]*string) *GetAutonomousNotifyEventsInRangeResponse {
	s.Headers = v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponse) SetStatusCode(v int32) *GetAutonomousNotifyEventsInRangeResponse {
	s.StatusCode = &v
	return s
}

func (s *GetAutonomousNotifyEventsInRangeResponse) SetBody(v *GetAutonomousNotifyEventsInRangeResponseBody) *GetAutonomousNotifyEventsInRangeResponse {
	s.Body = v
	return s
}

type GetDBInstanceConnectivityDiagnosisRequest struct {
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The source IP address.
	SrcIp *string `json:"SrcIp,omitempty" xml:"SrcIp,omitempty"`
}

func (s GetDBInstanceConnectivityDiagnosisRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceConnectivityDiagnosisRequest) GoString() string {
	return s.String()
}

func (s *GetDBInstanceConnectivityDiagnosisRequest) SetInstanceId(v string) *GetDBInstanceConnectivityDiagnosisRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisRequest) SetSrcIp(v string) *GetDBInstanceConnectivityDiagnosisRequest {
	s.SrcIp = &v
	return s
}

type GetDBInstanceConnectivityDiagnosisResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetDBInstanceConnectivityDiagnosisResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// > If the request was successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDBInstanceConnectivityDiagnosisResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceConnectivityDiagnosisResponseBody) GoString() string {
	return s.String()
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetCode(v string) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.Code = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetData(v *GetDBInstanceConnectivityDiagnosisResponseBodyData) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.Data = v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetMessage(v string) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.Message = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetRequestId(v string) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBody) SetSuccess(v string) *GetDBInstanceConnectivityDiagnosisResponseBody {
	s.Success = &v
	return s
}

type GetDBInstanceConnectivityDiagnosisResponseBodyData struct {
	// The exception detection items:
	//
	// *   **SRC_IP_NOT_IN_USER_WHITELIST**: The source IP address is not added to the whitelist of the user.
	// *   **VIP_NOT_EXISTS**: The Application Load Balancer (ALB) instance corresponding to the virtual IP address (VIP) does not exist.
	// *   **RS_NOT_EXISTS**: The resource sharing (RS) is not properly mounted.
	// *   **VIP_TUNNEL_ID_NOT_CONSISTENT**: The tunnel ID used by the VIP of the virtual private cloud (VPC) type is different from the tunnel ID of the VPC.
	// *   **VIP_VPC_CLOUD_INSTANCE_NOT_EXISTS**: The VIP of the VPC type does not exist.
	// *   **VIP_IS_NOT_NGLB**: The NGLB mode is disabled for the VIP.
	// *   **CUSTINS_NOT_ASSOCIATE_ECS_SECURITY_GROUP**: No security group is associated with the instance.
	// *   **SRC_IP_NOT_IN_USER_WHITELIST**: The source IP address is not added to the whitelist of the user.
	// *   **SRC_IP_NOT_IN_ADMIN_WHITELIST**: The source IP address is not added to the whitelist of the instance.
	// *   **SRC_IP_NOT_IN_ECS_SECURITY_GROUP**: The source IP address is not added to the security group that is associated with the instance.
	// *   **VPC_INSTANCE_IP_NOT_WORKING_STATUS**: The IP address in the VPC is in an abnormal state.
	ConnCheckErrorCode *string `json:"connCheckErrorCode,omitempty" xml:"connCheckErrorCode,omitempty"`
	// The details of the exception detection.
	ConnCheckErrorMessage *string `json:"connCheckErrorMessage,omitempty" xml:"connCheckErrorMessage,omitempty"`
	// The type of the exception:
	//
	// *   **0**: an exception that can be handled by the user.
	// *   **1**: an exception that can be handled by a technical engineer.
	FailType *string `json:"failType,omitempty" xml:"failType,omitempty"`
	// The instance ID.
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// Indicates whether the connectivity test was passed:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"success,omitempty" xml:"success,omitempty"`
}

func (s GetDBInstanceConnectivityDiagnosisResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceConnectivityDiagnosisResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetConnCheckErrorCode(v string) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.ConnCheckErrorCode = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetConnCheckErrorMessage(v string) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.ConnCheckErrorMessage = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetFailType(v string) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.FailType = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetInstanceId(v string) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponseBodyData) SetSuccess(v bool) *GetDBInstanceConnectivityDiagnosisResponseBodyData {
	s.Success = &v
	return s
}

type GetDBInstanceConnectivityDiagnosisResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetDBInstanceConnectivityDiagnosisResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDBInstanceConnectivityDiagnosisResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDBInstanceConnectivityDiagnosisResponse) GoString() string {
	return s.String()
}

func (s *GetDBInstanceConnectivityDiagnosisResponse) SetHeaders(v map[string]*string) *GetDBInstanceConnectivityDiagnosisResponse {
	s.Headers = v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponse) SetStatusCode(v int32) *GetDBInstanceConnectivityDiagnosisResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDBInstanceConnectivityDiagnosisResponse) SetBody(v *GetDBInstanceConnectivityDiagnosisResponseBody) *GetDBInstanceConnectivityDiagnosisResponse {
	s.Body = v
	return s
}

type GetDasProServiceUsageRequest struct {
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetDasProServiceUsageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDasProServiceUsageRequest) GoString() string {
	return s.String()
}

func (s *GetDasProServiceUsageRequest) SetInstanceId(v string) *GetDasProServiceUsageRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDasProServiceUsageRequest) SetUserId(v string) *GetDasProServiceUsageRequest {
	s.UserId = &v
	return s
}

type GetDasProServiceUsageResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetDasProServiceUsageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDasProServiceUsageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDasProServiceUsageResponseBody) GoString() string {
	return s.String()
}

func (s *GetDasProServiceUsageResponseBody) SetCode(v int64) *GetDasProServiceUsageResponseBody {
	s.Code = &v
	return s
}

func (s *GetDasProServiceUsageResponseBody) SetData(v *GetDasProServiceUsageResponseBodyData) *GetDasProServiceUsageResponseBody {
	s.Data = v
	return s
}

func (s *GetDasProServiceUsageResponseBody) SetMessage(v string) *GetDasProServiceUsageResponseBody {
	s.Message = &v
	return s
}

func (s *GetDasProServiceUsageResponseBody) SetRequestId(v string) *GetDasProServiceUsageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBody) SetSuccess(v bool) *GetDasProServiceUsageResponseBody {
	s.Success = &v
	return s
}

type GetDasProServiceUsageResponseBodyData struct {
	// The ID of the DAS Professional Edition instance.
	CommodityInstanceId *string `json:"commodityInstanceId,omitempty" xml:"commodityInstanceId,omitempty"`
	// The type of the database engine.
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// The point of time when DAS Professional Edition for the database instance expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	ExpireTime *int64 `json:"expireTime,omitempty" xml:"expireTime,omitempty"`
	// The name of the database instance.
	InstanceAlias *string `json:"instanceAlias,omitempty" xml:"instanceAlias,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The endpoint of the database instance.
	Ip *string `json:"ip,omitempty" xml:"ip,omitempty"`
	// Indicates whether DAS Professional Edition for the database instance has expired. Valid values:
	//
	// *   **true**
	// *   **false**
	IsSpare *bool `json:"isSpare,omitempty" xml:"isSpare,omitempty"`
	// The estimated remaining time for migrating the data generated by the SQL Explorer and Audit feature from the previous version to the new version. Unit: milliseconds.
	//
	// >  This parameter is returned only when the SQL Explorer and Audit feature is migrated from the previous version to the new version.
	MigrationPredictRemainingTime *int64 `json:"migrationPredictRemainingTime,omitempty" xml:"migrationPredictRemainingTime,omitempty"`
	// The port number that is used to connect to the database instance.
	Port *int32 `json:"port,omitempty" xml:"port,omitempty"`
	// The region in which the database instance resides.
	Region *string `json:"region,omitempty" xml:"region,omitempty"`
	// The service unit ID.
	ServiceUnitId *string `json:"serviceUnitId,omitempty" xml:"serviceUnitId,omitempty"`
	// The storage duration of SQL Explorer data. Unit: days.
	SqlRetention *string `json:"sqlRetention,omitempty" xml:"sqlRetention,omitempty"`
	// The time when DAS Professional Edition was enabled for the database instance. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *int64 `json:"startTime,omitempty" xml:"startTime,omitempty"`
	// The SQL Explorer storage space that is offered free-of-charge. Unit: MB.
	StorageFreeQuotaInMB *float64 `json:"storageFreeQuotaInMB,omitempty" xml:"storageFreeQuotaInMB,omitempty"`
	// The storage usage of SQL Explorer of the database instance. Unit: bytes.
	StorageUsed *int64 `json:"storageUsed,omitempty" xml:"storageUsed,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
	// The virtual private cloud (VPC) ID.
	VpcId *string `json:"vpcId,omitempty" xml:"vpcId,omitempty"`
}

func (s GetDasProServiceUsageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDasProServiceUsageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDasProServiceUsageResponseBodyData) SetCommodityInstanceId(v string) *GetDasProServiceUsageResponseBodyData {
	s.CommodityInstanceId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetEngine(v string) *GetDasProServiceUsageResponseBodyData {
	s.Engine = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetExpireTime(v int64) *GetDasProServiceUsageResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetInstanceAlias(v string) *GetDasProServiceUsageResponseBodyData {
	s.InstanceAlias = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetInstanceId(v string) *GetDasProServiceUsageResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetIp(v string) *GetDasProServiceUsageResponseBodyData {
	s.Ip = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetIsSpare(v bool) *GetDasProServiceUsageResponseBodyData {
	s.IsSpare = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetMigrationPredictRemainingTime(v int64) *GetDasProServiceUsageResponseBodyData {
	s.MigrationPredictRemainingTime = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetPort(v int32) *GetDasProServiceUsageResponseBodyData {
	s.Port = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetRegion(v string) *GetDasProServiceUsageResponseBodyData {
	s.Region = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetServiceUnitId(v string) *GetDasProServiceUsageResponseBodyData {
	s.ServiceUnitId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetSqlRetention(v string) *GetDasProServiceUsageResponseBodyData {
	s.SqlRetention = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetStartTime(v int64) *GetDasProServiceUsageResponseBodyData {
	s.StartTime = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetStorageFreeQuotaInMB(v float64) *GetDasProServiceUsageResponseBodyData {
	s.StorageFreeQuotaInMB = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetStorageUsed(v int64) *GetDasProServiceUsageResponseBodyData {
	s.StorageUsed = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetUserId(v string) *GetDasProServiceUsageResponseBodyData {
	s.UserId = &v
	return s
}

func (s *GetDasProServiceUsageResponseBodyData) SetVpcId(v string) *GetDasProServiceUsageResponseBodyData {
	s.VpcId = &v
	return s
}

type GetDasProServiceUsageResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetDasProServiceUsageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDasProServiceUsageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDasProServiceUsageResponse) GoString() string {
	return s.String()
}

func (s *GetDasProServiceUsageResponse) SetHeaders(v map[string]*string) *GetDasProServiceUsageResponse {
	s.Headers = v
	return s
}

func (s *GetDasProServiceUsageResponse) SetStatusCode(v int32) *GetDasProServiceUsageResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDasProServiceUsageResponse) SetBody(v *GetDasProServiceUsageResponseBody) *GetDasProServiceUsageResponse {
	s.Body = v
	return s
}

type GetDasSQLLogHotDataRequest struct {
	// The account of the database.
	//
	// >  You can specify multiple database accounts that are separated by spaces. Example: `user1 user2 user3`.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
	ChildDBInstanceIDs *string `json:"ChildDBInstanceIDs,omitempty" xml:"ChildDBInstanceIDs,omitempty"`
	// The name of the database.
	//
	// >  You can specify multiple database names that are separated by spaces. Example: `DB1 DB2 DB3`.
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The error code of SQL execution. You can call the [GetAsyncErrorRequestStatByCode](~~409804~~) operation to query MySQL error codes in SQL Explorer data.
	Fail *string `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// The IP address of the client.
	//
	// >  You can specify multiple IP addresses that are separated by spaces. Example: `IP1 IP2 IP3`.
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The ID of the database instance.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The logical relationship among multiple keywords.
	//
	// *   **or**
	// *   **and**
	LogicalOperator *string `json:"LogicalOperator,omitempty" xml:"LogicalOperator,omitempty"`
	// The maximum execution duration. Unit: microseconds. You can specify this parameter to query the SQL statements whose execution duration is smaller than the value of this parameter.
	MaxLatancy *int64 `json:"MaxLatancy,omitempty" xml:"MaxLatancy,omitempty"`
	// The maximum number of entries per page.
	MaxRecordsPerPage *int64 `json:"MaxRecordsPerPage,omitempty" xml:"MaxRecordsPerPage,omitempty"`
	// The reserved parameter. This parameter is not supported.
	MaxRows *int64 `json:"MaxRows,omitempty" xml:"MaxRows,omitempty"`
	// The maximum number of scanned rows. You can specify this parameter to query the SQL statements that scan a smaller number of rows than the value of this parameter.
	MaxScanRows *int64 `json:"MaxScanRows,omitempty" xml:"MaxScanRows,omitempty"`
	// The reserved parameter. This parameter is not supported.
	MaxSpillCnt *int64 `json:"MaxSpillCnt,omitempty" xml:"MaxSpillCnt,omitempty"`
	// The minimum execution duration. Unit: microseconds. You can specify this parameter to query the SQL statements whose execution duration is greater than or equal to the value of this parameter.
	MinLatancy *int64 `json:"MinLatancy,omitempty" xml:"MinLatancy,omitempty"`
	// The reserved parameter. This parameter is not supported.
	MinRows *int64 `json:"MinRows,omitempty" xml:"MinRows,omitempty"`
	// The minimum number of scanned rows. You can specify this parameter to query the SQL statements that scan a larger or an equal number of rows than the value of this parameter.
	MinScanRows *int64 `json:"MinScanRows,omitempty" xml:"MinScanRows,omitempty"`
	// The reserved parameter. This parameter is not supported.
	MinSpillCnt *int64 `json:"MinSpillCnt,omitempty" xml:"MinSpillCnt,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	PageNumbers *int64 `json:"PageNumbers,omitempty" xml:"PageNumbers,omitempty"`
	// The keyword that is used for the query.
	//
	// >  The keyword must be at least four characters in length. You can specify multiple keywords that are separated by spaces. Fuzzy queries are not supported.
	QueryKeyword *string `json:"QueryKeyword,omitempty" xml:"QueryKeyword,omitempty"`
	// The reserved parameter. This parameter is not supported.
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The basis on which you want to sort the query results.
	//
	// *   **SCAN_ROWS**: the number of scanned rows.
	// *   **UPDATE_ROWS**: the number of updated rows.
	// *   **CONSUME**: the time consumed.
	// *   **ORIGIN_TIME**: the execution duration.
	SortKey *string `json:"SortKey,omitempty" xml:"SortKey,omitempty"`
	// The order in which you want to sort the query results.
	//
	// *   **ase**: ascending order.
	// *   **desc**: descending order.
	SortMethod *string `json:"SortMethod,omitempty" xml:"SortMethod,omitempty"`
	// The type of the SQL statement. Valid values:
	//
	// *   **SELECT**
	// *   **UPDATE**
	// *   **DELETE**
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  You can query only the data that is generated after the new SQL Explorer and Audit feature is enabled. The start time can be up to seven days earlier than the current time.
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The execution results. You can specify **0** to query the SQL statements that are successfully executed. You can also specify an error code to query the corresponding SQL statements that fail to be executed.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The thread ID.
	//
	// >  You can specify multiple thread IDs that are separated by spaces. Example: `Thread ID1 Thread ID2 Thread ID3`.
	ThreadID *string `json:"ThreadID,omitempty" xml:"ThreadID,omitempty"`
	// The reserved parameter. This parameter is not supported.
	TraceId *string `json:"TraceId,omitempty" xml:"TraceId,omitempty"`
	// The transaction ID.
	TransactionId *string `json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
}

func (s GetDasSQLLogHotDataRequest) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataRequest) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataRequest) SetAccountName(v string) *GetDasSQLLogHotDataRequest {
	s.AccountName = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetChildDBInstanceIDs(v string) *GetDasSQLLogHotDataRequest {
	s.ChildDBInstanceIDs = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetDBName(v string) *GetDasSQLLogHotDataRequest {
	s.DBName = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetEnd(v int64) *GetDasSQLLogHotDataRequest {
	s.End = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetFail(v string) *GetDasSQLLogHotDataRequest {
	s.Fail = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetHostAddress(v string) *GetDasSQLLogHotDataRequest {
	s.HostAddress = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetInstanceId(v string) *GetDasSQLLogHotDataRequest {
	s.InstanceId = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetLogicalOperator(v string) *GetDasSQLLogHotDataRequest {
	s.LogicalOperator = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxLatancy(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxLatancy = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxRecordsPerPage(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxRecordsPerPage = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxRows(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxRows = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxScanRows(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxScanRows = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMaxSpillCnt(v int64) *GetDasSQLLogHotDataRequest {
	s.MaxSpillCnt = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMinLatancy(v int64) *GetDasSQLLogHotDataRequest {
	s.MinLatancy = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMinRows(v int64) *GetDasSQLLogHotDataRequest {
	s.MinRows = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMinScanRows(v int64) *GetDasSQLLogHotDataRequest {
	s.MinScanRows = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetMinSpillCnt(v int64) *GetDasSQLLogHotDataRequest {
	s.MinSpillCnt = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetPageNumbers(v int64) *GetDasSQLLogHotDataRequest {
	s.PageNumbers = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetQueryKeyword(v string) *GetDasSQLLogHotDataRequest {
	s.QueryKeyword = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetRole(v string) *GetDasSQLLogHotDataRequest {
	s.Role = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetSortKey(v string) *GetDasSQLLogHotDataRequest {
	s.SortKey = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetSortMethod(v string) *GetDasSQLLogHotDataRequest {
	s.SortMethod = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetSqlType(v string) *GetDasSQLLogHotDataRequest {
	s.SqlType = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetStart(v int64) *GetDasSQLLogHotDataRequest {
	s.Start = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetState(v string) *GetDasSQLLogHotDataRequest {
	s.State = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetThreadID(v string) *GetDasSQLLogHotDataRequest {
	s.ThreadID = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetTraceId(v string) *GetDasSQLLogHotDataRequest {
	s.TraceId = &v
	return s
}

func (s *GetDasSQLLogHotDataRequest) SetTransactionId(v string) *GetDasSQLLogHotDataRequest {
	s.TransactionId = &v
	return s
}

type GetDasSQLLogHotDataResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetDasSQLLogHotDataResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// > If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetDasSQLLogHotDataResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataResponseBody) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataResponseBody) SetCode(v string) *GetDasSQLLogHotDataResponseBody {
	s.Code = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBody) SetData(v *GetDasSQLLogHotDataResponseBodyData) *GetDasSQLLogHotDataResponseBody {
	s.Data = v
	return s
}

func (s *GetDasSQLLogHotDataResponseBody) SetMessage(v string) *GetDasSQLLogHotDataResponseBody {
	s.Message = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBody) SetRequestId(v string) *GetDasSQLLogHotDataResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBody) SetSuccess(v string) *GetDasSQLLogHotDataResponseBody {
	s.Success = &v
	return s
}

type GetDasSQLLogHotDataResponseBodyData struct {
	// The reserved parameter.
	Extra interface{} `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The details of the data returned.
	List []*GetDasSQLLogHotDataResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetDasSQLLogHotDataResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetExtra(v interface{}) *GetDasSQLLogHotDataResponseBodyData {
	s.Extra = v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetList(v []*GetDasSQLLogHotDataResponseBodyDataList) *GetDasSQLLogHotDataResponseBodyData {
	s.List = v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetPageNo(v int64) *GetDasSQLLogHotDataResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetPageSize(v int64) *GetDasSQLLogHotDataResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyData) SetTotal(v int64) *GetDasSQLLogHotDataResponseBodyData {
	s.Total = &v
	return s
}

type GetDasSQLLogHotDataResponseBodyDataList struct {
	// The account of the database.
	AccountName *string `json:"AccountName,omitempty" xml:"AccountName,omitempty"`
	// The name of the database.
	DBName *string `json:"DBName,omitempty" xml:"DBName,omitempty"`
	// The execution time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	ExecuteTime *string `json:"ExecuteTime,omitempty" xml:"ExecuteTime,omitempty"`
	// The extended information. This parameter is a reserved parameter.
	Ext *string `json:"Ext,omitempty" xml:"Ext,omitempty"`
	// The IP address of the client.
	HostAddress *string `json:"HostAddress,omitempty" xml:"HostAddress,omitempty"`
	// The execution duration. Unit: microseconds.
	Latancy *int64 `json:"Latancy,omitempty" xml:"Latancy,omitempty"`
	// The lock wait duration. Unit: microseconds.
	LockTime *int64 `json:"LockTime,omitempty" xml:"LockTime,omitempty"`
	// The number of logical reads.
	LogicRead *int64 `json:"LogicRead,omitempty" xml:"LogicRead,omitempty"`
	// The execution time. The time follows the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time is displayed in UTC.
	OriginTime *string `json:"OriginTime,omitempty" xml:"OriginTime,omitempty"`
	// The number of physical asynchronous reads.
	PhysicAsyncRead *int64 `json:"PhysicAsyncRead,omitempty" xml:"PhysicAsyncRead,omitempty"`
	// The number of physical synchronous reads.
	PhysicSyncRead *int64 `json:"PhysicSyncRead,omitempty" xml:"PhysicSyncRead,omitempty"`
	// The number of rows returned.
	ReturnRows *int64 `json:"ReturnRows,omitempty" xml:"ReturnRows,omitempty"`
	// The content of the SQL statement.
	SQLText *string `json:"SQLText,omitempty" xml:"SQLText,omitempty"`
	// The number of rows scanned by the SQL statement.
	ScanRows *int64 `json:"ScanRows,omitempty" xml:"ScanRows,omitempty"`
	// The type of the SQL statement. Valid values:
	//
	// * **SELECT**
	// * **UPDATE**
	// * **DELETE**
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The execution result. If a **0** is returned, the SQL statement was successfully executed. If an error code is returned, the SQL statement failed to be executed.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The thread ID.
	ThreadID *int64 `json:"ThreadID,omitempty" xml:"ThreadID,omitempty"`
	// The transaction ID.
	TransactionId *string `json:"TransactionId,omitempty" xml:"TransactionId,omitempty"`
	// The number of updated rows.
	UpdateRows *int64 `json:"UpdateRows,omitempty" xml:"UpdateRows,omitempty"`
}

func (s GetDasSQLLogHotDataResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetAccountName(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.AccountName = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetDBName(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.DBName = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetExecuteTime(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.ExecuteTime = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetExt(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.Ext = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetHostAddress(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.HostAddress = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetLatancy(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.Latancy = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetLockTime(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.LockTime = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetLogicRead(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.LogicRead = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetOriginTime(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.OriginTime = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetPhysicAsyncRead(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.PhysicAsyncRead = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetPhysicSyncRead(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.PhysicSyncRead = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetReturnRows(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.ReturnRows = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetSQLText(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.SQLText = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetScanRows(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.ScanRows = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetSqlType(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.SqlType = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetState(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.State = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetThreadID(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.ThreadID = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetTransactionId(v string) *GetDasSQLLogHotDataResponseBodyDataList {
	s.TransactionId = &v
	return s
}

func (s *GetDasSQLLogHotDataResponseBodyDataList) SetUpdateRows(v int64) *GetDasSQLLogHotDataResponseBodyDataList {
	s.UpdateRows = &v
	return s
}

type GetDasSQLLogHotDataResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetDasSQLLogHotDataResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetDasSQLLogHotDataResponse) String() string {
	return tea.Prettify(s)
}

func (s GetDasSQLLogHotDataResponse) GoString() string {
	return s.String()
}

func (s *GetDasSQLLogHotDataResponse) SetHeaders(v map[string]*string) *GetDasSQLLogHotDataResponse {
	s.Headers = v
	return s
}

func (s *GetDasSQLLogHotDataResponse) SetStatusCode(v int32) *GetDasSQLLogHotDataResponse {
	s.StatusCode = &v
	return s
}

func (s *GetDasSQLLogHotDataResponse) SetBody(v *GetDasSQLLogHotDataResponseBody) *GetDasSQLLogHotDataResponse {
	s.Body = v
	return s
}

type GetEndpointSwitchTaskRequest struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Uid       *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Context   *string `json:"__context,omitempty" xml:"__context,omitempty"`
	AccessKey *string `json:"accessKey,omitempty" xml:"accessKey,omitempty"`
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	SkipAuth  *string `json:"skipAuth,omitempty" xml:"skipAuth,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetEndpointSwitchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEndpointSwitchTaskRequest) GoString() string {
	return s.String()
}

func (s *GetEndpointSwitchTaskRequest) SetTaskId(v string) *GetEndpointSwitchTaskRequest {
	s.TaskId = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetUid(v string) *GetEndpointSwitchTaskRequest {
	s.Uid = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetUserId(v string) *GetEndpointSwitchTaskRequest {
	s.UserId = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetContext(v string) *GetEndpointSwitchTaskRequest {
	s.Context = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetAccessKey(v string) *GetEndpointSwitchTaskRequest {
	s.AccessKey = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetSignature(v string) *GetEndpointSwitchTaskRequest {
	s.Signature = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetSkipAuth(v string) *GetEndpointSwitchTaskRequest {
	s.SkipAuth = &v
	return s
}

func (s *GetEndpointSwitchTaskRequest) SetTimestamp(v string) *GetEndpointSwitchTaskRequest {
	s.Timestamp = &v
	return s
}

type GetEndpointSwitchTaskResponseBody struct {
	Code      *string                                `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetEndpointSwitchTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string                                `json:"Success,omitempty" xml:"Success,omitempty"`
	Synchro   *string                                `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s GetEndpointSwitchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEndpointSwitchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *GetEndpointSwitchTaskResponseBody) SetCode(v string) *GetEndpointSwitchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetData(v *GetEndpointSwitchTaskResponseBodyData) *GetEndpointSwitchTaskResponseBody {
	s.Data = v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetMessage(v string) *GetEndpointSwitchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetRequestId(v string) *GetEndpointSwitchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetSuccess(v string) *GetEndpointSwitchTaskResponseBody {
	s.Success = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBody) SetSynchro(v string) *GetEndpointSwitchTaskResponseBody {
	s.Synchro = &v
	return s
}

type GetEndpointSwitchTaskResponseBodyData struct {
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	DbLinkId  *int64  `json:"DbLinkId,omitempty" xml:"DbLinkId,omitempty"`
	ErrMsg    *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	OriUuid   *string `json:"OriUuid,omitempty" xml:"OriUuid,omitempty"`
	Status    *string `json:"Status,omitempty" xml:"Status,omitempty"`
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Uuid      *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
}

func (s GetEndpointSwitchTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEndpointSwitchTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetAccountId(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetDbLinkId(v int64) *GetEndpointSwitchTaskResponseBodyData {
	s.DbLinkId = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetErrMsg(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.ErrMsg = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetOriUuid(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.OriUuid = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetStatus(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetTaskId(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetEndpointSwitchTaskResponseBodyData) SetUuid(v string) *GetEndpointSwitchTaskResponseBodyData {
	s.Uuid = &v
	return s
}

type GetEndpointSwitchTaskResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetEndpointSwitchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEndpointSwitchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEndpointSwitchTaskResponse) GoString() string {
	return s.String()
}

func (s *GetEndpointSwitchTaskResponse) SetHeaders(v map[string]*string) *GetEndpointSwitchTaskResponse {
	s.Headers = v
	return s
}

func (s *GetEndpointSwitchTaskResponse) SetStatusCode(v int32) *GetEndpointSwitchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEndpointSwitchTaskResponse) SetBody(v *GetEndpointSwitchTaskResponseBody) *GetEndpointSwitchTaskResponse {
	s.Body = v
	return s
}

type GetErrorRequestSampleRequest struct {
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval cannot exceed 24 hours.
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The SQL query ID. You can call the [GetAsyncErrorRequestListByCode](~~410746~~) operation to query the ID of the SQL query for which MySQL error code is returned.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
}

func (s GetErrorRequestSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetErrorRequestSampleRequest) GoString() string {
	return s.String()
}

func (s *GetErrorRequestSampleRequest) SetDbName(v string) *GetErrorRequestSampleRequest {
	s.DbName = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetEnd(v int64) *GetErrorRequestSampleRequest {
	s.End = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetInstanceId(v string) *GetErrorRequestSampleRequest {
	s.InstanceId = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetNodeId(v string) *GetErrorRequestSampleRequest {
	s.NodeId = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetSqlId(v string) *GetErrorRequestSampleRequest {
	s.SqlId = &v
	return s
}

func (s *GetErrorRequestSampleRequest) SetStart(v int64) *GetErrorRequestSampleRequest {
	s.Start = &v
	return s
}

type GetErrorRequestSampleResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data []*GetErrorRequestSampleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetErrorRequestSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetErrorRequestSampleResponseBody) GoString() string {
	return s.String()
}

func (s *GetErrorRequestSampleResponseBody) SetCode(v int64) *GetErrorRequestSampleResponseBody {
	s.Code = &v
	return s
}

func (s *GetErrorRequestSampleResponseBody) SetData(v []*GetErrorRequestSampleResponseBodyData) *GetErrorRequestSampleResponseBody {
	s.Data = v
	return s
}

func (s *GetErrorRequestSampleResponseBody) SetMessage(v string) *GetErrorRequestSampleResponseBody {
	s.Message = &v
	return s
}

func (s *GetErrorRequestSampleResponseBody) SetRequestId(v string) *GetErrorRequestSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetErrorRequestSampleResponseBody) SetSuccess(v bool) *GetErrorRequestSampleResponseBody {
	s.Success = &v
	return s
}

type GetErrorRequestSampleResponseBodyData struct {
	// The name of the database.
	Database *string `json:"database,omitempty" xml:"database,omitempty"`
	// The error code.
	ErrorCode *string `json:"errorCode,omitempty" xml:"errorCode,omitempty"`
	// The ID of the instance.
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The IP address of the client that executes the SQL statement.
	OriginHost *string `json:"originHost,omitempty" xml:"originHost,omitempty"`
	// The SQL statement.
	Sql *string `json:"sql,omitempty" xml:"sql,omitempty"`
	// The ID of the SQL query.
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
	// The table information.
	Tables []*string `json:"tables,omitempty" xml:"tables,omitempty" type:"Repeated"`
	// The time when the SQL query was executed. The value of this parameter is a UNIX timestamp. Unit: ms.
	Timestamp *int64 `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
	// The username of the account that is used to log on to the database.
	User *string `json:"user,omitempty" xml:"user,omitempty"`
}

func (s GetErrorRequestSampleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetErrorRequestSampleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetErrorRequestSampleResponseBodyData) SetDatabase(v string) *GetErrorRequestSampleResponseBodyData {
	s.Database = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetErrorCode(v string) *GetErrorRequestSampleResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetInstanceId(v string) *GetErrorRequestSampleResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetOriginHost(v string) *GetErrorRequestSampleResponseBodyData {
	s.OriginHost = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetSql(v string) *GetErrorRequestSampleResponseBodyData {
	s.Sql = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetSqlId(v string) *GetErrorRequestSampleResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetTables(v []*string) *GetErrorRequestSampleResponseBodyData {
	s.Tables = v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetTimestamp(v int64) *GetErrorRequestSampleResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *GetErrorRequestSampleResponseBodyData) SetUser(v string) *GetErrorRequestSampleResponseBodyData {
	s.User = &v
	return s
}

type GetErrorRequestSampleResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetErrorRequestSampleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetErrorRequestSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetErrorRequestSampleResponse) GoString() string {
	return s.String()
}

func (s *GetErrorRequestSampleResponse) SetHeaders(v map[string]*string) *GetErrorRequestSampleResponse {
	s.Headers = v
	return s
}

func (s *GetErrorRequestSampleResponse) SetStatusCode(v int32) *GetErrorRequestSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetErrorRequestSampleResponse) SetBody(v *GetErrorRequestSampleResponseBody) *GetErrorRequestSampleResponse {
	s.Body = v
	return s
}

type GetEventSubscriptionRequest struct {
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetEventSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionRequest) SetInstanceId(v string) *GetEventSubscriptionRequest {
	s.InstanceId = &v
	return s
}

type GetEventSubscriptionResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetEventSubscriptionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetEventSubscriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponseBody) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponseBody) SetCode(v string) *GetEventSubscriptionResponseBody {
	s.Code = &v
	return s
}

func (s *GetEventSubscriptionResponseBody) SetData(v *GetEventSubscriptionResponseBodyData) *GetEventSubscriptionResponseBody {
	s.Data = v
	return s
}

func (s *GetEventSubscriptionResponseBody) SetMessage(v string) *GetEventSubscriptionResponseBody {
	s.Message = &v
	return s
}

func (s *GetEventSubscriptionResponseBody) SetRequestId(v string) *GetEventSubscriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetEventSubscriptionResponseBody) SetSuccess(v string) *GetEventSubscriptionResponseBody {
	s.Success = &v
	return s
}

type GetEventSubscriptionResponseBodyData struct {
	// Indicates whether the event subscription feature is enabled. Valid values:
	//
	// *   **0**: The event subscription feature is disabled.
	// *   **1**: The event subscription feature is enabled.
	Active *int32 `json:"active,omitempty" xml:"active,omitempty"`
	// The notification method. Valid values:
	//
	// *   **hdm_alarm_sms**: text message.
	// *   **dingtalk**: DingTalk chatbot.
	// *   **hdm_alarm_sms_and_email**: text message and email.
	// *   **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
	ChannelType *string `json:"channelType,omitempty" xml:"channelType,omitempty"`
	// The name of the contact group that receives alert notifications. Multiple names are separated by commas (,).
	ContactGroupName *string `json:"contactGroupName,omitempty" xml:"contactGroupName,omitempty"`
	// The alert contact groups.
	ContactGroups []*GetEventSubscriptionResponseBodyDataContactGroups `json:"contactGroups,omitempty" xml:"contactGroups,omitempty" type:"Repeated"`
	// The name of the subscriber who receives alert notifications. Multiple names are separated by commas (,).
	ContactName *string `json:"contactName,omitempty" xml:"contactName,omitempty"`
	// The user ID.
	Contacts []*GetEventSubscriptionResponseBodyDataContacts `json:"contacts,omitempty" xml:"contacts,omitempty" type:"Repeated"`
	// The supported event scenarios. Only **AllContext** may be returned, which indicates that all scenarios are supported.
	EventContext *string `json:"eventContext,omitempty" xml:"eventContext,omitempty"`
	// The supported event scenarios in which event subscription can be sent.
	EventSendGroup []*string `json:"eventSendGroup,omitempty" xml:"eventSendGroup,omitempty" type:"Repeated"`
	// The time when event subscription was enabled. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	GmtCreate *int64 `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// The time when the event subscription settings were most recently modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	GmtModified *int64 `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// The primary key ID of the database.
	Id *int64 `json:"id,omitempty" xml:"id,omitempty"`
	// The instance ID.
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The language of event notifications. Only **zh-CN** may be returned, which indicates that event notifications are sent in Chinese.
	Lang *string `json:"lang,omitempty" xml:"lang,omitempty"`
	// The risk level of the events that trigger notifications. Valid values:
	//
	// *   **Notice**
	// *   **Optimization**
	// *   **Warn**
	// *   **Critical**
	Level *string `json:"level,omitempty" xml:"level,omitempty"`
	// The minimum interval between event notifications. Unit: seconds.
	MinInterval *string `json:"minInterval,omitempty" xml:"minInterval,omitempty"`
	// The user ID.
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GetEventSubscriptionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponseBodyData) SetActive(v int32) *GetEventSubscriptionResponseBodyData {
	s.Active = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetChannelType(v string) *GetEventSubscriptionResponseBodyData {
	s.ChannelType = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetContactGroupName(v string) *GetEventSubscriptionResponseBodyData {
	s.ContactGroupName = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetContactGroups(v []*GetEventSubscriptionResponseBodyDataContactGroups) *GetEventSubscriptionResponseBodyData {
	s.ContactGroups = v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetContactName(v string) *GetEventSubscriptionResponseBodyData {
	s.ContactName = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetContacts(v []*GetEventSubscriptionResponseBodyDataContacts) *GetEventSubscriptionResponseBodyData {
	s.Contacts = v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetEventContext(v string) *GetEventSubscriptionResponseBodyData {
	s.EventContext = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetEventSendGroup(v []*string) *GetEventSubscriptionResponseBodyData {
	s.EventSendGroup = v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetGmtCreate(v int64) *GetEventSubscriptionResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetGmtModified(v int64) *GetEventSubscriptionResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetId(v int64) *GetEventSubscriptionResponseBodyData {
	s.Id = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetInstanceId(v string) *GetEventSubscriptionResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetLang(v string) *GetEventSubscriptionResponseBodyData {
	s.Lang = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetLevel(v string) *GetEventSubscriptionResponseBodyData {
	s.Level = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetMinInterval(v string) *GetEventSubscriptionResponseBodyData {
	s.MinInterval = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyData) SetUserId(v string) *GetEventSubscriptionResponseBodyData {
	s.UserId = &v
	return s
}

type GetEventSubscriptionResponseBodyDataContactGroups struct {
	// The members of the alert contact group.
	Contacts *string `json:"contacts,omitempty" xml:"contacts,omitempty"`
	// The description of the alert contact group.
	Description *string `json:"description,omitempty" xml:"description,omitempty"`
	// The name of the alert contact group.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The user ID.
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GetEventSubscriptionResponseBodyDataContactGroups) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponseBodyDataContactGroups) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponseBodyDataContactGroups) SetContacts(v string) *GetEventSubscriptionResponseBodyDataContactGroups {
	s.Contacts = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContactGroups) SetDescription(v string) *GetEventSubscriptionResponseBodyDataContactGroups {
	s.Description = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContactGroups) SetName(v string) *GetEventSubscriptionResponseBodyDataContactGroups {
	s.Name = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContactGroups) SetUserId(v string) *GetEventSubscriptionResponseBodyDataContactGroups {
	s.UserId = &v
	return s
}

type GetEventSubscriptionResponseBodyDataContacts struct {
	// The webhook URL of the DingTalk chatbot.
	DingtalkHook *string `json:"dingtalkHook,omitempty" xml:"dingtalkHook,omitempty"`
	// The email address of the alert contact.
	Email *string `json:"email,omitempty" xml:"email,omitempty"`
	// The contact groups to which the alert contact belongs.
	Groups []*string `json:"groups,omitempty" xml:"groups,omitempty" type:"Repeated"`
	// Indicates whether the alert contact name is the same as the contact name on CloudMonitor.
	//
	// * **true**
	// * **false**
	IsCmsReduplicated *bool `json:"isCmsReduplicated,omitempty" xml:"isCmsReduplicated,omitempty"`
	// The name of the alert contact.
	Name *string `json:"name,omitempty" xml:"name,omitempty"`
	// The mobile number of the alert contact.
	Phone *string `json:"phone,omitempty" xml:"phone,omitempty"`
	// The user ID.
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s GetEventSubscriptionResponseBodyDataContacts) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponseBodyDataContacts) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetDingtalkHook(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.DingtalkHook = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetEmail(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.Email = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetGroups(v []*string) *GetEventSubscriptionResponseBodyDataContacts {
	s.Groups = v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetIsCmsReduplicated(v bool) *GetEventSubscriptionResponseBodyDataContacts {
	s.IsCmsReduplicated = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetName(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.Name = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetPhone(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.Phone = &v
	return s
}

func (s *GetEventSubscriptionResponseBodyDataContacts) SetUserId(v string) *GetEventSubscriptionResponseBodyDataContacts {
	s.UserId = &v
	return s
}

type GetEventSubscriptionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetEventSubscriptionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetEventSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetEventSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *GetEventSubscriptionResponse) SetHeaders(v map[string]*string) *GetEventSubscriptionResponse {
	s.Headers = v
	return s
}

func (s *GetEventSubscriptionResponse) SetStatusCode(v int32) *GetEventSubscriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetEventSubscriptionResponse) SetBody(v *GetEventSubscriptionResponseBody) *GetEventSubscriptionResponse {
	s.Body = v
	return s
}

type GetFullRequestOriginStatByInstanceIdRequest struct {
	// Specifies whether to sort the results in ascending order. By default, the results are not sorted in ascending order.
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The field by which the results to be returned are sorted. Default value: **count**. Valid values:
	//
	// *   **count**: the number of executions.
	// *   **avgRt**: the average execution duration.
	// *   **rtRate**: the execution duration percentage.
	// *   **rowsExamined**: the total number of scanned rows.
	// *   **avgRowsExamined**: the average number of scanned rows.
	// *   **avgRowsReturned**: the average number of returned rows.
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The role of the PolarDB-X 2.0 node. Valid values:
	//
	// *   **polarx_cn**: compute node.
	// *   **polarx_en**: data node.
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **LOGIN**, **LOGOUT**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
	//
	// >  If the database instance is an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, or a PolarDB-X 2.0 instance, the statistics can be collected based on the SQL statement type.
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer of the database instance, and can be up to 90 days earlier than the current time.
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdRequest) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetAsc(v bool) *GetFullRequestOriginStatByInstanceIdRequest {
	s.Asc = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetEnd(v int64) *GetFullRequestOriginStatByInstanceIdRequest {
	s.End = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetInstanceId(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.InstanceId = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetNodeId(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.NodeId = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetOrderBy(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.OrderBy = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetPageNo(v int32) *GetFullRequestOriginStatByInstanceIdRequest {
	s.PageNo = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetPageSize(v int32) *GetFullRequestOriginStatByInstanceIdRequest {
	s.PageSize = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetRole(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.Role = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetSqlType(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.SqlType = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetStart(v int64) *GetFullRequestOriginStatByInstanceIdRequest {
	s.Start = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdRequest) SetUserId(v string) *GetFullRequestOriginStatByInstanceIdRequest {
	s.UserId = &v
	return s
}

type GetFullRequestOriginStatByInstanceIdResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetFullRequestOriginStatByInstanceIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetCode(v int64) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetData(v *GetFullRequestOriginStatByInstanceIdResponseBodyData) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.Data = v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetMessage(v string) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetRequestId(v string) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBody) SetSuccess(v bool) *GetFullRequestOriginStatByInstanceIdResponseBody {
	s.Success = &v
	return s
}

type GetFullRequestOriginStatByInstanceIdResponseBodyData struct {
	// The details of the full request data.
	List []*GetFullRequestOriginStatByInstanceIdResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyData) SetList(v []*GetFullRequestOriginStatByInstanceIdResponseBodyDataList) *GetFullRequestOriginStatByInstanceIdResponseBodyData {
	s.List = v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyData) SetTotal(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyData {
	s.Total = &v
	return s
}

type GetFullRequestOriginStatByInstanceIdResponseBodyDataList struct {
	// The average number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	AvgExaminedRows *float64 `json:"AvgExaminedRows,omitempty" xml:"AvgExaminedRows,omitempty"`
	// The average number of rows that are fetched from data nodes by compute nodes on the PolarDB-X 2.0 instance.
	AvgFetchRows *int64 `json:"AvgFetchRows,omitempty" xml:"AvgFetchRows,omitempty"`
	// The average lock wait duration. Unit: seconds.
	AvgLockWaitTime *float64 `json:"AvgLockWaitTime,omitempty" xml:"AvgLockWaitTime,omitempty"`
	// The average number of logical reads.
	AvgLogicalRead *float64 `json:"AvgLogicalRead,omitempty" xml:"AvgLogicalRead,omitempty"`
	// The average number of physical asynchronous reads.
	AvgPhysicalAsyncRead *int64 `json:"AvgPhysicalAsyncRead,omitempty" xml:"AvgPhysicalAsyncRead,omitempty"`
	// The average number of physical synchronous reads.
	AvgPhysicalSyncRead *float64 `json:"AvgPhysicalSyncRead,omitempty" xml:"AvgPhysicalSyncRead,omitempty"`
	// The average number of returned rows.
	AvgReturnedRows *float64 `json:"AvgReturnedRows,omitempty" xml:"AvgReturnedRows,omitempty"`
	// The average number of rows.
	AvgRows *int64 `json:"AvgRows,omitempty" xml:"AvgRows,omitempty"`
	// The average execution duration.
	AvgRt *float64 `json:"AvgRt,omitempty" xml:"AvgRt,omitempty"`
	// The average number of SQL statements.
	AvgSqlCount *int64 `json:"AvgSqlCount,omitempty" xml:"AvgSqlCount,omitempty"`
	// The average number of updated rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL and PolarDB-X 2.0 databases.
	AvgUpdatedRows *float64 `json:"AvgUpdatedRows,omitempty" xml:"AvgUpdatedRows,omitempty"`
	// The total number of executions.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The percentage of the total number of executions.
	CountRate *float64 `json:"CountRate,omitempty" xml:"CountRate,omitempty"`
	// The name of the database.
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The number of failed executions.
	ErrorCount *int64 `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	// The total number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	ExaminedRows *int64 `json:"ExaminedRows,omitempty" xml:"ExaminedRows,omitempty"`
	// The number of rows that are fetched from data nodes by compute nodes on the PolarDB-X 2.0 instance.
	FetchRows *int64 `json:"FetchRows,omitempty" xml:"FetchRows,omitempty"`
	// The network address of the database instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The IP address of the client that executes the SQL statement.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The lock wait duration. Unit: seconds.
	LockWaitTime *float64 `json:"LockWaitTime,omitempty" xml:"LockWaitTime,omitempty"`
	// The number of logical reads.
	LogicalRead *int64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The IP address of the client that executes the SQL statement.
	OriginHost *string `json:"OriginHost,omitempty" xml:"OriginHost,omitempty"`
	// The number of physical asynchronous reads.
	PhysicalAsyncRead *int64 `json:"PhysicalAsyncRead,omitempty" xml:"PhysicalAsyncRead,omitempty"`
	// The number of physical synchronous reads.
	PhysicalSyncRead *int64 `json:"PhysicalSyncRead,omitempty" xml:"PhysicalSyncRead,omitempty"`
	// The port number that is used to connect to the database instance.
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The total number of rows updated or returned by the compute nodes of the PolarDB-X 2.0 instance.
	Rows *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The number of SQL statements that take longer than 1 second to execute.
	RtGreaterThanOneSecondCount *int64 `json:"RtGreaterThanOneSecondCount,omitempty" xml:"RtGreaterThanOneSecondCount,omitempty"`
	// The execution duration percentage.
	RtRate *float64 `json:"RtRate,omitempty" xml:"RtRate,omitempty"`
	// The number of SQL statements.
	SqlCount *int64 `json:"SqlCount,omitempty" xml:"SqlCount,omitempty"`
	// The total number of updated rows.
	SumUpdatedRows *int64 `json:"SumUpdatedRows,omitempty" xml:"SumUpdatedRows,omitempty"`
	// The version number.
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
	// The virtual private cloud (VPC) ID.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetFullRequestOriginStatByInstanceIdResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgExaminedRows(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgExaminedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgFetchRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgFetchRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgLockWaitTime(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgLockWaitTime = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgLogicalRead(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgLogicalRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgPhysicalAsyncRead(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgPhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgPhysicalSyncRead(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgPhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgReturnedRows(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgReturnedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgRt(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgRt = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgSqlCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgSqlCount = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetAvgUpdatedRows(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.AvgUpdatedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Count = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetCountRate(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.CountRate = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetDatabase(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Database = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetErrorCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.ErrorCount = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetExaminedRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.ExaminedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetFetchRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.FetchRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetIp(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Ip = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetKey(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Key = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetLockWaitTime(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.LockWaitTime = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetLogicalRead(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.LogicalRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetOriginHost(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.OriginHost = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetPhysicalAsyncRead(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.PhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetPhysicalSyncRead(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.PhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetPort(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Port = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Rows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetRtGreaterThanOneSecondCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.RtGreaterThanOneSecondCount = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetRtRate(v float64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.RtRate = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetSqlCount(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.SqlCount = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetSumUpdatedRows(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.SumUpdatedRows = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetVersion(v int64) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.Version = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponseBodyDataList) SetVpcId(v string) *GetFullRequestOriginStatByInstanceIdResponseBodyDataList {
	s.VpcId = &v
	return s
}

type GetFullRequestOriginStatByInstanceIdResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetFullRequestOriginStatByInstanceIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFullRequestOriginStatByInstanceIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestOriginStatByInstanceIdResponse) GoString() string {
	return s.String()
}

func (s *GetFullRequestOriginStatByInstanceIdResponse) SetHeaders(v map[string]*string) *GetFullRequestOriginStatByInstanceIdResponse {
	s.Headers = v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponse) SetStatusCode(v int32) *GetFullRequestOriginStatByInstanceIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFullRequestOriginStatByInstanceIdResponse) SetBody(v *GetFullRequestOriginStatByInstanceIdResponseBody) *GetFullRequestOriginStatByInstanceIdResponse {
	s.Body = v
	return s
}

type GetFullRequestSampleByInstanceIdRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval between the start time and the end time must be equal to or greater than 1 hour.
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The role of the PolarDB-X 2.0 node. Valid values:
	//
	// *   **polarx_cn**: compute node.
	// *   **polarx_en**: data node.
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The SQL statement ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time must be within the storage duration of the SQL Explorer feature of the database instance, and can be up to 90 days earlier than the current time.
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The ID of the Alibaba Cloud account that is used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the account ID based on the value of InstanceId when you call this operation.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetFullRequestSampleByInstanceIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestSampleByInstanceIdRequest) GoString() string {
	return s.String()
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetEnd(v int64) *GetFullRequestSampleByInstanceIdRequest {
	s.End = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetInstanceId(v string) *GetFullRequestSampleByInstanceIdRequest {
	s.InstanceId = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetRole(v string) *GetFullRequestSampleByInstanceIdRequest {
	s.Role = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetSqlId(v string) *GetFullRequestSampleByInstanceIdRequest {
	s.SqlId = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetStart(v int64) *GetFullRequestSampleByInstanceIdRequest {
	s.Start = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdRequest) SetUserId(v string) *GetFullRequestSampleByInstanceIdRequest {
	s.UserId = &v
	return s
}

type GetFullRequestSampleByInstanceIdResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data []*GetFullRequestSampleByInstanceIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFullRequestSampleByInstanceIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestSampleByInstanceIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetCode(v int64) *GetFullRequestSampleByInstanceIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetData(v []*GetFullRequestSampleByInstanceIdResponseBodyData) *GetFullRequestSampleByInstanceIdResponseBody {
	s.Data = v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetMessage(v string) *GetFullRequestSampleByInstanceIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetRequestId(v string) *GetFullRequestSampleByInstanceIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBody) SetSuccess(v bool) *GetFullRequestSampleByInstanceIdResponseBody {
	s.Success = &v
	return s
}

type GetFullRequestSampleByInstanceIdResponseBodyData struct {
	// The name of the database.
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The number of rows fetched by PolarDB-X 2.0 compute nodes.
	Frows *int64 `json:"Frows,omitempty" xml:"Frows,omitempty"`
	// The lock wait duration. Unit: seconds.
	LockWaitTime *float64 `json:"LockWaitTime,omitempty" xml:"LockWaitTime,omitempty"`
	// The number of logical reads.
	LogicalRead *float64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The source IP address.
	OriginHost *string `json:"OriginHost,omitempty" xml:"OriginHost,omitempty"`
	// The number of physical asynchronous reads.
	PhysicalAsyncRead *float64 `json:"PhysicalAsyncRead,omitempty" xml:"PhysicalAsyncRead,omitempty"`
	// The number of physical synchronous reads.
	PhysicalSyncRead *float64 `json:"PhysicalSyncRead,omitempty" xml:"PhysicalSyncRead,omitempty"`
	// The number of rows updated or returned on PolarDB-X 2.0 compute nodes.
	Rows *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The total number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	RowsExamined *int64 `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty"`
	// The number of rows returned by the SQL statement.
	RowsReturned *int64 `json:"RowsReturned,omitempty" xml:"RowsReturned,omitempty"`
	// The amount of time consumed to execute the SQL statement. Unit: seconds.
	Rt *float64 `json:"Rt,omitempty" xml:"Rt,omitempty"`
	// The number of scanned rows.
	ScanRows *int64 `json:"ScanRows,omitempty" xml:"ScanRows,omitempty"`
	// The number of requests sent from PolarDB-X 2.0 compute nodes to data nodes.
	Scnt *int64 `json:"Scnt,omitempty" xml:"Scnt,omitempty"`
	// The sample SQL statement.
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
	// The SQL statement ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **LOGIN**, **LOGOUT**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The time when the SQL statement was executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The number of updated rows.
	UpdateRows *int64 `json:"UpdateRows,omitempty" xml:"UpdateRows,omitempty"`
	// The name of the user who executes the SQL statement.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetFullRequestSampleByInstanceIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestSampleByInstanceIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetDatabase(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Database = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetFrows(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Frows = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetLockWaitTime(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.LockWaitTime = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetLogicalRead(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.LogicalRead = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetOriginHost(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.OriginHost = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetPhysicalAsyncRead(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.PhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetPhysicalSyncRead(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.PhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetRows(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Rows = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetRowsExamined(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.RowsExamined = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetRowsReturned(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.RowsReturned = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetRt(v float64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Rt = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetScanRows(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.ScanRows = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetScnt(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Scnt = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetSql(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Sql = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetSqlId(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetSqlType(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.SqlType = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetTimestamp(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetUpdateRows(v int64) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.UpdateRows = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponseBodyData) SetUser(v string) *GetFullRequestSampleByInstanceIdResponseBodyData {
	s.User = &v
	return s
}

type GetFullRequestSampleByInstanceIdResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetFullRequestSampleByInstanceIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFullRequestSampleByInstanceIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestSampleByInstanceIdResponse) GoString() string {
	return s.String()
}

func (s *GetFullRequestSampleByInstanceIdResponse) SetHeaders(v map[string]*string) *GetFullRequestSampleByInstanceIdResponse {
	s.Headers = v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponse) SetStatusCode(v int32) *GetFullRequestSampleByInstanceIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFullRequestSampleByInstanceIdResponse) SetBody(v *GetFullRequestSampleByInstanceIdResponseBody) *GetFullRequestSampleByInstanceIdResponse {
	s.Body = v
	return s
}

type GetFullRequestStatResultByInstanceIdRequest struct {
	// Specifies whether to sort the results in ascending order. By default, the results are not sorted in ascending order.
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The name of the database.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. The interval cannot exceed one day.
	End *int64 `json:"End,omitempty" xml:"End,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The keywords that are used for query.
	Keyword *string `json:"Keyword,omitempty" xml:"Keyword,omitempty"`
	// The node ID.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The field by which to sort the returned entries. Default value: **count**. Valid values:
	//
	// *   **count**: the number of executions.
	// *   **avgRt**: the average execution duration.
	// *   **rtRate**: the execution duration percentage.
	// *   **rowsExamined**: the total number of scanned rows.
	// *   **avgRowsExamined**: the average number of scanned rows.
	// *   **avgRowsReturned**: the average number of returned rows.
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The IP address of the client that executes the SQL statement.
	//
	// >  This parameter is optional. If this parameter is specified, the full request statistics of the specified IP address are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
	OriginHost *string `json:"OriginHost,omitempty" xml:"OriginHost,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 20.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The role of the PolarDB-X 2.0 node. Valid values:
	//
	// *   **polarx_cn**: compute node
	// *   **polarx_en**: data node
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
	// The SQL ID.
	//
	// >  If this parameter is specified, the full request statistics of the specified SQL query are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The type of the SQL statement. Valid values: **SELECT**, **INSERT**, **UPDATE**, **DELETE**, **LOGIN**, **LOGOUT**, **MERGE**, **ALTER**, **CREATEINDEX**, **DROPINDEX**, **CREATE**, **DROP**, **SET**, **DESC**, **REPLACE**, **CALL**, **BEGIN**, **DESCRIBE**, **ROLLBACK**, **FLUSH**, **USE**, **SHOW**, **START**, **COMMIT**, and **RENAME**.
	//
	// >  If your database instance is an ApsaraDB RDS for MySQL instance, a PolarDB for MySQL cluster, or a PolarDB-X 2.0 instance, the statistics can be collected based on the SQL statement type.
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The start time can be up to 90 days earlier than the current time.
	Start *int64 `json:"Start,omitempty" xml:"Start,omitempty"`
	// The ID of the Alibaba Cloud account that was used to create the database instance.
	//
	// >  This parameter is optional. The system can automatically obtain the Alibaba Cloud account ID based on the value of InstanceId when you call the GetFullRequestOriginStatByInstanceId operation.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdRequest) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdRequest) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetAsc(v bool) *GetFullRequestStatResultByInstanceIdRequest {
	s.Asc = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetDbName(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.DbName = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetEnd(v int64) *GetFullRequestStatResultByInstanceIdRequest {
	s.End = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetInstanceId(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.InstanceId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetKeyword(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.Keyword = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetNodeId(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.NodeId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetOrderBy(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.OrderBy = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetOriginHost(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.OriginHost = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetPageNo(v int32) *GetFullRequestStatResultByInstanceIdRequest {
	s.PageNo = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetPageSize(v int32) *GetFullRequestStatResultByInstanceIdRequest {
	s.PageSize = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetRole(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.Role = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetSqlId(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.SqlId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetSqlType(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.SqlType = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetStart(v int64) *GetFullRequestStatResultByInstanceIdRequest {
	s.Start = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdRequest) SetUserId(v string) *GetFullRequestStatResultByInstanceIdRequest {
	s.UserId = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetFullRequestStatResultByInstanceIdResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponseBody) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetCode(v int64) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.Code = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetData(v *GetFullRequestStatResultByInstanceIdResponseBodyData) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.Data = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetMessage(v string) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.Message = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetRequestId(v string) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBody) SetSuccess(v bool) *GetFullRequestStatResultByInstanceIdResponseBody {
	s.Success = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponseBodyData struct {
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// *   **true**
	// *   **false**
	Fail *bool `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// The returned full request data.
	Result *GetFullRequestStatResultByInstanceIdResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Struct"`
	// The request ID.
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// *   **RUNNING**
	// *   **SUCCESS**
	// *   **FAIL**
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the asynchronous request was sent. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetFail(v bool) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetIsFinish(v bool) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetResult(v *GetFullRequestStatResultByInstanceIdResponseBodyDataResult) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.Result = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetResultId(v string) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetState(v string) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.State = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyData) SetTimestamp(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponseBodyDataResult struct {
	// The full request data.
	List []*GetFullRequestStatResultByInstanceIdResponseBodyDataResultList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResult) SetList(v []*GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) *GetFullRequestStatResultByInstanceIdResponseBodyDataResult {
	s.List = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResult) SetTotal(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResult {
	s.Total = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponseBodyDataResultList struct {
	// The average number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	AvgExaminedRows *float64 `json:"AvgExaminedRows,omitempty" xml:"AvgExaminedRows,omitempty"`
	// The average number of rows that are fetched by compute nodes from data nodes on the PolarDB-X 2.0 instance.
	AvgFetchRows *int64 `json:"AvgFetchRows,omitempty" xml:"AvgFetchRows,omitempty"`
	// The average lock wait latency. Unit: seconds.
	AvgLockWaitTime *float64 `json:"AvgLockWaitTime,omitempty" xml:"AvgLockWaitTime,omitempty"`
	// The average number of logical reads.
	AvgLogicalRead *float64 `json:"AvgLogicalRead,omitempty" xml:"AvgLogicalRead,omitempty"`
	// The average number of physical asynchronous reads.
	AvgPhysicalAsyncRead *int64 `json:"AvgPhysicalAsyncRead,omitempty" xml:"AvgPhysicalAsyncRead,omitempty"`
	// The average number of physical synchronous reads.
	AvgPhysicalSyncRead *int64 `json:"AvgPhysicalSyncRead,omitempty" xml:"AvgPhysicalSyncRead,omitempty"`
	// The average number of returned rows.
	AvgReturnedRows *float64 `json:"AvgReturnedRows,omitempty" xml:"AvgReturnedRows,omitempty"`
	// The average execution duration.
	AvgRt *float64 `json:"AvgRt,omitempty" xml:"AvgRt,omitempty"`
	// The average number of SQL statements.
	AvgSqlCount *int64 `json:"AvgSqlCount,omitempty" xml:"AvgSqlCount,omitempty"`
	// The average number of updated rows.
	//
	//  > This parameter is returned only for ApsaraDB RDS for MySQL and PolarDB-X 2.0 databases.
	AvgUpdatedRows *int64 `json:"AvgUpdatedRows,omitempty" xml:"AvgUpdatedRows,omitempty"`
	// The total number of executions.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The percentage of the total number of executions.
	CountRate *float64 `json:"CountRate,omitempty" xml:"CountRate,omitempty"`
	// The name of the database.
	Database *string `json:"Database,omitempty" xml:"Database,omitempty"`
	// The number of failed executions.
	ErrorCount *int64 `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	// The total number of scanned rows.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL, ApsaraDB RDS for PostgreSQL, and PolarDB for MySQL databases.
	ExaminedRows *int64 `json:"ExaminedRows,omitempty" xml:"ExaminedRows,omitempty"`
	// The number of rows that are fetched by compute nodes from data nodes on the PolarDB-X 2.0 instance.
	FetchRows *int64 `json:"FetchRows,omitempty" xml:"FetchRows,omitempty"`
	// The IP address of the database instance.
	Ip *string `json:"Ip,omitempty" xml:"Ip,omitempty"`
	// The lock wait latency. Unit: seconds.
	LockWaitTime *float64 `json:"LockWaitTime,omitempty" xml:"LockWaitTime,omitempty"`
	// The number of logical reads.
	LogicalRead *int64 `json:"LogicalRead,omitempty" xml:"LogicalRead,omitempty"`
	// The number of physical asynchronous reads.
	PhysicalAsyncRead *int64 `json:"PhysicalAsyncRead,omitempty" xml:"PhysicalAsyncRead,omitempty"`
	// The number of physical synchronous reads.
	PhysicalSyncRead *int64 `json:"PhysicalSyncRead,omitempty" xml:"PhysicalSyncRead,omitempty"`
	// The port number that is used to connect to the database instance.
	Port *int64 `json:"Port,omitempty" xml:"Port,omitempty"`
	// The SQL template.
	Psql *string `json:"Psql,omitempty" xml:"Psql,omitempty"`
	// The total number of rows updated or returned by the compute nodes of the PolarDB-X 2.0 instance.
	Rows *int64 `json:"Rows,omitempty" xml:"Rows,omitempty"`
	// The number of SQL statements that take longer than 1 second to execute.
	RtGreaterThanOneSecondCount *int64 `json:"RtGreaterThanOneSecondCount,omitempty" xml:"RtGreaterThanOneSecondCount,omitempty"`
	// The execution duration percentage.
	RtRate *float64 `json:"RtRate,omitempty" xml:"RtRate,omitempty"`
	// The number of SQL statements.
	SqlCount *int64 `json:"SqlCount,omitempty" xml:"SqlCount,omitempty"`
	// The SQL ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The total number of updated rows.
	SumUpdatedRows *int64 `json:"SumUpdatedRows,omitempty" xml:"SumUpdatedRows,omitempty"`
	// The names of tables in the database.
	Tables []*string `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The version number.
	Version *int64 `json:"Version,omitempty" xml:"Version,omitempty"`
	// The virtual private cloud (VPC) ID.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgExaminedRows(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgExaminedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgFetchRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgFetchRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgLockWaitTime(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgLockWaitTime = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgLogicalRead(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgLogicalRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgPhysicalAsyncRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgPhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgPhysicalSyncRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgPhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgReturnedRows(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgReturnedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgRt(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgRt = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgSqlCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgSqlCount = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetAvgUpdatedRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.AvgUpdatedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Count = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetCountRate(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.CountRate = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetDatabase(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Database = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetErrorCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.ErrorCount = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetExaminedRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.ExaminedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetFetchRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.FetchRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetIp(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Ip = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetLockWaitTime(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.LockWaitTime = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetLogicalRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.LogicalRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetPhysicalAsyncRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.PhysicalAsyncRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetPhysicalSyncRead(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.PhysicalSyncRead = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetPort(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Port = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetPsql(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Psql = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Rows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetRtGreaterThanOneSecondCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.RtGreaterThanOneSecondCount = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetRtRate(v float64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.RtRate = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetSqlCount(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.SqlCount = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetSqlId(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.SqlId = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetSumUpdatedRows(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.SumUpdatedRows = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetTables(v []*string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Tables = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetVersion(v int64) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.Version = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList) SetVpcId(v string) *GetFullRequestStatResultByInstanceIdResponseBodyDataResultList {
	s.VpcId = &v
	return s
}

type GetFullRequestStatResultByInstanceIdResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetFullRequestStatResultByInstanceIdResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetFullRequestStatResultByInstanceIdResponse) String() string {
	return tea.Prettify(s)
}

func (s GetFullRequestStatResultByInstanceIdResponse) GoString() string {
	return s.String()
}

func (s *GetFullRequestStatResultByInstanceIdResponse) SetHeaders(v map[string]*string) *GetFullRequestStatResultByInstanceIdResponse {
	s.Headers = v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponse) SetStatusCode(v int32) *GetFullRequestStatResultByInstanceIdResponse {
	s.StatusCode = &v
	return s
}

func (s *GetFullRequestStatResultByInstanceIdResponse) SetBody(v *GetFullRequestStatResultByInstanceIdResponseBody) *GetFullRequestStatResultByInstanceIdResponse {
	s.Body = v
	return s
}

type GetHDMAliyunResourceSyncResultRequest struct {
	TaskId    *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	Uid       *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Context   *string `json:"__context,omitempty" xml:"__context,omitempty"`
	AccessKey *string `json:"accessKey,omitempty" xml:"accessKey,omitempty"`
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	SkipAuth  *string `json:"skipAuth,omitempty" xml:"skipAuth,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultRequest) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetTaskId(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.TaskId = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetUid(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.Uid = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetUserId(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.UserId = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetContext(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.Context = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetAccessKey(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.AccessKey = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetSignature(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.Signature = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetSkipAuth(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.SkipAuth = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultRequest) SetTimestamp(v string) *GetHDMAliyunResourceSyncResultRequest {
	s.Timestamp = &v
	return s
}

type GetHDMAliyunResourceSyncResultResponseBody struct {
	Code      *string                                         `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetHDMAliyunResourceSyncResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                         `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                         `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string                                         `json:"Success,omitempty" xml:"Success,omitempty"`
	Synchro   *string                                         `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetCode(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetData(v *GetHDMAliyunResourceSyncResultResponseBodyData) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Data = v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetMessage(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetRequestId(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetSuccess(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Success = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBody) SetSynchro(v string) *GetHDMAliyunResourceSyncResultResponseBody {
	s.Synchro = &v
	return s
}

type GetHDMAliyunResourceSyncResultResponseBodyData struct {
	ErrorMsg   *string                                                   `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	Results    *string                                                   `json:"Results,omitempty" xml:"Results,omitempty"`
	SubResults *GetHDMAliyunResourceSyncResultResponseBodyDataSubResults `json:"SubResults,omitempty" xml:"SubResults,omitempty" type:"Struct"`
	SyncStatus *string                                                   `json:"SyncStatus,omitempty" xml:"SyncStatus,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyData) SetErrorMsg(v string) *GetHDMAliyunResourceSyncResultResponseBodyData {
	s.ErrorMsg = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyData) SetResults(v string) *GetHDMAliyunResourceSyncResultResponseBodyData {
	s.Results = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyData) SetSubResults(v *GetHDMAliyunResourceSyncResultResponseBodyDataSubResults) *GetHDMAliyunResourceSyncResultResponseBodyData {
	s.SubResults = v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyData) SetSyncStatus(v string) *GetHDMAliyunResourceSyncResultResponseBodyData {
	s.SyncStatus = &v
	return s
}

type GetHDMAliyunResourceSyncResultResponseBodyDataSubResults struct {
	ResourceSyncSubResult []*GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult `json:"ResourceSyncSubResult,omitempty" xml:"ResourceSyncSubResult,omitempty" type:"Repeated"`
}

func (s GetHDMAliyunResourceSyncResultResponseBodyDataSubResults) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponseBodyDataSubResults) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResults) SetResourceSyncSubResult(v []*GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResults {
	s.ResourceSyncSubResult = v
	return s
}

type GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult struct {
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	SyncCount    *int32  `json:"SyncCount,omitempty" xml:"SyncCount,omitempty"`
}

func (s GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetErrMsg(v string) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.ErrMsg = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetResourceType(v string) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.ResourceType = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetSuccess(v bool) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.Success = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetSyncCount(v int32) *GetHDMAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.SyncCount = &v
	return s
}

type GetHDMAliyunResourceSyncResultResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetHDMAliyunResourceSyncResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetHDMAliyunResourceSyncResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHDMAliyunResourceSyncResultResponse) GoString() string {
	return s.String()
}

func (s *GetHDMAliyunResourceSyncResultResponse) SetHeaders(v map[string]*string) *GetHDMAliyunResourceSyncResultResponse {
	s.Headers = v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponse) SetStatusCode(v int32) *GetHDMAliyunResourceSyncResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHDMAliyunResourceSyncResultResponse) SetBody(v *GetHDMAliyunResourceSyncResultResponseBody) *GetHDMAliyunResourceSyncResultResponse {
	s.Body = v
	return s
}

type GetHDMLastAliyunResourceSyncResultRequest struct {
	Uid       *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId    *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	Context   *string `json:"__context,omitempty" xml:"__context,omitempty"`
	AccessKey *string `json:"accessKey,omitempty" xml:"accessKey,omitempty"`
	Signature *string `json:"signature,omitempty" xml:"signature,omitempty"`
	SkipAuth  *string `json:"skipAuth,omitempty" xml:"skipAuth,omitempty"`
	Timestamp *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultRequest) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetUid(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.Uid = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetUserId(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.UserId = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetContext(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.Context = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetAccessKey(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.AccessKey = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetSignature(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.Signature = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetSkipAuth(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.SkipAuth = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultRequest) SetTimestamp(v string) *GetHDMLastAliyunResourceSyncResultRequest {
	s.Timestamp = &v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponseBody struct {
	Code      *string                                             `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *GetHDMLastAliyunResourceSyncResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	Message   *string                                             `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string                                             `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string                                             `json:"Success,omitempty" xml:"Success,omitempty"`
	Synchro   *string                                             `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetCode(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetData(v *GetHDMLastAliyunResourceSyncResultResponseBodyData) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Data = v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetMessage(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetRequestId(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetSuccess(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Success = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBody) SetSynchro(v string) *GetHDMLastAliyunResourceSyncResultResponseBody {
	s.Synchro = &v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponseBodyData struct {
	ErrorMsg   *string                                                       `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	Results    *string                                                       `json:"Results,omitempty" xml:"Results,omitempty"`
	SubResults *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults `json:"SubResults,omitempty" xml:"SubResults,omitempty" type:"Struct"`
	SyncStatus *string                                                       `json:"SyncStatus,omitempty" xml:"SyncStatus,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyData) SetErrorMsg(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyData {
	s.ErrorMsg = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyData) SetResults(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyData {
	s.Results = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyData) SetSubResults(v *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults) *GetHDMLastAliyunResourceSyncResultResponseBodyData {
	s.SubResults = v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyData) SetSyncStatus(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyData {
	s.SyncStatus = &v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults struct {
	ResourceSyncSubResult []*GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult `json:"ResourceSyncSubResult,omitempty" xml:"ResourceSyncSubResult,omitempty" type:"Repeated"`
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults) SetResourceSyncSubResult(v []*GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResults {
	s.ResourceSyncSubResult = v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult struct {
	ErrMsg       *string `json:"ErrMsg,omitempty" xml:"ErrMsg,omitempty"`
	ResourceType *string `json:"ResourceType,omitempty" xml:"ResourceType,omitempty"`
	Success      *bool   `json:"Success,omitempty" xml:"Success,omitempty"`
	SyncCount    *int32  `json:"SyncCount,omitempty" xml:"SyncCount,omitempty"`
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetErrMsg(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.ErrMsg = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetResourceType(v string) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.ResourceType = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetSuccess(v bool) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.Success = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult) SetSyncCount(v int32) *GetHDMLastAliyunResourceSyncResultResponseBodyDataSubResultsResourceSyncSubResult {
	s.SyncCount = &v
	return s
}

type GetHDMLastAliyunResourceSyncResultResponse struct {
	Headers    map[string]*string                              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetHDMLastAliyunResourceSyncResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetHDMLastAliyunResourceSyncResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetHDMLastAliyunResourceSyncResultResponse) GoString() string {
	return s.String()
}

func (s *GetHDMLastAliyunResourceSyncResultResponse) SetHeaders(v map[string]*string) *GetHDMLastAliyunResourceSyncResultResponse {
	s.Headers = v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponse) SetStatusCode(v int32) *GetHDMLastAliyunResourceSyncResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetHDMLastAliyunResourceSyncResultResponse) SetBody(v *GetHDMLastAliyunResourceSyncResultResponseBody) *GetHDMLastAliyunResourceSyncResultResponse {
	s.Body = v
	return s
}

type GetInstanceInspectionsRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **Redis**
	// *   **PolarDBMySQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The type of the instance on which the database is deployed. Valid values:
	//
	// *   **RDS**: an Alibaba Cloud database instance.
	// *   **ECS**: an ECS instance on which a self-managed database is deployed.
	// *   **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
	//
	// >  The value IDC specifies that the instance is deployed in a data center.
	InstanceArea *string `json:"InstanceArea,omitempty" xml:"InstanceArea,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The resource group ID.
	ResourceGroupId *string `json:"ResourceGroupId,omitempty" xml:"ResourceGroupId,omitempty"`
	// The filter condition, which can be specified in one of the following formats:
	//
	// *   Specify the ID of a single instance in the {"InstanceId":"Instance ID"} format.
	// *   Specify the IDs of multiple instances in the {"InstanceIds":\["Instance ID1","Instance ID2"]} format. Separate the instance IDs with commas (,).
	// *   Specify the region in which the instance resides in the {"region":"Region of the instance"} format.
	SearchMap *string `json:"SearchMap,omitempty" xml:"SearchMap,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetInstanceInspectionsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsRequest) SetEndTime(v string) *GetInstanceInspectionsRequest {
	s.EndTime = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetEngine(v string) *GetInstanceInspectionsRequest {
	s.Engine = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetInstanceArea(v string) *GetInstanceInspectionsRequest {
	s.InstanceArea = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetPageNo(v string) *GetInstanceInspectionsRequest {
	s.PageNo = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetPageSize(v string) *GetInstanceInspectionsRequest {
	s.PageSize = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetResourceGroupId(v string) *GetInstanceInspectionsRequest {
	s.ResourceGroupId = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetSearchMap(v string) *GetInstanceInspectionsRequest {
	s.SearchMap = &v
	return s
}

func (s *GetInstanceInspectionsRequest) SetStartTime(v string) *GetInstanceInspectionsRequest {
	s.StartTime = &v
	return s
}

type GetInstanceInspectionsResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The inspection and scoring results.
	Data *GetInstanceInspectionsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceInspectionsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBody) SetCode(v string) *GetInstanceInspectionsResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceInspectionsResponseBody) SetData(v *GetInstanceInspectionsResponseBodyData) *GetInstanceInspectionsResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceInspectionsResponseBody) SetMessage(v string) *GetInstanceInspectionsResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceInspectionsResponseBody) SetRequestId(v string) *GetInstanceInspectionsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceInspectionsResponseBody) SetSuccess(v string) *GetInstanceInspectionsResponseBody {
	s.Success = &v
	return s
}

type GetInstanceInspectionsResponseBodyData struct {
	// The mode in which the inspection and scoring task was initiated. Valid values:
	//
	// *   **0**: automatic mode
	// *   **1**: manual mode
	List []*GetInstanceInspectionsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number. The value returned is a positive integer. Default value: 1.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetInstanceInspectionsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBodyData) SetList(v []*GetInstanceInspectionsResponseBodyDataList) *GetInstanceInspectionsResponseBodyData {
	s.List = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyData) SetPageNo(v int64) *GetInstanceInspectionsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyData) SetPageSize(v int64) *GetInstanceInspectionsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyData) SetTotal(v int64) *GetInstanceInspectionsResponseBodyData {
	s.Total = &v
	return s
}

type GetInstanceInspectionsResponseBodyDataList struct {
	// Indicates whether the autonomy service is enabled.
	AutoFunction *GetInstanceInspectionsResponseBodyDataListAutoFunction `json:"AutoFunction,omitempty" xml:"AutoFunction,omitempty" type:"Struct"`
	// The returned data.
	Data map[string]interface{} `json:"Data,omitempty" xml:"Data,omitempty"`
	// Indicates whether DAS Professional Edition is enabled. Valid values:
	//
	// * **0**: disabled.
	// * **1**: enabled.
	// * **2**: not supported.
	EnableDasPro *int32 `json:"EnableDasPro,omitempty" xml:"EnableDasPro,omitempty"`
	// The end time of the inspection and scoring task. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// > The end time must be later than the start time.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The time when the task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	GmtCreate *int64 `json:"GmtCreate,omitempty" xml:"GmtCreate,omitempty"`
	// The details of the instance.
	Instance *GetInstanceInspectionsResponseBodyDataListInstance `json:"Instance,omitempty" xml:"Instance,omitempty" type:"Struct"`
	// The inspection scores of the instance.
	Score *int32 `json:"Score,omitempty" xml:"Score,omitempty"`
	// The scores that are deducted for the instance.
	ScoreMap map[string]interface{} `json:"ScoreMap,omitempty" xml:"ScoreMap,omitempty"`
	// The start time of the inspection and scoring task. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The state of the inspection and scoring task. Valid values:
	//
	// * **0**: The task is waiting for execution.
	// * **1**: The task is in progress.
	// * **2**: The task is complete.
	State *int32 `json:"State,omitempty" xml:"State,omitempty"`
	// The mode in which the inspection and scoring task was initiated. Valid values:
	//
	// * **0**: automatic mode
	// * **1**: manual mode
	TaskType *int32 `json:"TaskType,omitempty" xml:"TaskType,omitempty"`
}

func (s GetInstanceInspectionsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetAutoFunction(v *GetInstanceInspectionsResponseBodyDataListAutoFunction) *GetInstanceInspectionsResponseBodyDataList {
	s.AutoFunction = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetData(v map[string]interface{}) *GetInstanceInspectionsResponseBodyDataList {
	s.Data = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetEnableDasPro(v int32) *GetInstanceInspectionsResponseBodyDataList {
	s.EnableDasPro = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetEndTime(v int64) *GetInstanceInspectionsResponseBodyDataList {
	s.EndTime = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetGmtCreate(v int64) *GetInstanceInspectionsResponseBodyDataList {
	s.GmtCreate = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetInstance(v *GetInstanceInspectionsResponseBodyDataListInstance) *GetInstanceInspectionsResponseBodyDataList {
	s.Instance = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetScore(v int32) *GetInstanceInspectionsResponseBodyDataList {
	s.Score = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetScoreMap(v map[string]interface{}) *GetInstanceInspectionsResponseBodyDataList {
	s.ScoreMap = v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetStartTime(v int64) *GetInstanceInspectionsResponseBodyDataList {
	s.StartTime = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetState(v int32) *GetInstanceInspectionsResponseBodyDataList {
	s.State = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataList) SetTaskType(v int32) *GetInstanceInspectionsResponseBodyDataList {
	s.TaskType = &v
	return s
}

type GetInstanceInspectionsResponseBodyDataListAutoFunction struct {
	// Indicates whether the feature of automatically creating and deleting indexes is enabled. Valid values:
	//
	// * **0**: disabled.
	// * **1**: enabled.
	// * **2**: not supported.
	AutoIndex *int32 `json:"AutoIndex,omitempty" xml:"AutoIndex,omitempty"`
	// Indicates whether the automatic throttling feature is enabled. Valid values:
	//
	// * **0**: disabled.
	// * **1**: enabled.
	// * **2**: not supported.
	AutoLimitedSql *int32 `json:"AutoLimitedSql,omitempty" xml:"AutoLimitedSql,omitempty"`
	// Indicates whether automatic reclamation of fragments is enabled. Valid values:
	//
	// * **0**: disabled.
	// * **1**: enabled.
	// * **2**: not supported.
	AutoResourceOptimize *int32 `json:"AutoResourceOptimize,omitempty" xml:"AutoResourceOptimize,omitempty"`
	// Indicates whether the auto scaling feature is enabled. Valid values:
	//
	// * **0**: disabled.
	// * **1**: enabled.
	// * **2**: not supported.
	AutoScale *int32 `json:"AutoScale,omitempty" xml:"AutoScale,omitempty"`
	// Indicates whether the event subscription feature is enabled. Valid values:
	//
	// * **0**: disabled.
	// * **1**: enabled.
	// * **2**: not supported.
	EventSubscription *int32 `json:"EventSubscription,omitempty" xml:"EventSubscription,omitempty"`
}

func (s GetInstanceInspectionsResponseBodyDataListAutoFunction) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBodyDataListAutoFunction) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetAutoIndex(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.AutoIndex = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetAutoLimitedSql(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.AutoLimitedSql = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetAutoResourceOptimize(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.AutoResourceOptimize = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetAutoScale(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.AutoScale = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListAutoFunction) SetEventSubscription(v int32) *GetInstanceInspectionsResponseBodyDataListAutoFunction {
	s.EventSubscription = &v
	return s
}

type GetInstanceInspectionsResponseBodyDataListInstance struct {
	// The account ID. You can obtain the account ID on the **Security Settings** page in the Alibaba Cloud **account management center**.
	AccountId *string `json:"AccountId,omitempty" xml:"AccountId,omitempty"`
	// The connection mode of the instance. Valid values:
	//
	// * **standard**: standard mode.
	// * **safe**: database proxy mode.
	Category *string `json:"Category,omitempty" xml:"Category,omitempty"`
	// The CPU specification of the instance. For example, if a value of 8 is returned, the instance has eight CPU cores.
	Cpu *string `json:"Cpu,omitempty" xml:"Cpu,omitempty"`
	// The database engine. Valid values:
	//
	// * **MySQL**
	// * **Redis**
	// * **PolarDBMySQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The version number of the database engine.
	EngineVersion *string `json:"EngineVersion,omitempty" xml:"EngineVersion,omitempty"`
	// The name of the instance.
	InstanceAlias *string `json:"InstanceAlias,omitempty" xml:"InstanceAlias,omitempty"`
	// The type of the instance on which the database is deployed. Valid values:
	//
	// * **RDS**: an Alibaba Cloud database instance.
	// * **ECS**: an ECS instance on which a self-managed database is deployed.
	// * **IDC**: a self-managed database instance that is not deployed on Alibaba Cloud.
	//
	// > The value IDC indicates that the instance is deployed in a data center.
	InstanceArea *string `json:"InstanceArea,omitempty" xml:"InstanceArea,omitempty"`
	// The instance type.
	InstanceClass *string `json:"InstanceClass,omitempty" xml:"InstanceClass,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The memory capacity of the database that is deployed on the instance. Unit: MB.
	Memory *int32 `json:"Memory,omitempty" xml:"Memory,omitempty"`
	// The network type of the instance.
	NetworkType *string `json:"NetworkType,omitempty" xml:"NetworkType,omitempty"`
	// The ID of the node on the instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The ID of the region in which the instance resides.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The storage space of the instance. Unit: GB.
	Storage *int32 `json:"Storage,omitempty" xml:"Storage,omitempty"`
	// The unique identifier of the instance.
	Uuid *string `json:"Uuid,omitempty" xml:"Uuid,omitempty"`
	// The ID of the virtual private cloud (VPC) in which the instance is deployed.
	VpcId *string `json:"VpcId,omitempty" xml:"VpcId,omitempty"`
}

func (s GetInstanceInspectionsResponseBodyDataListInstance) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponseBodyDataListInstance) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetAccountId(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.AccountId = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetCategory(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Category = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetCpu(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Cpu = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetEngine(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Engine = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetEngineVersion(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.EngineVersion = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetInstanceAlias(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.InstanceAlias = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetInstanceArea(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.InstanceArea = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetInstanceClass(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.InstanceClass = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetInstanceId(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetMemory(v int32) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Memory = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetNetworkType(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.NetworkType = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetNodeId(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.NodeId = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetRegion(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Region = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetStorage(v int32) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Storage = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetUuid(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.Uuid = &v
	return s
}

func (s *GetInstanceInspectionsResponseBodyDataListInstance) SetVpcId(v string) *GetInstanceInspectionsResponseBodyDataListInstance {
	s.VpcId = &v
	return s
}

type GetInstanceInspectionsResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInstanceInspectionsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceInspectionsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceInspectionsResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceInspectionsResponse) SetHeaders(v map[string]*string) *GetInstanceInspectionsResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceInspectionsResponse) SetStatusCode(v int32) *GetInstanceInspectionsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceInspectionsResponse) SetBody(v *GetInstanceInspectionsResponseBody) *GetInstanceInspectionsResponse {
	s.Body = v
	return s
}

type GetInstanceSqlOptimizeStatisticRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	EndTime *string `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// Specifies whether to filter instances for which DAS Professional Edition is enabled. Valid values:
	//
	// *   **true**: filters instances for which DAS Professional Edition is enabled.
	// *   **false**: does not filter instances for which DAS Professional Edition is enabled.
	//
	// >  If you set the value to **true**, only database instances for which DAS Professional Edition is disabled are queried. If you set the value to **false**, all database instances are queried.
	FilterEnable *string `json:"FilterEnable,omitempty" xml:"FilterEnable,omitempty"`
	// The database instance ID.
	//
	// >  The database instance must be an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *string `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The duration threshold for automatic SQL optimization events. After this parameter is specified, the system collects statistics on automatic SQL optimization events whose duration does not exceed the specified threshold.
	//
	// >  This parameter is a reserved parameter and does not take effect.
	Threshold *string `json:"Threshold,omitempty" xml:"Threshold,omitempty"`
	// Specifies whether to merge automatic SQL optimization events. Valid values:
	//
	// *   **true**: merges automatic SQL optimization events.
	// *   **false**: does not merge automatic SQL optimization events.
	//
	// >  This parameter is a reserved parameter and does not take effect.
	UseMerging *string `json:"UseMerging,omitempty" xml:"UseMerging,omitempty"`
}

func (s GetInstanceSqlOptimizeStatisticRequest) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSqlOptimizeStatisticRequest) GoString() string {
	return s.String()
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetEndTime(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.EndTime = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetFilterEnable(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.FilterEnable = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetInstanceId(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.InstanceId = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetNodeId(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.NodeId = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetStartTime(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.StartTime = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetThreshold(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.Threshold = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticRequest) SetUseMerging(v string) *GetInstanceSqlOptimizeStatisticRequest {
	s.UseMerging = &v
	return s
}

type GetInstanceSqlOptimizeStatisticResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the automatic SQL optimization events.
	Data *GetInstanceSqlOptimizeStatisticResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetInstanceSqlOptimizeStatisticResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSqlOptimizeStatisticResponseBody) GoString() string {
	return s.String()
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetCode(v string) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.Code = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetData(v *GetInstanceSqlOptimizeStatisticResponseBodyData) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.Data = v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetMessage(v string) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.Message = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetRequestId(v string) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBody) SetSuccess(v string) *GetInstanceSqlOptimizeStatisticResponseBody {
	s.Success = &v
	return s
}

type GetInstanceSqlOptimizeStatisticResponseBodyData struct {
	// The total number of automatic SQL optimization events.
	Count *int32 `json:"count,omitempty" xml:"count,omitempty"`
	// The multiple of the maximum improvement for returned automatic SQL optimization events.
	Improvement *float64 `json:"improvement,omitempty" xml:"improvement,omitempty"`
}

func (s GetInstanceSqlOptimizeStatisticResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSqlOptimizeStatisticResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetInstanceSqlOptimizeStatisticResponseBodyData) SetCount(v int32) *GetInstanceSqlOptimizeStatisticResponseBodyData {
	s.Count = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponseBodyData) SetImprovement(v float64) *GetInstanceSqlOptimizeStatisticResponseBodyData {
	s.Improvement = &v
	return s
}

type GetInstanceSqlOptimizeStatisticResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetInstanceSqlOptimizeStatisticResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetInstanceSqlOptimizeStatisticResponse) String() string {
	return tea.Prettify(s)
}

func (s GetInstanceSqlOptimizeStatisticResponse) GoString() string {
	return s.String()
}

func (s *GetInstanceSqlOptimizeStatisticResponse) SetHeaders(v map[string]*string) *GetInstanceSqlOptimizeStatisticResponse {
	s.Headers = v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponse) SetStatusCode(v int32) *GetInstanceSqlOptimizeStatisticResponse {
	s.StatusCode = &v
	return s
}

func (s *GetInstanceSqlOptimizeStatisticResponse) SetBody(v *GetInstanceSqlOptimizeStatisticResponseBody) *GetInstanceSqlOptimizeStatisticResponse {
	s.Body = v
	return s
}

type GetKillInstanceSessionTaskResultRequest struct {
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  You must specify this parameter if your database instance is a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The task ID. You can obtain the task ID from the response parameters of the [CreateKillInstanceSessionTask](~~609246~~) operation.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetKillInstanceSessionTaskResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultRequest) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultRequest) SetInstanceId(v string) *GetKillInstanceSessionTaskResultRequest {
	s.InstanceId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultRequest) SetNodeId(v string) *GetKillInstanceSessionTaskResultRequest {
	s.NodeId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultRequest) SetTaskId(v string) *GetKillInstanceSessionTaskResultRequest {
	s.TaskId = &v
	return s
}

type GetKillInstanceSessionTaskResultResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetKillInstanceSessionTaskResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetKillInstanceSessionTaskResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetCode(v int64) *GetKillInstanceSessionTaskResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetData(v *GetKillInstanceSessionTaskResultResponseBodyData) *GetKillInstanceSessionTaskResultResponseBody {
	s.Data = v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetMessage(v string) *GetKillInstanceSessionTaskResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetRequestId(v string) *GetKillInstanceSessionTaskResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBody) SetSuccess(v bool) *GetKillInstanceSessionTaskResultResponseBody {
	s.Success = &v
	return s
}

type GetKillInstanceSessionTaskResultResponseBodyData struct {
	// The number of ignored sessions, including sessions of the accounts that are specified by IgnoredUsers, sessions of internal O\&M accounts of Alibaba Cloud, and **Binlog Dump** sessions.
	IgnoredUserSessionCount *int64 `json:"IgnoredUserSessionCount,omitempty" xml:"IgnoredUserSessionCount,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The number of sessions that failed to be terminated.
	KillFailCount *int64 `json:"KillFailCount,omitempty" xml:"KillFailCount,omitempty"`
	// The number of sessions that were terminated.
	KillSuccessCount *int64 `json:"KillSuccessCount,omitempty" xml:"KillSuccessCount,omitempty"`
	// The node ID.
	//
	// >  This parameter is returned only if the instance is a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The details of the task that terminated sessions.
	Result []*GetKillInstanceSessionTaskResultResponseBodyDataResult `json:"Result,omitempty" xml:"Result,omitempty" type:"Repeated"`
	// The session IDs.
	//
	// >  If all sessions are terminated, the IDs of all sessions on the instance or node are returned.
	Sessions []*int64 `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
	// The task ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The state of the task that terminates sessions.
	//
	// *   **RUNNING**: The task is in progress.
	// *   **SUCCESS**: The task is successful.
	// *   **FAILURE**: The task failed.
	// *   **ERROR**: Other errors occur.
	TaskState *string `json:"TaskState,omitempty" xml:"TaskState,omitempty"`
	// The ID of the Alibaba Cloud account.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetKillInstanceSessionTaskResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetIgnoredUserSessionCount(v int64) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.IgnoredUserSessionCount = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetInstanceId(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetKillFailCount(v int64) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.KillFailCount = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetKillSuccessCount(v int64) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.KillSuccessCount = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetNodeId(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetResult(v []*GetKillInstanceSessionTaskResultResponseBodyDataResult) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.Result = v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetSessions(v []*int64) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.Sessions = v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetTaskId(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.TaskId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetTaskState(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.TaskState = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyData) SetUserId(v string) *GetKillInstanceSessionTaskResultResponseBodyData {
	s.UserId = &v
	return s
}

type GetKillInstanceSessionTaskResultResponseBodyDataResult struct {
	// Indicates whether the session is active.
	//
	// > If the type of the command is Query or Execute and the session in the transaction is not terminated, the session is active.
	Active *bool `json:"Active,omitempty" xml:"Active,omitempty"`
	// The type of the command executed in the session.
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The name of the database.
	Db *string `json:"Db,omitempty" xml:"Db,omitempty"`
	// The IP address and port number of the host that initiated the session.
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// The session ID.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The SQL statement executed in the session.
	Info *string `json:"Info,omitempty" xml:"Info,omitempty"`
	// The description of the session when the session was terminated.
	//
	// *   **SESSION_KILLED**: The session is terminated.
	// *   **SESSION_EXPIRED**: The session has expired.
	// *   **SESSION_NO_PERMISSION**: The account used to terminate the session has insufficient permissions.
	// *   **SESSION_ACCOUNT_ERROR**: The account or password used to terminate the session is invalid.
	// *   **SESSION_IGNORED_USER**: The session of the account does not need to be terminated.
	// *   **SESSION_INTERNAL_USER_OR_COMMAND**: The session is a session initiated by or a command run by an Alibaba Cloud O\&M account.
	// *   **SESSION_KILL_TASK_TIMEOUT**: Timeout occurs when the session is terminated.
	// *   **SESSION_OTHER_ERROR**: Other errors occurred.
	Reason *string `json:"Reason,omitempty" xml:"Reason,omitempty"`
	// The status of the session.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The ID of the subtask that terminates the session.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
	// The execution duration. Unit: seconds.
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The account of the database.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetKillInstanceSessionTaskResultResponseBodyDataResult) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultResponseBodyDataResult) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetActive(v bool) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Active = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetCommand(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Command = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetDb(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Db = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetHost(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Host = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetId(v int64) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Id = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetInfo(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Info = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetReason(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Reason = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetState(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.State = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetTaskId(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.TaskId = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetTime(v int64) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.Time = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponseBodyDataResult) SetUser(v string) *GetKillInstanceSessionTaskResultResponseBodyDataResult {
	s.User = &v
	return s
}

type GetKillInstanceSessionTaskResultResponse struct {
	Headers    map[string]*string                            `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                        `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetKillInstanceSessionTaskResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetKillInstanceSessionTaskResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetKillInstanceSessionTaskResultResponse) GoString() string {
	return s.String()
}

func (s *GetKillInstanceSessionTaskResultResponse) SetHeaders(v map[string]*string) *GetKillInstanceSessionTaskResultResponse {
	s.Headers = v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponse) SetStatusCode(v int32) *GetKillInstanceSessionTaskResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetKillInstanceSessionTaskResultResponse) SetBody(v *GetKillInstanceSessionTaskResultResponseBody) *GetKillInstanceSessionTaskResultResponse {
	s.Body = v
	return s
}

type GetMongoDBCurrentOpRequest struct {
	// The condition used to filter sessions during the query. For more information, see the currentOp command of MongoDB.
	FilterDoc *string `json:"FilterDoc,omitempty" xml:"FilterDoc,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  If you do not specify a node ID, the sessions of the primary node are queried by default.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// A reserved parameter. You do not need to specify the parameter.
	Role *string `json:"Role,omitempty" xml:"Role,omitempty"`
}

func (s GetMongoDBCurrentOpRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpRequest) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpRequest) SetFilterDoc(v string) *GetMongoDBCurrentOpRequest {
	s.FilterDoc = &v
	return s
}

func (s *GetMongoDBCurrentOpRequest) SetInstanceId(v string) *GetMongoDBCurrentOpRequest {
	s.InstanceId = &v
	return s
}

func (s *GetMongoDBCurrentOpRequest) SetNodeId(v string) *GetMongoDBCurrentOpRequest {
	s.NodeId = &v
	return s
}

func (s *GetMongoDBCurrentOpRequest) SetRole(v string) *GetMongoDBCurrentOpRequest {
	s.Role = &v
	return s
}

type GetMongoDBCurrentOpResponseBody struct {
	// The response code.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The details of the sessions.
	Data *GetMongoDBCurrentOpResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. Otherwise, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMongoDBCurrentOpResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponseBody) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponseBody) SetCode(v int64) *GetMongoDBCurrentOpResponseBody {
	s.Code = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBody) SetData(v *GetMongoDBCurrentOpResponseBodyData) *GetMongoDBCurrentOpResponseBody {
	s.Data = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBody) SetMessage(v string) *GetMongoDBCurrentOpResponseBody {
	s.Message = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBody) SetRequestId(v string) *GetMongoDBCurrentOpResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBody) SetSuccess(v bool) *GetMongoDBCurrentOpResponseBody {
	s.Success = &v
	return s
}

type GetMongoDBCurrentOpResponseBodyData struct {
	// The sessions.
	SessionList []*GetMongoDBCurrentOpResponseBodyDataSessionList `json:"SessionList,omitempty" xml:"SessionList,omitempty" type:"Repeated"`
	// The statistics on the sessions.
	SessionStat *GetMongoDBCurrentOpResponseBodyDataSessionStat `json:"SessionStat,omitempty" xml:"SessionStat,omitempty" type:"Struct"`
	// The time when the database sessions were returned. The value is in the UNIX timestamp format. Unit: milliseconds.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetMongoDBCurrentOpResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponseBodyData) SetSessionList(v []*GetMongoDBCurrentOpResponseBodyDataSessionList) *GetMongoDBCurrentOpResponseBodyData {
	s.SessionList = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyData) SetSessionStat(v *GetMongoDBCurrentOpResponseBodyDataSessionStat) *GetMongoDBCurrentOpResponseBodyData {
	s.SessionStat = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyData) SetTimestamp(v int64) *GetMongoDBCurrentOpResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetMongoDBCurrentOpResponseBodyDataSessionList struct {
	// Indicates whether the operation is active.
	Active *bool `json:"Active,omitempty" xml:"Active,omitempty"`
	// The IP address of the client.
	Client *string `json:"Client,omitempty" xml:"Client,omitempty"`
	// The document that contains the complete command object associated with the operation.
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The connection ID.
	ConnectionId *int64 `json:"ConnectionId,omitempty" xml:"ConnectionId,omitempty"`
	// The description of the connection.
	Desc *string `json:"Desc,omitempty" xml:"Desc,omitempty"`
	// The driver.
	Driver *string `json:"Driver,omitempty" xml:"Driver,omitempty"`
	// The host.
	Host *string `json:"Host,omitempty" xml:"Host,omitempty"`
	// Indicates whether the operation is marked as terminated. If the operation is marked as terminated, true is returned.
	KillPending *bool `json:"KillPending,omitempty" xml:"KillPending,omitempty"`
	// The namespace.
	Ns *string `json:"Ns,omitempty" xml:"Ns,omitempty"`
	// The type of the operation.
	Op *string `json:"Op,omitempty" xml:"Op,omitempty"`
	// The operation ID.
	OpId *string `json:"OpId,omitempty" xml:"OpId,omitempty"`
	// The architecture of the operating system.
	OsArch *string `json:"OsArch,omitempty" xml:"OsArch,omitempty"`
	// The name of the operating system.
	OsName *string `json:"OsName,omitempty" xml:"OsName,omitempty"`
	// The type of the operating system.
	OsType *string `json:"OsType,omitempty" xml:"OsType,omitempty"`
	// The description of the execution plan.
	PlanSummary *string `json:"PlanSummary,omitempty" xml:"PlanSummary,omitempty"`
	// The platform.
	Platform *string `json:"Platform,omitempty" xml:"Platform,omitempty"`
	// The duration of the operation. Unit: seconds.
	SecsRunning *int64 `json:"SecsRunning,omitempty" xml:"SecsRunning,omitempty"`
	// The shard.
	Shard *string `json:"Shard,omitempty" xml:"Shard,omitempty"`
}

func (s GetMongoDBCurrentOpResponseBodyDataSessionList) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponseBodyDataSessionList) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetActive(v bool) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Active = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetClient(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Client = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetCommand(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Command = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetConnectionId(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.ConnectionId = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetDesc(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Desc = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetDriver(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Driver = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetHost(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Host = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetKillPending(v bool) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.KillPending = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetNs(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Ns = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOp(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Op = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOpId(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.OpId = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOsArch(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.OsArch = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOsName(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.OsName = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetOsType(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.OsType = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetPlanSummary(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.PlanSummary = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetPlatform(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Platform = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetSecsRunning(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.SecsRunning = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionList) SetShard(v string) *GetMongoDBCurrentOpResponseBodyDataSessionList {
	s.Shard = &v
	return s
}

type GetMongoDBCurrentOpResponseBodyDataSessionStat struct {
	// The number of active sessions.
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The statistics on the IP addresses of the clients.
	ClientStats map[string]*DataSessionStatClientStatsValue `json:"ClientStats,omitempty" xml:"ClientStats,omitempty"`
	// The statistics on the namespaces.
	DbStats map[string]*DataSessionStatDbStatsValue `json:"DbStats,omitempty" xml:"DbStats,omitempty"`
	// The longest duration of a session. Unit: seconds.
	LongestSecsRunning *int64 `json:"LongestSecsRunning,omitempty" xml:"LongestSecsRunning,omitempty"`
	// The total number of sessions.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
}

func (s GetMongoDBCurrentOpResponseBodyDataSessionStat) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponseBodyDataSessionStat) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetActiveCount(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.ActiveCount = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetClientStats(v map[string]*DataSessionStatClientStatsValue) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.ClientStats = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetDbStats(v map[string]*DataSessionStatDbStatsValue) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.DbStats = v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetLongestSecsRunning(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.LongestSecsRunning = &v
	return s
}

func (s *GetMongoDBCurrentOpResponseBodyDataSessionStat) SetTotalCount(v int64) *GetMongoDBCurrentOpResponseBodyDataSessionStat {
	s.TotalCount = &v
	return s
}

type GetMongoDBCurrentOpResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMongoDBCurrentOpResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMongoDBCurrentOpResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMongoDBCurrentOpResponse) GoString() string {
	return s.String()
}

func (s *GetMongoDBCurrentOpResponse) SetHeaders(v map[string]*string) *GetMongoDBCurrentOpResponse {
	s.Headers = v
	return s
}

func (s *GetMongoDBCurrentOpResponse) SetStatusCode(v int32) *GetMongoDBCurrentOpResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMongoDBCurrentOpResponse) SetBody(v *GetMongoDBCurrentOpResponseBody) *GetMongoDBCurrentOpResponse {
	s.Body = v
	return s
}

type GetMySQLAllSessionAsyncRequest struct {
	// The instance ID.
	//
	// >  Only ApsaraDB RDS for MySQL, PolarDB for MySQL, and PolarDB-X 2.0 instances are supported.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  You must specify this parameter for PolarDB for MySQL clusters. If you do not specify a node ID, the session data of the primary node is returned by default.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The ID of the asynchronous request.
	//
	// >  You can leave this parameter empty when you call the operation to initiate the request for the first time, and use the value of this parameter contained in the response to the first request for subsequent requests.
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
}

func (s GetMySQLAllSessionAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncRequest) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncRequest) SetInstanceId(v string) *GetMySQLAllSessionAsyncRequest {
	s.InstanceId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncRequest) SetNodeId(v string) *GetMySQLAllSessionAsyncRequest {
	s.NodeId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncRequest) SetResultId(v string) *GetMySQLAllSessionAsyncRequest {
	s.ResultId = &v
	return s
}

type GetMySQLAllSessionAsyncResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetMySQLAllSessionAsyncResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetMySQLAllSessionAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetCode(v int64) *GetMySQLAllSessionAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetData(v *GetMySQLAllSessionAsyncResponseBodyData) *GetMySQLAllSessionAsyncResponseBody {
	s.Data = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetMessage(v string) *GetMySQLAllSessionAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetRequestId(v string) *GetMySQLAllSessionAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBody) SetSuccess(v bool) *GetMySQLAllSessionAsyncResponseBody {
	s.Success = &v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyData struct {
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	Complete *bool `json:"Complete,omitempty" xml:"Complete,omitempty"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// *   **true**
	// *   **false**
	Fail *bool `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// The ID of the asynchronous request.
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The session data.
	SessionData *GetMySQLAllSessionAsyncResponseBodyDataSessionData `json:"SessionData,omitempty" xml:"SessionData,omitempty" type:"Struct"`
	// The state of the asynchronous request. Valid values:
	//
	// *   **RUNNING**
	// *   **SUCCESS**
	// *   **FAIL**
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s GetMySQLAllSessionAsyncResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetComplete(v bool) *GetMySQLAllSessionAsyncResponseBodyData {
	s.Complete = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetFail(v bool) *GetMySQLAllSessionAsyncResponseBodyData {
	s.Fail = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetIsFinish(v bool) *GetMySQLAllSessionAsyncResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetResultId(v string) *GetMySQLAllSessionAsyncResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetSessionData(v *GetMySQLAllSessionAsyncResponseBodyDataSessionData) *GetMySQLAllSessionAsyncResponseBodyData {
	s.SessionData = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetState(v string) *GetMySQLAllSessionAsyncResponseBodyData {
	s.State = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyData) SetTimestamp(v int64) *GetMySQLAllSessionAsyncResponseBodyData {
	s.Timestamp = &v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionData struct {
	// The total number of active sessions.
	ActiveSessionCount *int64 `json:"ActiveSessionCount,omitempty" xml:"ActiveSessionCount,omitempty"`
	// The sessions that are counted by client IP address.
	ClientStats []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats `json:"ClientStats,omitempty" xml:"ClientStats,omitempty" type:"Repeated"`
	// The sessions that are counted by database.
	DbStats []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats `json:"DbStats,omitempty" xml:"DbStats,omitempty" type:"Repeated"`
	// The maximum execution duration of an active session. Unit: seconds.
	MaxActiveTime *int64 `json:"MaxActiveTime,omitempty" xml:"MaxActiveTime,omitempty"`
	// The sessions.
	SessionList []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList `json:"SessionList,omitempty" xml:"SessionList,omitempty" type:"Repeated"`
	// The time when the session was queried. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	TimeStamp *int64 `json:"TimeStamp,omitempty" xml:"TimeStamp,omitempty"`
	// The total number of sessions.
	TotalSessionCount *int64 `json:"TotalSessionCount,omitempty" xml:"TotalSessionCount,omitempty"`
	// The sessions that are counted by database account.
	UserStats []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats `json:"UserStats,omitempty" xml:"UserStats,omitempty" type:"Repeated"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionData) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionData) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetActiveSessionCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.ActiveSessionCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetClientStats(v []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.ClientStats = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetDbStats(v []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.DbStats = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetMaxActiveTime(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.MaxActiveTime = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetSessionList(v []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.SessionList = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetTimeStamp(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.TimeStamp = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetTotalSessionCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.TotalSessionCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionData) SetUserStats(v []*GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) *GetMySQLAllSessionAsyncResponseBodyDataSessionData {
	s.UserStats = v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats struct {
	// The number of active sessions that belong to the client IP address.
	//
	// >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The IP address of the client.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The IDs of the sessions that belong to the client IP address.
	ThreadIdList []*int64 `json:"ThreadIdList,omitempty" xml:"ThreadIdList,omitempty" type:"Repeated"`
	// The total number of sessions that belong to the client IP address.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The database accounts to which the sessions belong.
	UserList []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetActiveCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.ActiveCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetKey(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.Key = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetThreadIdList(v []*int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.ThreadIdList = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetTotalCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.TotalCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats) SetUserList(v []*string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataClientStats {
	s.UserList = v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats struct {
	// The number of active sessions of the database.
	//
	// >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The database name.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The IDs of the sessions of the database.
	ThreadIdList []*int64 `json:"ThreadIdList,omitempty" xml:"ThreadIdList,omitempty" type:"Repeated"`
	// The total number of sessions of the database.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The database accounts to which the sessions belong.
	UserList []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetActiveCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.ActiveCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetKey(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.Key = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetThreadIdList(v []*int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.ThreadIdList = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetTotalCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.TotalCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats) SetUserList(v []*string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataDbStats {
	s.UserList = v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList struct {
	// The IP address of the client.
	Client *string `json:"Client,omitempty" xml:"Client,omitempty"`
	// The type of the command executed in the session.
	Command *string `json:"Command,omitempty" xml:"Command,omitempty"`
	// The database name.
	DbName *string `json:"DbName,omitempty" xml:"DbName,omitempty"`
	// The session ID.
	SessionId *int64 `json:"SessionId,omitempty" xml:"SessionId,omitempty"`
	// The SQL template ID.
	//
	// >  This parameter is returned only when you use a PolarDB-X 2.0 instance.
	SqlTemplateId *string `json:"SqlTemplateId,omitempty" xml:"SqlTemplateId,omitempty"`
	// The SQL statement executed in the session.
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The status of the session.
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The execution duration of the session. Unit: seconds.
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The duration of the transaction. Unit: seconds.
	TrxDuration *int64 `json:"TrxDuration,omitempty" xml:"TrxDuration,omitempty"`
	// The ID of the transaction to which the session belongs.
	TrxId *string `json:"TrxId,omitempty" xml:"TrxId,omitempty"`
	// The username of the database account.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
	// The alias of the IP address of the client.
	UserClientAlias *string `json:"UserClientAlias,omitempty" xml:"UserClientAlias,omitempty"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetClient(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.Client = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetCommand(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.Command = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetDbName(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.DbName = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetSessionId(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.SessionId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetSqlTemplateId(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.SqlTemplateId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetSqlText(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.SqlText = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetState(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.State = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetTime(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.Time = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetTrxDuration(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.TrxDuration = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetTrxId(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.TrxId = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetUser(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.User = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList) SetUserClientAlias(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataSessionList {
	s.UserClientAlias = &v
	return s
}

type GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats struct {
	// The number of active sessions within the account.
	//
	// >  If the type of the command executed in the session is Query or Execute and the session in the transaction is not terminated, the session is active.
	ActiveCount *int64 `json:"ActiveCount,omitempty" xml:"ActiveCount,omitempty"`
	// The database account.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
	// The IDs of the sessions within the account.
	ThreadIdList []*int64 `json:"ThreadIdList,omitempty" xml:"ThreadIdList,omitempty" type:"Repeated"`
	// The total number of sessions within the account.
	TotalCount *int64 `json:"TotalCount,omitempty" xml:"TotalCount,omitempty"`
	// The database accounts to which the sessions belong.
	UserList []*string `json:"UserList,omitempty" xml:"UserList,omitempty" type:"Repeated"`
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetActiveCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.ActiveCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetKey(v string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.Key = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetThreadIdList(v []*int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.ThreadIdList = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetTotalCount(v int64) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.TotalCount = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats) SetUserList(v []*string) *GetMySQLAllSessionAsyncResponseBodyDataSessionDataUserStats {
	s.UserList = v
	return s
}

type GetMySQLAllSessionAsyncResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetMySQLAllSessionAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetMySQLAllSessionAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s GetMySQLAllSessionAsyncResponse) GoString() string {
	return s.String()
}

func (s *GetMySQLAllSessionAsyncResponse) SetHeaders(v map[string]*string) *GetMySQLAllSessionAsyncResponse {
	s.Headers = v
	return s
}

func (s *GetMySQLAllSessionAsyncResponse) SetStatusCode(v int32) *GetMySQLAllSessionAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *GetMySQLAllSessionAsyncResponse) SetBody(v *GetMySQLAllSessionAsyncResponseBody) *GetMySQLAllSessionAsyncResponse {
	s.Body = v
	return s
}

type GetPartitionsHeatmapRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The time range to be queried. Valid values:
	//
	// *   **LAST_ONE_HOURS**: the last hour.
	// *   **LAST_SIX_HOURS**: the last six hours.
	// *   **LAST_ONE_DAYS**: the last day.
	// *   **LAST_THREE_DAYS**: the last three days.
	// *   **LAST_SEVEN_DAYS**: the last seven days.
	TimeRange *string `json:"TimeRange,omitempty" xml:"TimeRange,omitempty"`
	// The type of the data to be queried. Valid values:
	//
	// *   **READ_ROWS**: the read rows.
	// *   **WRITTEN_ROWS**: the written rows.
	// *   **READ_WRITTEN_ROWS**: the read and written rows.
	// *   **UPDATE_ROWS**: the updated rows.
	// *   **INSERTED_ROWS**: the inserted rows.
	// *   **DELETED_ROWS**: the deleted rows.
	// *   **READ_ROWS_WITH_DN**: the read rows returned from a data node.
	// *   **WRITTEN_ROWS_WITH_DN**: the written rows returned from a data node.
	// *   **READ_WRITTEN_ROWS_WITH_DN**: the read and written rows returned from a data node.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetPartitionsHeatmapRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionsHeatmapRequest) GoString() string {
	return s.String()
}

func (s *GetPartitionsHeatmapRequest) SetConsoleContext(v string) *GetPartitionsHeatmapRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetPartitionsHeatmapRequest) SetInstanceId(v string) *GetPartitionsHeatmapRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPartitionsHeatmapRequest) SetTimeRange(v string) *GetPartitionsHeatmapRequest {
	s.TimeRange = &v
	return s
}

func (s *GetPartitionsHeatmapRequest) SetType(v string) *GetPartitionsHeatmapRequest {
	s.Type = &v
	return s
}

type GetPartitionsHeatmapResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The hot data of the PolarDB-X 2.0 instance. The data is returned in JSON format.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPartitionsHeatmapResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionsHeatmapResponseBody) GoString() string {
	return s.String()
}

func (s *GetPartitionsHeatmapResponseBody) SetCode(v string) *GetPartitionsHeatmapResponseBody {
	s.Code = &v
	return s
}

func (s *GetPartitionsHeatmapResponseBody) SetData(v string) *GetPartitionsHeatmapResponseBody {
	s.Data = &v
	return s
}

func (s *GetPartitionsHeatmapResponseBody) SetMessage(v string) *GetPartitionsHeatmapResponseBody {
	s.Message = &v
	return s
}

func (s *GetPartitionsHeatmapResponseBody) SetRequestId(v string) *GetPartitionsHeatmapResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPartitionsHeatmapResponseBody) SetSuccess(v string) *GetPartitionsHeatmapResponseBody {
	s.Success = &v
	return s
}

type GetPartitionsHeatmapResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetPartitionsHeatmapResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPartitionsHeatmapResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPartitionsHeatmapResponse) GoString() string {
	return s.String()
}

func (s *GetPartitionsHeatmapResponse) SetHeaders(v map[string]*string) *GetPartitionsHeatmapResponse {
	s.Headers = v
	return s
}

func (s *GetPartitionsHeatmapResponse) SetStatusCode(v int32) *GetPartitionsHeatmapResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPartitionsHeatmapResponse) SetBody(v *GetPartitionsHeatmapResponseBody) *GetPartitionsHeatmapResponse {
	s.Body = v
	return s
}

type GetPfsMetricTrendsRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. You can view the data of up to seven days within the last month.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The metric whose trend you want to query. Valid values:
	//
	// *   **count**: the number of executions.
	// *   **avgRt**: the average execution duration.
	// *   **rtRate**: the execution duration percentage.
	// *   **rowsExamined**: the total number of scanned rows.
	Metric *string `json:"Metric,omitempty" xml:"Metric,omitempty"`
	// The node ID.
	//
	// >  You must specify this parameter for an ApsaraDB RDS for MySQL Cluster Edition instance and a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetPfsMetricTrendsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPfsMetricTrendsRequest) GoString() string {
	return s.String()
}

func (s *GetPfsMetricTrendsRequest) SetEndTime(v int64) *GetPfsMetricTrendsRequest {
	s.EndTime = &v
	return s
}

func (s *GetPfsMetricTrendsRequest) SetInstanceId(v string) *GetPfsMetricTrendsRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPfsMetricTrendsRequest) SetMetric(v string) *GetPfsMetricTrendsRequest {
	s.Metric = &v
	return s
}

func (s *GetPfsMetricTrendsRequest) SetNodeId(v string) *GetPfsMetricTrendsRequest {
	s.NodeId = &v
	return s
}

func (s *GetPfsMetricTrendsRequest) SetStartTime(v int64) *GetPfsMetricTrendsRequest {
	s.StartTime = &v
	return s
}

type GetPfsMetricTrendsResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data map[string][]*DataValue `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPfsMetricTrendsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPfsMetricTrendsResponseBody) GoString() string {
	return s.String()
}

func (s *GetPfsMetricTrendsResponseBody) SetCode(v int64) *GetPfsMetricTrendsResponseBody {
	s.Code = &v
	return s
}

func (s *GetPfsMetricTrendsResponseBody) SetData(v map[string][]*DataValue) *GetPfsMetricTrendsResponseBody {
	s.Data = v
	return s
}

func (s *GetPfsMetricTrendsResponseBody) SetMessage(v string) *GetPfsMetricTrendsResponseBody {
	s.Message = &v
	return s
}

func (s *GetPfsMetricTrendsResponseBody) SetRequestId(v string) *GetPfsMetricTrendsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPfsMetricTrendsResponseBody) SetSuccess(v bool) *GetPfsMetricTrendsResponseBody {
	s.Success = &v
	return s
}

type GetPfsMetricTrendsResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetPfsMetricTrendsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPfsMetricTrendsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPfsMetricTrendsResponse) GoString() string {
	return s.String()
}

func (s *GetPfsMetricTrendsResponse) SetHeaders(v map[string]*string) *GetPfsMetricTrendsResponse {
	s.Headers = v
	return s
}

func (s *GetPfsMetricTrendsResponse) SetStatusCode(v int32) *GetPfsMetricTrendsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPfsMetricTrendsResponse) SetBody(v *GetPfsMetricTrendsResponseBody) *GetPfsMetricTrendsResponse {
	s.Body = v
	return s
}

type GetPfsSqlSampleRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. You can query the data of up to seven days within the last month.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	//
	// >  Only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters are supported.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified for ApsaraDB RDS for MySQL Cluster Edition instances and PolarDB for MySQL clusters.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The SQL ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetPfsSqlSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSampleRequest) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSampleRequest) SetEndTime(v int64) *GetPfsSqlSampleRequest {
	s.EndTime = &v
	return s
}

func (s *GetPfsSqlSampleRequest) SetInstanceId(v string) *GetPfsSqlSampleRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPfsSqlSampleRequest) SetNodeId(v string) *GetPfsSqlSampleRequest {
	s.NodeId = &v
	return s
}

func (s *GetPfsSqlSampleRequest) SetSqlId(v string) *GetPfsSqlSampleRequest {
	s.SqlId = &v
	return s
}

func (s *GetPfsSqlSampleRequest) SetStartTime(v int64) *GetPfsSqlSampleRequest {
	s.StartTime = &v
	return s
}

type GetPfsSqlSampleResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The queried SQL sample data.
	Data []*GetPfsSqlSampleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Repeated"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPfsSqlSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSampleResponseBody) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSampleResponseBody) SetCode(v int64) *GetPfsSqlSampleResponseBody {
	s.Code = &v
	return s
}

func (s *GetPfsSqlSampleResponseBody) SetData(v []*GetPfsSqlSampleResponseBodyData) *GetPfsSqlSampleResponseBody {
	s.Data = v
	return s
}

func (s *GetPfsSqlSampleResponseBody) SetMessage(v string) *GetPfsSqlSampleResponseBody {
	s.Message = &v
	return s
}

func (s *GetPfsSqlSampleResponseBody) SetRequestId(v string) *GetPfsSqlSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBody) SetSuccess(v bool) *GetPfsSqlSampleResponseBody {
	s.Success = &v
	return s
}

type GetPfsSqlSampleResponseBodyData struct {
	// The number of internal on-disk temporary tables that were created when the SQL statement was executed.
	CreateTmpDiskTables *int32 `json:"CreateTmpDiskTables,omitempty" xml:"CreateTmpDiskTables,omitempty"`
	// The number of internal temporary tables that were created when the SQL statement was executed.
	CreateTmpTables *int32 `json:"CreateTmpTables,omitempty" xml:"CreateTmpTables,omitempty"`
	// The name of the database.
	Db *string `json:"Db,omitempty" xml:"Db,omitempty"`
	// The end ID of the event. By default, the value of this parameter is NULL when the event starts and is changed to the event ID when the event ends.
	EndEventId *int32 `json:"EndEventId,omitempty" xml:"EndEventId,omitempty"`
	// The number of errors returned for the SQL statement.
	Errors *int32 `json:"Errors,omitempty" xml:"Errors,omitempty"`
	// The event ID.
	EventId *int32 `json:"EventId,omitempty" xml:"EventId,omitempty"`
	// The name of the event.
	EventName *string `json:"EventName,omitempty" xml:"EventName,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The execution duration. Unit: millisecond.
	Latency *float64 `json:"Latency,omitempty" xml:"Latency,omitempty"`
	// The lock wait duration. Unit: millisecond.
	LockLatency *float64 `json:"LockLatency,omitempty" xml:"LockLatency,omitempty"`
	// The logical database ID.
	LogicId *string `json:"LogicId,omitempty" xml:"LogicId,omitempty"`
	// Indicates whether the server failed to find an index that can be used for the SQL statement. Valid values:
	//
	// * **1:** yes.
	// * **0:** no.
	NoGoodIndexUsed *int32 `json:"NoGoodIndexUsed,omitempty" xml:"NoGoodIndexUsed,omitempty"`
	// Indicates whether table scans were performed when indexes were not used. Valid values:
	//
	// * **1:** yes.
	// * **0:** no.
	NoIndexUsed *int32 `json:"NoIndexUsed,omitempty" xml:"NoIndexUsed,omitempty"`
	// The node ID.
	//
	// > This parameter is returned only for ApsaraDB RDS for MySQL Cluster Edition instances and PolarDB for MySQL clusters.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The number of rows affected by the SQL statement.
	RowsAffected *int32 `json:"RowsAffected,omitempty" xml:"RowsAffected,omitempty"`
	// The number of rows scanned by the SQL statement.
	RowsExamined *int32 `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty"`
	// The number of rows returned by the SQL statement.
	RowsSent *int32 `json:"RowsSent,omitempty" xml:"RowsSent,omitempty"`
	// The number of joins that are used to perform table scans without using indexes.
	//
	// > This parameter is used to count the number of joins that did not use indexes. If the value of this parameter is not 0, check the table indexes.
	SelectFullJoin *int32 `json:"SelectFullJoin,omitempty" xml:"SelectFullJoin,omitempty"`
	// The number of joins that used ranges on referenced tables.
	SelectFullRangeJoin *int32 `json:"SelectFullRangeJoin,omitempty" xml:"SelectFullRangeJoin,omitempty"`
	// The number of joins that used ranges on the first table.
	SelectRange *int32 `json:"SelectRange,omitempty" xml:"SelectRange,omitempty"`
	// The number of joins that did not have key values. The keys and values were checked for each row of data.
	//
	// >  This parameter is used to count the number of joins that did not use indexes. If the value of this parameter is not 0, check the table indexes.
	SelectRangeCheck *int32 `json:"SelectRangeCheck,omitempty" xml:"SelectRangeCheck,omitempty"`
	// The number of scans.
	SelectScan *int32 `json:"SelectScan,omitempty" xml:"SelectScan,omitempty"`
	// The number of merges that the sorting algorithm must perform.
	SortMergePasses *int32 `json:"SortMergePasses,omitempty" xml:"SortMergePasses,omitempty"`
	// The number of times the data was sorted by using ranges.
	SortRange *int32 `json:"SortRange,omitempty" xml:"SortRange,omitempty"`
	// The number of sorted rows.
	SortRows *int32 `json:"SortRows,omitempty" xml:"SortRows,omitempty"`
	// The number of sorts that were performed during table scans.
	SortScan *int32 `json:"SortScan,omitempty" xml:"SortScan,omitempty"`
	// The SQL sample.
	Sql *string `json:"Sql,omitempty" xml:"Sql,omitempty"`
	// The SQL ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The thread ID.
	ThreadId *int32 `json:"ThreadId,omitempty" xml:"ThreadId,omitempty"`
	// The time when the SQL statement was executed. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The user ID.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The number of warnings returned for the SQL statement.
	Warnings *int32 `json:"Warnings,omitempty" xml:"Warnings,omitempty"`
}

func (s GetPfsSqlSampleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSampleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSampleResponseBodyData) SetCreateTmpDiskTables(v int32) *GetPfsSqlSampleResponseBodyData {
	s.CreateTmpDiskTables = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetCreateTmpTables(v int32) *GetPfsSqlSampleResponseBodyData {
	s.CreateTmpTables = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetDb(v string) *GetPfsSqlSampleResponseBodyData {
	s.Db = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetEndEventId(v int32) *GetPfsSqlSampleResponseBodyData {
	s.EndEventId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetErrors(v int32) *GetPfsSqlSampleResponseBodyData {
	s.Errors = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetEventId(v int32) *GetPfsSqlSampleResponseBodyData {
	s.EventId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetEventName(v string) *GetPfsSqlSampleResponseBodyData {
	s.EventName = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetInstanceId(v string) *GetPfsSqlSampleResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetLatency(v float64) *GetPfsSqlSampleResponseBodyData {
	s.Latency = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetLockLatency(v float64) *GetPfsSqlSampleResponseBodyData {
	s.LockLatency = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetLogicId(v string) *GetPfsSqlSampleResponseBodyData {
	s.LogicId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetNoGoodIndexUsed(v int32) *GetPfsSqlSampleResponseBodyData {
	s.NoGoodIndexUsed = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetNoIndexUsed(v int32) *GetPfsSqlSampleResponseBodyData {
	s.NoIndexUsed = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetNodeId(v string) *GetPfsSqlSampleResponseBodyData {
	s.NodeId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetRowsAffected(v int32) *GetPfsSqlSampleResponseBodyData {
	s.RowsAffected = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetRowsExamined(v int32) *GetPfsSqlSampleResponseBodyData {
	s.RowsExamined = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetRowsSent(v int32) *GetPfsSqlSampleResponseBodyData {
	s.RowsSent = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectFullJoin(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectFullJoin = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectFullRangeJoin(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectFullRangeJoin = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectRange(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectRange = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectRangeCheck(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectRangeCheck = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSelectScan(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SelectScan = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSortMergePasses(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SortMergePasses = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSortRange(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SortRange = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSortRows(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SortRows = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSortScan(v int32) *GetPfsSqlSampleResponseBodyData {
	s.SortScan = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSql(v string) *GetPfsSqlSampleResponseBodyData {
	s.Sql = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetSqlId(v string) *GetPfsSqlSampleResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetThreadId(v int32) *GetPfsSqlSampleResponseBodyData {
	s.ThreadId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetTimestamp(v int64) *GetPfsSqlSampleResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetUserId(v string) *GetPfsSqlSampleResponseBodyData {
	s.UserId = &v
	return s
}

func (s *GetPfsSqlSampleResponseBodyData) SetWarnings(v int32) *GetPfsSqlSampleResponseBodyData {
	s.Warnings = &v
	return s
}

type GetPfsSqlSampleResponse struct {
	Headers    map[string]*string           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetPfsSqlSampleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPfsSqlSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSampleResponse) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSampleResponse) SetHeaders(v map[string]*string) *GetPfsSqlSampleResponse {
	s.Headers = v
	return s
}

func (s *GetPfsSqlSampleResponse) SetStatusCode(v int32) *GetPfsSqlSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPfsSqlSampleResponse) SetBody(v *GetPfsSqlSampleResponseBody) *GetPfsSqlSampleResponse {
	s.Body = v
	return s
}

type GetPfsSqlSummariesRequest struct {
	// Specifies whether to sort the returned entries in ascending order. Default value: **false**. Valid values:
	//
	// *   **true**
	// *   **false**
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time. You can view the data of up to seven days within the last month.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The keywords of the SQL template. Separate multiple keywords with spaces.
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The node ID.
	//
	// >  This parameter must be specified if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The field by which to sort the returned entries. Default value: **count**.
	//
	// *   **count**: the number of executions.
	// *   **avgRt**: the average execution duration.
	// *   **rtRate**: the execution duration percentage.
	// *   **rowsExamined**: the total number of scanned rows.
	// *   **avgRowsExamined**: the average number of scanned rows.
	// *   **avgRowsReturned**: the average number of returned rows.
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10. Valid values: 1 to 100.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The SQL ID.
	//
	// >  If this parameter is specified, the full request statistics of the specified SQL query are collected. If this parameter is left empty, the full request statistics of the entire database instance are collected.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetPfsSqlSummariesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesRequest) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesRequest) SetAsc(v bool) *GetPfsSqlSummariesRequest {
	s.Asc = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetEndTime(v int64) *GetPfsSqlSummariesRequest {
	s.EndTime = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetInstanceId(v string) *GetPfsSqlSummariesRequest {
	s.InstanceId = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetKeywords(v string) *GetPfsSqlSummariesRequest {
	s.Keywords = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetNodeId(v string) *GetPfsSqlSummariesRequest {
	s.NodeId = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetOrderBy(v string) *GetPfsSqlSummariesRequest {
	s.OrderBy = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetPageNo(v int32) *GetPfsSqlSummariesRequest {
	s.PageNo = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetPageSize(v int32) *GetPfsSqlSummariesRequest {
	s.PageSize = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetSqlId(v string) *GetPfsSqlSummariesRequest {
	s.SqlId = &v
	return s
}

func (s *GetPfsSqlSummariesRequest) SetStartTime(v int64) *GetPfsSqlSummariesRequest {
	s.StartTime = &v
	return s
}

type GetPfsSqlSummariesResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetPfsSqlSummariesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetPfsSqlSummariesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesResponseBody) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesResponseBody) SetCode(v int64) *GetPfsSqlSummariesResponseBody {
	s.Code = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBody) SetData(v *GetPfsSqlSummariesResponseBodyData) *GetPfsSqlSummariesResponseBody {
	s.Data = v
	return s
}

func (s *GetPfsSqlSummariesResponseBody) SetMessage(v string) *GetPfsSqlSummariesResponseBody {
	s.Message = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBody) SetRequestId(v string) *GetPfsSqlSummariesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBody) SetSuccess(v bool) *GetPfsSqlSummariesResponseBody {
	s.Success = &v
	return s
}

type GetPfsSqlSummariesResponseBodyData struct {
	// The reserved parameter.
	Extra interface{} `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The detailed information.
	List []*GetPfsSqlSummariesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetPfsSqlSummariesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesResponseBodyData) SetExtra(v interface{}) *GetPfsSqlSummariesResponseBodyData {
	s.Extra = v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyData) SetList(v []*GetPfsSqlSummariesResponseBodyDataList) *GetPfsSqlSummariesResponseBodyData {
	s.List = v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyData) SetPageNo(v int64) *GetPfsSqlSummariesResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyData) SetPageSize(v int64) *GetPfsSqlSummariesResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyData) SetTotal(v int64) *GetPfsSqlSummariesResponseBodyData {
	s.Total = &v
	return s
}

type GetPfsSqlSummariesResponseBodyDataList struct {
	// The average execution latency. Unit: millisecond.
	AvgLatency *float64 `json:"AvgLatency,omitempty" xml:"AvgLatency,omitempty"`
	// The total number of executions.
	Count *int64 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The percentage of the number of executions.
	CountRate *float64 `json:"CountRate,omitempty" xml:"CountRate,omitempty"`
	// The ratio of the CPU execution duration to the total execution duration of the SQL statement.
	CpuRate *float64 `json:"CpuRate,omitempty" xml:"CpuRate,omitempty"`
	// The CPU execution duration. Unit: millisecond.
	CpuTime *float64 `json:"CpuTime,omitempty" xml:"CpuTime,omitempty"`
	// The data read duration. Unit: millisecond.
	DataReadTime *float64 `json:"DataReadTime,omitempty" xml:"DataReadTime,omitempty"`
	// The number of nodes from which data can be read.
	DataReads *int32 `json:"DataReads,omitempty" xml:"DataReads,omitempty"`
	// The data write duration. Unit: millisecond.
	DataWriteTime *float64 `json:"DataWriteTime,omitempty" xml:"DataWriteTime,omitempty"`
	// The number of nodes to which data can be written.
	DataWrites *int32 `json:"DataWrites,omitempty" xml:"DataWrites,omitempty"`
	// The name of the database.
	Db *string `json:"Db,omitempty" xml:"Db,omitempty"`
	// The execution duration. Unit: millisecond.
	ElapsedTime *float64 `json:"ElapsedTime,omitempty" xml:"ElapsedTime,omitempty"`
	// The number of errors.
	ErrCount *int64 `json:"ErrCount,omitempty" xml:"ErrCount,omitempty"`
	// The time when the SQL statement was executed for the first time. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	FirstTime *int64 `json:"FirstTime,omitempty" xml:"FirstTime,omitempty"`
	// Indicates whether full table scan was enabled. Valid values:
	//
	// * **true**
	// * **false**
	FullScan *bool `json:"FullScan,omitempty" xml:"FullScan,omitempty"`
	// The primary key ID.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The time when the SQL statement was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	LastTime *int64 `json:"LastTime,omitempty" xml:"LastTime,omitempty"`
	// The average lock wait latency. Unit: millisecond.
	LockLatencyAvg *float64 `json:"LockLatencyAvg,omitempty" xml:"LockLatencyAvg,omitempty"`
	// The logical database ID.
	LogicId *int64 `json:"LogicId,omitempty" xml:"LogicId,omitempty"`
	// The number of logical nodes.
	LogicReads *int64 `json:"LogicReads,omitempty" xml:"LogicReads,omitempty"`
	// The maximum execution latency. Unit: millisecond.
	MaxLatency *float64 `json:"MaxLatency,omitempty" xml:"MaxLatency,omitempty"`
	// The number of mutex spins.
	MutexSpins *int32 `json:"MutexSpins,omitempty" xml:"MutexSpins,omitempty"`
	// The number of mutex waits.
	MutexWaits *int32 `json:"MutexWaits,omitempty" xml:"MutexWaits,omitempty"`
	// The node ID.
	//
	// > This parameter is returned only if the database instance is an ApsaraDB RDS for MySQL Cluster Edition instance or a PolarDB for MySQL cluster.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The number of physical asynchronous nodes.
	PhysicalAsyncReads *int64 `json:"PhysicalAsyncReads,omitempty" xml:"PhysicalAsyncReads,omitempty"`
	// The number of physical nodes.
	PhysicalReads *int64 `json:"PhysicalReads,omitempty" xml:"PhysicalReads,omitempty"`
	// The SQL template.
	Psql *string `json:"Psql,omitempty" xml:"Psql,omitempty"`
	// The number of redo nodes.
	RedoWrites *int64 `json:"RedoWrites,omitempty" xml:"RedoWrites,omitempty"`
	// The number of rows that are affected by the SQL statement.
	RowsAffected *int64 `json:"RowsAffected,omitempty" xml:"RowsAffected,omitempty"`
	// The average number of rows affected by the SQL statement.
	RowsAffectedAvg *float64 `json:"RowsAffectedAvg,omitempty" xml:"RowsAffectedAvg,omitempty"`
	// The total number of scanned rows.
	RowsExamined *int64 `json:"RowsExamined,omitempty" xml:"RowsExamined,omitempty"`
	// The average number of scanned rows.
	RowsExaminedAvg *float64 `json:"RowsExaminedAvg,omitempty" xml:"RowsExaminedAvg,omitempty"`
	// The average number of returned rows.
	RowsSendAvg *float64 `json:"RowsSendAvg,omitempty" xml:"RowsSendAvg,omitempty"`
	// The number of rows returned by the SQL statement.
	RowsSent *int64 `json:"RowsSent,omitempty" xml:"RowsSent,omitempty"`
	// The average number of rows returned for the SQL statement.
	RowsSentAvg *float64 `json:"RowsSentAvg,omitempty" xml:"RowsSentAvg,omitempty"`
	// The number of sorted rows.
	RowsSorted *int64 `json:"RowsSorted,omitempty" xml:"RowsSorted,omitempty"`
	// The execution duration percentage.
	RtRate *float64 `json:"RtRate,omitempty" xml:"RtRate,omitempty"`
	// Indicates whether read/write splitting was enabled. Valid values:
	//
	// * **0:** Read/write splitting was disabled.
	// * **1:** Read/write splitting was enabled.
	RwlockOsWaits *int32 `json:"RwlockOsWaits,omitempty" xml:"RwlockOsWaits,omitempty"`
	// The read/write splitting parameters.
	RwlockSpinRounds *int32 `json:"RwlockSpinRounds,omitempty" xml:"RwlockSpinRounds,omitempty"`
	// Indices whether multi-index scanning was enabled. Valid values:
	//
	// * **0:** Multi-index scanning was disabled.
	// * **1:** Multi-index scanning was enabled.
	RwlockSpinWaits *int32 `json:"RwlockSpinWaits,omitempty" xml:"RwlockSpinWaits,omitempty"`
	// The average number of joins that performed table scans without using indexes.
	//
	// > If the value of this parameter is not 0, check the table indexes.
	SelectFullJoinAvg *float64 `json:"SelectFullJoinAvg,omitempty" xml:"SelectFullJoinAvg,omitempty"`
	// The average number of joins that selected a range.
	SelectFullRangeJoinAvg *float64 `json:"SelectFullRangeJoinAvg,omitempty" xml:"SelectFullRangeJoinAvg,omitempty"`
	// The average selected range.
	SelectRangeAvg *float64 `json:"SelectRangeAvg,omitempty" xml:"SelectRangeAvg,omitempty"`
	// The average number of scanned rows.
	SelectScanAvg *float64 `json:"SelectScanAvg,omitempty" xml:"SelectScanAvg,omitempty"`
	// The semi-synchronous replication latency. Unit: millisecond.
	SemisyncDelayTime *float64 `json:"SemisyncDelayTime,omitempty" xml:"SemisyncDelayTime,omitempty"`
	// The amount of time consumed for locking the server. Unit: millisecond.
	ServerLockTime *float64 `json:"ServerLockTime,omitempty" xml:"ServerLockTime,omitempty"`
	// The number of merges that the sorting algorithm must perform.
	SortMergePasses *int64 `json:"SortMergePasses,omitempty" xml:"SortMergePasses,omitempty"`
	// The average number of sorts that were performed by using a range.
	SortRangeAvg *float64 `json:"SortRangeAvg,omitempty" xml:"SortRangeAvg,omitempty"`
	// The average number of sorted rows.
	SortRowsAvg *float64 `json:"SortRowsAvg,omitempty" xml:"SortRowsAvg,omitempty"`
	// The average number of sorts that were performed during table scans.
	SortScanAvg *float64 `json:"SortScanAvg,omitempty" xml:"SortScanAvg,omitempty"`
	// The SQL template ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The type of the SQL statement. Valid values:
	//
	// * **SELECT**
	// * **UPDATE**
	// * **DELETE**
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The names of tables in the database.
	Tables []*string `json:"Tables,omitempty" xml:"Tables,omitempty" type:"Repeated"`
	// The reserved parameter.
	TimerWaitAvg *float64 `json:"TimerWaitAvg,omitempty" xml:"TimerWaitAvg,omitempty"`
	// The data timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The number of on-disk temporary tables.
	TmpDiskTables *int64 `json:"TmpDiskTables,omitempty" xml:"TmpDiskTables,omitempty"`
	// The average number of on-disk temporary tables.
	TmpDiskTablesAvg *float64 `json:"TmpDiskTablesAvg,omitempty" xml:"TmpDiskTablesAvg,omitempty"`
	// The number of temporary tables.
	TmpTables *int64 `json:"TmpTables,omitempty" xml:"TmpTables,omitempty"`
	// The average number of temporary tables.
	TmpTablesAvg *float64 `json:"TmpTablesAvg,omitempty" xml:"TmpTablesAvg,omitempty"`
	// The execution latency. Unit: millisecond.
	TotalLatency *float64 `json:"TotalLatency,omitempty" xml:"TotalLatency,omitempty"`
	// The amount of time consumed for locking the storage transaction. Unit: millisecond.
	TransactionLockTime *float64 `json:"TransactionLockTime,omitempty" xml:"TransactionLockTime,omitempty"`
	// The user ID.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	// The number of warnings.
	WarnCount *int64 `json:"WarnCount,omitempty" xml:"WarnCount,omitempty"`
}

func (s GetPfsSqlSummariesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetAvgLatency(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.AvgLatency = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetCount(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.Count = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetCountRate(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.CountRate = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetCpuRate(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.CpuRate = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetCpuTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.CpuTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDataReadTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.DataReadTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDataReads(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.DataReads = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDataWriteTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.DataWriteTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDataWrites(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.DataWrites = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetDb(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.Db = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetElapsedTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.ElapsedTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetErrCount(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.ErrCount = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetFirstTime(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.FirstTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetFullScan(v bool) *GetPfsSqlSummariesResponseBodyDataList {
	s.FullScan = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetId(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.Id = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetInstanceId(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetLastTime(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.LastTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetLockLatencyAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.LockLatencyAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetLogicId(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.LogicId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetLogicReads(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.LogicReads = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetMaxLatency(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.MaxLatency = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetMutexSpins(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.MutexSpins = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetMutexWaits(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.MutexWaits = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetNodeId(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.NodeId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetPhysicalAsyncReads(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.PhysicalAsyncReads = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetPhysicalReads(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.PhysicalReads = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetPsql(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.Psql = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRedoWrites(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RedoWrites = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsAffected(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsAffected = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsAffectedAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsAffectedAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsExamined(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsExamined = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsExaminedAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsExaminedAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsSendAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsSendAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsSent(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsSent = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsSentAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsSentAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRowsSorted(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RowsSorted = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRtRate(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.RtRate = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRwlockOsWaits(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.RwlockOsWaits = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRwlockSpinRounds(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.RwlockSpinRounds = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetRwlockSpinWaits(v int32) *GetPfsSqlSummariesResponseBodyDataList {
	s.RwlockSpinWaits = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSelectFullJoinAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SelectFullJoinAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSelectFullRangeJoinAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SelectFullRangeJoinAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSelectRangeAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SelectRangeAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSelectScanAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SelectScanAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSemisyncDelayTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SemisyncDelayTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetServerLockTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.ServerLockTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSortMergePasses(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SortMergePasses = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSortRangeAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SortRangeAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSortRowsAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SortRowsAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSortScanAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.SortScanAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSqlId(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetSqlType(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.SqlType = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTables(v []*string) *GetPfsSqlSummariesResponseBodyDataList {
	s.Tables = v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTimerWaitAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TimerWaitAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTimestamp(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.Timestamp = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTmpDiskTables(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TmpDiskTables = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTmpDiskTablesAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TmpDiskTablesAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTmpTables(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TmpTables = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTmpTablesAvg(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TmpTablesAvg = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTotalLatency(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TotalLatency = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetTransactionLockTime(v float64) *GetPfsSqlSummariesResponseBodyDataList {
	s.TransactionLockTime = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetUserId(v string) *GetPfsSqlSummariesResponseBodyDataList {
	s.UserId = &v
	return s
}

func (s *GetPfsSqlSummariesResponseBodyDataList) SetWarnCount(v int64) *GetPfsSqlSummariesResponseBodyDataList {
	s.WarnCount = &v
	return s
}

type GetPfsSqlSummariesResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetPfsSqlSummariesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetPfsSqlSummariesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetPfsSqlSummariesResponse) GoString() string {
	return s.String()
}

func (s *GetPfsSqlSummariesResponse) SetHeaders(v map[string]*string) *GetPfsSqlSummariesResponse {
	s.Headers = v
	return s
}

func (s *GetPfsSqlSummariesResponse) SetStatusCode(v int32) *GetPfsSqlSummariesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetPfsSqlSummariesResponse) SetBody(v *GetPfsSqlSummariesResponseBody) *GetPfsSqlSummariesResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeDataStatsRequest struct {
	// Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
	//
	// *   **true**: sorts the returned entries in ascending order.
	// *   **false**: does not sort the returned entries in ascending order.
	Asc *string `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The name of the database to be queried.
	DbNames *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PolarDBMySQL**
	// *   **PostgreSQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The keywords of the SQL template. Separate multiple keywords with spaces.
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The logical relationship between multiple keywords. Valid values:
	//
	// *   **or**
	// *   **and**
	LogicalOperator *string `json:"LogicalOperator,omitempty" xml:"LogicalOperator,omitempty"`
	// Specifies whether to query only SQL templates that need to be optimized. Default value: **false**. Valid values:
	//
	// *   **true**: queries only SQL templates that need to be optimized.
	// *   **false**: does not query only SQL statements that need to be optimized.
	OnlyOptimizedSql *string `json:"OnlyOptimizedSql,omitempty" xml:"OnlyOptimizedSql,omitempty"`
	// The field by which to sort the returned entries. Default value: **count**. Valid values:
	//
	// *   **count**: the number of executions.
	// *   **maxQueryTime**: the longest execution time.
	// *   **avgQueryTime**: the average execution time.
	// *   **maxLockTime**: the longest lock wait time.
	// *   **avgLockTime**: the longest lock wait time.
	// *   **maxRowsExamined**: the largest number of scanned rows.
	// *   **avgRowsExamined**: the average number of scanned rows.
	// *   **maxRowsSent**: the largest number of returned rows.
	// *   **avgRowsSent**: the average number of returned rows.
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// *   **cn-china**: Chinese mainland
	// *   **cn-hongkong**: China (Hong Kong)
	// *   **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  Set this parameter to **cn-china** for the instances that are created in the regions in the Chinese mainland.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The tags that are used to filter SQL templates. Separate multiple tags with commas (,). For more information, see [Query governance](~~290038~~).
	Rules *string `json:"Rules,omitempty" xml:"Rules,omitempty"`
	// The SQL template ID. You can query the ID of a template by calling the [GetQueryOptimizeExecErrorStats](~~405235~~) operation.
	SqlIds *string `json:"SqlIds,omitempty" xml:"SqlIds,omitempty"`
	// The reserved parameter.
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
	// The time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// The account of the database to be queried.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetQueryOptimizeDataStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsRequest) SetAsc(v string) *GetQueryOptimizeDataStatsRequest {
	s.Asc = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetDbNames(v string) *GetQueryOptimizeDataStatsRequest {
	s.DbNames = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetEngine(v string) *GetQueryOptimizeDataStatsRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetInstanceIds(v string) *GetQueryOptimizeDataStatsRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetKeywords(v string) *GetQueryOptimizeDataStatsRequest {
	s.Keywords = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetLogicalOperator(v string) *GetQueryOptimizeDataStatsRequest {
	s.LogicalOperator = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetOnlyOptimizedSql(v string) *GetQueryOptimizeDataStatsRequest {
	s.OnlyOptimizedSql = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetOrderBy(v string) *GetQueryOptimizeDataStatsRequest {
	s.OrderBy = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetPageNo(v string) *GetQueryOptimizeDataStatsRequest {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetPageSize(v string) *GetQueryOptimizeDataStatsRequest {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetRegion(v string) *GetQueryOptimizeDataStatsRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetRules(v string) *GetQueryOptimizeDataStatsRequest {
	s.Rules = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetSqlIds(v string) *GetQueryOptimizeDataStatsRequest {
	s.SqlIds = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetTagNames(v string) *GetQueryOptimizeDataStatsRequest {
	s.TagNames = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetTime(v string) *GetQueryOptimizeDataStatsRequest {
	s.Time = &v
	return s
}

func (s *GetQueryOptimizeDataStatsRequest) SetUser(v string) *GetQueryOptimizeDataStatsRequest {
	s.User = &v
	return s
}

type GetQueryOptimizeDataStatsResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetQueryOptimizeDataStatsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetCode(v string) *GetQueryOptimizeDataStatsResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetData(v *GetQueryOptimizeDataStatsResponseBodyData) *GetQueryOptimizeDataStatsResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetMessage(v string) *GetQueryOptimizeDataStatsResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetRequestId(v string) *GetQueryOptimizeDataStatsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBody) SetSuccess(v string) *GetQueryOptimizeDataStatsResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeDataStatsResponseBodyData struct {
	// The reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The information about the SQL templates.
	List []*GetQueryOptimizeDataStatsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The reserved parameter.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The reserved parameter.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetExtra(v string) *GetQueryOptimizeDataStatsResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetList(v []*GetQueryOptimizeDataStatsResponseBodyDataList) *GetQueryOptimizeDataStatsResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeDataStatsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeDataStatsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyData) SetTotal(v int64) *GetQueryOptimizeDataStatsResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeDataStatsResponseBodyDataList struct {
	// The average lock wait time. Unit: seconds.
	AvgLockTime *float64 `json:"AvgLockTime,omitempty" xml:"AvgLockTime,omitempty"`
	// The average query execution time. Unit: seconds.
	AvgQueryTime *float64 `json:"AvgQueryTime,omitempty" xml:"AvgQueryTime,omitempty"`
	// The average number of rows affected by the SQL statement.
	//
	// > A value of -1 indicates that this parameter is not collected.
	AvgRowsAffected *float64 `json:"AvgRowsAffected,omitempty" xml:"AvgRowsAffected,omitempty"`
	// The average number of scanned rows.
	AvgRowsExamined *float64 `json:"AvgRowsExamined,omitempty" xml:"AvgRowsExamined,omitempty"`
	// The average number of returned rows.
	AvgRowsSent *float64 `json:"AvgRowsSent,omitempty" xml:"AvgRowsSent,omitempty"`
	// The number of times that the SQL template is executed.
	Count *int32 `json:"Count,omitempty" xml:"Count,omitempty"`
	// The name of the database to which the SQL template belongs.
	Dbname *string `json:"Dbname,omitempty" xml:"Dbname,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The longest lock wait time. Unit: seconds.
	MaxLockTime *float64 `json:"MaxLockTime,omitempty" xml:"MaxLockTime,omitempty"`
	// The longest query execution time. Unit: seconds.
	MaxQueryTime *float64 `json:"MaxQueryTime,omitempty" xml:"MaxQueryTime,omitempty"`
	// The largest number of rows affected by the SQL template.
	//
	// > A value of -1 indicates that this parameter is not collected.
	MaxRowsAffected *int64 `json:"MaxRowsAffected,omitempty" xml:"MaxRowsAffected,omitempty"`
	// The largest number of scanned rows.
	MaxRowsExamined *int64 `json:"MaxRowsExamined,omitempty" xml:"MaxRowsExamined,omitempty"`
	// The largest number of returned rows.
	MaxRowsSent *int64 `json:"MaxRowsSent,omitempty" xml:"MaxRowsSent,omitempty"`
	// The SQL template.
	Psql *string `json:"Psql,omitempty" xml:"Psql,omitempty"`
	// The information about the rules.
	RuleList []*GetQueryOptimizeDataStatsResponseBodyDataListRuleList `json:"RuleList,omitempty" xml:"RuleList,omitempty" type:"Repeated"`
	// The SQL template ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The sample query that took the longest time to execute.
	SqlSample *string `json:"SqlSample,omitempty" xml:"SqlSample,omitempty"`
	// The type of the SQL statement.
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The account of the database.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgLockTime(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgLockTime = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgQueryTime(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgQueryTime = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgRowsAffected(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgRowsAffected = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgRowsExamined(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgRowsExamined = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetAvgRowsSent(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.AvgRowsSent = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetCount(v int32) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.Count = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetDbname(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.Dbname = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetInstanceId(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxLockTime(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxLockTime = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxQueryTime(v float64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxQueryTime = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxRowsAffected(v int64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxRowsAffected = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxRowsExamined(v int64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxRowsExamined = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetMaxRowsSent(v int64) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.MaxRowsSent = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetPsql(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.Psql = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetRuleList(v []*GetQueryOptimizeDataStatsResponseBodyDataListRuleList) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.RuleList = v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetSqlId(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetSqlSample(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.SqlSample = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetSqlType(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.SqlType = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataList) SetUser(v string) *GetQueryOptimizeDataStatsResponseBodyDataList {
	s.User = &v
	return s
}

type GetQueryOptimizeDataStatsResponseBodyDataListRuleList struct {
	// The rule name.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The type of the rule. Valid values:
	//
	// * **Predefined**
	// * **UserDefined**
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetQueryOptimizeDataStatsResponseBodyDataListRuleList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponseBodyDataListRuleList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataListRuleList) SetName(v string) *GetQueryOptimizeDataStatsResponseBodyDataListRuleList {
	s.Name = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponseBodyDataListRuleList) SetType(v string) *GetQueryOptimizeDataStatsResponseBodyDataListRuleList {
	s.Type = &v
	return s
}

type GetQueryOptimizeDataStatsResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeDataStatsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeDataStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataStatsResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataStatsResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeDataStatsResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeDataStatsResponse) SetStatusCode(v int32) *GetQueryOptimizeDataStatsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeDataStatsResponse) SetBody(v *GetQueryOptimizeDataStatsResponseBody) *GetQueryOptimizeDataStatsResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeDataTopRequest struct {
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PolarDBMySQL**
	// *   **PostgreSQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// *   **cn-china**: Chinese mainland
	// *   **cn-hongkong**: China (Hong Kong)
	// *   **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  Set this parameter to **cn-china** for all your instances that reside in the regions in the Chinese mainland.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The reserved parameter.
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
	// The time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
	// The type of instances that you want to query. Valid values:
	//
	// *   **RED**: the best-performing instances
	// *   **BLACK**: the worst-performing instances
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetQueryOptimizeDataTopRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopRequest) SetEngine(v string) *GetQueryOptimizeDataTopRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetInstanceIds(v string) *GetQueryOptimizeDataTopRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetRegion(v string) *GetQueryOptimizeDataTopRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetTagNames(v string) *GetQueryOptimizeDataTopRequest {
	s.TagNames = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetTime(v string) *GetQueryOptimizeDataTopRequest {
	s.Time = &v
	return s
}

func (s *GetQueryOptimizeDataTopRequest) SetType(v string) *GetQueryOptimizeDataTopRequest {
	s.Type = &v
	return s
}

type GetQueryOptimizeDataTopResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetQueryOptimizeDataTopResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeDataTopResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopResponseBody) SetCode(v string) *GetQueryOptimizeDataTopResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBody) SetData(v *GetQueryOptimizeDataTopResponseBodyData) *GetQueryOptimizeDataTopResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBody) SetMessage(v string) *GetQueryOptimizeDataTopResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBody) SetRequestId(v string) *GetQueryOptimizeDataTopResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBody) SetSuccess(v string) *GetQueryOptimizeDataTopResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeDataTopResponseBodyData struct {
	// The reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The information about the instances.
	List []*GetQueryOptimizeDataTopResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The reserved parameter.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The reserved parameter.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeDataTopResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetExtra(v string) *GetQueryOptimizeDataTopResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetList(v []*GetQueryOptimizeDataTopResponseBodyDataList) *GetQueryOptimizeDataTopResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeDataTopResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeDataTopResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyData) SetTotal(v int64) *GetQueryOptimizeDataTopResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeDataTopResponseBodyDataList struct {
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The metric name. Valid values:
	//
	// * **sqlExecuteCount**: the number of slow SQL executions.
	// * **optimizedSqlExecuteCount**: the number of slow SQL executions that need to be optimized.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
	// The metric value.
	Value *float64 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetQueryOptimizeDataTopResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopResponseBodyDataList) SetInstanceId(v string) *GetQueryOptimizeDataTopResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyDataList) SetType(v string) *GetQueryOptimizeDataTopResponseBodyDataList {
	s.Type = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponseBodyDataList) SetValue(v float64) *GetQueryOptimizeDataTopResponseBodyDataList {
	s.Value = &v
	return s
}

type GetQueryOptimizeDataTopResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeDataTopResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeDataTopResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTopResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTopResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeDataTopResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeDataTopResponse) SetStatusCode(v int32) *GetQueryOptimizeDataTopResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeDataTopResponse) SetBody(v *GetQueryOptimizeDataTopResponseBody) *GetQueryOptimizeDataTopResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeDataTrendRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The end time must be later than the start time, but not later than 00:00:00 (UTC+8) on the current day.
	End *string `json:"End,omitempty" xml:"End,omitempty"`
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PolarDBMySQL**
	// *   **PostgreSQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// *   **cn-china**: Chinese mainland.
	// *   **cn-hongkong**: China (Hong Kong).
	// *   **ap-southeast-1**: Singapore.
	//
	// This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region specified by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  If your instances reside in the regions inside the Chinese mainland, set this parameter to **cn-china**.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  You can specify a start time up to two months earlier than the current time.
	Start *string `json:"Start,omitempty" xml:"Start,omitempty"`
	// The reserved parameter.
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
}

func (s GetQueryOptimizeDataTrendRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendRequest) SetEnd(v string) *GetQueryOptimizeDataTrendRequest {
	s.End = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetEngine(v string) *GetQueryOptimizeDataTrendRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetInstanceIds(v string) *GetQueryOptimizeDataTrendRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetRegion(v string) *GetQueryOptimizeDataTrendRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetStart(v string) *GetQueryOptimizeDataTrendRequest {
	s.Start = &v
	return s
}

func (s *GetQueryOptimizeDataTrendRequest) SetTagNames(v string) *GetQueryOptimizeDataTrendRequest {
	s.TagNames = &v
	return s
}

type GetQueryOptimizeDataTrendResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetQueryOptimizeDataTrendResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeDataTrendResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetCode(v string) *GetQueryOptimizeDataTrendResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetData(v *GetQueryOptimizeDataTrendResponseBodyData) *GetQueryOptimizeDataTrendResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetMessage(v string) *GetQueryOptimizeDataTrendResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetRequestId(v string) *GetQueryOptimizeDataTrendResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBody) SetSuccess(v string) *GetQueryOptimizeDataTrendResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeDataTrendResponseBodyData struct {
	// The reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The details of the trend data.
	List []*GetQueryOptimizeDataTrendResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The reserved parameter.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The reserved parameter.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeDataTrendResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetExtra(v string) *GetQueryOptimizeDataTrendResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetList(v []*GetQueryOptimizeDataTrendResponseBodyDataList) *GetQueryOptimizeDataTrendResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeDataTrendResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeDataTrendResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyData) SetTotal(v int64) *GetQueryOptimizeDataTrendResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeDataTrendResponseBodyDataList struct {
	// The name of the metric. Valid values:
	//
	// * **sqlExecuteCount**: the number of executions of slow SQL queries.
	// * **sqlExecuteCountDiff**: the difference in the number of executions of slow SQL queries compared to the previous day.
	// * **sqlCount**: the number of slow SQL templates.
	// * **sqlCountDiff**: the difference in the number of slow SQL templates compared to the previous day.
	// * **optimizedSqlExecuteCount**: the number of optimizable executions of slow SQL queries.
	// * **optimizedSqlExecuteCountDiff**: the difference in the number of optimizable executions of slow SQL queries compared to the previous day.
	// * **optimizedSqlCount**: the number of optimizable slow SQL templates.
	// * **optimizedSqlCountDiff**: the difference in the number of optimizable slow SQL templates compared to the previous day.
	Kpi *string `json:"Kpi,omitempty" xml:"Kpi,omitempty"`
	// The data timestamp. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The value of the metric.
	Value *float64 `json:"Value,omitempty" xml:"Value,omitempty"`
}

func (s GetQueryOptimizeDataTrendResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendResponseBodyDataList) SetKpi(v string) *GetQueryOptimizeDataTrendResponseBodyDataList {
	s.Kpi = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyDataList) SetTimestamp(v int64) *GetQueryOptimizeDataTrendResponseBodyDataList {
	s.Timestamp = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponseBodyDataList) SetValue(v float64) *GetQueryOptimizeDataTrendResponseBodyDataList {
	s.Value = &v
	return s
}

type GetQueryOptimizeDataTrendResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeDataTrendResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeDataTrendResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeDataTrendResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeDataTrendResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeDataTrendResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeDataTrendResponse) SetStatusCode(v int32) *GetQueryOptimizeDataTrendResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeDataTrendResponse) SetBody(v *GetQueryOptimizeDataTrendResponseBody) *GetQueryOptimizeDataTrendResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeExecErrorSampleRequest struct {
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PolarDBMySQL**
	// *   **PostgreSQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The SQL template ID. You can call the [GetQueryOptimizeExecErrorStats](~~405235~~) operation to obtain the SQL template ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The date to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleRequest) SetEngine(v string) *GetQueryOptimizeExecErrorSampleRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleRequest) SetInstanceId(v string) *GetQueryOptimizeExecErrorSampleRequest {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleRequest) SetSqlId(v string) *GetQueryOptimizeExecErrorSampleRequest {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleRequest) SetTime(v string) *GetQueryOptimizeExecErrorSampleRequest {
	s.Time = &v
	return s
}

type GetQueryOptimizeExecErrorSampleResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetQueryOptimizeExecErrorSampleResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetCode(v string) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetData(v *GetQueryOptimizeExecErrorSampleResponseBodyData) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetMessage(v string) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetRequestId(v string) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBody) SetSuccess(v string) *GetQueryOptimizeExecErrorSampleResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeExecErrorSampleResponseBodyData struct {
	// A reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The queried data.
	List []*GetQueryOptimizeExecErrorSampleResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// A reserved parameter.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// A reserved parameter.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetExtra(v string) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetList(v []*GetQueryOptimizeExecErrorSampleResponseBodyDataList) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyData) SetTotal(v int64) *GetQueryOptimizeExecErrorSampleResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeExecErrorSampleResponseBodyDataList struct {
	// The name of the database.
	Dbname *string `json:"Dbname,omitempty" xml:"Dbname,omitempty"`
	// The error code returned.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The IP address of the client that executes the SQL statement.
	OrigHost *string `json:"OrigHost,omitempty" xml:"OrigHost,omitempty"`
	// The SQL template ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The content of the SQL statement that failed to be executed.
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
	// The point in time when the failed SQL statement was executed. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The username of the client that executes the SQL statement.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetQueryOptimizeExecErrorSampleResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetDbname(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.Dbname = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetErrorCode(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.ErrorCode = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetOrigHost(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.OrigHost = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetSqlId(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetSqlText(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.SqlText = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetTimestamp(v int64) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.Timestamp = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponseBodyDataList) SetUser(v string) *GetQueryOptimizeExecErrorSampleResponseBodyDataList {
	s.User = &v
	return s
}

type GetQueryOptimizeExecErrorSampleResponse struct {
	Headers    map[string]*string                           `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                       `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeExecErrorSampleResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeExecErrorSampleResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorSampleResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorSampleResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeExecErrorSampleResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponse) SetStatusCode(v int32) *GetQueryOptimizeExecErrorSampleResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeExecErrorSampleResponse) SetBody(v *GetQueryOptimizeExecErrorSampleResponseBody) *GetQueryOptimizeExecErrorSampleResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeExecErrorStatsRequest struct {
	// Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
	//
	// *   **true**: sorts the returned entries in ascending order.
	// *   **false**: does not sort the returned entries in ascending order.
	Asc *string `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The name of the database to be queried.
	DbNames *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PolarDBMySQL**
	// *   **PostgreSQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The keywords of the SQL template. Separate multiple keywords with spaces.
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The logical relationship between multiple keywords. Valid values:
	//
	// *   **or**
	// *   **and**
	LogicalOperator *string `json:"LogicalOperator,omitempty" xml:"LogicalOperator,omitempty"`
	// The field by which to sort the returned entries. Only error_count is supported, which specifies that the entries are sorted based on the number of failed executions.
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	PageNo *string `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	PageSize *string `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// *   **cn-china**: Chinese mainland
	// *   **cn-hongkong**: China (Hong Kong)
	// *   **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  Set this parameter to **cn-china** for the instances that are created in the regions in the Chinese mainland.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The time range to query. Specify the time in the UNIX timestamp format. Unit: milliseconds.
	Time *string `json:"Time,omitempty" xml:"Time,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetAsc(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Asc = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetDbNames(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.DbNames = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetEngine(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetInstanceIds(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetKeywords(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Keywords = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetLogicalOperator(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.LogicalOperator = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetOrderBy(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.OrderBy = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetPageNo(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetPageSize(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetRegion(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsRequest) SetTime(v string) *GetQueryOptimizeExecErrorStatsRequest {
	s.Time = &v
	return s
}

type GetQueryOptimizeExecErrorStatsResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetQueryOptimizeExecErrorStatsResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetCode(v string) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetData(v *GetQueryOptimizeExecErrorStatsResponseBodyData) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetMessage(v string) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetRequestId(v string) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBody) SetSuccess(v string) *GetQueryOptimizeExecErrorStatsResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeExecErrorStatsResponseBodyData struct {
	// The reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The information about the SQL templates that failed to execute.
	List []*GetQueryOptimizeExecErrorStatsResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The page number.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetExtra(v string) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetList(v []*GetQueryOptimizeExecErrorStatsResponseBodyDataList) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyData) SetTotal(v int64) *GetQueryOptimizeExecErrorStatsResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeExecErrorStatsResponseBodyDataList struct {
	// The name of the database.
	Dbname *string `json:"Dbname,omitempty" xml:"Dbname,omitempty"`
	// The error code returned if the request failed.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The number of errors.
	ErrorCount *int64 `json:"ErrorCount,omitempty" xml:"ErrorCount,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The alias of the database instance.
	InstanceName *string `json:"InstanceName,omitempty" xml:"InstanceName,omitempty"`
	// The SQL template ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The content of the SQL template.
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
}

func (s GetQueryOptimizeExecErrorStatsResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetDbname(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.Dbname = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetErrorCode(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.ErrorCode = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetErrorCount(v int64) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.ErrorCount = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetInstanceId(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetInstanceName(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.InstanceName = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetSqlId(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponseBodyDataList) SetSqlText(v string) *GetQueryOptimizeExecErrorStatsResponseBodyDataList {
	s.SqlText = &v
	return s
}

type GetQueryOptimizeExecErrorStatsResponse struct {
	Headers    map[string]*string                          `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                      `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeExecErrorStatsResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeExecErrorStatsResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeExecErrorStatsResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeExecErrorStatsResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeExecErrorStatsResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponse) SetStatusCode(v int32) *GetQueryOptimizeExecErrorStatsResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeExecErrorStatsResponse) SetBody(v *GetQueryOptimizeExecErrorStatsResponseBody) *GetQueryOptimizeExecErrorStatsResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeRuleListRequest struct {
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PolarDBMySQL**
	// *   **PostgreSQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// *   **cn-china**: Chinese mainland
	// *   **cn-hongkong**: China (Hong Kong)
	// *   **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  If your instances reside in the regions in the Chinese mainland, set this parameter to **cn-china**.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// A reserved parameter.
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
}

func (s GetQueryOptimizeRuleListRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListRequest) SetEngine(v string) *GetQueryOptimizeRuleListRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeRuleListRequest) SetInstanceIds(v string) *GetQueryOptimizeRuleListRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeRuleListRequest) SetRegion(v string) *GetQueryOptimizeRuleListRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeRuleListRequest) SetTagNames(v string) *GetQueryOptimizeRuleListRequest {
	s.TagNames = &v
	return s
}

type GetQueryOptimizeRuleListResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *GetQueryOptimizeRuleListResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeRuleListResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListResponseBody) SetCode(v string) *GetQueryOptimizeRuleListResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBody) SetData(v *GetQueryOptimizeRuleListResponseBodyData) *GetQueryOptimizeRuleListResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBody) SetMessage(v string) *GetQueryOptimizeRuleListResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBody) SetRequestId(v string) *GetQueryOptimizeRuleListResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBody) SetSuccess(v string) *GetQueryOptimizeRuleListResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeRuleListResponseBodyData struct {
	// A reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The information about tags.
	List []*GetQueryOptimizeRuleListResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// A reserved parameter.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// A reserved parameter.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeRuleListResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetExtra(v string) *GetQueryOptimizeRuleListResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetList(v []*GetQueryOptimizeRuleListResponseBodyDataList) *GetQueryOptimizeRuleListResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeRuleListResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeRuleListResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyData) SetTotal(v int64) *GetQueryOptimizeRuleListResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeRuleListResponseBodyDataList struct {
	// The name of the tag.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// A reserved parameter.
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The type of the tag. **Predefined** is returned, which indicates that the tag is added by the system.
	Type *string `json:"Type,omitempty" xml:"Type,omitempty"`
}

func (s GetQueryOptimizeRuleListResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListResponseBodyDataList) SetName(v string) *GetQueryOptimizeRuleListResponseBodyDataList {
	s.Name = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyDataList) SetRuleId(v string) *GetQueryOptimizeRuleListResponseBodyDataList {
	s.RuleId = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponseBodyDataList) SetType(v string) *GetQueryOptimizeRuleListResponseBodyDataList {
	s.Type = &v
	return s
}

type GetQueryOptimizeRuleListResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeRuleListResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeRuleListResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeRuleListResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeRuleListResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeRuleListResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeRuleListResponse) SetStatusCode(v int32) *GetQueryOptimizeRuleListResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeRuleListResponse) SetBody(v *GetQueryOptimizeRuleListResponseBody) *GetQueryOptimizeRuleListResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeShareUrlRequest struct {
	// Specifies whether to sort the returned entries in ascending order. Default value: **true**. Valid values:
	//
	// *   **true**
	// *   **false**
	Asc *bool `json:"Asc,omitempty" xml:"Asc,omitempty"`
	// The name of the database to be queried.
	DbNames *string `json:"DbNames,omitempty" xml:"DbNames,omitempty"`
	// The database engine. Valid values:
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL
	// *   **PolarDBMySQL**: PolarDB for MySQL
	// *   **PostgreSQL**: ApsaraDB RDS for PostgreSQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance IDs. Separate multiple IDs with commas (,).
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The keywords of the SQL template. Separate multiple keywords with spaces.
	Keywords *string `json:"Keywords,omitempty" xml:"Keywords,omitempty"`
	// The logical relationship between multiple keywords. Valid values:
	//
	// *   **or**
	// *   **and**
	LogicalOperator *string `json:"LogicalOperator,omitempty" xml:"LogicalOperator,omitempty"`
	// Specifies whether to query only SQL templates that need to be optimized. Default value: **false**. Valid values:
	//
	// *   **true**
	// *   **false**
	OnlyOptimizedSql *bool `json:"OnlyOptimizedSql,omitempty" xml:"OnlyOptimizedSql,omitempty"`
	// The field by which to sort the returned entries. Default value: **count**. Valid values:
	//
	// *   **count**: the number of executions.
	// *   **maxQueryTime**: the longest execution duration.
	// *   **avgQueryTime**: the average execution duration.
	// *   **maxLockTime**: the longest lock wait duration.
	// *   **avgLockTime**: the average lock wait duration.
	// *   **maxRowsExamined**: the largest number of scanned rows.
	// *   **avgRowsExamined**: the average number of scanned rows.
	// *   **maxRowsSent**: the largest number of returned rows.
	// *   **avgRowsSent**: the average number of returned rows.
	OrderBy *string `json:"OrderBy,omitempty" xml:"OrderBy,omitempty"`
	// The page number. Pages start from page 1. Default value: 1.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// *   **cn-china**: Chinese mainland
	// *   **cn-hongkong**: China (Hong Kong)
	// *   **ap-southeast-1**: Singapore
	//
	// This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region set by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  If your instances reside in the regions in the Chinese mainland, set this parameter to **cn-china**.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The tags that are used to filter SQL templates. Separate multiple tags with commas (,). For more information, see [Query governance](~~290038~~).
	Rules *string `json:"Rules,omitempty" xml:"Rules,omitempty"`
	// The SQL template IDs. You can call the [GetQueryOptimizeExecErrorStats](~~405261~~) operation to obtain the SQL template IDs.
	SqlIds *string `json:"SqlIds,omitempty" xml:"SqlIds,omitempty"`
	// A reserved parameter.
	TagNames *string `json:"TagNames,omitempty" xml:"TagNames,omitempty"`
	// The date to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Time *int64 `json:"Time,omitempty" xml:"Time,omitempty"`
	// The account of the database to be queried.
	User *string `json:"User,omitempty" xml:"User,omitempty"`
}

func (s GetQueryOptimizeShareUrlRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeShareUrlRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeShareUrlRequest) SetAsc(v bool) *GetQueryOptimizeShareUrlRequest {
	s.Asc = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetDbNames(v string) *GetQueryOptimizeShareUrlRequest {
	s.DbNames = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetEngine(v string) *GetQueryOptimizeShareUrlRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetInstanceIds(v string) *GetQueryOptimizeShareUrlRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetKeywords(v string) *GetQueryOptimizeShareUrlRequest {
	s.Keywords = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetLogicalOperator(v string) *GetQueryOptimizeShareUrlRequest {
	s.LogicalOperator = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetOnlyOptimizedSql(v bool) *GetQueryOptimizeShareUrlRequest {
	s.OnlyOptimizedSql = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetOrderBy(v string) *GetQueryOptimizeShareUrlRequest {
	s.OrderBy = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetPageNo(v int32) *GetQueryOptimizeShareUrlRequest {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetPageSize(v int32) *GetQueryOptimizeShareUrlRequest {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetRegion(v string) *GetQueryOptimizeShareUrlRequest {
	s.Region = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetRules(v string) *GetQueryOptimizeShareUrlRequest {
	s.Rules = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetSqlIds(v string) *GetQueryOptimizeShareUrlRequest {
	s.SqlIds = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetTagNames(v string) *GetQueryOptimizeShareUrlRequest {
	s.TagNames = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetTime(v int64) *GetQueryOptimizeShareUrlRequest {
	s.Time = &v
	return s
}

func (s *GetQueryOptimizeShareUrlRequest) SetUser(v string) *GetQueryOptimizeShareUrlRequest {
	s.User = &v
	return s
}

type GetQueryOptimizeShareUrlResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The share URL.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeShareUrlResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeShareUrlResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetCode(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetData(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.Data = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetMessage(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetRequestId(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponseBody) SetSuccess(v string) *GetQueryOptimizeShareUrlResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeShareUrlResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeShareUrlResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeShareUrlResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeShareUrlResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeShareUrlResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeShareUrlResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeShareUrlResponse) SetStatusCode(v int32) *GetQueryOptimizeShareUrlResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeShareUrlResponse) SetBody(v *GetQueryOptimizeShareUrlResponseBody) *GetQueryOptimizeShareUrlResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeSolutionRequest struct {
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PolarDBMySQL**
	// *   **PostgreSQL**
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID. You can call the [GetQueryOptimizeDataStats](~~405261~~) operation to query the instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The tag ID. For more information, see [Query governance](~~290038~~).
	RuleIds *string `json:"RuleIds,omitempty" xml:"RuleIds,omitempty"`
	// The SQL template ID. You can call the [GetQueryOptimizeDataStats](~~405261~~) operation to query the SQL template ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
}

func (s GetQueryOptimizeSolutionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionRequest) SetEngine(v string) *GetQueryOptimizeSolutionRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeSolutionRequest) SetInstanceId(v string) *GetQueryOptimizeSolutionRequest {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeSolutionRequest) SetRuleIds(v string) *GetQueryOptimizeSolutionRequest {
	s.RuleIds = &v
	return s
}

func (s *GetQueryOptimizeSolutionRequest) SetSqlId(v string) *GetQueryOptimizeSolutionRequest {
	s.SqlId = &v
	return s
}

type GetQueryOptimizeSolutionResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *GetQueryOptimizeSolutionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeSolutionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionResponseBody) SetCode(v string) *GetQueryOptimizeSolutionResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBody) SetData(v *GetQueryOptimizeSolutionResponseBodyData) *GetQueryOptimizeSolutionResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBody) SetMessage(v string) *GetQueryOptimizeSolutionResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBody) SetRequestId(v string) *GetQueryOptimizeSolutionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBody) SetSuccess(v string) *GetQueryOptimizeSolutionResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeSolutionResponseBodyData struct {
	// The reserved parameter.
	Extra *string `json:"Extra,omitempty" xml:"Extra,omitempty"`
	// The optimization suggestions.
	List []*GetQueryOptimizeSolutionResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Repeated"`
	// The reserved parameter.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The reserved parameter.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetQueryOptimizeSolutionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetExtra(v string) *GetQueryOptimizeSolutionResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetList(v []*GetQueryOptimizeSolutionResponseBodyDataList) *GetQueryOptimizeSolutionResponseBodyData {
	s.List = v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetPageNo(v int32) *GetQueryOptimizeSolutionResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetPageSize(v int32) *GetQueryOptimizeSolutionResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyData) SetTotal(v int64) *GetQueryOptimizeSolutionResponseBodyData {
	s.Total = &v
	return s
}

type GetQueryOptimizeSolutionResponseBodyDataList struct {
	// The severity level. Valid values:
	//
	// * **INFO**
	// * **WARN**
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The tag ID.
	RuleId *string `json:"RuleId,omitempty" xml:"RuleId,omitempty"`
	// The suggestion.
	Solution *string `json:"Solution,omitempty" xml:"Solution,omitempty"`
	// The reserved parameter.
	SolutionExt *string `json:"SolutionExt,omitempty" xml:"SolutionExt,omitempty"`
}

func (s GetQueryOptimizeSolutionResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionResponseBodyDataList) SetLevel(v string) *GetQueryOptimizeSolutionResponseBodyDataList {
	s.Level = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyDataList) SetRuleId(v string) *GetQueryOptimizeSolutionResponseBodyDataList {
	s.RuleId = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyDataList) SetSolution(v string) *GetQueryOptimizeSolutionResponseBodyDataList {
	s.Solution = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponseBodyDataList) SetSolutionExt(v string) *GetQueryOptimizeSolutionResponseBodyDataList {
	s.SolutionExt = &v
	return s
}

type GetQueryOptimizeSolutionResponse struct {
	Headers    map[string]*string                    `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeSolutionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeSolutionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeSolutionResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeSolutionResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeSolutionResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeSolutionResponse) SetStatusCode(v int32) *GetQueryOptimizeSolutionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeSolutionResponse) SetBody(v *GetQueryOptimizeSolutionResponseBody) *GetQueryOptimizeSolutionResponse {
	s.Body = v
	return s
}

type GetQueryOptimizeTagRequest struct {
	// The database engine. Valid values:
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL
	// *   **PolarDBMySQL**: PolarDB for MySQL
	// *   **PostgreSQL**: ApsaraDB RDS for PostgreSQL
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The SQL template ID. You can call the [GetQueryOptimizeDataStats](~~405261~~) operation to query the SQL template ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
}

func (s GetQueryOptimizeTagRequest) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeTagRequest) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeTagRequest) SetEngine(v string) *GetQueryOptimizeTagRequest {
	s.Engine = &v
	return s
}

func (s *GetQueryOptimizeTagRequest) SetInstanceId(v string) *GetQueryOptimizeTagRequest {
	s.InstanceId = &v
	return s
}

func (s *GetQueryOptimizeTagRequest) SetSqlId(v string) *GetQueryOptimizeTagRequest {
	s.SqlId = &v
	return s
}

type GetQueryOptimizeTagResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned SQL tag data.
	Data *GetQueryOptimizeTagResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetQueryOptimizeTagResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeTagResponseBody) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeTagResponseBody) SetCode(v string) *GetQueryOptimizeTagResponseBody {
	s.Code = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBody) SetData(v *GetQueryOptimizeTagResponseBodyData) *GetQueryOptimizeTagResponseBody {
	s.Data = v
	return s
}

func (s *GetQueryOptimizeTagResponseBody) SetMessage(v string) *GetQueryOptimizeTagResponseBody {
	s.Message = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBody) SetRequestId(v string) *GetQueryOptimizeTagResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBody) SetSuccess(v string) *GetQueryOptimizeTagResponseBody {
	s.Success = &v
	return s
}

type GetQueryOptimizeTagResponseBodyData struct {
	// The remarks.
	Comments *string `json:"Comments,omitempty" xml:"Comments,omitempty"`
	// The SQL template ID.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
	// The SQL tags. Multiple tags are separated by commas (,).
	Tags *string `json:"Tags,omitempty" xml:"Tags,omitempty"`
}

func (s GetQueryOptimizeTagResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeTagResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeTagResponseBodyData) SetComments(v string) *GetQueryOptimizeTagResponseBodyData {
	s.Comments = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBodyData) SetSqlId(v string) *GetQueryOptimizeTagResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetQueryOptimizeTagResponseBodyData) SetTags(v string) *GetQueryOptimizeTagResponseBodyData {
	s.Tags = &v
	return s
}

type GetQueryOptimizeTagResponse struct {
	Headers    map[string]*string               `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                           `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetQueryOptimizeTagResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetQueryOptimizeTagResponse) String() string {
	return tea.Prettify(s)
}

func (s GetQueryOptimizeTagResponse) GoString() string {
	return s.String()
}

func (s *GetQueryOptimizeTagResponse) SetHeaders(v map[string]*string) *GetQueryOptimizeTagResponse {
	s.Headers = v
	return s
}

func (s *GetQueryOptimizeTagResponse) SetStatusCode(v int32) *GetQueryOptimizeTagResponse {
	s.StatusCode = &v
	return s
}

func (s *GetQueryOptimizeTagResponse) SetBody(v *GetQueryOptimizeTagResponseBody) *GetQueryOptimizeTagResponse {
	s.Body = v
	return s
}

type GetRedisAllSessionRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s GetRedisAllSessionRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionRequest) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionRequest) SetConsoleContext(v string) *GetRedisAllSessionRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetRedisAllSessionRequest) SetInstanceId(v string) *GetRedisAllSessionRequest {
	s.InstanceId = &v
	return s
}

type GetRedisAllSessionResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The session data.
	Data *GetRedisAllSessionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRedisAllSessionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponseBody) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponseBody) SetCode(v int64) *GetRedisAllSessionResponseBody {
	s.Code = &v
	return s
}

func (s *GetRedisAllSessionResponseBody) SetData(v *GetRedisAllSessionResponseBodyData) *GetRedisAllSessionResponseBody {
	s.Data = v
	return s
}

func (s *GetRedisAllSessionResponseBody) SetMessage(v string) *GetRedisAllSessionResponseBody {
	s.Message = &v
	return s
}

func (s *GetRedisAllSessionResponseBody) SetRequestId(v string) *GetRedisAllSessionResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRedisAllSessionResponseBody) SetSuccess(v bool) *GetRedisAllSessionResponseBody {
	s.Success = &v
	return s
}

type GetRedisAllSessionResponseBodyData struct {
	// The information about the sessions.
	Sessions []*GetRedisAllSessionResponseBodyDataSessions `json:"Sessions,omitempty" xml:"Sessions,omitempty" type:"Repeated"`
	// The statistics on the access source.
	SourceStats []*GetRedisAllSessionResponseBodyDataSourceStats `json:"SourceStats,omitempty" xml:"SourceStats,omitempty" type:"Repeated"`
	// The time when the instance sessions were returned. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
	// The total number of sessions.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetRedisAllSessionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponseBodyData) SetSessions(v []*GetRedisAllSessionResponseBodyDataSessions) *GetRedisAllSessionResponseBodyData {
	s.Sessions = v
	return s
}

func (s *GetRedisAllSessionResponseBodyData) SetSourceStats(v []*GetRedisAllSessionResponseBodyDataSourceStats) *GetRedisAllSessionResponseBodyData {
	s.SourceStats = v
	return s
}

func (s *GetRedisAllSessionResponseBodyData) SetTimestamp(v int64) *GetRedisAllSessionResponseBodyData {
	s.Timestamp = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyData) SetTotal(v int64) *GetRedisAllSessionResponseBodyData {
	s.Total = &v
	return s
}

type GetRedisAllSessionResponseBodyDataSessions struct {
	// The IP address and port number of the client.
	Addr *string `json:"Addr,omitempty" xml:"Addr,omitempty"`
	// The connection duration of the session. Unit: seconds.
	Age *string `json:"Age,omitempty" xml:"Age,omitempty"`
	// The IP address of the client.
	Client *string `json:"Client,omitempty" xml:"Client,omitempty"`
	// The alias of the client.
	ClientDesc *string `json:"ClientDesc,omitempty" xml:"ClientDesc,omitempty"`
	// The command that was last run.
	Cmd *string `json:"Cmd,omitempty" xml:"Cmd,omitempty"`
	// The ID of the database that the client is using.
	Db *int64 `json:"Db,omitempty" xml:"Db,omitempty"`
	// The file descriptor event. Valid values:
	//
	// *   **r**: Client sockets are readable in the event loop.
	// *   **w**: Client sockets are writable in the event loop.
	Events *string `json:"Events,omitempty" xml:"Events,omitempty"`
	// The file descriptor that is used by sockets.
	Fd *int64 `json:"Fd,omitempty" xml:"Fd,omitempty"`
	// The client flag. Valid values:
	//
	// *   **A**: The connection needs to be closed at the earliest opportunity.
	// *   **b**: The client is waiting for blocked events.
	// *   **c**: The connection is closed after all replies are written.
	// *   **d**: The monitored keys have been modified, and the `EXEC` command is about to fail.
	// *   **i**: The client is waiting for VM I/O operations. This value is no longer used.
	// *   **M**: The client is the primary node.
	// *   **N**: No special flags are configured.
	// *   **O**: The client is in monitor mode.
	// *   **r**: The client is a cluster node in read-only mode.
	// *   **S**: The client is a replica node in normal mode.
	// *   **u**: The client is not blocked.
	// *   **U**: The client is connected by using UNIX domain sockets.
	// *   **x**: The client is executing a transaction.
	Flags *string `json:"Flags,omitempty" xml:"Flags,omitempty"`
	// The client ID.
	Id *int64 `json:"Id,omitempty" xml:"Id,omitempty"`
	// The duration during which the session is in the idle state. Unit: seconds.
	Idle *int64 `json:"Idle,omitempty" xml:"Idle,omitempty"`
	// The number of commands in `MULTI` or `EXEC`.
	Multi *int64 `json:"Multi,omitempty" xml:"Multi,omitempty"`
	// The name of the client.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The node ID.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The size of the fixed output buffer. Unit: bytes.
	Obl *int64 `json:"Obl,omitempty" xml:"Obl,omitempty"`
	// The number of objects contained in the output list.
	Oll *int64 `json:"Oll,omitempty" xml:"Oll,omitempty"`
	// The size of the output buffer. Unit: bytes.
	Omem *int64 `json:"Omem,omitempty" xml:"Omem,omitempty"`
	// The number of subscriptions that match the pattern.
	Psub *int64 `json:"Psub,omitempty" xml:"Psub,omitempty"`
	// The size of the input buffer. Unit: bytes.
	Qbuf *int64 `json:"Qbuf,omitempty" xml:"Qbuf,omitempty"`
	// The remaining size of the input buffer. Unit: bytes.
	QbufFree *int64 `json:"QbufFree,omitempty" xml:"QbufFree,omitempty"`
	// The number of subscribed channels.
	Sub *int64 `json:"Sub,omitempty" xml:"Sub,omitempty"`
}

func (s GetRedisAllSessionResponseBodyDataSessions) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponseBodyDataSessions) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetAddr(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Addr = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetAge(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Age = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetClient(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Client = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetClientDesc(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.ClientDesc = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetCmd(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Cmd = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetDb(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Db = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetEvents(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Events = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetFd(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Fd = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetFlags(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Flags = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetId(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Id = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetIdle(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Idle = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetMulti(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Multi = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetName(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.Name = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetNodeId(v string) *GetRedisAllSessionResponseBodyDataSessions {
	s.NodeId = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetObl(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Obl = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetOll(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Oll = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetOmem(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Omem = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetPsub(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Psub = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetQbuf(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Qbuf = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetQbufFree(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.QbufFree = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSessions) SetSub(v int64) *GetRedisAllSessionResponseBodyDataSessions {
	s.Sub = &v
	return s
}

type GetRedisAllSessionResponseBodyDataSourceStats struct {
	// The total number of sessions from the access source.
	Count *string `json:"Count,omitempty" xml:"Count,omitempty"`
	// The client IDs.
	Ids []*int64 `json:"Ids,omitempty" xml:"Ids,omitempty" type:"Repeated"`
	// The access source.
	Key *string `json:"Key,omitempty" xml:"Key,omitempty"`
}

func (s GetRedisAllSessionResponseBodyDataSourceStats) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponseBodyDataSourceStats) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponseBodyDataSourceStats) SetCount(v string) *GetRedisAllSessionResponseBodyDataSourceStats {
	s.Count = &v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSourceStats) SetIds(v []*int64) *GetRedisAllSessionResponseBodyDataSourceStats {
	s.Ids = v
	return s
}

func (s *GetRedisAllSessionResponseBodyDataSourceStats) SetKey(v string) *GetRedisAllSessionResponseBodyDataSourceStats {
	s.Key = &v
	return s
}

type GetRedisAllSessionResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetRedisAllSessionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRedisAllSessionResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRedisAllSessionResponse) GoString() string {
	return s.String()
}

func (s *GetRedisAllSessionResponse) SetHeaders(v map[string]*string) *GetRedisAllSessionResponse {
	s.Headers = v
	return s
}

func (s *GetRedisAllSessionResponse) SetStatusCode(v int32) *GetRedisAllSessionResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRedisAllSessionResponse) SetBody(v *GetRedisAllSessionResponseBody) *GetRedisAllSessionResponse {
	s.Body = v
	return s
}

type GetRequestDiagnosisPageRequest struct {
	// The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	EndTime *int64 `json:"EndTime,omitempty" xml:"EndTime,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The node ID.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL, PolarDB for PostgreSQL (Compatible with Oracle), or ApsaraDB for MongoDB instance.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	PageNo *int32 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be a positive integer. Default value: 10.
	PageSize *int32 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
	// The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
}

func (s GetRequestDiagnosisPageRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageRequest) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageRequest) SetEndTime(v int64) *GetRequestDiagnosisPageRequest {
	s.EndTime = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetInstanceId(v string) *GetRequestDiagnosisPageRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetNodeId(v string) *GetRequestDiagnosisPageRequest {
	s.NodeId = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetPageNo(v int32) *GetRequestDiagnosisPageRequest {
	s.PageNo = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetPageSize(v int32) *GetRequestDiagnosisPageRequest {
	s.PageSize = &v
	return s
}

func (s *GetRequestDiagnosisPageRequest) SetStartTime(v int64) *GetRequestDiagnosisPageRequest {
	s.StartTime = &v
	return s
}

type GetRequestDiagnosisPageResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetRequestDiagnosisPageResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message that contains information such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRequestDiagnosisPageResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageResponseBody) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageResponseBody) SetCode(v string) *GetRequestDiagnosisPageResponseBody {
	s.Code = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBody) SetData(v *GetRequestDiagnosisPageResponseBodyData) *GetRequestDiagnosisPageResponseBody {
	s.Data = v
	return s
}

func (s *GetRequestDiagnosisPageResponseBody) SetMessage(v string) *GetRequestDiagnosisPageResponseBody {
	s.Message = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBody) SetRequestId(v string) *GetRequestDiagnosisPageResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBody) SetSuccess(v string) *GetRequestDiagnosisPageResponseBody {
	s.Success = &v
	return s
}

type GetRequestDiagnosisPageResponseBodyData struct {
	// Additional information.
	Extra *string `json:"extra,omitempty" xml:"extra,omitempty"`
	// The SQL diagnostics records returned.
	List []*GetRequestDiagnosisPageResponseBodyDataList `json:"list,omitempty" xml:"list,omitempty" type:"Repeated"`
	// The page number. The value must be a positive integer. Default value: 1.
	PageNo *int64 `json:"pageNo,omitempty" xml:"pageNo,omitempty"`
	// The number of entries per page. The value must be a positive integer. Default value: 10.
	PageSize *int64 `json:"pageSize,omitempty" xml:"pageSize,omitempty"`
	// The total number of returned entries.
	Total *int64 `json:"total,omitempty" xml:"total,omitempty"`
}

func (s GetRequestDiagnosisPageResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetExtra(v string) *GetRequestDiagnosisPageResponseBodyData {
	s.Extra = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetList(v []*GetRequestDiagnosisPageResponseBodyDataList) *GetRequestDiagnosisPageResponseBodyData {
	s.List = v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetPageNo(v int64) *GetRequestDiagnosisPageResponseBodyData {
	s.PageNo = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetPageSize(v int64) *GetRequestDiagnosisPageResponseBodyData {
	s.PageSize = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyData) SetTotal(v int64) *GetRequestDiagnosisPageResponseBodyData {
	s.Total = &v
	return s
}

type GetRequestDiagnosisPageResponseBodyDataList struct {
	// The user ID.
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	// The name of the database.
	DbSchema *string `json:"dbSchema,omitempty" xml:"dbSchema,omitempty"`
	// The database engine. Valid values:
	//
	// * **MySQL**
	// * **PostgreSQL**
	// * **SQLServer**
	// * **PolarDBMySQL**
	// * **PolarDBOracle**
	// * **MongoDB**
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// The time when the SQL diagnostics task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// The time when the SQL diagnostics task was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// The unique ID of the diagnostics task.
	MessageId *string `json:"messageId,omitempty" xml:"messageId,omitempty"`
	// Additional information.
	Param *string `json:"param,omitempty" xml:"param,omitempty"`
	// The result of the SQL diagnostics task. The result includes the following information:
	//
	// * **endTime**: the end time of the SQL diagnostics task.
	// * **errorCode**: indicates whether the SQL diagnostics task is complete. Valid values:
	//   * **0001**: The SQL diagnostics task is complete.
	//   * **0003**: The SQL diagnostics task failed.
	//
	// * **errorMessage**: the error message.
	// * **estimateCost**: the estimated cost.
	//   * **cpu**: the estimated CPU utilization of the index.
	//   * **io**: the estimated I/O usage of the index.
	//   * **rows**: the estimated values of the rows returned for the index.
	// * **improvement**: the performance improvement ratio.
	// * **indexAdvices**: the index recommendations, which include the following information:
	//   * **columns**: the index columns.
	//   * **ddlAddIndex**: the DDL statement for the index.
	//   * **indexName**: the name of the index.
	//   * **schemaName**: the name of the database.
	//   * **tableName**: the name of the table.
	//   * **unique**: indicates whether the index is unique.
	//
	// * **ip**: the IP address of the instance.
	// * **messageId**: the ID of the diagnostics task.
	// * **port**: the port used to connect to the instance.
	// * **sqlTag**: the SQL tag.
	// * **startTime**: the start time of the SQL diagnostics task.
	// * **success**: indicates whether the request was successful.
	// * **support**: indicates whether the SQL statement can be diagnosed. Valid values:
	//   * **true**: The SQL statement can be diagnosed.
	//   * **false**: The SQL statement cannot be diagnosed.
	//
	// * **tuningAdvices**: the SQL rewrite suggestions.
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// The SQL template ID.
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
	// The status of the diagnostics task. Valid values:
	//
	// * **0**: The diagnostics task is in progress.
	//
	// * **1**: A diagnostics error occurred.
	//
	// * **2**: The diagnostics task is complete.
	//
	// * **3**: An SQL error occurred.
	//
	// * **4**: An engine error occurred.
	State *int32 `json:"state,omitempty" xml:"state,omitempty"`
	// The unique ID of the diagnostics instance.
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s GetRequestDiagnosisPageResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetAccountId(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.AccountId = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetDbSchema(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.DbSchema = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetEngine(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.Engine = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetGmtCreate(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.GmtCreate = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetGmtModified(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.GmtModified = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetMessageId(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.MessageId = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetParam(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.Param = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetResult(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.Result = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetSqlId(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.SqlId = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetState(v int32) *GetRequestDiagnosisPageResponseBodyDataList {
	s.State = &v
	return s
}

func (s *GetRequestDiagnosisPageResponseBodyDataList) SetUuid(v string) *GetRequestDiagnosisPageResponseBodyDataList {
	s.Uuid = &v
	return s
}

type GetRequestDiagnosisPageResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetRequestDiagnosisPageResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRequestDiagnosisPageResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisPageResponse) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisPageResponse) SetHeaders(v map[string]*string) *GetRequestDiagnosisPageResponse {
	s.Headers = v
	return s
}

func (s *GetRequestDiagnosisPageResponse) SetStatusCode(v int32) *GetRequestDiagnosisPageResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRequestDiagnosisPageResponse) SetBody(v *GetRequestDiagnosisPageResponseBody) *GetRequestDiagnosisPageResponse {
	s.Body = v
	return s
}

type GetRequestDiagnosisResultRequest struct {
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The unique ID of the diagnostics task. You can call the [CreateRequestDiagnosis](~~341609~~) operation to query the diagnostics task ID.
	MessageId *string `json:"MessageId,omitempty" xml:"MessageId,omitempty"`
	// The node ID.
	//
	// >  You must specify the node ID if your database instance is a PolarDB for MySQL cluster, a PolarDB for PostgreSQL (compatible with Oracle) instance, or an ApsaraDB for MongoDB database.
	NodeId *string `json:"NodeId,omitempty" xml:"NodeId,omitempty"`
	// The source of the task.
	//
	// >  This parameter is required if you call this operation in the DAS console. You do not need to specify this parameter when you call this operation.
	Source *string `json:"Source,omitempty" xml:"Source,omitempty"`
	// The SQL template ID.
	//
	// >  This parameter is required if you call this operation in the DAS console. You do not need to specify this parameter when you call this operation.
	SqlId *string `json:"SqlId,omitempty" xml:"SqlId,omitempty"`
}

func (s GetRequestDiagnosisResultRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisResultRequest) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisResultRequest) SetInstanceId(v string) *GetRequestDiagnosisResultRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRequestDiagnosisResultRequest) SetMessageId(v string) *GetRequestDiagnosisResultRequest {
	s.MessageId = &v
	return s
}

func (s *GetRequestDiagnosisResultRequest) SetNodeId(v string) *GetRequestDiagnosisResultRequest {
	s.NodeId = &v
	return s
}

func (s *GetRequestDiagnosisResultRequest) SetSource(v string) *GetRequestDiagnosisResultRequest {
	s.Source = &v
	return s
}

func (s *GetRequestDiagnosisResultRequest) SetSqlId(v string) *GetRequestDiagnosisResultRequest {
	s.SqlId = &v
	return s
}

type GetRequestDiagnosisResultResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *GetRequestDiagnosisResultResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRequestDiagnosisResultResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisResultResponseBody) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisResultResponseBody) SetCode(v string) *GetRequestDiagnosisResultResponseBody {
	s.Code = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBody) SetData(v *GetRequestDiagnosisResultResponseBodyData) *GetRequestDiagnosisResultResponseBody {
	s.Data = v
	return s
}

func (s *GetRequestDiagnosisResultResponseBody) SetMessage(v string) *GetRequestDiagnosisResultResponseBody {
	s.Message = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBody) SetRequestId(v string) *GetRequestDiagnosisResultResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBody) SetSuccess(v string) *GetRequestDiagnosisResultResponseBody {
	s.Success = &v
	return s
}

type GetRequestDiagnosisResultResponseBodyData struct {
	// The user ID.
	AccountId *string `json:"accountId,omitempty" xml:"accountId,omitempty"`
	// The name of the database.
	DbSchema *string `json:"dbSchema,omitempty" xml:"dbSchema,omitempty"`
	// The database engine. Valid values:
	//
	// *   **MySQL**
	// *   **PostgreSQL**
	// *   **SQLServer**
	// *   **PolarDBMySQL**
	// *   **PolarDBOracle**
	// *   **MongoDB**
	Engine *string `json:"engine,omitempty" xml:"engine,omitempty"`
	// The time when the SQL diagnostics task was created. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	GmtCreate *string `json:"gmtCreate,omitempty" xml:"gmtCreate,omitempty"`
	// The time when the SQL diagnostics task was modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	GmtModified *string `json:"gmtModified,omitempty" xml:"gmtModified,omitempty"`
	// The unique ID of the diagnostics task.
	MessageId *string `json:"messageId,omitempty" xml:"messageId,omitempty"`
	// The additional information.
	Param *string `json:"param,omitempty" xml:"param,omitempty"`
	// The result of the SQL diagnostics task. The result includes the following information:
	//
	// *   **endTime**: the end time of the SQL diagnostics task.
	//
	// *   **errorCode**: the error code.
	//
	//     *   **0001**: The SQL diagnostics task is complete.
	//     *   **0003**: The SQL diagnostics task failed.
	//
	// *   **errorMessage**: the error message.
	//
	// *   **estimateCost**: the estimated cost.
	//
	//     *   **cpu**: the estimated CPU utilization of the index.
	//     *   **io**: the estimated I/O usage of the index.
	//     *   **rows**: the estimated values of the rows returned for the index.
	//
	// *   **improvement**: the performance improvement ratio.
	//
	// *   **indexAdvices**: the index recommendations, which include the following information:
	//
	//     *   **columns**: the index columns.
	//     *   **ddlAddIndex**: the DDL statement for the index.
	//     *   **indexName**: the name of the index.
	//     *   **schemaName**: the name of the database.
	//     *   **tableName**: the name of the table.
	//     *   **unique**: indicates whether the index is unique.
	//
	// *   **ip**: the IP address of the instance.
	//
	// *   **messageId**: the ID of the diagnostics task.
	//
	// *   **port**: the port used to connect to the instance.
	//
	// *   **sqlTag**: the SQL tag.
	//
	// *   **startTime**: the start time of the SQL diagnostics task.
	//
	// *   **success**: indicates whether the request was successful.
	//
	// *   **support**: indicates whether the SQL statement can be diagnosed. Valid values:
	//
	//     *   **true**
	//     *   **false**
	//
	// *   **tuningAdvices** : the SQL rewrite suggestions.
	Result *string `json:"result,omitempty" xml:"result,omitempty"`
	// The SQL template ID.
	SqlId *string `json:"sqlId,omitempty" xml:"sqlId,omitempty"`
	// The state of the diagnostics task. Valid values:
	//
	// *   **0**: The diagnostics task is in progress.
	// *   **1**: A diagnostics error occurred.
	// *   **2**: The diagnostics task is complete.
	// *   **3**: An SQL error occurred.
	// *   **4**: An engine error occurred.
	State *int32 `json:"state,omitempty" xml:"state,omitempty"`
	// The unique ID of the diagnostics instance.
	Uuid *string `json:"uuid,omitempty" xml:"uuid,omitempty"`
}

func (s GetRequestDiagnosisResultResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisResultResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetAccountId(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.AccountId = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetDbSchema(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.DbSchema = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetEngine(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.Engine = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetGmtCreate(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.GmtCreate = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetGmtModified(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.GmtModified = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetMessageId(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.MessageId = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetParam(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.Param = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetResult(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.Result = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetSqlId(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.SqlId = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetState(v int32) *GetRequestDiagnosisResultResponseBodyData {
	s.State = &v
	return s
}

func (s *GetRequestDiagnosisResultResponseBodyData) SetUuid(v string) *GetRequestDiagnosisResultResponseBodyData {
	s.Uuid = &v
	return s
}

type GetRequestDiagnosisResultResponse struct {
	Headers    map[string]*string                     `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                 `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetRequestDiagnosisResultResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRequestDiagnosisResultResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRequestDiagnosisResultResponse) GoString() string {
	return s.String()
}

func (s *GetRequestDiagnosisResultResponse) SetHeaders(v map[string]*string) *GetRequestDiagnosisResultResponse {
	s.Headers = v
	return s
}

func (s *GetRequestDiagnosisResultResponse) SetStatusCode(v int32) *GetRequestDiagnosisResultResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRequestDiagnosisResultResponse) SetBody(v *GetRequestDiagnosisResultResponseBody) *GetRequestDiagnosisResultResponse {
	s.Body = v
	return s
}

type GetRunningSqlConcurrencyControlRulesRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  You must specify this parameter only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. The value must be a positive integer. Default value: 1.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be a positive integer. Default value: 10.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesRequest) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesRequest) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesRequest) SetConsoleContext(v string) *GetRunningSqlConcurrencyControlRulesRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesRequest) SetInstanceId(v string) *GetRunningSqlConcurrencyControlRulesRequest {
	s.InstanceId = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesRequest) SetPageNo(v int64) *GetRunningSqlConcurrencyControlRulesRequest {
	s.PageNo = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesRequest) SetPageSize(v int64) *GetRunningSqlConcurrencyControlRulesRequest {
	s.PageSize = &v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetRunningSqlConcurrencyControlRulesResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponseBody) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetCode(v string) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.Code = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetData(v *GetRunningSqlConcurrencyControlRulesResponseBodyData) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.Data = v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetMessage(v string) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.Message = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetRequestId(v string) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBody) SetSuccess(v string) *GetRunningSqlConcurrencyControlRulesResponseBody {
	s.Success = &v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponseBodyData struct {
	// The returned data.
	List *GetRunningSqlConcurrencyControlRulesResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyData) SetList(v *GetRunningSqlConcurrencyControlRulesResponseBodyDataList) *GetRunningSqlConcurrencyControlRulesResponseBodyData {
	s.List = v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyData) SetTotal(v int64) *GetRunningSqlConcurrencyControlRulesResponseBodyData {
	s.Total = &v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponseBodyDataList struct {
	RunningRules []*GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules `json:"runningRules,omitempty" xml:"runningRules,omitempty" type:"Repeated"`
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataList) SetRunningRules(v []*GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) *GetRunningSqlConcurrencyControlRulesResponseBodyDataList {
	s.RunningRules = v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules struct {
	// The duration within which the SQL throttling rule takes effect. Unit: seconds.
	//
	// > The throttling rule takes effect only within this duration.
	ConcurrencyControlTime *int64 `json:"ConcurrencyControlTime,omitempty" xml:"ConcurrencyControlTime,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the throttling rule that is applied to the instance.
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	// The hash value of the SQL keywords. The hash value is calculated based on the SQL keywords that are contained in the SQL statements to which the throttling rule is applied.
	KeywordsHash *string `json:"KeywordsHash,omitempty" xml:"KeywordsHash,omitempty"`
	// The maximum number of concurrent SQL statements. The value is a positive integer.
	//
	// > If the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
	MaxConcurrency *string `json:"MaxConcurrency,omitempty" xml:"MaxConcurrency,omitempty"`
	// The keywords contained in the SQL statements to which the throttling rule was applied.
	//
	// > SQL keywords are separated by tildes (~). If the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
	SqlKeywords *string `json:"SqlKeywords,omitempty" xml:"SqlKeywords,omitempty"`
	// The type of the SQL statements. Valid values:
	//
	// * **SELECT**
	// * **UPDATE**
	// * **DELETE**
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The time when the throttling rule started to take effect. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The status of the throttling rule. The value of **Open** indicates that the throttling rule is in effect.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The Alibaba Cloud account ID.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetConcurrencyControlTime(v int64) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.ConcurrencyControlTime = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetInstanceId(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.InstanceId = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetItemId(v int64) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.ItemId = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetKeywordsHash(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.KeywordsHash = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetMaxConcurrency(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.MaxConcurrency = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetSqlKeywords(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.SqlKeywords = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetSqlType(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.SqlType = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetStartTime(v int64) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.StartTime = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetStatus(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.Status = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules) SetUserId(v string) *GetRunningSqlConcurrencyControlRulesResponseBodyDataListRunningRules {
	s.UserId = &v
	return s
}

type GetRunningSqlConcurrencyControlRulesResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetRunningSqlConcurrencyControlRulesResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetRunningSqlConcurrencyControlRulesResponse) String() string {
	return tea.Prettify(s)
}

func (s GetRunningSqlConcurrencyControlRulesResponse) GoString() string {
	return s.String()
}

func (s *GetRunningSqlConcurrencyControlRulesResponse) SetHeaders(v map[string]*string) *GetRunningSqlConcurrencyControlRulesResponse {
	s.Headers = v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponse) SetStatusCode(v int32) *GetRunningSqlConcurrencyControlRulesResponse {
	s.StatusCode = &v
	return s
}

func (s *GetRunningSqlConcurrencyControlRulesResponse) SetBody(v *GetRunningSqlConcurrencyControlRulesResponseBody) *GetRunningSqlConcurrencyControlRulesResponse {
	s.Body = v
	return s
}

type GetSqlConcurrencyControlKeywordsFromSqlTextRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The SQL statement based on which a throttling keyword string is to be generated.
	SqlText *string `json:"SqlText,omitempty" xml:"SqlText,omitempty"`
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextRequest) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextRequest) SetConsoleContext(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextRequest) SetInstanceId(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextRequest) SetSqlText(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextRequest {
	s.SqlText = &v
	return s
}

type GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The throttling keyword string that was generated based on the SQL statement.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetCode(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.Code = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetData(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.Data = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetMessage(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.Message = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetRequestId(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) SetSuccess(v string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody {
	s.Success = &v
	return s
}

type GetSqlConcurrencyControlKeywordsFromSqlTextResponse struct {
	Headers    map[string]*string                                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlKeywordsFromSqlTextResponse) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponse) SetHeaders(v map[string]*string) *GetSqlConcurrencyControlKeywordsFromSqlTextResponse {
	s.Headers = v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponse) SetStatusCode(v int32) *GetSqlConcurrencyControlKeywordsFromSqlTextResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSqlConcurrencyControlKeywordsFromSqlTextResponse) SetBody(v *GetSqlConcurrencyControlKeywordsFromSqlTextResponseBody) *GetSqlConcurrencyControlKeywordsFromSqlTextResponse {
	s.Body = v
	return s
}

type GetSqlConcurrencyControlRulesHistoryRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	//
	// >  Only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters are supported.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The page number. The value must be an integer that is greater than 0. Default value: 1.
	PageNo *int64 `json:"PageNo,omitempty" xml:"PageNo,omitempty"`
	// The number of entries per page. The value must be an integer that is greater than 0. Default value: 10.
	PageSize *int64 `json:"PageSize,omitempty" xml:"PageSize,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryRequest) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryRequest) SetConsoleContext(v string) *GetSqlConcurrencyControlRulesHistoryRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryRequest) SetInstanceId(v string) *GetSqlConcurrencyControlRulesHistoryRequest {
	s.InstanceId = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryRequest) SetPageNo(v int64) *GetSqlConcurrencyControlRulesHistoryRequest {
	s.PageNo = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryRequest) SetPageSize(v int64) *GetSqlConcurrencyControlRulesHistoryRequest {
	s.PageSize = &v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetSqlConcurrencyControlRulesHistoryResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**: The request was successful.
	// *   **false**: The request failed.
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBody) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetCode(v string) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.Code = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetData(v *GetSqlConcurrencyControlRulesHistoryResponseBodyData) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.Data = v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetMessage(v string) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.Message = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetRequestId(v string) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBody) SetSuccess(v string) *GetSqlConcurrencyControlRulesHistoryResponseBody {
	s.Success = &v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponseBodyData struct {
	// The list of the queried throttling rules.
	List *GetSqlConcurrencyControlRulesHistoryResponseBodyDataList `json:"List,omitempty" xml:"List,omitempty" type:"Struct"`
	// The total number of entries returned.
	Total *int64 `json:"Total,omitempty" xml:"Total,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyData) SetList(v *GetSqlConcurrencyControlRulesHistoryResponseBodyDataList) *GetSqlConcurrencyControlRulesHistoryResponseBodyData {
	s.List = v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyData) SetTotal(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyData {
	s.Total = &v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponseBodyDataList struct {
	Rules []*GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules `json:"rules,omitempty" xml:"rules,omitempty" type:"Repeated"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyDataList) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyDataList) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataList) SetRules(v []*GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataList {
	s.Rules = v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules struct {
	// The duration within which the SQL throttling rule takes effect. Unit: seconds.
	//
	// >  The throttling rule takes effect only within this duration.
	ConcurrencyControlTime *int64 `json:"ConcurrencyControlTime,omitempty" xml:"ConcurrencyControlTime,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The ID of the throttling rule that is applied to the instance.
	ItemId *int64 `json:"ItemId,omitempty" xml:"ItemId,omitempty"`
	// The hash value of the SQL keywords. The SQL keywords are contained in the SQL statements to which the throttling rule is applied.
	KeywordsHash *string `json:"KeywordsHash,omitempty" xml:"KeywordsHash,omitempty"`
	// The maximum number of concurrent SQL statements. Set this parameter to a positive integer.
	//
	// >  When the number of concurrent SQL statements that contain the specified keywords reaches this upper limit, the throttling rule is triggered.
	MaxConcurrency *int64 `json:"MaxConcurrency,omitempty" xml:"MaxConcurrency,omitempty"`
	// The keywords that are used to identify the SQL statements that need to be throttled.
	//
	// > SQL keywords are separated with tildes (~). When the number of concurrent SQL statements that contain all the specified SQL keywords reaches the specified upper limit, the throttling rule is triggered.
	SqlKeywords *string `json:"SqlKeywords,omitempty" xml:"SqlKeywords,omitempty"`
	// The type of the SQL statements. Valid values:
	//
	// * **SELECT**
	// * **UPDATE**
	// * **DELETE**
	SqlType *string `json:"SqlType,omitempty" xml:"SqlType,omitempty"`
	// The beginning of the time range to query. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	StartTime *int64 `json:"StartTime,omitempty" xml:"StartTime,omitempty"`
	// The state of the throttling rule. Valid values:
	//
	// * **Open**: The throttling rule is in effect.
	// * **Closed**: The throttling rule was in effect.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The user ID.
	UserId *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetConcurrencyControlTime(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.ConcurrencyControlTime = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetInstanceId(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.InstanceId = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetItemId(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.ItemId = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetKeywordsHash(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.KeywordsHash = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetMaxConcurrency(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.MaxConcurrency = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetSqlKeywords(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.SqlKeywords = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetSqlType(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.SqlType = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetStartTime(v int64) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.StartTime = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetStatus(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.Status = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules) SetUserId(v string) *GetSqlConcurrencyControlRulesHistoryResponseBodyDataListRules {
	s.UserId = &v
	return s
}

type GetSqlConcurrencyControlRulesHistoryResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSqlConcurrencyControlRulesHistoryResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSqlConcurrencyControlRulesHistoryResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSqlConcurrencyControlRulesHistoryResponse) GoString() string {
	return s.String()
}

func (s *GetSqlConcurrencyControlRulesHistoryResponse) SetHeaders(v map[string]*string) *GetSqlConcurrencyControlRulesHistoryResponse {
	s.Headers = v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponse) SetStatusCode(v int32) *GetSqlConcurrencyControlRulesHistoryResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSqlConcurrencyControlRulesHistoryResponse) SetBody(v *GetSqlConcurrencyControlRulesHistoryResponseBody) *GetSqlConcurrencyControlRulesHistoryResponse {
	s.Body = v
	return s
}

type GetSqlOptimizeAdviceRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The end date of the time range to query. Specify the date in the *yyyyMMdd* format. The time must be in UTC.
	//
	// *   The default value of this parameter is one day before the current day.
	// *   The value must be earlier than the current day. The interval between the start date and the end date cannot exceed 30 days.
	EndDt *string `json:"EndDt,omitempty" xml:"EndDt,omitempty"`
	// The database engine. Valid values:
	//
	// *   **MySQL**: ApsaraDB RDS for MySQL.
	// *   **PolarDBMySQL**: PolarDB for MySQL.
	Engine *string `json:"Engine,omitempty" xml:"Engine,omitempty"`
	// The instance ID.
	//
	// >  You must specify the instance ID only if your database instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The region in which the instance resides. Valid values:
	//
	// *   **cn-china**: Chinese mainland.
	// *   **cn-hongkong**: China (Hong Kong).
	// *   **ap-southeast-1**: Singapore.
	//
	// This parameter takes effect only if **InstanceIds** is left empty. If you leave **InstanceIds** empty, the system obtains data from the region specified by **Region**. By default, Region is set to **cn-china**. If you specify **InstanceIds**, **Region** does not take effect, and the system obtains data from the region in which the first specified instance resides.****
	//
	// >  If your instances reside in the regions inside the Chinese mainland, set this parameter to **cn-china**.
	Region *string `json:"Region,omitempty" xml:"Region,omitempty"`
	// The start date of the time range to query. Specify the date in the *yyyyMMdd* format. The time must be in UTC.
	//
	// *   The default value of this parameter is one day before the current day.
	// *   The value must be earlier than the current day.
	StartDt *string `json:"StartDt,omitempty" xml:"StartDt,omitempty"`
}

func (s GetSqlOptimizeAdviceRequest) String() string {
	return tea.Prettify(s)
}

func (s GetSqlOptimizeAdviceRequest) GoString() string {
	return s.String()
}

func (s *GetSqlOptimizeAdviceRequest) SetConsoleContext(v string) *GetSqlOptimizeAdviceRequest {
	s.ConsoleContext = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetEndDt(v string) *GetSqlOptimizeAdviceRequest {
	s.EndDt = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetEngine(v string) *GetSqlOptimizeAdviceRequest {
	s.Engine = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetInstanceIds(v string) *GetSqlOptimizeAdviceRequest {
	s.InstanceIds = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetRegion(v string) *GetSqlOptimizeAdviceRequest {
	s.Region = &v
	return s
}

func (s *GetSqlOptimizeAdviceRequest) SetStartDt(v string) *GetSqlOptimizeAdviceRequest {
	s.StartDt = &v
	return s
}

type GetSqlOptimizeAdviceResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of entries that are returned.
	Data *GetSqlOptimizeAdviceResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, Successful is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s GetSqlOptimizeAdviceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s GetSqlOptimizeAdviceResponseBody) GoString() string {
	return s.String()
}

func (s *GetSqlOptimizeAdviceResponseBody) SetCode(v string) *GetSqlOptimizeAdviceResponseBody {
	s.Code = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBody) SetData(v *GetSqlOptimizeAdviceResponseBodyData) *GetSqlOptimizeAdviceResponseBody {
	s.Data = v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBody) SetMessage(v string) *GetSqlOptimizeAdviceResponseBody {
	s.Message = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBody) SetRequestId(v string) *GetSqlOptimizeAdviceResponseBody {
	s.RequestId = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBody) SetSuccess(v string) *GetSqlOptimizeAdviceResponseBody {
	s.Success = &v
	return s
}

type GetSqlOptimizeAdviceResponseBodyData struct {
	// The time when the task was created. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	CreateTime *string `json:"CreateTime,omitempty" xml:"CreateTime,omitempty"`
	// The URL that is used to download the file.
	DownloadUrl *string `json:"DownloadUrl,omitempty" xml:"DownloadUrl,omitempty"`
	// The time when the file expires. The value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	//
	// >  The file expires three days after the task is created.
	ExpireTime *string `json:"ExpireTime,omitempty" xml:"ExpireTime,omitempty"`
	// The status of the task. Valid values:
	//
	// *   **INIT**: The task is being initialized.
	// *   **RUNNING**: The task is running.
	// *   **FINISH**: The task is complete.
	// *   **FAILED**: The task failed.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
	// The status code of the task. Valid values:
	//
	// *   **NO_DATA**: No data is returned.
	// *   **INTERNAL_ERROR**: An internal error occurred.
	// *   **SUCCESS**: The task is successful.
	StatusCode *string `json:"StatusCode,omitempty" xml:"StatusCode,omitempty"`
	// The task ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s GetSqlOptimizeAdviceResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s GetSqlOptimizeAdviceResponseBodyData) GoString() string {
	return s.String()
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetCreateTime(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.CreateTime = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetDownloadUrl(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.DownloadUrl = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetExpireTime(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.ExpireTime = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetStatus(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.Status = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetStatusCode(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.StatusCode = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponseBodyData) SetTaskId(v string) *GetSqlOptimizeAdviceResponseBodyData {
	s.TaskId = &v
	return s
}

type GetSqlOptimizeAdviceResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *GetSqlOptimizeAdviceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s GetSqlOptimizeAdviceResponse) String() string {
	return tea.Prettify(s)
}

func (s GetSqlOptimizeAdviceResponse) GoString() string {
	return s.String()
}

func (s *GetSqlOptimizeAdviceResponse) SetHeaders(v map[string]*string) *GetSqlOptimizeAdviceResponse {
	s.Headers = v
	return s
}

func (s *GetSqlOptimizeAdviceResponse) SetStatusCode(v int32) *GetSqlOptimizeAdviceResponse {
	s.StatusCode = &v
	return s
}

func (s *GetSqlOptimizeAdviceResponse) SetBody(v *GetSqlOptimizeAdviceResponseBody) *GetSqlOptimizeAdviceResponse {
	s.Body = v
	return s
}

type KillInstanceAllSessionRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s KillInstanceAllSessionRequest) String() string {
	return tea.Prettify(s)
}

func (s KillInstanceAllSessionRequest) GoString() string {
	return s.String()
}

func (s *KillInstanceAllSessionRequest) SetConsoleContext(v string) *KillInstanceAllSessionRequest {
	s.ConsoleContext = &v
	return s
}

func (s *KillInstanceAllSessionRequest) SetInstanceId(v string) *KillInstanceAllSessionRequest {
	s.InstanceId = &v
	return s
}

type KillInstanceAllSessionResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s KillInstanceAllSessionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s KillInstanceAllSessionResponseBody) GoString() string {
	return s.String()
}

func (s *KillInstanceAllSessionResponseBody) SetCode(v string) *KillInstanceAllSessionResponseBody {
	s.Code = &v
	return s
}

func (s *KillInstanceAllSessionResponseBody) SetData(v string) *KillInstanceAllSessionResponseBody {
	s.Data = &v
	return s
}

func (s *KillInstanceAllSessionResponseBody) SetMessage(v string) *KillInstanceAllSessionResponseBody {
	s.Message = &v
	return s
}

func (s *KillInstanceAllSessionResponseBody) SetRequestId(v string) *KillInstanceAllSessionResponseBody {
	s.RequestId = &v
	return s
}

func (s *KillInstanceAllSessionResponseBody) SetSuccess(v string) *KillInstanceAllSessionResponseBody {
	s.Success = &v
	return s
}

type KillInstanceAllSessionResponse struct {
	Headers    map[string]*string                  `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                              `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *KillInstanceAllSessionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s KillInstanceAllSessionResponse) String() string {
	return tea.Prettify(s)
}

func (s KillInstanceAllSessionResponse) GoString() string {
	return s.String()
}

func (s *KillInstanceAllSessionResponse) SetHeaders(v map[string]*string) *KillInstanceAllSessionResponse {
	s.Headers = v
	return s
}

func (s *KillInstanceAllSessionResponse) SetStatusCode(v int32) *KillInstanceAllSessionResponse {
	s.StatusCode = &v
	return s
}

func (s *KillInstanceAllSessionResponse) SetBody(v *KillInstanceAllSessionResponseBody) *KillInstanceAllSessionResponse {
	s.Body = v
	return s
}

type ModifyAutoScalingConfigRequest struct {
	// The configuration item of the automatic bandwidth adjustment feature.
	Bandwidth *ModifyAutoScalingConfigRequestBandwidth `json:"Bandwidth,omitempty" xml:"Bandwidth,omitempty" type:"Struct"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The configuration item of the auto scaling feature for resources.
	Resource *ModifyAutoScalingConfigRequestResource `json:"Resource,omitempty" xml:"Resource,omitempty" type:"Struct"`
	// The configuration item of the auto scaling feature for shards.
	Shard *ModifyAutoScalingConfigRequestShard `json:"Shard,omitempty" xml:"Shard,omitempty" type:"Struct"`
	// The configuration item of the auto scaling feature for specifications.
	Spec *ModifyAutoScalingConfigRequestSpec `json:"Spec,omitempty" xml:"Spec,omitempty" type:"Struct"`
	// The configuration item of the automatic storage expansion feature.
	Storage *ModifyAutoScalingConfigRequestStorage `json:"Storage,omitempty" xml:"Storage,omitempty" type:"Struct"`
}

func (s ModifyAutoScalingConfigRequest) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequest) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequest) SetBandwidth(v *ModifyAutoScalingConfigRequestBandwidth) *ModifyAutoScalingConfigRequest {
	s.Bandwidth = v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetInstanceId(v string) *ModifyAutoScalingConfigRequest {
	s.InstanceId = &v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetResource(v *ModifyAutoScalingConfigRequestResource) *ModifyAutoScalingConfigRequest {
	s.Resource = v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetShard(v *ModifyAutoScalingConfigRequestShard) *ModifyAutoScalingConfigRequest {
	s.Shard = v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetSpec(v *ModifyAutoScalingConfigRequestSpec) *ModifyAutoScalingConfigRequest {
	s.Spec = v
	return s
}

func (s *ModifyAutoScalingConfigRequest) SetStorage(v *ModifyAutoScalingConfigRequestStorage) *ModifyAutoScalingConfigRequest {
	s.Storage = v
	return s
}

type ModifyAutoScalingConfigRequestBandwidth struct {
	// Specifies whether to apply the **Bandwidth** configuration of the automatic bandwidth adjustment feature. Valid values:
	//
	// *   **true**
	// *   **false**
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// The average bandwidth usage threshold that triggers automatic bandwidth downgrade. Unit: %. Valid values:
	//
	// *   **10**
	// *   **20**
	// *   **30**
	BandwidthUsageLowerThreshold *int32 `json:"BandwidthUsageLowerThreshold,omitempty" xml:"BandwidthUsageLowerThreshold,omitempty"`
	// The average bandwidth usage threshold that triggers automatic bandwidth upgrade. Unit: %. Valid values:
	//
	// *   **50**
	// *   **60**
	// *   **70**
	// *   **80**
	// *   **90**
	// *   **95**
	BandwidthUsageUpperThreshold *int32 `json:"BandwidthUsageUpperThreshold,omitempty" xml:"BandwidthUsageUpperThreshold,omitempty"`
	// Specifies whether to enable the automatic bandwidth downgrade feature. Valid values:
	//
	// *   **true**
	// *   **false**
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The observation window of the automatic bandwidth upgrade feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute. Valid values:
	//
	// *   **1m**
	// *   **5m**
	// *   **10m**
	// *   **15m**
	// *   **30m**
	ObservationWindowSize *string `json:"ObservationWindowSize,omitempty" xml:"ObservationWindowSize,omitempty"`
	// Specifies whether to enable the automatic bandwidth upgrade feature. Valid values:
	//
	// *   **true**
	// *   **false**
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s ModifyAutoScalingConfigRequestBandwidth) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestBandwidth) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetApply(v bool) *ModifyAutoScalingConfigRequestBandwidth {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetBandwidthUsageLowerThreshold(v int32) *ModifyAutoScalingConfigRequestBandwidth {
	s.BandwidthUsageLowerThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetBandwidthUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestBandwidth {
	s.BandwidthUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetDowngrade(v bool) *ModifyAutoScalingConfigRequestBandwidth {
	s.Downgrade = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetObservationWindowSize(v string) *ModifyAutoScalingConfigRequestBandwidth {
	s.ObservationWindowSize = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestBandwidth) SetUpgrade(v bool) *ModifyAutoScalingConfigRequestBandwidth {
	s.Upgrade = &v
	return s
}

type ModifyAutoScalingConfigRequestResource struct {
	// Specifies whether to apply the **Resource** configuration of the auto scaling feature for resources. Valid values:
	//
	// *   **true**
	// *   **false**
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// The average CPU utilization threshold that triggers automatic scale-out of resources. Unit: %. Valid values:
	//
	// *   **70**
	// *   **80**
	// *   **90**
	CpuUsageUpperThreshold *int32 `json:"CpuUsageUpperThreshold,omitempty" xml:"CpuUsageUpperThreshold,omitempty"`
	// The observation window of the automatic resource scale-in feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute. Valid values:
	//
	// *   **1m**
	// *   **3m**
	// *   **5m**
	// *   **10m**
	// *   **20m**
	// *   **30m**
	DowngradeObservationWindowSize *string `json:"DowngradeObservationWindowSize,omitempty" xml:"DowngradeObservationWindowSize,omitempty"`
	// Specifies whether to enable the auto scaling feature for resources. Valid values:
	//
	// *   **true**
	// *   **false**
	Enable *bool `json:"Enable,omitempty" xml:"Enable,omitempty"`
	// The observation window of the automatic resource scale-out feature. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute. Valid values:
	//
	// *   **1m**
	// *   **3m**
	// *   **5m**
	// *   **10m**
	// *   **20m**
	// *   **30m**
	UpgradeObservationWindowSize *string `json:"UpgradeObservationWindowSize,omitempty" xml:"UpgradeObservationWindowSize,omitempty"`
}

func (s ModifyAutoScalingConfigRequestResource) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestResource) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestResource) SetApply(v bool) *ModifyAutoScalingConfigRequestResource {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestResource) SetCpuUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestResource {
	s.CpuUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestResource) SetDowngradeObservationWindowSize(v string) *ModifyAutoScalingConfigRequestResource {
	s.DowngradeObservationWindowSize = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestResource) SetEnable(v bool) *ModifyAutoScalingConfigRequestResource {
	s.Enable = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestResource) SetUpgradeObservationWindowSize(v string) *ModifyAutoScalingConfigRequestResource {
	s.UpgradeObservationWindowSize = &v
	return s
}

type ModifyAutoScalingConfigRequestShard struct {
	// Specifies whether to apply the **Shard** configuration of the auto scaling feature for shards. Valid values:
	//
	// *   **true**
	// *   **false**
	//
	// >  The auto scaling feature for shards is available only for ApsaraDB for Redis Community Edition instances that use cloud disks on the China site (aliyun.com).
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// Specifies whether to enable the feature of automatically removing shards. Valid values:
	//
	// *   **true**
	// *   **false**
	//
	// >  The feature of automatically removing shards is in canary release.
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The observation window of the feature of automatically removing shards. The value of this parameter consists of a numeric value and a time unit suffix. The **h** time unit suffix specifies the hour. The **d** time unit suffix specifies the day. Valid values:
	//
	// *   **1h**
	// *   **2h**
	// *   **3h**
	// *   **1d**
	// *   **7d**
	DowngradeObservationWindowSize *string `json:"DowngradeObservationWindowSize,omitempty" xml:"DowngradeObservationWindowSize,omitempty"`
	// The maximum number of shards in the instance. The value must be a positive integer. Valid values: 4 to 32.
	MaxShards *int32 `json:"MaxShards,omitempty" xml:"MaxShards,omitempty"`
	// The average memory usage threshold that triggers automatic removal of shards. Unit: %. Valid values:
	//
	// *   **10**
	// *   **20**
	// *   **30**
	MemUsageLowerThreshold *int32 `json:"MemUsageLowerThreshold,omitempty" xml:"MemUsageLowerThreshold,omitempty"`
	// The average memory usage threshold that triggers automatic adding of shards. Unit: %. Valid values:
	//
	// *   **50**
	// *   **60**
	// *   **70**
	// *   **80**
	// *   **90**
	MemUsageUpperThreshold *int32 `json:"MemUsageUpperThreshold,omitempty" xml:"MemUsageUpperThreshold,omitempty"`
	// The minimum number of shards in the instance. The value must be a positive integer. Valid values: 4 to 32.
	MinShards *int32 `json:"MinShards,omitempty" xml:"MinShards,omitempty"`
	// Specifies whether to enable the feature of automatically adding shards. Valid values:
	//
	// *   **true**
	// *   **false**
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
	// The observation window of the feature of automatically adding shards. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute. Valid values:
	//
	// *   **5m**
	// *   **10m**
	// *   **15m**
	// *   **30m**
	UpgradeObservationWindowSize *string `json:"UpgradeObservationWindowSize,omitempty" xml:"UpgradeObservationWindowSize,omitempty"`
}

func (s ModifyAutoScalingConfigRequestShard) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestShard) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestShard) SetApply(v bool) *ModifyAutoScalingConfigRequestShard {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetDowngrade(v bool) *ModifyAutoScalingConfigRequestShard {
	s.Downgrade = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetDowngradeObservationWindowSize(v string) *ModifyAutoScalingConfigRequestShard {
	s.DowngradeObservationWindowSize = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetMaxShards(v int32) *ModifyAutoScalingConfigRequestShard {
	s.MaxShards = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetMemUsageLowerThreshold(v int32) *ModifyAutoScalingConfigRequestShard {
	s.MemUsageLowerThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetMemUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestShard {
	s.MemUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetMinShards(v int32) *ModifyAutoScalingConfigRequestShard {
	s.MinShards = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetUpgrade(v bool) *ModifyAutoScalingConfigRequestShard {
	s.Upgrade = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestShard) SetUpgradeObservationWindowSize(v string) *ModifyAutoScalingConfigRequestShard {
	s.UpgradeObservationWindowSize = &v
	return s
}

type ModifyAutoScalingConfigRequestSpec struct {
	// Specifies whether to apply the **Spec** configuration of the auto scaling feature for specifications. Valid values:
	//
	// *   **true**
	// *   **false**
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// The quiescent period. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute, the **h** time unit suffix specifies the hour, and the **d** time suffix unit specifies the day.
	//
	// *   Valid values for PolarDB for MySQL Cluster Edition instances: **5m**, **10m**, **30m**, **1h**, **2h**, **3h**, **1d**, and **7d**.
	// *   Valid values for ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: **5m**, **10m**, **30m**, **1h**, **2h**, **3h**, **1d**, and **7d**.
	CoolDownTime *string `json:"CoolDownTime,omitempty" xml:"CoolDownTime,omitempty"`
	// The average CPU utilization threshold that triggers automatic specification scale-up. Unit: %. Valid values:
	//
	// *   **50**
	// *   **60**
	// *   **70**
	// *   **80**
	// *   **90**
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance or an ApsaraDB RDS for MySQL High-availability Edition instance that uses standard SSDs or ESSDs.
	CpuUsageUpperThreshold *int32 `json:"CpuUsageUpperThreshold,omitempty" xml:"CpuUsageUpperThreshold,omitempty"`
	// Specifies whether to enable the automatic specification scale-down feature. Valid values:
	//
	// *   **true**
	// *   **false**
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance or an ApsaraDB RDS for MySQL High-availability Edition instance that uses standard SSDs or ESSDs.
	Downgrade *bool `json:"Downgrade,omitempty" xml:"Downgrade,omitempty"`
	// The maximum number of read-only nodes of the instance.
	//
	// >  This parameter must be specified if the database instance is a PolarDB for MySQL Cluster Edition instance.
	MaxReadOnlyNodes *int32 `json:"MaxReadOnlyNodes,omitempty" xml:"MaxReadOnlyNodes,omitempty"`
	// The maximum specifications to which the database instance can be upgraded. The database instance can be upgraded only to a database instance of the same edition with higher specifications. For information about the specifications of different database instances, refer to the following topics:
	//
	// *   PolarDB for MySQL Cluster Edition instances: [Specifications of compute nodes](~~102542~~).
	// *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: [Specifications](~~276974~~).
	MaxSpec *string `json:"MaxSpec,omitempty" xml:"MaxSpec,omitempty"`
	// The average memory usage threshold that triggers automatic specification scale-up. Unit: %. Valid values:
	//
	// *   **50**
	// *   **60**
	// *   **70**
	// *   **80**
	// *   **90**
	//
	// >  This parameter must be specified if the database instance is an ApsaraDB for Redis Community Edition instance that uses cloud disks on the China site (aliyun.com).
	MemUsageUpperThreshold *int32 `json:"MemUsageUpperThreshold,omitempty" xml:"MemUsageUpperThreshold,omitempty"`
	// The observation window. The value of this parameter consists of a numeric value and a time unit suffix. The **m** time unit suffix specifies the minute and the **h** time unit suffix specifies the hour.
	//
	// *   Valid values for PolarDB for MySQL Cluster Edition instances: **5m**, **10m**, **15m**, and **30m**.
	// *   Valid values for ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs: **5m**, **20m**, **30m**, **40m**, and **1h**.
	// *   Valid values for ApsaraDB for Redis Community Edition instances that use cloud disks: **5m**, **10m**, **15m**, and **30m**.
	ObservationWindowSize *string `json:"ObservationWindowSize,omitempty" xml:"ObservationWindowSize,omitempty"`
	// Specifies whether to enable the automatic specification scale-up feature. Valid values:
	//
	// *   **true**
	// *   **false**
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s ModifyAutoScalingConfigRequestSpec) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestSpec) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestSpec) SetApply(v bool) *ModifyAutoScalingConfigRequestSpec {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetCoolDownTime(v string) *ModifyAutoScalingConfigRequestSpec {
	s.CoolDownTime = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetCpuUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestSpec {
	s.CpuUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetDowngrade(v bool) *ModifyAutoScalingConfigRequestSpec {
	s.Downgrade = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetMaxReadOnlyNodes(v int32) *ModifyAutoScalingConfigRequestSpec {
	s.MaxReadOnlyNodes = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetMaxSpec(v string) *ModifyAutoScalingConfigRequestSpec {
	s.MaxSpec = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetMemUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestSpec {
	s.MemUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetObservationWindowSize(v string) *ModifyAutoScalingConfigRequestSpec {
	s.ObservationWindowSize = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestSpec) SetUpgrade(v bool) *ModifyAutoScalingConfigRequestSpec {
	s.Upgrade = &v
	return s
}

type ModifyAutoScalingConfigRequestStorage struct {
	// Specifies whether to apply the **Storage** configuration of the automatic storage expansion feature. Valid values:
	//
	// *   **true**
	// *   **false**
	Apply *bool `json:"Apply,omitempty" xml:"Apply,omitempty"`
	// The average storage usage threshold that triggers automatic storage expansion. Unit: %. Valid values:
	//
	// *   **50**
	// *   **60**
	// *   **70**
	// *   **80**
	// *   **90**
	DiskUsageUpperThreshold *int32 `json:"DiskUsageUpperThreshold,omitempty" xml:"DiskUsageUpperThreshold,omitempty"`
	// The maximum storage size of the database instance. The value must be greater than or equal to the total storage size of the instance. Valid values of different types of instances:
	//
	// *   If the ApsaraDB for RDS instance uses ESSDs, the value of this parameter can be set to 32000, in GB.
	// *   If the ApsaraDB for RDS instance uses standard SSDs, the value of this parameter can be set to 6000, in GB.
	//
	// >  The ApsaraDB RDS for MySQL instances that use standard SSDs are discontinued. We recommend that you [upgrade the storage type of an ApsaraDB RDS for MySQL instance from standard SSDs to ESSDs](~~314678~~).
	MaxStorage *int32 `json:"MaxStorage,omitempty" xml:"MaxStorage,omitempty"`
	// Specifies whether to enable the automatic storage expansion feature. Valid values:
	//
	// *   **true**
	// *   **false**
	Upgrade *bool `json:"Upgrade,omitempty" xml:"Upgrade,omitempty"`
}

func (s ModifyAutoScalingConfigRequestStorage) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigRequestStorage) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigRequestStorage) SetApply(v bool) *ModifyAutoScalingConfigRequestStorage {
	s.Apply = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestStorage) SetDiskUsageUpperThreshold(v int32) *ModifyAutoScalingConfigRequestStorage {
	s.DiskUsageUpperThreshold = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestStorage) SetMaxStorage(v int32) *ModifyAutoScalingConfigRequestStorage {
	s.MaxStorage = &v
	return s
}

func (s *ModifyAutoScalingConfigRequestStorage) SetUpgrade(v bool) *ModifyAutoScalingConfigRequestStorage {
	s.Upgrade = &v
	return s
}

type ModifyAutoScalingConfigResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s ModifyAutoScalingConfigResponseBody) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigResponseBody) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigResponseBody) SetCode(v string) *ModifyAutoScalingConfigResponseBody {
	s.Code = &v
	return s
}

func (s *ModifyAutoScalingConfigResponseBody) SetMessage(v string) *ModifyAutoScalingConfigResponseBody {
	s.Message = &v
	return s
}

func (s *ModifyAutoScalingConfigResponseBody) SetRequestId(v string) *ModifyAutoScalingConfigResponseBody {
	s.RequestId = &v
	return s
}

func (s *ModifyAutoScalingConfigResponseBody) SetSuccess(v string) *ModifyAutoScalingConfigResponseBody {
	s.Success = &v
	return s
}

type ModifyAutoScalingConfigResponse struct {
	Headers    map[string]*string                   `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                               `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *ModifyAutoScalingConfigResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s ModifyAutoScalingConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s ModifyAutoScalingConfigResponse) GoString() string {
	return s.String()
}

func (s *ModifyAutoScalingConfigResponse) SetHeaders(v map[string]*string) *ModifyAutoScalingConfigResponse {
	s.Headers = v
	return s
}

func (s *ModifyAutoScalingConfigResponse) SetStatusCode(v int32) *ModifyAutoScalingConfigResponse {
	s.StatusCode = &v
	return s
}

func (s *ModifyAutoScalingConfigResponse) SetBody(v *ModifyAutoScalingConfigResponseBody) *ModifyAutoScalingConfigResponse {
	s.Body = v
	return s
}

type RunCloudBenchTaskRequest struct {
	// The stress testing task ID. You can call the [DescribeCloudBenchTasks](~~230670~~) operation to query the task ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s RunCloudBenchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskRequest) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskRequest) SetTaskId(v string) *RunCloudBenchTaskRequest {
	s.TaskId = &v
	return s
}

type RunCloudBenchTaskResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information, including the error codes and the number of returned entries.
	Data *RunCloudBenchTaskResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s RunCloudBenchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskResponseBody) SetCode(v string) *RunCloudBenchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *RunCloudBenchTaskResponseBody) SetData(v *RunCloudBenchTaskResponseBodyData) *RunCloudBenchTaskResponseBody {
	s.Data = v
	return s
}

func (s *RunCloudBenchTaskResponseBody) SetMessage(v string) *RunCloudBenchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *RunCloudBenchTaskResponseBody) SetRequestId(v string) *RunCloudBenchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *RunCloudBenchTaskResponseBody) SetSuccess(v string) *RunCloudBenchTaskResponseBody {
	s.Success = &v
	return s
}

type RunCloudBenchTaskResponseBodyData struct {
	PreCheckItem []*RunCloudBenchTaskResponseBodyDataPreCheckItem `json:"PreCheckItem,omitempty" xml:"PreCheckItem,omitempty" type:"Repeated"`
}

func (s RunCloudBenchTaskResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskResponseBodyData) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskResponseBodyData) SetPreCheckItem(v []*RunCloudBenchTaskResponseBodyDataPreCheckItem) *RunCloudBenchTaskResponseBodyData {
	s.PreCheckItem = v
	return s
}

type RunCloudBenchTaskResponseBodyDataPreCheckItem struct {
	// The HTTP status code returned.
	Code *int32 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information of the check item.
	Details *string `json:"Details,omitempty" xml:"Details,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The name of the check item. Valid values:
	//
	// * **SqlArchiveStatusChecker**: checks whether SQL Explorer is available.
	// * **BenchClientEnvChecker**: checks whether the runtime environment for programs on the stress testing client is available.
	// * **SpecChecker**: checks whether the destination instance type and the instance type of the stress testing client support this API operation.
	// * **SourceInstanceChecker**: checks whether the account of the source instance is available and whether the source instance is connected to the destination instance.
	// * **BenchTargetChecker**: checks whether the account of the destination instance is available and whether the source instance is connected to the destination instance.
	Name *string `json:"Name,omitempty" xml:"Name,omitempty"`
	// The sequence number of the check item. Valid values: **0** to **10**.
	Order *int32 `json:"Order,omitempty" xml:"Order,omitempty"`
	// The status of the task. Valid values:
	//
	// *   **SUCCESS**: The task is successful.
	// *   **IGNORED**: The task is ignored.
	// *   **RUNNING**: The task is running.
	// *   **EXCEPTION**: An error occurred.
	Status *string `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s RunCloudBenchTaskResponseBodyDataPreCheckItem) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskResponseBodyDataPreCheckItem) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetCode(v int32) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Code = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetDetails(v string) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Details = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetMessage(v string) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Message = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetName(v string) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Name = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetOrder(v int32) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Order = &v
	return s
}

func (s *RunCloudBenchTaskResponseBodyDataPreCheckItem) SetStatus(v string) *RunCloudBenchTaskResponseBodyDataPreCheckItem {
	s.Status = &v
	return s
}

type RunCloudBenchTaskResponse struct {
	Headers    map[string]*string             `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                         `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *RunCloudBenchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s RunCloudBenchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s RunCloudBenchTaskResponse) GoString() string {
	return s.String()
}

func (s *RunCloudBenchTaskResponse) SetHeaders(v map[string]*string) *RunCloudBenchTaskResponse {
	s.Headers = v
	return s
}

func (s *RunCloudBenchTaskResponse) SetStatusCode(v int32) *RunCloudBenchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *RunCloudBenchTaskResponse) SetBody(v *RunCloudBenchTaskResponseBody) *RunCloudBenchTaskResponse {
	s.Body = v
	return s
}

type SetEventSubscriptionRequest struct {
	// Specifies whether to enable the event subscription feature. Valid values:
	//
	// *   **0**: disables the event subscription feature.
	// *   **1**: enables the event subscription feature.
	Active *string `json:"Active,omitempty" xml:"Active,omitempty"`
	// The notification method. Valid values:
	//
	// *   **hdm_alarm_sms**: text message.
	// *   **dingtalk**: DingTalk chatbot.
	// *   **hdm_alarm_sms_and_email**: text message and email.
	// *   **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
	ChannelType *string `json:"ChannelType,omitempty" xml:"ChannelType,omitempty"`
	// The name of the contact group that receives alert notifications. Separate multiple names with commas (,).
	ContactGroupName *string `json:"ContactGroupName,omitempty" xml:"ContactGroupName,omitempty"`
	// The name of the contact who receives alert notifications. Separate multiple names with commas (,).
	ContactName *string `json:"ContactName,omitempty" xml:"ContactName,omitempty"`
	// The notification rules based on the event type. If you leave this parameter empty, the values of **MinInterval** and **ChannelType** prevail.
	//
	// Specify this parameter in the following format: `{"silenced": {"Event type 1":Specifies whether to enable adaptive silence, "Event type 2":Specify whether to enable adaptive silence},"min_interval": {"Event type 1":Minimum interval between event notifications, "Event type 2":Minimum interval between event notifications},"alert_type": {"Event type 1":"Notification method", "Event type 2":"Notification method"}}`.
	//
	// *   **silenced**: specifies whether to enable adaptive silence. After you enable adaptive silence, the interval between consecutive alert notifications for an event is the greater one of the minimum interval specified by **min_interval** and one third of the event duration. Valid values:
	//
	//     *   1: enables adaptive silence.
	//     *   2: disables adaptive silence.
	//
	// *   **min_interval**: the minimum interval between event notifications. Unit: seconds.
	//
	// *   **alert_type**: the notification method. Valid values:
	//
	//     *   **hdm_alarm_sms**: text message.
	//     *   **dingtalk**: DingTalk chatbot.
	//     *   **hdm_alarm_sms_and_email**: text message and email.
	//     *   **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
	DispatchRule *string `json:"DispatchRule,omitempty" xml:"DispatchRule,omitempty"`
	// The supported event scenarios. You can set the value to **AllContext**, which indicates that all scenarios are supported.
	EventContext *string `json:"EventContext,omitempty" xml:"EventContext,omitempty"`
	// The instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
	// The language of event notifications. You can set the value to **zh-CN**, which indicates that event notifications are sent in Chinese.
	Lang *string `json:"Lang,omitempty" xml:"Lang,omitempty"`
	// The risk level of the events. Valid values:
	//
	// *   **Notice**: events that trigger notifications, including events at the **Notice**, **Optimization**, **Warn**, and **Critical** levels.
	// *   **Optimization**: events that trigger optimizations, including events at the **Optimization**, **Warn**, and **Critical** levels.
	// *   **Warn**: events that trigger warnings, including events at the **Warn** and **Critical** levels.
	// *   **Critical**: events that trigger critical warnings.****
	//
	// The following content describes the events at each level in detail:
	//
	// *   Notice: events that are related to database exceptions for which no suggestions are generated.
	// *   Optimization: events for which optimization suggestions are generated based on the status of the database.
	// *   Warn: events that may affect the running of the database.
	// *   Critical: events that affect the running of the database.
	Level *string `json:"Level,omitempty" xml:"Level,omitempty"`
	// The minimum interval between consecutive event notifications. Unit: seconds.
	MinInterval *string `json:"MinInterval,omitempty" xml:"MinInterval,omitempty"`
	// The alert severity based on the event type.
	//
	// Specify this parameter in the following format: `{"Event type 1":"Alert severity", "Event type 2":"Alert severity"}`.
	//
	// Valid values of event types:
	//
	// *   **AutoScale**: auto scaling event.
	// *   **SQLThrottle**: throttling event.
	// *   **TimeSeriesAbnormal**: event for detecting time series anomalies.
	// *   **SQLOptimize**: SQL optimization event.
	// *   **ResourceOptimize**: storage optimization event.
	//
	// Valid values of alert severities:
	//
	// *   **info**
	// *   **noticed**
	// *   **warning**
	// *   **critical**
	Severity *string `json:"Severity,omitempty" xml:"Severity,omitempty"`
}

func (s SetEventSubscriptionRequest) String() string {
	return tea.Prettify(s)
}

func (s SetEventSubscriptionRequest) GoString() string {
	return s.String()
}

func (s *SetEventSubscriptionRequest) SetActive(v string) *SetEventSubscriptionRequest {
	s.Active = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetChannelType(v string) *SetEventSubscriptionRequest {
	s.ChannelType = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetContactGroupName(v string) *SetEventSubscriptionRequest {
	s.ContactGroupName = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetContactName(v string) *SetEventSubscriptionRequest {
	s.ContactName = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetDispatchRule(v string) *SetEventSubscriptionRequest {
	s.DispatchRule = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetEventContext(v string) *SetEventSubscriptionRequest {
	s.EventContext = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetInstanceId(v string) *SetEventSubscriptionRequest {
	s.InstanceId = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetLang(v string) *SetEventSubscriptionRequest {
	s.Lang = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetLevel(v string) *SetEventSubscriptionRequest {
	s.Level = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetMinInterval(v string) *SetEventSubscriptionRequest {
	s.MinInterval = &v
	return s
}

func (s *SetEventSubscriptionRequest) SetSeverity(v string) *SetEventSubscriptionRequest {
	s.Severity = &v
	return s
}

type SetEventSubscriptionResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The detailed information.
	Data *SetEventSubscriptionResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s SetEventSubscriptionResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SetEventSubscriptionResponseBody) GoString() string {
	return s.String()
}

func (s *SetEventSubscriptionResponseBody) SetCode(v string) *SetEventSubscriptionResponseBody {
	s.Code = &v
	return s
}

func (s *SetEventSubscriptionResponseBody) SetData(v *SetEventSubscriptionResponseBodyData) *SetEventSubscriptionResponseBody {
	s.Data = v
	return s
}

func (s *SetEventSubscriptionResponseBody) SetMessage(v string) *SetEventSubscriptionResponseBody {
	s.Message = &v
	return s
}

func (s *SetEventSubscriptionResponseBody) SetRequestId(v string) *SetEventSubscriptionResponseBody {
	s.RequestId = &v
	return s
}

func (s *SetEventSubscriptionResponseBody) SetSuccess(v string) *SetEventSubscriptionResponseBody {
	s.Success = &v
	return s
}

type SetEventSubscriptionResponseBodyData struct {
	// Indicates whether the event subscription feature is enabled. Valid values:
	//
	// *   **0**: The event subscription feature is disabled.
	// *   **1**: The event subscription feature is enabled.
	Active *int32 `json:"active,omitempty" xml:"active,omitempty"`
	// The notification method. Valid values:
	//
	// *   **hdm_alarm_sms**: text message.
	// *   **dingtalk**: DingTalk chatbot.
	// *   **hdm_alarm_sms_and_email**: text message and email.
	// *   **hdm_alarm_sms,dingtalk**: text message and DingTalk chatbot.
	ChannelType *string `json:"channelType,omitempty" xml:"channelType,omitempty"`
	// The name of the contact group that receives alert notifications. Multiple names are separated by commas (,).
	ContactGroupName *string `json:"contactGroupName,omitempty" xml:"contactGroupName,omitempty"`
	// The name of the contact who receives alert notifications. Multiple names are separated by commas (,).
	ContactName *string `json:"contactName,omitempty" xml:"contactName,omitempty"`
	// The supported event scenarios. Only **AllContext** is returned for this parameter, which indicates that all scenarios are supported.
	EventContext *string `json:"eventContext,omitempty" xml:"eventContext,omitempty"`
	// The instance ID.
	InstanceId *string `json:"instanceId,omitempty" xml:"instanceId,omitempty"`
	// The language of event notifications. Only **zh-CN** is returned for this parameter, which indicates that event notifications are sent in Chinese.
	Lang *string `json:"lang,omitempty" xml:"lang,omitempty"`
	// The risk level of the events. Valid values:
	//
	// *   **Notice**
	// *   **Optimization**
	// *   **Warn**
	// *   **Critical**
	Level *string `json:"level,omitempty" xml:"level,omitempty"`
	// The minimum interval between consecutive event notifications. Unit: seconds.
	MinInterval *int32 `json:"minInterval,omitempty" xml:"minInterval,omitempty"`
	// The user ID.
	UserId *string `json:"userId,omitempty" xml:"userId,omitempty"`
}

func (s SetEventSubscriptionResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s SetEventSubscriptionResponseBodyData) GoString() string {
	return s.String()
}

func (s *SetEventSubscriptionResponseBodyData) SetActive(v int32) *SetEventSubscriptionResponseBodyData {
	s.Active = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetChannelType(v string) *SetEventSubscriptionResponseBodyData {
	s.ChannelType = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetContactGroupName(v string) *SetEventSubscriptionResponseBodyData {
	s.ContactGroupName = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetContactName(v string) *SetEventSubscriptionResponseBodyData {
	s.ContactName = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetEventContext(v string) *SetEventSubscriptionResponseBodyData {
	s.EventContext = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetInstanceId(v string) *SetEventSubscriptionResponseBodyData {
	s.InstanceId = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetLang(v string) *SetEventSubscriptionResponseBodyData {
	s.Lang = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetLevel(v string) *SetEventSubscriptionResponseBodyData {
	s.Level = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetMinInterval(v int32) *SetEventSubscriptionResponseBodyData {
	s.MinInterval = &v
	return s
}

func (s *SetEventSubscriptionResponseBodyData) SetUserId(v string) *SetEventSubscriptionResponseBodyData {
	s.UserId = &v
	return s
}

type SetEventSubscriptionResponse struct {
	Headers    map[string]*string                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SetEventSubscriptionResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SetEventSubscriptionResponse) String() string {
	return tea.Prettify(s)
}

func (s SetEventSubscriptionResponse) GoString() string {
	return s.String()
}

func (s *SetEventSubscriptionResponse) SetHeaders(v map[string]*string) *SetEventSubscriptionResponse {
	s.Headers = v
	return s
}

func (s *SetEventSubscriptionResponse) SetStatusCode(v int32) *SetEventSubscriptionResponse {
	s.StatusCode = &v
	return s
}

func (s *SetEventSubscriptionResponse) SetBody(v *SetEventSubscriptionResponseBody) *SetEventSubscriptionResponse {
	s.Body = v
	return s
}

type StopCloudBenchTaskRequest struct {
	// The stress testing task ID. You can call the [DescribeCloudBenchTasks](~~230670~~) operation to query the task ID.
	TaskId *string `json:"TaskId,omitempty" xml:"TaskId,omitempty"`
}

func (s StopCloudBenchTaskRequest) String() string {
	return tea.Prettify(s)
}

func (s StopCloudBenchTaskRequest) GoString() string {
	return s.String()
}

func (s *StopCloudBenchTaskRequest) SetTaskId(v string) *StopCloudBenchTaskRequest {
	s.TaskId = &v
	return s
}

type StopCloudBenchTaskResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The reserved parameter.
	Data *string `json:"Data,omitempty" xml:"Data,omitempty"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s StopCloudBenchTaskResponseBody) String() string {
	return tea.Prettify(s)
}

func (s StopCloudBenchTaskResponseBody) GoString() string {
	return s.String()
}

func (s *StopCloudBenchTaskResponseBody) SetCode(v string) *StopCloudBenchTaskResponseBody {
	s.Code = &v
	return s
}

func (s *StopCloudBenchTaskResponseBody) SetData(v string) *StopCloudBenchTaskResponseBody {
	s.Data = &v
	return s
}

func (s *StopCloudBenchTaskResponseBody) SetMessage(v string) *StopCloudBenchTaskResponseBody {
	s.Message = &v
	return s
}

func (s *StopCloudBenchTaskResponseBody) SetRequestId(v string) *StopCloudBenchTaskResponseBody {
	s.RequestId = &v
	return s
}

func (s *StopCloudBenchTaskResponseBody) SetSuccess(v string) *StopCloudBenchTaskResponseBody {
	s.Success = &v
	return s
}

type StopCloudBenchTaskResponse struct {
	Headers    map[string]*string              `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                          `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *StopCloudBenchTaskResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s StopCloudBenchTaskResponse) String() string {
	return tea.Prettify(s)
}

func (s StopCloudBenchTaskResponse) GoString() string {
	return s.String()
}

func (s *StopCloudBenchTaskResponse) SetHeaders(v map[string]*string) *StopCloudBenchTaskResponse {
	s.Headers = v
	return s
}

func (s *StopCloudBenchTaskResponse) SetStatusCode(v int32) *StopCloudBenchTaskResponse {
	s.StatusCode = &v
	return s
}

func (s *StopCloudBenchTaskResponse) SetBody(v *StopCloudBenchTaskResponseBody) *StopCloudBenchTaskResponse {
	s.Body = v
	return s
}

type SyncHDMAliyunResourceRequest struct {
	Async                    *string `json:"Async,omitempty" xml:"Async,omitempty"`
	ResourceTypes            *string `json:"ResourceTypes,omitempty" xml:"ResourceTypes,omitempty"`
	Uid                      *string `json:"Uid,omitempty" xml:"Uid,omitempty"`
	UserId                   *string `json:"UserId,omitempty" xml:"UserId,omitempty"`
	WaitForModifySecurityIps *string `json:"WaitForModifySecurityIps,omitempty" xml:"WaitForModifySecurityIps,omitempty"`
	Context                  *string `json:"__context,omitempty" xml:"__context,omitempty"`
	AccessKey                *string `json:"accessKey,omitempty" xml:"accessKey,omitempty"`
	Signature                *string `json:"signature,omitempty" xml:"signature,omitempty"`
	SkipAuth                 *string `json:"skipAuth,omitempty" xml:"skipAuth,omitempty"`
	Timestamp                *string `json:"timestamp,omitempty" xml:"timestamp,omitempty"`
}

func (s SyncHDMAliyunResourceRequest) String() string {
	return tea.Prettify(s)
}

func (s SyncHDMAliyunResourceRequest) GoString() string {
	return s.String()
}

func (s *SyncHDMAliyunResourceRequest) SetAsync(v string) *SyncHDMAliyunResourceRequest {
	s.Async = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetResourceTypes(v string) *SyncHDMAliyunResourceRequest {
	s.ResourceTypes = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetUid(v string) *SyncHDMAliyunResourceRequest {
	s.Uid = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetUserId(v string) *SyncHDMAliyunResourceRequest {
	s.UserId = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetWaitForModifySecurityIps(v string) *SyncHDMAliyunResourceRequest {
	s.WaitForModifySecurityIps = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetContext(v string) *SyncHDMAliyunResourceRequest {
	s.Context = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetAccessKey(v string) *SyncHDMAliyunResourceRequest {
	s.AccessKey = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetSignature(v string) *SyncHDMAliyunResourceRequest {
	s.Signature = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetSkipAuth(v string) *SyncHDMAliyunResourceRequest {
	s.SkipAuth = &v
	return s
}

func (s *SyncHDMAliyunResourceRequest) SetTimestamp(v string) *SyncHDMAliyunResourceRequest {
	s.Timestamp = &v
	return s
}

type SyncHDMAliyunResourceResponseBody struct {
	Code      *string `json:"Code,omitempty" xml:"Code,omitempty"`
	Data      *string `json:"Data,omitempty" xml:"Data,omitempty"`
	Message   *string `json:"Message,omitempty" xml:"Message,omitempty"`
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	Success   *string `json:"Success,omitempty" xml:"Success,omitempty"`
	Synchro   *string `json:"Synchro,omitempty" xml:"Synchro,omitempty"`
}

func (s SyncHDMAliyunResourceResponseBody) String() string {
	return tea.Prettify(s)
}

func (s SyncHDMAliyunResourceResponseBody) GoString() string {
	return s.String()
}

func (s *SyncHDMAliyunResourceResponseBody) SetCode(v string) *SyncHDMAliyunResourceResponseBody {
	s.Code = &v
	return s
}

func (s *SyncHDMAliyunResourceResponseBody) SetData(v string) *SyncHDMAliyunResourceResponseBody {
	s.Data = &v
	return s
}

func (s *SyncHDMAliyunResourceResponseBody) SetMessage(v string) *SyncHDMAliyunResourceResponseBody {
	s.Message = &v
	return s
}

func (s *SyncHDMAliyunResourceResponseBody) SetRequestId(v string) *SyncHDMAliyunResourceResponseBody {
	s.RequestId = &v
	return s
}

func (s *SyncHDMAliyunResourceResponseBody) SetSuccess(v string) *SyncHDMAliyunResourceResponseBody {
	s.Success = &v
	return s
}

func (s *SyncHDMAliyunResourceResponseBody) SetSynchro(v string) *SyncHDMAliyunResourceResponseBody {
	s.Synchro = &v
	return s
}

type SyncHDMAliyunResourceResponse struct {
	Headers    map[string]*string                 `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                             `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *SyncHDMAliyunResourceResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s SyncHDMAliyunResourceResponse) String() string {
	return tea.Prettify(s)
}

func (s SyncHDMAliyunResourceResponse) GoString() string {
	return s.String()
}

func (s *SyncHDMAliyunResourceResponse) SetHeaders(v map[string]*string) *SyncHDMAliyunResourceResponse {
	s.Headers = v
	return s
}

func (s *SyncHDMAliyunResourceResponse) SetStatusCode(v int32) *SyncHDMAliyunResourceResponse {
	s.StatusCode = &v
	return s
}

func (s *SyncHDMAliyunResourceResponse) SetBody(v *SyncHDMAliyunResourceResponseBody) *SyncHDMAliyunResourceResponse {
	s.Body = v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncRequest struct {
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The database instance IDs.
	//
	// >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\"Instance ID1\", \"Instance ID2\"]`.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The ID of the asynchronous request.
	//
	// >  You can leave this parameter empty when you call the operation to initiate the request for the first time, and use the value of this parameter contained in the response to the first request for subsequent requests.
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The fragmentation rate that triggers automatic fragment recycling of a single physical table. Valid values: **0.10** to **0.99**.
	TableFragmentationRatio *float64 `json:"TableFragmentationRatio,omitempty" xml:"TableFragmentationRatio,omitempty"`
	// The minimum storage usage that triggers automatic fragment recycling of a single physical table. Valid values: **5** to **100**. Unit: GB.
	TableSpaceSize *float64 `json:"TableSpaceSize,omitempty" xml:"TableSpaceSize,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncRequest) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetConsoleContext(v string) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.ConsoleContext = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetInstanceIds(v string) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.InstanceIds = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetResultId(v string) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.ResultId = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetTableFragmentationRatio(v float64) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.TableFragmentationRatio = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncRequest) SetTableSpaceSize(v float64) *UpdateAutoResourceOptimizeRulesAsyncRequest {
	s.TableSpaceSize = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetCode(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetData(v *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.Data = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetMessage(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetRequestId(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBody) SetSuccess(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBody {
	s.Success = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBodyData struct {
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	Complete *bool `json:"Complete,omitempty" xml:"Complete,omitempty"`
	// The returned data of the configuration.
	//
	// >  The data is returned only if the value of isFinish is **true**. This value indicates that the asynchronous request is complete.
	ConfigResponse *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse `json:"ConfigResponse,omitempty" xml:"ConfigResponse,omitempty" type:"Struct"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// *   **true**
	// *   **false**
	Fail *bool `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// The ID of the asynchronous request.
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// *   **RUNNING**
	// *   **SUCCESS**
	// *   **FAIL**
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetComplete(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.Complete = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetConfigResponse(v *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.ConfigResponse = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetFail(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.Fail = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetIsFinish(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetResultId(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetState(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.State = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData) SetTimestamp(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyData {
	s.Timestamp = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse struct {
	// The number of database instances for which the parameters failed to be configured.
	ConfigFailInstanceCount *int64 `json:"ConfigFailInstanceCount,omitempty" xml:"ConfigFailInstanceCount,omitempty"`
	// The database instances for which the parameters failed to be configured.
	ConfigFailInstanceList []*UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList `json:"ConfigFailInstanceList,omitempty" xml:"ConfigFailInstanceList,omitempty" type:"Repeated"`
	// The number of database instances for which the parameters are configured.
	ConfigSuccessInstanceCount *int64 `json:"ConfigSuccessInstanceCount,omitempty" xml:"ConfigSuccessInstanceCount,omitempty"`
	// The database instances for which the parameters are configured.
	ConfigSuccessInstanceList []*UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList `json:"ConfigSuccessInstanceList,omitempty" xml:"ConfigSuccessInstanceList,omitempty" type:"Repeated"`
	// The total number of database instances.
	TotalInstanceCount *int64 `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetConfigFailInstanceCount(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigFailInstanceCount = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetConfigFailInstanceList(v []*UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigFailInstanceList = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetConfigSuccessInstanceCount(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigSuccessInstanceCount = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetConfigSuccessInstanceList(v []*UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigSuccessInstanceList = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse) SetTotalInstanceCount(v int64) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponse {
	s.TotalInstanceCount = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList struct {
	// Indicates whether the parameters are configured. Valid values:
	//
	// * **true**
	//
	// * **false**
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The error message returned.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetConfigSuccess(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetErrorMessage(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetInstanceId(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.InstanceId = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList struct {
	// Indicates whether the parameters are configured. Valid values:
	//
	// * **true**
	//
	// * **false**
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) SetConfigSuccess(v bool) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) SetInstanceId(v string) *UpdateAutoResourceOptimizeRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList {
	s.InstanceId = &v
	return s
}

type UpdateAutoResourceOptimizeRulesAsyncResponse struct {
	Headers    map[string]*string                                `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                            `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateAutoResourceOptimizeRulesAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoResourceOptimizeRulesAsyncResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponse) SetHeaders(v map[string]*string) *UpdateAutoResourceOptimizeRulesAsyncResponse {
	s.Headers = v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponse) SetStatusCode(v int32) *UpdateAutoResourceOptimizeRulesAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAutoResourceOptimizeRulesAsyncResponse) SetBody(v *UpdateAutoResourceOptimizeRulesAsyncResponseBody) *UpdateAutoResourceOptimizeRulesAsyncResponse {
	s.Body = v
	return s
}

type UpdateAutoSqlOptimizeStatusRequest struct {
	// The database instance IDs. Separate multiple IDs with commas (,).
	//
	// >  You can specify up to 50 instance IDs.
	Instances *string `json:"Instances,omitempty" xml:"Instances,omitempty"`
	// The status of the automatic SQL optimization feature. Valid values:
	//
	// *   **0**: The automatic SQL optimization feature is disabled.
	// *   **1**: **SQL diagnosis and automatic index creation** is specified.
	// *   **3**: **SQL diagnosis only** is specified.
	Status *int32 `json:"Status,omitempty" xml:"Status,omitempty"`
}

func (s UpdateAutoSqlOptimizeStatusRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoSqlOptimizeStatusRequest) GoString() string {
	return s.String()
}

func (s *UpdateAutoSqlOptimizeStatusRequest) SetInstances(v string) *UpdateAutoSqlOptimizeStatusRequest {
	s.Instances = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusRequest) SetStatus(v int32) *UpdateAutoSqlOptimizeStatusRequest {
	s.Status = &v
	return s
}

type UpdateAutoSqlOptimizeStatusResponseBody struct {
	// The HTTP status code returned.
	Code *string `json:"Code,omitempty" xml:"Code,omitempty"`
	// The returned data.
	Data *UpdateAutoSqlOptimizeStatusResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAutoSqlOptimizeStatusResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoSqlOptimizeStatusResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetCode(v string) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetData(v *UpdateAutoSqlOptimizeStatusResponseBodyData) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.Data = v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetMessage(v string) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetRequestId(v string) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBody) SetSuccess(v string) *UpdateAutoSqlOptimizeStatusResponseBody {
	s.Success = &v
	return s
}

type UpdateAutoSqlOptimizeStatusResponseBodyData struct {
	// The error code. Valid values:
	//
	// *   **-1001**: indicates that the specified parameter is invalid.
	// *   **-91029**: indicates that a system error occurred.
	ErrorCode *string `json:"ErrorCode,omitempty" xml:"ErrorCode,omitempty"`
	// The error message.
	ErrorMsg *string `json:"ErrorMsg,omitempty" xml:"ErrorMsg,omitempty"`
	// Indicates whether the request initiated to configure the automatic SQL optimization feature was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *string `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAutoSqlOptimizeStatusResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoSqlOptimizeStatusResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateAutoSqlOptimizeStatusResponseBodyData) SetErrorCode(v string) *UpdateAutoSqlOptimizeStatusResponseBodyData {
	s.ErrorCode = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBodyData) SetErrorMsg(v string) *UpdateAutoSqlOptimizeStatusResponseBodyData {
	s.ErrorMsg = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponseBodyData) SetSuccess(v string) *UpdateAutoSqlOptimizeStatusResponseBodyData {
	s.Success = &v
	return s
}

type UpdateAutoSqlOptimizeStatusResponse struct {
	Headers    map[string]*string                       `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                   `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateAutoSqlOptimizeStatusResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAutoSqlOptimizeStatusResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoSqlOptimizeStatusResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoSqlOptimizeStatusResponse) SetHeaders(v map[string]*string) *UpdateAutoSqlOptimizeStatusResponse {
	s.Headers = v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponse) SetStatusCode(v int32) *UpdateAutoSqlOptimizeStatusResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAutoSqlOptimizeStatusResponse) SetBody(v *UpdateAutoSqlOptimizeStatusResponseBody) *UpdateAutoSqlOptimizeStatusResponse {
	s.Body = v
	return s
}

type UpdateAutoThrottleRulesAsyncRequest struct {
	// The duration threshold for triggering automatic SQL throttling. Set this parameter to a positive integer that is greater than or equal to 2. Unit: minutes.
	AbnormalDuration *float64 `json:"AbnormalDuration,omitempty" xml:"AbnormalDuration,omitempty"`
	// The maximum number of active sessions.
	//
	// *   Specify an integer that is greater than or equal to 16 when the CPU utilization threshold and the maximum number of active sessions are in the **OR** relationship.
	// *   Specify an integer that is greater than or equal to 2 when the CPU utilization threshold and the maximum number of active sessions are in the **AND** relationship.
	ActiveSessions *int64 `json:"ActiveSessions,omitempty" xml:"ActiveSessions,omitempty"`
	// The end time of the throttling window. The time must be in UTC.
	AllowThrottleEndTime *string `json:"AllowThrottleEndTime,omitempty" xml:"AllowThrottleEndTime,omitempty"`
	// The start time of the throttling window. The time must be in UTC.
	AllowThrottleStartTime *string `json:"AllowThrottleStartTime,omitempty" xml:"AllowThrottleStartTime,omitempty"`
	// Specifies whether to terminate abnormal SQL statements in execution at the same time. Valid values:
	//
	// >  Abnormal SQL statements use the same template as the SQL statements that need to be throttled.
	//
	// *   **true**
	// *   **false**
	AutoKillSession *bool `json:"AutoKillSession,omitempty" xml:"AutoKillSession,omitempty"`
	// The reserved parameter.
	ConsoleContext *string `json:"ConsoleContext,omitempty" xml:"ConsoleContext,omitempty"`
	// The logical relationship between the CPU utilization threshold and the maximum number of active sessions. Valid values:
	//
	// *   **AND**
	// *   **OR**
	CpuSessionRelation *string `json:"CpuSessionRelation,omitempty" xml:"CpuSessionRelation,omitempty"`
	// The CPU utilization threshold, in percentages. Valid values: 70 to 100.
	CpuUsage *float64 `json:"CpuUsage,omitempty" xml:"CpuUsage,omitempty"`
	// The database instance IDs.
	//
	// >  Set this parameter to a JSON array that consists of multiple instance IDs. Separate instance IDs with commas (,). Example: `[\"Instance ID1\", \"Instance ID2\"]`.
	InstanceIds *string `json:"InstanceIds,omitempty" xml:"InstanceIds,omitempty"`
	// The maximum throttling duration. Set this parameter to a positive integer. Unit: minutes.
	MaxThrottleTime *float64 `json:"MaxThrottleTime,omitempty" xml:"MaxThrottleTime,omitempty"`
	// The ID of the asynchronous request.
	//
	// >  You can leave this parameter empty when you call the operation to initiate the request for the first time, and use the value of this parameter contained in the response to the first request for subsequent requests.
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncRequest) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncRequest) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetAbnormalDuration(v float64) *UpdateAutoThrottleRulesAsyncRequest {
	s.AbnormalDuration = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetActiveSessions(v int64) *UpdateAutoThrottleRulesAsyncRequest {
	s.ActiveSessions = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetAllowThrottleEndTime(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.AllowThrottleEndTime = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetAllowThrottleStartTime(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.AllowThrottleStartTime = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetAutoKillSession(v bool) *UpdateAutoThrottleRulesAsyncRequest {
	s.AutoKillSession = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetConsoleContext(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.ConsoleContext = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetCpuSessionRelation(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.CpuSessionRelation = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetCpuUsage(v float64) *UpdateAutoThrottleRulesAsyncRequest {
	s.CpuUsage = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetInstanceIds(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.InstanceIds = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetMaxThrottleTime(v float64) *UpdateAutoThrottleRulesAsyncRequest {
	s.MaxThrottleTime = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncRequest) SetResultId(v string) *UpdateAutoThrottleRulesAsyncRequest {
	s.ResultId = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBody struct {
	// The HTTP status code returned.
	Code *int64 `json:"Code,omitempty" xml:"Code,omitempty"`
	// The data returned.
	Data *UpdateAutoThrottleRulesAsyncResponseBodyData `json:"Data,omitempty" xml:"Data,omitempty" type:"Struct"`
	// The returned message.
	//
	// >  If the request was successful, **Successful** is returned. If the request failed, an error message such as an error code is returned.
	Message *string `json:"Message,omitempty" xml:"Message,omitempty"`
	// The request ID.
	RequestId *string `json:"RequestId,omitempty" xml:"RequestId,omitempty"`
	// Indicates whether the request was successful. Valid values:
	//
	// *   **true**
	// *   **false**
	Success *bool `json:"Success,omitempty" xml:"Success,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBody) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBody) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetCode(v int64) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.Code = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetData(v *UpdateAutoThrottleRulesAsyncResponseBodyData) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.Data = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetMessage(v string) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.Message = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetRequestId(v string) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.RequestId = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBody) SetSuccess(v bool) *UpdateAutoThrottleRulesAsyncResponseBody {
	s.Success = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBodyData struct {
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	Complete *bool `json:"Complete,omitempty" xml:"Complete,omitempty"`
	// The returned data of the configuration.
	//
	// >  The data is returned only if the value of isFinish is **true**. This value indicates that the asynchronous request is complete.
	ConfigResponse *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse `json:"ConfigResponse,omitempty" xml:"ConfigResponse,omitempty" type:"Struct"`
	// Indicates whether the asynchronous request failed. Valid values:
	//
	// *   **true**
	// *   **false**
	Fail *bool `json:"Fail,omitempty" xml:"Fail,omitempty"`
	// Indicates whether the asynchronous request was complete. Valid values:
	//
	// *   **true**
	// *   **false**
	IsFinish *bool `json:"IsFinish,omitempty" xml:"IsFinish,omitempty"`
	// The ID of the asynchronous request.
	ResultId *string `json:"ResultId,omitempty" xml:"ResultId,omitempty"`
	// The state of the asynchronous request. Valid values:
	//
	// *   **RUNNING**
	// *   **SUCCESS**
	// *   **FAIL**
	State *string `json:"State,omitempty" xml:"State,omitempty"`
	// The time when the asynchronous request was made. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.
	Timestamp *int64 `json:"Timestamp,omitempty" xml:"Timestamp,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyData) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyData) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetComplete(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.Complete = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetConfigResponse(v *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.ConfigResponse = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetFail(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.Fail = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetIsFinish(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.IsFinish = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetResultId(v string) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.ResultId = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetState(v string) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.State = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyData) SetTimestamp(v int64) *UpdateAutoThrottleRulesAsyncResponseBodyData {
	s.Timestamp = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse struct {
	// The number of database instances for which the parameters failed to be configured.
	ConfigFailInstanceCount *int64 `json:"ConfigFailInstanceCount,omitempty" xml:"ConfigFailInstanceCount,omitempty"`
	// The database instances for which the parameters failed to be configured.
	ConfigFailInstanceList []*UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList `json:"ConfigFailInstanceList,omitempty" xml:"ConfigFailInstanceList,omitempty" type:"Repeated"`
	// The number of database instances for which the parameters are configured.
	ConfigSuccessInstanceCount *int64 `json:"ConfigSuccessInstanceCount,omitempty" xml:"ConfigSuccessInstanceCount,omitempty"`
	// The database instances for which the parameters are configured.
	ConfigSuccessInstanceList []*UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList `json:"ConfigSuccessInstanceList,omitempty" xml:"ConfigSuccessInstanceList,omitempty" type:"Repeated"`
	// The total number of database instances.
	TotalInstanceCount *int64 `json:"TotalInstanceCount,omitempty" xml:"TotalInstanceCount,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetConfigFailInstanceCount(v int64) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigFailInstanceCount = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetConfigFailInstanceList(v []*UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigFailInstanceList = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetConfigSuccessInstanceCount(v int64) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigSuccessInstanceCount = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetConfigSuccessInstanceList(v []*UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.ConfigSuccessInstanceList = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse) SetTotalInstanceCount(v int64) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponse {
	s.TotalInstanceCount = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList struct {
	// Indicates whether the parameters are configured. Valid values:
	//
	// * **true**
	//
	// * **false**
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The error message returned.
	ErrorMessage *string `json:"ErrorMessage,omitempty" xml:"ErrorMessage,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetConfigSuccess(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetErrorMessage(v string) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.ErrorMessage = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList) SetInstanceId(v string) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigFailInstanceList {
	s.InstanceId = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList struct {
	// Indicates whether the parameters are configured. Valid values:
	//
	// * **true**
	//
	// * **false**
	ConfigSuccess *bool `json:"ConfigSuccess,omitempty" xml:"ConfigSuccess,omitempty"`
	// The database instance ID.
	InstanceId *string `json:"InstanceId,omitempty" xml:"InstanceId,omitempty"`
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) SetConfigSuccess(v bool) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList {
	s.ConfigSuccess = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList) SetInstanceId(v string) *UpdateAutoThrottleRulesAsyncResponseBodyDataConfigResponseConfigSuccessInstanceList {
	s.InstanceId = &v
	return s
}

type UpdateAutoThrottleRulesAsyncResponse struct {
	Headers    map[string]*string                        `json:"headers,omitempty" xml:"headers,omitempty" require:"true"`
	StatusCode *int32                                    `json:"statusCode,omitempty" xml:"statusCode,omitempty" require:"true"`
	Body       *UpdateAutoThrottleRulesAsyncResponseBody `json:"body,omitempty" xml:"body,omitempty" require:"true"`
}

func (s UpdateAutoThrottleRulesAsyncResponse) String() string {
	return tea.Prettify(s)
}

func (s UpdateAutoThrottleRulesAsyncResponse) GoString() string {
	return s.String()
}

func (s *UpdateAutoThrottleRulesAsyncResponse) SetHeaders(v map[string]*string) *UpdateAutoThrottleRulesAsyncResponse {
	s.Headers = v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponse) SetStatusCode(v int32) *UpdateAutoThrottleRulesAsyncResponse {
	s.StatusCode = &v
	return s
}

func (s *UpdateAutoThrottleRulesAsyncResponse) SetBody(v *UpdateAutoThrottleRulesAsyncResponseBody) *UpdateAutoThrottleRulesAsyncResponse {
	s.Body = v
	return s
}

type Client struct {
	openapi.Client
}

func NewClient(config *openapi.Config) (*Client, error) {
	client := new(Client)
	err := client.Init(config)
	return client, err
}

func (client *Client) Init(config *openapi.Config) (_err error) {
	_err = client.Client.Init(config)
	if _err != nil {
		return _err
	}
	client.EndpointRule = tea.String("central")
	client.EndpointMap = map[string]*string{
		"cn-shanghai": tea.String("das.cn-shanghai.aliyuncs.com"),
	}
	_err = client.CheckConfig(config)
	if _err != nil {
		return _err
	}
	client.Endpoint, _err = client.GetEndpoint(tea.String("das"), client.RegionId, client.EndpointRule, client.Network, client.Suffix, client.EndpointMap, client.Endpoint)
	if _err != nil {
		return _err
	}

	return nil
}

func (client *Client) GetEndpoint(productId *string, regionId *string, endpointRule *string, network *string, suffix *string, endpointMap map[string]*string, endpoint *string) (_result *string, _err error) {
	if !tea.BoolValue(util.Empty(endpoint)) {
		_result = endpoint
		return _result, _err
	}

	if !tea.BoolValue(util.IsUnset(endpointMap)) && !tea.BoolValue(util.Empty(endpointMap[tea.StringValue(regionId)])) {
		_result = endpointMap[tea.StringValue(regionId)]
		return _result, _err
	}

	_body, _err := endpointutil.GetEndpointRules(productId, regionId, endpointRule, network, suffix)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
 *
 * @param request AddHDMInstanceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddHDMInstanceResponse
 */
func (client *Client) AddHDMInstanceWithOptions(request *AddHDMInstanceRequest, runtime *util.RuntimeOptions) (_result *AddHDMInstanceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.FlushAccount)) {
		query["FlushAccount"] = request.FlushAccount
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceAlias)) {
		query["InstanceAlias"] = request.InstanceAlias
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceArea)) {
		query["InstanceArea"] = request.InstanceArea
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Ip)) {
		query["Ip"] = request.Ip
	}

	if !tea.BoolValue(util.IsUnset(request.NetworkType)) {
		query["NetworkType"] = request.NetworkType
	}

	if !tea.BoolValue(util.IsUnset(request.Password)) {
		query["Password"] = request.Password
	}

	if !tea.BoolValue(util.IsUnset(request.Port)) {
		query["Port"] = request.Port
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.Username)) {
		query["Username"] = request.Username
	}

	if !tea.BoolValue(util.IsUnset(request.VpcId)) {
		query["VpcId"] = request.VpcId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("AddHDMInstance"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &AddHDMInstanceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
 *
 * @param request AddHDMInstanceRequest
 * @return AddHDMInstanceResponse
 */
func (client *Client) AddHDMInstance(request *AddHDMInstanceRequest) (_result *AddHDMInstanceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &AddHDMInstanceResponse{}
	_body, _err := client.AddHDMInstanceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. You use an ADAM stress testing task to check whether you need to scale up or scale out your database instance to handle workloads during peak hours. For more information, see [Intelligent Stress Testing](~~155068~~).
 * Make sure that your database instances meet the following requirements:
 * *   The source instance supports the following database engines: ApsaraDB RDS for MySQL on High-availability Edition or Enterprise Edition, and PolarDB for MySQL on Cluster Edition or X-Engine.
 * *   The destination instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance.
 * *   The database instance is connected to DAS. For information about how to connect database instances to DAS, see [Connect an Alibaba Cloud database instance to DAS](~~65405~~).
 * *   DAS Professional Edition is activated for the source and destination database instances. For more information, see [DAS Professional Edition](~~190912~~).
 *
 * @param request CreateAdamBenchTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAdamBenchTaskResponse
 */
func (client *Client) CreateAdamBenchTaskWithOptions(request *CreateAdamBenchTaskRequest, runtime *util.RuntimeOptions) (_result *CreateAdamBenchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DstInstanceId)) {
		query["DstInstanceId"] = request.DstInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DstSuperAccount)) {
		query["DstSuperAccount"] = request.DstSuperAccount
	}

	if !tea.BoolValue(util.IsUnset(request.DstSuperPassword)) {
		query["DstSuperPassword"] = request.DstSuperPassword
	}

	if !tea.BoolValue(util.IsUnset(request.Rate)) {
		query["Rate"] = request.Rate
	}

	if !tea.BoolValue(util.IsUnset(request.RequestDuration)) {
		query["RequestDuration"] = request.RequestDuration
	}

	if !tea.BoolValue(util.IsUnset(request.RequestStartTime)) {
		query["RequestStartTime"] = request.RequestStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SrcEngine)) {
		query["SrcEngine"] = request.SrcEngine
	}

	if !tea.BoolValue(util.IsUnset(request.SrcEngineVersion)) {
		query["SrcEngineVersion"] = request.SrcEngineVersion
	}

	if !tea.BoolValue(util.IsUnset(request.SrcMaxQps)) {
		query["SrcMaxQps"] = request.SrcMaxQps
	}

	if !tea.BoolValue(util.IsUnset(request.SrcMeanQps)) {
		query["SrcMeanQps"] = request.SrcMeanQps
	}

	if !tea.BoolValue(util.IsUnset(request.SrcSqlOssAddr)) {
		query["SrcSqlOssAddr"] = request.SrcSqlOssAddr
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateAdamBenchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateAdamBenchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. You use an ADAM stress testing task to check whether you need to scale up or scale out your database instance to handle workloads during peak hours. For more information, see [Intelligent Stress Testing](~~155068~~).
 * Make sure that your database instances meet the following requirements:
 * *   The source instance supports the following database engines: ApsaraDB RDS for MySQL on High-availability Edition or Enterprise Edition, and PolarDB for MySQL on Cluster Edition or X-Engine.
 * *   The destination instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance.
 * *   The database instance is connected to DAS. For information about how to connect database instances to DAS, see [Connect an Alibaba Cloud database instance to DAS](~~65405~~).
 * *   DAS Professional Edition is activated for the source and destination database instances. For more information, see [DAS Professional Edition](~~190912~~).
 *
 * @param request CreateAdamBenchTaskRequest
 * @return CreateAdamBenchTaskResponse
 */
func (client *Client) CreateAdamBenchTask(request *CreateAdamBenchTaskRequest) (_result *CreateAdamBenchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateAdamBenchTaskResponse{}
	_body, _err := client.CreateAdamBenchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis Community Edition instances and performance-enhanced instances of the ApsaraDB for Redis Enhanced Edition (Tair).
 * >  Redis 7.0 is not supported. You are not allowed to use custom modules.
 *
 * @param request CreateCacheAnalysisJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCacheAnalysisJobResponse
 */
func (client *Client) CreateCacheAnalysisJobWithOptions(request *CreateCacheAnalysisJobRequest, runtime *util.RuntimeOptions) (_result *CreateCacheAnalysisJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.BackupSetId)) {
		query["BackupSetId"] = request.BackupSetId
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Separators)) {
		query["Separators"] = request.Separators
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCacheAnalysisJob"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCacheAnalysisJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis Community Edition instances and performance-enhanced instances of the ApsaraDB for Redis Enhanced Edition (Tair).
 * >  Redis 7.0 is not supported. You are not allowed to use custom modules.
 *
 * @param request CreateCacheAnalysisJobRequest
 * @return CreateCacheAnalysisJobResponse
 */
func (client *Client) CreateCacheAnalysisJob(request *CreateCacheAnalysisJobRequest) (_result *CreateCacheAnalysisJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCacheAnalysisJobResponse{}
	_body, _err := client.CreateCacheAnalysisJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to handle traffic spikes in an effective manner. For more information, see [Intelligent stress testing](~~155068~~). Before you call this API operation, make sure that your database instances meet the following requirements:
 * *   The source database instance must be an ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition instance, or a PolarDB for MySQL Cluster Edition or X-Engine Edition instance.
 * *   The destination instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance.
 * *   The source instance and the destination instance are connected to DAS. For information about how to connect database instances to DAS, see [Connect an Alibaba Cloud database instance to DAS](~~65405~~).
 * *   DAS Professional Edition is enabled for the source instance and the destination instance. For more information, see [DAS Professional Edition](~~190912~~).
 *
 * @param request CreateCloudBenchTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCloudBenchTasksResponse
 */
func (client *Client) CreateCloudBenchTasksWithOptions(request *CreateCloudBenchTasksRequest, runtime *util.RuntimeOptions) (_result *CreateCloudBenchTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Amount)) {
		query["Amount"] = request.Amount
	}

	if !tea.BoolValue(util.IsUnset(request.BackupId)) {
		query["BackupId"] = request.BackupId
	}

	if !tea.BoolValue(util.IsUnset(request.BackupTime)) {
		query["BackupTime"] = request.BackupTime
	}

	if !tea.BoolValue(util.IsUnset(request.ClientType)) {
		query["ClientType"] = request.ClientType
	}

	if !tea.BoolValue(util.IsUnset(request.Description)) {
		query["Description"] = request.Description
	}

	if !tea.BoolValue(util.IsUnset(request.DstConnectionString)) {
		query["DstConnectionString"] = request.DstConnectionString
	}

	if !tea.BoolValue(util.IsUnset(request.DstInstanceId)) {
		query["DstInstanceId"] = request.DstInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.DstPort)) {
		query["DstPort"] = request.DstPort
	}

	if !tea.BoolValue(util.IsUnset(request.DstSuperAccount)) {
		query["DstSuperAccount"] = request.DstSuperAccount
	}

	if !tea.BoolValue(util.IsUnset(request.DstSuperPassword)) {
		query["DstSuperPassword"] = request.DstSuperPassword
	}

	if !tea.BoolValue(util.IsUnset(request.DstType)) {
		query["DstType"] = request.DstType
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobClass)) {
		query["DtsJobClass"] = request.DtsJobClass
	}

	if !tea.BoolValue(util.IsUnset(request.DtsJobId)) {
		query["DtsJobId"] = request.DtsJobId
	}

	if !tea.BoolValue(util.IsUnset(request.EndState)) {
		query["EndState"] = request.EndState
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayVpcId)) {
		query["GatewayVpcId"] = request.GatewayVpcId
	}

	if !tea.BoolValue(util.IsUnset(request.GatewayVpcIp)) {
		query["GatewayVpcIp"] = request.GatewayVpcIp
	}

	if !tea.BoolValue(util.IsUnset(request.Rate)) {
		query["Rate"] = request.Rate
	}

	if !tea.BoolValue(util.IsUnset(request.RequestDuration)) {
		query["RequestDuration"] = request.RequestDuration
	}

	if !tea.BoolValue(util.IsUnset(request.RequestEndTime)) {
		query["RequestEndTime"] = request.RequestEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.RequestStartTime)) {
		query["RequestStartTime"] = request.RequestStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.SmartPressureTime)) {
		query["SmartPressureTime"] = request.SmartPressureTime
	}

	if !tea.BoolValue(util.IsUnset(request.SrcInstanceId)) {
		query["SrcInstanceId"] = request.SrcInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcPublicIp)) {
		query["SrcPublicIp"] = request.SrcPublicIp
	}

	if !tea.BoolValue(util.IsUnset(request.SrcSuperAccount)) {
		query["SrcSuperAccount"] = request.SrcSuperAccount
	}

	if !tea.BoolValue(util.IsUnset(request.SrcSuperPassword)) {
		query["SrcSuperPassword"] = request.SrcSuperPassword
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	if !tea.BoolValue(util.IsUnset(request.WorkDir)) {
		query["WorkDir"] = request.WorkDir
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateCloudBenchTasks"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateCloudBenchTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to handle traffic spikes in an effective manner. For more information, see [Intelligent stress testing](~~155068~~). Before you call this API operation, make sure that your database instances meet the following requirements:
 * *   The source database instance must be an ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition instance, or a PolarDB for MySQL Cluster Edition or X-Engine Edition instance.
 * *   The destination instance is an ApsaraDB RDS for MySQL instance or a PolarDB for MySQL instance.
 * *   The source instance and the destination instance are connected to DAS. For information about how to connect database instances to DAS, see [Connect an Alibaba Cloud database instance to DAS](~~65405~~).
 * *   DAS Professional Edition is enabled for the source instance and the destination instance. For more information, see [DAS Professional Edition](~~190912~~).
 *
 * @param request CreateCloudBenchTasksRequest
 * @return CreateCloudBenchTasksResponse
 */
func (client *Client) CreateCloudBenchTasks(request *CreateCloudBenchTasksRequest) (_result *CreateCloudBenchTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateCloudBenchTasksResponse{}
	_body, _err := client.CreateCloudBenchTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
 * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.3 or later.
 * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   RDS MySQL
 *     *   PolarDB for MySQL
 *     *   Redis
 *
 * @param request CreateDiagnosticReportRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDiagnosticReportResponse
 */
func (client *Client) CreateDiagnosticReportWithOptions(request *CreateDiagnosticReportRequest, runtime *util.RuntimeOptions) (_result *CreateDiagnosticReportResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateDiagnosticReport"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
 * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.3 or later.
 * *   If you use an SDK to call DAS, you must set the region to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   RDS MySQL
 *     *   PolarDB for MySQL
 *     *   Redis
 *
 * @param request CreateDiagnosticReportRequest
 * @return CreateDiagnosticReportResponse
 */
func (client *Client) CreateDiagnosticReport(request *CreateDiagnosticReportRequest) (_result *CreateDiagnosticReportResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateDiagnosticReportResponse{}
	_body, _err := client.CreateDiagnosticReportWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request CreateKillInstanceSessionTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateKillInstanceSessionTaskResponse
 */
func (client *Client) CreateKillInstanceSessionTaskWithOptions(request *CreateKillInstanceSessionTaskRequest, runtime *util.RuntimeOptions) (_result *CreateKillInstanceSessionTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbUser)) {
		query["DbUser"] = request.DbUser
	}

	if !tea.BoolValue(util.IsUnset(request.DbUserPassword)) {
		query["DbUserPassword"] = request.DbUserPassword
	}

	if !tea.BoolValue(util.IsUnset(request.IgnoredUsers)) {
		query["IgnoredUsers"] = request.IgnoredUsers
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.KillAllSessions)) {
		query["KillAllSessions"] = request.KillAllSessions
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionIds)) {
		query["SessionIds"] = request.SessionIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateKillInstanceSessionTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateKillInstanceSessionTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request CreateKillInstanceSessionTaskRequest
 * @return CreateKillInstanceSessionTaskResponse
 */
func (client *Client) CreateKillInstanceSessionTask(request *CreateKillInstanceSessionTaskRequest) (_result *CreateKillInstanceSessionTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateKillInstanceSessionTaskResponse{}
	_body, _err := client.CreateKillInstanceSessionTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) CreateKillInstanceSessionTaskWithMaintainUserWithOptions(request *CreateKillInstanceSessionTaskWithMaintainUserRequest, runtime *util.RuntimeOptions) (_result *CreateKillInstanceSessionTaskWithMaintainUserResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.IgnoredUsers)) {
		query["IgnoredUsers"] = request.IgnoredUsers
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.KillAllSessions)) {
		query["KillAllSessions"] = request.KillAllSessions
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SessionIds)) {
		query["SessionIds"] = request.SessionIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateKillInstanceSessionTaskWithMaintainUser"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateKillInstanceSessionTaskWithMaintainUserResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) CreateKillInstanceSessionTaskWithMaintainUser(request *CreateKillInstanceSessionTaskWithMaintainUserRequest) (_result *CreateKillInstanceSessionTaskWithMaintainUserResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateKillInstanceSessionTaskWithMaintainUserResponse{}
	_body, _err := client.CreateKillInstanceSessionTaskWithMaintainUserWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request CreateQueryOptimizeTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateQueryOptimizeTagResponse
 */
func (client *Client) CreateQueryOptimizeTagWithOptions(request *CreateQueryOptimizeTagRequest, runtime *util.RuntimeOptions) (_result *CreateQueryOptimizeTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Comments)) {
		query["Comments"] = request.Comments
	}

	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlIds)) {
		query["SqlIds"] = request.SqlIds
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.Tags)) {
		query["Tags"] = request.Tags
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateQueryOptimizeTag"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateQueryOptimizeTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request CreateQueryOptimizeTagRequest
 * @return CreateQueryOptimizeTagResponse
 */
func (client *Client) CreateQueryOptimizeTag(request *CreateQueryOptimizeTagRequest) (_result *CreateQueryOptimizeTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateQueryOptimizeTagResponse{}
	_body, _err := client.CreateQueryOptimizeTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call Database Autonomy Service (DAS), you must set the region to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   RDS MySQL
 *     *   RDS PostgreSQL
 *     *   RDS SQL Server
 *     *   PolarDB for MySQL
 *     *   PolarDB for PostgreSQL (Compatible with Oracle)
 *     *   ApsaraDB for MongoDB
 * >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For information about how to update the minor engine version, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~).
 *
 * @param request CreateRequestDiagnosisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRequestDiagnosisResponse
 */
func (client *Client) CreateRequestDiagnosisWithOptions(request *CreateRequestDiagnosisRequest, runtime *util.RuntimeOptions) (_result *CreateRequestDiagnosisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Database)) {
		query["Database"] = request.Database
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Sql)) {
		query["Sql"] = request.Sql
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("CreateRequestDiagnosis"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &CreateRequestDiagnosisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call Database Autonomy Service (DAS), you must set the region to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   RDS MySQL
 *     *   RDS PostgreSQL
 *     *   RDS SQL Server
 *     *   PolarDB for MySQL
 *     *   PolarDB for PostgreSQL (Compatible with Oracle)
 *     *   ApsaraDB for MongoDB
 * >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For information about how to update the minor engine version, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~).
 *
 * @param request CreateRequestDiagnosisRequest
 * @return CreateRequestDiagnosisResponse
 */
func (client *Client) CreateRequestDiagnosis(request *CreateRequestDiagnosisRequest) (_result *CreateRequestDiagnosisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &CreateRequestDiagnosisResponse{}
	_body, _err := client.CreateRequestDiagnosisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to handle traffic spikes in an effective manner. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request DeleteCloudBenchTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCloudBenchTaskResponse
 */
func (client *Client) DeleteCloudBenchTaskWithOptions(request *DeleteCloudBenchTaskRequest, runtime *util.RuntimeOptions) (_result *DeleteCloudBenchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteCloudBenchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteCloudBenchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to handle traffic spikes in an effective manner. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request DeleteCloudBenchTaskRequest
 * @return DeleteCloudBenchTaskResponse
 */
func (client *Client) DeleteCloudBenchTask(request *DeleteCloudBenchTaskRequest) (_result *DeleteCloudBenchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteCloudBenchTaskResponse{}
	_body, _err := client.DeleteCloudBenchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is used to delete the metadata of a DBGateway that is released in a stress testing task created by calling the [CreateCloudBenchTasks](~~230665~~) operation.
 * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * >  If the heartbeat is lost between a DBGateway and the access point for more than 20 seconds, the DBGateway is considered stopped.
 *
 * @param request DeleteStopGatewayRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteStopGatewayResponse
 */
func (client *Client) DeleteStopGatewayWithOptions(request *DeleteStopGatewayRequest, runtime *util.RuntimeOptions) (_result *DeleteStopGatewayResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.GatewayId)) {
		query["GatewayId"] = request.GatewayId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DeleteStopGateway"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DeleteStopGatewayResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is used to delete the metadata of a DBGateway that is released in a stress testing task created by calling the [CreateCloudBenchTasks](~~230665~~) operation.
 * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * >  If the heartbeat is lost between a DBGateway and the access point for more than 20 seconds, the DBGateway is considered stopped.
 *
 * @param request DeleteStopGatewayRequest
 * @return DeleteStopGatewayResponse
 */
func (client *Client) DeleteStopGateway(request *DeleteStopGatewayRequest) (_result *DeleteStopGatewayResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DeleteStopGatewayResponse{}
	_body, _err := client.DeleteStopGatewayWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request DescribeAutoScalingConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAutoScalingConfigResponse
 */
func (client *Client) DescribeAutoScalingConfigWithOptions(request *DescribeAutoScalingConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoScalingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAutoScalingConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAutoScalingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request DescribeAutoScalingConfigRequest
 * @return DescribeAutoScalingConfigResponse
 */
func (client *Client) DescribeAutoScalingConfig(request *DescribeAutoScalingConfigRequest) (_result *DescribeAutoScalingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoScalingConfigResponse{}
	_body, _err := client.DescribeAutoScalingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   You can query only the history of automatic performance scaling of ApsaraDB RDS for MySQL instances.
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region to cn-shanghai.
 *
 * @param request DescribeAutoScalingHistoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeAutoScalingHistoryResponse
 */
func (client *Client) DescribeAutoScalingHistoryWithOptions(request *DescribeAutoScalingHistoryRequest, runtime *util.RuntimeOptions) (_result *DescribeAutoScalingHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeAutoScalingHistory"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeAutoScalingHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   You can query only the history of automatic performance scaling of ApsaraDB RDS for MySQL instances.
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region to cn-shanghai.
 *
 * @param request DescribeAutoScalingHistoryRequest
 * @return DescribeAutoScalingHistoryResponse
 */
func (client *Client) DescribeAutoScalingHistory(request *DescribeAutoScalingHistoryRequest) (_result *DescribeAutoScalingHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeAutoScalingHistoryResponse{}
	_body, _err := client.DescribeAutoScalingHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis.
 *
 * @param request DescribeCacheAnalysisJobRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCacheAnalysisJobResponse
 */
func (client *Client) DescribeCacheAnalysisJobWithOptions(request *DescribeCacheAnalysisJobRequest, runtime *util.RuntimeOptions) (_result *DescribeCacheAnalysisJobResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.JobId)) {
		query["JobId"] = request.JobId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCacheAnalysisJob"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCacheAnalysisJobResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis.
 *
 * @param request DescribeCacheAnalysisJobRequest
 * @return DescribeCacheAnalysisJobResponse
 */
func (client *Client) DescribeCacheAnalysisJob(request *DescribeCacheAnalysisJobRequest) (_result *DescribeCacheAnalysisJobResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCacheAnalysisJobResponse{}
	_body, _err := client.DescribeCacheAnalysisJobWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis.
 *
 * @param request DescribeCacheAnalysisJobsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCacheAnalysisJobsResponse
 */
func (client *Client) DescribeCacheAnalysisJobsWithOptions(request *DescribeCacheAnalysisJobsRequest, runtime *util.RuntimeOptions) (_result *DescribeCacheAnalysisJobsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCacheAnalysisJobs"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCacheAnalysisJobsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis.
 *
 * @param request DescribeCacheAnalysisJobsRequest
 * @return DescribeCacheAnalysisJobsResponse
 */
func (client *Client) DescribeCacheAnalysisJobs(request *DescribeCacheAnalysisJobsRequest) (_result *DescribeCacheAnalysisJobsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCacheAnalysisJobsResponse{}
	_body, _err := client.DescribeCacheAnalysisJobsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request DescribeCloudBenchTasksRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCloudBenchTasksResponse
 */
func (client *Client) DescribeCloudBenchTasksWithOptions(request *DescribeCloudBenchTasksRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudBenchTasksResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	if !tea.BoolValue(util.IsUnset(request.TaskType)) {
		query["TaskType"] = request.TaskType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudBenchTasks"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudBenchTasksResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request DescribeCloudBenchTasksRequest
 * @return DescribeCloudBenchTasksResponse
 */
func (client *Client) DescribeCloudBenchTasks(request *DescribeCloudBenchTasksRequest) (_result *DescribeCloudBenchTasksResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudBenchTasksResponse{}
	_body, _err := client.DescribeCloudBenchTasksWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether you need to scale up your database instance to handle workloads during peak hours. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request DescribeCloudbenchTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCloudbenchTaskResponse
 */
func (client *Client) DescribeCloudbenchTaskWithOptions(request *DescribeCloudbenchTaskRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudbenchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudbenchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudbenchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether you need to scale up your database instance to handle workloads during peak hours. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request DescribeCloudbenchTaskRequest
 * @return DescribeCloudbenchTaskResponse
 */
func (client *Client) DescribeCloudbenchTask(request *DescribeCloudbenchTaskRequest) (_result *DescribeCloudbenchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudbenchTaskResponse{}
	_body, _err := client.DescribeCloudbenchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request DescribeCloudbenchTaskConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeCloudbenchTaskConfigResponse
 */
func (client *Client) DescribeCloudbenchTaskConfigWithOptions(request *DescribeCloudbenchTaskConfigRequest, runtime *util.RuntimeOptions) (_result *DescribeCloudbenchTaskConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeCloudbenchTaskConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeCloudbenchTaskConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request DescribeCloudbenchTaskConfigRequest
 * @return DescribeCloudbenchTaskConfigResponse
 */
func (client *Client) DescribeCloudbenchTaskConfig(request *DescribeCloudbenchTaskConfigRequest) (_result *DescribeCloudbenchTaskConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeCloudbenchTaskConfigResponse{}
	_body, _err := client.DescribeCloudbenchTaskConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is applicable to the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB for Redis
 *
 * @param request DescribeDiagnosticReportListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeDiagnosticReportListResponse
 */
func (client *Client) DescribeDiagnosticReportListWithOptions(request *DescribeDiagnosticReportListRequest, runtime *util.RuntimeOptions) (_result *DescribeDiagnosticReportListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DBInstanceId)) {
		query["DBInstanceId"] = request.DBInstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeDiagnosticReportList"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeDiagnosticReportListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is applicable to the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB for Redis
 *
 * @param request DescribeDiagnosticReportListRequest
 * @return DescribeDiagnosticReportListResponse
 */
func (client *Client) DescribeDiagnosticReportList(request *DescribeDiagnosticReportListRequest) (_result *DescribeDiagnosticReportListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeDiagnosticReportListResponse{}
	_body, _err := client.DescribeDiagnosticReportListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation sorts list, hash, set, and zset keys based on the number of elements contained in these keys. The top three keys that contain the most elements are considered large keys. If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
 * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is available only for ApsaraDB for Redis instances that meet the following requirements:
 *     *   The instance is a Community Edition instance that uses a major version of 5.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
 *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
 * >  For information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](~~129381~~) and [DescribeEngineVersion](~~95268~~).
 *
 * @param request DescribeHotBigKeysRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHotBigKeysResponse
 */
func (client *Client) DescribeHotBigKeysWithOptions(request *DescribeHotBigKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeHotBigKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHotBigKeys"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHotBigKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation sorts list, hash, set, and zset keys based on the number of elements contained in these keys. The top three keys that contain the most elements are considered large keys. If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
 * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is available only for ApsaraDB for Redis instances that meet the following requirements:
 *     *   The instance is a Community Edition instance that uses a major version of 5.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
 *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
 * >  For information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](~~129381~~) and [DescribeEngineVersion](~~95268~~).
 *
 * @param request DescribeHotBigKeysRequest
 * @return DescribeHotBigKeysResponse
 */
func (client *Client) DescribeHotBigKeys(request *DescribeHotBigKeysRequest) (_result *DescribeHotBigKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHotBigKeysResponse{}
	_body, _err := client.DescribeHotBigKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis instances that meet the following requirements:
 *     *   The ApsaraDB for Redis instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
 *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
 * >  For more information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](~~129381~~) and [DescribeEngineVersion](~~95268~~).
 *
 * @param request DescribeHotKeysRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeHotKeysResponse
 */
func (client *Client) DescribeHotKeysWithOptions(request *DescribeHotKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeHotKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeHotKeys"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeHotKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis instances that meet the following requirements:
 *     *   The ApsaraDB for Redis instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
 *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
 * >  For more information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](~~129381~~) and [DescribeEngineVersion](~~95268~~).
 *
 * @param request DescribeHotKeysRequest
 * @return DescribeHotKeysResponse
 */
func (client *Client) DescribeHotKeys(request *DescribeHotKeysRequest) (_result *DescribeHotKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeHotKeysResponse{}
	_body, _err := client.DescribeHotKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   For more information about database instances that support DAS Professional Edition, see [Overview](~~190912~~).
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request DescribeInstanceDasProRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeInstanceDasProResponse
 */
func (client *Client) DescribeInstanceDasProWithOptions(request *DescribeInstanceDasProRequest, runtime *util.RuntimeOptions) (_result *DescribeInstanceDasProResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeInstanceDasPro"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeInstanceDasProResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   For more information about database instances that support DAS Professional Edition, see [Overview](~~190912~~).
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request DescribeInstanceDasProRequest
 * @return DescribeInstanceDasProResponse
 */
func (client *Client) DescribeInstanceDasPro(request *DescribeInstanceDasProRequest) (_result *DescribeInstanceDasProResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeInstanceDasProResponse{}
	_body, _err := client.DescribeInstanceDasProWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The list, hash, set, and zset keys are sorted based on the number of elements in these keys. The top three keys that have the most elements are considered large keys.
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
 * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
 *     *   The instance is ApsaraDB for Redis Community Edition instances that use a major version of 5.0 or later or a performance-enhanced instance of the ApsaraDB for Redis Enhanced Edition (Tair).
 *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
 * >  For information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](~~129381~~) and [DescribeEngineVersion](~~95268~~).
 *
 * @param request DescribeTopBigKeysRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTopBigKeysResponse
 */
func (client *Client) DescribeTopBigKeysWithOptions(request *DescribeTopBigKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeTopBigKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTopBigKeys"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTopBigKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The list, hash, set, and zset keys are sorted based on the number of elements in these keys. The top three keys that have the most elements are considered large keys.
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
 * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
 *     *   The instance is ApsaraDB for Redis Community Edition instances that use a major version of 5.0 or later or a performance-enhanced instance of the ApsaraDB for Redis Enhanced Edition (Tair).
 *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
 * >  For information about how to query and update the minor version of an instance, see [ModifyInstanceMinorVersion](~~129381~~) and [DescribeEngineVersion](~~95268~~).
 *
 * @param request DescribeTopBigKeysRequest
 * @return DescribeTopBigKeysResponse
 */
func (client *Client) DescribeTopBigKeys(request *DescribeTopBigKeysRequest) (_result *DescribeTopBigKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTopBigKeysResponse{}
	_body, _err := client.DescribeTopBigKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
 * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
 *     *   The instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
 *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
 * >  For information about how to query and update the minor version of an instance, see [DescribeEngineVersion](~~95268~~) and [ModifyInstanceMinorVersion](~~129381~~).
 *
 * @param request DescribeTopHotKeysRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DescribeTopHotKeysResponse
 */
func (client *Client) DescribeTopHotKeysWithOptions(request *DescribeTopHotKeysRequest, runtime *util.RuntimeOptions) (_result *DescribeTopHotKeysResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DescribeTopHotKeys"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DescribeTopHotKeysResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * If the number of queries per second (QPS) of a key is greater than 3,000, the key is considered a hot key.
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than 4.3.3. We recommend that you use the latest version.
 * *   The version of Database Autonomy Service (DAS) SDK must be 1.0.2 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is available only for an ApsaraDB for Redis instance of one of the following versions:
 *     *   The instance is a Community Edition instance that uses a major version of 4.0 or later or a performance-enhanced instance of the Enhanced Edition (Tair).
 *     *   The ApsaraDB for Redis instance is updated to the latest minor version.
 * >  For information about how to query and update the minor version of an instance, see [DescribeEngineVersion](~~95268~~) and [ModifyInstanceMinorVersion](~~129381~~).
 *
 * @param request DescribeTopHotKeysRequest
 * @return DescribeTopHotKeysResponse
 */
func (client *Client) DescribeTopHotKeys(request *DescribeTopHotKeysRequest) (_result *DescribeTopHotKeysResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DescribeTopHotKeysResponse{}
	_body, _err := client.DescribeTopHotKeysWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request DisableAllSqlConcurrencyControlRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableAllSqlConcurrencyControlRulesResponse
 */
func (client *Client) DisableAllSqlConcurrencyControlRulesWithOptions(request *DisableAllSqlConcurrencyControlRulesRequest, runtime *util.RuntimeOptions) (_result *DisableAllSqlConcurrencyControlRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableAllSqlConcurrencyControlRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableAllSqlConcurrencyControlRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request DisableAllSqlConcurrencyControlRulesRequest
 * @return DisableAllSqlConcurrencyControlRulesResponse
 */
func (client *Client) DisableAllSqlConcurrencyControlRules(request *DisableAllSqlConcurrencyControlRulesRequest) (_result *DisableAllSqlConcurrencyControlRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableAllSqlConcurrencyControlRulesResponse{}
	_body, _err := client.DisableAllSqlConcurrencyControlRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 *
 * @param request DisableAutoResourceOptimizeRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableAutoResourceOptimizeRulesResponse
 */
func (client *Client) DisableAutoResourceOptimizeRulesWithOptions(request *DisableAutoResourceOptimizeRulesRequest, runtime *util.RuntimeOptions) (_result *DisableAutoResourceOptimizeRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableAutoResourceOptimizeRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableAutoResourceOptimizeRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 *
 * @param request DisableAutoResourceOptimizeRulesRequest
 * @return DisableAutoResourceOptimizeRulesResponse
 */
func (client *Client) DisableAutoResourceOptimizeRules(request *DisableAutoResourceOptimizeRulesRequest) (_result *DisableAutoResourceOptimizeRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableAutoResourceOptimizeRulesResponse{}
	_body, _err := client.DisableAutoResourceOptimizeRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 *
 * @param request DisableAutoThrottleRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableAutoThrottleRulesResponse
 */
func (client *Client) DisableAutoThrottleRulesWithOptions(request *DisableAutoThrottleRulesRequest, runtime *util.RuntimeOptions) (_result *DisableAutoThrottleRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableAutoThrottleRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableAutoThrottleRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 *
 * @param request DisableAutoThrottleRulesRequest
 * @return DisableAutoThrottleRulesResponse
 */
func (client *Client) DisableAutoThrottleRules(request *DisableAutoThrottleRulesRequest) (_result *DisableAutoThrottleRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableAutoThrottleRulesResponse{}
	_body, _err := client.DisableAutoThrottleRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   For information about database instances that support DAS Professional Edition, see [Overview](~~190912~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request DisableDasProRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableDasProResponse
 */
func (client *Client) DisableDasProWithOptions(request *DisableDasProRequest, runtime *util.RuntimeOptions) (_result *DisableDasProResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableDasPro"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableDasProResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   For information about database instances that support DAS Professional Edition, see [Overview](~~190912~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request DisableDasProRequest
 * @return DisableDasProResponse
 */
func (client *Client) DisableDasPro(request *DisableDasProRequest) (_result *DisableDasProResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableDasProResponse{}
	_body, _err := client.DisableDasProWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis instances.
 *
 * @param request DisableInstanceDasConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableInstanceDasConfigResponse
 */
func (client *Client) DisableInstanceDasConfigWithOptions(request *DisableInstanceDasConfigRequest, runtime *util.RuntimeOptions) (_result *DisableInstanceDasConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ScaleType)) {
		query["ScaleType"] = request.ScaleType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableInstanceDasConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableInstanceDasConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation is applicable only to ApsaraDB for Redis instances.
 *
 * @param request DisableInstanceDasConfigRequest
 * @return DisableInstanceDasConfigResponse
 */
func (client *Client) DisableInstanceDasConfig(request *DisableInstanceDasConfigRequest) (_result *DisableInstanceDasConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableInstanceDasConfigResponse{}
	_body, _err := client.DisableInstanceDasConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation is applicable to the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request DisableSqlConcurrencyControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableSqlConcurrencyControlResponse
 */
func (client *Client) DisableSqlConcurrencyControlWithOptions(request *DisableSqlConcurrencyControlRequest, runtime *util.RuntimeOptions) (_result *DisableSqlConcurrencyControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.ItemId)) {
		query["ItemId"] = request.ItemId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("DisableSqlConcurrencyControl"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &DisableSqlConcurrencyControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation is applicable to the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request DisableSqlConcurrencyControlRequest
 * @return DisableSqlConcurrencyControlResponse
 */
func (client *Client) DisableSqlConcurrencyControl(request *DisableSqlConcurrencyControlRequest) (_result *DisableSqlConcurrencyControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &DisableSqlConcurrencyControlResponse{}
	_body, _err := client.DisableSqlConcurrencyControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   For more information about database instances that support DAS Professional Edition, see [Overview](~~190912~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request EnableDasProRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableDasProResponse
 */
func (client *Client) EnableDasProWithOptions(request *EnableDasProRequest, runtime *util.RuntimeOptions) (_result *EnableDasProResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlRetention)) {
		query["SqlRetention"] = request.SqlRetention
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableDasPro"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableDasProResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   For more information about database instances that support DAS Professional Edition, see [Overview](~~190912~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request EnableDasProRequest
 * @return EnableDasProResponse
 */
func (client *Client) EnableDasPro(request *EnableDasProRequest) (_result *EnableDasProResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableDasProResponse{}
	_body, _err := client.EnableDasProWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request EnableSqlConcurrencyControlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableSqlConcurrencyControlResponse
 */
func (client *Client) EnableSqlConcurrencyControlWithOptions(request *EnableSqlConcurrencyControlRequest, runtime *util.RuntimeOptions) (_result *EnableSqlConcurrencyControlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConcurrencyControlTime)) {
		query["ConcurrencyControlTime"] = request.ConcurrencyControlTime
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MaxConcurrency)) {
		query["MaxConcurrency"] = request.MaxConcurrency
	}

	if !tea.BoolValue(util.IsUnset(request.SqlKeywords)) {
		query["SqlKeywords"] = request.SqlKeywords
	}

	if !tea.BoolValue(util.IsUnset(request.SqlType)) {
		query["SqlType"] = request.SqlType
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("EnableSqlConcurrencyControl"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &EnableSqlConcurrencyControlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request EnableSqlConcurrencyControlRequest
 * @return EnableSqlConcurrencyControlResponse
 */
func (client *Client) EnableSqlConcurrencyControl(request *EnableSqlConcurrencyControlRequest) (_result *EnableSqlConcurrencyControlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &EnableSqlConcurrencyControlResponse{}
	_body, _err := client.EnableSqlConcurrencyControlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not immediately returned. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which DAS Professional Edition is enabled. For more information, see [Purchase DAS Professional Edition](~~163298~~).
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetAsyncErrorRequestListByCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAsyncErrorRequestListByCodeResponse
 */
func (client *Client) GetAsyncErrorRequestListByCodeWithOptions(request *GetAsyncErrorRequestListByCodeRequest, runtime *util.RuntimeOptions) (_result *GetAsyncErrorRequestListByCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.ErrorCode)) {
		query["ErrorCode"] = request.ErrorCode
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAsyncErrorRequestListByCode"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAsyncErrorRequestListByCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not immediately returned. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which DAS Professional Edition is enabled. For more information, see [Purchase DAS Professional Edition](~~163298~~).
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetAsyncErrorRequestListByCodeRequest
 * @return GetAsyncErrorRequestListByCodeResponse
 */
func (client *Client) GetAsyncErrorRequestListByCode(request *GetAsyncErrorRequestListByCodeRequest) (_result *GetAsyncErrorRequestListByCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAsyncErrorRequestListByCodeResponse{}
	_body, _err := client.GetAsyncErrorRequestListByCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Professional Edition is enabled. For more information, see [Purchase DAS Professional Edition](~~163298~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetAsyncErrorRequestStatByCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAsyncErrorRequestStatByCodeResponse
 */
func (client *Client) GetAsyncErrorRequestStatByCodeWithOptions(request *GetAsyncErrorRequestStatByCodeRequest, runtime *util.RuntimeOptions) (_result *GetAsyncErrorRequestStatByCodeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAsyncErrorRequestStatByCode"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAsyncErrorRequestStatByCodeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Professional Edition is enabled. For more information, see [Purchase DAS Professional Edition](~~163298~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetAsyncErrorRequestStatByCodeRequest
 * @return GetAsyncErrorRequestStatByCodeResponse
 */
func (client *Client) GetAsyncErrorRequestStatByCode(request *GetAsyncErrorRequestStatByCodeRequest) (_result *GetAsyncErrorRequestStatByCodeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAsyncErrorRequestStatByCodeResponse{}
	_body, _err := client.GetAsyncErrorRequestStatByCodeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Professional Edition is enabled. For more information, see [Purchase DAS Professional Edition](~~163298~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetAsyncErrorRequestStatResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAsyncErrorRequestStatResultResponse
 */
func (client *Client) GetAsyncErrorRequestStatResultWithOptions(request *GetAsyncErrorRequestStatResultRequest, runtime *util.RuntimeOptions) (_result *GetAsyncErrorRequestStatResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlIdList)) {
		query["SqlIdList"] = request.SqlIdList
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAsyncErrorRequestStatResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAsyncErrorRequestStatResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not returned immediately. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * *   This API operation supports only ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Professional Edition is enabled. For more information, see [Purchase DAS Professional Edition](~~163298~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetAsyncErrorRequestStatResultRequest
 * @return GetAsyncErrorRequestStatResultResponse
 */
func (client *Client) GetAsyncErrorRequestStatResult(request *GetAsyncErrorRequestStatResultRequest) (_result *GetAsyncErrorRequestStatResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAsyncErrorRequestStatResultResponse{}
	_body, _err := client.GetAsyncErrorRequestStatResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   The database instance for which you want to query automatic fragment recycling rules is an ApsaraDB RDS for MySQL High-availability Edition instance.
 * *   The database instance has four or more cores, and **innodb_file_per_table** is set to **ON**.
 *
 * @param request GetAutoResourceOptimizeRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAutoResourceOptimizeRulesResponse
 */
func (client *Client) GetAutoResourceOptimizeRulesWithOptions(request *GetAutoResourceOptimizeRulesRequest, runtime *util.RuntimeOptions) (_result *GetAutoResourceOptimizeRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutoResourceOptimizeRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAutoResourceOptimizeRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   The database instance for which you want to query automatic fragment recycling rules is an ApsaraDB RDS for MySQL High-availability Edition instance.
 * *   The database instance has four or more cores, and **innodb_file_per_table** is set to **ON**.
 *
 * @param request GetAutoResourceOptimizeRulesRequest
 * @return GetAutoResourceOptimizeRulesResponse
 */
func (client *Client) GetAutoResourceOptimizeRules(request *GetAutoResourceOptimizeRulesRequest) (_result *GetAutoResourceOptimizeRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutoResourceOptimizeRulesResponse{}
	_body, _err := client.GetAutoResourceOptimizeRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   The database instance that you want to manage is of one of the following types:
 *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
 *     *   PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0, or PolarDB for MySQL X-Engine Edition that runs MySQL 8.0.
 *
 * @param request GetAutoThrottleRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAutoThrottleRulesResponse
 */
func (client *Client) GetAutoThrottleRulesWithOptions(request *GetAutoThrottleRulesRequest, runtime *util.RuntimeOptions) (_result *GetAutoThrottleRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutoThrottleRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAutoThrottleRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   The database instance that you want to manage is of one of the following types:
 *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0
 *     *   PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0, or PolarDB for MySQL X-Engine Edition that runs MySQL 8.0.
 *
 * @param request GetAutoThrottleRulesRequest
 * @return GetAutoThrottleRulesResponse
 */
func (client *Client) GetAutoThrottleRules(request *GetAutoThrottleRulesRequest) (_result *GetAutoThrottleRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutoThrottleRulesResponse{}
	_body, _err := client.GetAutoThrottleRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
 * >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](~~152139~~).
 *
 * @param request GetAutonomousNotifyEventContentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAutonomousNotifyEventContentResponse
 */
func (client *Client) GetAutonomousNotifyEventContentWithOptions(request *GetAutonomousNotifyEventContentRequest, runtime *util.RuntimeOptions) (_result *GetAutonomousNotifyEventContentResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SpanId)) {
		query["SpanId"] = request.SpanId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutonomousNotifyEventContent"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAutonomousNotifyEventContentResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
 * >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](~~152139~~).
 *
 * @param request GetAutonomousNotifyEventContentRequest
 * @return GetAutonomousNotifyEventContentResponse
 */
func (client *Client) GetAutonomousNotifyEventContent(request *GetAutonomousNotifyEventContentRequest) (_result *GetAutonomousNotifyEventContentResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutonomousNotifyEventContentResponse{}
	_body, _err := client.GetAutonomousNotifyEventContentWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
 * >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](~~152139~~).
 *
 * @param request GetAutonomousNotifyEventsInRangeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAutonomousNotifyEventsInRangeResponse
 */
func (client *Client) GetAutonomousNotifyEventsInRangeWithOptions(request *GetAutonomousNotifyEventsInRangeRequest, runtime *util.RuntimeOptions) (_result *GetAutonomousNotifyEventsInRangeResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.EventContext)) {
		query["EventContext"] = request.EventContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MinLevel)) {
		query["MinLevel"] = request.MinLevel
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PageOffset)) {
		query["PageOffset"] = request.PageOffset
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetAutonomousNotifyEventsInRange"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetAutonomousNotifyEventsInRangeResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   After your instance is connected to DAS, notification events such as snapshot capture are triggered if DAS detects changes to database monitoring metrics during anomaly detection.
 * >  You can query the details of notification events only if the autonomy center is enabled. For more information, see [Autonomy center](~~152139~~).
 *
 * @param request GetAutonomousNotifyEventsInRangeRequest
 * @return GetAutonomousNotifyEventsInRangeResponse
 */
func (client *Client) GetAutonomousNotifyEventsInRange(request *GetAutonomousNotifyEventsInRangeRequest) (_result *GetAutonomousNotifyEventsInRangeResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetAutonomousNotifyEventsInRangeResponse{}
	_body, _err := client.GetAutonomousNotifyEventsInRangeWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   The database instance that you want to manage is connected to DAS.
 *
 * @param request GetDBInstanceConnectivityDiagnosisRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDBInstanceConnectivityDiagnosisResponse
 */
func (client *Client) GetDBInstanceConnectivityDiagnosisWithOptions(request *GetDBInstanceConnectivityDiagnosisRequest, runtime *util.RuntimeOptions) (_result *GetDBInstanceConnectivityDiagnosisResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SrcIp)) {
		query["SrcIp"] = request.SrcIp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDBInstanceConnectivityDiagnosis"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDBInstanceConnectivityDiagnosisResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   The database instance that you want to manage is connected to DAS.
 *
 * @param request GetDBInstanceConnectivityDiagnosisRequest
 * @return GetDBInstanceConnectivityDiagnosisResponse
 */
func (client *Client) GetDBInstanceConnectivityDiagnosis(request *GetDBInstanceConnectivityDiagnosisRequest) (_result *GetDBInstanceConnectivityDiagnosisResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDBInstanceConnectivityDiagnosisResponse{}
	_body, _err := client.GetDBInstanceConnectivityDiagnosisWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   For information about databases that are supported, see [Overview](~~190912~~).
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetDasProServiceUsageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDasProServiceUsageResponse
 */
func (client *Client) GetDasProServiceUsageWithOptions(request *GetDasProServiceUsageRequest, runtime *util.RuntimeOptions) (_result *GetDasProServiceUsageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDasProServiceUsage"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDasProServiceUsageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   For information about databases that are supported, see [Overview](~~190912~~).
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetDasProServiceUsageRequest
 * @return GetDasProServiceUsageResponse
 */
func (client *Client) GetDasProServiceUsage(request *GetDasProServiceUsageRequest) (_result *GetDasProServiceUsageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDasProServiceUsageResponse{}
	_body, _err := client.GetDasProServiceUsageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   An ApsaraDB RDS for MySQL database or a PolarDB for MySQL database in the China (Shanghai) region is connected to DAS.
 * *   The new SQL Explorer and Audit feature is enabled for the database instance. For more information, see the [Enable the SQL Explorer and Audit feature](~~92561~~) section of the "Overview" topic.
 * >  You can query only the data that is generated after the new SQL Explorer and Audit feature is enabled. The start time can be up to seven days earlier than the current time. The interval between the start time and the end time cannot exceed 24 hours.
 *
 * @param request GetDasSQLLogHotDataRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDasSQLLogHotDataResponse
 */
func (client *Client) GetDasSQLLogHotDataWithOptions(request *GetDasSQLLogHotDataRequest, runtime *util.RuntimeOptions) (_result *GetDasSQLLogHotDataResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AccountName)) {
		body["AccountName"] = request.AccountName
	}

	if !tea.BoolValue(util.IsUnset(request.ChildDBInstanceIDs)) {
		body["ChildDBInstanceIDs"] = request.ChildDBInstanceIDs
	}

	if !tea.BoolValue(util.IsUnset(request.DBName)) {
		body["DBName"] = request.DBName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		body["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.Fail)) {
		body["Fail"] = request.Fail
	}

	if !tea.BoolValue(util.IsUnset(request.HostAddress)) {
		body["HostAddress"] = request.HostAddress
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.LogicalOperator)) {
		body["LogicalOperator"] = request.LogicalOperator
	}

	if !tea.BoolValue(util.IsUnset(request.MaxLatancy)) {
		body["MaxLatancy"] = request.MaxLatancy
	}

	if !tea.BoolValue(util.IsUnset(request.MaxRecordsPerPage)) {
		body["MaxRecordsPerPage"] = request.MaxRecordsPerPage
	}

	if !tea.BoolValue(util.IsUnset(request.MaxRows)) {
		body["MaxRows"] = request.MaxRows
	}

	if !tea.BoolValue(util.IsUnset(request.MaxScanRows)) {
		body["MaxScanRows"] = request.MaxScanRows
	}

	if !tea.BoolValue(util.IsUnset(request.MaxSpillCnt)) {
		body["MaxSpillCnt"] = request.MaxSpillCnt
	}

	if !tea.BoolValue(util.IsUnset(request.MinLatancy)) {
		body["MinLatancy"] = request.MinLatancy
	}

	if !tea.BoolValue(util.IsUnset(request.MinRows)) {
		body["MinRows"] = request.MinRows
	}

	if !tea.BoolValue(util.IsUnset(request.MinScanRows)) {
		body["MinScanRows"] = request.MinScanRows
	}

	if !tea.BoolValue(util.IsUnset(request.MinSpillCnt)) {
		body["MinSpillCnt"] = request.MinSpillCnt
	}

	if !tea.BoolValue(util.IsUnset(request.PageNumbers)) {
		body["PageNumbers"] = request.PageNumbers
	}

	if !tea.BoolValue(util.IsUnset(request.QueryKeyword)) {
		body["QueryKeyword"] = request.QueryKeyword
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		body["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.SortKey)) {
		body["SortKey"] = request.SortKey
	}

	if !tea.BoolValue(util.IsUnset(request.SortMethod)) {
		body["SortMethod"] = request.SortMethod
	}

	if !tea.BoolValue(util.IsUnset(request.SqlType)) {
		body["SqlType"] = request.SqlType
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		body["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.State)) {
		body["State"] = request.State
	}

	if !tea.BoolValue(util.IsUnset(request.ThreadID)) {
		body["ThreadID"] = request.ThreadID
	}

	if !tea.BoolValue(util.IsUnset(request.TraceId)) {
		body["TraceId"] = request.TraceId
	}

	if !tea.BoolValue(util.IsUnset(request.TransactionId)) {
		body["TransactionId"] = request.TransactionId
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetDasSQLLogHotData"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetDasSQLLogHotDataResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   An ApsaraDB RDS for MySQL database or a PolarDB for MySQL database in the China (Shanghai) region is connected to DAS.
 * *   The new SQL Explorer and Audit feature is enabled for the database instance. For more information, see the [Enable the SQL Explorer and Audit feature](~~92561~~) section of the "Overview" topic.
 * >  You can query only the data that is generated after the new SQL Explorer and Audit feature is enabled. The start time can be up to seven days earlier than the current time. The interval between the start time and the end time cannot exceed 24 hours.
 *
 * @param request GetDasSQLLogHotDataRequest
 * @return GetDasSQLLogHotDataResponse
 */
func (client *Client) GetDasSQLLogHotData(request *GetDasSQLLogHotDataRequest) (_result *GetDasSQLLogHotDataResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetDasSQLLogHotDataResponse{}
	_body, _err := client.GetDasSQLLogHotDataWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetEndpointSwitchTaskWithOptions(request *GetEndpointSwitchTaskRequest, runtime *util.RuntimeOptions) (_result *GetEndpointSwitchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.AccessKey)) {
		query["accessKey"] = request.AccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAuth)) {
		query["skipAuth"] = request.SkipAuth
	}

	if !tea.BoolValue(util.IsUnset(request.Timestamp)) {
		query["timestamp"] = request.Timestamp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEndpointSwitchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEndpointSwitchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetEndpointSwitchTask(request *GetEndpointSwitchTaskRequest) (_result *GetEndpointSwitchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEndpointSwitchTaskResponse{}
	_body, _err := client.GetEndpointSwitchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  The complete query results are not immediately returned after an asynchronous request is sent. If the value of **isFinish** is **false** in the response, wait for 1 second and send the request again. The complete query results are returned until the value of **isFinish** is **true**.
 * *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Professional Edition is enabled. For more information, see [Purchase DAS Professional Edition](~~163298~~).
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetErrorRequestSampleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetErrorRequestSampleResponse
 */
func (client *Client) GetErrorRequestSampleWithOptions(request *GetErrorRequestSampleRequest, runtime *util.RuntimeOptions) (_result *GetErrorRequestSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		query["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetErrorRequestSample"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetErrorRequestSampleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  The complete query results are not immediately returned after an asynchronous request is sent. If the value of **isFinish** is **false** in the response, wait for 1 second and send the request again. The complete query results are returned until the value of **isFinish** is **true**.
 * *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters for which Database Autonomy Service (DAS) Professional Edition is enabled. For more information, see [Purchase DAS Professional Edition](~~163298~~).
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetErrorRequestSampleRequest
 * @return GetErrorRequestSampleResponse
 */
func (client *Client) GetErrorRequestSample(request *GetErrorRequestSampleRequest) (_result *GetErrorRequestSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetErrorRequestSampleResponse{}
	_body, _err := client.GetErrorRequestSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   The database instance that you want to manage is connected to DAS.
 *
 * @param request GetEventSubscriptionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEventSubscriptionResponse
 */
func (client *Client) GetEventSubscriptionWithOptions(request *GetEventSubscriptionRequest, runtime *util.RuntimeOptions) (_result *GetEventSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetEventSubscription"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetEventSubscriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   The database instance that you want to manage is connected to DAS.
 *
 * @param request GetEventSubscriptionRequest
 * @return GetEventSubscriptionResponse
 */
func (client *Client) GetEventSubscription(request *GetEventSubscriptionRequest) (_result *GetEventSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetEventSubscriptionResponse{}
	_body, _err := client.GetEventSubscriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](~~204096~~).
 * *   For information about database instances that support SQL Explorer, see [Overview](~~190912~~).
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetFullRequestOriginStatByInstanceIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFullRequestOriginStatByInstanceIdResponse
 */
func (client *Client) GetFullRequestOriginStatByInstanceIdWithOptions(request *GetFullRequestOriginStatByInstanceIdRequest, runtime *util.RuntimeOptions) (_result *GetFullRequestOriginStatByInstanceIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Asc)) {
		query["Asc"] = request.Asc
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.SqlType)) {
		query["SqlType"] = request.SqlType
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFullRequestOriginStatByInstanceId"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFullRequestOriginStatByInstanceIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](~~204096~~).
 * *   For information about database instances that support SQL Explorer, see [Overview](~~190912~~).
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetFullRequestOriginStatByInstanceIdRequest
 * @return GetFullRequestOriginStatByInstanceIdResponse
 */
func (client *Client) GetFullRequestOriginStatByInstanceId(request *GetFullRequestOriginStatByInstanceIdRequest) (_result *GetFullRequestOriginStatByInstanceIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFullRequestOriginStatByInstanceIdResponse{}
	_body, _err := client.GetFullRequestOriginStatByInstanceIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](~~204096~~).
 * *   For more information about the database engines that support SQL Explorer, see [SQL Explorer](~~204096~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetFullRequestSampleByInstanceIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFullRequestSampleByInstanceIdResponse
 */
func (client *Client) GetFullRequestSampleByInstanceIdWithOptions(request *GetFullRequestSampleByInstanceIdRequest, runtime *util.RuntimeOptions) (_result *GetFullRequestSampleByInstanceIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.End)) {
		body["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		body["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		body["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
		Body:  openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFullRequestSampleByInstanceId"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFullRequestSampleByInstanceIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](~~204096~~).
 * *   For more information about the database engines that support SQL Explorer, see [SQL Explorer](~~204096~~).
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetFullRequestSampleByInstanceIdRequest
 * @return GetFullRequestSampleByInstanceIdResponse
 */
func (client *Client) GetFullRequestSampleByInstanceId(request *GetFullRequestSampleByInstanceIdRequest) (_result *GetFullRequestSampleByInstanceIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFullRequestSampleByInstanceIdResponse{}
	_body, _err := client.GetFullRequestSampleByInstanceIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  The complete query results are not returned immediately after an asynchronous request is sent. If the value of isFinish is **false** in the response, wait for 1 second and send the request again. The complete query results are returned until the value of isFinish is **true**.
 * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](~~204096~~).
 * *   For more information about database instances that support SQL Explorer, see [Overview](~~190912~~).
 * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 *
 * @param request GetFullRequestStatResultByInstanceIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFullRequestStatResultByInstanceIdResponse
 */
func (client *Client) GetFullRequestStatResultByInstanceIdWithOptions(request *GetFullRequestStatResultByInstanceIdRequest, runtime *util.RuntimeOptions) (_result *GetFullRequestStatResultByInstanceIdResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Asc)) {
		query["Asc"] = request.Asc
	}

	if !tea.BoolValue(util.IsUnset(request.DbName)) {
		query["DbName"] = request.DbName
	}

	if !tea.BoolValue(util.IsUnset(request.End)) {
		query["End"] = request.End
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Keyword)) {
		query["Keyword"] = request.Keyword
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		query["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.OriginHost)) {
		query["OriginHost"] = request.OriginHost
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		query["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlType)) {
		query["SqlType"] = request.SqlType
	}

	if !tea.BoolValue(util.IsUnset(request.Start)) {
		query["Start"] = request.Start
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetFullRequestStatResultByInstanceId"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetFullRequestStatResultByInstanceIdResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  The complete query results are not returned immediately after an asynchronous request is sent. If the value of isFinish is **false** in the response, wait for 1 second and send the request again. The complete query results are returned until the value of isFinish is **true**.
 * The SQL Explorer feature allows you to check the health status of SQL statements and troubleshoot performance issues. For more information, see [SQL Explorer](~~204096~~).
 * *   For more information about database instances that support SQL Explorer, see [Overview](~~190912~~).
 * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 *
 * @param request GetFullRequestStatResultByInstanceIdRequest
 * @return GetFullRequestStatResultByInstanceIdResponse
 */
func (client *Client) GetFullRequestStatResultByInstanceId(request *GetFullRequestStatResultByInstanceIdRequest) (_result *GetFullRequestStatResultByInstanceIdResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetFullRequestStatResultByInstanceIdResponse{}
	_body, _err := client.GetFullRequestStatResultByInstanceIdWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetHDMAliyunResourceSyncResultWithOptions(request *GetHDMAliyunResourceSyncResultRequest, runtime *util.RuntimeOptions) (_result *GetHDMAliyunResourceSyncResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.AccessKey)) {
		query["accessKey"] = request.AccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAuth)) {
		query["skipAuth"] = request.SkipAuth
	}

	if !tea.BoolValue(util.IsUnset(request.Timestamp)) {
		query["timestamp"] = request.Timestamp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHDMAliyunResourceSyncResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHDMAliyunResourceSyncResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetHDMAliyunResourceSyncResult(request *GetHDMAliyunResourceSyncResultRequest) (_result *GetHDMAliyunResourceSyncResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHDMAliyunResourceSyncResultResponse{}
	_body, _err := client.GetHDMAliyunResourceSyncResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) GetHDMLastAliyunResourceSyncResultWithOptions(request *GetHDMLastAliyunResourceSyncResultRequest, runtime *util.RuntimeOptions) (_result *GetHDMLastAliyunResourceSyncResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.AccessKey)) {
		query["accessKey"] = request.AccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAuth)) {
		query["skipAuth"] = request.SkipAuth
	}

	if !tea.BoolValue(util.IsUnset(request.Timestamp)) {
		query["timestamp"] = request.Timestamp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetHDMLastAliyunResourceSyncResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetHDMLastAliyunResourceSyncResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) GetHDMLastAliyunResourceSyncResult(request *GetHDMLastAliyunResourceSyncResultRequest) (_result *GetHDMLastAliyunResourceSyncResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetHDMLastAliyunResourceSyncResultResponse{}
	_body, _err := client.GetHDMLastAliyunResourceSyncResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the inspection and scoring feature. This feature allows you to inspect and score the health status of your instance on a regular basis. This helps you obtain information about the status of your databases. For more information, see [Inspection and scoring](~~205659~~).
 * Before you call this operation, take note of the following items:
 * *   This operation is applicable only to ApsaraDB RDS for MySQL databases, self-managed MySQL databases hosted on Elastic Compute Service (ECS) instances, self-managed MySQL databases in data centers, ApsaraDB for Redis databases, and PolarDB for MySQL databases.
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
 * *   The version of DAS SDK must be V1.0.3 or later.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetInstanceInspectionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceInspectionsResponse
 */
func (client *Client) GetInstanceInspectionsWithOptions(request *GetInstanceInspectionsRequest, runtime *util.RuntimeOptions) (_result *GetInstanceInspectionsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceArea)) {
		query["InstanceArea"] = request.InstanceArea
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceGroupId)) {
		query["ResourceGroupId"] = request.ResourceGroupId
	}

	if !tea.BoolValue(util.IsUnset(request.SearchMap)) {
		query["SearchMap"] = request.SearchMap
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceInspections"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceInspectionsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the inspection and scoring feature. This feature allows you to inspect and score the health status of your instance on a regular basis. This helps you obtain information about the status of your databases. For more information, see [Inspection and scoring](~~205659~~).
 * Before you call this operation, take note of the following items:
 * *   This operation is applicable only to ApsaraDB RDS for MySQL databases, self-managed MySQL databases hosted on Elastic Compute Service (ECS) instances, self-managed MySQL databases in data centers, ApsaraDB for Redis databases, and PolarDB for MySQL databases.
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
 * *   The version of DAS SDK must be V1.0.3 or later.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetInstanceInspectionsRequest
 * @return GetInstanceInspectionsResponse
 */
func (client *Client) GetInstanceInspections(request *GetInstanceInspectionsRequest) (_result *GetInstanceInspectionsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceInspectionsResponse{}
	_body, _err := client.GetInstanceInspectionsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   The database engine is ApsaraDB RDS for MySQL or PolarDB for MySQL.
 *
 * @param request GetInstanceSqlOptimizeStatisticRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetInstanceSqlOptimizeStatisticResponse
 */
func (client *Client) GetInstanceSqlOptimizeStatisticWithOptions(request *GetInstanceSqlOptimizeStatisticRequest, runtime *util.RuntimeOptions) (_result *GetInstanceSqlOptimizeStatisticResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.FilterEnable)) {
		query["FilterEnable"] = request.FilterEnable
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	if !tea.BoolValue(util.IsUnset(request.Threshold)) {
		query["Threshold"] = request.Threshold
	}

	if !tea.BoolValue(util.IsUnset(request.UseMerging)) {
		query["UseMerging"] = request.UseMerging
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetInstanceSqlOptimizeStatistic"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetInstanceSqlOptimizeStatisticResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   The database engine is ApsaraDB RDS for MySQL or PolarDB for MySQL.
 *
 * @param request GetInstanceSqlOptimizeStatisticRequest
 * @return GetInstanceSqlOptimizeStatisticResponse
 */
func (client *Client) GetInstanceSqlOptimizeStatistic(request *GetInstanceSqlOptimizeStatisticRequest) (_result *GetInstanceSqlOptimizeStatisticResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetInstanceSqlOptimizeStatisticResponse{}
	_body, _err := client.GetInstanceSqlOptimizeStatisticWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetKillInstanceSessionTaskResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetKillInstanceSessionTaskResultResponse
 */
func (client *Client) GetKillInstanceSessionTaskResultWithOptions(request *GetKillInstanceSessionTaskResultRequest, runtime *util.RuntimeOptions) (_result *GetKillInstanceSessionTaskResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetKillInstanceSessionTaskResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetKillInstanceSessionTaskResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is applicable only to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetKillInstanceSessionTaskResultRequest
 * @return GetKillInstanceSessionTaskResultResponse
 */
func (client *Client) GetKillInstanceSessionTaskResult(request *GetKillInstanceSessionTaskResultRequest) (_result *GetKillInstanceSessionTaskResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetKillInstanceSessionTaskResultResponse{}
	_body, _err := client.GetKillInstanceSessionTaskResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is applicable only to MongoDB instances.
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region to cn-shanghai.
 *
 * @param request GetMongoDBCurrentOpRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMongoDBCurrentOpResponse
 */
func (client *Client) GetMongoDBCurrentOpWithOptions(request *GetMongoDBCurrentOpRequest, runtime *util.RuntimeOptions) (_result *GetMongoDBCurrentOpResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.FilterDoc)) {
		query["FilterDoc"] = request.FilterDoc
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Role)) {
		query["Role"] = request.Role
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMongoDBCurrentOp"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMongoDBCurrentOpResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is applicable only to MongoDB instances.
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region to cn-shanghai.
 *
 * @param request GetMongoDBCurrentOpRequest
 * @return GetMongoDBCurrentOpResponse
 */
func (client *Client) GetMongoDBCurrentOp(request *GetMongoDBCurrentOpRequest) (_result *GetMongoDBCurrentOpResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMongoDBCurrentOpResponse{}
	_body, _err := client.GetMongoDBCurrentOpWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  Asynchronous calls do not immediately return the complete results. You must use the value of **ResultId** returned in the response to re-initiate the call. The complete results are returned only if the value of **IsFinish** is **true**.
 * *   This operation is applicable only to ApsaraDB RDS for MySQL, PolarDB for MySQL, and PolarDB-X 2.0 instances.
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetMySQLAllSessionAsyncRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMySQLAllSessionAsyncResponse
 */
func (client *Client) GetMySQLAllSessionAsyncWithOptions(request *GetMySQLAllSessionAsyncRequest, runtime *util.RuntimeOptions) (_result *GetMySQLAllSessionAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.ResultId)) {
		query["ResultId"] = request.ResultId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetMySQLAllSessionAsync"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetMySQLAllSessionAsyncResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  Asynchronous calls do not immediately return the complete results. You must use the value of **ResultId** returned in the response to re-initiate the call. The complete results are returned only if the value of **IsFinish** is **true**.
 * *   This operation is applicable only to ApsaraDB RDS for MySQL, PolarDB for MySQL, and PolarDB-X 2.0 instances.
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetMySQLAllSessionAsyncRequest
 * @return GetMySQLAllSessionAsyncResponse
 */
func (client *Client) GetMySQLAllSessionAsync(request *GetMySQLAllSessionAsyncRequest) (_result *GetMySQLAllSessionAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetMySQLAllSessionAsyncResponse{}
	_body, _err := client.GetMySQLAllSessionAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * We recommend that you do not call this operation. The data is returned in a special format and is complex to parse. You can use the [heatmap](~~470302~~) feature of Database Autonomy Service (DAS) to query the data.
 *
 * @param request GetPartitionsHeatmapRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPartitionsHeatmapResponse
 */
func (client *Client) GetPartitionsHeatmapWithOptions(request *GetPartitionsHeatmapRequest, runtime *util.RuntimeOptions) (_result *GetPartitionsHeatmapResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.TimeRange)) {
		query["TimeRange"] = request.TimeRange
	}

	if !tea.BoolValue(util.IsUnset(request.Type)) {
		query["Type"] = request.Type
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPartitionsHeatmap"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPartitionsHeatmapResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * We recommend that you do not call this operation. The data is returned in a special format and is complex to parse. You can use the [heatmap](~~470302~~) feature of Database Autonomy Service (DAS) to query the data.
 *
 * @param request GetPartitionsHeatmapRequest
 * @return GetPartitionsHeatmapResponse
 */
func (client *Client) GetPartitionsHeatmap(request *GetPartitionsHeatmapRequest) (_result *GetPartitionsHeatmapResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPartitionsHeatmapResponse{}
	_body, _err := client.GetPartitionsHeatmapWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
 * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](~~469117~~).
 *
 * @param request GetPfsMetricTrendsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPfsMetricTrendsResponse
 */
func (client *Client) GetPfsMetricTrendsWithOptions(request *GetPfsMetricTrendsRequest, runtime *util.RuntimeOptions) (_result *GetPfsMetricTrendsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Metric)) {
		body["Metric"] = request.Metric
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPfsMetricTrends"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPfsMetricTrendsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
 * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](~~469117~~).
 *
 * @param request GetPfsMetricTrendsRequest
 * @return GetPfsMetricTrendsResponse
 */
func (client *Client) GetPfsMetricTrends(request *GetPfsMetricTrendsRequest) (_result *GetPfsMetricTrendsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPfsMetricTrendsResponse{}
	_body, _err := client.GetPfsMetricTrendsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
 * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](~~469117~~).
 *
 * @param request GetPfsSqlSampleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPfsSqlSampleResponse
 */
func (client *Client) GetPfsSqlSampleWithOptions(request *GetPfsSqlSampleRequest, runtime *util.RuntimeOptions) (_result *GetPfsSqlSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPfsSqlSample"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPfsSqlSampleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
 * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](~~469117~~).
 *
 * @param request GetPfsSqlSampleRequest
 * @return GetPfsSqlSampleResponse
 */
func (client *Client) GetPfsSqlSample(request *GetPfsSqlSampleRequest) (_result *GetPfsSqlSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPfsSqlSampleResponse{}
	_body, _err := client.GetPfsSqlSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
 * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](~~469117~~).
 *
 * @param request GetPfsSqlSummariesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPfsSqlSummariesResponse
 */
func (client *Client) GetPfsSqlSummariesWithOptions(request *GetPfsSqlSummariesRequest, runtime *util.RuntimeOptions) (_result *GetPfsSqlSummariesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	body := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Asc)) {
		body["Asc"] = request.Asc
	}

	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		body["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		body["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Keywords)) {
		body["Keywords"] = request.Keywords
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		body["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.OrderBy)) {
		body["OrderBy"] = request.OrderBy
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		body["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		body["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		body["SqlId"] = request.SqlId
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		body["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Body: openapiutil.ParseToMap(body),
	}
	params := &openapi.Params{
		Action:      tea.String("GetPfsSqlSummaries"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetPfsSqlSummariesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this API operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   An ApsaraDB RDS for MySQL instance or a PolarDB for MySQL cluster is connected to DAS.
 * *   The new version of the performance insight feature is enabled for the database instance. For more information, see [Performance insight (new version)](~~469117~~).
 *
 * @param request GetPfsSqlSummariesRequest
 * @return GetPfsSqlSummariesResponse
 */
func (client *Client) GetPfsSqlSummaries(request *GetPfsSqlSummariesRequest) (_result *GetPfsSqlSummariesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetPfsSqlSummariesResponse{}
	_body, _err := client.GetPfsSqlSummariesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeDataStatsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeDataStatsResponse
 */
func (client *Client) GetQueryOptimizeDataStatsWithOptions(request *GetQueryOptimizeDataStatsRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeDataStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeDataStats"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeDataStatsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeDataStatsRequest
 * @return GetQueryOptimizeDataStatsResponse
 */
func (client *Client) GetQueryOptimizeDataStats(request *GetQueryOptimizeDataStatsRequest) (_result *GetQueryOptimizeDataStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeDataStatsResponse{}
	_body, _err := client.GetQueryOptimizeDataStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeDataTopRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeDataTopResponse
 */
func (client *Client) GetQueryOptimizeDataTopWithOptions(request *GetQueryOptimizeDataTopRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeDataTopResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeDataTop"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeDataTopResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use an Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeDataTopRequest
 * @return GetQueryOptimizeDataTopResponse
 */
func (client *Client) GetQueryOptimizeDataTop(request *GetQueryOptimizeDataTopRequest) (_result *GetQueryOptimizeDataTopResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeDataTopResponse{}
	_body, _err := client.GetQueryOptimizeDataTopWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeDataTrendRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeDataTrendResponse
 */
func (client *Client) GetQueryOptimizeDataTrendWithOptions(request *GetQueryOptimizeDataTrendRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeDataTrendResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeDataTrend"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeDataTrendResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeDataTrendRequest
 * @return GetQueryOptimizeDataTrendResponse
 */
func (client *Client) GetQueryOptimizeDataTrend(request *GetQueryOptimizeDataTrendRequest) (_result *GetQueryOptimizeDataTrendResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeDataTrendResponse{}
	_body, _err := client.GetQueryOptimizeDataTrendWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeExecErrorSampleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeExecErrorSampleResponse
 */
func (client *Client) GetQueryOptimizeExecErrorSampleWithOptions(request *GetQueryOptimizeExecErrorSampleRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeExecErrorSampleResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeExecErrorSample"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeExecErrorSampleResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeExecErrorSampleRequest
 * @return GetQueryOptimizeExecErrorSampleResponse
 */
func (client *Client) GetQueryOptimizeExecErrorSample(request *GetQueryOptimizeExecErrorSampleRequest) (_result *GetQueryOptimizeExecErrorSampleResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeExecErrorSampleResponse{}
	_body, _err := client.GetQueryOptimizeExecErrorSampleWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeExecErrorStatsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeExecErrorStatsResponse
 */
func (client *Client) GetQueryOptimizeExecErrorStatsWithOptions(request *GetQueryOptimizeExecErrorStatsRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeExecErrorStatsResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeExecErrorStats"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeExecErrorStatsResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeExecErrorStatsRequest
 * @return GetQueryOptimizeExecErrorStatsResponse
 */
func (client *Client) GetQueryOptimizeExecErrorStats(request *GetQueryOptimizeExecErrorStatsRequest) (_result *GetQueryOptimizeExecErrorStatsResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeExecErrorStatsResponse{}
	_body, _err := client.GetQueryOptimizeExecErrorStatsWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeRuleListRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeRuleListResponse
 */
func (client *Client) GetQueryOptimizeRuleListWithOptions(request *GetQueryOptimizeRuleListRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeRuleListResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeRuleList"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeRuleListResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V2.1.8. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V2.1.8 or later.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeRuleListRequest
 * @return GetQueryOptimizeRuleListResponse
 */
func (client *Client) GetQueryOptimizeRuleList(request *GetQueryOptimizeRuleListRequest) (_result *GetQueryOptimizeRuleListResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeRuleListResponse{}
	_body, _err := client.GetQueryOptimizeRuleListWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeShareUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeShareUrlResponse
 */
func (client *Client) GetQueryOptimizeShareUrlWithOptions(request *GetQueryOptimizeShareUrlRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeShareUrlResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeShareUrl"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeShareUrlResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeShareUrlRequest
 * @return GetQueryOptimizeShareUrlResponse
 */
func (client *Client) GetQueryOptimizeShareUrl(request *GetQueryOptimizeShareUrlRequest) (_result *GetQueryOptimizeShareUrlResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeShareUrlResponse{}
	_body, _err := client.GetQueryOptimizeShareUrlWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeSolutionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeSolutionResponse
 */
func (client *Client) GetQueryOptimizeSolutionWithOptions(request *GetQueryOptimizeSolutionRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeSolutionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeSolution"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeSolutionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use an Alibaba Cloud SDK or a Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeSolutionRequest
 * @return GetQueryOptimizeSolutionResponse
 */
func (client *Client) GetQueryOptimizeSolution(request *GetQueryOptimizeSolutionRequest) (_result *GetQueryOptimizeSolutionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeSolutionResponse{}
	_body, _err := client.GetQueryOptimizeSolutionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeTagRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetQueryOptimizeTagResponse
 */
func (client *Client) GetQueryOptimizeTagWithOptions(request *GetQueryOptimizeTagRequest, runtime *util.RuntimeOptions) (_result *GetQueryOptimizeTagResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := openapiutil.Query(util.ToMap(request))
	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetQueryOptimizeTag"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("GET"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetQueryOptimizeTagResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   PolarDB for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *
 * @param request GetQueryOptimizeTagRequest
 * @return GetQueryOptimizeTagResponse
 */
func (client *Client) GetQueryOptimizeTag(request *GetQueryOptimizeTagRequest) (_result *GetQueryOptimizeTagResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetQueryOptimizeTagResponse{}
	_body, _err := client.GetQueryOptimizeTagWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is applicable only to ApsaraDB for Redis instances.
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * >  This operation cannot be used to query sessions generated in direct connection mode on ApsaraDB for Redis cluster instances.
 *
 * @param request GetRedisAllSessionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRedisAllSessionResponse
 */
func (client *Client) GetRedisAllSessionWithOptions(request *GetRedisAllSessionRequest, runtime *util.RuntimeOptions) (_result *GetRedisAllSessionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRedisAllSession"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRedisAllSessionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is applicable only to ApsaraDB for Redis instances.
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * >  This operation cannot be used to query sessions generated in direct connection mode on ApsaraDB for Redis cluster instances.
 *
 * @param request GetRedisAllSessionRequest
 * @return GetRedisAllSessionResponse
 */
func (client *Client) GetRedisAllSession(request *GetRedisAllSessionRequest) (_result *GetRedisAllSessionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRedisAllSessionResponse{}
	_body, _err := client.GetRedisAllSessionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *     *   ApsaraDB RDS for SQL Server
 *     *   PolarDB for MySQL
 *     *   PolarDB for PostgreSQL (Compatible with Oracle)
 *     *   ApsaraDB for MongoDB
 * >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~).
 *
 * @param request GetRequestDiagnosisPageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRequestDiagnosisPageResponse
 */
func (client *Client) GetRequestDiagnosisPageWithOptions(request *GetRequestDiagnosisPageRequest, runtime *util.RuntimeOptions) (_result *GetRequestDiagnosisPageResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.EndTime)) {
		query["EndTime"] = request.EndTime
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	if !tea.BoolValue(util.IsUnset(request.StartTime)) {
		query["StartTime"] = request.StartTime
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRequestDiagnosisPage"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRequestDiagnosisPageResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call API operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *     *   ApsaraDB RDS for SQL Server
 *     *   PolarDB for MySQL
 *     *   PolarDB for PostgreSQL (Compatible with Oracle)
 *     *   ApsaraDB for MongoDB
 * >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~).
 *
 * @param request GetRequestDiagnosisPageRequest
 * @return GetRequestDiagnosisPageResponse
 */
func (client *Client) GetRequestDiagnosisPage(request *GetRequestDiagnosisPageRequest) (_result *GetRequestDiagnosisPageResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRequestDiagnosisPageResponse{}
	_body, _err := client.GetRequestDiagnosisPageWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *     *   ApsaraDB RDS for SQL Server
 *     *   PolarDB for MySQL
 *     *   PolarDB for PostgreSQL (compatible with Oracle)
 *     *   ApsaraDB for MongoDB
 * >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~).
 *
 * @param request GetRequestDiagnosisResultRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRequestDiagnosisResultResponse
 */
func (client *Client) GetRequestDiagnosisResultWithOptions(request *GetRequestDiagnosisResultRequest, runtime *util.RuntimeOptions) (_result *GetRequestDiagnosisResultResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.MessageId)) {
		query["MessageId"] = request.MessageId
	}

	if !tea.BoolValue(util.IsUnset(request.NodeId)) {
		query["NodeId"] = request.NodeId
	}

	if !tea.BoolValue(util.IsUnset(request.Source)) {
		query["Source"] = request.Source
	}

	if !tea.BoolValue(util.IsUnset(request.SqlId)) {
		query["SqlId"] = request.SqlId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRequestDiagnosisResult"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRequestDiagnosisResultResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL
 *     *   ApsaraDB RDS for PostgreSQL
 *     *   ApsaraDB RDS for SQL Server
 *     *   PolarDB for MySQL
 *     *   PolarDB for PostgreSQL (compatible with Oracle)
 *     *   ApsaraDB for MongoDB
 * >  The minor engine version of the Apsara RDS for PostgreSQL instance must be 20220130 or later. For more information about how to check and update the minor engine version of an ApsaraDB RDS for PostgreSQL instance, see [Update the minor engine version of an ApsaraDB RDS for PostgreSQL instance](~~146895~~).
 *
 * @param request GetRequestDiagnosisResultRequest
 * @return GetRequestDiagnosisResultResponse
 */
func (client *Client) GetRequestDiagnosisResult(request *GetRequestDiagnosisResultRequest) (_result *GetRequestDiagnosisResultResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRequestDiagnosisResultResponse{}
	_body, _err := client.GetRequestDiagnosisResultWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request GetRunningSqlConcurrencyControlRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRunningSqlConcurrencyControlRulesResponse
 */
func (client *Client) GetRunningSqlConcurrencyControlRulesWithOptions(request *GetRunningSqlConcurrencyControlRulesRequest, runtime *util.RuntimeOptions) (_result *GetRunningSqlConcurrencyControlRulesResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetRunningSqlConcurrencyControlRules"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetRunningSqlConcurrencyControlRulesResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request GetRunningSqlConcurrencyControlRulesRequest
 * @return GetRunningSqlConcurrencyControlRulesResponse
 */
func (client *Client) GetRunningSqlConcurrencyControlRules(request *GetRunningSqlConcurrencyControlRulesRequest) (_result *GetRunningSqlConcurrencyControlRulesResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetRunningSqlConcurrencyControlRulesResponse{}
	_body, _err := client.GetRunningSqlConcurrencyControlRulesWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request GetSqlConcurrencyControlKeywordsFromSqlTextRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSqlConcurrencyControlKeywordsFromSqlTextResponse
 */
func (client *Client) GetSqlConcurrencyControlKeywordsFromSqlTextWithOptions(request *GetSqlConcurrencyControlKeywordsFromSqlTextRequest, runtime *util.RuntimeOptions) (_result *GetSqlConcurrencyControlKeywordsFromSqlTextResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.SqlText)) {
		query["SqlText"] = request.SqlText
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSqlConcurrencyControlKeywordsFromSqlText"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSqlConcurrencyControlKeywordsFromSqlTextResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request GetSqlConcurrencyControlKeywordsFromSqlTextRequest
 * @return GetSqlConcurrencyControlKeywordsFromSqlTextResponse
 */
func (client *Client) GetSqlConcurrencyControlKeywordsFromSqlText(request *GetSqlConcurrencyControlKeywordsFromSqlTextRequest) (_result *GetSqlConcurrencyControlKeywordsFromSqlTextResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSqlConcurrencyControlKeywordsFromSqlTextResponse{}
	_body, _err := client.GetSqlConcurrencyControlKeywordsFromSqlTextWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request GetSqlConcurrencyControlRulesHistoryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSqlConcurrencyControlRulesHistoryResponse
 */
func (client *Client) GetSqlConcurrencyControlRulesHistoryWithOptions(request *GetSqlConcurrencyControlRulesHistoryRequest, runtime *util.RuntimeOptions) (_result *GetSqlConcurrencyControlRulesHistoryResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.PageNo)) {
		query["PageNo"] = request.PageNo
	}

	if !tea.BoolValue(util.IsUnset(request.PageSize)) {
		query["PageSize"] = request.PageSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSqlConcurrencyControlRulesHistory"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSqlConcurrencyControlRulesHistoryResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * This operation supports the following database engines:
 * *   ApsaraDB RDS for MySQL
 * *   PolarDB for MySQL
 *
 * @param request GetSqlConcurrencyControlRulesHistoryRequest
 * @return GetSqlConcurrencyControlRulesHistoryResponse
 */
func (client *Client) GetSqlConcurrencyControlRulesHistory(request *GetSqlConcurrencyControlRulesHistoryRequest) (_result *GetSqlConcurrencyControlRulesHistoryResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSqlConcurrencyControlRulesHistoryResponse{}
	_body, _err := client.GetSqlConcurrencyControlRulesHistoryWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * The SQL diagnostics feature provides optimization suggestions for instances based on diagnostics results. You can use the optimization suggestions to optimize instance indexes. For more information, see [Automatic SQL optimization](~~167895~~).
 * >  You can call this operation to query only the optimization suggestions that are automatically generated by the SQL diagnostics feature.
 * Before you call this operation, take note of the following items:
 * *   This operation is applicable to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
 * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetSqlOptimizeAdviceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetSqlOptimizeAdviceResponse
 */
func (client *Client) GetSqlOptimizeAdviceWithOptions(request *GetSqlOptimizeAdviceRequest, runtime *util.RuntimeOptions) (_result *GetSqlOptimizeAdviceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.EndDt)) {
		query["EndDt"] = request.EndDt
	}

	if !tea.BoolValue(util.IsUnset(request.Engine)) {
		query["Engine"] = request.Engine
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.Region)) {
		query["Region"] = request.Region
	}

	if !tea.BoolValue(util.IsUnset(request.StartDt)) {
		query["StartDt"] = request.StartDt
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("GetSqlOptimizeAdvice"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &GetSqlOptimizeAdviceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * The SQL diagnostics feature provides optimization suggestions for instances based on diagnostics results. You can use the optimization suggestions to optimize instance indexes. For more information, see [Automatic SQL optimization](~~167895~~).
 * >  You can call this operation to query only the optimization suggestions that are automatically generated by the SQL diagnostics feature.
 * Before you call this operation, take note of the following items:
 * *   This operation is applicable to ApsaraDB RDS for MySQL instances and PolarDB for MySQL clusters.
 * *   If you use an Alibaba Cloud SDK or DAS SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request GetSqlOptimizeAdviceRequest
 * @return GetSqlOptimizeAdviceResponse
 */
func (client *Client) GetSqlOptimizeAdvice(request *GetSqlOptimizeAdviceRequest) (_result *GetSqlOptimizeAdviceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &GetSqlOptimizeAdviceResponse{}
	_body, _err := client.GetSqlOptimizeAdviceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * *   This operation is applicable only to ApsaraDB for Redis.
 * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request KillInstanceAllSessionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return KillInstanceAllSessionResponse
 */
func (client *Client) KillInstanceAllSessionWithOptions(request *KillInstanceAllSessionRequest, runtime *util.RuntimeOptions) (_result *KillInstanceAllSessionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("KillInstanceAllSession"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &KillInstanceAllSessionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * *   This operation is applicable only to ApsaraDB for Redis.
 * *   If you use Alibaba Cloud SDK, make sure that the aliyun-sdk-core version is later than V4.3.3. We recommend that you use the latest version.
 * *   The version of your Database Autonomy Service (DAS) SDK must be V1.0.2 or later.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request KillInstanceAllSessionRequest
 * @return KillInstanceAllSessionResponse
 */
func (client *Client) KillInstanceAllSession(request *KillInstanceAllSessionRequest) (_result *KillInstanceAllSessionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &KillInstanceAllSessionResponse{}
	_body, _err := client.KillInstanceAllSessionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * You can call this operation to modify the following auto scaling configurations of an instance: **auto scaling for specifications**, **automatic storage expansion**, **automatic bandwidth adjustment**, and **auto scaling for resources**.
 * *   You can modify the configurations of the **auto scaling feature for specifications** for the following types of database instances:
 *     *   PolarDB for MySQL Cluster Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](~~169686~~).
 *     *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or enhanced SSDs (ESSDs). For more information about the feature and the billing rules, see [Automatic performance scaling](~~169686~~).
 * *   You can modify the configurations of the **automatic storage expansion** feature for the following types of database instances:
 *     *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs. For more information about the feature and the billing rules, see [Automatic space expansion](~~173345~~).
 * *   You can modify the configurations of the **automatic bandwidth adjustment** feature for the following types of database instances:
 *     *   ApsaraDB for Redis Classic (Local Disk-based) Edition instances. For more information about the feature and the billing rules, see [Automatic bandwidth adjustment](~~216312~~).
 * *   You can modify the configurations of the **auto scaling feature for resources** for the following types of database instances:
 *     *   General-purpose ApsaraDB RDS for MySQL Enterprise Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](~~169686~~).
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request ModifyAutoScalingConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyAutoScalingConfigResponse
 */
func (client *Client) ModifyAutoScalingConfigWithOptions(request *ModifyAutoScalingConfigRequest, runtime *util.RuntimeOptions) (_result *ModifyAutoScalingConfigResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Bandwidth)) {
		query["Bandwidth"] = request.Bandwidth
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Resource)) {
		query["Resource"] = request.Resource
	}

	if !tea.BoolValue(util.IsUnset(request.Shard)) {
		query["Shard"] = request.Shard
	}

	if !tea.BoolValue(util.IsUnset(request.Spec)) {
		query["Spec"] = request.Spec
	}

	if !tea.BoolValue(util.IsUnset(request.Storage)) {
		query["Storage"] = request.Storage
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("ModifyAutoScalingConfig"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &ModifyAutoScalingConfigResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * You can call this operation to modify the following auto scaling configurations of an instance: **auto scaling for specifications**, **automatic storage expansion**, **automatic bandwidth adjustment**, and **auto scaling for resources**.
 * *   You can modify the configurations of the **auto scaling feature for specifications** for the following types of database instances:
 *     *   PolarDB for MySQL Cluster Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](~~169686~~).
 *     *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or enhanced SSDs (ESSDs). For more information about the feature and the billing rules, see [Automatic performance scaling](~~169686~~).
 * *   You can modify the configurations of the **automatic storage expansion** feature for the following types of database instances:
 *     *   ApsaraDB RDS for MySQL High-availability Edition instances that use standard SSDs or ESSDs. For more information about the feature and the billing rules, see [Automatic space expansion](~~173345~~).
 * *   You can modify the configurations of the **automatic bandwidth adjustment** feature for the following types of database instances:
 *     *   ApsaraDB for Redis Classic (Local Disk-based) Edition instances. For more information about the feature and the billing rules, see [Automatic bandwidth adjustment](~~216312~~).
 * *   You can modify the configurations of the **auto scaling feature for resources** for the following types of database instances:
 *     *   General-purpose ApsaraDB RDS for MySQL Enterprise Edition instances. For more information about the feature and the billing rules, see [Automatic performance scaling](~~169686~~).
 * *   If you use an Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call API operations of DAS, you must set the region ID to cn-shanghai.
 *
 * @param request ModifyAutoScalingConfigRequest
 * @return ModifyAutoScalingConfigResponse
 */
func (client *Client) ModifyAutoScalingConfig(request *ModifyAutoScalingConfigRequest) (_result *ModifyAutoScalingConfigResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &ModifyAutoScalingConfigResponse{}
	_body, _err := client.ModifyAutoScalingConfigWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request RunCloudBenchTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return RunCloudBenchTaskResponse
 */
func (client *Client) RunCloudBenchTaskWithOptions(request *RunCloudBenchTaskRequest, runtime *util.RuntimeOptions) (_result *RunCloudBenchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("RunCloudBenchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &RunCloudBenchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request RunCloudBenchTaskRequest
 * @return RunCloudBenchTaskResponse
 */
func (client *Client) RunCloudBenchTask(request *RunCloudBenchTaskRequest) (_result *RunCloudBenchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &RunCloudBenchTaskResponse{}
	_body, _err := client.RunCloudBenchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   The database instance that you want to manage is connected to DAS.
 *
 * @param request SetEventSubscriptionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetEventSubscriptionResponse
 */
func (client *Client) SetEventSubscriptionWithOptions(request *SetEventSubscriptionRequest, runtime *util.RuntimeOptions) (_result *SetEventSubscriptionResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Active)) {
		query["Active"] = request.Active
	}

	if !tea.BoolValue(util.IsUnset(request.ChannelType)) {
		query["ChannelType"] = request.ChannelType
	}

	if !tea.BoolValue(util.IsUnset(request.ContactGroupName)) {
		query["ContactGroupName"] = request.ContactGroupName
	}

	if !tea.BoolValue(util.IsUnset(request.ContactName)) {
		query["ContactName"] = request.ContactName
	}

	if !tea.BoolValue(util.IsUnset(request.DispatchRule)) {
		query["DispatchRule"] = request.DispatchRule
	}

	if !tea.BoolValue(util.IsUnset(request.EventContext)) {
		query["EventContext"] = request.EventContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceId)) {
		query["InstanceId"] = request.InstanceId
	}

	if !tea.BoolValue(util.IsUnset(request.Lang)) {
		query["Lang"] = request.Lang
	}

	if !tea.BoolValue(util.IsUnset(request.Level)) {
		query["Level"] = request.Level
	}

	if !tea.BoolValue(util.IsUnset(request.MinInterval)) {
		query["MinInterval"] = request.MinInterval
	}

	if !tea.BoolValue(util.IsUnset(request.Severity)) {
		query["Severity"] = request.Severity
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SetEventSubscription"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SetEventSubscriptionResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use Alibaba Cloud SDK or Database Autonomy Service (DAS) SDK to call this operation, we recommend that you use the latest version of the SDK.
 * *   If you use an SDK to call operations of DAS, you must set the region ID to cn-shanghai.
 * *   The database instance that you want to manage is connected to DAS.
 *
 * @param request SetEventSubscriptionRequest
 * @return SetEventSubscriptionResponse
 */
func (client *Client) SetEventSubscription(request *SetEventSubscriptionRequest) (_result *SetEventSubscriptionResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SetEventSubscriptionResponse{}
	_body, _err := client.SetEventSubscriptionWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request StopCloudBenchTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return StopCloudBenchTaskResponse
 */
func (client *Client) StopCloudBenchTaskWithOptions(request *StopCloudBenchTaskRequest, runtime *util.RuntimeOptions) (_result *StopCloudBenchTaskResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.TaskId)) {
		query["TaskId"] = request.TaskId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("StopCloudBenchTask"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &StopCloudBenchTaskResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Database Autonomy Service (DAS) provides the intelligent stress testing feature. This feature helps you check whether your instance needs to be scaled up to effectively handle traffic spikes. For more information, see [Intelligent stress testing](~~155068~~).
 *
 * @param request StopCloudBenchTaskRequest
 * @return StopCloudBenchTaskResponse
 */
func (client *Client) StopCloudBenchTask(request *StopCloudBenchTaskRequest) (_result *StopCloudBenchTaskResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &StopCloudBenchTaskResponse{}
	_body, _err := client.StopCloudBenchTaskWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

func (client *Client) SyncHDMAliyunResourceWithOptions(request *SyncHDMAliyunResourceRequest, runtime *util.RuntimeOptions) (_result *SyncHDMAliyunResourceResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Async)) {
		query["Async"] = request.Async
	}

	if !tea.BoolValue(util.IsUnset(request.ResourceTypes)) {
		query["ResourceTypes"] = request.ResourceTypes
	}

	if !tea.BoolValue(util.IsUnset(request.Uid)) {
		query["Uid"] = request.Uid
	}

	if !tea.BoolValue(util.IsUnset(request.UserId)) {
		query["UserId"] = request.UserId
	}

	if !tea.BoolValue(util.IsUnset(request.WaitForModifySecurityIps)) {
		query["WaitForModifySecurityIps"] = request.WaitForModifySecurityIps
	}

	if !tea.BoolValue(util.IsUnset(request.Context)) {
		query["__context"] = request.Context
	}

	if !tea.BoolValue(util.IsUnset(request.AccessKey)) {
		query["accessKey"] = request.AccessKey
	}

	if !tea.BoolValue(util.IsUnset(request.Signature)) {
		query["signature"] = request.Signature
	}

	if !tea.BoolValue(util.IsUnset(request.SkipAuth)) {
		query["skipAuth"] = request.SkipAuth
	}

	if !tea.BoolValue(util.IsUnset(request.Timestamp)) {
		query["timestamp"] = request.Timestamp
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("SyncHDMAliyunResource"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &SyncHDMAliyunResourceResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

func (client *Client) SyncHDMAliyunResource(request *SyncHDMAliyunResourceRequest) (_result *SyncHDMAliyunResourceResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &SyncHDMAliyunResourceResponse{}
	_body, _err := client.SyncHDMAliyunResourceWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not immediately returned. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   The database instance is an ApsaraDB RDS for MySQL High-availability Edition instance.
 * *   DAS Professional Edition is enabled for the database instance. You can call the [DescribeInstanceDasPro](~~413866~~) operation to check whether DAS Professional Edition is enabled for a database instance.
 * *   The database instance has four or more cores, and **innodb_file_per_table** is set to **ON**.
 *
 * @param request UpdateAutoResourceOptimizeRulesAsyncRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAutoResourceOptimizeRulesAsyncResponse
 */
func (client *Client) UpdateAutoResourceOptimizeRulesAsyncWithOptions(request *UpdateAutoResourceOptimizeRulesAsyncRequest, runtime *util.RuntimeOptions) (_result *UpdateAutoResourceOptimizeRulesAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.ResultId)) {
		query["ResultId"] = request.ResultId
	}

	if !tea.BoolValue(util.IsUnset(request.TableFragmentationRatio)) {
		query["TableFragmentationRatio"] = request.TableFragmentationRatio
	}

	if !tea.BoolValue(util.IsUnset(request.TableSpaceSize)) {
		query["TableSpaceSize"] = request.TableSpaceSize
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAutoResourceOptimizeRulesAsync"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAutoResourceOptimizeRulesAsyncResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not immediately returned. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   The database instance is an ApsaraDB RDS for MySQL High-availability Edition instance.
 * *   DAS Professional Edition is enabled for the database instance. You can call the [DescribeInstanceDasPro](~~413866~~) operation to check whether DAS Professional Edition is enabled for a database instance.
 * *   The database instance has four or more cores, and **innodb_file_per_table** is set to **ON**.
 *
 * @param request UpdateAutoResourceOptimizeRulesAsyncRequest
 * @return UpdateAutoResourceOptimizeRulesAsyncResponse
 */
func (client *Client) UpdateAutoResourceOptimizeRulesAsync(request *UpdateAutoResourceOptimizeRulesAsyncRequest) (_result *UpdateAutoResourceOptimizeRulesAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAutoResourceOptimizeRulesAsyncResponse{}
	_body, _err := client.UpdateAutoResourceOptimizeRulesAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   DAS Professional Edition is enabled for the database instance that you want to manage. To enable DAS Professional Edition for a database instance, you can call the [EnableDasPro](~~411645~~) operation.
 * *   The autonomy service is enabled for the database instance. For more information, see [Autonomy center](~~152139~~).
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL High-availability Edition and Enterprise Edition
 *     *   PolarDB for MySQL Cluster Edition and X-Engine Edition
 *
 * @param request UpdateAutoSqlOptimizeStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAutoSqlOptimizeStatusResponse
 */
func (client *Client) UpdateAutoSqlOptimizeStatusWithOptions(request *UpdateAutoSqlOptimizeStatusRequest, runtime *util.RuntimeOptions) (_result *UpdateAutoSqlOptimizeStatusResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.Instances)) {
		query["Instances"] = request.Instances
	}

	if !tea.BoolValue(util.IsUnset(request.Status)) {
		query["Status"] = request.Status
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAutoSqlOptimizeStatus"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAutoSqlOptimizeStatusResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   DAS Professional Edition is enabled for the database instance that you want to manage. To enable DAS Professional Edition for a database instance, you can call the [EnableDasPro](~~411645~~) operation.
 * *   The autonomy service is enabled for the database instance. For more information, see [Autonomy center](~~152139~~).
 * *   This operation supports the following database engines:
 *     *   ApsaraDB RDS for MySQL High-availability Edition and Enterprise Edition
 *     *   PolarDB for MySQL Cluster Edition and X-Engine Edition
 *
 * @param request UpdateAutoSqlOptimizeStatusRequest
 * @return UpdateAutoSqlOptimizeStatusResponse
 */
func (client *Client) UpdateAutoSqlOptimizeStatus(request *UpdateAutoSqlOptimizeStatusRequest) (_result *UpdateAutoSqlOptimizeStatusResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAutoSqlOptimizeStatusResponse{}
	_body, _err := client.UpdateAutoSqlOptimizeStatusWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not immediately returned. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   Enable Autonomy Service is turned on for the database instance. For more information, see [Autonomy center](~~152139~~).
 * *   The database instance that you want to manage is of one of the following types:
 *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0.
 *     *   PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0, and PolarDB for MySQL X-Engine Edition that runs MySQL 8.0.
 *
 * @param request UpdateAutoThrottleRulesAsyncRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAutoThrottleRulesAsyncResponse
 */
func (client *Client) UpdateAutoThrottleRulesAsyncWithOptions(request *UpdateAutoThrottleRulesAsyncRequest, runtime *util.RuntimeOptions) (_result *UpdateAutoThrottleRulesAsyncResponse, _err error) {
	_err = util.ValidateModel(request)
	if _err != nil {
		return _result, _err
	}
	query := map[string]interface{}{}
	if !tea.BoolValue(util.IsUnset(request.AbnormalDuration)) {
		query["AbnormalDuration"] = request.AbnormalDuration
	}

	if !tea.BoolValue(util.IsUnset(request.ActiveSessions)) {
		query["ActiveSessions"] = request.ActiveSessions
	}

	if !tea.BoolValue(util.IsUnset(request.AllowThrottleEndTime)) {
		query["AllowThrottleEndTime"] = request.AllowThrottleEndTime
	}

	if !tea.BoolValue(util.IsUnset(request.AllowThrottleStartTime)) {
		query["AllowThrottleStartTime"] = request.AllowThrottleStartTime
	}

	if !tea.BoolValue(util.IsUnset(request.AutoKillSession)) {
		query["AutoKillSession"] = request.AutoKillSession
	}

	if !tea.BoolValue(util.IsUnset(request.ConsoleContext)) {
		query["ConsoleContext"] = request.ConsoleContext
	}

	if !tea.BoolValue(util.IsUnset(request.CpuSessionRelation)) {
		query["CpuSessionRelation"] = request.CpuSessionRelation
	}

	if !tea.BoolValue(util.IsUnset(request.CpuUsage)) {
		query["CpuUsage"] = request.CpuUsage
	}

	if !tea.BoolValue(util.IsUnset(request.InstanceIds)) {
		query["InstanceIds"] = request.InstanceIds
	}

	if !tea.BoolValue(util.IsUnset(request.MaxThrottleTime)) {
		query["MaxThrottleTime"] = request.MaxThrottleTime
	}

	if !tea.BoolValue(util.IsUnset(request.ResultId)) {
		query["ResultId"] = request.ResultId
	}

	req := &openapi.OpenApiRequest{
		Query: openapiutil.Query(query),
	}
	params := &openapi.Params{
		Action:      tea.String("UpdateAutoThrottleRulesAsync"),
		Version:     tea.String("2020-01-16"),
		Protocol:    tea.String("HTTPS"),
		Pathname:    tea.String("/"),
		Method:      tea.String("POST"),
		AuthType:    tea.String("AK"),
		Style:       tea.String("RPC"),
		ReqBodyType: tea.String("formData"),
		BodyType:    tea.String("json"),
	}
	_result = &UpdateAutoThrottleRulesAsyncResponse{}
	_body, _err := client.CallApi(params, req, runtime)
	if _err != nil {
		return _result, _err
	}
	_err = tea.Convert(_body, &_result)
	return _result, _err
}

/**
 * >  When an asynchronous call is made, the complete query results are not immediately returned. If the value of **isFinish** is **false** in the response, wait for 1 second and then re-initiate the call. The complete query results are returned until the value of **isFinish** is **true**.
 * Before you call this operation, take note of the following items:
 * *   If you use an SDK to call operations of Database Autonomy Service (DAS), you must set the region ID to cn-shanghai.
 * *   Enable Autonomy Service is turned on for the database instance. For more information, see [Autonomy center](~~152139~~).
 * *   The database instance that you want to manage is of one of the following types:
 *     *   ApsaraDB RDS for MySQL High-availability Edition or Enterprise Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0.
 *     *   PolarDB for MySQL Cluster Edition that runs MySQL 5.6, MySQL 5.7, or MySQL 8.0, and PolarDB for MySQL X-Engine Edition that runs MySQL 8.0.
 *
 * @param request UpdateAutoThrottleRulesAsyncRequest
 * @return UpdateAutoThrottleRulesAsyncResponse
 */
func (client *Client) UpdateAutoThrottleRulesAsync(request *UpdateAutoThrottleRulesAsyncRequest) (_result *UpdateAutoThrottleRulesAsyncResponse, _err error) {
	runtime := &util.RuntimeOptions{}
	_result = &UpdateAutoThrottleRulesAsyncResponse{}
	_body, _err := client.UpdateAutoThrottleRulesAsyncWithOptions(request, runtime)
	if _err != nil {
		return _result, _err
	}
	_result = _body
	return _result, _err
}
